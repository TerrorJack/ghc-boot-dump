
==================== Raw Cmm ====================
2018-03-16 15:57:30.930151101 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:57:30.933848208 UTC

[section ""data" . GHC.Float.$p1Floating_closure" {
     GHC.Float.$p1Floating_closure:
         const GHC.Float.$p1Floating_info;
 },
 GHC.Float.$p1Floating_entry() //  [R2]
         { []
         }
     {offset
       c33Z9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c33Za; else goto c33Zb;
       c33Za: // global
           R2 = R2;
           R1 = GHC.Float.$p1Floating_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c33Zb: // global
           I64[Sp - 8] = block_c33Z6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u33Zf; else goto c33Z7;
       u33Zf: // global
           call _c33Z6(R1) args: 0, res: 0, upd: 0;
       c33Z7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$p1Floating_info" {
     GHC.Float.$p1Floating_info:
         const GHC.Float.$p1Floating_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c33Z6() //  [R1]
         { []
         }
     {offset
       c33Z6: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c33Z6_info" {
     block_c33Z6_info:
         const _c33Z6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.939738107 UTC

[section ""data" . GHC.Float.pi_closure" {
     GHC.Float.pi_closure:
         const GHC.Float.pi_info;
 },
 GHC.Float.pi_entry() //  [R2]
         { []
         }
     {offset
       c33Zy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c33Zz; else goto c33ZA;
       c33Zz: // global
           R2 = R2;
           R1 = GHC.Float.pi_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c33ZA: // global
           I64[Sp - 8] = block_c33Zv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u33ZE; else goto c33Zw;
       u33ZE: // global
           call _c33Zv(R1) args: 0, res: 0, upd: 0;
       c33Zw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.pi_info" {
     GHC.Float.pi_info:
         const GHC.Float.pi_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c33Zv() //  [R1]
         { []
         }
     {offset
       c33Zv: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c33Zv_info" {
     block_c33Zv_info:
         const _c33Zv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.945568372 UTC

[section ""data" . GHC.Float.exp_closure" {
     GHC.Float.exp_closure:
         const GHC.Float.exp_info;
 },
 GHC.Float.exp_entry() //  [R2]
         { []
         }
     {offset
       c33ZV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c33ZW; else goto c33ZX;
       c33ZW: // global
           R2 = R2;
           R1 = GHC.Float.exp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c33ZX: // global
           I64[Sp - 8] = block_c33ZS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3401; else goto c33ZT;
       u3401: // global
           call _c33ZS(R1) args: 0, res: 0, upd: 0;
       c33ZT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.exp_info" {
     GHC.Float.exp_info:
         const GHC.Float.exp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c33ZS() //  [R1]
         { []
         }
     {offset
       c33ZS: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c33ZS_info" {
     block_c33ZS_info:
         const _c33ZS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.951510125 UTC

[section ""data" . GHC.Float.log_closure" {
     GHC.Float.log_closure:
         const GHC.Float.log_info;
 },
 GHC.Float.log_entry() //  [R2]
         { []
         }
     {offset
       c340i: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c340j; else goto c340k;
       c340j: // global
           R2 = R2;
           R1 = GHC.Float.log_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c340k: // global
           I64[Sp - 8] = block_c340f_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u340o; else goto c340g;
       u340o: // global
           call _c340f(R1) args: 0, res: 0, upd: 0;
       c340g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log_info" {
     GHC.Float.log_info:
         const GHC.Float.log_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c340f() //  [R1]
         { []
         }
     {offset
       c340f: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c340f_info" {
     block_c340f_info:
         const _c340f;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.957346555 UTC

[section ""data" . GHC.Float.sqrt_closure" {
     GHC.Float.sqrt_closure:
         const GHC.Float.sqrt_info;
 },
 GHC.Float.sqrt_entry() //  [R2]
         { []
         }
     {offset
       c340F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c340G; else goto c340H;
       c340G: // global
           R2 = R2;
           R1 = GHC.Float.sqrt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c340H: // global
           I64[Sp - 8] = block_c340C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u340L; else goto c340D;
       u340L: // global
           call _c340C(R1) args: 0, res: 0, upd: 0;
       c340D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sqrt_info" {
     GHC.Float.sqrt_info:
         const GHC.Float.sqrt_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c340C() //  [R1]
         { []
         }
     {offset
       c340C: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c340C_info" {
     block_c340C_info:
         const _c340C;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.963528884 UTC

[section ""data" . GHC.Float.**_closure" {
     GHC.Float.**_closure:
         const GHC.Float.**_info;
 },
 GHC.Float.**_entry() //  [R2]
         { []
         }
     {offset
       c3412: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3413; else goto c3414;
       c3413: // global
           R2 = R2;
           R1 = GHC.Float.**_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3414: // global
           I64[Sp - 8] = block_c340Z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3418; else goto c3410;
       u3418: // global
           call _c340Z(R1) args: 0, res: 0, upd: 0;
       c3410: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.**_info" {
     GHC.Float.**_info:
         const GHC.Float.**_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c340Z() //  [R1]
         { []
         }
     {offset
       c340Z: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c340Z_info" {
     block_c340Z_info:
         const _c340Z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.970118533 UTC

[section ""data" . GHC.Float.logBase_closure" {
     GHC.Float.logBase_closure:
         const GHC.Float.logBase_info;
 },
 GHC.Float.logBase_entry() //  [R2]
         { []
         }
     {offset
       c341p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c341q; else goto c341r;
       c341q: // global
           R2 = R2;
           R1 = GHC.Float.logBase_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c341r: // global
           I64[Sp - 8] = block_c341m_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u341v; else goto c341n;
       u341v: // global
           call _c341m(R1) args: 0, res: 0, upd: 0;
       c341n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.logBase_info" {
     GHC.Float.logBase_info:
         const GHC.Float.logBase_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c341m() //  [R1]
         { []
         }
     {offset
       c341m: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c341m_info" {
     block_c341m_info:
         const _c341m;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.975907401 UTC

[section ""data" . GHC.Float.sin_closure" {
     GHC.Float.sin_closure:
         const GHC.Float.sin_info;
 },
 GHC.Float.sin_entry() //  [R2]
         { []
         }
     {offset
       c341M: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c341N; else goto c341O;
       c341N: // global
           R2 = R2;
           R1 = GHC.Float.sin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c341O: // global
           I64[Sp - 8] = block_c341J_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u341S; else goto c341K;
       u341S: // global
           call _c341J(R1) args: 0, res: 0, upd: 0;
       c341K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sin_info" {
     GHC.Float.sin_info:
         const GHC.Float.sin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c341J() //  [R1]
         { []
         }
     {offset
       c341J: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c341J_info" {
     block_c341J_info:
         const _c341J;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.982665836 UTC

[section ""data" . GHC.Float.cos_closure" {
     GHC.Float.cos_closure:
         const GHC.Float.cos_info;
 },
 GHC.Float.cos_entry() //  [R2]
         { []
         }
     {offset
       c3429: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c342a; else goto c342b;
       c342a: // global
           R2 = R2;
           R1 = GHC.Float.cos_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c342b: // global
           I64[Sp - 8] = block_c3426_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u342f; else goto c3427;
       u342f: // global
           call _c3426(R1) args: 0, res: 0, upd: 0;
       c3427: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.cos_info" {
     GHC.Float.cos_info:
         const GHC.Float.cos_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3426() //  [R1]
         { []
         }
     {offset
       c3426: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3426_info" {
     block_c3426_info:
         const _c3426;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.988549876 UTC

[section ""data" . GHC.Float.tan_closure" {
     GHC.Float.tan_closure:
         const GHC.Float.tan_info;
 },
 GHC.Float.tan_entry() //  [R2]
         { []
         }
     {offset
       c342w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c342x; else goto c342y;
       c342x: // global
           R2 = R2;
           R1 = GHC.Float.tan_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c342y: // global
           I64[Sp - 8] = block_c342t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u342C; else goto c342u;
       u342C: // global
           call _c342t(R1) args: 0, res: 0, upd: 0;
       c342u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tan_info" {
     GHC.Float.tan_info:
         const GHC.Float.tan_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c342t() //  [R1]
         { []
         }
     {offset
       c342t: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c342t_info" {
     block_c342t_info:
         const _c342t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:30.994557964 UTC

[section ""data" . GHC.Float.asin_closure" {
     GHC.Float.asin_closure:
         const GHC.Float.asin_info;
 },
 GHC.Float.asin_entry() //  [R2]
         { []
         }
     {offset
       c342T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c342U; else goto c342V;
       c342U: // global
           R2 = R2;
           R1 = GHC.Float.asin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c342V: // global
           I64[Sp - 8] = block_c342Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u342Z; else goto c342R;
       u342Z: // global
           call _c342Q(R1) args: 0, res: 0, upd: 0;
       c342R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.asin_info" {
     GHC.Float.asin_info:
         const GHC.Float.asin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c342Q() //  [R1]
         { []
         }
     {offset
       c342Q: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c342Q_info" {
     block_c342Q_info:
         const _c342Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.001093261 UTC

[section ""data" . GHC.Float.acos_closure" {
     GHC.Float.acos_closure:
         const GHC.Float.acos_info;
 },
 GHC.Float.acos_entry() //  [R2]
         { []
         }
     {offset
       c343g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c343h; else goto c343i;
       c343h: // global
           R2 = R2;
           R1 = GHC.Float.acos_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c343i: // global
           I64[Sp - 8] = block_c343d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u343m; else goto c343e;
       u343m: // global
           call _c343d(R1) args: 0, res: 0, upd: 0;
       c343e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.acos_info" {
     GHC.Float.acos_info:
         const GHC.Float.acos_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c343d() //  [R1]
         { []
         }
     {offset
       c343d: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c343d_info" {
     block_c343d_info:
         const _c343d;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.007290506 UTC

[section ""data" . GHC.Float.atan_closure" {
     GHC.Float.atan_closure:
         const GHC.Float.atan_info;
 },
 GHC.Float.atan_entry() //  [R2]
         { []
         }
     {offset
       c343D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c343E; else goto c343F;
       c343E: // global
           R2 = R2;
           R1 = GHC.Float.atan_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c343F: // global
           I64[Sp - 8] = block_c343A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u343J; else goto c343B;
       u343J: // global
           call _c343A(R1) args: 0, res: 0, upd: 0;
       c343B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atan_info" {
     GHC.Float.atan_info:
         const GHC.Float.atan_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c343A() //  [R1]
         { []
         }
     {offset
       c343A: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c343A_info" {
     block_c343A_info:
         const _c343A;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.012887764 UTC

[section ""data" . GHC.Float.sinh_closure" {
     GHC.Float.sinh_closure:
         const GHC.Float.sinh_info;
 },
 GHC.Float.sinh_entry() //  [R2]
         { []
         }
     {offset
       c3440: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3441; else goto c3442;
       c3441: // global
           R2 = R2;
           R1 = GHC.Float.sinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3442: // global
           I64[Sp - 8] = block_c343X_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3446; else goto c343Y;
       u3446: // global
           call _c343X(R1) args: 0, res: 0, upd: 0;
       c343Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinh_info" {
     GHC.Float.sinh_info:
         const GHC.Float.sinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c343X() //  [R1]
         { []
         }
     {offset
       c343X: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c343X_info" {
     block_c343X_info:
         const _c343X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.018955518 UTC

[section ""data" . GHC.Float.cosh_closure" {
     GHC.Float.cosh_closure:
         const GHC.Float.cosh_info;
 },
 GHC.Float.cosh_entry() //  [R2]
         { []
         }
     {offset
       c344n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c344o; else goto c344p;
       c344o: // global
           R2 = R2;
           R1 = GHC.Float.cosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c344p: // global
           I64[Sp - 8] = block_c344k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u344t; else goto c344l;
       u344t: // global
           call _c344k(R1) args: 0, res: 0, upd: 0;
       c344l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.cosh_info" {
     GHC.Float.cosh_info:
         const GHC.Float.cosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c344k() //  [R1]
         { []
         }
     {offset
       c344k: // global
           R1 = P64[R1 + 119];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c344k_info" {
     block_c344k_info:
         const _c344k;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.024551844 UTC

[section ""data" . GHC.Float.tanh_closure" {
     GHC.Float.tanh_closure:
         const GHC.Float.tanh_info;
 },
 GHC.Float.tanh_entry() //  [R2]
         { []
         }
     {offset
       c344K: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c344L; else goto c344M;
       c344L: // global
           R2 = R2;
           R1 = GHC.Float.tanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c344M: // global
           I64[Sp - 8] = block_c344H_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u344Q; else goto c344I;
       u344Q: // global
           call _c344H(R1) args: 0, res: 0, upd: 0;
       c344I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanh_info" {
     GHC.Float.tanh_info:
         const GHC.Float.tanh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c344H() //  [R1]
         { []
         }
     {offset
       c344H: // global
           R1 = P64[R1 + 127];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c344H_info" {
     block_c344H_info:
         const _c344H;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.030436753 UTC

[section ""data" . GHC.Float.asinh_closure" {
     GHC.Float.asinh_closure:
         const GHC.Float.asinh_info;
 },
 GHC.Float.asinh_entry() //  [R2]
         { []
         }
     {offset
       c3457: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3458; else goto c3459;
       c3458: // global
           R2 = R2;
           R1 = GHC.Float.asinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3459: // global
           I64[Sp - 8] = block_c3454_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u345d; else goto c3455;
       u345d: // global
           call _c3454(R1) args: 0, res: 0, upd: 0;
       c3455: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.asinh_info" {
     GHC.Float.asinh_info:
         const GHC.Float.asinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3454() //  [R1]
         { []
         }
     {offset
       c3454: // global
           R1 = P64[R1 + 135];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3454_info" {
     block_c3454_info:
         const _c3454;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.036706416 UTC

[section ""data" . GHC.Float.acosh_closure" {
     GHC.Float.acosh_closure:
         const GHC.Float.acosh_info;
 },
 GHC.Float.acosh_entry() //  [R2]
         { []
         }
     {offset
       c345u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c345v; else goto c345w;
       c345v: // global
           R2 = R2;
           R1 = GHC.Float.acosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c345w: // global
           I64[Sp - 8] = block_c345r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u345A; else goto c345s;
       u345A: // global
           call _c345r(R1) args: 0, res: 0, upd: 0;
       c345s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.acosh_info" {
     GHC.Float.acosh_info:
         const GHC.Float.acosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c345r() //  [R1]
         { []
         }
     {offset
       c345r: // global
           R1 = P64[R1 + 143];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c345r_info" {
     block_c345r_info:
         const _c345r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.043008247 UTC

[section ""data" . GHC.Float.atanh_closure" {
     GHC.Float.atanh_closure:
         const GHC.Float.atanh_info;
 },
 GHC.Float.atanh_entry() //  [R2]
         { []
         }
     {offset
       c345R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c345S; else goto c345T;
       c345S: // global
           R2 = R2;
           R1 = GHC.Float.atanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c345T: // global
           I64[Sp - 8] = block_c345O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u345X; else goto c345P;
       u345X: // global
           call _c345O(R1) args: 0, res: 0, upd: 0;
       c345P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atanh_info" {
     GHC.Float.atanh_info:
         const GHC.Float.atanh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c345O() //  [R1]
         { []
         }
     {offset
       c345O: // global
           R1 = P64[R1 + 151];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c345O_info" {
     block_c345O_info:
         const _c345O;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.048866691 UTC

[section ""data" . GHC.Float.log1p_closure" {
     GHC.Float.log1p_closure:
         const GHC.Float.log1p_info;
 },
 GHC.Float.log1p_entry() //  [R2]
         { []
         }
     {offset
       c346e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c346f; else goto c346g;
       c346f: // global
           R2 = R2;
           R1 = GHC.Float.log1p_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c346g: // global
           I64[Sp - 8] = block_c346b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u346k; else goto c346c;
       u346k: // global
           call _c346b(R1) args: 0, res: 0, upd: 0;
       c346c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1p_info" {
     GHC.Float.log1p_info:
         const GHC.Float.log1p_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c346b() //  [R1]
         { []
         }
     {offset
       c346b: // global
           R1 = P64[R1 + 159];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c346b_info" {
     block_c346b_info:
         const _c346b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.054661656 UTC

[section ""data" . GHC.Float.expm1_closure" {
     GHC.Float.expm1_closure:
         const GHC.Float.expm1_info;
 },
 GHC.Float.expm1_entry() //  [R2]
         { []
         }
     {offset
       c346B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c346C; else goto c346D;
       c346C: // global
           R2 = R2;
           R1 = GHC.Float.expm1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c346D: // global
           I64[Sp - 8] = block_c346y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u346H; else goto c346z;
       u346H: // global
           call _c346y(R1) args: 0, res: 0, upd: 0;
       c346z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expm1_info" {
     GHC.Float.expm1_info:
         const GHC.Float.expm1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c346y() //  [R1]
         { []
         }
     {offset
       c346y: // global
           R1 = P64[R1 + 167];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c346y_info" {
     block_c346y_info:
         const _c346y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.060410261 UTC

[section ""data" . GHC.Float.log1pexp_closure" {
     GHC.Float.log1pexp_closure:
         const GHC.Float.log1pexp_info;
 },
 GHC.Float.log1pexp_entry() //  [R2]
         { []
         }
     {offset
       c346Y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c346Z; else goto c3470;
       c346Z: // global
           R2 = R2;
           R1 = GHC.Float.log1pexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3470: // global
           I64[Sp - 8] = block_c346V_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3474; else goto c346W;
       u3474: // global
           call _c346V(R1) args: 0, res: 0, upd: 0;
       c346W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1pexp_info" {
     GHC.Float.log1pexp_info:
         const GHC.Float.log1pexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c346V() //  [R1]
         { []
         }
     {offset
       c346V: // global
           R1 = P64[R1 + 175];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c346V_info" {
     block_c346V_info:
         const _c346V;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.067078953 UTC

[section ""data" . GHC.Float.log1mexp_closure" {
     GHC.Float.log1mexp_closure:
         const GHC.Float.log1mexp_info;
 },
 GHC.Float.log1mexp_entry() //  [R2]
         { []
         }
     {offset
       c347l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c347m; else goto c347n;
       c347m: // global
           R2 = R2;
           R1 = GHC.Float.log1mexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c347n: // global
           I64[Sp - 8] = block_c347i_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u347r; else goto c347j;
       u347r: // global
           call _c347i(R1) args: 0, res: 0, upd: 0;
       c347j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1mexp_info" {
     GHC.Float.log1mexp_info:
         const GHC.Float.log1mexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c347i() //  [R1]
         { []
         }
     {offset
       c347i: // global
           R1 = P64[R1 + 183];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c347i_info" {
     block_c347i_info:
         const _c347i;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.072874971 UTC

[section ""data" . GHC.Float.$p1RealFloat_closure" {
     GHC.Float.$p1RealFloat_closure:
         const GHC.Float.$p1RealFloat_info;
 },
 GHC.Float.$p1RealFloat_entry() //  [R2]
         { []
         }
     {offset
       c347I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c347J; else goto c347K;
       c347J: // global
           R2 = R2;
           R1 = GHC.Float.$p1RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c347K: // global
           I64[Sp - 8] = block_c347F_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u347O; else goto c347G;
       u347O: // global
           call _c347F(R1) args: 0, res: 0, upd: 0;
       c347G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$p1RealFloat_info" {
     GHC.Float.$p1RealFloat_info:
         const GHC.Float.$p1RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c347F() //  [R1]
         { []
         }
     {offset
       c347F: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c347F_info" {
     block_c347F_info:
         const _c347F;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.079035529 UTC

[section ""data" . GHC.Float.$p2RealFloat_closure" {
     GHC.Float.$p2RealFloat_closure:
         const GHC.Float.$p2RealFloat_info;
 },
 GHC.Float.$p2RealFloat_entry() //  [R2]
         { []
         }
     {offset
       c3487: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3488; else goto c3489;
       c3488: // global
           R2 = R2;
           R1 = GHC.Float.$p2RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3489: // global
           I64[Sp - 8] = block_c3484_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u348d; else goto c3485;
       u348d: // global
           call _c3484(R1) args: 0, res: 0, upd: 0;
       c3485: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$p2RealFloat_info" {
     GHC.Float.$p2RealFloat_info:
         const GHC.Float.$p2RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3484() //  [R1]
         { []
         }
     {offset
       c3484: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3484_info" {
     block_c3484_info:
         const _c3484;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.084840545 UTC

[section ""data" . GHC.Float.floatRadix_closure" {
     GHC.Float.floatRadix_closure:
         const GHC.Float.floatRadix_info;
 },
 GHC.Float.floatRadix_entry() //  [R2]
         { []
         }
     {offset
       c348w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c348x; else goto c348y;
       c348x: // global
           R2 = R2;
           R1 = GHC.Float.floatRadix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c348y: // global
           I64[Sp - 8] = block_c348t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u348C; else goto c348u;
       u348C: // global
           call _c348t(R1) args: 0, res: 0, upd: 0;
       c348u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.floatRadix_info" {
     GHC.Float.floatRadix_info:
         const GHC.Float.floatRadix_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c348t() //  [R1]
         { []
         }
     {offset
       c348t: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c348t_info" {
     block_c348t_info:
         const _c348t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.091188338 UTC

[section ""data" . GHC.Float.floatDigits_closure" {
     GHC.Float.floatDigits_closure:
         const GHC.Float.floatDigits_info;
 },
 GHC.Float.floatDigits_entry() //  [R2]
         { []
         }
     {offset
       c348T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c348U; else goto c348V;
       c348U: // global
           R2 = R2;
           R1 = GHC.Float.floatDigits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c348V: // global
           I64[Sp - 8] = block_c348Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u348Z; else goto c348R;
       u348Z: // global
           call _c348Q(R1) args: 0, res: 0, upd: 0;
       c348R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.floatDigits_info" {
     GHC.Float.floatDigits_info:
         const GHC.Float.floatDigits_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c348Q() //  [R1]
         { []
         }
     {offset
       c348Q: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c348Q_info" {
     block_c348Q_info:
         const _c348Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.097974593 UTC

[section ""data" . GHC.Float.floatRange_closure" {
     GHC.Float.floatRange_closure:
         const GHC.Float.floatRange_info;
 },
 GHC.Float.floatRange_entry() //  [R2]
         { []
         }
     {offset
       c349g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c349h; else goto c349i;
       c349h: // global
           R2 = R2;
           R1 = GHC.Float.floatRange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c349i: // global
           I64[Sp - 8] = block_c349d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u349m; else goto c349e;
       u349m: // global
           call _c349d(R1) args: 0, res: 0, upd: 0;
       c349e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.floatRange_info" {
     GHC.Float.floatRange_info:
         const GHC.Float.floatRange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c349d() //  [R1]
         { []
         }
     {offset
       c349d: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c349d_info" {
     block_c349d_info:
         const _c349d;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.103663372 UTC

[section ""data" . GHC.Float.decodeFloat_closure" {
     GHC.Float.decodeFloat_closure:
         const GHC.Float.decodeFloat_info;
 },
 GHC.Float.decodeFloat_entry() //  [R2]
         { []
         }
     {offset
       c349D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c349E; else goto c349F;
       c349E: // global
           R2 = R2;
           R1 = GHC.Float.decodeFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c349F: // global
           I64[Sp - 8] = block_c349A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u349J; else goto c349B;
       u349J: // global
           call _c349A(R1) args: 0, res: 0, upd: 0;
       c349B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.decodeFloat_info" {
     GHC.Float.decodeFloat_info:
         const GHC.Float.decodeFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c349A() //  [R1]
         { []
         }
     {offset
       c349A: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c349A_info" {
     block_c349A_info:
         const _c349A;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.111009856 UTC

[section ""data" . GHC.Float.encodeFloat_closure" {
     GHC.Float.encodeFloat_closure:
         const GHC.Float.encodeFloat_info;
 },
 GHC.Float.encodeFloat_entry() //  [R2]
         { []
         }
     {offset
       c34a0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34a1; else goto c34a2;
       c34a1: // global
           R2 = R2;
           R1 = GHC.Float.encodeFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34a2: // global
           I64[Sp - 8] = block_c349X_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34a6; else goto c349Y;
       u34a6: // global
           call _c349X(R1) args: 0, res: 0, upd: 0;
       c349Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.encodeFloat_info" {
     GHC.Float.encodeFloat_info:
         const GHC.Float.encodeFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c349X() //  [R1]
         { []
         }
     {offset
       c349X: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c349X_info" {
     block_c349X_info:
         const _c349X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.117812243 UTC

[section ""data" . GHC.Float.exponent_closure" {
     GHC.Float.exponent_closure:
         const GHC.Float.exponent_info;
 },
 GHC.Float.exponent_entry() //  [R2]
         { []
         }
     {offset
       c34an: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34ao; else goto c34ap;
       c34ao: // global
           R2 = R2;
           R1 = GHC.Float.exponent_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34ap: // global
           I64[Sp - 8] = block_c34ak_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34at; else goto c34al;
       u34at: // global
           call _c34ak(R1) args: 0, res: 0, upd: 0;
       c34al: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.exponent_info" {
     GHC.Float.exponent_info:
         const GHC.Float.exponent_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34ak() //  [R1]
         { []
         }
     {offset
       c34ak: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34ak_info" {
     block_c34ak_info:
         const _c34ak;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.123946106 UTC

[section ""data" . GHC.Float.significand_closure" {
     GHC.Float.significand_closure:
         const GHC.Float.significand_info;
 },
 GHC.Float.significand_entry() //  [R2]
         { []
         }
     {offset
       c34aK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34aL; else goto c34aM;
       c34aL: // global
           R2 = R2;
           R1 = GHC.Float.significand_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34aM: // global
           I64[Sp - 8] = block_c34aH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34aQ; else goto c34aI;
       u34aQ: // global
           call _c34aH(R1) args: 0, res: 0, upd: 0;
       c34aI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.significand_info" {
     GHC.Float.significand_info:
         const GHC.Float.significand_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34aH() //  [R1]
         { []
         }
     {offset
       c34aH: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34aH_info" {
     block_c34aH_info:
         const _c34aH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.130016208 UTC

[section ""data" . GHC.Float.scaleFloat_closure" {
     GHC.Float.scaleFloat_closure:
         const GHC.Float.scaleFloat_info;
 },
 GHC.Float.scaleFloat_entry() //  [R2]
         { []
         }
     {offset
       c34b7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34b8; else goto c34b9;
       c34b8: // global
           R2 = R2;
           R1 = GHC.Float.scaleFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34b9: // global
           I64[Sp - 8] = block_c34b4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34bd; else goto c34b5;
       u34bd: // global
           call _c34b4(R1) args: 0, res: 0, upd: 0;
       c34b5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.scaleFloat_info" {
     GHC.Float.scaleFloat_info:
         const GHC.Float.scaleFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34b4() //  [R1]
         { []
         }
     {offset
       c34b4: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34b4_info" {
     block_c34b4_info:
         const _c34b4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.137375794 UTC

[section ""data" . GHC.Float.isNaN_closure" {
     GHC.Float.isNaN_closure:
         const GHC.Float.isNaN_info;
 },
 GHC.Float.isNaN_entry() //  [R2]
         { []
         }
     {offset
       c34bu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34bv; else goto c34bw;
       c34bv: // global
           R2 = R2;
           R1 = GHC.Float.isNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34bw: // global
           I64[Sp - 8] = block_c34br_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34bA; else goto c34bs;
       u34bA: // global
           call _c34br(R1) args: 0, res: 0, upd: 0;
       c34bs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isNaN_info" {
     GHC.Float.isNaN_info:
         const GHC.Float.isNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34br() //  [R1]
         { []
         }
     {offset
       c34br: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34br_info" {
     block_c34br_info:
         const _c34br;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.143167312 UTC

[section ""data" . GHC.Float.isInfinite_closure" {
     GHC.Float.isInfinite_closure:
         const GHC.Float.isInfinite_info;
 },
 GHC.Float.isInfinite_entry() //  [R2]
         { []
         }
     {offset
       c34bR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34bS; else goto c34bT;
       c34bS: // global
           R2 = R2;
           R1 = GHC.Float.isInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34bT: // global
           I64[Sp - 8] = block_c34bO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34bX; else goto c34bP;
       u34bX: // global
           call _c34bO(R1) args: 0, res: 0, upd: 0;
       c34bP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isInfinite_info" {
     GHC.Float.isInfinite_info:
         const GHC.Float.isInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34bO() //  [R1]
         { []
         }
     {offset
       c34bO: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34bO_info" {
     block_c34bO_info:
         const _c34bO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.14883493 UTC

[section ""data" . GHC.Float.isDenormalized_closure" {
     GHC.Float.isDenormalized_closure:
         const GHC.Float.isDenormalized_info;
 },
 GHC.Float.isDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c34ce: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34cf; else goto c34cg;
       c34cf: // global
           R2 = R2;
           R1 = GHC.Float.isDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34cg: // global
           I64[Sp - 8] = block_c34cb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34ck; else goto c34cc;
       u34ck: // global
           call _c34cb(R1) args: 0, res: 0, upd: 0;
       c34cc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDenormalized_info" {
     GHC.Float.isDenormalized_info:
         const GHC.Float.isDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34cb() //  [R1]
         { []
         }
     {offset
       c34cb: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34cb_info" {
     block_c34cb_info:
         const _c34cb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.155202565 UTC

[section ""data" . GHC.Float.isNegativeZero_closure" {
     GHC.Float.isNegativeZero_closure:
         const GHC.Float.isNegativeZero_info;
 },
 GHC.Float.isNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c34cB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34cC; else goto c34cD;
       c34cC: // global
           R2 = R2;
           R1 = GHC.Float.isNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34cD: // global
           I64[Sp - 8] = block_c34cy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34cH; else goto c34cz;
       u34cH: // global
           call _c34cy(R1) args: 0, res: 0, upd: 0;
       c34cz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isNegativeZero_info" {
     GHC.Float.isNegativeZero_info:
         const GHC.Float.isNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34cy() //  [R1]
         { []
         }
     {offset
       c34cy: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34cy_info" {
     block_c34cy_info:
         const _c34cy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.160967995 UTC

[section ""data" . GHC.Float.isIEEE_closure" {
     GHC.Float.isIEEE_closure:
         const GHC.Float.isIEEE_info;
 },
 GHC.Float.isIEEE_entry() //  [R2]
         { []
         }
     {offset
       c34cY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34cZ; else goto c34d0;
       c34cZ: // global
           R2 = R2;
           R1 = GHC.Float.isIEEE_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34d0: // global
           I64[Sp - 8] = block_c34cV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34d4; else goto c34cW;
       u34d4: // global
           call _c34cV(R1) args: 0, res: 0, upd: 0;
       c34cW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isIEEE_info" {
     GHC.Float.isIEEE_info:
         const GHC.Float.isIEEE_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34cV() //  [R1]
         { []
         }
     {offset
       c34cV: // global
           R1 = P64[R1 + 119];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34cV_info" {
     block_c34cV_info:
         const _c34cV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.167775553 UTC

[section ""data" . GHC.Float.atan2_closure" {
     GHC.Float.atan2_closure:
         const GHC.Float.atan2_info;
 },
 GHC.Float.atan2_entry() //  [R2]
         { []
         }
     {offset
       c34dl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34dm; else goto c34dn;
       c34dm: // global
           R2 = R2;
           R1 = GHC.Float.atan2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34dn: // global
           I64[Sp - 8] = block_c34di_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34dr; else goto c34dj;
       u34dr: // global
           call _c34di(R1) args: 0, res: 0, upd: 0;
       c34dj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atan2_info" {
     GHC.Float.atan2_info:
         const GHC.Float.atan2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34di() //  [R1]
         { []
         }
     {offset
       c34di: // global
           R1 = P64[R1 + 127];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34di_info" {
     block_c34di_info:
         const _c34di;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.17393089 UTC

[section ""data" . GHC.Float.$seven_closure" {
     GHC.Float.$seven_closure:
         const GHC.Float.$seven_info;
 },
 GHC.Float.$seven_entry() //  [R2]
         { []
         }
     {offset
       c34dI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34dJ; else goto c34dK;
       c34dJ: // global
           R2 = R2;
           R1 = GHC.Float.$seven_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34dK: // global
           I64[Sp - 8] = block_c34dF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34e3; else goto c34dG;
       u34e3: // global
           call _c34dF(R1) args: 0, res: 0, upd: 0;
       c34dG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$seven_info" {
     GHC.Float.$seven_info:
         const GHC.Float.$seven_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34dF() //  [R1]
         { []
         }
     {offset
       c34dF: // global
           _s2UFe::I64 = I64[R1 + 7];
           if (_s2UFe::I64 - (_s2UFe::I64 + (_s2UFe::I64 >> 63)) & (-2) == 0) goto c34dZ; else goto c34dT;
       c34dZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c34dT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34dF_info" {
     block_c34dF_info:
         const _c34dF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.181799116 UTC

[section ""data" . GHC.Float.$fNumFloat_$cfromInteger_closure" {
     GHC.Float.$fNumFloat_$cfromInteger_closure:
         const GHC.Float.$fNumFloat_$cfromInteger_info;
 },
 GHC.Float.$fNumFloat_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       c34er: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34ev; else goto c34ew;
       c34ev: // global
           R2 = R2;
           R1 = GHC.Float.$fNumFloat_$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34ew: // global
           I64[Sp - 8] = block_c34ep_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fNumFloat_$cfromInteger_info" {
     GHC.Float.$fNumFloat_$cfromInteger_info:
         const GHC.Float.$fNumFloat_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34ep() //  [F1]
         { []
         }
     {offset
       c34ep: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34ez; else goto c34ey;
       c34ez: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c34ey: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34ep_info" {
     block_c34ep_info:
         const _c34ep;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.18808121 UTC

[section ""data" . GHC.Float.$fNumDouble_$cfromInteger_closure" {
     GHC.Float.$fNumDouble_$cfromInteger_closure:
         const GHC.Float.$fNumDouble_$cfromInteger_info;
 },
 GHC.Float.$fNumDouble_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       c34eP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34eT; else goto c34eU;
       c34eT: // global
           R2 = R2;
           R1 = GHC.Float.$fNumDouble_$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34eU: // global
           I64[Sp - 8] = block_c34eN_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.doubleFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fNumDouble_$cfromInteger_info" {
     GHC.Float.$fNumDouble_$cfromInteger_info:
         const GHC.Float.$fNumDouble_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34eN() //  [D1]
         { []
         }
     {offset
       c34eN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34eX; else goto c34eW;
       c34eX: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c34eW: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34eN_info" {
     block_c34eN_info:
         const _c34eN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.196757999 UTC

[section ""data" . GHC.Float.plusFloat_closure" {
     GHC.Float.plusFloat_closure:
         const GHC.Float.plusFloat_info;
 },
 GHC.Float.plusFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c34fe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34fq; else goto c34fr;
       c34fq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.plusFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34fr: // global
           I64[Sp - 16] = block_c34fb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u34fx; else goto c34fc;
       u34fx: // global
           call _c34fb(R1) args: 0, res: 0, upd: 0;
       c34fc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.plusFloat_info" {
     GHC.Float.plusFloat_info:
         const GHC.Float.plusFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c34fb() //  [R1]
         { []
         }
     {offset
       c34fb: // global
           I64[Sp] = block_c34fh_info;
           _s2UFn::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UFn::F32;
           if (R1 & 7 != 0) goto u34fw; else goto c34fi;
       u34fw: // global
           call _c34fh(R1) args: 0, res: 0, upd: 0;
       c34fi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34fb_info" {
     block_c34fb_info:
         const _c34fb;
         const 1;
         const 30;
 },
 _c34fh() //  [R1]
         { []
         }
     {offset
       c34fh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34fv; else goto c34fu;
       c34fv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34fu: // global
           _s2UFq::F32 = %MO_F_Add_W32(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2UFq::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34fh_info" {
     block_c34fh_info:
         const _c34fh;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.21686747 UTC

[section ""data" . GHC.Float.minusFloat_closure" {
     GHC.Float.minusFloat_closure:
         const GHC.Float.minusFloat_info;
 },
 GHC.Float.minusFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c34fV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34g7; else goto c34g8;
       c34g7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.minusFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34g8: // global
           I64[Sp - 16] = block_c34fS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u34ge; else goto c34fT;
       u34ge: // global
           call _c34fS(R1) args: 0, res: 0, upd: 0;
       c34fT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.minusFloat_info" {
     GHC.Float.minusFloat_info:
         const GHC.Float.minusFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c34fS() //  [R1]
         { []
         }
     {offset
       c34fS: // global
           I64[Sp] = block_c34fY_info;
           _s2UFu::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UFu::F32;
           if (R1 & 7 != 0) goto u34gd; else goto c34fZ;
       u34gd: // global
           call _c34fY(R1) args: 0, res: 0, upd: 0;
       c34fZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34fS_info" {
     block_c34fS_info:
         const _c34fS;
         const 1;
         const 30;
 },
 _c34fY() //  [R1]
         { []
         }
     {offset
       c34fY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34gc; else goto c34gb;
       c34gc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34gb: // global
           _s2UFx::F32 = %MO_F_Sub_W32(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2UFx::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34fY_info" {
     block_c34fY_info:
         const _c34fY;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.23211642 UTC

[section ""data" . GHC.Float.timesFloat_closure" {
     GHC.Float.timesFloat_closure:
         const GHC.Float.timesFloat_info;
 },
 GHC.Float.timesFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c34gC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34gO; else goto c34gP;
       c34gO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.timesFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34gP: // global
           I64[Sp - 16] = block_c34gz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u34gV; else goto c34gA;
       u34gV: // global
           call _c34gz(R1) args: 0, res: 0, upd: 0;
       c34gA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.timesFloat_info" {
     GHC.Float.timesFloat_info:
         const GHC.Float.timesFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c34gz() //  [R1]
         { []
         }
     {offset
       c34gz: // global
           I64[Sp] = block_c34gF_info;
           _s2UFB::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UFB::F32;
           if (R1 & 7 != 0) goto u34gU; else goto c34gG;
       u34gU: // global
           call _c34gF(R1) args: 0, res: 0, upd: 0;
       c34gG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34gz_info" {
     block_c34gz_info:
         const _c34gz;
         const 1;
         const 30;
 },
 _c34gF() //  [R1]
         { []
         }
     {offset
       c34gF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34gT; else goto c34gS;
       c34gT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34gS: // global
           _s2UFE::F32 = %MO_F_Mul_W32(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2UFE::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34gF_info" {
     block_c34gF_info:
         const _c34gF;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.24826626 UTC

[section ""data" . GHC.Float.divideFloat_closure" {
     GHC.Float.divideFloat_closure:
         const GHC.Float.divideFloat_info;
 },
 GHC.Float.divideFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c34hj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34hv; else goto c34hw;
       c34hv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.divideFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34hw: // global
           I64[Sp - 16] = block_c34hg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u34hC; else goto c34hh;
       u34hC: // global
           call _c34hg(R1) args: 0, res: 0, upd: 0;
       c34hh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.divideFloat_info" {
     GHC.Float.divideFloat_info:
         const GHC.Float.divideFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c34hg() //  [R1]
         { []
         }
     {offset
       c34hg: // global
           I64[Sp] = block_c34hm_info;
           _s2UFI::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UFI::F32;
           if (R1 & 7 != 0) goto u34hB; else goto c34hn;
       u34hB: // global
           call _c34hm(R1) args: 0, res: 0, upd: 0;
       c34hn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34hg_info" {
     block_c34hg_info:
         const _c34hg;
         const 1;
         const 30;
 },
 _c34hm() //  [R1]
         { []
         }
     {offset
       c34hm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34hA; else goto c34hz;
       c34hA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34hz: // global
           _s2UFL::F32 = %MO_F_Quot_W32(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2UFL::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34hm_info" {
     block_c34hm_info:
         const _c34hm;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.259593165 UTC

[section ""data" . GHC.Float.negateFloat_closure" {
     GHC.Float.negateFloat_closure:
         const GHC.Float.negateFloat_info;
 },
 GHC.Float.negateFloat_entry() //  [R2]
         { []
         }
     {offset
       c34i0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34i7; else goto c34i8;
       c34i7: // global
           R2 = R2;
           R1 = GHC.Float.negateFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34i8: // global
           I64[Sp - 8] = block_c34hX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34ic; else goto c34hY;
       u34ic: // global
           call _c34hX(R1) args: 0, res: 0, upd: 0;
       c34hY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.negateFloat_info" {
     GHC.Float.negateFloat_info:
         const GHC.Float.negateFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34hX() //  [R1]
         { []
         }
     {offset
       c34hX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34ib; else goto c34ia;
       c34ib: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34ia: // global
           _s2UFP::F32 = %MO_F_Neg_W32(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2UFP::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34hX_info" {
     block_c34hX_info:
         const _c34hX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.267701337 UTC

[section ""data" . GHC.Float.$fNumFloat1_closure" {
     GHC.Float.$fNumFloat1_closure:
         const GHC.Types.F#_con_info;
         const 1.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.26947831 UTC

[section ""data" . GHC.Float.$fNumFloat2_closure" {
     GHC.Float.$fNumFloat2_closure:
         const GHC.Types.F#_con_info;
         const -1.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.272532628 UTC

[section ""data" . GHC.Float.$fNumFloat_$csignum_closure" {
     GHC.Float.$fNumFloat_$csignum_closure:
         const GHC.Float.$fNumFloat_$csignum_info;
 },
 GHC.Float.$fNumFloat_$csignum_entry() //  [R2]
         { []
         }
     {offset
       c34iy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34iz; else goto c34iA;
       c34iz: // global
           R2 = R2;
           R1 = GHC.Float.$fNumFloat_$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34iA: // global
           I64[Sp - 8] = block_c34iv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34iP; else goto c34iw;
       u34iP: // global
           call _c34iv(R1) args: 0, res: 0, upd: 0;
       c34iw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fNumFloat_$csignum_info" {
     GHC.Float.$fNumFloat_$csignum_info:
         const GHC.Float.$fNumFloat_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34iv() //  [R1]
         { []
         }
     {offset
       c34iv: // global
           _s2UFS::F32 = F32[R1 + 7];
           if (%MO_F_Gt_W32(_s2UFS::F32,
                            0.0 :: W32)) goto c34iO; else goto c34iN;
       c34iO: // global
           R1 = GHC.Float.$fNumFloat1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c34iN: // global
           if (%MO_F_Lt_W32(_s2UFS::F32,
                            0.0 :: W32)) goto c34iL; else goto c34iK;
       c34iL: // global
           R1 = GHC.Float.$fNumFloat2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c34iK: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34iv_info" {
     block_c34iv_info:
         const _c34iv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.278127556 UTC

[section ""data" . sat_s2UFV_closure" {
     sat_s2UFV_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.279885163 UTC

[section ""data" . sat_s2UFW_closure" {
     sat_s2UFW_closure:
         const :_con_info;
         const sat_s2UFV_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.282558299 UTC

[section ""data" . GHC.Float.$fRealDouble1_closure" {
     GHC.Float.$fRealDouble1_closure:
         const GHC.Float.$fRealDouble1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.$fRealDouble1_entry() //  [R1]
         { []
         }
     {offset
       c34jf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34jg; else goto c34jh;
       c34jg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34jh: // global
           (_c34jc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c34jc::I64 == 0) goto c34je; else goto c34jd;
       c34je: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c34jd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34jc::I64;
           R3 = sat_s2UFW_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealDouble1_info" {
     GHC.Float.$fRealDouble1_info:
         const GHC.Float.$fRealDouble1_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.287730594 UTC

[section ""data" . GHC.Float.fabsFloat_closure" {
     GHC.Float.fabsFloat_closure:
         const GHC.Float.fabsFloat_info;
 },
 GHC.Float.fabsFloat_entry() //  [R2]
         { []
         }
     {offset
       c34jw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34jD; else goto c34jE;
       c34jD: // global
           R2 = R2;
           R1 = GHC.Float.fabsFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34jE: // global
           I64[Sp - 8] = block_c34jt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34jI; else goto c34ju;
       u34jI: // global
           call _c34jt(R1) args: 0, res: 0, upd: 0;
       c34ju: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fabsFloat_info" {
     GHC.Float.fabsFloat_info:
         const GHC.Float.fabsFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34jt() //  [R1]
         { []
         }
     {offset
       c34jt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34jH; else goto c34jG;
       c34jH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34jG: // global
           (_c34jz::F32) = call MO_F32_Fabs(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c34jz::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34jt_info" {
     block_c34jt_info:
         const _c34jt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.293304003 UTC

[section ""data" . GHC.Float.$fNumFloat_closure" {
     GHC.Float.$fNumFloat_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Float.plusFloat_closure+2;
         const GHC.Float.minusFloat_closure+2;
         const GHC.Float.timesFloat_closure+2;
         const GHC.Float.negateFloat_closure+1;
         const GHC.Float.fabsFloat_closure+1;
         const GHC.Float.$fNumFloat_$csignum_closure+1;
         const GHC.Float.$fNumFloat_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.297418431 UTC

[section ""data" . GHC.Float.plusDouble_closure" {
     GHC.Float.plusDouble_closure:
         const GHC.Float.plusDouble_info;
 },
 GHC.Float.plusDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c34k3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34kf; else goto c34kg;
       c34kf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.plusDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34kg: // global
           I64[Sp - 16] = block_c34k0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u34km; else goto c34k1;
       u34km: // global
           call _c34k0(R1) args: 0, res: 0, upd: 0;
       c34k1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.plusDouble_info" {
     GHC.Float.plusDouble_info:
         const GHC.Float.plusDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c34k0() //  [R1]
         { []
         }
     {offset
       c34k0: // global
           I64[Sp] = block_c34k6_info;
           _s2UG4::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UG4::F64;
           if (R1 & 7 != 0) goto u34kl; else goto c34k7;
       u34kl: // global
           call _c34k6(R1) args: 0, res: 0, upd: 0;
       c34k7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34k0_info" {
     block_c34k0_info:
         const _c34k0;
         const 1;
         const 30;
 },
 _c34k6() //  [R1]
         { []
         }
     {offset
       c34k6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34kk; else goto c34kj;
       c34kk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34kj: // global
           _s2UG7::F64 = %MO_F_Add_W64(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2UG7::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34k6_info" {
     block_c34k6_info:
         const _c34k6;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.307357905 UTC

[section ""data" . GHC.Float.minusDouble_closure" {
     GHC.Float.minusDouble_closure:
         const GHC.Float.minusDouble_info;
 },
 GHC.Float.minusDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c34kK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34kW; else goto c34kX;
       c34kW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.minusDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34kX: // global
           I64[Sp - 16] = block_c34kH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u34l3; else goto c34kI;
       u34l3: // global
           call _c34kH(R1) args: 0, res: 0, upd: 0;
       c34kI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.minusDouble_info" {
     GHC.Float.minusDouble_info:
         const GHC.Float.minusDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c34kH() //  [R1]
         { []
         }
     {offset
       c34kH: // global
           I64[Sp] = block_c34kN_info;
           _s2UGb::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UGb::F64;
           if (R1 & 7 != 0) goto u34l2; else goto c34kO;
       u34l2: // global
           call _c34kN(R1) args: 0, res: 0, upd: 0;
       c34kO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34kH_info" {
     block_c34kH_info:
         const _c34kH;
         const 1;
         const 30;
 },
 _c34kN() //  [R1]
         { []
         }
     {offset
       c34kN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34l1; else goto c34l0;
       c34l1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34l0: // global
           _s2UGe::F64 = %MO_F_Sub_W64(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2UGe::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34kN_info" {
     block_c34kN_info:
         const _c34kN;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.317456583 UTC

[section ""data" . GHC.Float.timesDouble_closure" {
     GHC.Float.timesDouble_closure:
         const GHC.Float.timesDouble_info;
 },
 GHC.Float.timesDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c34lr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34lD; else goto c34lE;
       c34lD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.timesDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34lE: // global
           I64[Sp - 16] = block_c34lo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u34lK; else goto c34lp;
       u34lK: // global
           call _c34lo(R1) args: 0, res: 0, upd: 0;
       c34lp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.timesDouble_info" {
     GHC.Float.timesDouble_info:
         const GHC.Float.timesDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c34lo() //  [R1]
         { []
         }
     {offset
       c34lo: // global
           I64[Sp] = block_c34lu_info;
           _s2UGi::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UGi::F64;
           if (R1 & 7 != 0) goto u34lJ; else goto c34lv;
       u34lJ: // global
           call _c34lu(R1) args: 0, res: 0, upd: 0;
       c34lv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34lo_info" {
     block_c34lo_info:
         const _c34lo;
         const 1;
         const 30;
 },
 _c34lu() //  [R1]
         { []
         }
     {offset
       c34lu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34lI; else goto c34lH;
       c34lI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34lH: // global
           _s2UGl::F64 = %MO_F_Mul_W64(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2UGl::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34lu_info" {
     block_c34lu_info:
         const _c34lu;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.325968418 UTC

[section ""data" . GHC.Float.divideDouble_closure" {
     GHC.Float.divideDouble_closure:
         const GHC.Float.divideDouble_info;
 },
 GHC.Float.divideDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c34m8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34mk; else goto c34ml;
       c34mk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.divideDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34ml: // global
           I64[Sp - 16] = block_c34m5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u34mr; else goto c34m6;
       u34mr: // global
           call _c34m5(R1) args: 0, res: 0, upd: 0;
       c34m6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.divideDouble_info" {
     GHC.Float.divideDouble_info:
         const GHC.Float.divideDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c34m5() //  [R1]
         { []
         }
     {offset
       c34m5: // global
           I64[Sp] = block_c34mb_info;
           _s2UGp::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UGp::F64;
           if (R1 & 7 != 0) goto u34mq; else goto c34mc;
       u34mq: // global
           call _c34mb(R1) args: 0, res: 0, upd: 0;
       c34mc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34m5_info" {
     block_c34m5_info:
         const _c34m5;
         const 1;
         const 30;
 },
 _c34mb() //  [R1]
         { []
         }
     {offset
       c34mb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34mp; else goto c34mo;
       c34mp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34mo: // global
           _s2UGs::F64 = %MO_F_Quot_W64(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2UGs::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34mb_info" {
     block_c34mb_info:
         const _c34mb;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.334808914 UTC

[section ""data" . GHC.Float.negateDouble_closure" {
     GHC.Float.negateDouble_closure:
         const GHC.Float.negateDouble_info;
 },
 GHC.Float.negateDouble_entry() //  [R2]
         { []
         }
     {offset
       c34mP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34mW; else goto c34mX;
       c34mW: // global
           R2 = R2;
           R1 = GHC.Float.negateDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34mX: // global
           I64[Sp - 8] = block_c34mM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34n1; else goto c34mN;
       u34n1: // global
           call _c34mM(R1) args: 0, res: 0, upd: 0;
       c34mN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.negateDouble_info" {
     GHC.Float.negateDouble_info:
         const GHC.Float.negateDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34mM() //  [R1]
         { []
         }
     {offset
       c34mM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34n0; else goto c34mZ;
       c34n0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34mZ: // global
           _s2UGw::F64 = %MO_F_Neg_W64(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2UGw::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34mM_info" {
     block_c34mM_info:
         const _c34mM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.34098602 UTC

[section ""data" . GHC.Float.$fNumDouble1_closure" {
     GHC.Float.$fNumDouble1_closure:
         const GHC.Types.D#_con_info;
         const 1.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.342856876 UTC

[section ""data" . GHC.Float.$fNumDouble2_closure" {
     GHC.Float.$fNumDouble2_closure:
         const GHC.Types.D#_con_info;
         const -1.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.345838744 UTC

[section ""data" . GHC.Float.$fNumDouble_$csignum_closure" {
     GHC.Float.$fNumDouble_$csignum_closure:
         const GHC.Float.$fNumDouble_$csignum_info;
 },
 GHC.Float.$fNumDouble_$csignum_entry() //  [R2]
         { []
         }
     {offset
       c34nn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34no; else goto c34np;
       c34no: // global
           R2 = R2;
           R1 = GHC.Float.$fNumDouble_$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34np: // global
           I64[Sp - 8] = block_c34nk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34nE; else goto c34nl;
       u34nE: // global
           call _c34nk(R1) args: 0, res: 0, upd: 0;
       c34nl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fNumDouble_$csignum_info" {
     GHC.Float.$fNumDouble_$csignum_info:
         const GHC.Float.$fNumDouble_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34nk() //  [R1]
         { []
         }
     {offset
       c34nk: // global
           _s2UGz::F64 = F64[R1 + 7];
           if (%MO_F_Gt_W64(_s2UGz::F64,
                            0.0 :: W64)) goto c34nD; else goto c34nC;
       c34nD: // global
           R1 = GHC.Float.$fNumDouble1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c34nC: // global
           if (%MO_F_Lt_W64(_s2UGz::F64,
                            0.0 :: W64)) goto c34nA; else goto c34nz;
       c34nA: // global
           R1 = GHC.Float.$fNumDouble2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c34nz: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34nk_info" {
     block_c34nk_info:
         const _c34nk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.352674294 UTC

[section ""data" . GHC.Float.fabsDouble_closure" {
     GHC.Float.fabsDouble_closure:
         const GHC.Float.fabsDouble_info;
 },
 GHC.Float.fabsDouble_entry() //  [R2]
         { []
         }
     {offset
       c34o3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34oa; else goto c34ob;
       c34oa: // global
           R2 = R2;
           R1 = GHC.Float.fabsDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34ob: // global
           I64[Sp - 8] = block_c34o0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34of; else goto c34o1;
       u34of: // global
           call _c34o0(R1) args: 0, res: 0, upd: 0;
       c34o1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fabsDouble_info" {
     GHC.Float.fabsDouble_info:
         const GHC.Float.fabsDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34o0() //  [R1]
         { []
         }
     {offset
       c34o0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34oe; else goto c34od;
       c34oe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34od: // global
           (_c34o6::F64) = call MO_F64_Fabs(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c34o6::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34o0_info" {
     block_c34o0_info:
         const _c34o0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.358513086 UTC

[section ""data" . GHC.Float.$fNumDouble_closure" {
     GHC.Float.$fNumDouble_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Float.plusDouble_closure+2;
         const GHC.Float.minusDouble_closure+2;
         const GHC.Float.timesDouble_closure+2;
         const GHC.Float.negateDouble_closure+1;
         const GHC.Float.fabsDouble_closure+1;
         const GHC.Float.$fNumDouble_$csignum_closure+1;
         const GHC.Float.$fNumDouble_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.362100246 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$cacosh_closure" {
     GHC.Float.$fFloatingDouble_$cacosh_closure:
         const GHC.Float.$fFloatingDouble_$cacosh_info;
 },
 GHC.Float.$fFloatingDouble_$cacosh_entry() //  [R2]
         { []
         }
     {offset
       c34oA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34p4; else goto c34p5;
       c34p4: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$cacosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34p5: // global
           I64[Sp - 8] = block_c34ox_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34p9; else goto c34oy;
       u34p9: // global
           call _c34ox(R1) args: 0, res: 0, upd: 0;
       c34oy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$cacosh_info" {
     GHC.Float.$fFloatingDouble_$cacosh_info:
         const GHC.Float.$fFloatingDouble_$cacosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34ox() //  [R1]
         { []
         }
     {offset
       c34ox: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34p8; else goto c34p7;
       c34p8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34p7: // global
           _s2UGI::F64 = F64[R1 + 7];
           (_c34oM::F64) = call MO_F64_Sqrt(%MO_F_Quot_W64(%MO_F_Sub_W64(_s2UGI::F64,
                                                                         1.0 :: W64),
                                                           %MO_F_Add_W64(_s2UGI::F64, 1.0 :: W64)));
           (_c34oZ::F64) = call MO_F64_Log(%MO_F_Add_W64(_s2UGI::F64,
                                                         %MO_F_Mul_W64(%MO_F_Add_W64(_s2UGI::F64,
                                                                                     1.0 :: W64),
                                                                       _c34oM::F64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c34oZ::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34ox_info" {
     block_c34ox_info:
         const _c34ox;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.370829773 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$casinh_closure" {
     GHC.Float.$fFloatingDouble_$casinh_closure:
         const GHC.Float.$fFloatingDouble_$casinh_info;
 },
 GHC.Float.$fFloatingDouble_$casinh_entry() //  [R2]
         { []
         }
     {offset
       c34pD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34pY; else goto c34pZ;
       c34pY: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$casinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34pZ: // global
           I64[Sp - 8] = block_c34pA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34q3; else goto c34pB;
       u34q3: // global
           call _c34pA(R1) args: 0, res: 0, upd: 0;
       c34pB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$casinh_info" {
     GHC.Float.$fFloatingDouble_$casinh_info:
         const GHC.Float.$fFloatingDouble_$casinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34pA() //  [R1]
         { []
         }
     {offset
       c34pA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34q2; else goto c34q1;
       c34q2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34q1: // global
           _s2UGT::F64 = F64[R1 + 7];
           (_c34pM::F64) = call MO_F64_Sqrt(%MO_F_Add_W64(%MO_F_Mul_W64(_s2UGT::F64,
                                                                        _s2UGT::F64),
                                                          1.0 :: W64));
           (_c34pT::F64) = call MO_F64_Log(%MO_F_Add_W64(_s2UGT::F64,
                                                         _c34pM::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c34pT::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34pA_info" {
     block_c34pA_info:
         const _c34pA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.377647237 UTC

[section ""data" . GHC.Float.$fFractionalDouble_$crecip_closure" {
     GHC.Float.$fFractionalDouble_$crecip_closure:
         const GHC.Float.$fFractionalDouble_$crecip_info;
 },
 GHC.Float.$fFractionalDouble_$crecip_entry() //  [R2]
         { []
         }
     {offset
       c34qq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34qx; else goto c34qy;
       c34qx: // global
           R2 = R2;
           R1 = GHC.Float.$fFractionalDouble_$crecip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34qy: // global
           I64[Sp - 8] = block_c34qn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34qC; else goto c34qo;
       u34qC: // global
           call _c34qn(R1) args: 0, res: 0, upd: 0;
       c34qo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFractionalDouble_$crecip_info" {
     GHC.Float.$fFractionalDouble_$crecip_info:
         const GHC.Float.$fFractionalDouble_$crecip_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c34qn() //  [R1]
         { []
         }
     {offset
       c34qn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34qB; else goto c34qA;
       c34qB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c34qA: // global
           _s2UH2::F64 = %MO_F_Quot_W64(1.0 :: W64, F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2UH2::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34qn_info" {
     block_c34qn_info:
         const _c34qn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.38384145 UTC

[section ""data" . GHC.Float.rationalToDouble5_closure" {
     GHC.Float.rationalToDouble5_closure:
         const GHC.Float.rationalToDouble5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToDouble5_entry() //  [R1]
         { []
         }
     {offset
       c34qW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34qX; else goto c34qY;
       c34qX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34qY: // global
           (_c34qT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c34qT::I64 == 0) goto c34qV; else goto c34qU;
       c34qV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c34qU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34qT::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble5_info" {
     GHC.Float.rationalToDouble5_info:
         const GHC.Float.rationalToDouble5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.388787184 UTC

[section ""data" . GHC.Float.rationalToDouble1_closure" {
     GHC.Float.rationalToDouble1_closure:
         const GHC.Float.rationalToDouble1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToDouble1_entry() //  [R1]
         { []
         }
     {offset
       c34re: // global
           _r2UmA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c34rh; else goto c34ri;
       c34ri: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34rk; else goto c34rj;
       c34rk: // global
           HpAlloc = 16;
           goto c34rh;
       c34rh: // global
           R1 = _r2UmA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34rj: // global
           (_c34r9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmA::P64);
           if (_c34r9::I64 == 0) goto c34rb; else goto c34ra;
       c34rb: // global
           call (I64[I64[_r2UmA::P64]])() args: 8, res: 0, upd: 8;
       c34ra: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34r9::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(0.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble1_info" {
     GHC.Float.rationalToDouble1_info:
         const GHC.Float.rationalToDouble1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.393961124 UTC

[section ""data" . GHC.Float.rationalToDouble2_closure" {
     GHC.Float.rationalToDouble2_closure:
         const GHC.Float.rationalToDouble2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToDouble2_entry() //  [R1]
         { []
         }
     {offset
       c34rE: // global
           _r2UmB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c34rH; else goto c34rI;
       c34rI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34rK; else goto c34rJ;
       c34rK: // global
           HpAlloc = 16;
           goto c34rH;
       c34rH: // global
           R1 = _r2UmB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34rJ: // global
           (_c34rz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmB::P64);
           if (_c34rz::I64 == 0) goto c34rB; else goto c34rA;
       c34rB: // global
           call (I64[I64[_r2UmB::P64]])() args: 8, res: 0, upd: 8;
       c34rA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34rz::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(-1.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble2_info" {
     GHC.Float.rationalToDouble2_info:
         const GHC.Float.rationalToDouble2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.39966726 UTC

[section ""data" . GHC.Float.rationalToDouble3_closure" {
     GHC.Float.rationalToDouble3_closure:
         const GHC.Float.rationalToDouble3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToDouble3_entry() //  [R1]
         { []
         }
     {offset
       c34s5: // global
           _r2UmC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c34s8; else goto c34s9;
       c34s9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34sb; else goto c34sa;
       c34sb: // global
           HpAlloc = 16;
           goto c34s8;
       c34s8: // global
           R1 = _r2UmC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34sa: // global
           (_c34s0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmC::P64);
           if (_c34s0::I64 == 0) goto c34s2; else goto c34s1;
       c34s2: // global
           call (I64[I64[_r2UmC::P64]])() args: 8, res: 0, upd: 8;
       c34s1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34s0::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(1.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble3_info" {
     GHC.Float.rationalToDouble3_info:
         const GHC.Float.rationalToDouble3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.403723726 UTC

[section ""data" . GHC.Float.rationalToDouble4_closure" {
     GHC.Float.rationalToDouble4_closure:
         const GHC.Types.D#_con_info;
         const 0.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.409056587 UTC

[section ""data" . $w$j_r2Upx_closure" {
     $w$j_r2Upx_closure:
         const $w$j_r2Upx_info;
         const 0;
 },
 $w$j_r2Upx_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c34sy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c34sz; else goto c34sA;
       c34sz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $w$j_r2Upx_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c34sA: // global
           I64[Sp - 32] = block_c34st_info;
           _s2UH7::P64 = R3;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s2UH6::I64 = R2;
           R2 = R4;
           I64[Sp - 24] = _s2UH6::I64;
           P64[Sp - 16] = _s2UH7::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $w$j_r2Upx_info" {
     $w$j_r2Upx_info:
         const $w$j_r2Upx_entry;
         const 0;
         const 133143986190;
         const 12884901907;
         const S2VLN_srt+8;
 },
 _c34st() //  [R1]
         { []
         }
     {offset
       c34st: // global
           if (R1 == 1) goto c34sx; else goto c34sw;
       c34sx: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c34sw: // global
           I64[Sp] = block_c34sD_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34st_info" {
     block_c34st_info:
         const _c34st;
         const 67;
         const 47244640286;
         const S2VLN_srt+8;
 },
 _c34sD() //  [R1, R2]
         { []
         }
     {offset
       c34sD: // global
           I64[Sp] = block_c34sF_info;
           R3 = 1;
           R2 = R2;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34sD_info" {
     block_c34sD_info:
         const _c34sD;
         const 195;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34sF() //  [R1]
         { []
         }
     {offset
       c34sF: // global
           I64[Sp] = block_c34sL_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34sF_info" {
     block_c34sF_info:
         const _c34sF;
         const 67;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34sL() //  [R1]
         { []
         }
     {offset
       c34sL: // global
           _s2UHb::P64 = P64[Sp + 16];
           _c34ty::P64 = R1 & 7;
           if (_c34ty::P64 < 3) goto u34tz; else goto c34tq;
       u34tz: // global
           if (_c34ty::P64 < 2) goto u34tA; else goto c34sX;
       u34tA: // global
           Sp = Sp + 8;
           call _c34ti() args: 0, res: 0, upd: 0;
       c34sX: // global
           I64[Sp] = block_c34sV_info;
           R2 = _s2UHb::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c34tq: // global
           I64[Sp] = block_c34to_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2UHb::P64;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34sL_info" {
     block_c34sL_info:
         const _c34sL;
         const 323;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34sV() //  [R1]
         { []
         }
     {offset
       c34sV: // global
           if (R1 & 1 == 0) goto u34tB; else goto c34ta;
       u34tB: // global
           Sp = Sp + 8;
           call _c34ti() args: 0, res: 0, upd: 0;
       c34ta: // global
           I64[Sp] = block_c34t8_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34sV_info" {
     block_c34sV_info:
         const _c34sV;
         const 323;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34ti() //  []
         { []
         }
     {offset
       c34ti: // global
           R3 = I64[Sp];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 _c34t8() //  [R1]
         { []
         }
     {offset
       c34t8: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34t8_info" {
     block_c34t8_info:
         const _c34t8;
         const 451;
         const 30;
 },
 _c34to() //  [R1]
         { []
         }
     {offset
       c34to: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34to_info" {
     block_c34to_info:
         const _c34to;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.440713918 UTC

[section ""data" . GHC.Float.$w$sfromRat''_closure" {
     GHC.Float.$w$sfromRat''_closure:
         const GHC.Float.$w$sfromRat''_info;
         const 0;
 },
 GHC.Float.$w$sfromRat''_slow() //  [R1]
         { []
         }
     {offset
       c34u8: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Float.$w$sfromRat''_entry(R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Float.$w$sfromRat''_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c34ul: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c34um; else goto c34un;
       c34um: // global
           R1 = GHC.Float.$w$sfromRat''_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c34un: // global
           I64[Sp - 40] = block_c34ue_info;
           R1 = R5;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u34CA; else goto c34uf;
       u34CA: // global
           call _c34ue(R1) args: 0, res: 0, upd: 0;
       c34uf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sfromRat''_info" {
     GHC.Float.$w$sfromRat''_info:
         const GHC.Float.$w$sfromRat''_entry;
         const 0;
         const 4367981740046;
         const 17179869184;
         const S2VLN_srt+8;
         const 196;
         const GHC.Float.$w$sfromRat''_slow;
 },
 _c34ue() //  [R1]
         { []
         }
     {offset
       c34ue: // global
           if (R1 & 7 == 1) goto c34uj; else goto c34ui;
       c34uj: // global
           I64[Sp] = block_c34Bw_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c34ui: // global
           I64[Sp - 8] = 1;
           I64[Sp] = (-1);
           Sp = Sp - 8;
           call _s2UHo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34ue_info" {
     block_c34ue_info:
         const _c34ue;
         const 196;
         const 2168958484510;
         const S2VLN_srt+8;
 },
 _c34Bw() //  [R1, R2]
         { []
         }
     {offset
       c34Bw: // global
           I64[Sp] = R1;
           I64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _s2UHo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34Bw_info" {
     block_c34Bw_info:
         const _c34Bw;
         const 196;
         const 2168958484510;
         const S2VLN_srt+8;
 },
 _s2UHo() //  []
         { []
         }
     {offset
       s2UHo: // global
           _s2UHm::P64 = P64[Sp + 32];
           if (I64[Sp] == 0) goto c34Ba; else goto c34wr;
       c34Ba: // global
           I64[Sp] = block_c34x1_info;
           R1 = _s2UHm::P64;
           if (R1 & 7 != 0) goto u34CR; else goto c34Bb;
       u34CR: // global
           call _c34x1(R1) args: 0, res: 0, upd: 0;
       c34Bb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c34wr: // global
           I64[Sp] = block_c34uw_info;
           R1 = _s2UHm::P64;
           if (R1 & 7 != 0) goto u34CQ; else goto c34ws;
       u34CQ: // global
           call _c34uw(R1) args: 0, res: 0, upd: 0;
       c34ws: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c34x1() //  [R1]
         { []
         }
     {offset
       c34x1: // global
           if (R1 & 7 == 1) goto c34Bm; else goto c34Bh;
       c34Bm: // global
           I64[Sp] = block_c34Bk_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c34Bh: // global
           I64[Sp + 40] = (-1);
           Sp = Sp + 8;
           call _s2UI2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34x1_info" {
     block_c34x1_info:
         const _c34x1;
         const 1477;
         const 2100239007774;
         const S2VLN_srt+8;
 },
 _c34Bk() //  [R1]
         { []
         }
     {offset
       c34Bk: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _s2UI2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34Bk_info" {
     block_c34Bk_info:
         const _c34Bk;
         const 1477;
         const 1550483193886;
         const S2VLN_srt+8;
 },
 _s2UI2() //  []
         { []
         }
     {offset
       s2UI2: // global
           _s2UHk::I64 = I64[Sp + 8];
           _s2UHl::I64 = I64[Sp + 16];
           _s2UHm::P64 = P64[Sp + 24];
           _s2UHp::I64 = I64[Sp];
           _s2UI3::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_s2UI3::I64,
                            _s2UHp::I64 + _s2UHk::I64 - 1)) goto c34zo; else goto c34B9;
       c34zo: // global
           _s2UI7::I64 = _s2UHp::I64 + (_s2UHk::I64 - _s2UHl::I64);
           if (%MO_S_Gt_W64(_s2UI7::I64, 0)) goto c34zl; else goto c34zm;
       c34zl: // global
           if (%MO_S_Gt_W64(_s2UI7::I64,
                            _s2UI3::I64)) goto c34xW; else goto c34zj;
       c34xW: // global
           if (%MO_S_Le_W64(_s2UI7::I64,
                            _s2UI3::I64 + 1)) goto c34xz; else goto u34Ct;
       c34xz: // global
           I64[Sp] = block_c34xx_info;
           R1 = _s2UHm::P64;
           if (R1 & 7 != 0) goto u34CT; else goto c34xA;
       u34CT: // global
           call _c34xx(R1) args: 0, res: 0, upd: 0;
       c34xA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u34Ct: // global
           Sp = Sp + 40;
           call _c34xU() args: 0, res: 0, upd: 0;
       c34zj: // global
           _s2UIl::I64 = -_s2UI7::I64;
           if (%MO_S_Lt_W64(_s2UIl::I64, 0)) goto c34z7; else goto c34ze;
       c34z7: // global
           I64[Sp] = block_c34z5_info;
           R3 = -_s2UIl::I64;
           R2 = _s2UHm::P64;
           I64[Sp + 32] = _s2UI7::I64;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34ze: // global
           I64[Sp] = block_c34zd_info;
           R3 = _s2UIl::I64;
           R2 = _s2UHm::P64;
           I64[Sp + 32] = _s2UI7::I64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34zm: // global
           R3 = _s2UHk::I64 - _s2UHl::I64 - _s2UI7::I64;
           R2 = _s2UHm::P64;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       c34B9: // global
           if (%MO_S_Ge_W64(_s2UI3::I64,
                            _s2UHl::I64)) goto c34B7; else goto c34B8;
       c34B7: // global
           _s2UIF::I64 = -((_s2UI3::I64 + 1) - _s2UHl::I64);
           if (%MO_S_Lt_W64(_s2UIF::I64, 0)) goto c34AU; else goto c34B1;
       c34AU: // global
           I64[Sp - 8] = block_c34AS_info;
           R3 = -_s2UIF::I64;
           R2 = _s2UHm::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34B1: // global
           I64[Sp - 8] = block_c34B0_info;
           R3 = _s2UIF::I64;
           R2 = _s2UHm::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34B8: // global
           R3 = -_s2UHp::I64;
           R2 = _s2UHm::P64;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 _c34xx() //  [R1]
         { []
         }
     {offset
       c34xx: // global
           if (R1 & 7 == 1) goto c34xL; else goto c34xG;
       c34xL: // global
           I64[Sp] = block_c34xJ_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c34xG: // global
           R3 = I64[Sp + 8] - I64[Sp + 16];
           R2 = GHC.Float.$fRealDouble1_closure;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34xx_info" {
     block_c34xx_info:
         const _c34xx;
         const 964;
         const 141733920798;
         const S2VLN_srt+32;
 },
 _c34xJ() //  [R2]
         { []
         }
     {offset
       c34xJ: // global
           if (R2 == 0) goto u34Cu; else goto c34xS;
       u34Cu: // global
           Sp = Sp + 40;
           call _c34xU() args: 0, res: 0, upd: 0;
       c34xS: // global
           R3 = I64[Sp + 8] - I64[Sp + 16];
           R2 = GHC.Float.$fRealDouble1_closure;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34xJ_info" {
     block_c34xJ_info:
         const _c34xJ;
         const 964;
         const 4294967326;
         const S2VLN_srt+32;
 },
 _c34xU() //  []
         { []
         }
     {offset
       c34xU: // global
           D1 = 0.0 :: W64;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
     }
 },
 _c34z5() //  [R1]
         { []
         }
     {offset
       c34z5: // global
           P64[Sp] = R1;
           call _s2UIm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34z5_info" {
     block_c34z5_info:
         const _c34z5;
         const 708;
         const 313532612638;
         const S2VLN_srt+8;
 },
 _c34zd() //  [R1]
         { []
         }
     {offset
       c34zd: // global
           P64[Sp] = R1;
           call _s2UIm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34zd_info" {
     block_c34zd_info:
         const _c34zd;
         const 708;
         const 313532612638;
         const S2VLN_srt+8;
 },
 _s2UIm() //  []
         { []
         }
     {offset
       s2UIm: // global
           I64[Sp - 8] = block_c34ya_info;
           R3 = I64[Sp + 32] - 1;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c34ya() //  [R1]
         { []
         }
     {offset
       c34ya: // global
           _s2UHk::I64 = I64[Sp + 16];
           _s2UHl::I64 = I64[Sp + 24];
           _s2UIn::P64 = P64[Sp + 8];
           if (R1 == 0) goto c34ys; else goto u34Cf;
       c34ys: // global
           R3 = _s2UHk::I64 - _s2UHl::I64;
           R2 = _s2UIn::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       u34Cf: // global
           if (R1 == 1) goto c34yx; else goto c34yk;
       c34yx: // global
           I64[Sp] = block_c34yv_info;
           R2 = _s2UIn::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c34yk: // global
           I64[Sp + 32] = block_c34yh_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2UIn::P64;
           I64[Sp + 40] = _s2UHk::I64 - _s2UHl::I64;
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34ya_info" {
     block_c34ya_info:
         const _c34ya;
         const 1925;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34yv() //  [R1]
         { []
         }
     {offset
       c34yv: // global
           _s2UHk::I64 = I64[Sp + 16];
           _s2UHl::I64 = I64[Sp + 24];
           _s2UIn::P64 = P64[Sp + 8];
           if (R1 & 1 == 0) goto c34yV; else goto c34yN;
       c34yV: // global
           R3 = _s2UHk::I64 - _s2UHl::I64;
           R2 = _s2UIn::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       c34yN: // global
           I64[Sp + 32] = block_c34yL_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2UIn::P64;
           I64[Sp + 40] = _s2UHk::I64 - _s2UHl::I64;
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34yv_info" {
     block_c34yv_info:
         const _c34yv;
         const 1925;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34yL() //  [R1]
         { []
         }
     {offset
       c34yL: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34yL_info" {
     block_c34yL_info:
         const _c34yL;
         const 65;
         const 30;
 },
 _c34yh() //  [R1]
         { []
         }
     {offset
       c34yh: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34yh_info" {
     block_c34yh_info:
         const _c34yh;
         const 65;
         const 30;
 },
 _c34AS() //  [R1]
         { []
         }
     {offset
       c34AS: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _s2UII() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34AS_info" {
     block_c34AS_info:
         const _c34AS;
         const 1477;
         const 313532612638;
         const S2VLN_srt+8;
 },
 _c34B0() //  [R1]
         { []
         }
     {offset
       c34B0: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _s2UII() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34B0_info" {
     block_c34B0_info:
         const _c34B0;
         const 1477;
         const 313532612638;
         const S2VLN_srt+8;
 },
 _s2UII() //  []
         { []
         }
     {offset
       s2UII: // global
           _s2UIK::I64 = I64[Sp + 32] - I64[Sp + 16];
           I64[Sp - 8] = block_c34zL_info;
           R3 = _s2UIK::I64;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c34zL() //  [R1]
         { []
         }
     {offset
       c34zL: // global
           _s2UHl::I64 = I64[Sp + 24];
           _s2UHp::I64 = I64[Sp + 8];
           _s2UI3::I64 = I64[Sp + 40];
           _s2UIJ::P64 = P64[Sp + 16];
           if (R1 == 0) goto c34At; else goto u34Cg;
       c34At: // global
           R3 = _s2UI3::I64 + (1 - _s2UHl::I64 - _s2UHp::I64);
           R2 = _s2UIJ::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       u34Cg: // global
           if (R1 == 2) goto c34AH; else goto c34zS;
       c34AH: // global
           I64[Sp + 32] = block_c34AF_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2UIJ::P64;
           I64[Sp + 40] = _s2UI3::I64 + (1 - _s2UHl::I64 - _s2UHp::I64);
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       c34zS: // global
           I64[Sp] = block_c34zP_info;
           R2 = _s2UIJ::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34zL_info" {
     block_c34zL_info:
         const _c34zL;
         const 1861;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34AF() //  [R1]
         { []
         }
     {offset
       c34AF: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34AF_info" {
     block_c34AF_info:
         const _c34AF;
         const 65;
         const 30;
 },
 _c34zP() //  [R1]
         { []
         }
     {offset
       c34zP: // global
           _s2UHl::I64 = I64[Sp + 24];
           _s2UHp::I64 = I64[Sp + 8];
           _s2UI3::I64 = I64[Sp + 40];
           _s2UIJ::P64 = P64[Sp + 16];
           if (R1 & 1 == 0) goto c34Am; else goto c34Ae;
       c34Am: // global
           R3 = _s2UI3::I64 + (1 - _s2UHl::I64 - _s2UHp::I64);
           R2 = _s2UIJ::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       c34Ae: // global
           I64[Sp + 32] = block_c34Ac_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2UIJ::P64;
           I64[Sp + 40] = _s2UI3::I64 + (1 - _s2UHl::I64 - _s2UHp::I64);
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34zP_info" {
     block_c34zP_info:
         const _c34zP;
         const 1861;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34Ac() //  [R1]
         { []
         }
     {offset
       c34Ac: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Ac_info" {
     block_c34Ac_info:
         const _c34Ac;
         const 65;
         const 30;
 },
 _c34uw() //  [R1]
         { []
         }
     {offset
       c34uw: // global
           if (R1 & 7 == 1) goto c34wL; else goto c34wG;
       c34wL: // global
           I64[Sp] = block_c34wJ_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c34wG: // global
           _s2UHW::I64 = (-1) - I64[Sp + 8];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s2UHW::I64)) goto u34Cj; else goto c34wE;
       u34Cj: // global
           Sp = Sp + 16;
           call _c34wW() args: 0, res: 0, upd: 0;
       c34wE: // global
           I64[Sp + 16] = _s2UHW::I64;
           Sp = Sp + 16;
           call _s2UHs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34uw_info" {
     block_c34uw_info:
         const _c34uw;
         const 453;
         const 47244640286;
         const S2VLN_srt+40;
 },
 _c34wJ() //  [R1]
         { []
         }
     {offset
       c34wJ: // global
           _s2UI0::I64 = R1 - I64[Sp + 8];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s2UI0::I64)) goto u34Cl; else goto c34wX;
       u34Cl: // global
           Sp = Sp + 16;
           call _c34wW() args: 0, res: 0, upd: 0;
       c34wX: // global
           I64[Sp + 16] = _s2UI0::I64;
           Sp = Sp + 16;
           call _s2UHs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34wJ_info" {
     block_c34wJ_info:
         const _c34wJ;
         const 453;
         const 12884901918;
         const S2VLN_srt+40;
 },
 _c34wW() //  []
         { []
         }
     {offset
       c34wW: // global
           I64[Sp] = I64[Sp];
           call _s2UHs() args: 0, res: 0, upd: 0;
     }
 },
 _s2UHs() //  []
         { []
         }
     {offset
       s2UHs: // global
           _s2UHl::I64 = I64[Sp + 8];
           _s2UHm::P64 = P64[Sp + 16];
           _s2UHt::I64 = I64[Sp];
           if (%MO_S_Ge_W64(_s2UHt::I64,
                            _s2UHl::I64)) goto c34w2; else goto c34wj;
       c34w2: // global
           _s2UHn::P64 = P64[Sp + 24];
           if (_s2UHt::I64 == _s2UHl::I64) goto c34w0; else goto c34vT;
       c34w0: // global
           P64[Sp + 24] = _s2UHm::P64;
           P64[Sp + 16] = _s2UHn::P64;
           call _s2UHu() args: 0, res: 0, upd: 0;
       c34vT: // global
           _s2UHN::I64 = _s2UHt::I64 - _s2UHl::I64;
           if (%MO_S_Lt_W64(_s2UHN::I64, 0)) goto c34vO; else goto c34vR;
       c34vO: // global
           I64[Sp - 8] = block_c34vQ_info;
           R3 = -_s2UHN::I64;
           R2 = _s2UHn::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34vR: // global
           I64[Sp - 8] = block_c34vQ_info;
           R3 = _s2UHN::I64;
           R2 = _s2UHn::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34wj: // global
           _s2UHR::I64 = _s2UHl::I64 - _s2UHt::I64;
           if (%MO_S_Lt_W64(_s2UHR::I64, 0)) goto c34wf; else goto c34wi;
       c34wf: // global
           I64[Sp - 8] = block_c34wh_info;
           R3 = -_s2UHR::I64;
           R2 = _s2UHm::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34wi: // global
           I64[Sp - 8] = block_c34wh_info;
           R3 = _s2UHR::I64;
           R2 = _s2UHm::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c34vQ() //  [R1]
         { []
         }
     {offset
       c34vQ: // global
           _s2UHv::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp + 32] = _s2UHv::P64;
           Sp = Sp + 8;
           call _s2UHu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34vQ_info" {
     block_c34vQ_info:
         const _c34vQ;
         const 708;
         const 12884901918;
         const S2VLN_srt+40;
 },
 _c34wh() //  [R1]
         { []
         }
     {offset
       c34wh: // global
           _s2UHw::P64 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           P64[Sp + 24] = _s2UHw::P64;
           Sp = Sp + 8;
           call _s2UHu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34wh_info" {
     block_c34wh_info:
         const _c34wh;
         const 452;
         const 12884901918;
         const S2VLN_srt+40;
 },
 _s2UHu() //  []
         { []
         }
     {offset
       s2UHu: // global
           _s2UHl::I64 = I64[Sp + 8];
           _s2UHw::P64 = P64[Sp + 16];
           if (%MO_S_Lt_W64(_s2UHl::I64, 0)) goto c34uP; else goto c34vc;
       c34uP: // global
           I64[Sp - 8] = block_c34uN_info;
           R3 = -_s2UHl::I64;
           R2 = _s2UHw::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34vc: // global
           I64[Sp - 8] = block_c34vb_info;
           R3 = _s2UHl::I64;
           R2 = _s2UHw::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c34uN() //  [R1]
         { []
         }
     {offset
       c34uN: // global
           I64[Sp] = block_c34uT_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34uN_info" {
     block_c34uN_info:
         const _c34uN;
         const 196;
         const 4294967326;
         const S2VLN_srt+40;
 },
 _c34uT() //  [R1]
         { []
         }
     {offset
       c34uT: // global
           _s2UHw::P64 = P64[Sp + 24];
           if (R1 == 1) goto c34v5; else goto c34v0;
       c34v5: // global
           I64[Sp] = block_c34v3_info;
           R3 = 1;
           R2 = _s2UHw::P64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34v0: // global
           R4 = _s2UHw::P64;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] - I64[Sp + 16];
           Sp = Sp + 40;
           call $w$j_r2Upx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34uT_info" {
     block_c34uT_info:
         const _c34uT;
         const 196;
         const 4294967326;
         const S2VLN_srt+40;
 },
 _c34v3() //  [R1]
         { []
         }
     {offset
       c34v3: // global
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] + (1 - I64[Sp + 16]);
           Sp = Sp + 40;
           call $w$j_r2Upx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34v3_info" {
     block_c34v3_info:
         const _c34v3;
         const 452;
         const 4294967326;
         const S2VLN_srt+40;
 },
 _c34vb() //  [R1]
         { []
         }
     {offset
       c34vb: // global
           I64[Sp] = block_c34vg_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34vb_info" {
     block_c34vb_info:
         const _c34vb;
         const 196;
         const 4294967326;
         const S2VLN_srt+40;
 },
 _c34vg() //  [R1]
         { []
         }
     {offset
       c34vg: // global
           _s2UHw::P64 = P64[Sp + 24];
           if (R1 == 1) goto c34vs; else goto c34vn;
       c34vs: // global
           I64[Sp] = block_c34vq_info;
           R3 = 1;
           R2 = _s2UHw::P64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34vn: // global
           R4 = _s2UHw::P64;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] - I64[Sp + 16];
           Sp = Sp + 40;
           call $w$j_r2Upx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34vg_info" {
     block_c34vg_info:
         const _c34vg;
         const 196;
         const 4294967326;
         const S2VLN_srt+40;
 },
 _c34vq() //  [R1]
         { []
         }
     {offset
       c34vq: // global
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] + (1 - I64[Sp + 16]);
           Sp = Sp + 40;
           call $w$j_r2Upx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34vq_info" {
     block_c34vq_info:
         const _c34vq;
         const 452;
         const 4294967326;
         const S2VLN_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.512121444 UTC

[section ""data" . GHC.Float.fromRat''_$sfromRat''1_closure" {
     GHC.Float.fromRat''_$sfromRat''1_closure:
         const GHC.Float.fromRat''_$sfromRat''1_info;
         const 0;
 },
 GHC.Float.fromRat''_$sfromRat''1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c34FN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c34G0; else goto c34G1;
       c34G0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat''_$sfromRat''1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c34G1: // global
           I64[Sp - 32] = block_c34FK_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u34G8; else goto c34FL;
       u34G8: // global
           call _c34FK(R1) args: 0, res: 0, upd: 0;
       c34FL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat''_$sfromRat''1_info" {
     GHC.Float.fromRat''_$sfromRat''1_info:
         const GHC.Float.fromRat''_$sfromRat''1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2VLN_srt+80;
 },
 _c34FK() //  [R1]
         { []
         }
     {offset
       c34FK: // global
           I64[Sp] = block_c34FQ_info;
           _s2UJk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2UJk::I64;
           if (R1 & 7 != 0) goto u34G7; else goto c34FR;
       u34G7: // global
           call _c34FQ(R1) args: 0, res: 0, upd: 0;
       c34FR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34FK_info" {
     block_c34FK_info:
         const _c34FK;
         const 3;
         const 4294967326;
         const S2VLN_srt+80;
 },
 _c34FQ() //  [R1]
         { []
         }
     {offset
       c34FQ: // global
           _s2UJi::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c34FV_info;
           R5 = _s2UJi::P64;
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Float.$w$sfromRat''_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34FQ_info" {
     block_c34FQ_info:
         const _c34FQ;
         const 67;
         const 4294967326;
         const S2VLN_srt+80;
 },
 _c34FV() //  [D1]
         { []
         }
     {offset
       c34FV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34G6; else goto c34G5;
       c34G6: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c34G5: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34FV_info" {
     block_c34FV_info:
         const _c34FV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.531939508 UTC

[section ""data" . GHC.Float.rationalToDouble_closure" {
     GHC.Float.rationalToDouble_closure:
         const GHC.Float.rationalToDouble_info;
         const 0;
 },
 GHC.Float.rationalToDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c34Gz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c34GA; else goto c34GB;
       c34GA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.rationalToDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34GB: // global
           I64[Sp - 24] = block_c34Gu_info;
           _s2UJp::P64 = R3;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s2UJo::P64 = R2;
           R2 = _s2UJp::P64;
           P64[Sp - 16] = _s2UJo::P64;
           P64[Sp - 8] = _s2UJp::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble_info" {
     GHC.Float.rationalToDouble_info:
         const GHC.Float.rationalToDouble_entry;
         const 0;
         const 33539399614478;
         const 8589934607;
         const S2VLN_srt+24;
 },
 _c34Gu() //  [R1]
         { []
         }
     {offset
       c34Gu: // global
           _s2UJo::P64 = P64[Sp + 8];
           if (R1 == 1) goto c34Gy; else goto c34Gx;
       c34Gy: // global
           I64[Sp] = block_c34Hr_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s2UJo::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c34Gx: // global
           I64[Sp] = block_c34GE_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s2UJo::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Gu_info" {
     block_c34Gu_info:
         const _c34Gu;
         const 2;
         const 31340376358942;
         const S2VLN_srt+24;
 },
 _c34Hr() //  [R1]
         { []
         }
     {offset
       c34Hr: // global
           if (R1 == 1) goto c34HN; else goto c34Hz;
       c34HN: // global
           R1 = GHC.Float.rationalToDouble1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c34Hz: // global
           I64[Sp + 16] = block_c34Hw_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Hr_info" {
     block_c34Hr_info:
         const _c34Hr;
         const 130;
         const 30790620545054;
         const S2VLN_srt+24;
 },
 _c34Hw() //  [R1]
         { []
         }
     {offset
       c34Hw: // global
           if (R1 == 1) goto c34HJ; else goto c34HF;
       c34HJ: // global
           R1 = GHC.Float.rationalToDouble2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c34HF: // global
           R1 = GHC.Float.rationalToDouble3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Hw_info" {
     block_c34Hw_info:
         const _c34Hw;
         const 0;
         const 12884901918;
         const S2VLN_srt+112;
 },
 _c34GE() //  [R1]
         { []
         }
     {offset
       c34GE: // global
           if (R1 == 1) goto c34Ho; else goto c34GM;
       c34Ho: // global
           R1 = GHC.Float.rationalToDouble4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c34GM: // global
           I64[Sp] = block_c34GJ_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34GE_info" {
     block_c34GE_info:
         const _c34GE;
         const 2;
         const 554050781214;
         const S2VLN_srt+24;
 },
 _c34GJ() //  [R1]
         { []
         }
     {offset
       c34GJ: // global
           _s2UJo::P64 = P64[Sp + 8];
           if (R1 == 1) goto c34Hg; else goto c34GX;
       c34Hg: // global
           I64[Sp + 8] = block_c34H3_info;
           R2 = _s2UJo::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c34GX: // global
           _s2UJp::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c34GQ_info;
           R5 = _s2UJp::P64;
           R4 = _s2UJo::P64;
           R3 = 53;
           R2 = (-1021);
           Sp = Sp + 16;
           call GHC.Float.$w$sfromRat''_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34GJ_info" {
     block_c34GJ_info:
         const _c34GJ;
         const 2;
         const 4294967326;
         const S2VLN_srt+80;
 },
 _c34H3() //  [R1]
         { []
         }
     {offset
       c34H3: // global
           _s2UJp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c34H7_info;
           R5 = _s2UJp::P64;
           R4 = R1;
           R3 = 53;
           R2 = (-1021);
           Sp = Sp + 8;
           call GHC.Float.$w$sfromRat''_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34H3_info" {
     block_c34H3_info:
         const _c34H3;
         const 1;
         const 4294967326;
         const S2VLN_srt+80;
 },
 _c34H7() //  [D1]
         { []
         }
     {offset
       c34H7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34Hk; else goto c34Hj;
       c34Hk: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c34Hj: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Neg_W64(D1);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34H7_info" {
     block_c34H7_info:
         const _c34H7;
         const 0;
         const 30;
 },
 _c34GQ() //  [D1]
         { []
         }
     {offset
       c34GQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34H0; else goto c34GZ;
       c34H0: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c34GZ: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34GQ_info" {
     block_c34GQ_info:
         const _c34GQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.552956941 UTC

[section ""data" . GHC.Float.$fFractionalDouble_$cfromRational_closure" {
     GHC.Float.$fFractionalDouble_$cfromRational_closure:
         const GHC.Float.$fFractionalDouble_$cfromRational_info;
         const 0;
 },
 GHC.Float.$fFractionalDouble_$cfromRational_entry() //  [R2]
         { []
         }
     {offset
       c34Ix: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34Iy; else goto c34Iz;
       c34Iy: // global
           R2 = R2;
           R1 = GHC.Float.$fFractionalDouble_$cfromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34Iz: // global
           I64[Sp - 8] = block_c34Iu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u34ID; else goto c34Iv;
       u34ID: // global
           call _c34Iu(R1) args: 0, res: 0, upd: 0;
       c34Iv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFractionalDouble_$cfromRational_info" {
     GHC.Float.$fFractionalDouble_$cfromRational_info:
         const GHC.Float.$fFractionalDouble_$cfromRational_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S2VLN_srt+96;
 },
 _c34Iu() //  [R1]
         { []
         }
     {offset
       c34Iu: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Float.rationalToDouble_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Iu_info" {
     block_c34Iu_info:
         const _c34Iu;
         const 0;
         const 4294967326;
         const S2VLN_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.558497343 UTC

[section ""data" . GHC.Float.$fFractionalDouble_closure" {
     GHC.Float.$fFractionalDouble_closure:
         const GHC.Real.C:Fractional_con_info;
         const GHC.Float.$fNumDouble_closure+1;
         const GHC.Float.divideDouble_closure+2;
         const GHC.Float.$fFractionalDouble_$crecip_closure+1;
         const GHC.Float.$fFractionalDouble_$cfromRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.561748451 UTC

[section ""data" . GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure" {
     GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure:
         const GHC.Float.$fEnumDouble_$snumericEnumFromThen_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$snumericEnumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c34IV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34IW; else goto c34IX;
       c34IW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34IX: // global
           I64[Sp - 8] = block_c34IS_info;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Float.$fFractionalDouble_closure+1;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$snumericEnumFromThen_info" {
     GHC.Float.$fEnumDouble_$snumericEnumFromThen_info:
         const GHC.Float.$fEnumDouble_$snumericEnumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+136;
 },
 _c34IS() //  [R1, R2]
         { []
         }
     {offset
       c34IS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c34J0; else goto c34IZ;
       c34J0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c34IZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34IS_info" {
     block_c34IS_info:
         const _c34IS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.568067985 UTC

[section ""data" . GHC.Float.$fEnumDouble_$snumericEnumFrom_closure" {
     GHC.Float.$fEnumDouble_$snumericEnumFrom_closure:
         const GHC.Float.$fEnumDouble_$snumericEnumFrom_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$snumericEnumFrom_entry() //  [R2]
         { []
         }
     {offset
       c34Jh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c34Ji; else goto c34Jj;
       c34Ji: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$snumericEnumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c34Jj: // global
           I64[Sp - 8] = block_c34Je_info;
           R3 = R2;
           R2 = GHC.Float.$fFractionalDouble_closure+1;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$snumericEnumFrom_info" {
     GHC.Float.$fEnumDouble_$snumericEnumFrom_info:
         const GHC.Float.$fEnumDouble_$snumericEnumFrom_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const S2VLN_srt+136;
 },
 _c34Je() //  [R1, R2]
         { []
         }
     {offset
       c34Je: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c34Jm; else goto c34Jl;
       c34Jm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c34Jl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Je_info" {
     block_c34Je_info:
         const _c34Je;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.575183136 UTC

[section ""data" . GHC.Float.rationalToFloat1_closure" {
     GHC.Float.rationalToFloat1_closure:
         const GHC.Float.rationalToFloat1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToFloat1_entry() //  [R1]
         { []
         }
     {offset
       c34JE: // global
           _r2UmU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c34JH; else goto c34JI;
       c34JI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34JK; else goto c34JJ;
       c34JK: // global
           HpAlloc = 16;
           goto c34JH;
       c34JH: // global
           R1 = _r2UmU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34JJ: // global
           (_c34Jz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmU::P64);
           if (_c34Jz::I64 == 0) goto c34JB; else goto c34JA;
       c34JB: // global
           call (I64[I64[_r2UmU::P64]])() args: 8, res: 0, upd: 8;
       c34JA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34Jz::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(0.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToFloat1_info" {
     GHC.Float.rationalToFloat1_info:
         const GHC.Float.rationalToFloat1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.580254634 UTC

[section ""data" . GHC.Float.rationalToFloat2_closure" {
     GHC.Float.rationalToFloat2_closure:
         const GHC.Float.rationalToFloat2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToFloat2_entry() //  [R1]
         { []
         }
     {offset
       c34K4: // global
           _r2UmV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c34K7; else goto c34K8;
       c34K8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34Ka; else goto c34K9;
       c34Ka: // global
           HpAlloc = 16;
           goto c34K7;
       c34K7: // global
           R1 = _r2UmV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34K9: // global
           (_c34JZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmV::P64);
           if (_c34JZ::I64 == 0) goto c34K1; else goto c34K0;
       c34K1: // global
           call (I64[I64[_r2UmV::P64]])() args: 8, res: 0, upd: 8;
       c34K0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34JZ::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(-1.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToFloat2_info" {
     GHC.Float.rationalToFloat2_info:
         const GHC.Float.rationalToFloat2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.585228735 UTC

[section ""data" . GHC.Float.rationalToFloat3_closure" {
     GHC.Float.rationalToFloat3_closure:
         const GHC.Float.rationalToFloat3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToFloat3_entry() //  [R1]
         { []
         }
     {offset
       c34Kv: // global
           _r2UmW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c34Ky; else goto c34Kz;
       c34Kz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34KB; else goto c34KA;
       c34KB: // global
           HpAlloc = 16;
           goto c34Ky;
       c34Ky: // global
           R1 = _r2UmW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34KA: // global
           (_c34Kq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmW::P64);
           if (_c34Kq::I64 == 0) goto c34Ks; else goto c34Kr;
       c34Ks: // global
           call (I64[I64[_r2UmW::P64]])() args: 8, res: 0, upd: 8;
       c34Kr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34Kq::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(1.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToFloat3_info" {
     GHC.Float.rationalToFloat3_info:
         const GHC.Float.rationalToFloat3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.589763194 UTC

[section ""data" . GHC.Float.rationalToFloat4_closure" {
     GHC.Float.rationalToFloat4_closure:
         const GHC.Types.F#_con_info;
         const 0.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.594572164 UTC

[section ""data" . $w$j1_r2Upy_closure" {
     $w$j1_r2Upy_closure:
         const $w$j1_r2Upy_info;
         const 0;
 },
 $w$j1_r2Upy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c34KY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c34KZ; else goto c34L0;
       c34KZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $w$j1_r2Upy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c34L0: // global
           I64[Sp - 32] = block_c34KT_info;
           _s2UJQ::P64 = R3;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s2UJP::I64 = R2;
           R2 = R4;
           I64[Sp - 24] = _s2UJP::I64;
           P64[Sp - 16] = _s2UJQ::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $w$j1_r2Upy_info" {
     $w$j1_r2Upy_info:
         const $w$j1_r2Upy_entry;
         const 0;
         const 4503664051879950;
         const 12884901907;
         const S2VLN_srt+8;
 },
 _c34KT() //  [R1]
         { []
         }
     {offset
       c34KT: // global
           if (R1 == 1) goto c34KX; else goto c34KW;
       c34KX: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c34KW: // global
           I64[Sp] = block_c34L3_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34KT_info" {
     block_c34KT_info:
         const _c34KT;
         const 67;
         const 47244640286;
         const S2VLN_srt+8;
 },
 _c34L3() //  [R1, R2]
         { []
         }
     {offset
       c34L3: // global
           I64[Sp] = block_c34L5_info;
           R3 = 1;
           R2 = R2;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34L3_info" {
     block_c34L3_info:
         const _c34L3;
         const 195;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34L5() //  [R1]
         { []
         }
     {offset
       c34L5: // global
           I64[Sp] = block_c34Lb_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34L5_info" {
     block_c34L5_info:
         const _c34L5;
         const 67;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34Lb() //  [R1]
         { []
         }
     {offset
       c34Lb: // global
           _s2UJU::P64 = P64[Sp + 16];
           _c34LY::P64 = R1 & 7;
           if (_c34LY::P64 < 3) goto u34LZ; else goto c34LQ;
       u34LZ: // global
           if (_c34LY::P64 < 2) goto u34M0; else goto c34Ln;
       u34M0: // global
           Sp = Sp + 8;
           call _c34LI() args: 0, res: 0, upd: 0;
       c34Ln: // global
           I64[Sp] = block_c34Ll_info;
           R2 = _s2UJU::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c34LQ: // global
           I64[Sp] = block_c34LO_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2UJU::P64;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Lb_info" {
     block_c34Lb_info:
         const _c34Lb;
         const 323;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34Ll() //  [R1]
         { []
         }
     {offset
       c34Ll: // global
           if (R1 & 1 == 0) goto u34M1; else goto c34LA;
       u34M1: // global
           Sp = Sp + 8;
           call _c34LI() args: 0, res: 0, upd: 0;
       c34LA: // global
           I64[Sp] = block_c34Ly_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Ll_info" {
     block_c34Ll_info:
         const _c34Ll;
         const 323;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34LI() //  []
         { []
         }
     {offset
       c34LI: // global
           R3 = I64[Sp];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 _c34Ly() //  [R1]
         { []
         }
     {offset
       c34Ly: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Ly_info" {
     block_c34Ly_info:
         const _c34Ly;
         const 451;
         const 30;
 },
 _c34LO() //  [R1]
         { []
         }
     {offset
       c34LO: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34LO_info" {
     block_c34LO_info:
         const _c34LO;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.626099305 UTC

[section ""data" . GHC.Float.$w$sfromRat''1_closure" {
     GHC.Float.$w$sfromRat''1_closure:
         const GHC.Float.$w$sfromRat''1_info;
         const 0;
 },
 GHC.Float.$w$sfromRat''1_slow() //  [R1]
         { []
         }
     {offset
       c34My: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Float.$w$sfromRat''1_entry(R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Float.$w$sfromRat''1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c34ML: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c34MM; else goto c34MN;
       c34MM: // global
           R1 = GHC.Float.$w$sfromRat''1_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c34MN: // global
           I64[Sp - 40] = block_c34ME_info;
           R1 = R5;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u34V0; else goto c34MF;
       u34V0: // global
           call _c34ME(R1) args: 0, res: 0, upd: 0;
       c34MF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sfromRat''1_info" {
     GHC.Float.$w$sfromRat''1_info:
         const GHC.Float.$w$sfromRat''1_entry;
         const 0;
         const 13512899121119246;
         const 17179869184;
         const S2VLN_srt+8;
         const 196;
         const GHC.Float.$w$sfromRat''1_slow;
 },
 _c34ME() //  [R1]
         { []
         }
     {offset
       c34ME: // global
           if (R1 & 7 == 1) goto c34MJ; else goto c34MI;
       c34MJ: // global
           I64[Sp] = block_c34TW_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c34MI: // global
           I64[Sp - 8] = 1;
           I64[Sp] = (-1);
           Sp = Sp - 8;
           call _s2UK7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34ME_info" {
     block_c34ME_info:
         const _c34ME;
         const 196;
         const 4505699866378270;
         const S2VLN_srt+8;
 },
 _c34TW() //  [R1, R2]
         { []
         }
     {offset
       c34TW: // global
           I64[Sp] = R1;
           I64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _s2UK7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34TW_info" {
     block_c34TW_info:
         const _c34TW;
         const 196;
         const 4505699866378270;
         const S2VLN_srt+8;
 },
 _s2UK7() //  []
         { []
         }
     {offset
       s2UK7: // global
           _s2UK5::P64 = P64[Sp + 32];
           if (I64[Sp] == 0) goto c34TA; else goto c34OR;
       c34TA: // global
           I64[Sp] = block_c34Pr_info;
           R1 = _s2UK5::P64;
           if (R1 & 7 != 0) goto u34Vh; else goto c34TB;
       u34Vh: // global
           call _c34Pr(R1) args: 0, res: 0, upd: 0;
       c34TB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c34OR: // global
           I64[Sp] = block_c34MW_info;
           R1 = _s2UK5::P64;
           if (R1 & 7 != 0) goto u34Vg; else goto c34OS;
       u34Vg: // global
           call _c34MW(R1) args: 0, res: 0, upd: 0;
       c34OS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c34Pr() //  [R1]
         { []
         }
     {offset
       c34Pr: // global
           if (R1 & 7 == 1) goto c34TM; else goto c34TH;
       c34TM: // global
           I64[Sp] = block_c34TK_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c34TH: // global
           I64[Sp + 40] = (-1);
           Sp = Sp + 8;
           call _s2UKL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34Pr_info" {
     block_c34Pr_info:
         const _c34Pr;
         const 1477;
         const 2100239007774;
         const S2VLN_srt+8;
 },
 _c34TK() //  [R1]
         { []
         }
     {offset
       c34TK: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _s2UKL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34TK_info" {
     block_c34TK_info:
         const _c34TK;
         const 1477;
         const 1550483193886;
         const S2VLN_srt+8;
 },
 _s2UKL() //  []
         { []
         }
     {offset
       s2UKL: // global
           _s2UK3::I64 = I64[Sp + 8];
           _s2UK4::I64 = I64[Sp + 16];
           _s2UK5::P64 = P64[Sp + 24];
           _s2UK8::I64 = I64[Sp];
           _s2UKM::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_s2UKM::I64,
                            _s2UK8::I64 + _s2UK3::I64 - 1)) goto c34RO; else goto c34Tz;
       c34RO: // global
           _s2UKQ::I64 = _s2UK8::I64 + (_s2UK3::I64 - _s2UK4::I64);
           if (%MO_S_Gt_W64(_s2UKQ::I64, 0)) goto c34RL; else goto c34RM;
       c34RL: // global
           if (%MO_S_Gt_W64(_s2UKQ::I64,
                            _s2UKM::I64)) goto c34Qm; else goto c34RJ;
       c34Qm: // global
           if (%MO_S_Le_W64(_s2UKQ::I64,
                            _s2UKM::I64 + 1)) goto c34PZ; else goto u34UT;
       c34PZ: // global
           I64[Sp] = block_c34PX_info;
           R1 = _s2UK5::P64;
           if (R1 & 7 != 0) goto u34Vj; else goto c34Q0;
       u34Vj: // global
           call _c34PX(R1) args: 0, res: 0, upd: 0;
       c34Q0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u34UT: // global
           Sp = Sp + 40;
           call _c34Qk() args: 0, res: 0, upd: 0;
       c34RJ: // global
           _s2UL4::I64 = -_s2UKQ::I64;
           if (%MO_S_Lt_W64(_s2UL4::I64, 0)) goto c34Rx; else goto c34RE;
       c34Rx: // global
           I64[Sp] = block_c34Rv_info;
           R3 = -_s2UL4::I64;
           R2 = _s2UK5::P64;
           I64[Sp + 32] = _s2UKQ::I64;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34RE: // global
           I64[Sp] = block_c34RD_info;
           R3 = _s2UL4::I64;
           R2 = _s2UK5::P64;
           I64[Sp + 32] = _s2UKQ::I64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34RM: // global
           R3 = _s2UK3::I64 - _s2UK4::I64 - _s2UKQ::I64;
           R2 = _s2UK5::P64;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       c34Tz: // global
           if (%MO_S_Ge_W64(_s2UKM::I64,
                            _s2UK4::I64)) goto c34Tx; else goto c34Ty;
       c34Tx: // global
           _s2ULo::I64 = -((_s2UKM::I64 + 1) - _s2UK4::I64);
           if (%MO_S_Lt_W64(_s2ULo::I64, 0)) goto c34Tk; else goto c34Tr;
       c34Tk: // global
           I64[Sp - 8] = block_c34Ti_info;
           R3 = -_s2ULo::I64;
           R2 = _s2UK5::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34Tr: // global
           I64[Sp - 8] = block_c34Tq_info;
           R3 = _s2ULo::I64;
           R2 = _s2UK5::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34Ty: // global
           R3 = -_s2UK8::I64;
           R2 = _s2UK5::P64;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 _c34PX() //  [R1]
         { []
         }
     {offset
       c34PX: // global
           if (R1 & 7 == 1) goto c34Qb; else goto c34Q6;
       c34Qb: // global
           I64[Sp] = block_c34Q9_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c34Q6: // global
           R3 = I64[Sp + 8] - I64[Sp + 16];
           R2 = GHC.Float.$fRealDouble1_closure;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34PX_info" {
     block_c34PX_info:
         const _c34PX;
         const 964;
         const 141733920798;
         const S2VLN_srt+32;
 },
 _c34Q9() //  [R2]
         { []
         }
     {offset
       c34Q9: // global
           if (R2 == 0) goto u34UU; else goto c34Qi;
       u34UU: // global
           Sp = Sp + 40;
           call _c34Qk() args: 0, res: 0, upd: 0;
       c34Qi: // global
           R3 = I64[Sp + 8] - I64[Sp + 16];
           R2 = GHC.Float.$fRealDouble1_closure;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Q9_info" {
     block_c34Q9_info:
         const _c34Q9;
         const 964;
         const 4294967326;
         const S2VLN_srt+32;
 },
 _c34Qk() //  []
         { []
         }
     {offset
       c34Qk: // global
           F1 = 0.0 :: W32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
     }
 },
 _c34Rv() //  [R1]
         { []
         }
     {offset
       c34Rv: // global
           P64[Sp] = R1;
           call _s2UL5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34Rv_info" {
     block_c34Rv_info:
         const _c34Rv;
         const 708;
         const 313532612638;
         const S2VLN_srt+8;
 },
 _c34RD() //  [R1]
         { []
         }
     {offset
       c34RD: // global
           P64[Sp] = R1;
           call _s2UL5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34RD_info" {
     block_c34RD_info:
         const _c34RD;
         const 708;
         const 313532612638;
         const S2VLN_srt+8;
 },
 _s2UL5() //  []
         { []
         }
     {offset
       s2UL5: // global
           I64[Sp - 8] = block_c34QA_info;
           R3 = I64[Sp + 32] - 1;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c34QA() //  [R1]
         { []
         }
     {offset
       c34QA: // global
           _s2UK3::I64 = I64[Sp + 16];
           _s2UK4::I64 = I64[Sp + 24];
           _s2UL6::P64 = P64[Sp + 8];
           if (R1 == 0) goto c34QS; else goto u34UF;
       c34QS: // global
           R3 = _s2UK3::I64 - _s2UK4::I64;
           R2 = _s2UL6::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       u34UF: // global
           if (R1 == 1) goto c34QX; else goto c34QK;
       c34QX: // global
           I64[Sp] = block_c34QV_info;
           R2 = _s2UL6::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c34QK: // global
           I64[Sp + 32] = block_c34QH_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2UL6::P64;
           I64[Sp + 40] = _s2UK3::I64 - _s2UK4::I64;
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34QA_info" {
     block_c34QA_info:
         const _c34QA;
         const 1925;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34QV() //  [R1]
         { []
         }
     {offset
       c34QV: // global
           _s2UK3::I64 = I64[Sp + 16];
           _s2UK4::I64 = I64[Sp + 24];
           _s2UL6::P64 = P64[Sp + 8];
           if (R1 & 1 == 0) goto c34Rl; else goto c34Rd;
       c34Rl: // global
           R3 = _s2UK3::I64 - _s2UK4::I64;
           R2 = _s2UL6::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       c34Rd: // global
           I64[Sp + 32] = block_c34Rb_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2UL6::P64;
           I64[Sp + 40] = _s2UK3::I64 - _s2UK4::I64;
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34QV_info" {
     block_c34QV_info:
         const _c34QV;
         const 1925;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34Rb() //  [R1]
         { []
         }
     {offset
       c34Rb: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Rb_info" {
     block_c34Rb_info:
         const _c34Rb;
         const 65;
         const 30;
 },
 _c34QH() //  [R1]
         { []
         }
     {offset
       c34QH: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34QH_info" {
     block_c34QH_info:
         const _c34QH;
         const 65;
         const 30;
 },
 _c34Ti() //  [R1]
         { []
         }
     {offset
       c34Ti: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _s2ULr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34Ti_info" {
     block_c34Ti_info:
         const _c34Ti;
         const 1477;
         const 313532612638;
         const S2VLN_srt+8;
 },
 _c34Tq() //  [R1]
         { []
         }
     {offset
       c34Tq: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _s2ULr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34Tq_info" {
     block_c34Tq_info:
         const _c34Tq;
         const 1477;
         const 313532612638;
         const S2VLN_srt+8;
 },
 _s2ULr() //  []
         { []
         }
     {offset
       s2ULr: // global
           _s2ULt::I64 = I64[Sp + 32] - I64[Sp + 16];
           I64[Sp - 8] = block_c34Sb_info;
           R3 = _s2ULt::I64;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c34Sb() //  [R1]
         { []
         }
     {offset
       c34Sb: // global
           _s2UK4::I64 = I64[Sp + 24];
           _s2UK8::I64 = I64[Sp + 8];
           _s2UKM::I64 = I64[Sp + 40];
           _s2ULs::P64 = P64[Sp + 16];
           if (R1 == 0) goto c34ST; else goto u34UG;
       c34ST: // global
           R3 = _s2UKM::I64 + (1 - _s2UK4::I64 - _s2UK8::I64);
           R2 = _s2ULs::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       u34UG: // global
           if (R1 == 2) goto c34T7; else goto c34Si;
       c34T7: // global
           I64[Sp + 32] = block_c34T5_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2ULs::P64;
           I64[Sp + 40] = _s2UKM::I64 + (1 - _s2UK4::I64 - _s2UK8::I64);
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       c34Si: // global
           I64[Sp] = block_c34Sf_info;
           R2 = _s2ULs::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Sb_info" {
     block_c34Sb_info:
         const _c34Sb;
         const 1861;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34T5() //  [R1]
         { []
         }
     {offset
       c34T5: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34T5_info" {
     block_c34T5_info:
         const _c34T5;
         const 65;
         const 30;
 },
 _c34Sf() //  [R1]
         { []
         }
     {offset
       c34Sf: // global
           _s2UK4::I64 = I64[Sp + 24];
           _s2UK8::I64 = I64[Sp + 8];
           _s2UKM::I64 = I64[Sp + 40];
           _s2ULs::P64 = P64[Sp + 16];
           if (R1 & 1 == 0) goto c34SM; else goto c34SE;
       c34SM: // global
           R3 = _s2UKM::I64 + (1 - _s2UK4::I64 - _s2UK8::I64);
           R2 = _s2ULs::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       c34SE: // global
           I64[Sp + 32] = block_c34SC_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s2ULs::P64;
           I64[Sp + 40] = _s2UKM::I64 + (1 - _s2UK4::I64 - _s2UK8::I64);
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Sf_info" {
     block_c34Sf_info:
         const _c34Sf;
         const 1861;
         const 38654705694;
         const S2VLN_srt+8;
 },
 _c34SC() //  [R1]
         { []
         }
     {offset
       c34SC: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34SC_info" {
     block_c34SC_info:
         const _c34SC;
         const 65;
         const 30;
 },
 _c34MW() //  [R1]
         { []
         }
     {offset
       c34MW: // global
           if (R1 & 7 == 1) goto c34Pb; else goto c34P6;
       c34Pb: // global
           I64[Sp] = block_c34P9_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c34P6: // global
           _s2UKF::I64 = (-1) - I64[Sp + 8];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s2UKF::I64)) goto u34UJ; else goto c34P4;
       u34UJ: // global
           Sp = Sp + 16;
           call _c34Pm() args: 0, res: 0, upd: 0;
       c34P4: // global
           I64[Sp + 16] = _s2UKF::I64;
           Sp = Sp + 16;
           call _s2UKb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34MW_info" {
     block_c34MW_info:
         const _c34MW;
         const 453;
         const 140758963191838;
         const S2VLN_srt+48;
 },
 _c34P9() //  [R1]
         { []
         }
     {offset
       c34P9: // global
           _s2UKJ::I64 = R1 - I64[Sp + 8];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s2UKJ::I64)) goto u34UL; else goto c34Pn;
       u34UL: // global
           Sp = Sp + 16;
           call _c34Pm() args: 0, res: 0, upd: 0;
       c34Pn: // global
           I64[Sp + 16] = _s2UKJ::I64;
           Sp = Sp + 16;
           call _s2UKb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34P9_info" {
     block_c34P9_info:
         const _c34P9;
         const 453;
         const 140741783322654;
         const S2VLN_srt+48;
 },
 _c34Pm() //  []
         { []
         }
     {offset
       c34Pm: // global
           I64[Sp] = I64[Sp];
           call _s2UKb() args: 0, res: 0, upd: 0;
     }
 },
 _s2UKb() //  []
         { []
         }
     {offset
       s2UKb: // global
           _s2UK4::I64 = I64[Sp + 8];
           _s2UK5::P64 = P64[Sp + 16];
           _s2UKc::I64 = I64[Sp];
           if (%MO_S_Ge_W64(_s2UKc::I64,
                            _s2UK4::I64)) goto c34Os; else goto c34OJ;
       c34Os: // global
           _s2UK6::P64 = P64[Sp + 24];
           if (_s2UKc::I64 == _s2UK4::I64) goto c34Oq; else goto c34Oj;
       c34Oq: // global
           P64[Sp + 24] = _s2UK5::P64;
           P64[Sp + 16] = _s2UK6::P64;
           call _s2UKd() args: 0, res: 0, upd: 0;
       c34Oj: // global
           _s2UKw::I64 = _s2UKc::I64 - _s2UK4::I64;
           if (%MO_S_Lt_W64(_s2UKw::I64, 0)) goto c34Oe; else goto c34Oh;
       c34Oe: // global
           I64[Sp - 8] = block_c34Og_info;
           R3 = -_s2UKw::I64;
           R2 = _s2UK6::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34Oh: // global
           I64[Sp - 8] = block_c34Og_info;
           R3 = _s2UKw::I64;
           R2 = _s2UK6::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34OJ: // global
           _s2UKA::I64 = _s2UK4::I64 - _s2UKc::I64;
           if (%MO_S_Lt_W64(_s2UKA::I64, 0)) goto c34OF; else goto c34OI;
       c34OF: // global
           I64[Sp - 8] = block_c34OH_info;
           R3 = -_s2UKA::I64;
           R2 = _s2UK5::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34OI: // global
           I64[Sp - 8] = block_c34OH_info;
           R3 = _s2UKA::I64;
           R2 = _s2UK5::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c34Og() //  [R1]
         { []
         }
     {offset
       c34Og: // global
           _s2UKe::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp + 32] = _s2UKe::P64;
           Sp = Sp + 8;
           call _s2UKd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34Og_info" {
     block_c34Og_info:
         const _c34Og;
         const 708;
         const 140741783322654;
         const S2VLN_srt+48;
 },
 _c34OH() //  [R1]
         { []
         }
     {offset
       c34OH: // global
           _s2UKf::P64 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           P64[Sp + 24] = _s2UKf::P64;
           Sp = Sp + 8;
           call _s2UKd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c34OH_info" {
     block_c34OH_info:
         const _c34OH;
         const 452;
         const 140741783322654;
         const S2VLN_srt+48;
 },
 _s2UKd() //  []
         { []
         }
     {offset
       s2UKd: // global
           _s2UK4::I64 = I64[Sp + 8];
           _s2UKf::P64 = P64[Sp + 16];
           if (%MO_S_Lt_W64(_s2UK4::I64, 0)) goto c34Nf; else goto c34NC;
       c34Nf: // global
           I64[Sp - 8] = block_c34Nd_info;
           R3 = -_s2UK4::I64;
           R2 = _s2UKf::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34NC: // global
           I64[Sp - 8] = block_c34NB_info;
           R3 = _s2UK4::I64;
           R2 = _s2UKf::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c34Nd() //  [R1]
         { []
         }
     {offset
       c34Nd: // global
           I64[Sp] = block_c34Nj_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Nd_info" {
     block_c34Nd_info:
         const _c34Nd;
         const 196;
         const 4294967326;
         const S2VLN_srt+168;
 },
 _c34Nj() //  [R1]
         { []
         }
     {offset
       c34Nj: // global
           _s2UKf::P64 = P64[Sp + 24];
           if (R1 == 1) goto c34Nv; else goto c34Nq;
       c34Nv: // global
           I64[Sp] = block_c34Nt_info;
           R3 = 1;
           R2 = _s2UKf::P64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34Nq: // global
           R4 = _s2UKf::P64;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] - I64[Sp + 16];
           Sp = Sp + 40;
           call $w$j1_r2Upy_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Nj_info" {
     block_c34Nj_info:
         const _c34Nj;
         const 196;
         const 4294967326;
         const S2VLN_srt+168;
 },
 _c34Nt() //  [R1]
         { []
         }
     {offset
       c34Nt: // global
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] + (1 - I64[Sp + 16]);
           Sp = Sp + 40;
           call $w$j1_r2Upy_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Nt_info" {
     block_c34Nt_info:
         const _c34Nt;
         const 452;
         const 4294967326;
         const S2VLN_srt+168;
 },
 _c34NB() //  [R1]
         { []
         }
     {offset
       c34NB: // global
           I64[Sp] = block_c34NG_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34NB_info" {
     block_c34NB_info:
         const _c34NB;
         const 196;
         const 4294967326;
         const S2VLN_srt+168;
 },
 _c34NG() //  [R1]
         { []
         }
     {offset
       c34NG: // global
           _s2UKf::P64 = P64[Sp + 24];
           if (R1 == 1) goto c34NS; else goto c34NN;
       c34NS: // global
           I64[Sp] = block_c34NQ_info;
           R3 = 1;
           R2 = _s2UKf::P64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c34NN: // global
           R4 = _s2UKf::P64;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] - I64[Sp + 16];
           Sp = Sp + 40;
           call $w$j1_r2Upy_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34NG_info" {
     block_c34NG_info:
         const _c34NG;
         const 196;
         const 4294967326;
         const S2VLN_srt+168;
 },
 _c34NQ() //  [R1]
         { []
         }
     {offset
       c34NQ: // global
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] + (1 - I64[Sp + 16]);
           Sp = Sp + 40;
           call $w$j1_r2Upy_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34NQ_info" {
     block_c34NQ_info:
         const _c34NQ;
         const 452;
         const 4294967326;
         const S2VLN_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.688693653 UTC

[section ""data" . GHC.Float.fromRat''_$sfromRat''_closure" {
     GHC.Float.fromRat''_$sfromRat''_closure:
         const GHC.Float.fromRat''_$sfromRat''_info;
         const 0;
 },
 GHC.Float.fromRat''_$sfromRat''_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c34Yd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c34Yq; else goto c34Yr;
       c34Yq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat''_$sfromRat''_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c34Yr: // global
           I64[Sp - 32] = block_c34Ya_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u34Yy; else goto c34Yb;
       u34Yy: // global
           call _c34Ya(R1) args: 0, res: 0, upd: 0;
       c34Yb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat''_$sfromRat''_info" {
     GHC.Float.fromRat''_$sfromRat''_info:
         const GHC.Float.fromRat''_$sfromRat''_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2VLN_srt+176;
 },
 _c34Ya() //  [R1]
         { []
         }
     {offset
       c34Ya: // global
           I64[Sp] = block_c34Yg_info;
           _s2UM3::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2UM3::I64;
           if (R1 & 7 != 0) goto u34Yx; else goto c34Yh;
       u34Yx: // global
           call _c34Yg(R1) args: 0, res: 0, upd: 0;
       c34Yh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Ya_info" {
     block_c34Ya_info:
         const _c34Ya;
         const 3;
         const 4294967326;
         const S2VLN_srt+176;
 },
 _c34Yg() //  [R1]
         { []
         }
     {offset
       c34Yg: // global
           _s2UM1::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c34Yl_info;
           R5 = _s2UM1::P64;
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Float.$w$sfromRat''1_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Yg_info" {
     block_c34Yg_info:
         const _c34Yg;
         const 67;
         const 4294967326;
         const S2VLN_srt+176;
 },
 _c34Yl() //  [F1]
         { []
         }
     {offset
       c34Yl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34Yw; else goto c34Yv;
       c34Yw: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c34Yv: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Yl_info" {
     block_c34Yl_info:
         const _c34Yl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.702386411 UTC

[section ""data" . GHC.Float.rationalToFloat_closure" {
     GHC.Float.rationalToFloat_closure:
         const GHC.Float.rationalToFloat_info;
         const 0;
 },
 GHC.Float.rationalToFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c34YZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c34Z0; else goto c34Z1;
       c34Z0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.rationalToFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c34Z1: // global
           I64[Sp - 24] = block_c34YU_info;
           _s2UM8::P64 = R3;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s2UM7::P64 = R2;
           R2 = _s2UM8::P64;
           P64[Sp - 16] = _s2UM7::P64;
           P64[Sp - 8] = _s2UM8::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToFloat_info" {
     GHC.Float.rationalToFloat_info:
         const GHC.Float.rationalToFloat_entry;
         const 0;
         const 137359792929767438;
         const 8589934607;
         const S2VLN_srt+24;
 },
 _c34YU() //  [R1]
         { []
         }
     {offset
       c34YU: // global
           _s2UM7::P64 = P64[Sp + 8];
           if (R1 == 1) goto c34YY; else goto c34YX;
       c34YY: // global
           I64[Sp] = block_c34ZR_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s2UM7::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c34YX: // global
           I64[Sp] = block_c34Z4_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s2UM7::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34YU_info" {
     block_c34YU_info:
         const _c34YU;
         const 2;
         const 128352593675026462;
         const S2VLN_srt+24;
 },
 _c34ZR() //  [R1]
         { []
         }
     {offset
       c34ZR: // global
           if (R1 == 1) goto c350d; else goto c34ZZ;
       c350d: // global
           R1 = GHC.Float.rationalToFloat1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c34ZZ: // global
           I64[Sp + 16] = block_c34ZW_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34ZR_info" {
     block_c34ZR_info:
         const _c34ZR;
         const 130;
         const 126100793861341214;
         const S2VLN_srt+24;
 },
 _c34ZW() //  [R1]
         { []
         }
     {offset
       c34ZW: // global
           if (R1 == 1) goto c3509; else goto c3505;
       c3509: // global
           R1 = GHC.Float.rationalToFloat2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3505: // global
           R1 = GHC.Float.rationalToFloat3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34ZW_info" {
     block_c34ZW_info:
         const _c34ZW;
         const 0;
         const 12884901918;
         const S2VLN_srt+208;
 },
 _c34Z4() //  [R1]
         { []
         }
     {offset
       c34Z4: // global
           if (R1 == 1) goto c34ZO; else goto c34Zc;
       c34ZO: // global
           R1 = GHC.Float.rationalToFloat4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c34Zc: // global
           I64[Sp] = block_c34Z9_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Z4_info" {
     block_c34Z4_info:
         const _c34Z4;
         const 2;
         const 2251804108652574;
         const S2VLN_srt+24;
 },
 _c34Z9() //  [R1]
         { []
         }
     {offset
       c34Z9: // global
           _s2UM7::P64 = P64[Sp + 8];
           if (R1 == 1) goto c34ZG; else goto c34Zn;
       c34ZG: // global
           I64[Sp + 8] = block_c34Zt_info;
           R2 = _s2UM7::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c34Zn: // global
           _s2UM8::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c34Zg_info;
           R5 = _s2UM8::P64;
           R4 = _s2UM7::P64;
           R3 = 24;
           R2 = (-125);
           Sp = Sp + 16;
           call GHC.Float.$w$sfromRat''1_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Z9_info" {
     block_c34Z9_info:
         const _c34Z9;
         const 2;
         const 4294967326;
         const S2VLN_srt+176;
 },
 _c34Zt() //  [R1]
         { []
         }
     {offset
       c34Zt: // global
           _s2UM8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c34Zx_info;
           R5 = _s2UM8::P64;
           R4 = R1;
           R3 = 24;
           R2 = (-125);
           Sp = Sp + 8;
           call GHC.Float.$w$sfromRat''1_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Zt_info" {
     block_c34Zt_info:
         const _c34Zt;
         const 1;
         const 4294967326;
         const S2VLN_srt+176;
 },
 _c34Zx() //  [F1]
         { []
         }
     {offset
       c34Zx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34ZK; else goto c34ZJ;
       c34ZK: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c34ZJ: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Neg_W32(F1);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Zx_info" {
     block_c34Zx_info:
         const _c34Zx;
         const 0;
         const 30;
 },
 _c34Zg() //  [F1]
         { []
         }
     {offset
       c34Zg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c34Zq; else goto c34Zp;
       c34Zq: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c34Zp: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c34Zg_info" {
     block_c34Zg_info:
         const _c34Zg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.721059924 UTC

[section ""data" . GHC.Float.$fFractionalFloat_$cfromRational_closure" {
     GHC.Float.$fFractionalFloat_$cfromRational_closure:
         const GHC.Float.$fFractionalFloat_$cfromRational_info;
         const 0;
 },
 GHC.Float.$fFractionalFloat_$cfromRational_entry() //  [R2]
         { []
         }
     {offset
       c350X: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c350Y; else goto c350Z;
       c350Y: // global
           R2 = R2;
           R1 = GHC.Float.$fFractionalFloat_$cfromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c350Z: // global
           I64[Sp - 8] = block_c350U_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3513; else goto c350V;
       u3513: // global
           call _c350U(R1) args: 0, res: 0, upd: 0;
       c350V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFractionalFloat_$cfromRational_info" {
     GHC.Float.$fFractionalFloat_$cfromRational_info:
         const GHC.Float.$fFractionalFloat_$cfromRational_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S2VLN_srt+192;
 },
 _c350U() //  [R1]
         { []
         }
     {offset
       c350U: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Float.rationalToFloat_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c350U_info" {
     block_c350U_info:
         const _c350U;
         const 0;
         const 4294967326;
         const S2VLN_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.728213007 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$catanh_closure" {
     GHC.Float.$fFloatingFloat_$catanh_closure:
         const GHC.Float.$fFloatingFloat_$catanh_info;
 },
 GHC.Float.$fFloatingFloat_$catanh_entry() //  [R2]
         { []
         }
     {offset
       c351k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c351E; else goto c351F;
       c351E: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$catanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c351F: // global
           I64[Sp - 8] = block_c351h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u351J; else goto c351i;
       u351J: // global
           call _c351h(R1) args: 0, res: 0, upd: 0;
       c351i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$catanh_info" {
     GHC.Float.$fFloatingFloat_$catanh_info:
         const GHC.Float.$fFloatingFloat_$catanh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c351h() //  [R1]
         { []
         }
     {offset
       c351h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c351I; else goto c351H;
       c351I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c351H: // global
           _s2UMo::F32 = F32[R1 + 7];
           (_c351w::F32) = call MO_F32_Log(%MO_F_Quot_W32(%MO_F_Add_W32(_s2UMo::F32,
                                                                        1.0 :: W32),
                                                          %MO_F_Sub_W32(1.0 :: W32, _s2UMo::F32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Mul_W32(_c351w::F32, 0.5 :: W32);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c351h_info" {
     block_c351h_info:
         const _c351h;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.7356993 UTC

[section ""data" . GHC.Float.$fFractionalFloat_$crecip_closure" {
     GHC.Float.$fFractionalFloat_$crecip_closure:
         const GHC.Float.$fFractionalFloat_$crecip_info;
 },
 GHC.Float.$fFractionalFloat_$crecip_entry() //  [R2]
         { []
         }
     {offset
       c352a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c352h; else goto c352i;
       c352h: // global
           R2 = R2;
           R1 = GHC.Float.$fFractionalFloat_$crecip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c352i: // global
           I64[Sp - 8] = block_c3527_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u352m; else goto c3528;
       u352m: // global
           call _c3527(R1) args: 0, res: 0, upd: 0;
       c3528: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFractionalFloat_$crecip_info" {
     GHC.Float.$fFractionalFloat_$crecip_info:
         const GHC.Float.$fFractionalFloat_$crecip_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3527() //  [R1]
         { []
         }
     {offset
       c3527: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c352l; else goto c352k;
       c352l: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c352k: // global
           _s2UMx::F32 = %MO_F_Quot_W32(1.0 :: W32, F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2UMx::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3527_info" {
     block_c3527_info:
         const _c3527;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.741190412 UTC

[section ""data" . GHC.Float.$fFractionalFloat_closure" {
     GHC.Float.$fFractionalFloat_closure:
         const GHC.Real.C:Fractional_con_info;
         const GHC.Float.$fNumFloat_closure+1;
         const GHC.Float.divideFloat_closure+2;
         const GHC.Float.$fFractionalFloat_$crecip_closure+1;
         const GHC.Float.$fFractionalFloat_$cfromRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.744036411 UTC

[section ""data" . GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure" {
     GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure:
         const GHC.Float.$fEnumFloat_$snumericEnumFromThen_info;
         const 0;
 },
 GHC.Float.$fEnumFloat_$snumericEnumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c352I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c352J; else goto c352K;
       c352J: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c352K: // global
           I64[Sp - 8] = block_c352F_info;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Float.$fFractionalFloat_closure+1;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$snumericEnumFromThen_info" {
     GHC.Float.$fEnumFloat_$snumericEnumFromThen_info:
         const GHC.Float.$fEnumFloat_$snumericEnumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+232;
 },
 _c352F() //  [R1, R2]
         { []
         }
     {offset
       c352F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c352N; else goto c352M;
       c352N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c352M: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c352F_info" {
     block_c352F_info:
         const _c352F;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.750952066 UTC

[section ""data" . GHC.Float.$fEnumFloat_$snumericEnumFrom_closure" {
     GHC.Float.$fEnumFloat_$snumericEnumFrom_closure:
         const GHC.Float.$fEnumFloat_$snumericEnumFrom_info;
         const 0;
 },
 GHC.Float.$fEnumFloat_$snumericEnumFrom_entry() //  [R2]
         { []
         }
     {offset
       c3534: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3535; else goto c3536;
       c3535: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$snumericEnumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3536: // global
           I64[Sp - 8] = block_c3531_info;
           R3 = R2;
           R2 = GHC.Float.$fFractionalFloat_closure+1;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$snumericEnumFrom_info" {
     GHC.Float.$fEnumFloat_$snumericEnumFrom_info:
         const GHC.Float.$fEnumFloat_$snumericEnumFrom_entry;
         const 0;
         const 21994527522830;
         const 4294967301;
         const S2VLN_srt+152;
 },
 _c3531() //  [R1, R2]
         { []
         }
     {offset
       c3531: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3539; else goto c3538;
       c3539: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3538: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3531_info" {
     block_c3531_info:
         const _c3531;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.757639228 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$cacosh_closure" {
     GHC.Float.$fFloatingFloat_$cacosh_closure:
         const GHC.Float.$fFloatingFloat_$cacosh_info;
 },
 GHC.Float.$fFloatingFloat_$cacosh_entry() //  [R2]
         { []
         }
     {offset
       c353q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c353U; else goto c353V;
       c353U: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$cacosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c353V: // global
           I64[Sp - 8] = block_c353n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u353Z; else goto c353o;
       u353Z: // global
           call _c353n(R1) args: 0, res: 0, upd: 0;
       c353o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$cacosh_info" {
     GHC.Float.$fFloatingFloat_$cacosh_info:
         const GHC.Float.$fFloatingFloat_$cacosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c353n() //  [R1]
         { []
         }
     {offset
       c353n: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c353Y; else goto c353X;
       c353Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c353X: // global
           _s2UMJ::F32 = F32[R1 + 7];
           (_c353C::F32) = call MO_F32_Sqrt(%MO_F_Quot_W32(%MO_F_Sub_W32(_s2UMJ::F32,
                                                                         1.0 :: W32),
                                                           %MO_F_Add_W32(_s2UMJ::F32, 1.0 :: W32)));
           (_c353P::F32) = call MO_F32_Log(%MO_F_Add_W32(_s2UMJ::F32,
                                                         %MO_F_Mul_W32(%MO_F_Add_W32(_s2UMJ::F32,
                                                                                     1.0 :: W32),
                                                                       _c353C::F32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c353P::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c353n_info" {
     block_c353n_info:
         const _c353n;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.764842042 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$casinh_closure" {
     GHC.Float.$fFloatingFloat_$casinh_closure:
         const GHC.Float.$fFloatingFloat_$casinh_info;
 },
 GHC.Float.$fFloatingFloat_$casinh_entry() //  [R2]
         { []
         }
     {offset
       c354t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c354O; else goto c354P;
       c354O: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$casinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c354P: // global
           I64[Sp - 8] = block_c354q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u354T; else goto c354r;
       u354T: // global
           call _c354q(R1) args: 0, res: 0, upd: 0;
       c354r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$casinh_info" {
     GHC.Float.$fFloatingFloat_$casinh_info:
         const GHC.Float.$fFloatingFloat_$casinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c354q() //  [R1]
         { []
         }
     {offset
       c354q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c354S; else goto c354R;
       c354S: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c354R: // global
           _s2UMU::F32 = F32[R1 + 7];
           (_c354C::F32) = call MO_F32_Sqrt(%MO_F_Add_W32(%MO_F_Mul_W32(_s2UMU::F32,
                                                                        _s2UMU::F32),
                                                          1.0 :: W32));
           (_c354J::F32) = call MO_F32_Log(%MO_F_Add_W32(_s2UMU::F32,
                                                         _c354C::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c354J::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c354q_info" {
     block_c354q_info:
         const _c354q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.771015594 UTC

[section ""data" . sat_s2UN0_closure" {
     sat_s2UN0_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.772752017 UTC

[section ""data" . sat_s2UN1_closure" {
     sat_s2UN1_closure:
         const :_con_info;
         const sat_s2UN0_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.775308439 UTC

[section ""data" . GHC.Float.$fRealFloatDouble5_closure" {
     GHC.Float.$fRealFloatDouble5_closure:
         const GHC.Float.$fRealFloatDouble5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.$fRealFloatDouble5_entry() //  [R1]
         { []
         }
     {offset
       c355h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c355i; else goto c355j;
       c355i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c355j: // global
           (_c355e::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c355e::I64 == 0) goto c355g; else goto c355f;
       c355g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c355f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c355e::I64;
           R3 = sat_s2UN1_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble5_info" {
     GHC.Float.$fRealFloatDouble5_info:
         const GHC.Float.$fRealFloatDouble5_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.779134038 UTC

[section ""data" . GHC.Float.minExpt_closure" {
     GHC.Float.minExpt_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.780819377 UTC

[section ""data" . GHC.Float.$fRealFracFloat2_closure" {
     GHC.Float.$fRealFracFloat2_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.782618266 UTC

[section ""data" . GHC.Float.$fRealFracFloat1_closure" {
     GHC.Float.$fRealFracFloat1_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.79494939 UTC

[section ""data" . GHC.Float.$w$cproperFraction1_closure" {
     GHC.Float.$w$cproperFraction1_closure:
         const GHC.Float.$w$cproperFraction1_info;
         const 0;
 },
 GHC.Float.$w$cproperFraction1_slow() //  [R1]
         { []
         }
     {offset
       c355v: // global
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $dReal_s2UN7_entry() //  [R1]
         { []
         }
     {offset
       c355H: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s2UN7_info" {
     $dReal_s2UN7_info:
         const $dReal_s2UN7_entry;
         const 1;
         const 16;
 },
 $dNum_s2UN8_entry() //  [R1]
         { []
         }
     {offset
       c355O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c355P; else goto c355Q;
       c355P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c355Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s2UN8_info" {
     $dNum_s2UN8_info:
         const $dNum_s2UN8_entry;
         const 1;
         const 16;
 },
 i_s2UNa_entry() //  [R1]
         { []
         }
     {offset
       c3563: // global
           _s2UNa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3564; else goto c3565;
       c3565: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3567; else goto c3566;
       c3567: // global
           HpAlloc = 16;
           goto c3564;
       c3564: // global
           R1 = _s2UNa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3566: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UNa::P64;
           _s2UN5::I64 = I64[_s2UNa::P64 + 16];
           _s2UN6::I64 = I64[_s2UNa::P64 + 24];
           if (%MO_S_Lt_W64(_s2UN5::I64, 0)) goto c3561; else goto c3562;
       c3561: // global
           _s2UNc::I64 = -_s2UN6::I64;
           if (%MO_S_Lt_W64(_s2UNc::I64, 64)) goto c356q; else goto c356A;
       c356q: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -%MO_S_Shr_W64(-_s2UN5::I64, _s2UNc::I64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c356A: // global
           if (%MO_S_Ge_W64(-_s2UN5::I64, 0)) goto c356S; else goto c356z;
       c356z: // global
           Hp = Hp - 16;
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3562: // global
           _s2UNj::I64 = -_s2UN6::I64;
           if (%MO_S_Lt_W64(_s2UNj::I64, 64)) goto c356N; else goto c356U;
       c356N: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Shr_W64(_s2UN5::I64, _s2UNj::I64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c356U: // global
           if (%MO_S_Ge_W64(_s2UN5::I64, 0)) goto c356S; else goto c356T;
       c356S: // global
           Hp = Hp - 16;
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c356T: // global
           Hp = Hp - 16;
           R1 = GHC.Float.$fRealFracFloat1_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . i_s2UNa_info" {
     i_s2UNa_info:
         const i_s2UNa_entry;
         const 8589934592;
         const 20;
 },
 sat_s2UNB_entry() //  [R1]
         { []
         }
     {offset
       c3572: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3573; else goto c3574;
       c3573: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3574: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c356Z_info;
           _s2UN5::I64 = I64[R1 + 24];
           _s2UN6::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s2UN5::I64;
           I64[Sp - 24] = _s2UN6::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u357O; else goto c3570;
       u357O: // global
           call _c356Z(R1) args: 0, res: 0, upd: 0;
       c3570: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UNB_info" {
     sat_s2UNB_info:
         const sat_s2UNB_entry;
         const 8589934593;
         const 15;
 },
 _c356Z() //  [R1]
         { []
         }
     {offset
       c356Z: // global
           _s2UN5::I64 = I64[Sp + 8];
           _s2UNt::I64 = -I64[Sp + 16];
           if (%MO_S_Lt_W64(_s2UNt::I64, 64)) goto c357u; else goto c357J;
       c357u: // global
           I64[Sp + 8] = block_c357k_info;
           R2 = _s2UN5::I64 - (I64[R1 + 7] << _s2UNt::I64);
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
       c357J: // global
           I64[Sp + 8] = block_c357A_info;
           R2 = _s2UN5::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c356Z_info" {
     block_c356Z_info:
         const _c356Z;
         const 194;
         const 30;
 },
 _c357k() //  [R1]
         { []
         }
     {offset
       c357k: // global
           _s2UN6::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c357o_info;
           R3 = _s2UN6::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c357k_info" {
     block_c357k_info:
         const _c357k;
         const 65;
         const 30;
 },
 _c357o() //  [F1]
         { []
         }
     {offset
       c357o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c357y; else goto c357x;
       c357y: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 24;
       c357x: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c357o_info" {
     block_c357o_info:
         const _c357o;
         const 0;
         const 30;
 },
 _c357A() //  [R1]
         { []
         }
     {offset
       c357A: // global
           _s2UN6::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c357E_info;
           R3 = _s2UN6::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c357A_info" {
     block_c357A_info:
         const _c357A;
         const 65;
         const 30;
 },
 _c357E() //  [F1]
         { []
         }
     {offset
       c357E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c357N; else goto c357M;
       c357N: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 24;
       c357M: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c357E_info" {
     block_c357E_info:
         const _c357E;
         const 0;
         const 30;
 },
 sat_s2UNp_entry() //  [R1]
         { []
         }
     {offset
       c3580: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3581; else goto c3582;
       c3581: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3582: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c357X_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3586; else goto c357Y;
       u3586: // global
           call _c357X(R1) args: 0, res: 0, upd: 0;
       c357Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UNp_info" {
     sat_s2UNp_info:
         const sat_s2UNp_entry;
         const 1;
         const 16;
 },
 _c357X() //  [R1]
         { []
         }
     {offset
       c357X: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c357X_info" {
     block_c357X_info:
         const _c357X;
         const 0;
         const 30;
 },
 sat_s2UNq_entry() //  [R1]
         { []
         }
     {offset
       c3587: // global
           _s2UNq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3588; else goto c3589;
       c3589: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c358b; else goto c358a;
       c358b: // global
           HpAlloc = 24;
           goto c3588;
       c3588: // global
           R1 = _s2UNq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c358a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UNq::P64;
           _s2UN8::P64 = P64[_s2UNq::P64 + 16];
           _s2UNa::P64 = P64[_s2UNq::P64 + 24];
           I64[Hp - 16] = sat_s2UNp_info;
           P64[Hp] = _s2UNa::P64;
           R2 = _s2UN8::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UNq_info" {
     sat_s2UNq_info:
         const sat_s2UNq_entry;
         const 2;
         const 18;
 },
 sat_s2UNE_entry() //  [R1]
         { []
         }
     {offset
       c358q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c358r; else goto c358s;
       c358r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c358s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UNE_info" {
     sat_s2UNE_info:
         const sat_s2UNE_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+264;
 },
 sat_s2UNG_entry() //  [R1]
         { []
         }
     {offset
       c358t: // global
           _s2UNG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c358u; else goto c358v;
       c358v: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c358x; else goto c358w;
       c358x: // global
           HpAlloc = 40;
           goto c358u;
       c358u: // global
           R1 = _s2UNG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c358w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UNG::P64;
           _s2UN8::P64 = P64[_s2UNG::P64 + 16];
           _s2UN6::I64 = I64[_s2UNG::P64 + 24];
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s2UN6::I64;
           I64[Hp - 16] = sat_s2UNE_info;
           P64[Hp] = _s2UN8::P64;
           R5 = Hp - 31;
           R4 = Hp - 16;
           R3 = GHC.Real.$fIntegralInt_closure;
           R2 = _s2UN8::P64;
           Sp = Sp - 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UNG_info" {
     sat_s2UNG_info:
         const sat_s2UNG_entry;
         const 4294967297;
         const 30064771091;
         const S2VLN_srt+264;
 },
 sat_s2UNC_entry() //  [R1]
         { []
         }
     {offset
       c358G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c358H; else goto c358I;
       c358H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c358I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UNC_info" {
     sat_s2UNC_info:
         const sat_s2UNC_entry;
         const 4294967296;
         const 17;
 },
 sat_s2UND_entry() //  [R1]
         { []
         }
     {offset
       c358J: // global
           _s2UND::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c358K; else goto c358L;
       c358L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c358N; else goto c358M;
       c358N: // global
           HpAlloc = 24;
           goto c358K;
       c358K: // global
           R1 = _s2UND::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c358M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UND::P64;
           _s2UN8::P64 = P64[_s2UND::P64 + 16];
           _s2UN5::I64 = I64[_s2UND::P64 + 24];
           I64[Hp - 16] = sat_s2UNC_info;
           I64[Hp] = _s2UN5::I64;
           R2 = _s2UN8::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UND_info" {
     sat_s2UND_info:
         const sat_s2UND_entry;
         const 4294967297;
         const 19;
 },
 sat_s2UNH_entry() //  [R1]
         { []
         }
     {offset
       c358O: // global
           _s2UNH::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c358P; else goto c358Q;
       c358Q: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c358S; else goto c358R;
       c358S: // global
           HpAlloc = 64;
           goto c358P;
       c358P: // global
           R1 = _s2UNH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c358R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UNH::P64;
           _s2UN8::P64 = P64[_s2UNH::P64 + 16];
           _s2UN5::I64 = I64[_s2UNH::P64 + 24];
           _s2UN6::I64 = I64[_s2UNH::P64 + 32];
           I64[Hp - 56] = sat_s2UNG_info;
           P64[Hp - 40] = _s2UN8::P64;
           I64[Hp - 32] = _s2UN6::I64;
           I64[Hp - 24] = sat_s2UND_info;
           P64[Hp - 8] = _s2UN8::P64;
           I64[Hp] = _s2UN5::I64;
           R2 = _s2UN8::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UNH_info" {
     sat_s2UNH_info:
         const sat_s2UNH_entry;
         const 8589934593;
         const 30064771087;
         const S2VLN_srt+264;
 },
 GHC.Float.$w$cproperFraction1_entry() //  [R2, F1]
         { []
         }
     {offset
       c358W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c358X; else goto c358Y;
       c358X: // global
           R1 = GHC.Float.$w$cproperFraction1_closure;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c358Y: // global
           I64[Sp - 16] = block_c355z_info;
           F1 = F1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cproperFraction1_info" {
     GHC.Float.$w$cproperFraction1_info:
         const GHC.Float.$w$cproperFraction1_entry;
         const 0;
         const 64424509454;
         const 8589934592;
         const S2VLN_srt+264;
         const 130;
         const GHC.Float.$w$cproperFraction1_slow;
 },
 _c355z() //  [R1, R2]
         { []
         }
     {offset
       c355z: // global
           I64[Sp - 8] = R2;
           I64[Sp] = R1;
           Sp = Sp - 16;
           call _c355A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c355z_info" {
     block_c355z_info:
         const _c355z;
         const 1;
         const 30064771102;
         const S2VLN_srt+264;
 },
 _c355A() //  []
         { []
         }
     {offset
       c355A: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3591; else goto c3590;
       c3591: // global
           HpAlloc = 152;
           I64[Sp] = block_c355A_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3590: // global
           I64[Hp - 144] = $dReal_s2UN7_info;
           P64[Hp - 128] = P64[Sp + 24];
           I64[Hp - 120] = $dNum_s2UN8_info;
           P64[Hp - 104] = Hp - 144;
           _s2UN5::I64 = I64[Sp + 16];
           _s2UN6::I64 = I64[Sp + 8];
           _c355K::P64 = Hp - 120;
           if (%MO_S_Lt_W64(_s2UN6::I64, 0)) goto c358U; else goto c358V;
       c358U: // global
           I64[Hp - 96] = i_s2UNa_info;
           I64[Hp - 80] = _s2UN5::I64;
           I64[Hp - 72] = _s2UN6::I64;
           I64[Hp - 64] = sat_s2UNB_info;
           _c355U::P64 = Hp - 96;
           P64[Hp - 48] = _c355U::P64;
           I64[Hp - 40] = _s2UN5::I64;
           I64[Hp - 32] = _s2UN6::I64;
           I64[Hp - 24] = sat_s2UNq_info;
           P64[Hp - 8] = _c355K::P64;
           P64[Hp] = _c355U::P64;
           R2 = Hp - 64;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c358V: // global
           I64[Hp - 96] = sat_s2UNH_info;
           P64[Hp - 80] = _c355K::P64;
           I64[Hp - 72] = _s2UN5::I64;
           I64[Hp - 64] = _s2UN6::I64;
           _c358d::P64 = Hp - 96;
           Hp = Hp - 64;
           R2 = GHC.Float.rationalToFloat4_closure+1;
           R1 = _c358d::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c355A_info" {
     block_c355A_info:
         const _c355A;
         const 195;
         const 30064771102;
         const S2VLN_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.84909118 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$cproperFraction_closure" {
     GHC.Float.$fRealFracFloat_$cproperFraction_closure:
         const GHC.Float.$fRealFracFloat_$cproperFraction_info;
         const 0;
 },
 GHC.Float.$fRealFracFloat_$cproperFraction_entry() //  [R2, R3]
         { []
         }
     {offset
       c35aK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35aQ; else goto c35aR;
       c35aQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$cproperFraction_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35aR: // global
           I64[Sp - 16] = block_c35aH_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35aW; else goto c35aI;
       u35aW: // global
           call _c35aH(R1) args: 0, res: 0, upd: 0;
       c35aI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$cproperFraction_info" {
     GHC.Float.$fRealFracFloat_$cproperFraction_info:
         const GHC.Float.$fRealFracFloat_$cproperFraction_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+288;
 },
 _c35aH() //  [R1]
         { []
         }
     {offset
       c35aH: // global
           _s2UNI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c35aN_info;
           F1 = F32[R1 + 7];
           R2 = _s2UNI::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35aH_info" {
     block_c35aH_info:
         const _c35aH;
         const 1;
         const 4294967326;
         const S2VLN_srt+288;
 },
 _c35aN() //  [R1, R2]
         { []
         }
     {offset
       c35aN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35aV; else goto c35aU;
       c35aV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c35aU: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35aN_info" {
     block_c35aN_info:
         const _c35aN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.860268199 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$ctruncate_closure" {
     GHC.Float.$fRealFracFloat_$ctruncate_closure:
         const GHC.Float.$fRealFracFloat_$ctruncate_info;
         const 0;
 },
 GHC.Float.$fRealFracFloat_$ctruncate_entry() //  [R2, R3]
         { []
         }
     {offset
       c35bh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35bl; else goto c35bm;
       c35bl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$ctruncate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35bm: // global
           I64[Sp - 16] = block_c35be_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35bq; else goto c35bf;
       u35bq: // global
           call _c35be(R1) args: 0, res: 0, upd: 0;
       c35bf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$ctruncate_info" {
     GHC.Float.$fRealFracFloat_$ctruncate_info:
         const GHC.Float.$fRealFracFloat_$ctruncate_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2VLN_srt+288;
 },
 _c35be() //  [R1]
         { []
         }
     {offset
       c35be: // global
           _s2UNP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c35bk_info;
           F1 = F32[R1 + 7];
           R2 = _s2UNP::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35be_info" {
     block_c35be_info:
         const _c35be;
         const 1;
         const 4294967326;
         const S2VLN_srt+288;
 },
 _c35bk() //  [R1]
         { []
         }
     {offset
       c35bk: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35bk_info" {
     block_c35bk_info:
         const _c35bk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.868970113 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$cceiling_closure" {
     GHC.Float.$fRealFracFloat_$cceiling_closure:
         const GHC.Float.$fRealFracFloat_$cceiling_info;
         const 0;
 },
 sat_s2UO8_entry() //  [R1]
         { []
         }
     {offset
       c35c9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35ca; else goto c35cb;
       c35ca: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35cb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UO8_info" {
     sat_s2UO8_info:
         const sat_s2UO8_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 GHC.Float.$fRealFracFloat_$cceiling_entry() //  [R2, R3]
         { []
         }
     {offset
       c35cc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35cd; else goto c35ce;
       c35cd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$cceiling_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35ce: // global
           I64[Sp - 16] = block_c35bH_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35cq; else goto c35bI;
       u35cq: // global
           call _c35bH(R1) args: 0, res: 0, upd: 0;
       c35bI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$cceiling_info" {
     GHC.Float.$fRealFracFloat_$cceiling_info:
         const GHC.Float.$fRealFracFloat_$cceiling_entry;
         const 0;
         const 107374182414;
         const 8589934607;
         const S2VLN_srt+288;
 },
 _c35bH() //  [R1]
         { []
         }
     {offset
       c35bH: // global
           I64[Sp] = block_c35bM_info;
           F1 = F32[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35bH_info" {
     block_c35bH_info:
         const _c35bH;
         const 1;
         const 38654705694;
         const S2VLN_srt+288;
 },
 _c35bM() //  [R1, R2]
         { []
         }
     {offset
       c35bM: // global
           I64[Sp - 8] = block_c35bO_info;
           _s2UO1::P64 = R1;
           R1 = R2;
           P64[Sp] = _s2UO1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35cp; else goto c35bP;
       u35cp: // global
           call _c35bO(R1) args: 0, res: 0, upd: 0;
       c35bP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35bM_info" {
     block_c35bM_info:
         const _c35bM;
         const 1;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35bO() //  [R1]
         { []
         }
     {offset
       c35bO: // global
           if (%MO_F_Gt_W32(F32[R1 + 7],
                            0.0 :: W32)) goto c35ck; else goto c35cj;
       c35ck: // global
           I64[Sp] = block_c35bX_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c35cj: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35bO_info" {
     block_c35bO_info:
         const _c35bO;
         const 2;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35bX() //  [R1]
         { []
         }
     {offset
       c35bX: // global
           I64[Sp] = block_c35c1_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35bX_info" {
     block_c35bX_info:
         const _c35bX;
         const 130;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35c1() //  [R1]
         { []
         }
     {offset
       c35c1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35co; else goto c35cn;
       c35co: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35cn: // global
           I64[Hp - 16] = sat_s2UO8_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35c1_info" {
     block_c35c1_info:
         const _c35c1;
         const 130;
         const 4294967326;
         const S2VLN_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.884787254 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$cfloor_closure" {
     GHC.Float.$fRealFracFloat_$cfloor_closure:
         const GHC.Float.$fRealFracFloat_$cfloor_info;
         const 0;
 },
 sat_s2UOl_entry() //  [R1]
         { []
         }
     {offset
       c35dr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35ds; else goto c35dt;
       c35ds: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35dt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UOl_info" {
     sat_s2UOl_info:
         const sat_s2UOl_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 GHC.Float.$fRealFracFloat_$cfloor_entry() //  [R2, R3]
         { []
         }
     {offset
       c35du: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35dv; else goto c35dw;
       c35dv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$cfloor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35dw: // global
           I64[Sp - 16] = block_c35cZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35dI; else goto c35d0;
       u35dI: // global
           call _c35cZ(R1) args: 0, res: 0, upd: 0;
       c35d0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$cfloor_info" {
     GHC.Float.$fRealFracFloat_$cfloor_info:
         const GHC.Float.$fRealFracFloat_$cfloor_entry;
         const 0;
         const 176093659150;
         const 8589934607;
         const S2VLN_srt+288;
 },
 _c35cZ() //  [R1]
         { []
         }
     {offset
       c35cZ: // global
           I64[Sp] = block_c35d4_info;
           F1 = F32[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35cZ_info" {
     block_c35cZ_info:
         const _c35cZ;
         const 1;
         const 38654705694;
         const S2VLN_srt+288;
 },
 _c35d4() //  [R1, R2]
         { []
         }
     {offset
       c35d4: // global
           I64[Sp - 8] = block_c35d6_info;
           _s2UOe::P64 = R1;
           R1 = R2;
           P64[Sp] = _s2UOe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35dH; else goto c35d7;
       u35dH: // global
           call _c35d6(R1) args: 0, res: 0, upd: 0;
       c35d7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35d4_info" {
     block_c35d4_info:
         const _c35d4;
         const 1;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35d6() //  [R1]
         { []
         }
     {offset
       c35d6: // global
           if (%MO_F_Lt_W32(F32[R1 + 7],
                            0.0 :: W32)) goto c35dC; else goto c35dB;
       c35dC: // global
           I64[Sp] = block_c35df_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c35dB: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35d6_info" {
     block_c35d6_info:
         const _c35d6;
         const 2;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35df() //  [R1]
         { []
         }
     {offset
       c35df: // global
           I64[Sp] = block_c35dj_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35df_info" {
     block_c35df_info:
         const _c35df;
         const 130;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35dj() //  [R1]
         { []
         }
     {offset
       c35dj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35dG; else goto c35dF;
       c35dG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35dF: // global
           I64[Hp - 16] = sat_s2UOl_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35dj_info" {
     block_c35dj_info:
         const _c35dj;
         const 130;
         const 4294967326;
         const S2VLN_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.902421782 UTC

[section ""data" . GHC.Float.$w$cround1_closure" {
     GHC.Float.$w$cround1_closure:
         const GHC.Float.$w$cround1_info;
         const 0;
 },
 GHC.Float.$w$cround1_slow() //  [R1]
         { []
         }
     {offset
       c35ee: // global
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cround1_entry(F1,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2UOA_entry() //  [R1]
         { []
         }
     {offset
       c35eS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35eT; else goto c35eU;
       c35eT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35eU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UOA_info" {
     sat_s2UOA_info:
         const sat_s2UOA_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 sat_s2UOB_entry() //  [R1]
         { []
         }
     {offset
       c35f0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35f1; else goto c35f2;
       c35f1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35f2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UOB_info" {
     sat_s2UOB_info:
         const sat_s2UOB_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 GHC.Float.$w$cround1_entry() //  [R2, F1]
         { []
         }
     {offset
       c35f3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35f4; else goto c35f5;
       c35f4: // global
           R1 = GHC.Float.$w$cround1_closure;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c35f5: // global
           I64[Sp - 16] = block_c35ei_info;
           F1 = F1;
           _s2UOm::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s2UOm::P64;
           Sp = Sp - 16;
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cround1_info" {
     GHC.Float.$w$cround1_info:
         const GHC.Float.$w$cround1_entry;
         const 0;
         const 863288426510;
         const 8589934592;
         const S2VLN_srt+288;
         const 130;
         const GHC.Float.$w$cround1_slow;
 },
 _c35ei() //  [R1, R2]
         { []
         }
     {offset
       c35ei: // global
           I64[Sp - 8] = block_c35ek_info;
           _s2UOp::P64 = R1;
           R1 = R2;
           P64[Sp] = _s2UOp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35fG; else goto c35el;
       u35fG: // global
           call _c35ek(R1) args: 0, res: 0, upd: 0;
       c35el: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35ei_info" {
     block_c35ei_info:
         const _c35ei;
         const 1;
         const 38654705694;
         const S2VLN_srt+312;
 },
 _c35ek() //  [R1]
         { []
         }
     {offset
       c35ek: // global
           _s2UOm::P64 = P64[Sp + 16];
           _s2UOp::P64 = P64[Sp + 8];
           _s2UOs::F32 = F32[R1 + 7];
           (_c35ep::F32) = call MO_F32_Fabs(_s2UOs::F32);
           _s2UOt::F32 = %MO_F_Sub_W32(_c35ep::F32, 0.5 :: W32);
           if (%MO_F_Lt_W32(_s2UOt::F32,
                            0.0 :: W32)) goto u35fC; else goto c35fz;
       u35fC: // global
           Sp = Sp + 8;
           call _c35fA() args: 0, res: 0, upd: 0;
       c35fz: // global
           if (%MO_F_Eq_W32(_s2UOt::F32,
                            0.0 :: W32)) goto c35fn; else goto u35fD;
       c35fn: // global
           I64[Sp - 8] = block_c35fm_info;
           R3 = _s2UOp::P64;
           R2 = _s2UOm::P64;
           F32[Sp] = _s2UOs::F32;
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
       u35fD: // global
           F32[Sp] = _s2UOs::F32;
           call _s2UOw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35ek_info" {
     block_c35ek_info:
         const _c35ek;
         const 2;
         const 38654705694;
         const S2VLN_srt+312;
 },
 _c35fm() //  [R1]
         { []
         }
     {offset
       c35fm: // global
           if (R1 & 7 == 1) goto u35fE; else goto u35fF;
       u35fE: // global
           Sp = Sp + 8;
           call _s2UOw() args: 0, res: 0, upd: 0;
       u35fF: // global
           Sp = Sp + 16;
           call _c35fA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35fm_info" {
     block_c35fm_info:
         const _c35fm;
         const 67;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35fA() //  []
         { []
         }
     {offset
       c35fA: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _s2UOw() //  []
         { []
         }
     {offset
       s2UOw: // global
           I64[Sp - 8] = block_c35eD_info;
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c35eD() //  [R1]
         { []
         }
     {offset
       c35eD: // global
           I64[Sp] = block_c35eH_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35eD_info" {
     block_c35eD_info:
         const _c35eD;
         const 323;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35eH() //  [R1]
         { []
         }
     {offset
       c35eH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35fc; else goto c35fb;
       c35fc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35fb: // global
           if (%MO_F_Lt_W32(F32[Sp + 8],
                            0.0 :: W32)) goto c35ff; else goto c35fe;
       c35ff: // global
           I64[Hp - 16] = sat_s2UOB_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
       c35fe: // global
           I64[Hp - 16] = sat_s2UOA_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35eH_info" {
     block_c35eH_info:
         const _c35eH;
         const 323;
         const 4294967326;
         const S2VLN_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.921601535 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$cround_closure" {
     GHC.Float.$fRealFracFloat_$cround_closure:
         const GHC.Float.$fRealFracFloat_$cround_info;
         const 0;
 },
 GHC.Float.$fRealFracFloat_$cround_entry() //  [R2, R3]
         { []
         }
     {offset
       c35gG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35gH; else goto c35gI;
       c35gH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$cround_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35gI: // global
           I64[Sp - 16] = block_c35gD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35gM; else goto c35gE;
       u35gM: // global
           call _c35gD(R1) args: 0, res: 0, upd: 0;
       c35gE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$cround_info" {
     GHC.Float.$fRealFracFloat_$cround_info:
         const GHC.Float.$fRealFracFloat_$cround_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+344;
 },
 _c35gD() //  [R1]
         { []
         }
     {offset
       c35gD: // global
           F1 = F32[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$w$cround1_entry(F1, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35gD_info" {
     block_c35gD_info:
         const _c35gD;
         const 1;
         const 4294967326;
         const S2VLN_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.928982079 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$catanh_closure" {
     GHC.Float.$fFloatingDouble_$catanh_closure:
         const GHC.Float.$fFloatingDouble_$catanh_info;
 },
 GHC.Float.$fFloatingDouble_$catanh_entry() //  [R2]
         { []
         }
     {offset
       c35h3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c35hn; else goto c35ho;
       c35hn: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$catanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35ho: // global
           I64[Sp - 8] = block_c35h0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35hs; else goto c35h1;
       u35hs: // global
           call _c35h0(R1) args: 0, res: 0, upd: 0;
       c35h1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$catanh_info" {
     GHC.Float.$fFloatingDouble_$catanh_info:
         const GHC.Float.$fFloatingDouble_$catanh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c35h0() //  [R1]
         { []
         }
     {offset
       c35h0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c35hr; else goto c35hq;
       c35hr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35hq: // global
           _s2UOK::F64 = F64[R1 + 7];
           (_c35hf::F64) = call MO_F64_Log(%MO_F_Quot_W64(%MO_F_Add_W64(_s2UOK::F64,
                                                                        1.0 :: W64),
                                                          %MO_F_Sub_W64(1.0 :: W64, _s2UOK::F64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Mul_W64(_c35hf::F64, 0.5 :: W64);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35h0_info" {
     block_c35h0_info:
         const _c35h0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.941962539 UTC

[section ""data" . GHC.Float.$w$ctoRational1_closure" {
     GHC.Float.$w$ctoRational1_closure:
         const GHC.Float.$w$ctoRational1_info;
         const 0;
 },
 GHC.Float.$w$ctoRational1_entry() //  [F1]
         { []
         }
     {offset
       c35hZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35i0; else goto c35i1;
       c35i0: // global
           F1 = F1;
           R1 = GHC.Float.$w$ctoRational1_closure;
           call (stg_gc_fun)(F1, R1) args: 8, res: 0, upd: 8;
       c35i1: // global
           I64[Sp - 8] = block_c35hQ_info;
           F1 = F1;
           Sp = Sp - 8;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$ctoRational1_info" {
     GHC.Float.$w$ctoRational1_info:
         const GHC.Float.$w$ctoRational1_entry;
         const 0;
         const 828928688142;
         const 4294967302;
         const S2VLN_srt+312;
 },
 _c35hQ() //  [R1, R2]
         { []
         }
     {offset
       c35hQ: // global
           if (%MO_S_Lt_W64(R2, 0)) goto c35hX; else goto c35hY;
       c35hX: // global
           if (R1 & 1 == 0) goto c35iK; else goto c35im;
       c35iK: // global
           I64[Sp] = block_c35iA_info;
           R3 = -R2;
           R2 = R1;
           call GHC.Float.ConversionUtils.elimZerosInt#_entry(R3,
                                                              R2) args: 8, res: 8, upd: 8;
       c35im: // global
           I64[Sp - 8] = block_c35id_info;
           _s2UOT::I64 = R2;
           R2 = R1;
           I64[Sp] = _s2UOT::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
       c35hY: // global
           I64[Sp - 8] = block_c35iT_info;
           _s2UOT::I64 = R2;
           R2 = R1;
           I64[Sp] = _s2UOT::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35hQ_info" {
     block_c35hQ_info:
         const _c35hQ;
         const 0;
         const 279172874270;
         const S2VLN_srt+312;
 },
 _c35iA() //  [R1, R2]
         { []
         }
     {offset
       c35iA: // global
           I64[Sp - 8] = block_c35iE_info;
           R1 = R1;
           I64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35j3; else goto c35iF;
       u35j3: // global
           call _c35iE(R1) args: 0, res: 0, upd: 0;
       c35iF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35iA_info" {
     block_c35iA_info:
         const _c35iA;
         const 0;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35iE() //  [R1]
         { []
         }
     {offset
       c35iE: // global
           I64[Sp] = block_c35iJ_info;
           R3 = I64[Sp + 8];
           R2 = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35iE_info" {
     block_c35iE_info:
         const _c35iE;
         const 65;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35iJ() //  [R1]
         { []
         }
     {offset
       c35iJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35iJ_info" {
     block_c35iJ_info:
         const _c35iJ;
         const 1;
         const 30;
 },
 _c35id() //  [R1]
         { []
         }
     {offset
       c35id: // global
           I64[Sp] = block_c35ik_info;
           R3 = -I64[Sp + 8];
           R2 = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35id_info" {
     block_c35id_info:
         const _c35id;
         const 65;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35ik() //  [R1]
         { []
         }
     {offset
       c35ik: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35ik_info" {
     block_c35ik_info:
         const _c35ik;
         const 1;
         const 30;
 },
 _c35iT() //  [R1]
         { []
         }
     {offset
       c35iT: // global
           _s2UOT::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c35iX_info;
           R3 = _s2UOT::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35iT_info" {
     block_c35iT_info:
         const _c35iT;
         const 65;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35iX() //  [R1]
         { []
         }
     {offset
       c35iX: // global
           R2 = GHC.Float.$fRealDouble1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35iX_info" {
     block_c35iX_info:
         const _c35iX;
         const 0;
         const 4294967326;
         const S2VLN_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.960263684 UTC

[section ""data" . GHC.Float.$fRealFloat_$ctoRational_closure" {
     GHC.Float.$fRealFloat_$ctoRational_closure:
         const GHC.Float.$fRealFloat_$ctoRational_info;
         const 0;
 },
 GHC.Float.$fRealFloat_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c35jI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c35jO; else goto c35jP;
       c35jO: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloat_$ctoRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35jP: // global
           I64[Sp - 8] = block_c35jF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35jU; else goto c35jG;
       u35jU: // global
           call _c35jF(R1) args: 0, res: 0, upd: 0;
       c35jG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloat_$ctoRational_info" {
     GHC.Float.$fRealFloat_$ctoRational_info:
         const GHC.Float.$fRealFloat_$ctoRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2VLN_srt+368;
 },
 _c35jF() //  [R1]
         { []
         }
     {offset
       c35jF: // global
           I64[Sp] = block_c35jL_info;
           F1 = F32[R1 + 7];
           call GHC.Float.$w$ctoRational1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35jF_info" {
     block_c35jF_info:
         const _c35jF;
         const 0;
         const 4294967326;
         const S2VLN_srt+368;
 },
 _c35jL() //  [R1, R2]
         { []
         }
     {offset
       c35jL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35jT; else goto c35jS;
       c35jT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c35jS: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35jL_info" {
     block_c35jL_info:
         const _c35jL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.969618936 UTC

[section ""data" . GHC.Float.$w$ctoRational_closure" {
     GHC.Float.$w$ctoRational_closure:
         const GHC.Float.$w$ctoRational_info;
         const 0;
 },
 GHC.Float.$w$ctoRational_entry() //  [D1]
         { []
         }
     {offset
       c35kl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35km; else goto c35kn;
       c35km: // global
           D1 = D1;
           R1 = GHC.Float.$w$ctoRational_closure;
           call (stg_gc_fun)(D1, R1) args: 8, res: 0, upd: 8;
       c35kn: // global
           I64[Sp - 8] = block_c35kc_info;
           D1 = D1;
           Sp = Sp - 8;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$ctoRational_info" {
     GHC.Float.$w$ctoRational_info:
         const GHC.Float.$w$ctoRational_entry;
         const 0;
         const 6876242640910;
         const 4294967303;
         const S2VLN_srt+312;
 },
 _c35kc() //  [R1, R2]
         { []
         }
     {offset
       c35kc: // global
           if (%MO_S_Lt_W64(R2, 0)) goto c35kj; else goto c35kk;
       c35kj: // global
           I64[Sp - 16] = block_c35kq_info;
           _s2UPh::I64 = R2;
           R2 = R1;
           I64[Sp - 8] = _s2UPh::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Integer.Type.integerToWord_entry(R2) args: 8, res: 8, upd: 8;
       c35kk: // global
           I64[Sp] = block_c35ln_info;
           R3 = R2;
           R2 = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35kc_info" {
     block_c35kc_info:
         const _c35kc;
         const 0;
         const 279172874270;
         const S2VLN_srt+312;
 },
 _c35kq() //  [R1]
         { []
         }
     {offset
       c35kq: // global
           _s2UPg::P64 = P64[Sp + 16];
           if (R1 & 1 == 0) goto c35ld; else goto c35kL;
       c35ld: // global
           I64[Sp] = block_c35kW_info;
           R2 = _s2UPg::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c35kL: // global
           I64[Sp] = block_c35kB_info;
           R1 = _s2UPg::P64;
           if (R1 & 7 != 0) goto u35ls; else goto c35kC;
       u35ls: // global
           call _c35kB(R1) args: 0, res: 0, upd: 0;
       c35kC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35kq_info" {
     block_c35kq_info:
         const _c35kq;
         const 66;
         const 279172874270;
         const S2VLN_srt+312;
 },
 _c35kW() //  [R1]
         { []
         }
     {offset
       c35kW: // global
           I64[Sp + 16] = block_c35l3_info;
           R3 = -I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Float.ConversionUtils.elimZerosInt#_entry(R3,
                                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35kW_info" {
     block_c35kW_info:
         const _c35kW;
         const 194;
         const 279172874270;
         const S2VLN_srt+312;
 },
 _c35l3() //  [R1, R2]
         { []
         }
     {offset
       c35l3: // global
           I64[Sp - 8] = block_c35l7_info;
           R1 = R1;
           I64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35lt; else goto c35l8;
       u35lt: // global
           call _c35l7(R1) args: 0, res: 0, upd: 0;
       c35l8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35l3_info" {
     block_c35l3_info:
         const _c35l3;
         const 0;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35l7() //  [R1]
         { []
         }
     {offset
       c35l7: // global
           I64[Sp] = block_c35lc_info;
           R3 = I64[Sp + 8];
           R2 = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35l7_info" {
     block_c35l7_info:
         const _c35l7;
         const 65;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35lc() //  [R1]
         { []
         }
     {offset
       c35lc: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35lc_info" {
     block_c35lc_info:
         const _c35lc;
         const 1;
         const 30;
 },
 _c35kB() //  [R1]
         { []
         }
     {offset
       c35kB: // global
           _s2UPm::I64 = -I64[Sp + 8];
           I64[Sp + 8] = block_c35kJ_info;
           R3 = _s2UPm::I64;
           R2 = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35kB_info" {
     block_c35kB_info:
         const _c35kB;
         const 194;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35kJ() //  [R1]
         { []
         }
     {offset
       c35kJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35kJ_info" {
     block_c35kJ_info:
         const _c35kJ;
         const 1;
         const 30;
 },
 _c35ln() //  [R1]
         { []
         }
     {offset
       c35ln: // global
           R2 = GHC.Float.$fRealDouble1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35ln_info" {
     block_c35ln_info:
         const _c35ln;
         const 0;
         const 4294967326;
         const S2VLN_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.988212739 UTC

[section ""data" . GHC.Float.$fRealDouble_$ctoRational_closure" {
     GHC.Float.$fRealDouble_$ctoRational_closure:
         const GHC.Float.$fRealDouble_$ctoRational_info;
         const 0;
 },
 GHC.Float.$fRealDouble_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c35mc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c35mi; else goto c35mj;
       c35mi: // global
           R2 = R2;
           R1 = GHC.Float.$fRealDouble_$ctoRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35mj: // global
           I64[Sp - 8] = block_c35m9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35mo; else goto c35ma;
       u35mo: // global
           call _c35m9(R1) args: 0, res: 0, upd: 0;
       c35ma: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealDouble_$ctoRational_info" {
     GHC.Float.$fRealDouble_$ctoRational_info:
         const GHC.Float.$fRealDouble_$ctoRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2VLN_srt+392;
 },
 _c35m9() //  [R1]
         { []
         }
     {offset
       c35m9: // global
           I64[Sp] = block_c35mf_info;
           D1 = F64[R1 + 7];
           call GHC.Float.$w$ctoRational_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35m9_info" {
     block_c35m9_info:
         const _c35m9;
         const 0;
         const 4294967326;
         const S2VLN_srt+392;
 },
 _c35mf() //  [R1, R2]
         { []
         }
     {offset
       c35mf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35mn; else goto c35mm;
       c35mn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c35mm: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35mf_info" {
     block_c35mf_info:
         const _c35mf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.994701132 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$cpi_closure" {
     GHC.Float.$fFloatingFloat_$cpi_closure:
         const GHC.Types.F#_con_info;
         const 3.141592653589793 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.996552321 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$cpi_closure" {
     GHC.Float.$fFloatingDouble_$cpi_closure:
         const GHC.Types.D#_con_info;
         const 3.141592653589793 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:31.998716948 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisIEEE_closure" {
     GHC.Float.$fRealFloatFloat_$cisIEEE_closure:
         const GHC.Float.$fRealFloatFloat_$cisIEEE_info;
 },
 GHC.Float.$fRealFloatFloat_$cisIEEE_entry() //  []
         { []
         }
     {offset
       c35mI: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisIEEE_info" {
     GHC.Float.$fRealFloatFloat_$cisIEEE_info:
         const GHC.Float.$fRealFloatFloat_$cisIEEE_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.002963028 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cencodeFloat_closure" {
     GHC.Float.$fRealFloatFloat_$cencodeFloat_closure:
         const GHC.Float.$fRealFloatFloat_$cencodeFloat_info;
 },
 GHC.Float.$fRealFloatFloat_$cencodeFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c35mX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35n5; else goto c35n6;
       c35n5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cencodeFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35n6: // global
           I64[Sp - 16] = block_c35mU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35nb; else goto c35mV;
       u35nb: // global
           call _c35mU(R1) args: 0, res: 0, upd: 0;
       c35mV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cencodeFloat_info" {
     GHC.Float.$fRealFloatFloat_$cencodeFloat_info:
         const GHC.Float.$fRealFloatFloat_$cencodeFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c35mU() //  [R1]
         { []
         }
     {offset
       c35mU: // global
           _s2UPD::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c35n0_info;
           R3 = I64[R1 + 7];
           R2 = _s2UPD::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35mU_info" {
     block_c35mU_info:
         const _c35mU;
         const 1;
         const 30;
 },
 _c35n0() //  [F1]
         { []
         }
     {offset
       c35n0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c35na; else goto c35n9;
       c35na: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c35n9: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35n0_info" {
     block_c35n0_info:
         const _c35n0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.012118108 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cdecodeFloat_closure" {
     GHC.Float.$fRealFloatFloat_$cdecodeFloat_closure:
         const GHC.Float.$fRealFloatFloat_$cdecodeFloat_info;
 },
 sat_s2UPO_entry() //  [R1]
         { []
         }
     {offset
       c35nH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35nI; else goto c35nJ;
       c35nI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35nJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UPO_info" {
     sat_s2UPO_info:
         const sat_s2UPO_entry;
         const 4294967296;
         const 17;
 },
 GHC.Float.$fRealFloatFloat_$cdecodeFloat_entry() //  [R2]
         { []
         }
     {offset
       c35nK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35nM; else goto c35nN;
       c35nM: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cdecodeFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35nN: // global
           I64[Sp - 8] = block_c35nt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35nU; else goto c35nu;
       u35nU: // global
           call _c35nt(R1) args: 0, res: 0, upd: 0;
       c35nu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cdecodeFloat_info" {
     GHC.Float.$fRealFloatFloat_$cdecodeFloat_info:
         const GHC.Float.$fRealFloatFloat_$cdecodeFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c35nt() //  [R1]
         { []
         }
     {offset
       c35nt: // global
           I64[Sp] = block_c35ny_info;
           F1 = F32[R1 + 7];
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35nt_info" {
     block_c35nt_info:
         const _c35nt;
         const 0;
         const 30;
 },
 _c35ny() //  [R1, R2]
         { []
         }
     {offset
       c35ny: // global
           I64[Sp - 8] = R2;
           I64[Sp] = R1;
           Sp = Sp - 16;
           call _c35nz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35ny_info" {
     block_c35ny_info:
         const _c35ny;
         const 0;
         const 30;
 },
 _c35nz() //  []
         { []
         }
     {offset
       c35nz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c35nR; else goto c35nQ;
       c35nR: // global
           HpAlloc = 64;
           I64[Sp] = block_c35nz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c35nQ: // global
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = sat_s2UPO_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35nz_info" {
     block_c35nz_info:
         const _c35nz;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.022882866 UTC

[section ""data" . GHC.Float.$w$cexponent1_closure" {
     GHC.Float.$w$cexponent1_closure:
         const GHC.Float.$w$cexponent1_info;
         const 0;
 },
 GHC.Float.$w$cexponent1_entry() //  [F1]
         { []
         }
     {offset
       c35ot: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35ou; else goto c35ov;
       c35ou: // global
           F1 = F1;
           R1 = GHC.Float.$w$cexponent1_closure;
           call (stg_gc_fun)(F1, R1) args: 8, res: 0, upd: 8;
       c35ov: // global
           I64[Sp - 8] = block_c35on_info;
           F1 = F1;
           Sp = Sp - 8;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cexponent1_info" {
     GHC.Float.$w$cexponent1_info:
         const GHC.Float.$w$cexponent1_entry;
         const 0;
         const 12884901902;
         const 4294967302;
         const S2VLN_srt+408;
 },
 _c35on() //  [R1, R2]
         { []
         }
     {offset
       c35on: // global
           I64[Sp - 8] = block_c35or_info;
           _s2UPT::I64 = R2;
           R2 = R1;
           I64[Sp] = _s2UPT::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35on_info" {
     block_c35on_info:
         const _c35on;
         const 0;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35or() //  [R1]
         { []
         }
     {offset
       c35or: // global
           I64[Sp] = block_c35oz_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35or_info" {
     block_c35or_info:
         const _c35or;
         const 65;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35oz() //  [R1]
         { []
         }
     {offset
       c35oz: // global
           if (R1 == 1) goto c35oL; else goto c35oH;
       c35oL: // global
           R1 = 0;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c35oH: // global
           R1 = I64[Sp + 8] + 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35oz_info" {
     block_c35oz_info:
         const _c35oz;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.031827972 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cexponent_closure" {
     GHC.Float.$fRealFloatFloat_$cexponent_closure:
         const GHC.Float.$fRealFloatFloat_$cexponent_info;
         const 0;
 },
 GHC.Float.$fRealFloatFloat_$cexponent_entry() //  [R2]
         { []
         }
     {offset
       c35pa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c35pi; else goto c35pj;
       c35pi: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cexponent_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35pj: // global
           I64[Sp - 8] = block_c35p7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35po; else goto c35p8;
       u35po: // global
           call _c35p7(R1) args: 0, res: 0, upd: 0;
       c35p8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cexponent_info" {
     GHC.Float.$fRealFloatFloat_$cexponent_info:
         const GHC.Float.$fRealFloatFloat_$cexponent_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S2VLN_srt+408;
 },
 _c35p7() //  [R1]
         { []
         }
     {offset
       c35p7: // global
           I64[Sp] = block_c35pd_info;
           F1 = F32[R1 + 7];
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35p7_info" {
     block_c35p7_info:
         const _c35p7;
         const 0;
         const 4294967326;
         const S2VLN_srt+408;
 },
 _c35pd() //  [R1]
         { []
         }
     {offset
       c35pd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c35pn; else goto c35pm;
       c35pn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c35pm: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35pd_info" {
     block_c35pd_info:
         const _c35pd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.040441349 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$csignificand_closure" {
     GHC.Float.$fRealFloatFloat_$csignificand_closure:
         const GHC.Float.$fRealFloatFloat_$csignificand_info;
 },
 GHC.Float.$fRealFloatFloat_$csignificand_entry() //  [R2]
         { []
         }
     {offset
       c35pJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c35pZ; else goto c35q0;
       c35pZ: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$csignificand_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35q0: // global
           I64[Sp - 8] = block_c35pG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35q7; else goto c35pH;
       u35q7: // global
           call _c35pG(R1) args: 0, res: 0, upd: 0;
       c35pH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$csignificand_info" {
     GHC.Float.$fRealFloatFloat_$csignificand_info:
         const GHC.Float.$fRealFloatFloat_$csignificand_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c35pG() //  [R1]
         { []
         }
     {offset
       c35pG: // global
           I64[Sp] = block_c35pM_info;
           F1 = F32[R1 + 7];
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35pG_info" {
     block_c35pG_info:
         const _c35pG;
         const 0;
         const 30;
 },
 _c35pM() //  [R1]
         { []
         }
     {offset
       c35pM: // global
           I64[Sp] = block_c35pQ_info;
           R2 = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35pM_info" {
     block_c35pM_info:
         const _c35pM;
         const 0;
         const 30;
 },
 _c35pQ() //  [R1]
         { []
         }
     {offset
       c35pQ: // global
           I64[Sp] = block_c35pU_info;
           R3 = (-24);
           R2 = R1;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35pQ_info" {
     block_c35pQ_info:
         const _c35pQ;
         const 0;
         const 30;
 },
 _c35pU() //  [F1]
         { []
         }
     {offset
       c35pU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c35q6; else goto c35q5;
       c35q6: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c35q5: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35pU_info" {
     block_c35pU_info:
         const _c35pU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.049497824 UTC

[section ""data" . GHC.Float.$fRealFloatFloat4_closure" {
     GHC.Float.$fRealFloatFloat4_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.051641844 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cfloatDigits_closure" {
     GHC.Float.$fRealFloatFloat_$cfloatDigits_closure:
         const GHC.Float.$fRealFloatFloat_$cfloatDigits_info;
 },
 GHC.Float.$fRealFloatFloat_$cfloatDigits_entry() //  []
         { []
         }
     {offset
       c35qw: // global
           R1 = GHC.Float.$fRealFloatFloat4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cfloatDigits_info" {
     GHC.Float.$fRealFloatFloat_$cfloatDigits_info:
         const GHC.Float.$fRealFloatFloat_$cfloatDigits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.055110111 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cfloatRadix_closure" {
     GHC.Float.$fRealFloatFloat_$cfloatRadix_closure:
         const GHC.Float.$fRealFloatFloat_$cfloatRadix_info;
         const 0;
 },
 GHC.Float.$fRealFloatFloat_$cfloatRadix_entry() //  []
         { []
         }
     {offset
       c35qI: // global
           R1 = GHC.Float.$fRealFloatDouble5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cfloatRadix_info" {
     GHC.Float.$fRealFloatFloat_$cfloatRadix_info:
         const GHC.Float.$fRealFloatFloat_$cfloatRadix_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S2VLN_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.058426912 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisIEEE_closure" {
     GHC.Float.$fRealFloatDouble_$cisIEEE_closure:
         const GHC.Float.$fRealFloatDouble_$cisIEEE_info;
 },
 GHC.Float.$fRealFloatDouble_$cisIEEE_entry() //  []
         { []
         }
     {offset
       c35qU: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisIEEE_info" {
     GHC.Float.$fRealFloatDouble_$cisIEEE_info:
         const GHC.Float.$fRealFloatDouble_$cisIEEE_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.062684919 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cencodeFloat_closure" {
     GHC.Float.$fRealFloatDouble_$cencodeFloat_closure:
         const GHC.Float.$fRealFloatDouble_$cencodeFloat_info;
 },
 GHC.Float.$fRealFloatDouble_$cencodeFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c35r9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35rh; else goto c35ri;
       c35rh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cencodeFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35ri: // global
           I64[Sp - 16] = block_c35r6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35rn; else goto c35r7;
       u35rn: // global
           call _c35r6(R1) args: 0, res: 0, upd: 0;
       c35r7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cencodeFloat_info" {
     GHC.Float.$fRealFloatDouble_$cencodeFloat_info:
         const GHC.Float.$fRealFloatDouble_$cencodeFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c35r6() //  [R1]
         { []
         }
     {offset
       c35r6: // global
           _s2UQb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c35rc_info;
           R3 = I64[R1 + 7];
           R2 = _s2UQb::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35r6_info" {
     block_c35r6_info:
         const _c35r6;
         const 1;
         const 30;
 },
 _c35rc() //  [D1]
         { []
         }
     {offset
       c35rc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c35rm; else goto c35rl;
       c35rm: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c35rl: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35rc_info" {
     block_c35rc_info:
         const _c35rc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.07119926 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure" {
     GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure:
         const GHC.Float.$fRealFloatDouble_$cdecodeFloat_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$cdecodeFloat_entry() //  [R2]
         { []
         }
     {offset
       c35rI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35rR; else goto c35rS;
       c35rR: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35rS: // global
           I64[Sp - 8] = block_c35rF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35rY; else goto c35rG;
       u35rY: // global
           call _c35rF(R1) args: 0, res: 0, upd: 0;
       c35rG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cdecodeFloat_info" {
     GHC.Float.$fRealFloatDouble_$cdecodeFloat_info:
         const GHC.Float.$fRealFloatDouble_$cdecodeFloat_entry;
         const 0;
         const 279172874254;
         const 4294967301;
         const S2VLN_srt+384;
 },
 _c35rF() //  [R1]
         { []
         }
     {offset
       c35rF: // global
           I64[Sp] = block_c35rL_info;
           D1 = F64[R1 + 7];
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35rF_info" {
     block_c35rF_info:
         const _c35rF;
         const 0;
         const 4294967326;
         const S2VLN_srt+384;
 },
 _c35rL() //  [R1, R2]
         { []
         }
     {offset
       c35rL: // global
           I64[Sp - 8] = R2;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _c35rM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35rL_info" {
     block_c35rL_info:
         const _c35rL;
         const 0;
         const 30;
 },
 _c35rM() //  []
         { []
         }
     {offset
       c35rM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c35rW; else goto c35rV;
       c35rW: // global
           HpAlloc = 40;
           I64[Sp] = block_c35rM_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c35rV: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35rM_info" {
     block_c35rM_info:
         const _c35rM;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.086875272 UTC

[section ""data" . GHC.Float.$w$cproperFraction_closure" {
     GHC.Float.$w$cproperFraction_closure:
         const GHC.Float.$w$cproperFraction_info;
         const 0;
 },
 GHC.Float.$w$cproperFraction_slow() //  [R1]
         { []
         }
     {offset
       c35sk: // global
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2,
                                                   R1) args: 8, res: 0, upd: 8;
     }
 },
 $dReal_s2UQs_entry() //  [R1]
         { []
         }
     {offset
       c35sw: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s2UQs_info" {
     $dReal_s2UQs_info:
         const $dReal_s2UQs_entry;
         const 1;
         const 16;
 },
 $dNum_s2UQt_entry() //  [R1]
         { []
         }
     {offset
       c35sD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35sE; else goto c35sF;
       c35sE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35sF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s2UQt_info" {
     $dNum_s2UQt_info:
         const $dNum_s2UQt_entry;
         const 1;
         const 16;
 },
 sat_s2UQF_entry() //  [R1]
         { []
         }
     {offset
       c35t6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35ta; else goto c35tb;
       c35ta: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35tb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c35t4_info;
           R3 = I64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UQF_info" {
     sat_s2UQF_info:
         const sat_s2UQF_entry;
         const 4294967297;
         const 19;
 },
 _c35t4() //  [D1]
         { []
         }
     {offset
       c35t4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c35te; else goto c35td;
       c35te: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 24;
       c35td: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c35t4_info" {
     block_c35t4_info:
         const _c35t4;
         const 0;
         const 30;
 },
 sat_s2UQD_entry() //  [R1]
         { []
         }
     {offset
       c35tj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35tk; else goto c35tl;
       c35tk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35tl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UQD_info" {
     sat_s2UQD_info:
         const sat_s2UQD_entry;
         const 2;
         const 18;
 },
 sat_s2UQL_entry() //  [R1]
         { []
         }
     {offset
       c35tA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35tB; else goto c35tC;
       c35tB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35tC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UQL_info" {
     sat_s2UQL_info:
         const sat_s2UQL_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+264;
 },
 sat_s2UQN_entry() //  [R1]
         { []
         }
     {offset
       c35tD: // global
           _s2UQN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c35tE; else goto c35tF;
       c35tF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c35tH; else goto c35tG;
       c35tH: // global
           HpAlloc = 40;
           goto c35tE;
       c35tE: // global
           R1 = _s2UQN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35tG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UQN::P64;
           _s2UQt::P64 = P64[_s2UQN::P64 + 16];
           _s2UQr::I64 = I64[_s2UQN::P64 + 24];
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s2UQr::I64;
           I64[Hp - 16] = sat_s2UQL_info;
           P64[Hp] = _s2UQt::P64;
           R5 = Hp - 31;
           R4 = Hp - 16;
           R3 = GHC.Real.$fIntegralInt_closure;
           R2 = _s2UQt::P64;
           Sp = Sp - 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UQN_info" {
     sat_s2UQN_info:
         const sat_s2UQN_entry;
         const 4294967297;
         const 30064771091;
         const S2VLN_srt+264;
 },
 sat_s2UQK_entry() //  [R1]
         { []
         }
     {offset
       c35tM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35tN; else goto c35tO;
       c35tN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35tO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UQK_info" {
     sat_s2UQK_info:
         const sat_s2UQK_entry;
         const 2;
         const 18;
 },
 sat_s2UQO_entry() //  [R1]
         { []
         }
     {offset
       c35tP: // global
           _s2UQO::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c35tQ; else goto c35tR;
       c35tR: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c35tT; else goto c35tS;
       c35tT: // global
           HpAlloc = 64;
           goto c35tQ;
       c35tQ: // global
           R1 = _s2UQO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35tS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UQO::P64;
           _s2UQq::P64 = P64[_s2UQO::P64 + 16];
           _s2UQt::P64 = P64[_s2UQO::P64 + 24];
           _s2UQr::I64 = I64[_s2UQO::P64 + 32];
           I64[Hp - 56] = sat_s2UQN_info;
           P64[Hp - 40] = _s2UQt::P64;
           I64[Hp - 32] = _s2UQr::I64;
           I64[Hp - 24] = sat_s2UQK_info;
           P64[Hp - 8] = _s2UQq::P64;
           P64[Hp] = _s2UQt::P64;
           R2 = _s2UQt::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UQO_info" {
     sat_s2UQO_info:
         const sat_s2UQO_entry;
         const 4294967298;
         const 30064771087;
         const S2VLN_srt+264;
 },
 section ""relreadonly" . u35ux_srtd" {
     u35ux_srtd:
         const S2VLN_srt+16;
         const 57;
         const 136304272504520705;
 },
 GHC.Float.$w$cproperFraction_entry() //  [R2, D1]
         { []
         }
     {offset
       c35tX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c35tY; else goto c35tZ;
       c35tY: // global
           R1 = GHC.Float.$w$cproperFraction_closure;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c35tZ: // global
           I64[Sp - 16] = block_c35so_info;
           D1 = D1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cproperFraction_info" {
     GHC.Float.$w$cproperFraction_info:
         const GHC.Float.$w$cproperFraction_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const u35ux_srtd;
         const 130;
         const GHC.Float.$w$cproperFraction_slow;
 },
 section ""relreadonly" . u35uy_srtd" {
     u35uy_srtd:
         const S2VLN_srt+16;
         const 56;
         const 64176309722415105;
 },
 _c35so() //  [R1, R2]
         { []
         }
     {offset
       c35so: // global
           I64[Sp - 8] = R2;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _c35sp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35so_info" {
     block_c35so_info:
         const _c35so;
         const 1;
         const 18446744069414584350;
         const u35uy_srtd;
 },
 section ""relreadonly" . u35uz_srtd" {
     u35uz_srtd:
         const S2VLN_srt+16;
         const 56;
         const 64176309722415105;
 },
 _c35sp() //  []
         { []
         }
     {offset
       c35sp: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c35u2; else goto c35u1;
       c35u2: // global
           HpAlloc = 88;
           I64[Sp] = block_c35sp_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c35u1: // global
           I64[Hp - 80] = $dReal_s2UQs_info;
           P64[Hp - 64] = P64[Sp + 24];
           I64[Hp - 56] = $dNum_s2UQt_info;
           P64[Hp - 40] = Hp - 80;
           _s2UQr::I64 = I64[Sp + 8];
           _c35sz::P64 = Hp - 56;
           if (%MO_S_Lt_W64(_s2UQr::I64, 0)) goto c35tV; else goto c35tW;
       c35tV: // global
           _s2UQv::I64 = -_s2UQr::I64;
           if (%MO_S_Ge_W64(_s2UQv::I64, 0)) goto c35up; else goto c35uq;
       c35up: // global
           if (_s2UQv::I64 == 0) goto c35un; else goto c35ui;
       c35un: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _c35sz::P64;
           P64[Sp] = GHC.Real.$fEnumRatio1_closure;
           call _s2UQx() args: 0, res: 0, upd: 0;
       c35ui: // global
           Hp = Hp - 40;
           I64[Sp] = block_c35ug_info;
           R3 = _s2UQv::I64;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           P64[Sp + 24] = _c35sz::P64;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 8, upd: 8;
       c35uq: // global
           Hp = Hp - 40;
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c35tW: // global
           I64[Hp - 32] = sat_s2UQO_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _c35sz::P64;
           I64[Hp] = _s2UQr::I64;
           R2 = GHC.Float.rationalToDouble4_closure+1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35sp_info" {
     block_c35sp_info:
         const _c35sp;
         const 67;
         const 18446744069414584350;
         const u35uz_srtd;
 },
 section ""relreadonly" . u35uA_srtd" {
     u35uA_srtd:
         const S2VLN_srt+16;
         const 51;
         const 1125899906842625;
 },
 _c35ug() //  [R1]
         { []
         }
     {offset
       c35ug: // global
           P64[Sp] = R1;
           call _s2UQx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35ug_info" {
     block_c35ug_info:
         const _c35ug;
         const 67;
         const 18446744069414584350;
         const u35uA_srtd;
 },
 _s2UQx() //  []
         { []
         }
     {offset
       s2UQx: // global
           I64[Sp - 8] = block_c35sU_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c35sU() //  [R1]
         { []
         }
     {offset
       c35sU: // global
           if (R1 == 1) goto c35ud; else goto c35u6;
       c35ud: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c35u6: // global
           _s2UQy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c35sY_info;
           R3 = _s2UQy::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 8;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35sU_info" {
     block_c35sU_info:
         const _c35sU;
         const 132;
         const 4294967326;
         const S2VLN_srt+472;
 },
 _c35sY() //  [R1, R2]
         { []
         }
     {offset
       c35sY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c35u9; else goto c35u8;
       c35u9: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c35u8: // global
           I64[Hp - 56] = sat_s2UQF_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = I64[Sp + 8];
           I64[Hp - 24] = sat_s2UQD_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R2 = Hp - 56;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35sY_info" {
     block_c35sY_info:
         const _c35sY;
         const 195;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.121413361 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$cproperFraction_closure" {
     GHC.Float.$fRealFracDouble_$cproperFraction_closure:
         const GHC.Float.$fRealFracDouble_$cproperFraction_info;
         const 0;
 },
 GHC.Float.$fRealFracDouble_$cproperFraction_entry() //  [R2, R3]
         { []
         }
     {offset
       c35vV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35w1; else goto c35w2;
       c35w1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$cproperFraction_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35w2: // global
           I64[Sp - 16] = block_c35vS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35w7; else goto c35vT;
       u35w7: // global
           call _c35vS(R1) args: 0, res: 0, upd: 0;
       c35vT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$cproperFraction_info" {
     GHC.Float.$fRealFracDouble_$cproperFraction_info:
         const GHC.Float.$fRealFracDouble_$cproperFraction_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2VLN_srt+464;
 },
 _c35vS() //  [R1]
         { []
         }
     {offset
       c35vS: // global
           _s2UQP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c35vY_info;
           D1 = F64[R1 + 7];
           R2 = _s2UQP::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35vS_info" {
     block_c35vS_info:
         const _c35vS;
         const 1;
         const 4294967326;
         const S2VLN_srt+464;
 },
 _c35vY() //  [R1, R2]
         { []
         }
     {offset
       c35vY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35w6; else goto c35w5;
       c35w6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c35w5: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35vY_info" {
     block_c35vY_info:
         const _c35vY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.130185962 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$ctruncate_closure" {
     GHC.Float.$fRealFracDouble_$ctruncate_closure:
         const GHC.Float.$fRealFracDouble_$ctruncate_info;
         const 0;
 },
 GHC.Float.$fRealFracDouble_$ctruncate_entry() //  [R2, R3]
         { []
         }
     {offset
       c35ws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35ww; else goto c35wx;
       c35ww: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$ctruncate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35wx: // global
           I64[Sp - 16] = block_c35wp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35wB; else goto c35wq;
       u35wB: // global
           call _c35wp(R1) args: 0, res: 0, upd: 0;
       c35wq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$ctruncate_info" {
     GHC.Float.$fRealFracDouble_$ctruncate_info:
         const GHC.Float.$fRealFracDouble_$ctruncate_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S2VLN_srt+464;
 },
 _c35wp() //  [R1]
         { []
         }
     {offset
       c35wp: // global
           _s2UQW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c35wv_info;
           D1 = F64[R1 + 7];
           R2 = _s2UQW::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35wp_info" {
     block_c35wp_info:
         const _c35wp;
         const 1;
         const 4294967326;
         const S2VLN_srt+464;
 },
 _c35wv() //  [R1]
         { []
         }
     {offset
       c35wv: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35wv_info" {
     block_c35wv_info:
         const _c35wv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.1390444 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$cceiling_closure" {
     GHC.Float.$fRealFracDouble_$cceiling_closure:
         const GHC.Float.$fRealFracDouble_$cceiling_info;
         const 0;
 },
 sat_s2URf_entry() //  [R1]
         { []
         }
     {offset
       c35xk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35xl; else goto c35xm;
       c35xl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35xm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2URf_info" {
     sat_s2URf_info:
         const sat_s2URf_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 GHC.Float.$fRealFracDouble_$cceiling_entry() //  [R2, R3]
         { []
         }
     {offset
       c35xn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35xo; else goto c35xp;
       c35xo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$cceiling_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35xp: // global
           I64[Sp - 16] = block_c35wS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35xB; else goto c35wT;
       u35xB: // global
           call _c35wS(R1) args: 0, res: 0, upd: 0;
       c35wT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$cceiling_info" {
     GHC.Float.$fRealFracDouble_$cceiling_info:
         const GHC.Float.$fRealFracDouble_$cceiling_entry;
         const 0;
         const 38280601127616526;
         const 8589934607;
         const S2VLN_srt+312;
 },
 _c35wS() //  [R1]
         { []
         }
     {offset
       c35wS: // global
           I64[Sp] = block_c35wX_info;
           D1 = F64[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35wS_info" {
     block_c35wS_info:
         const _c35wS;
         const 1;
         const 2251804108652574;
         const S2VLN_srt+312;
 },
 _c35wX() //  [R1, R2]
         { []
         }
     {offset
       c35wX: // global
           I64[Sp - 8] = block_c35wZ_info;
           _s2UR8::P64 = R1;
           R1 = R2;
           P64[Sp] = _s2UR8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35xA; else goto c35x0;
       u35xA: // global
           call _c35wZ(R1) args: 0, res: 0, upd: 0;
       c35x0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35wX_info" {
     block_c35wX_info:
         const _c35wX;
         const 1;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35wZ() //  [R1]
         { []
         }
     {offset
       c35wZ: // global
           if (%MO_F_Gt_W64(F64[R1 + 7],
                            0.0 :: W64)) goto c35xv; else goto c35xu;
       c35xv: // global
           I64[Sp] = block_c35x8_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c35xu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35wZ_info" {
     block_c35wZ_info:
         const _c35wZ;
         const 2;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35x8() //  [R1]
         { []
         }
     {offset
       c35x8: // global
           I64[Sp] = block_c35xc_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35x8_info" {
     block_c35x8_info:
         const _c35x8;
         const 130;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35xc() //  [R1]
         { []
         }
     {offset
       c35xc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35xz; else goto c35xy;
       c35xz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35xy: // global
           I64[Hp - 16] = sat_s2URf_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35xc_info" {
     block_c35xc_info:
         const _c35xc;
         const 130;
         const 4294967326;
         const S2VLN_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.154611848 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$cfloor_closure" {
     GHC.Float.$fRealFracDouble_$cfloor_closure:
         const GHC.Float.$fRealFracDouble_$cfloor_info;
         const 0;
 },
 sat_s2URs_entry() //  [R1]
         { []
         }
     {offset
       c35yC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35yD; else goto c35yE;
       c35yD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35yE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2URs_info" {
     sat_s2URs_info:
         const sat_s2URs_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 GHC.Float.$fRealFracDouble_$cfloor_entry() //  [R2, R3]
         { []
         }
     {offset
       c35yF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35yG; else goto c35yH;
       c35yG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$cfloor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35yH: // global
           I64[Sp - 16] = block_c35ya_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35yT; else goto c35yb;
       u35yT: // global
           call _c35ya(R1) args: 0, res: 0, upd: 0;
       c35yb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$cfloor_info" {
     GHC.Float.$fRealFracDouble_$cfloor_info:
         const GHC.Float.$fRealFracDouble_$cfloor_entry;
         const 0;
         const 74309398146580494;
         const 8589934607;
         const S2VLN_srt+312;
 },
 _c35ya() //  [R1]
         { []
         }
     {offset
       c35ya: // global
           I64[Sp] = block_c35yf_info;
           D1 = F64[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35ya_info" {
     block_c35ya_info:
         const _c35ya;
         const 1;
         const 2251804108652574;
         const S2VLN_srt+312;
 },
 _c35yf() //  [R1, R2]
         { []
         }
     {offset
       c35yf: // global
           I64[Sp - 8] = block_c35yh_info;
           _s2URl::P64 = R1;
           R1 = R2;
           P64[Sp] = _s2URl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35yS; else goto c35yi;
       u35yS: // global
           call _c35yh(R1) args: 0, res: 0, upd: 0;
       c35yi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35yf_info" {
     block_c35yf_info:
         const _c35yf;
         const 1;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35yh() //  [R1]
         { []
         }
     {offset
       c35yh: // global
           if (%MO_F_Lt_W64(F64[R1 + 7],
                            0.0 :: W64)) goto c35yN; else goto c35yM;
       c35yN: // global
           I64[Sp] = block_c35yq_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c35yM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35yh_info" {
     block_c35yh_info:
         const _c35yh;
         const 2;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35yq() //  [R1]
         { []
         }
     {offset
       c35yq: // global
           I64[Sp] = block_c35yu_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35yq_info" {
     block_c35yq_info:
         const _c35yq;
         const 130;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35yu() //  [R1]
         { []
         }
     {offset
       c35yu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35yR; else goto c35yQ;
       c35yR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35yQ: // global
           I64[Hp - 16] = sat_s2URs_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35yu_info" {
     block_c35yu_info:
         const _c35yu;
         const 130;
         const 4294967326;
         const S2VLN_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.168998968 UTC

[section ""data" . GHC.Float.$w$cexponent_closure" {
     GHC.Float.$w$cexponent_closure:
         const GHC.Float.$w$cexponent_info;
         const 0;
 },
 GHC.Float.$w$cexponent_entry() //  [D1]
         { []
         }
     {offset
       c35zB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35zC; else goto c35zD;
       c35zC: // global
           D1 = D1;
           R1 = GHC.Float.$w$cexponent_closure;
           call (stg_gc_fun)(D1, R1) args: 8, res: 0, upd: 8;
       c35zD: // global
           I64[Sp - 8] = block_c35zs_info;
           D1 = D1;
           Sp = Sp - 8;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cexponent_info" {
     GHC.Float.$w$cexponent_info:
         const GHC.Float.$w$cexponent_entry;
         const 0;
         const 281547991154702;
         const 4294967303;
         const S2VLN_srt+384;
 },
 _c35zs() //  [R1, R2]
         { []
         }
     {offset
       c35zs: // global
           I64[Sp - 8] = block_c35zw_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s2URw::I64 = R2;
           R2 = R1;
           I64[Sp] = _s2URw::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35zs_info" {
     block_c35zs_info:
         const _c35zs;
         const 0;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35zw() //  [R1]
         { []
         }
     {offset
       c35zw: // global
           if (R1 == 1) goto c35zA; else goto c35zz;
       c35zA: // global
           R1 = 0;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c35zz: // global
           R1 = I64[Sp + 8] + 53;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35zw_info" {
     block_c35zw_info:
         const _c35zw;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.176677412 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cexponent_closure" {
     GHC.Float.$fRealFloatDouble_$cexponent_closure:
         const GHC.Float.$fRealFloatDouble_$cexponent_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$cexponent_entry() //  [R2]
         { []
         }
     {offset
       c35A7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c35Af; else goto c35Ag;
       c35Af: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cexponent_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35Ag: // global
           I64[Sp - 8] = block_c35A4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35Al; else goto c35A5;
       u35Al: // global
           call _c35A4(R1) args: 0, res: 0, upd: 0;
       c35A5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cexponent_info" {
     GHC.Float.$fRealFloatDouble_$cexponent_info:
         const GHC.Float.$fRealFloatDouble_$cexponent_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2VLN_srt+512;
 },
 _c35A4() //  [R1]
         { []
         }
     {offset
       c35A4: // global
           I64[Sp] = block_c35Aa_info;
           D1 = F64[R1 + 7];
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35A4_info" {
     block_c35A4_info:
         const _c35A4;
         const 0;
         const 4294967326;
         const S2VLN_srt+512;
 },
 _c35Aa() //  [R1]
         { []
         }
     {offset
       c35Aa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c35Ak; else goto c35Aj;
       c35Ak: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c35Aj: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Aa_info" {
     block_c35Aa_info:
         const _c35Aa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.184497593 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$csignificand_closure" {
     GHC.Float.$fRealFloatDouble_$csignificand_closure:
         const GHC.Float.$fRealFloatDouble_$csignificand_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$csignificand_entry() //  [R2]
         { []
         }
     {offset
       c35AG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c35AS; else goto c35AT;
       c35AS: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$csignificand_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35AT: // global
           I64[Sp - 8] = block_c35AD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35AZ; else goto c35AE;
       u35AZ: // global
           call _c35AD(R1) args: 0, res: 0, upd: 0;
       c35AE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$csignificand_info" {
     GHC.Float.$fRealFloatDouble_$csignificand_info:
         const GHC.Float.$fRealFloatDouble_$csignificand_entry;
         const 0;
         const 1125904201809934;
         const 4294967301;
         const S2VLN_srt+384;
 },
 _c35AD() //  [R1]
         { []
         }
     {offset
       c35AD: // global
           I64[Sp] = block_c35AJ_info;
           D1 = F64[R1 + 7];
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35AD_info" {
     block_c35AD_info:
         const _c35AD;
         const 0;
         const 4294967326;
         const S2VLN_srt+384;
 },
 _c35AJ() //  [R1]
         { []
         }
     {offset
       c35AJ: // global
           I64[Sp] = block_c35AN_info;
           R3 = (-53);
           R2 = R1;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35AJ_info" {
     block_c35AJ_info:
         const _c35AJ;
         const 0;
         const 30;
 },
 _c35AN() //  [D1]
         { []
         }
     {offset
       c35AN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c35AY; else goto c35AX;
       c35AY: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c35AX: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35AN_info" {
     block_c35AN_info:
         const _c35AN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.196975983 UTC

[section ""data" . GHC.Float.$w$cround_closure" {
     GHC.Float.$w$cround_closure:
         const GHC.Float.$w$cround_info;
         const 0;
 },
 GHC.Float.$w$cround_slow() //  [R1]
         { []
         }
     {offset
       c35Bh: // global
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cround_entry(D1, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2URX_entry() //  [R1]
         { []
         }
     {offset
       c35BV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35BW; else goto c35BX;
       c35BW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35BX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2URX_info" {
     sat_s2URX_info:
         const sat_s2URX_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 sat_s2URY_entry() //  [R1]
         { []
         }
     {offset
       c35C3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35C4; else goto c35C5;
       c35C4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35C5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2URY_info" {
     sat_s2URY_info:
         const sat_s2URY_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 GHC.Float.$w$cround_entry() //  [R2, D1]
         { []
         }
     {offset
       c35C6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35C7; else goto c35C8;
       c35C7: // global
           R1 = GHC.Float.$w$cround_closure;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c35C8: // global
           I64[Sp - 16] = block_c35Bl_info;
           D1 = D1;
           _s2URJ::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s2URJ::P64;
           Sp = Sp - 16;
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cround_info" {
     GHC.Float.$w$cround_info:
         const GHC.Float.$w$cround_entry;
         const 0;
         const 1155173343075237902;
         const 8589934592;
         const S2VLN_srt+312;
         const 130;
         const GHC.Float.$w$cround_slow;
 },
 _c35Bl() //  [R1, R2]
         { []
         }
     {offset
       c35Bl: // global
           I64[Sp - 8] = block_c35Bn_info;
           _s2URM::P64 = R1;
           R1 = R2;
           P64[Sp] = _s2URM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35CJ; else goto c35Bo;
       u35CJ: // global
           call _c35Bn(R1) args: 0, res: 0, upd: 0;
       c35Bo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Bl_info" {
     block_c35Bl_info:
         const _c35Bl;
         const 1;
         const 38654705694;
         const S2VLN_srt+312;
 },
 _c35Bn() //  [R1]
         { []
         }
     {offset
       c35Bn: // global
           _s2URJ::P64 = P64[Sp + 16];
           _s2URM::P64 = P64[Sp + 8];
           _s2URP::F64 = F64[R1 + 7];
           (_c35Bs::F64) = call MO_F64_Fabs(_s2URP::F64);
           _s2URQ::F64 = %MO_F_Sub_W64(_c35Bs::F64, 0.5 :: W64);
           if (%MO_F_Lt_W64(_s2URQ::F64,
                            0.0 :: W64)) goto u35CF; else goto c35CC;
       u35CF: // global
           Sp = Sp + 8;
           call _c35CD() args: 0, res: 0, upd: 0;
       c35CC: // global
           if (%MO_F_Eq_W64(_s2URQ::F64,
                            0.0 :: W64)) goto c35Cq; else goto u35CG;
       c35Cq: // global
           I64[Sp - 8] = block_c35Cp_info;
           R3 = _s2URM::P64;
           R2 = _s2URJ::P64;
           F64[Sp] = _s2URP::F64;
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
       u35CG: // global
           F64[Sp] = _s2URP::F64;
           call _s2URT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35Bn_info" {
     block_c35Bn_info:
         const _c35Bn;
         const 2;
         const 38654705694;
         const S2VLN_srt+312;
 },
 _c35Cp() //  [R1]
         { []
         }
     {offset
       c35Cp: // global
           if (R1 & 7 == 1) goto u35CH; else goto u35CI;
       u35CH: // global
           Sp = Sp + 8;
           call _s2URT() args: 0, res: 0, upd: 0;
       u35CI: // global
           Sp = Sp + 16;
           call _c35CD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35Cp_info" {
     block_c35Cp_info:
         const _c35Cp;
         const 67;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35CD() //  []
         { []
         }
     {offset
       c35CD: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _s2URT() //  []
         { []
         }
     {offset
       s2URT: // global
           I64[Sp - 8] = block_c35BG_info;
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c35BG() //  [R1]
         { []
         }
     {offset
       c35BG: // global
           I64[Sp] = block_c35BK_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35BG_info" {
     block_c35BG_info:
         const _c35BG;
         const 323;
         const 4294967326;
         const S2VLN_srt+312;
 },
 _c35BK() //  [R1]
         { []
         }
     {offset
       c35BK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35Cf; else goto c35Ce;
       c35Cf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35Ce: // global
           if (%MO_F_Lt_W64(F64[Sp + 8],
                            0.0 :: W64)) goto c35Ci; else goto c35Ch;
       c35Ci: // global
           I64[Hp - 16] = sat_s2URY_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
       c35Ch: // global
           I64[Hp - 16] = sat_s2URX_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35BK_info" {
     block_c35BK_info:
         const _c35BK;
         const 323;
         const 4294967326;
         const S2VLN_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.215130343 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$cround_closure" {
     GHC.Float.$fRealFracDouble_$cround_closure:
         const GHC.Float.$fRealFracDouble_$cround_info;
         const 0;
 },
 GHC.Float.$fRealFracDouble_$cround_entry() //  [R2, R3]
         { []
         }
     {offset
       c35DJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35DK; else goto c35DL;
       c35DK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$cround_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35DL: // global
           I64[Sp - 16] = block_c35DG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u35DP; else goto c35DH;
       u35DP: // global
           call _c35DG(R1) args: 0, res: 0, upd: 0;
       c35DH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$cround_info" {
     GHC.Float.$fRealFracDouble_$cround_info:
         const GHC.Float.$fRealFracDouble_$cround_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+536;
 },
 _c35DG() //  [R1]
         { []
         }
     {offset
       c35DG: // global
           D1 = F64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$w$cround_entry(D1, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35DG_info" {
     block_c35DG_info:
         const _c35DG;
         const 1;
         const 4294967326;
         const S2VLN_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.22092546 UTC

[section ""data" . GHC.Float.$fRealFloatDouble4_closure" {
     GHC.Float.$fRealFloatDouble4_closure:
         const GHC.Types.I#_con_info;
         const 53;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.222943169 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cfloatDigits_closure" {
     GHC.Float.$fRealFloatDouble_$cfloatDigits_closure:
         const GHC.Float.$fRealFloatDouble_$cfloatDigits_info;
 },
 GHC.Float.$fRealFloatDouble_$cfloatDigits_entry() //  []
         { []
         }
     {offset
       c35E4: // global
           R1 = GHC.Float.$fRealFloatDouble4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cfloatDigits_info" {
     GHC.Float.$fRealFloatDouble_$cfloatDigits_info:
         const GHC.Float.$fRealFloatDouble_$cfloatDigits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.226690031 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cfloatRadix_closure" {
     GHC.Float.$fRealFloatDouble_$cfloatRadix_closure:
         const GHC.Float.$fRealFloatDouble_$cfloatRadix_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$cfloatRadix_entry() //  []
         { []
         }
     {offset
       c35Eg: // global
           R1 = GHC.Float.$fRealFloatDouble5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cfloatRadix_info" {
     GHC.Float.$fRealFloatDouble_$cfloatRadix_info:
         const GHC.Float.$fRealFloatDouble_$cfloatRadix_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S2VLN_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.255227555 UTC

[section ""data" . GHC.Float.$dmatan2_closure" {
     GHC.Float.$dmatan2_closure:
         const GHC.Float.$dmatan2_info;
         const 0;
 },
 $dNum_s2USc_entry() //  [R1]
         { []
         }
     {offset
       c35EE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35EF; else goto c35EG;
       c35EF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35EG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s2USc_info" {
     $dNum_s2USc_info:
         const $dNum_s2USc_entry;
         const 1;
         const 16;
 },
 $dFloating_s2USe_entry() //  [R1]
         { []
         }
     {offset
       c35EP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35EQ; else goto c35ER;
       c35EQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35ER: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_s2USe_info" {
     $dFloating_s2USe_info:
         const $dFloating_s2USe_entry;
         const 1;
         const 16;
 },
 sat_s2USf_entry() //  [R1]
         { []
         }
     {offset
       c35EW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35EX; else goto c35EY;
       c35EX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35EY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USf_info" {
     sat_s2USf_info:
         const sat_s2USf_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USU_entry() //  [R1]
         { []
         }
     {offset
       c35Fb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Fc; else goto c35Fd;
       c35Fc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Fd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USU_info" {
     sat_s2USU_info:
         const sat_s2USU_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USM_entry() //  [R1]
         { []
         }
     {offset
       c35Fn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Fo; else goto c35Fp;
       c35Fo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Fp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USM_info" {
     sat_s2USM_info:
         const sat_s2USM_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USG_entry() //  [R1]
         { []
         }
     {offset
       c35Fz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35FA; else goto c35FB;
       c35FA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35FB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USG_info" {
     sat_s2USG_info:
         const sat_s2USG_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USB_entry() //  [R1]
         { []
         }
     {offset
       c35FL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35FM; else goto c35FN;
       c35FM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35FN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USB_info" {
     sat_s2USB_info:
         const sat_s2USB_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USs_entry() //  [R1]
         { []
         }
     {offset
       c35G2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35G3; else goto c35G4;
       c35G3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35G4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USs_info" {
     sat_s2USs_info:
         const sat_s2USs_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USo_entry() //  [R1]
         { []
         }
     {offset
       c35Ge: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Gf; else goto c35Gg;
       c35Gf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Gg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USo_info" {
     sat_s2USo_info:
         const sat_s2USo_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USq_entry() //  [R1]
         { []
         }
     {offset
       c35Gq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Gr; else goto c35Gs;
       c35Gr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Gs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USq_info" {
     sat_s2USq_info:
         const sat_s2USq_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USu_entry() //  [R1]
         { []
         }
     {offset
       c35GC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35GD; else goto c35GE;
       c35GD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35GE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USu_info" {
     sat_s2USu_info:
         const sat_s2USu_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USz_entry() //  [R1]
         { []
         }
     {offset
       c35GX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35GY; else goto c35GZ;
       c35GY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35GZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USz_info" {
     sat_s2USz_info:
         const sat_s2USz_entry;
         const 2;
         const 18;
 },
 sat_s2USA_entry() //  [R1]
         { []
         }
     {offset
       c35H0: // global
           _s2USA::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c35H1; else goto c35H2;
       c35H2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35H4; else goto c35H3;
       c35H4: // global
           HpAlloc = 32;
           goto c35H1;
       c35H1: // global
           R1 = _s2USA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35H3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2USA::P64;
           _s2US7::P64 = P64[_s2USA::P64 + 16];
           _s2US8::P64 = P64[_s2USA::P64 + 24];
           _s2US9::P64 = P64[_s2USA::P64 + 32];
           _s2USc::P64 = P64[_s2USA::P64 + 40];
           I64[Hp - 24] = sat_s2USz_info;
           P64[Hp - 8] = _s2US8::P64;
           P64[Hp] = _s2USc::P64;
           R2 = _s2US7::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s2US9::P64;
           Sp = Sp - 40;
           call GHC.Float.atan2_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USA_info" {
     sat_s2USA_info:
         const sat_s2USA_entry;
         const 4;
         const 15;
 },
 sat_s2USE_entry() //  [R1]
         { []
         }
     {offset
       c35Hn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Ho; else goto c35Hp;
       c35Ho: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Hp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USE_info" {
     sat_s2USE_info:
         const sat_s2USE_entry;
         const 2;
         const 18;
 },
 sat_s2USF_entry() //  [R1]
         { []
         }
     {offset
       c35Hq: // global
           _s2USF::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c35Hr; else goto c35Hs;
       c35Hs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35Hu; else goto c35Ht;
       c35Hu: // global
           HpAlloc = 32;
           goto c35Hr;
       c35Hr: // global
           R1 = _s2USF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Ht: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2USF::P64;
           _s2US7::P64 = P64[_s2USF::P64 + 16];
           _s2US8::P64 = P64[_s2USF::P64 + 24];
           _s2US9::P64 = P64[_s2USF::P64 + 32];
           _s2USc::P64 = P64[_s2USF::P64 + 40];
           I64[Hp - 24] = sat_s2USE_info;
           P64[Hp - 8] = _s2US8::P64;
           P64[Hp] = _s2USc::P64;
           R2 = _s2US7::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s2US9::P64;
           Sp = Sp - 40;
           call GHC.Float.atan2_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USF_info" {
     sat_s2USF_info:
         const sat_s2USF_entry;
         const 4;
         const 15;
 },
 sat_s2USI_entry() //  [R1]
         { []
         }
     {offset
       c35HE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35HF; else goto c35HG;
       c35HF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35HG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USI_info" {
     sat_s2USI_info:
         const sat_s2USI_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USK_entry() //  [R1]
         { []
         }
     {offset
       c35HU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35HV; else goto c35HW;
       c35HV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35HW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USK_info" {
     sat_s2USK_info:
         const sat_s2USK_entry;
         const 2;
         const 18;
 },
 sat_s2USL_entry() //  [R1]
         { []
         }
     {offset
       c35HX: // global
           _s2USL::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c35HY; else goto c35HZ;
       c35HZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35I1; else goto c35I0;
       c35I1: // global
           HpAlloc = 32;
           goto c35HY;
       c35HY: // global
           R1 = _s2USL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35I0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2USL::P64;
           _s2US7::P64 = P64[_s2USL::P64 + 16];
           _s2US8::P64 = P64[_s2USL::P64 + 24];
           _s2US9::P64 = P64[_s2USL::P64 + 32];
           _s2USc::P64 = P64[_s2USL::P64 + 40];
           I64[Hp - 24] = sat_s2USK_info;
           P64[Hp - 8] = _s2US8::P64;
           P64[Hp] = _s2USc::P64;
           R2 = _s2US7::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s2US9::P64;
           Sp = Sp - 40;
           call GHC.Float.atan2_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USL_info" {
     sat_s2USL_info:
         const sat_s2USL_entry;
         const 4;
         const 15;
 },
 sat_s2USO_entry() //  [R1]
         { []
         }
     {offset
       c35Ib: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Ic; else goto c35Id;
       c35Ic: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Id: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USO_info" {
     sat_s2USO_info:
         const sat_s2USO_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2USS_entry() //  [R1]
         { []
         }
     {offset
       c35It: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c35Iu; else goto c35Iv;
       c35Iu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Iv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c35Ir_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USS_info" {
     sat_s2USS_info:
         const sat_s2USS_entry;
         const 3;
         const 15;
 },
 _c35Ir() //  [R1]
         { []
         }
     {offset
       c35Ir: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c35Ir_info" {
     block_c35Ir_info:
         const _c35Ir;
         const 2;
         const 30;
 },
 sat_s2UST_entry() //  [R1]
         { []
         }
     {offset
       c35Iz: // global
           _s2UST::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c35IA; else goto c35IB;
       c35IB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c35ID; else goto c35IC;
       c35ID: // global
           HpAlloc = 40;
           goto c35IA;
       c35IA: // global
           R1 = _s2UST::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35IC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UST::P64;
           _s2US8::P64 = P64[_s2UST::P64 + 16];
           _s2US9::P64 = P64[_s2UST::P64 + 24];
           _s2USa::P64 = P64[_s2UST::P64 + 32];
           _s2USe::P64 = P64[_s2UST::P64 + 40];
           I64[Hp - 32] = sat_s2USS_info;
           P64[Hp - 16] = _s2US8::P64;
           P64[Hp - 8] = _s2US9::P64;
           P64[Hp] = _s2USa::P64;
           R2 = _s2USe::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           call GHC.Float.atan_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UST_info" {
     sat_s2UST_info:
         const sat_s2UST_entry;
         const 4;
         const 15;
 },
 sat_s2USQ_entry() //  [R1]
         { []
         }
     {offset
       c35II: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35IJ; else goto c35IK;
       c35IJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35IK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.pi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USQ_info" {
     sat_s2USQ_info:
         const sat_s2USQ_entry;
         const 1;
         const 16;
 },
 sat_s2USW_entry() //  [R1]
         { []
         }
     {offset
       c35IU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35IV; else goto c35IW;
       c35IV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35IW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USW_info" {
     sat_s2USW_info:
         const sat_s2USW_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+416;
 },
 sat_s2UT0_entry() //  [R1]
         { []
         }
     {offset
       c35J6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35J7; else goto c35J8;
       c35J7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35J8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UT0_info" {
     sat_s2UT0_info:
         const sat_s2UT0_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+552;
 },
 sat_s2USZ_entry() //  [R1]
         { []
         }
     {offset
       c35Jd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35Je; else goto c35Jf;
       c35Je: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Jf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.pi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2USZ_info" {
     sat_s2USZ_info:
         const sat_s2USZ_entry;
         const 1;
         const 16;
 },
 sat_s2UT2_entry() //  [R1]
         { []
         }
     {offset
       c35Jo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c35Jp; else goto c35Jq;
       c35Jp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Jq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c35Jm_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UT2_info" {
     sat_s2UT2_info:
         const sat_s2UT2_entry;
         const 3;
         const 15;
 },
 _c35Jm() //  [R1]
         { []
         }
     {offset
       c35Jm: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c35Jm_info" {
     block_c35Jm_info:
         const _c35Jm;
         const 2;
         const 30;
 },
 GHC.Float.$dmatan2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c35Ju: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c35Jv; else goto c35Jw;
       c35Jv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$dmatan2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c35Jw: // global
           I64[Sp - 32] = block_c35Es_info;
           _s2US7::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s2US7::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmatan2_info" {
     GHC.Float.$dmatan2_info:
         const GHC.Float.$dmatan2_entry;
         const 0;
         const 1688854155231246;
         const 12884901911;
         const S2VLN_srt+416;
 },
 _c35Es() //  [R1]
         { []
         }
     {offset
       c35Es: // global
           I64[Sp - 8] = block_c35Ew_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Es_info" {
     block_c35Es_info:
         const _c35Es;
         const 3;
         const 562954248388638;
         const S2VLN_srt+416;
 },
 _c35Ew() //  [R1]
         { []
         }
     {offset
       c35Ew: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35JA; else goto c35Jz;
       c35JA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35Jz: // global
           I64[Hp - 16] = $dNum_s2USc_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c35EH_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Ew_info" {
     block_c35Ew_info:
         const _c35Ew;
         const 4;
         const 562954248388638;
         const S2VLN_srt+416;
 },
 _c35EH() //  [R1]
         { []
         }
     {offset
       c35EH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c35JD; else goto c35JC;
       c35JD: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35JC: // global
           I64[Hp - 40] = $dFloating_s2USe_info;
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = sat_s2USf_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c35EZ_info;
           R2 = R1;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[Sp + 40];
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 40;
           Sp = Sp - 40;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35EH_info" {
     block_c35EH_info:
         const _c35EH;
         const 5;
         const 562954248388638;
         const S2VLN_srt+416;
 },
 _c35EZ() //  [R1]
         { []
         }
     {offset
       c35EZ: // global
           if (R1 & 7 == 1) goto c35JG; else goto c35M6;
       c35JG: // global
           I64[Sp] = block_c35F3_info;
           R2 = P64[Sp + 8];
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c35M6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c35M9; else goto c35M8;
       c35M9: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35M8: // global
           I64[Hp - 32] = sat_s2UT2_info;
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 32];
           R2 = P64[Sp + 16];
           I64[Sp + 48] = stg_ap_p_info;
           P64[Sp + 56] = Hp - 32;
           Sp = Sp + 48;
           call GHC.Float.atan_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35EZ_info" {
     block_c35EZ_info:
         const _c35EZ;
         const 7;
         const 562954248388638;
         const S2VLN_srt+416;
 },
 _c35F3() //  [R1]
         { []
         }
     {offset
       c35F3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35JJ; else goto c35JI;
       c35JJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35JI: // global
           I64[Hp - 16] = sat_s2USU_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 8] = block_c35IL_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 56];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35F3_info" {
     block_c35F3_info:
         const _c35F3;
         const 7;
         const 562954248388638;
         const S2VLN_srt+416;
 },
 _c35IL() //  [R1]
         { []
         }
     {offset
       c35IL: // global
           if (R1 & 7 == 1) goto u35MG; else goto c35LP;
       u35MG: // global
           call _c35Fh() args: 0, res: 0, upd: 0;
       c35LP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35LS; else goto c35LR;
       c35LS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35LR: // global
           I64[Hp - 16] = sat_s2USW_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35IX_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35IL_info" {
     block_c35IL_info:
         const _c35IL;
         const 8;
         const 562954248388638;
         const S2VLN_srt+416;
 },
 _c35IX() //  [R1]
         { []
         }
     {offset
       c35IX: // global
           if (R1 & 7 == 1) goto u35MH; else goto c35LY;
       u35MH: // global
           call _c35Fh() args: 0, res: 0, upd: 0;
       c35LY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c35M1; else goto c35M0;
       c35M1: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35M0: // global
           I64[Hp - 40] = sat_s2UT0_info;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = sat_s2USZ_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 48] = block_c35LX_info;
           R2 = P64[Sp + 40];
           P64[Sp + 56] = Hp - 16;
           P64[Sp + 64] = Hp - 40;
           Sp = Sp + 48;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35IX_info" {
     block_c35IX_info:
         const _c35IX;
         const 8;
         const 562954248388638;
         const S2VLN_srt+416;
 },
 _c35Fh() //  []
         { []
         }
     {offset
       c35Fh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35JM; else goto c35JL;
       c35JM: // global
           HpAlloc = 24;
           I64[Sp] = block_c35Fh_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c35JL: // global
           I64[Hp - 16] = sat_s2USM_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35I2_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Fh_info" {
     block_c35Fh_info:
         const _c35Fh;
         const 8;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35I2() //  [R1]
         { []
         }
     {offset
       c35I2: // global
           if (R1 & 7 == 1) goto u35ME; else goto c35Lz;
       u35ME: // global
           call _c35Ft() args: 0, res: 0, upd: 0;
       c35Lz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35LC; else goto c35LB;
       c35LC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35LB: // global
           I64[Hp - 16] = sat_s2USO_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35Ie_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35I2_info" {
     block_c35I2_info:
         const _c35I2;
         const 8;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35Ie() //  [R1]
         { []
         }
     {offset
       c35Ie: // global
           if (R1 & 7 == 1) goto u35MF; else goto c35LH;
       u35MF: // global
           call _c35Ft() args: 0, res: 0, upd: 0;
       c35LH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c35LK; else goto c35LJ;
       c35LK: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35LJ: // global
           I64[Hp - 64] = sat_s2UST_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 40];
           _c35EL::P64 = P64[Sp + 24];
           P64[Hp - 24] = _c35EL::P64;
           I64[Hp - 16] = sat_s2USQ_info;
           P64[Hp] = _c35EL::P64;
           R2 = P64[Sp + 32];
           I64[Sp + 48] = stg_ap_pp_info;
           P64[Sp + 56] = Hp - 16;
           P64[Sp + 64] = Hp - 64;
           Sp = Sp + 48;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Ie_info" {
     block_c35Ie_info:
         const _c35Ie;
         const 8;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35Ft() //  []
         { []
         }
     {offset
       c35Ft: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35JP; else goto c35JO;
       c35JP: // global
           HpAlloc = 24;
           I64[Sp] = block_c35Ft_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c35JO: // global
           I64[Hp - 16] = sat_s2USG_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35Hv_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Ft_info" {
     block_c35Ft_info:
         const _c35Ft;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35Hv() //  [R1]
         { []
         }
     {offset
       c35Hv: // global
           if (R1 & 7 == 1) goto u35MC; else goto c35Lj;
       u35MC: // global
           call _c35FF() args: 0, res: 0, upd: 0;
       c35Lj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35Lm; else goto c35Ll;
       c35Lm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35Ll: // global
           I64[Hp - 16] = sat_s2USI_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35HH_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Hv_info" {
     block_c35Hv_info:
         const _c35Hv;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35HH() //  [R1]
         { []
         }
     {offset
       c35HH: // global
           if (R1 & 7 == 1) goto u35MD; else goto c35Lr;
       u35MD: // global
           call _c35FF() args: 0, res: 0, upd: 0;
       c35Lr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c35Lu; else goto c35Lt;
       c35Lu: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35Lt: // global
           I64[Hp - 40] = sat_s2USL_info;
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           _c35EA::P64 = P64[Sp + 32];
           P64[Hp] = _c35EA::P64;
           R2 = _c35EA::P64;
           I64[Sp + 56] = stg_ap_p_info;
           P64[Sp + 64] = Hp - 40;
           Sp = Sp + 56;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35HH_info" {
     block_c35HH_info:
         const _c35HH;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35FF() //  []
         { []
         }
     {offset
       c35FF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35JS; else goto c35JR;
       c35JS: // global
           HpAlloc = 24;
           I64[Sp] = block_c35FF_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c35JR: // global
           I64[Hp - 16] = sat_s2USB_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35H5_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35FF_info" {
     block_c35FF_info:
         const _c35FF;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35H5() //  [R1]
         { []
         }
     {offset
       c35H5: // global
           if (R1 & 7 == 1) goto u35Mq; else goto c35L6;
       u35Mq: // global
           Sp = Sp + 8;
           call _s2USl() args: 0, res: 0, upd: 0;
       c35L6: // global
           I64[Sp] = block_c35Ha_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 56];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35H5_info" {
     block_c35H5_info:
         const _c35H5;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35Ha() //  [R1]
         { []
         }
     {offset
       c35Ha: // global
           if (R1 & 7 == 1) goto u35Mr; else goto c35Lb;
       u35Mr: // global
           Sp = Sp + 8;
           call _s2USl() args: 0, res: 0, upd: 0;
       c35Lb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c35Le; else goto c35Ld;
       c35Le: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35Ld: // global
           I64[Hp - 40] = sat_s2USF_info;
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           _c35EA::P64 = P64[Sp + 32];
           P64[Hp] = _c35EA::P64;
           R2 = _c35EA::P64;
           I64[Sp + 56] = stg_ap_p_info;
           P64[Sp + 64] = Hp - 40;
           Sp = Sp + 56;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Ha_info" {
     block_c35Ha_info:
         const _c35Ha;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _s2USl() //  []
         { []
         }
     {offset
       s2USl: // global
           I64[Sp - 8] = block_c35GF_info;
           R2 = P64[Sp + 40];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 56];
           Sp = Sp - 24;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c35GF() //  [R1]
         { []
         }
     {offset
       c35GF: // global
           if (R1 & 7 == 1) goto u35My; else goto c35KS;
       u35My: // global
           call _c35FW() args: 0, res: 0, upd: 0;
       c35KS: // global
           I64[Sp] = block_c35GK_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 56];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35GF_info" {
     block_c35GF_info:
         const _c35GF;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35GK() //  [R1]
         { []
         }
     {offset
       c35GK: // global
           if (R1 & 7 == 1) goto u35Mz; else goto c35KX;
       u35Mz: // global
           call _c35FW() args: 0, res: 0, upd: 0;
       c35KX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c35L0; else goto c35KZ;
       c35L0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35KZ: // global
           I64[Hp - 40] = sat_s2USA_info;
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           _c35EA::P64 = P64[Sp + 32];
           P64[Hp] = _c35EA::P64;
           R2 = _c35EA::P64;
           I64[Sp + 56] = stg_ap_p_info;
           P64[Sp + 64] = Hp - 40;
           Sp = Sp + 56;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35GK_info" {
     block_c35GK_info:
         const _c35GK;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35FW() //  []
         { []
         }
     {offset
       c35FW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35JW; else goto c35JV;
       c35JW: // global
           HpAlloc = 24;
           I64[Sp] = block_c35FW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c35JV: // global
           I64[Hp - 16] = sat_s2USs_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35Gt_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35FW_info" {
     block_c35FW_info:
         const _c35FW;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35Gt() //  [R1]
         { []
         }
     {offset
       c35Gt: // global
           if (R1 & 7 == 1) goto u35Mx; else goto c35Ko;
       u35Mx: // global
           call _c35G8() args: 0, res: 0, upd: 0;
       c35Ko: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35Kr; else goto c35Kq;
       c35Kr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35Kq: // global
           I64[Hp - 16] = sat_s2USu_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35Kn_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Gt_info" {
     block_c35Gt_info:
         const _c35Gt;
         const 1032;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35Kn() //  [R1]
         { []
         }
     {offset
       c35Kn: // global
           if (R1 & 7 == 1) goto c35Ky; else goto u35Ms;
       c35Ky: // global
           I64[Sp] = block_c35Kv_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 64];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
       u35Ms: // global
           Sp = Sp + 24;
           call _c35KM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35Kn_info" {
     block_c35Kn_info:
         const _c35Kn;
         const 1160;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35Kv() //  [R1]
         { []
         }
     {offset
       c35Kv: // global
           if (R1 & 7 == 1) goto u35MK; else goto u35Mt;
       u35MK: // global
           call _c35G8() args: 0, res: 0, upd: 0;
       u35Mt: // global
           Sp = Sp + 24;
           call _c35KM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c35Kv_info" {
     block_c35Kv_info:
         const _c35Kv;
         const 3208;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35G8() //  []
         { []
         }
     {offset
       c35G8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35JZ; else goto c35JY;
       c35JZ: // global
           HpAlloc = 24;
           I64[Sp] = block_c35G8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c35JY: // global
           I64[Hp - 16] = sat_s2USo_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c35Gh_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35G8_info" {
     block_c35G8_info:
         const _c35G8;
         const 3464;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35Gh() //  [R1]
         { []
         }
     {offset
       c35Gh: // global
           if (R1 & 7 == 1) goto u35Mu; else goto c35K5;
       u35Mu: // global
           Sp = Sp + 32;
           call _c35Ke() args: 0, res: 0, upd: 0;
       c35K5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35K8; else goto c35K7;
       c35K8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35K7: // global
           I64[Hp - 16] = sat_s2USq_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 24] = block_c35K4_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 56];
           P64[Sp + 16] = Hp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Gh_info" {
     block_c35Gh_info:
         const _c35Gh;
         const 3464;
         const 4294967326;
         const S2VLN_srt+416;
 },
 _c35K4() //  [R1]
         { []
         }
     {offset
       c35K4: // global
           if (R1 & 7 == 1) goto u35Mv; else goto c35Ki;
       u35Mv: // global
           Sp = Sp + 8;
           call _c35Ke() args: 0, res: 0, upd: 0;
       c35Ki: // global
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35K4_info" {
     block_c35K4_info:
         const _c35K4;
         const 389;
         const 30;
 },
 _c35Ke() //  []
         { []
         }
     {offset
       c35Ke: // global
           R2 = P64[Sp];
           I64[Sp + 16] = stg_ap_pp_info;
           _s2US8::P64 = P64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = _s2US8::P64;
           Sp = Sp + 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c35KM() //  []
         { []
         }
     {offset
       c35KM: // global
           R2 = P64[Sp];
           Sp = Sp + 48;
           call GHC.Float.pi_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c35LX() //  [R1]
         { []
         }
     {offset
       c35LX: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35LX_info" {
     block_c35LX_info:
         const _c35LX;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.384921633 UTC

[section ""data" . GHC.Float.$dmlog1mexp_closure" {
     GHC.Float.$dmlog1mexp_closure:
         const GHC.Float.$dmlog1mexp_info;
 },
 sat_s2UT7_entry() //  [R1]
         { []
         }
     {offset
       c35RZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35S0; else goto c35S1;
       c35S0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35S1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.exp_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UT7_info" {
     sat_s2UT7_info:
         const sat_s2UT7_entry;
         const 2;
         const 18;
 },
 sat_s2UT8_entry() //  [R1]
         { []
         }
     {offset
       c35S4: // global
           _s2UT8::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c35S8; else goto c35S9;
       c35S9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35Sb; else goto c35Sa;
       c35Sb: // global
           HpAlloc = 32;
           goto c35S8;
       c35S8: // global
           R1 = _s2UT8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Sa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UT8::P64;
           _s2UT3::P64 = P64[_s2UT8::P64 + 16];
           _s2UT4::P64 = P64[_s2UT8::P64 + 24];
           I64[Hp - 24] = sat_s2UT7_info;
           P64[Hp - 8] = _s2UT3::P64;
           P64[Hp] = _s2UT4::P64;
           I64[Sp - 32] = block_c35S2_info;
           R2 = _s2UT3::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UT8_info" {
     sat_s2UT8_info:
         const sat_s2UT8_entry;
         const 2;
         const 18;
 },
 _c35S2() //  [R1]
         { []
         }
     {offset
       c35S2: // global
           I64[Sp] = block_c35S7_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c35S2_info" {
     block_c35S2_info:
         const _c35S2;
         const 1;
         const 30;
 },
 _c35S7() //  [R1]
         { []
         }
     {offset
       c35S7: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c35S7_info" {
     block_c35S7_info:
         const _c35S7;
         const 1;
         const 30;
 },
 GHC.Float.$dmlog1mexp_entry() //  [R2, R3]
         { []
         }
     {offset
       c35Sh: // global
           _s2UT4::P64 = R3;
           _s2UT3::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c35Si; else goto c35Sj;
       c35Sj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35Sl; else goto c35Sk;
       c35Sl: // global
           HpAlloc = 32;
           goto c35Si;
       c35Si: // global
           R3 = _s2UT4::P64;
           R2 = _s2UT3::P64;
           R1 = GHC.Float.$dmlog1mexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35Sk: // global
           I64[Hp - 24] = sat_s2UT8_info;
           P64[Hp - 8] = _s2UT3::P64;
           P64[Hp] = _s2UT4::P64;
           R2 = _s2UT3::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmlog1mexp_info" {
     GHC.Float.$dmlog1mexp_info:
         const GHC.Float.$dmlog1mexp_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.401759274 UTC

[section ""data" . GHC.Float.$dmlog1pexp_closure" {
     GHC.Float.$dmlog1pexp_closure:
         const GHC.Float.$dmlog1pexp_info;
 },
 sat_s2UTb_entry() //  [R1]
         { []
         }
     {offset
       c35SQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35SR; else goto c35SS;
       c35SR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35SS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.exp_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTb_info" {
     sat_s2UTb_info:
         const sat_s2UTb_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmlog1pexp_entry() //  [R2, R3]
         { []
         }
     {offset
       c35ST: // global
           _s2UTa::P64 = R3;
           _s2UT9::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c35SU; else goto c35SV;
       c35SV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35SX; else goto c35SW;
       c35SX: // global
           HpAlloc = 32;
           goto c35SU;
       c35SU: // global
           R3 = _s2UTa::P64;
           R2 = _s2UT9::P64;
           R1 = GHC.Float.$dmlog1pexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35SW: // global
           I64[Hp - 24] = sat_s2UTb_info;
           P64[Hp - 8] = _s2UT9::P64;
           P64[Hp] = _s2UTa::P64;
           R2 = _s2UT9::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmlog1pexp_info" {
     GHC.Float.$dmlog1pexp_info:
         const GHC.Float.$dmlog1pexp_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.413664503 UTC

[section ""data" . GHC.Float.$dmexpm1_closure" {
     GHC.Float.$dmexpm1_closure:
         const GHC.Float.$dmexpm1_info;
         const 0;
 },
 sat_s2UTh_entry() //  [R1]
         { []
         }
     {offset
       c35Tp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Tq; else goto c35Tr;
       c35Tq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Tr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTh_info" {
     sat_s2UTh_info:
         const sat_s2UTh_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+312;
 },
 sat_s2UTg_entry() //  [R1]
         { []
         }
     {offset
       c35Tw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Tx; else goto c35Ty;
       c35Tx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Ty: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.exp_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTg_info" {
     sat_s2UTg_info:
         const sat_s2UTg_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmexpm1_entry() //  [R2, R3]
         { []
         }
     {offset
       c35Tz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35TA; else goto c35TB;
       c35TA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$dmexpm1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35TB: // global
           I64[Sp - 24] = block_c35Td_info;
           _s2UTc::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s2UTc::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmexpm1_info" {
     GHC.Float.$dmexpm1_info:
         const GHC.Float.$dmexpm1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+568;
 },
 _c35Td() //  [R1]
         { []
         }
     {offset
       c35Td: // global
           I64[Sp] = block_c35Th_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Td_info" {
     block_c35Td_info:
         const _c35Td;
         const 2;
         const 4294967326;
         const S2VLN_srt+576;
 },
 _c35Th() //  [R1]
         { []
         }
     {offset
       c35Th: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c35TF; else goto c35TE;
       c35TF: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c35TE: // global
           I64[Hp - 48] = sat_s2UTh_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_s2UTg_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 48;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Th_info" {
     block_c35Th_info:
         const _c35Th;
         const 2;
         const 4294967326;
         const S2VLN_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.430510157 UTC

[section ""data" . GHC.Float.$dmlog1p_closure" {
     GHC.Float.$dmlog1p_closure:
         const GHC.Float.$dmlog1p_info;
         const 0;
 },
 sat_s2UTm_entry() //  [R1]
         { []
         }
     {offset
       c35Uo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Up; else goto c35Uq;
       c35Up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Uq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTm_info" {
     sat_s2UTm_info:
         const sat_s2UTm_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+576;
 },
 sat_s2UTn_entry() //  [R1]
         { []
         }
     {offset
       c35Ur: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c35Us; else goto c35Ut;
       c35Us: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Ut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c35Uc_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTn_info" {
     sat_s2UTn_info:
         const sat_s2UTn_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+576;
 },
 _c35Uc() //  [R1]
         { []
         }
     {offset
       c35Uc: // global
           I64[Sp] = block_c35Ug_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c35Uc_info" {
     block_c35Uc_info:
         const _c35Uc;
         const 1;
         const 4294967326;
         const S2VLN_srt+576;
 },
 _c35Ug() //  [R1]
         { []
         }
     {offset
       c35Ug: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35Ux; else goto c35Uw;
       c35Ux: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c35Uw: // global
           I64[Hp - 16] = sat_s2UTm_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c35Ug_info" {
     block_c35Ug_info:
         const _c35Ug;
         const 1;
         const 4294967326;
         const S2VLN_srt+576;
 },
 GHC.Float.$dmlog1p_entry() //  [R2, R3]
         { []
         }
     {offset
       c35Uy: // global
           _s2UTj::P64 = R3;
           _s2UTi::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c35Uz; else goto c35UA;
       c35UA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35UC; else goto c35UB;
       c35UC: // global
           HpAlloc = 32;
           goto c35Uz;
       c35Uz: // global
           R3 = _s2UTj::P64;
           R2 = _s2UTi::P64;
           R1 = GHC.Float.$dmlog1p_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35UB: // global
           I64[Hp - 24] = sat_s2UTn_info;
           P64[Hp - 8] = _s2UTi::P64;
           P64[Hp] = _s2UTj::P64;
           R2 = _s2UTi::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmlog1p_info" {
     GHC.Float.$dmlog1p_info:
         const GHC.Float.$dmlog1p_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.444384125 UTC

[section ""data" . GHC.Float.$dmtanh_closure" {
     GHC.Float.$dmtanh_closure:
         const GHC.Float.$dmtanh_info;
 },
 sat_s2UTs_entry() //  [R1]
         { []
         }
     {offset
       c35V7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35V8; else goto c35V9;
       c35V8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35V9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTs_info" {
     sat_s2UTs_info:
         const sat_s2UTs_entry;
         const 2;
         const 18;
 },
 sat_s2UTr_entry() //  [R1]
         { []
         }
     {offset
       c35Ve: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Vf; else goto c35Vg;
       c35Vf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Vg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTr_info" {
     sat_s2UTr_info:
         const sat_s2UTr_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmtanh_entry() //  [R2, R3]
         { []
         }
     {offset
       c35Vj: // global
           _s2UTp::P64 = R3;
           _s2UTo::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c35Vk; else goto c35Vl;
       c35Vl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c35Vn; else goto c35Vm;
       c35Vn: // global
           HpAlloc = 64;
           goto c35Vk;
       c35Vk: // global
           R3 = _s2UTp::P64;
           R2 = _s2UTo::P64;
           R1 = GHC.Float.$dmtanh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35Vm: // global
           I64[Hp - 56] = sat_s2UTs_info;
           P64[Hp - 40] = _s2UTo::P64;
           P64[Hp - 32] = _s2UTp::P64;
           I64[Hp - 24] = sat_s2UTr_info;
           P64[Hp - 8] = _s2UTo::P64;
           P64[Hp] = _s2UTp::P64;
           I64[Sp - 24] = block_c35Vh_info;
           R2 = _s2UTo::P64;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmtanh_info" {
     GHC.Float.$dmtanh_info:
         const GHC.Float.$dmtanh_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c35Vh() //  [R1]
         { []
         }
     {offset
       c35Vh: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c35V3::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c35V3::P64;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35Vh_info" {
     block_c35Vh_info:
         const _c35Vh;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.455194369 UTC

[section ""data" . GHC.Float.$dmtan_closure" {
     GHC.Float.$dmtan_closure:
         const GHC.Float.$dmtan_info;
 },
 sat_s2UTx_entry() //  [R1]
         { []
         }
     {offset
       c35VU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35VV; else goto c35VW;
       c35VV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35VW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTx_info" {
     sat_s2UTx_info:
         const sat_s2UTx_entry;
         const 2;
         const 18;
 },
 sat_s2UTw_entry() //  [R1]
         { []
         }
     {offset
       c35W1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35W2; else goto c35W3;
       c35W2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35W3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTw_info" {
     sat_s2UTw_info:
         const sat_s2UTw_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmtan_entry() //  [R2, R3]
         { []
         }
     {offset
       c35W6: // global
           _s2UTu::P64 = R3;
           _s2UTt::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c35W7; else goto c35W8;
       c35W8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c35Wa; else goto c35W9;
       c35Wa: // global
           HpAlloc = 64;
           goto c35W7;
       c35W7: // global
           R3 = _s2UTu::P64;
           R2 = _s2UTt::P64;
           R1 = GHC.Float.$dmtan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35W9: // global
           I64[Hp - 56] = sat_s2UTx_info;
           P64[Hp - 40] = _s2UTt::P64;
           P64[Hp - 32] = _s2UTu::P64;
           I64[Hp - 24] = sat_s2UTw_info;
           P64[Hp - 8] = _s2UTt::P64;
           P64[Hp] = _s2UTu::P64;
           I64[Sp - 24] = block_c35W4_info;
           R2 = _s2UTt::P64;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmtan_info" {
     GHC.Float.$dmtan_info:
         const GHC.Float.$dmtan_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c35W4() //  [R1]
         { []
         }
     {offset
       c35W4: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c35VQ::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c35VQ::P64;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35W4_info" {
     block_c35W4_info:
         const _c35W4;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.471831275 UTC

[section ""data" . GHC.Float.$dmlogBase_closure" {
     GHC.Float.$dmlogBase_closure:
         const GHC.Float.$dmlogBase_info;
 },
 sat_s2UTD_entry() //  [R1]
         { []
         }
     {offset
       c35WH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35WI; else goto c35WJ;
       c35WI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35WJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.log_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTD_info" {
     sat_s2UTD_info:
         const sat_s2UTD_entry;
         const 2;
         const 18;
 },
 sat_s2UTC_entry() //  [R1]
         { []
         }
     {offset
       c35WO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35WP; else goto c35WQ;
       c35WP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35WQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.log_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTC_info" {
     sat_s2UTC_info:
         const sat_s2UTC_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmlogBase_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c35WT: // global
           _s2UTA::P64 = R4;
           _s2UTz::P64 = R3;
           _s2UTy::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c35WU; else goto c35WV;
       c35WV: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c35WX; else goto c35WW;
       c35WX: // global
           HpAlloc = 64;
           goto c35WU;
       c35WU: // global
           R4 = _s2UTA::P64;
           R3 = _s2UTz::P64;
           R2 = _s2UTy::P64;
           R1 = GHC.Float.$dmlogBase_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c35WW: // global
           I64[Hp - 56] = sat_s2UTD_info;
           P64[Hp - 40] = _s2UTy::P64;
           P64[Hp - 32] = _s2UTz::P64;
           I64[Hp - 24] = sat_s2UTC_info;
           P64[Hp - 8] = _s2UTy::P64;
           P64[Hp] = _s2UTA::P64;
           I64[Sp - 24] = block_c35WR_info;
           R2 = _s2UTy::P64;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmlogBase_info" {
     GHC.Float.$dmlogBase_info:
         const GHC.Float.$dmlogBase_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c35WR() //  [R1]
         { []
         }
     {offset
       c35WR: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c35WD::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c35WD::P64;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35WR_info" {
     block_c35WR_info:
         const _c35WR;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.491805016 UTC

[section ""data" . GHC.Float.$dm**_closure" {
     GHC.Float.$dm**_closure:
         const GHC.Float.$dm**_info;
 },
 sat_s2UTJ_entry() //  [R1]
         { []
         }
     {offset
       c35Xy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Xz; else goto c35XA;
       c35Xz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35XA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.log_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTJ_info" {
     sat_s2UTJ_info:
         const sat_s2UTJ_entry;
         const 2;
         const 18;
 },
 sat_s2UTK_entry() //  [R1]
         { []
         }
     {offset
       c35XD: // global
           _s2UTK::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c35XH; else goto c35XI;
       c35XI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35XK; else goto c35XJ;
       c35XK: // global
           HpAlloc = 32;
           goto c35XH;
       c35XH: // global
           R1 = _s2UTK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35XJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2UTK::P64;
           _s2UTE::P64 = P64[_s2UTK::P64 + 16];
           _s2UTF::P64 = P64[_s2UTK::P64 + 24];
           _s2UTG::P64 = P64[_s2UTK::P64 + 32];
           I64[Hp - 24] = sat_s2UTJ_info;
           P64[Hp - 8] = _s2UTE::P64;
           P64[Hp] = _s2UTF::P64;
           I64[Sp - 40] = block_c35XB_info;
           R2 = _s2UTE::P64;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s2UTG::P64;
           Sp = Sp - 40;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTK_info" {
     sat_s2UTK_info:
         const sat_s2UTK_entry;
         const 3;
         const 15;
 },
 _c35XB() //  [R1]
         { []
         }
     {offset
       c35XB: // global
           I64[Sp] = block_c35XG_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c35XB_info" {
     block_c35XB_info:
         const _c35XB;
         const 2;
         const 30;
 },
 _c35XG() //  [R1]
         { []
         }
     {offset
       c35XG: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c35XG_info" {
     block_c35XG_info:
         const _c35XG;
         const 2;
         const 30;
 },
 GHC.Float.$dm**_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c35XQ: // global
           _s2UTG::P64 = R4;
           _s2UTF::P64 = R3;
           _s2UTE::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c35XR; else goto c35XS;
       c35XS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c35XU; else goto c35XT;
       c35XU: // global
           HpAlloc = 40;
           goto c35XR;
       c35XR: // global
           R4 = _s2UTG::P64;
           R3 = _s2UTF::P64;
           R2 = _s2UTE::P64;
           R1 = GHC.Float.$dm**_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c35XT: // global
           I64[Hp - 32] = sat_s2UTK_info;
           P64[Hp - 16] = _s2UTE::P64;
           P64[Hp - 8] = _s2UTF::P64;
           P64[Hp] = _s2UTG::P64;
           R2 = _s2UTE::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Float.exp_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dm**_info" {
     GHC.Float.$dm**_info:
         const GHC.Float.$dm**_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.508109898 UTC

[section ""data" . lvl1_r2Upz_closure" {
     lvl1_r2Upz_closure:
         const GHC.Real.:%_con_info;
         const GHC.Float.$fRealDouble1_closure;
         const GHC.Float.$fRealFloatDouble5_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.513066908 UTC

[section ""data" . GHC.Float.$dmsqrt_closure" {
     GHC.Float.$dmsqrt_closure:
         const GHC.Float.$dmsqrt_info;
         const 0;
 },
 sat_s2UTO_entry() //  [R1]
         { []
         }
     {offset
       c35Ys: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c35Yt; else goto c35Yu;
       c35Yt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Yu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c35Yq_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTO_info" {
     sat_s2UTO_info:
         const sat_s2UTO_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+592;
 },
 _c35Yq() //  [R1]
         { []
         }
     {offset
       c35Yq: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = lvl1_r2Upz_closure+1;
           Sp = Sp - 8;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c35Yq_info" {
     block_c35Yq_info:
         const _c35Yq;
         const 0;
         const 4294967326;
         const S2VLN_srt+592;
 },
 GHC.Float.$dmsqrt_entry() //  [R2, R3]
         { []
         }
     {offset
       c35Yy: // global
           _s2UTM::P64 = R3;
           _s2UTL::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c35Yz; else goto c35YA;
       c35YA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35YC; else goto c35YB;
       c35YC: // global
           HpAlloc = 24;
           goto c35Yz;
       c35Yz: // global
           R3 = _s2UTM::P64;
           R2 = _s2UTL::P64;
           R1 = GHC.Float.$dmsqrt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c35YB: // global
           I64[Hp - 16] = sat_s2UTO_info;
           P64[Hp] = _s2UTL::P64;
           R2 = _s2UTL::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s2UTM::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Float.**_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmsqrt_info" {
     GHC.Float.$dmsqrt_info:
         const GHC.Float.$dmsqrt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.528988027 UTC

[section ""data" . GHC.Float.roundTo2_closure" {
     GHC.Float.roundTo2_closure:
         const GHC.Float.roundTo2_info;
 },
 GHC.Float.roundTo2_entry() //  [R2]
         { []
         }
     {offset
       c35YX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c35YY; else goto c35YZ;
       c35YY: // global
           R2 = R2;
           R1 = GHC.Float.roundTo2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35YZ: // global
           I64[Sp - 8] = block_c35YU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u35Z7; else goto c35YV;
       u35Z7: // global
           call _c35YU(R1) args: 0, res: 0, upd: 0;
       c35YV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.roundTo2_info" {
     GHC.Float.roundTo2_info:
         const GHC.Float.roundTo2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c35YU() //  [R1]
         { []
         }
     {offset
       c35YU: // global
           if (I64[R1 + 7] == 0) goto c35Z6; else goto c35Z5;
       c35Z6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c35Z5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c35YU_info" {
     block_c35YU_info:
         const _c35YU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.542217562 UTC

[section ""cstring" . lvl2_r2UpA_bytes" {
     lvl2_r2UpA_bytes:
         I8[] [114,111,117,110,100,84,111,58,32,98,97,100,32,86,97,108,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.54712403 UTC

[section ""data" . GHC.Float.roundTo1_closure" {
     GHC.Float.roundTo1_closure:
         const GHC.Float.roundTo1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.roundTo1_entry() //  [R1]
         { []
         }
     {offset
       c35Zs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35Zt; else goto c35Zu;
       c35Zt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35Zu: // global
           (_c35Zn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c35Zn::I64 == 0) goto c35Zp; else goto c35Zo;
       c35Zp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c35Zo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c35Zn::I64;
           I64[Sp - 24] = block_c35Zq_info;
           R2 = lvl2_r2UpA_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.roundTo1_info" {
     GHC.Float.roundTo1_info:
         const GHC.Float.roundTo1_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+608;
 },
 _c35Zq() //  [R1]
         { []
         }
     {offset
       c35Zq: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c35Zq_info" {
     block_c35Zq_info:
         const _c35Zq;
         const 0;
         const 4294967326;
         const S2VLN_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.555618225 UTC

[section ""data" . lvl3_r2UpB_closure" {
     lvl3_r2UpB_closure:
         const :_con_info;
         const GHC.Float.minExpt_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.55986389 UTC

[section ""data" . GHC.Float.$wxs_closure" {
     GHC.Float.$wxs_closure:
         const GHC.Float.$wxs_info;
 },
 sat_s2UTX_entry() //  [R1]
         { []
         }
     {offset
       c35ZV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c35ZW; else goto c35ZX;
       c35ZW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35ZX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call GHC.Float.$wxs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UTX_info" {
     sat_s2UTX_info:
         const sat_s2UTX_entry;
         const 4294967296;
         const 17;
 },
 GHC.Float.$wxs_entry() //  [R2]
         { []
         }
     {offset
       c3601: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3605; else goto c3604;
       c3605: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Float.$wxs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3604: // global
           if (R2 == 1) goto c3600; else goto c35ZZ;
       c3600: // global
           Hp = Hp - 48;
           R1 = lvl3_r2UpB_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c35ZZ: // global
           I64[Hp - 40] = sat_s2UTX_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wxs_info" {
     GHC.Float.$wxs_info:
         const GHC.Float.$wxs_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.577605526 UTC

[section ""data" . GHC.Float.$wroundTo_closure" {
     GHC.Float.$wroundTo_closure:
         const GHC.Float.$wroundTo_info;
         const 0;
 },
 b2_s2UU1_entry() //  [R1]
         { []
         }
     {offset
       c360u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c360B; else goto c360C;
       c360B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c360C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c360r_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u360G; else goto c360s;
       u360G: // global
           call _c360r(R1) args: 0, res: 0, upd: 0;
       c360s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . b2_s2UU1_info" {
     b2_s2UU1_info:
         const b2_s2UU1_entry;
         const 1;
         const 16;
 },
 _c360r() //  [R1]
         { []
         }
     {offset
       c360r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c360F; else goto c360E;
       c360F: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c360E: // global
           _s2UU3::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Shr_W64(_s2UU3::I64 + (_s2UU3::I64 >> 63), 1);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c360r_info" {
     block_c360r_info:
         const _c360r;
         const 0;
         const 30;
 },
 sat_s2UUd_entry() //  [R1]
         { []
         }
     {offset
       c360Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c360Z; else goto c3610;
       c360Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3610: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c360V_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3619; else goto c360W;
       u3619: // global
           call _c360V(R1) args: 0, res: 0, upd: 0;
       c360W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UUd_info" {
     sat_s2UUd_info:
         const sat_s2UUd_entry;
         const 1;
         const 16;
 },
 _c360V() //  [R1]
         { []
         }
     {offset
       c360V: // global
           _s2UUb::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _s2UUb::I64)) goto c3617; else goto c3618;
       c3617: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3618: // global
           R2 = _s2UUb::I64;
           Sp = Sp + 8;
           call GHC.Float.$wxs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c360V_info" {
     block_c360V_info:
         const _c360V;
         const 0;
         const 30;
 },
 sat_s2UUl_entry() //  [R1]
         { []
         }
     {offset
       c361n: // global
           R2 = P64[R1 + 16];
           call GHC.Float.$seven_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2UUl_info" {
     sat_s2UUl_info:
         const sat_s2UUl_entry;
         const 1;
         const 16;
 },
 sat_s2UUG_entry() //  [R1]
         { []
         }
     {offset
       c361N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c361O; else goto c361P;
       c361O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c361P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (%MO_S_Lt_W64(I64[R1 + 16],
                            I64[R1 + 24])) goto c361L; else goto c361M;
       c361L: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c361M: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UUG_info" {
     sat_s2UUG_info:
         const sat_s2UUG_entry;
         const 8589934592;
         const 20;
 },
 sat_s2UUJ_entry() //  [R1]
         { []
         }
     {offset
       c3625: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3626; else goto c3627;
       c3626: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3627: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (%MO_S_Lt_W64(I64[R1 + 16],
                            I64[R1 + 24])) goto c3623; else goto c3624;
       c3623: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3624: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UUJ_info" {
     sat_s2UUJ_info:
         const sat_s2UUJ_entry;
         const 8589934592;
         const 20;
 },
 sat_s2UUM_entry() //  [R1]
         { []
         }
     {offset
       c362n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c362o; else goto c362p;
       c362o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c362p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (%MO_S_Lt_W64(I64[R1 + 16],
                            I64[R1 + 24])) goto c362l; else goto c362m;
       c362l: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c362m: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2UUM_info" {
     sat_s2UUM_info:
         const sat_s2UUM_entry;
         const 8589934592;
         const 20;
 },
 $wf1_s2UU5_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c362u: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c362v; else goto c362w;
       c362v: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c362w: // global
           I64[Sp - 48] = block_c360M_info;
           _s2UU5::P64 = R1;
           _s2UTY::P64 = P64[R1 + 5];
           _s2UU1::P64 = P64[R1 + 13];
           R1 = R4;
           P64[Sp - 40] = _s2UTY::P64;
           P64[Sp - 32] = _s2UU1::P64;
           P64[Sp - 24] = _s2UU5::P64;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u363O; else goto c360N;
       u363O: // global
           call _c360M(R1) args: 0, res: 0, upd: 0;
       c360N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wf1_s2UU5_info" {
     $wf1_s2UU5_info:
         const $wf1_s2UU5_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 _c360M() //  [R1]
         { []
         }
     {offset
       c360M: // global
           _s2UU6::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c362r; else goto c362s;
       c362r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c362z; else goto c362y;
       c362z: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c362y: // global
           I64[Hp - 16] = sat_s2UUd_info;
           P64[Hp] = _s2UU6::P64;
           R2 = Hp - 16;
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c362s: // global
           I64[Sp - 8] = block_c361c_info;
           _s2UUe::P64 = P64[R1 + 6];
           _s2UUf::P64 = P64[R1 + 14];
           R1 = _s2UU6::P64;
           P64[Sp] = _s2UUf::P64;
           P64[Sp + 32] = _s2UUe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u363K; else goto c361d;
       u363K: // global
           call _c361c(R1) args: 0, res: 0, upd: 0;
       c361d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c360M_info" {
     block_c360M_info:
         const _c360M;
         const 5;
         const 30;
 },
 _c361c() //  [R1]
         { []
         }
     {offset
       c361c: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c362D; else goto c362C;
       c362D: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c362C: // global
           _s2UUe::P64 = P64[Sp + 40];
           _s2UUi::I64 = I64[R1 + 7];
           if (_s2UUi::I64 != 0) goto c362W; else goto c363k;
       c362W: // global
           I64[Hp - 32] = sat_s2UUl_info;
           P64[Hp - 16] = _s2UUe::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UUi::I64 - 1;
           _s2UUf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c362I_info;
           R4 = _s2UUf::P64;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = P64[Sp + 32];
           Sp = Sp + 8;
           call $wf1_s2UU5_entry(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       c363k: // global
           Hp = Hp - 40;
           I64[Sp] = block_c361r_info;
           R1 = _s2UUe::P64;
           if (R1 & 7 != 0) goto u363L; else goto c361s;
       u363L: // global
           call _c361r(R1) args: 0, res: 0, upd: 0;
       c361s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c361c_info" {
     block_c361c_info:
         const _c361c;
         const 6;
         const 30;
 },
 _c362I() //  [R1, R2]
         { []
         }
     {offset
       c362I: // global
           I64[Sp] = block_c362K_info;
           R1 = R1;
           P64[Sp + 40] = R2;
           if (R1 & 7 != 0) goto u363P; else goto c362L;
       u363P: // global
           call _c362K(R1) args: 0, res: 0, upd: 0;
       c362L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c362I_info" {
     block_c362I_info:
         const _c362I;
         const 1413;
         const 30;
 },
 _c362K() //  [R1]
         { []
         }
     {offset
       c362K: // global
           I64[Sp] = block_c362P_info;
           _s2UUq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s2UUq::I64;
           if (R1 & 7 != 0) goto u363Q; else goto c362Q;
       u363Q: // global
           call _c362P(R1) args: 0, res: 0, upd: 0;
       c362Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c362K_info" {
     block_c362K_info:
         const _c362K;
         const 389;
         const 30;
 },
 _c362P() //  [R1]
         { []
         }
     {offset
       c362P: // global
           I64[Sp + 16] = block_c362U_info;
           _s2UUs::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 24] = _s2UUs::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u363R; else goto c3630;
       u363R: // global
           call _c362U(R1) args: 0, res: 0, upd: 0;
       c3630: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c362P_info" {
     block_c362P_info:
         const _c362P;
         const 901;
         const 30;
 },
 _c362U() //  [R1]
         { []
         }
     {offset
       c362U: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3636; else goto c3635;
       c3636: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3635: // global
           _s2UUo::P64 = P64[Sp + 24];
           _s2UUv::I64 = I64[Sp + 16] + I64[Sp + 8];
           if (_s2UUv::I64 == I64[R1 + 7]) goto c363j; else goto c363g;
       c363j: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = _s2UUo::P64;
           _c363i::P64 = Hp - 30;
           Hp = Hp - 16;
           R2 = _c363i::P64;
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c363g: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s2UUv::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s2UUo::P64;
           R2 = Hp - 14;
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c362U_info" {
     block_c362U_info:
         const _c362U;
         const 195;
         const 30;
 },
 _c361r() //  [R1]
         { []
         }
     {offset
       c361r: // global
           I64[Sp] = block_c361w_info;
           _s2UUB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 40] = _s2UUB::I64;
           if (R1 & 7 != 0) goto u363M; else goto c361x;
       u363M: // global
           call _c361w(R1) args: 0, res: 0, upd: 0;
       c361x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c361r_info" {
     block_c361r_info:
         const _c361r;
         const 1670;
         const 30;
 },
 _c361w() //  [R1]
         { []
         }
     {offset
       c361w: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c363o; else goto c363n;
       c363o: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c363n: // global
           _s2UUB::I64 = I64[Sp + 40];
           _s2UUD::I64 = I64[R1 + 7];
           if (_s2UUB::I64 == _s2UUD::I64) goto c363r; else goto c363q;
       c363r: // global
           Hp = Hp - 32;
           I64[Sp] = block_c361R_info;
           R1 = P64[Sp + 48];
           I64[Sp + 48] = _s2UUD::I64;
           if (R1 & 7 != 0) goto u363N; else goto c361S;
       u363N: // global
           call _c361R(R1) args: 0, res: 0, upd: 0;
       c361S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c363q: // global
           I64[Hp - 24] = sat_s2UUG_info;
           I64[Hp - 8] = _s2UUB::I64;
           I64[Hp] = _s2UUD::I64;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c361w_info" {
     block_c361w_info:
         const _c361w;
         const 1926;
         const 30;
 },
 _c361R() //  [R1]
         { []
         }
     {offset
       c361R: // global
           if (R1 & 7 == 1) goto c363t; else goto c363y;
       c363t: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c363w; else goto c363v;
       c363w: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c363v: // global
           I64[Hp - 24] = sat_s2UUJ_info;
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 48];
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c363y: // global
           I64[Sp + 32] = block_c362a_info;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.roundTo2_closure+1;
           Sp = Sp + 32;
           call GHC.List.all_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c361R_info" {
     block_c361R_info:
         const _c361R;
         const 3974;
         const 30;
 },
 _c362a() //  [R1]
         { []
         }
     {offset
       c362a: // global
           if (R1 & 7 == 1) goto c363A; else goto c363H;
       c363A: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c363D; else goto c363C;
       c363D: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c363C: // global
           I64[Hp - 24] = sat_s2UUM_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c363H: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c362a_info" {
     block_c362a_info:
         const _c362a;
         const 194;
         const 30;
 },
 GHC.Float.$wroundTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c363X: // global
           _s2UU0::P64 = R4;
           _s2UTZ::P64 = R3;
           _s2UTY::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c363Y; else goto c363Z;
       c363Z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3641; else goto c3640;
       c3641: // global
           HpAlloc = 48;
           goto c363Y;
       c363Y: // global
           R4 = _s2UU0::P64;
           R3 = _s2UTZ::P64;
           R2 = _s2UTY::P64;
           R1 = GHC.Float.$wroundTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3640: // global
           I64[Hp - 40] = b2_s2UU1_info;
           P64[Hp - 24] = _s2UTY::P64;
           I64[Hp - 16] = $wf1_s2UU5_info;
           P64[Hp - 8] = _s2UTY::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c363S_info;
           R4 = _s2UU0::P64;
           R3 = GHC.Types.True_closure+2;
           R2 = _s2UTZ::P64;
           R1 = Hp - 13;
           Sp = Sp - 8;
           call $wf1_s2UU5_entry(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wroundTo_info" {
     GHC.Float.$wroundTo_info:
         const GHC.Float.$wroundTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S2VLN_srt+616;
 },
 _c363S() //  [R1, R2]
         { []
         }
     {offset
       c363S: // global
           I64[Sp - 16] = block_c363U_info;
           _s2UUO::P64 = R1;
           R1 = R1;
           P64[Sp - 8] = R2;
           P64[Sp] = _s2UUO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u364i; else goto c363V;
       u364i: // global
           call _c363U(R1) args: 0, res: 0, upd: 0;
       c363V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c363S_info" {
     block_c363S_info:
         const _c363S;
         const 0;
         const 4294967326;
         const S2VLN_srt+624;
 },
 _c363U() //  [R1]
         { []
         }
     {offset
       c363U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3647; else goto c3646;
       c3647: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3646: // global
           _s2UUP::P64 = P64[Sp + 8];
           _s2UUS::I64 = I64[R1 + 7];
           if (_s2UUS::I64 != 0) goto u364h; else goto c364b;
       u364h: // global
           if (_s2UUS::I64 != 1) goto c364a; else goto c364g;
       c364a: // global
           Hp = Hp - 24;
           R1 = GHC.Float.roundTo1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c364g: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fRealFracFloat2_closure+1;
           P64[Hp] = _s2UUP::P64;
           R2 = Hp - 14;
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c364b: // global
           Hp = Hp - 24;
           R2 = _s2UUP::P64;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c363U_info" {
     block_c363U_info:
         const _c363U;
         const 2;
         const 4294967326;
         const S2VLN_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.631832466 UTC

[section ""data" . GHC.Float.roundTo_closure" {
     GHC.Float.roundTo_closure:
         const GHC.Float.roundTo_info;
         const 0;
 },
 GHC.Float.roundTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c366p: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c366q; else goto c366r;
       c366q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.roundTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c366r: // global
           I64[Sp - 8] = block_c366m_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Float.$wroundTo_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.roundTo_info" {
     GHC.Float.roundTo_info:
         const GHC.Float.roundTo_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S2VLN_srt+616;
 },
 _c366m() //  [R1, R2]
         { []
         }
     {offset
       c366m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c366u; else goto c366t;
       c366u: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c366t: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c366m_info" {
     block_c366m_info:
         const _c366m;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.63705554 UTC

[section ""data" . GHC.Float.maxExpt_closure" {
     GHC.Float.maxExpt_closure:
         const GHC.Types.I#_con_info;
         const 1100;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.638939523 UTC

[section ""data" . GHC.Float.maxExpt10_closure" {
     GHC.Float.maxExpt10_closure:
         const GHC.Types.I#_con_info;
         const 324;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.642057597 UTC

[section ""data" . GHC.Float.gtFloat_closure" {
     GHC.Float.gtFloat_closure:
         const GHC.Float.gtFloat_info;
 },
 GHC.Float.gtFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c366N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c366R; else goto c366S;
       c366R: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.gtFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c366S: // global
           I64[Sp - 16] = block_c366K_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3671; else goto c366L;
       u3671: // global
           call _c366K(R1) args: 0, res: 0, upd: 0;
       c366L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.gtFloat_info" {
     GHC.Float.gtFloat_info:
         const GHC.Float.gtFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c366K() //  [R1]
         { []
         }
     {offset
       c366K: // global
           I64[Sp] = block_c366Q_info;
           _s2UV4::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UV4::F32;
           if (R1 & 7 != 0) goto u3670; else goto c366U;
       u3670: // global
           call _c366Q(R1) args: 0, res: 0, upd: 0;
       c366U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c366K_info" {
     block_c366K_info:
         const _c366K;
         const 1;
         const 30;
 },
 _c366Q() //  [R1]
         { []
         }
     {offset
       c366Q: // global
           R1 = I64[(%MO_F_Gt_W32(F32[Sp + 8],
                                  F32[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c366Q_info" {
     block_c366Q_info:
         const _c366Q;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.650903072 UTC

[section ""data" . GHC.Float.geFloat_closure" {
     GHC.Float.geFloat_closure:
         const GHC.Float.geFloat_info;
 },
 GHC.Float.geFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c367r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c367v; else goto c367w;
       c367v: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.geFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c367w: // global
           I64[Sp - 16] = block_c367o_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u367F; else goto c367p;
       u367F: // global
           call _c367o(R1) args: 0, res: 0, upd: 0;
       c367p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.geFloat_info" {
     GHC.Float.geFloat_info:
         const GHC.Float.geFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c367o() //  [R1]
         { []
         }
     {offset
       c367o: // global
           I64[Sp] = block_c367u_info;
           _s2UVb::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UVb::F32;
           if (R1 & 7 != 0) goto u367E; else goto c367y;
       u367E: // global
           call _c367u(R1) args: 0, res: 0, upd: 0;
       c367y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c367o_info" {
     block_c367o_info:
         const _c367o;
         const 1;
         const 30;
 },
 _c367u() //  [R1]
         { []
         }
     {offset
       c367u: // global
           R1 = I64[(%MO_F_Ge_W32(F32[Sp + 8],
                                  F32[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c367u_info" {
     block_c367u_info:
         const _c367u;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.658950589 UTC

[section ""data" . GHC.Float.ltFloat_closure" {
     GHC.Float.ltFloat_closure:
         const GHC.Float.ltFloat_info;
 },
 GHC.Float.ltFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3685: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3689; else goto c368a;
       c3689: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.ltFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c368a: // global
           I64[Sp - 16] = block_c3682_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u368j; else goto c3683;
       u368j: // global
           call _c3682(R1) args: 0, res: 0, upd: 0;
       c3683: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ltFloat_info" {
     GHC.Float.ltFloat_info:
         const GHC.Float.ltFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3682() //  [R1]
         { []
         }
     {offset
       c3682: // global
           I64[Sp] = block_c3688_info;
           _s2UVi::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UVi::F32;
           if (R1 & 7 != 0) goto u368i; else goto c368c;
       u368i: // global
           call _c3688(R1) args: 0, res: 0, upd: 0;
       c368c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3682_info" {
     block_c3682_info:
         const _c3682;
         const 1;
         const 30;
 },
 _c3688() //  [R1]
         { []
         }
     {offset
       c3688: // global
           R1 = I64[(%MO_F_Lt_W32(F32[Sp + 8],
                                  F32[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3688_info" {
     block_c3688_info:
         const _c3688;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.667094846 UTC

[section ""data" . GHC.Float.leFloat_closure" {
     GHC.Float.leFloat_closure:
         const GHC.Float.leFloat_info;
 },
 GHC.Float.leFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c368J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c368N; else goto c368O;
       c368N: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.leFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c368O: // global
           I64[Sp - 16] = block_c368G_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u368X; else goto c368H;
       u368X: // global
           call _c368G(R1) args: 0, res: 0, upd: 0;
       c368H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.leFloat_info" {
     GHC.Float.leFloat_info:
         const GHC.Float.leFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c368G() //  [R1]
         { []
         }
     {offset
       c368G: // global
           I64[Sp] = block_c368M_info;
           _s2UVp::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UVp::F32;
           if (R1 & 7 != 0) goto u368W; else goto c368Q;
       u368W: // global
           call _c368M(R1) args: 0, res: 0, upd: 0;
       c368Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c368G_info" {
     block_c368G_info:
         const _c368G;
         const 1;
         const 30;
 },
 _c368M() //  [R1]
         { []
         }
     {offset
       c368M: // global
           R1 = I64[(%MO_F_Le_W32(F32[Sp + 8],
                                  F32[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c368M_info" {
     block_c368M_info:
         const _c368M;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.674980106 UTC

[section ""data" . GHC.Float.expFloat_closure" {
     GHC.Float.expFloat_closure:
         const GHC.Float.expFloat_info;
 },
 GHC.Float.expFloat_entry() //  [R2]
         { []
         }
     {offset
       c369n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c369v; else goto c369w;
       c369v: // global
           R2 = R2;
           R1 = GHC.Float.expFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c369w: // global
           I64[Sp - 8] = block_c369k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u369A; else goto c369l;
       u369A: // global
           call _c369k(R1) args: 0, res: 0, upd: 0;
       c369l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expFloat_info" {
     GHC.Float.expFloat_info:
         const GHC.Float.expFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c369k() //  [R1]
         { []
         }
     {offset
       c369k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c369z; else goto c369y;
       c369z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c369y: // global
           (_c369q::F32) = call MO_F32_Exp(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c369q::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c369k_info" {
     block_c369k_info:
         const _c369k;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.682892912 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$clog1pexp_closure" {
     GHC.Float.$fFloatingFloat_$clog1pexp_closure:
         const GHC.Float.$fFloatingFloat_$clog1pexp_info;
 },
 GHC.Float.$fFloatingFloat_$clog1pexp_entry() //  [R2]
         { []
         }
     {offset
       c369S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c369T; else goto c369U;
       c369T: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$clog1pexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c369U: // global
           I64[Sp - 8] = block_c369P_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36aw; else goto c369Q;
       u36aw: // global
           call _c369P(R1) args: 0, res: 0, upd: 0;
       c369Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$clog1pexp_info" {
     GHC.Float.$fFloatingFloat_$clog1pexp_info:
         const GHC.Float.$fFloatingFloat_$clog1pexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c369P() //  [R1]
         { []
         }
     {offset
       c369P: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c369Z; else goto c369Y;
       c369Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c369Y: // global
           _s2UVz::F32 = F32[R1 + 7];
           if (%MO_F_Le_W32(_s2UVz::F32,
                            18.0 :: W32)) goto c36av; else goto c36am;
       c36av: // global
           (_c36ao::F32) = call MO_F32_Exp(_s2UVz::F32);
           (_s2UVJ::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(_c36ao::F32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2UVJ::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36am: // global
           if (%MO_F_Le_W32(_s2UVz::F32,
                            100.0 :: W32)) goto c36ak; else goto c36a6;
       c36ak: // global
           (_c36ac::F32) = call MO_F32_Exp(%MO_F_Neg_W32(_s2UVz::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Add_W32(_s2UVz::F32, _c36ac::F32);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36a6: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c369P_info" {
     block_c369P_info:
         const _c369P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.69022014 UTC

[section ""data" . GHC.Float.logFloat_closure" {
     GHC.Float.logFloat_closure:
         const GHC.Float.logFloat_info;
 },
 GHC.Float.logFloat_entry() //  [R2]
         { []
         }
     {offset
       c36aZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36b7; else goto c36b8;
       c36b7: // global
           R2 = R2;
           R1 = GHC.Float.logFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36b8: // global
           I64[Sp - 8] = block_c36aW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36bc; else goto c36aX;
       u36bc: // global
           call _c36aW(R1) args: 0, res: 0, upd: 0;
       c36aX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.logFloat_info" {
     GHC.Float.logFloat_info:
         const GHC.Float.logFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36aW() //  [R1]
         { []
         }
     {offset
       c36aW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36bb; else goto c36ba;
       c36bb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36ba: // global
           (_c36b2::F32) = call MO_F32_Log(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36b2::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36aW_info" {
     block_c36aW_info:
         const _c36aW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.697117653 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$clogBase_closure" {
     GHC.Float.$fFloatingFloat_$clogBase_closure:
         const GHC.Float.$fFloatingFloat_$clogBase_info;
 },
 GHC.Float.$fFloatingFloat_$clogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       c36bu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36bO; else goto c36bP;
       c36bO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$clogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36bP: // global
           I64[Sp - 16] = block_c36br_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36bV; else goto c36bs;
       u36bV: // global
           call _c36br(R1) args: 0, res: 0, upd: 0;
       c36bs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$clogBase_info" {
     GHC.Float.$fFloatingFloat_$clogBase_info:
         const GHC.Float.$fFloatingFloat_$clogBase_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36br() //  [R1]
         { []
         }
     {offset
       c36br: // global
           _s2UVO::P64 = P64[Sp + 8];
           (_c36bx::F32) = call MO_F32_Log(F32[R1 + 7]);
           I64[Sp] = block_c36bB_info;
           R1 = _s2UVO::P64;
           F32[Sp + 8] = _c36bx::F32;
           if (R1 & 7 != 0) goto u36bU; else goto c36bC;
       u36bU: // global
           call _c36bB(R1) args: 0, res: 0, upd: 0;
       c36bC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36br_info" {
     block_c36br_info:
         const _c36br;
         const 1;
         const 30;
 },
 _c36bB() //  [R1]
         { []
         }
     {offset
       c36bB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36bT; else goto c36bS;
       c36bT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36bS: // global
           _s2UVS::F32 = F32[Sp + 8];
           (_c36bG::F32) = call MO_F32_Log(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(_s2UVS::F32, _c36bG::F32);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36bB_info" {
     block_c36bB_info:
         const _c36bB;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.707965546 UTC

[section ""data" . GHC.Float.sqrtFloat_closure" {
     GHC.Float.sqrtFloat_closure:
         const GHC.Float.sqrtFloat_info;
 },
 GHC.Float.sqrtFloat_entry() //  [R2]
         { []
         }
     {offset
       c36cj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36cr; else goto c36cs;
       c36cr: // global
           R2 = R2;
           R1 = GHC.Float.sqrtFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36cs: // global
           I64[Sp - 8] = block_c36cg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36cw; else goto c36ch;
       u36cw: // global
           call _c36cg(R1) args: 0, res: 0, upd: 0;
       c36ch: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sqrtFloat_info" {
     GHC.Float.sqrtFloat_info:
         const GHC.Float.sqrtFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36cg() //  [R1]
         { []
         }
     {offset
       c36cg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36cv; else goto c36cu;
       c36cv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36cu: // global
           (_c36cm::F32) = call MO_F32_Sqrt(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36cm::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36cg_info" {
     block_c36cg_info:
         const _c36cg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.717231588 UTC

[section ""data" . GHC.Float.sinFloat_closure" {
     GHC.Float.sinFloat_closure:
         const GHC.Float.sinFloat_info;
 },
 GHC.Float.sinFloat_entry() //  [R2]
         { []
         }
     {offset
       c36cP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36cX; else goto c36cY;
       c36cX: // global
           R2 = R2;
           R1 = GHC.Float.sinFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36cY: // global
           I64[Sp - 8] = block_c36cM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36d2; else goto c36cN;
       u36d2: // global
           call _c36cM(R1) args: 0, res: 0, upd: 0;
       c36cN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinFloat_info" {
     GHC.Float.sinFloat_info:
         const GHC.Float.sinFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36cM() //  [R1]
         { []
         }
     {offset
       c36cM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36d1; else goto c36d0;
       c36d1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36d0: // global
           (_c36cS::F32) = call MO_F32_Sin(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36cS::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36cM_info" {
     block_c36cM_info:
         const _c36cM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.72570927 UTC

[section ""data" . GHC.Float.cosFloat_closure" {
     GHC.Float.cosFloat_closure:
         const GHC.Float.cosFloat_info;
 },
 GHC.Float.cosFloat_entry() //  [R2]
         { []
         }
     {offset
       c36dk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36ds; else goto c36dt;
       c36ds: // global
           R2 = R2;
           R1 = GHC.Float.cosFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36dt: // global
           I64[Sp - 8] = block_c36dh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36dx; else goto c36di;
       u36dx: // global
           call _c36dh(R1) args: 0, res: 0, upd: 0;
       c36di: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.cosFloat_info" {
     GHC.Float.cosFloat_info:
         const GHC.Float.cosFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36dh() //  [R1]
         { []
         }
     {offset
       c36dh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36dw; else goto c36dv;
       c36dw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36dv: // global
           (_c36dn::F32) = call MO_F32_Cos(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36dn::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36dh_info" {
     block_c36dh_info:
         const _c36dh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.734204749 UTC

[section ""data" . GHC.Float.tanFloat_closure" {
     GHC.Float.tanFloat_closure:
         const GHC.Float.tanFloat_info;
 },
 GHC.Float.tanFloat_entry() //  [R2]
         { []
         }
     {offset
       c36dP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36dX; else goto c36dY;
       c36dX: // global
           R2 = R2;
           R1 = GHC.Float.tanFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36dY: // global
           I64[Sp - 8] = block_c36dM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36e2; else goto c36dN;
       u36e2: // global
           call _c36dM(R1) args: 0, res: 0, upd: 0;
       c36dN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanFloat_info" {
     GHC.Float.tanFloat_info:
         const GHC.Float.tanFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36dM() //  [R1]
         { []
         }
     {offset
       c36dM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36e1; else goto c36e0;
       c36e1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36e0: // global
           (_c36dS::F32) = call MO_F32_Tan(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36dS::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36dM_info" {
     block_c36dM_info:
         const _c36dM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.741911209 UTC

[section ""data" . GHC.Float.asinFloat_closure" {
     GHC.Float.asinFloat_closure:
         const GHC.Float.asinFloat_info;
 },
 GHC.Float.asinFloat_entry() //  [R2]
         { []
         }
     {offset
       c36ek: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36es; else goto c36et;
       c36es: // global
           R2 = R2;
           R1 = GHC.Float.asinFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36et: // global
           I64[Sp - 8] = block_c36eh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36ex; else goto c36ei;
       u36ex: // global
           call _c36eh(R1) args: 0, res: 0, upd: 0;
       c36ei: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.asinFloat_info" {
     GHC.Float.asinFloat_info:
         const GHC.Float.asinFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36eh() //  [R1]
         { []
         }
     {offset
       c36eh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36ew; else goto c36ev;
       c36ew: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36ev: // global
           (_c36en::F32) = call MO_F32_Asin(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36en::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36eh_info" {
     block_c36eh_info:
         const _c36eh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.748155825 UTC

[section ""data" . GHC.Float.acosFloat_closure" {
     GHC.Float.acosFloat_closure:
         const GHC.Float.acosFloat_info;
 },
 GHC.Float.acosFloat_entry() //  [R2]
         { []
         }
     {offset
       c36eP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36eX; else goto c36eY;
       c36eX: // global
           R2 = R2;
           R1 = GHC.Float.acosFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36eY: // global
           I64[Sp - 8] = block_c36eM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36f2; else goto c36eN;
       u36f2: // global
           call _c36eM(R1) args: 0, res: 0, upd: 0;
       c36eN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.acosFloat_info" {
     GHC.Float.acosFloat_info:
         const GHC.Float.acosFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36eM() //  [R1]
         { []
         }
     {offset
       c36eM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36f1; else goto c36f0;
       c36f1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36f0: // global
           (_c36eS::F32) = call MO_F32_Acos(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36eS::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36eM_info" {
     block_c36eM_info:
         const _c36eM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.755160038 UTC

[section ""data" . GHC.Float.atanFloat_closure" {
     GHC.Float.atanFloat_closure:
         const GHC.Float.atanFloat_info;
 },
 GHC.Float.atanFloat_entry() //  [R2]
         { []
         }
     {offset
       c36fk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36fs; else goto c36ft;
       c36fs: // global
           R2 = R2;
           R1 = GHC.Float.atanFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36ft: // global
           I64[Sp - 8] = block_c36fh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36fx; else goto c36fi;
       u36fx: // global
           call _c36fh(R1) args: 0, res: 0, upd: 0;
       c36fi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atanFloat_info" {
     GHC.Float.atanFloat_info:
         const GHC.Float.atanFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36fh() //  [R1]
         { []
         }
     {offset
       c36fh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36fw; else goto c36fv;
       c36fw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36fv: // global
           (_c36fn::F32) = call MO_F32_Atan(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36fn::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36fh_info" {
     block_c36fh_info:
         const _c36fh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.761429358 UTC

[section ""data" . GHC.Float.sinhFloat_closure" {
     GHC.Float.sinhFloat_closure:
         const GHC.Float.sinhFloat_info;
 },
 GHC.Float.sinhFloat_entry() //  [R2]
         { []
         }
     {offset
       c36fP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36fX; else goto c36fY;
       c36fX: // global
           R2 = R2;
           R1 = GHC.Float.sinhFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36fY: // global
           I64[Sp - 8] = block_c36fM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36g2; else goto c36fN;
       u36g2: // global
           call _c36fM(R1) args: 0, res: 0, upd: 0;
       c36fN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinhFloat_info" {
     GHC.Float.sinhFloat_info:
         const GHC.Float.sinhFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36fM() //  [R1]
         { []
         }
     {offset
       c36fM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36g1; else goto c36g0;
       c36g1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36g0: // global
           (_c36fS::F32) = call MO_F32_Sinh(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36fS::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36fM_info" {
     block_c36fM_info:
         const _c36fM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.767571862 UTC

[section ""data" . GHC.Float.coshFloat_closure" {
     GHC.Float.coshFloat_closure:
         const GHC.Float.coshFloat_info;
 },
 GHC.Float.coshFloat_entry() //  [R2]
         { []
         }
     {offset
       c36gk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36gs; else goto c36gt;
       c36gs: // global
           R2 = R2;
           R1 = GHC.Float.coshFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36gt: // global
           I64[Sp - 8] = block_c36gh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36gx; else goto c36gi;
       u36gx: // global
           call _c36gh(R1) args: 0, res: 0, upd: 0;
       c36gi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.coshFloat_info" {
     GHC.Float.coshFloat_info:
         const GHC.Float.coshFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36gh() //  [R1]
         { []
         }
     {offset
       c36gh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36gw; else goto c36gv;
       c36gw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36gv: // global
           (_c36gn::F32) = call MO_F32_Cosh(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36gn::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36gh_info" {
     block_c36gh_info:
         const _c36gh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.774031834 UTC

[section ""data" . GHC.Float.tanhFloat_closure" {
     GHC.Float.tanhFloat_closure:
         const GHC.Float.tanhFloat_info;
 },
 GHC.Float.tanhFloat_entry() //  [R2]
         { []
         }
     {offset
       c36gP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36gX; else goto c36gY;
       c36gX: // global
           R2 = R2;
           R1 = GHC.Float.tanhFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36gY: // global
           I64[Sp - 8] = block_c36gM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36h2; else goto c36gN;
       u36h2: // global
           call _c36gM(R1) args: 0, res: 0, upd: 0;
       c36gN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanhFloat_info" {
     GHC.Float.tanhFloat_info:
         const GHC.Float.tanhFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36gM() //  [R1]
         { []
         }
     {offset
       c36gM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36h1; else goto c36h0;
       c36h1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36h0: // global
           (_c36gS::F32) = call MO_F32_Tanh(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36gS::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36gM_info" {
     block_c36gM_info:
         const _c36gM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.783837676 UTC

[section ""data" . GHC.Float.powerFloat_closure" {
     GHC.Float.powerFloat_closure:
         const GHC.Float.powerFloat_info;
 },
 GHC.Float.powerFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c36hk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36hy; else goto c36hz;
       c36hy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.powerFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36hz: // global
           I64[Sp - 16] = block_c36hh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36hF; else goto c36hi;
       u36hF: // global
           call _c36hh(R1) args: 0, res: 0, upd: 0;
       c36hi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.powerFloat_info" {
     GHC.Float.powerFloat_info:
         const GHC.Float.powerFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36hh() //  [R1]
         { []
         }
     {offset
       c36hh: // global
           I64[Sp] = block_c36hn_info;
           _s2UWE::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s2UWE::F32;
           if (R1 & 7 != 0) goto u36hE; else goto c36ho;
       u36hE: // global
           call _c36hn(R1) args: 0, res: 0, upd: 0;
       c36ho: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36hh_info" {
     block_c36hh_info:
         const _c36hh;
         const 1;
         const 30;
 },
 _c36hn() //  [R1]
         { []
         }
     {offset
       c36hn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36hD; else goto c36hC;
       c36hD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36hC: // global
           (_c36hs::F32) = call MO_F32_Pwr(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36hs::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36hn_info" {
     block_c36hn_info:
         const _c36hn;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.795684263 UTC

[section ""data" . GHC.Float.gtDouble_closure" {
     GHC.Float.gtDouble_closure:
         const GHC.Float.gtDouble_info;
 },
 GHC.Float.gtDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c36i1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36i5; else goto c36i6;
       c36i5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.gtDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36i6: // global
           I64[Sp - 16] = block_c36hY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36if; else goto c36hZ;
       u36if: // global
           call _c36hY(R1) args: 0, res: 0, upd: 0;
       c36hZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.gtDouble_info" {
     GHC.Float.gtDouble_info:
         const GHC.Float.gtDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36hY() //  [R1]
         { []
         }
     {offset
       c36hY: // global
           I64[Sp] = block_c36i4_info;
           _s2UWL::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UWL::F64;
           if (R1 & 7 != 0) goto u36ie; else goto c36i8;
       u36ie: // global
           call _c36i4(R1) args: 0, res: 0, upd: 0;
       c36i8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36hY_info" {
     block_c36hY_info:
         const _c36hY;
         const 1;
         const 30;
 },
 _c36i4() //  [R1]
         { []
         }
     {offset
       c36i4: // global
           R1 = I64[(%MO_F_Gt_W64(F64[Sp + 8],
                                  F64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36i4_info" {
     block_c36i4_info:
         const _c36i4;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.805899654 UTC

[section ""data" . GHC.Float.geDouble_closure" {
     GHC.Float.geDouble_closure:
         const GHC.Float.geDouble_info;
 },
 GHC.Float.geDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c36iF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36iJ; else goto c36iK;
       c36iJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.geDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36iK: // global
           I64[Sp - 16] = block_c36iC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36iT; else goto c36iD;
       u36iT: // global
           call _c36iC(R1) args: 0, res: 0, upd: 0;
       c36iD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.geDouble_info" {
     GHC.Float.geDouble_info:
         const GHC.Float.geDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36iC() //  [R1]
         { []
         }
     {offset
       c36iC: // global
           I64[Sp] = block_c36iI_info;
           _s2UWS::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UWS::F64;
           if (R1 & 7 != 0) goto u36iS; else goto c36iM;
       u36iS: // global
           call _c36iI(R1) args: 0, res: 0, upd: 0;
       c36iM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36iC_info" {
     block_c36iC_info:
         const _c36iC;
         const 1;
         const 30;
 },
 _c36iI() //  [R1]
         { []
         }
     {offset
       c36iI: // global
           R1 = I64[(%MO_F_Ge_W64(F64[Sp + 8],
                                  F64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36iI_info" {
     block_c36iI_info:
         const _c36iI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.81659819 UTC

[section ""data" . GHC.Float.ltDouble_closure" {
     GHC.Float.ltDouble_closure:
         const GHC.Float.ltDouble_info;
 },
 GHC.Float.ltDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c36jj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36jn; else goto c36jo;
       c36jn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.ltDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36jo: // global
           I64[Sp - 16] = block_c36jg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36jx; else goto c36jh;
       u36jx: // global
           call _c36jg(R1) args: 0, res: 0, upd: 0;
       c36jh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ltDouble_info" {
     GHC.Float.ltDouble_info:
         const GHC.Float.ltDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36jg() //  [R1]
         { []
         }
     {offset
       c36jg: // global
           I64[Sp] = block_c36jm_info;
           _s2UWZ::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UWZ::F64;
           if (R1 & 7 != 0) goto u36jw; else goto c36jq;
       u36jw: // global
           call _c36jm(R1) args: 0, res: 0, upd: 0;
       c36jq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36jg_info" {
     block_c36jg_info:
         const _c36jg;
         const 1;
         const 30;
 },
 _c36jm() //  [R1]
         { []
         }
     {offset
       c36jm: // global
           R1 = I64[(%MO_F_Lt_W64(F64[Sp + 8],
                                  F64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36jm_info" {
     block_c36jm_info:
         const _c36jm;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.828153232 UTC

[section ""data" . GHC.Float.leDouble_closure" {
     GHC.Float.leDouble_closure:
         const GHC.Float.leDouble_info;
 },
 GHC.Float.leDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c36jX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36k1; else goto c36k2;
       c36k1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.leDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36k2: // global
           I64[Sp - 16] = block_c36jU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36kb; else goto c36jV;
       u36kb: // global
           call _c36jU(R1) args: 0, res: 0, upd: 0;
       c36jV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.leDouble_info" {
     GHC.Float.leDouble_info:
         const GHC.Float.leDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36jU() //  [R1]
         { []
         }
     {offset
       c36jU: // global
           I64[Sp] = block_c36k0_info;
           _s2UX6::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UX6::F64;
           if (R1 & 7 != 0) goto u36ka; else goto c36k4;
       u36ka: // global
           call _c36k0(R1) args: 0, res: 0, upd: 0;
       c36k4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36jU_info" {
     block_c36jU_info:
         const _c36jU;
         const 1;
         const 30;
 },
 _c36k0() //  [R1]
         { []
         }
     {offset
       c36k0: // global
           R1 = I64[(%MO_F_Le_W64(F64[Sp + 8],
                                  F64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36k0_info" {
     block_c36k0_info:
         const _c36k0;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.835969029 UTC

[section ""data" . GHC.Float.double2Float_closure" {
     GHC.Float.double2Float_closure:
         const GHC.Float.double2Float_info;
 },
 GHC.Float.double2Float_entry() //  [R2]
         { []
         }
     {offset
       c36kB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36kI; else goto c36kJ;
       c36kI: // global
           R2 = R2;
           R1 = GHC.Float.double2Float_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36kJ: // global
           I64[Sp - 8] = block_c36ky_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36kN; else goto c36kz;
       u36kN: // global
           call _c36ky(R1) args: 0, res: 0, upd: 0;
       c36kz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.double2Float_info" {
     GHC.Float.double2Float_info:
         const GHC.Float.double2Float_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36ky() //  [R1]
         { []
         }
     {offset
       c36ky: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36kM; else goto c36kL;
       c36kM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36kL: // global
           _s2UXd::F32 = %MO_FF_Conv_W64_W32(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2UXd::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36ky_info" {
     block_c36ky_info:
         const _c36ky;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.84255775 UTC

[section ""data" . GHC.Float.float2Double_closure" {
     GHC.Float.float2Double_closure:
         const GHC.Float.float2Double_info;
 },
 GHC.Float.float2Double_entry() //  [R2]
         { []
         }
     {offset
       c36l6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36ld; else goto c36le;
       c36ld: // global
           R2 = R2;
           R1 = GHC.Float.float2Double_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36le: // global
           I64[Sp - 8] = block_c36l3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36li; else goto c36l4;
       u36li: // global
           call _c36l3(R1) args: 0, res: 0, upd: 0;
       c36l4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.float2Double_info" {
     GHC.Float.float2Double_info:
         const GHC.Float.float2Double_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36l3() //  [R1]
         { []
         }
     {offset
       c36l3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36lh; else goto c36lg;
       c36lh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36lg: // global
           _s2UXh::F64 = %MO_FF_Conv_W32_W64(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2UXh::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36l3_info" {
     block_c36l3_info:
         const _c36l3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.848720812 UTC

[section ""data" . GHC.Float.expDouble_closure" {
     GHC.Float.expDouble_closure:
         const GHC.Float.expDouble_info;
 },
 GHC.Float.expDouble_entry() //  [R2]
         { []
         }
     {offset
       c36lB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36lJ; else goto c36lK;
       c36lJ: // global
           R2 = R2;
           R1 = GHC.Float.expDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36lK: // global
           I64[Sp - 8] = block_c36ly_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36lO; else goto c36lz;
       u36lO: // global
           call _c36ly(R1) args: 0, res: 0, upd: 0;
       c36lz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expDouble_info" {
     GHC.Float.expDouble_info:
         const GHC.Float.expDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36ly() //  [R1]
         { []
         }
     {offset
       c36ly: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36lN; else goto c36lM;
       c36lN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36lM: // global
           (_c36lE::F64) = call MO_F64_Exp(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36lE::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36ly_info" {
     block_c36ly_info:
         const _c36ly;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.856141269 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$clog1pexp_closure" {
     GHC.Float.$fFloatingDouble_$clog1pexp_closure:
         const GHC.Float.$fFloatingDouble_$clog1pexp_info;
 },
 GHC.Float.$fFloatingDouble_$clog1pexp_entry() //  [R2]
         { []
         }
     {offset
       c36m6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36m7; else goto c36m8;
       c36m7: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$clog1pexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36m8: // global
           I64[Sp - 8] = block_c36m3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36mK; else goto c36m4;
       u36mK: // global
           call _c36m3(R1) args: 0, res: 0, upd: 0;
       c36m4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$clog1pexp_info" {
     GHC.Float.$fFloatingDouble_$clog1pexp_info:
         const GHC.Float.$fFloatingDouble_$clog1pexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36m3() //  [R1]
         { []
         }
     {offset
       c36m3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36md; else goto c36mc;
       c36md: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36mc: // global
           _s2UXo::F64 = F64[R1 + 7];
           if (%MO_F_Le_W64(_s2UXo::F64,
                            18.0 :: W64)) goto c36mJ; else goto c36mA;
       c36mJ: // global
           (_c36mC::F64) = call MO_F64_Exp(_s2UXo::F64);
           (_s2UXy::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(_c36mC::F64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2UXy::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36mA: // global
           if (%MO_F_Le_W64(_s2UXo::F64,
                            100.0 :: W64)) goto c36my; else goto c36mk;
       c36my: // global
           (_c36mq::F64) = call MO_F64_Exp(%MO_F_Neg_W64(_s2UXo::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Add_W64(_s2UXo::F64, _c36mq::F64);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36mk: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36m3_info" {
     block_c36m3_info:
         const _c36m3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.864131068 UTC

[section ""data" . GHC.Float.logDouble_closure" {
     GHC.Float.logDouble_closure:
         const GHC.Float.logDouble_info;
 },
 GHC.Float.logDouble_entry() //  [R2]
         { []
         }
     {offset
       c36nd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36nl; else goto c36nm;
       c36nl: // global
           R2 = R2;
           R1 = GHC.Float.logDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36nm: // global
           I64[Sp - 8] = block_c36na_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36nq; else goto c36nb;
       u36nq: // global
           call _c36na(R1) args: 0, res: 0, upd: 0;
       c36nb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.logDouble_info" {
     GHC.Float.logDouble_info:
         const GHC.Float.logDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36na() //  [R1]
         { []
         }
     {offset
       c36na: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36np; else goto c36no;
       c36np: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36no: // global
           (_c36ng::F64) = call MO_F64_Log(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36ng::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36na_info" {
     block_c36na_info:
         const _c36na;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.870822533 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$clogBase_closure" {
     GHC.Float.$fFloatingDouble_$clogBase_closure:
         const GHC.Float.$fFloatingDouble_$clogBase_info;
 },
 GHC.Float.$fFloatingDouble_$clogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       c36nI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36o2; else goto c36o3;
       c36o2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$clogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36o3: // global
           I64[Sp - 16] = block_c36nF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36o9; else goto c36nG;
       u36o9: // global
           call _c36nF(R1) args: 0, res: 0, upd: 0;
       c36nG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$clogBase_info" {
     GHC.Float.$fFloatingDouble_$clogBase_info:
         const GHC.Float.$fFloatingDouble_$clogBase_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36nF() //  [R1]
         { []
         }
     {offset
       c36nF: // global
           _s2UXD::P64 = P64[Sp + 8];
           (_c36nL::F64) = call MO_F64_Log(F64[R1 + 7]);
           I64[Sp] = block_c36nP_info;
           R1 = _s2UXD::P64;
           F64[Sp + 8] = _c36nL::F64;
           if (R1 & 7 != 0) goto u36o8; else goto c36nQ;
       u36o8: // global
           call _c36nP(R1) args: 0, res: 0, upd: 0;
       c36nQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36nF_info" {
     block_c36nF_info:
         const _c36nF;
         const 1;
         const 30;
 },
 _c36nP() //  [R1]
         { []
         }
     {offset
       c36nP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36o7; else goto c36o6;
       c36o7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36o6: // global
           _s2UXH::F64 = F64[Sp + 8];
           (_c36nU::F64) = call MO_F64_Log(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(_s2UXH::F64, _c36nU::F64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36nP_info" {
     block_c36nP_info:
         const _c36nP;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.879088752 UTC

[section ""data" . GHC.Float.sqrtDouble_closure" {
     GHC.Float.sqrtDouble_closure:
         const GHC.Float.sqrtDouble_info;
 },
 GHC.Float.sqrtDouble_entry() //  [R2]
         { []
         }
     {offset
       c36ox: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36oF; else goto c36oG;
       c36oF: // global
           R2 = R2;
           R1 = GHC.Float.sqrtDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36oG: // global
           I64[Sp - 8] = block_c36ou_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36oK; else goto c36ov;
       u36oK: // global
           call _c36ou(R1) args: 0, res: 0, upd: 0;
       c36ov: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sqrtDouble_info" {
     GHC.Float.sqrtDouble_info:
         const GHC.Float.sqrtDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36ou() //  [R1]
         { []
         }
     {offset
       c36ou: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36oJ; else goto c36oI;
       c36oJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36oI: // global
           (_c36oA::F64) = call MO_F64_Sqrt(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36oA::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36ou_info" {
     block_c36ou_info:
         const _c36ou;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.885644117 UTC

[section ""data" . GHC.Float.sinDouble_closure" {
     GHC.Float.sinDouble_closure:
         const GHC.Float.sinDouble_info;
 },
 GHC.Float.sinDouble_entry() //  [R2]
         { []
         }
     {offset
       c36p3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36pb; else goto c36pc;
       c36pb: // global
           R2 = R2;
           R1 = GHC.Float.sinDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36pc: // global
           I64[Sp - 8] = block_c36p0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36pg; else goto c36p1;
       u36pg: // global
           call _c36p0(R1) args: 0, res: 0, upd: 0;
       c36p1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinDouble_info" {
     GHC.Float.sinDouble_info:
         const GHC.Float.sinDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36p0() //  [R1]
         { []
         }
     {offset
       c36p0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36pf; else goto c36pe;
       c36pf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36pe: // global
           (_c36p6::F64) = call MO_F64_Sin(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36p6::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36p0_info" {
     block_c36p0_info:
         const _c36p0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.892438177 UTC

[section ""data" . GHC.Float.cosDouble_closure" {
     GHC.Float.cosDouble_closure:
         const GHC.Float.cosDouble_info;
 },
 GHC.Float.cosDouble_entry() //  [R2]
         { []
         }
     {offset
       c36py: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36pG; else goto c36pH;
       c36pG: // global
           R2 = R2;
           R1 = GHC.Float.cosDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36pH: // global
           I64[Sp - 8] = block_c36pv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36pL; else goto c36pw;
       u36pL: // global
           call _c36pv(R1) args: 0, res: 0, upd: 0;
       c36pw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.cosDouble_info" {
     GHC.Float.cosDouble_info:
         const GHC.Float.cosDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36pv() //  [R1]
         { []
         }
     {offset
       c36pv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36pK; else goto c36pJ;
       c36pK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36pJ: // global
           (_c36pB::F64) = call MO_F64_Cos(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36pB::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36pv_info" {
     block_c36pv_info:
         const _c36pv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.899069016 UTC

[section ""data" . GHC.Float.tanDouble_closure" {
     GHC.Float.tanDouble_closure:
         const GHC.Float.tanDouble_info;
 },
 GHC.Float.tanDouble_entry() //  [R2]
         { []
         }
     {offset
       c36q3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36qb; else goto c36qc;
       c36qb: // global
           R2 = R2;
           R1 = GHC.Float.tanDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36qc: // global
           I64[Sp - 8] = block_c36q0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36qg; else goto c36q1;
       u36qg: // global
           call _c36q0(R1) args: 0, res: 0, upd: 0;
       c36q1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanDouble_info" {
     GHC.Float.tanDouble_info:
         const GHC.Float.tanDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36q0() //  [R1]
         { []
         }
     {offset
       c36q0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36qf; else goto c36qe;
       c36qf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36qe: // global
           (_c36q6::F64) = call MO_F64_Tan(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36q6::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36q0_info" {
     block_c36q0_info:
         const _c36q0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.905806663 UTC

[section ""data" . GHC.Float.asinDouble_closure" {
     GHC.Float.asinDouble_closure:
         const GHC.Float.asinDouble_info;
 },
 GHC.Float.asinDouble_entry() //  [R2]
         { []
         }
     {offset
       c36qy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36qG; else goto c36qH;
       c36qG: // global
           R2 = R2;
           R1 = GHC.Float.asinDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36qH: // global
           I64[Sp - 8] = block_c36qv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36qL; else goto c36qw;
       u36qL: // global
           call _c36qv(R1) args: 0, res: 0, upd: 0;
       c36qw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.asinDouble_info" {
     GHC.Float.asinDouble_info:
         const GHC.Float.asinDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36qv() //  [R1]
         { []
         }
     {offset
       c36qv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36qK; else goto c36qJ;
       c36qK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36qJ: // global
           (_c36qB::F64) = call MO_F64_Asin(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36qB::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36qv_info" {
     block_c36qv_info:
         const _c36qv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.912348555 UTC

[section ""data" . GHC.Float.acosDouble_closure" {
     GHC.Float.acosDouble_closure:
         const GHC.Float.acosDouble_info;
 },
 GHC.Float.acosDouble_entry() //  [R2]
         { []
         }
     {offset
       c36r3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36rb; else goto c36rc;
       c36rb: // global
           R2 = R2;
           R1 = GHC.Float.acosDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36rc: // global
           I64[Sp - 8] = block_c36r0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36rg; else goto c36r1;
       u36rg: // global
           call _c36r0(R1) args: 0, res: 0, upd: 0;
       c36r1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.acosDouble_info" {
     GHC.Float.acosDouble_info:
         const GHC.Float.acosDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36r0() //  [R1]
         { []
         }
     {offset
       c36r0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36rf; else goto c36re;
       c36rf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36re: // global
           (_c36r6::F64) = call MO_F64_Acos(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36r6::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36r0_info" {
     block_c36r0_info:
         const _c36r0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.918757349 UTC

[section ""data" . GHC.Float.atanDouble_closure" {
     GHC.Float.atanDouble_closure:
         const GHC.Float.atanDouble_info;
 },
 GHC.Float.atanDouble_entry() //  [R2]
         { []
         }
     {offset
       c36ry: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36rG; else goto c36rH;
       c36rG: // global
           R2 = R2;
           R1 = GHC.Float.atanDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36rH: // global
           I64[Sp - 8] = block_c36rv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36rL; else goto c36rw;
       u36rL: // global
           call _c36rv(R1) args: 0, res: 0, upd: 0;
       c36rw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atanDouble_info" {
     GHC.Float.atanDouble_info:
         const GHC.Float.atanDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36rv() //  [R1]
         { []
         }
     {offset
       c36rv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36rK; else goto c36rJ;
       c36rK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36rJ: // global
           (_c36rB::F64) = call MO_F64_Atan(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36rB::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36rv_info" {
     block_c36rv_info:
         const _c36rv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.926017956 UTC

[section ""data" . GHC.Float.sinhDouble_closure" {
     GHC.Float.sinhDouble_closure:
         const GHC.Float.sinhDouble_info;
 },
 GHC.Float.sinhDouble_entry() //  [R2]
         { []
         }
     {offset
       c36s3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36sb; else goto c36sc;
       c36sb: // global
           R2 = R2;
           R1 = GHC.Float.sinhDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36sc: // global
           I64[Sp - 8] = block_c36s0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36sg; else goto c36s1;
       u36sg: // global
           call _c36s0(R1) args: 0, res: 0, upd: 0;
       c36s1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinhDouble_info" {
     GHC.Float.sinhDouble_info:
         const GHC.Float.sinhDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36s0() //  [R1]
         { []
         }
     {offset
       c36s0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36sf; else goto c36se;
       c36sf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36se: // global
           (_c36s6::F64) = call MO_F64_Sinh(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36s6::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36s0_info" {
     block_c36s0_info:
         const _c36s0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.932330674 UTC

[section ""data" . GHC.Float.coshDouble_closure" {
     GHC.Float.coshDouble_closure:
         const GHC.Float.coshDouble_info;
 },
 GHC.Float.coshDouble_entry() //  [R2]
         { []
         }
     {offset
       c36sy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36sG; else goto c36sH;
       c36sG: // global
           R2 = R2;
           R1 = GHC.Float.coshDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36sH: // global
           I64[Sp - 8] = block_c36sv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36sL; else goto c36sw;
       u36sL: // global
           call _c36sv(R1) args: 0, res: 0, upd: 0;
       c36sw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.coshDouble_info" {
     GHC.Float.coshDouble_info:
         const GHC.Float.coshDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36sv() //  [R1]
         { []
         }
     {offset
       c36sv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36sK; else goto c36sJ;
       c36sK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36sJ: // global
           (_c36sB::F64) = call MO_F64_Cosh(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36sB::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36sv_info" {
     block_c36sv_info:
         const _c36sv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.93883394 UTC

[section ""data" . GHC.Float.tanhDouble_closure" {
     GHC.Float.tanhDouble_closure:
         const GHC.Float.tanhDouble_info;
 },
 GHC.Float.tanhDouble_entry() //  [R2]
         { []
         }
     {offset
       c36t3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36tb; else goto c36tc;
       c36tb: // global
           R2 = R2;
           R1 = GHC.Float.tanhDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36tc: // global
           I64[Sp - 8] = block_c36t0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36tg; else goto c36t1;
       u36tg: // global
           call _c36t0(R1) args: 0, res: 0, upd: 0;
       c36t1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanhDouble_info" {
     GHC.Float.tanhDouble_info:
         const GHC.Float.tanhDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36t0() //  [R1]
         { []
         }
     {offset
       c36t0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36tf; else goto c36te;
       c36tf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36te: // global
           (_c36t6::F64) = call MO_F64_Tanh(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36t6::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36t0_info" {
     block_c36t0_info:
         const _c36t0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.945334183 UTC

[section ""data" . GHC.Float.powerDouble_closure" {
     GHC.Float.powerDouble_closure:
         const GHC.Float.powerDouble_info;
 },
 GHC.Float.powerDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c36ty: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36tM; else goto c36tN;
       c36tM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.powerDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36tN: // global
           I64[Sp - 16] = block_c36tv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36tT; else goto c36tw;
       u36tT: // global
           call _c36tv(R1) args: 0, res: 0, upd: 0;
       c36tw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.powerDouble_info" {
     GHC.Float.powerDouble_info:
         const GHC.Float.powerDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36tv() //  [R1]
         { []
         }
     {offset
       c36tv: // global
           I64[Sp] = block_c36tB_info;
           _s2UYt::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s2UYt::F64;
           if (R1 & 7 != 0) goto u36tS; else goto c36tC;
       u36tS: // global
           call _c36tB(R1) args: 0, res: 0, upd: 0;
       c36tC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36tv_info" {
     block_c36tv_info:
         const _c36tv;
         const 1;
         const 30;
 },
 _c36tB() //  [R1]
         { []
         }
     {offset
       c36tB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36tR; else goto c36tQ;
       c36tR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36tQ: // global
           (_c36tG::F64) = call MO_F64_Pwr(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36tG::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36tB_info" {
     block_c36tB_info:
         const _c36tB;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.954037933 UTC

[section ""data" . GHC.Float.word2Double_closure" {
     GHC.Float.word2Double_closure:
         const GHC.Float.word2Double_info;
 },
 GHC.Float.word2Double_entry() //  [R2]
         { []
         }
     {offset
       c36uf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36un; else goto c36uo;
       c36un: // global
           R2 = R2;
           R1 = GHC.Float.word2Double_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36uo: // global
           I64[Sp - 8] = block_c36uc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36us; else goto c36ud;
       u36us: // global
           call _c36uc(R1) args: 0, res: 0, upd: 0;
       c36ud: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.word2Double_info" {
     GHC.Float.word2Double_info:
         const GHC.Float.word2Double_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36uc() //  [R1]
         { []
         }
     {offset
       c36uc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36ur; else goto c36uq;
       c36ur: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36uq: // global
           (_c36ui::F64) = call MO_UF_Conv W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36ui::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36uc_info" {
     block_c36uc_info:
         const _c36uc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.960572964 UTC

[section ""data" . GHC.Float.word2Float_closure" {
     GHC.Float.word2Float_closure:
         const GHC.Float.word2Float_info;
 },
 GHC.Float.word2Float_entry() //  [R2]
         { []
         }
     {offset
       c36uK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36uS; else goto c36uT;
       c36uS: // global
           R2 = R2;
           R1 = GHC.Float.word2Float_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36uT: // global
           I64[Sp - 8] = block_c36uH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36uX; else goto c36uI;
       u36uX: // global
           call _c36uH(R1) args: 0, res: 0, upd: 0;
       c36uI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.word2Float_info" {
     GHC.Float.word2Float_info:
         const GHC.Float.word2Float_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36uH() //  [R1]
         { []
         }
     {offset
       c36uH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36uW; else goto c36uV;
       c36uW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36uV: // global
           (_c36uN::F32) = call MO_UF_Conv W32(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36uN::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36uH_info" {
     block_c36uH_info:
         const _c36uH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.966101753 UTC

[section ""cstring" . GHC.Float.$trModule4_bytes" {
     GHC.Float.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.967718959 UTC

[section ""data" . GHC.Float.$trModule3_closure" {
     GHC.Float.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.969488016 UTC

[section ""cstring" . GHC.Float.$trModule2_bytes" {
     GHC.Float.$trModule2_bytes:
         I8[] [71,72,67,46,70,108,111,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.971186495 UTC

[section ""data" . GHC.Float.$trModule1_closure" {
     GHC.Float.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.972892602 UTC

[section ""data" . GHC.Float.$trModule_closure" {
     GHC.Float.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Float.$trModule3_closure+1;
         const GHC.Float.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.974758629 UTC

[section ""data" . $krep_r2UpC_closure" {
     $krep_r2UpC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.976585165 UTC

[section ""data" . $krep1_r2UpD_closure" {
     $krep1_r2UpD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.978974517 UTC

[section ""data" . $krep2_r2UpE_closure" {
     $krep2_r2UpE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.98086228 UTC

[section ""data" . $krep3_r2UpF_closure" {
     $krep3_r2UpF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.98283026 UTC

[section ""data" . $krep4_r2UpG_closure" {
     $krep4_r2UpG_closure:
         const :_con_info;
         const $krep1_r2UpD_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.984521581 UTC

[section ""data" . $krep5_r2UpH_closure" {
     $krep5_r2UpH_closure:
         const :_con_info;
         const $krep2_r2UpE_closure+1;
         const $krep4_r2UpG_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.986274077 UTC

[section ""data" . $krep6_r2UpI_closure" {
     $krep6_r2UpI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_r2UpH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.987999776 UTC

[section ""data" . $krep7_r2UpJ_closure" {
     $krep7_r2UpJ_closure:
         const :_con_info;
         const $krep1_r2UpD_closure+1;
         const $krep4_r2UpG_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.989787385 UTC

[section ""data" . $krep8_r2UpK_closure" {
     $krep8_r2UpK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep7_r2UpJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.991510906 UTC

[section ""data" . GHC.Float.$tcFloating1_closure" {
     GHC.Float.$tcFloating1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep3_r2UpF_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.993226879 UTC

[section ""data" . $krep9_r2UpL_closure" {
     $krep9_r2UpL_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.995157953 UTC

[section ""data" . $krep10_r2UpM_closure" {
     $krep10_r2UpM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep9_r2UpL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.996846526 UTC

[section ""data" . $krep11_r2UpN_closure" {
     $krep11_r2UpN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r2UpD_closure+1;
         const $krep10_r2UpM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:32.998537812 UTC

[section ""data" . $krep12_r2UpO_closure" {
     $krep12_r2UpO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep10_r2UpM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.000188726 UTC

[section ""data" . $krep13_r2UpP_closure" {
     $krep13_r2UpP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep8_r2UpK_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.001862619 UTC

[section ""data" . $krep14_r2UpQ_closure" {
     $krep14_r2UpQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep6_r2UpI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.004041731 UTC

[section ""data" . $krep15_r2UpR_closure" {
     $krep15_r2UpR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep2_r2UpE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.006332039 UTC

[section ""data" . $krep16_r2UpS_closure" {
     $krep16_r2UpS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep1_r2UpD_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.007951411 UTC

[section ""data" . $krep17_r2UpT_closure" {
     $krep17_r2UpT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep_r2UpC_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.009725966 UTC

[section ""data" . $krep18_r2UpU_closure" {
     $krep18_r2UpU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r2UpD_closure+1;
         const $krep9_r2UpL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.011444137 UTC

[section ""data" . $krep19_r2UpV_closure" {
     $krep19_r2UpV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r2UpE_closure+1;
         const $krep18_r2UpU_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.013157063 UTC

[section ""data" . $krep20_r2UpW_closure" {
     $krep20_r2UpW_closure:
         const :_con_info;
         const $krep9_r2UpL_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.014960737 UTC

[section ""data" . $krep21_r2UpX_closure" {
     $krep21_r2UpX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcRealFrac_closure;
         const $krep20_r2UpW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.016687765 UTC

[section ""data" . $krep22_r2UpY_closure" {
     $krep22_r2UpY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcFractional_closure;
         const $krep20_r2UpW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.018751659 UTC

[section ""cstring" . GHC.Float.$tcFloating3_bytes" {
     GHC.Float.$tcFloating3_bytes:
         I8[] [70,108,111,97,116,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.020405586 UTC

[section ""data" . GHC.Float.$tcFloating2_closure" {
     GHC.Float.$tcFloating2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tcFloating3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.022191709 UTC

[section ""data" . GHC.Float.$tcFloating_closure" {
     GHC.Float.$tcFloating_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tcFloating2_closure+1;
         const GHC.Float.$tcFloating1_closure+4;
         const 7129224378091624681;
         const 15164683064282921132;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.023967968 UTC

[section ""data" . $krep23_r2UpZ_closure" {
     $krep23_r2UpZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Float.$tcFloating_closure+1;
         const $krep20_r2UpW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.025772827 UTC

[section ""data" . $krep24_r2Uq0_closure" {
     $krep24_r2Uq0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep23_r2UpZ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.027514633 UTC

[section ""data" . $krep25_r2Uq1_closure" {
     $krep25_r2Uq1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep24_r2Uq0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.029722348 UTC

[section ""data" . $krep26_r2Uq2_closure" {
     $krep26_r2Uq2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep25_r2Uq1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.032055511 UTC

[section ""data" . $krep27_r2Uq3_closure" {
     $krep27_r2Uq3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep26_r2Uq2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.033832438 UTC

[section ""data" . $krep28_r2Uq4_closure" {
     $krep28_r2Uq4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep27_r2Uq3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.03549481 UTC

[section ""data" . $krep29_r2Uq5_closure" {
     $krep29_r2Uq5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep28_r2Uq4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.037204748 UTC

[section ""data" . $krep30_r2Uq6_closure" {
     $krep30_r2Uq6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep29_r2Uq5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.038994196 UTC

[section ""data" . $krep31_r2Uq7_closure" {
     $krep31_r2Uq7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep30_r2Uq6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.040630638 UTC

[section ""data" . $krep32_r2Uq8_closure" {
     $krep32_r2Uq8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep31_r2Uq7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.043045846 UTC

[section ""data" . $krep33_r2Uq9_closure" {
     $krep33_r2Uq9_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep32_r2Uq8_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.044740744 UTC

[section ""data" . $krep34_r2Uqa_closure" {
     $krep34_r2Uqa_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep33_r2Uq9_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.04647439 UTC

[section ""data" . $krep35_r2Uqb_closure" {
     $krep35_r2Uqb_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep34_r2Uqa_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.048152386 UTC

[section ""data" . $krep36_r2Uqc_closure" {
     $krep36_r2Uqc_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep35_r2Uqb_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.049931831 UTC

[section ""data" . $krep37_r2Uqd_closure" {
     $krep37_r2Uqd_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep36_r2Uqc_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.051635898 UTC

[section ""data" . $krep38_r2Uqe_closure" {
     $krep38_r2Uqe_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep37_r2Uqd_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.053483548 UTC

[section ""data" . $krep39_r2Uqf_closure" {
     $krep39_r2Uqf_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep38_r2Uqe_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.055272964 UTC

[section ""data" . $krep40_r2Uqg_closure" {
     $krep40_r2Uqg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r2UpO_closure+4;
         const $krep39_r2Uqf_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.05789723 UTC

[section ""data" . $krep41_r2Uqh_closure" {
     $krep41_r2Uqh_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r2UpO_closure+4;
         const $krep40_r2Uqg_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.059625434 UTC

[section ""data" . $krep42_r2Uqi_closure" {
     $krep42_r2Uqi_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep41_r2Uqh_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.061304707 UTC

[section ""data" . $krep43_r2Uqj_closure" {
     $krep43_r2Uqj_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep42_r2Uqi_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.063024178 UTC

[section ""data" . $krep44_r2Uqk_closure" {
     $krep44_r2Uqk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep43_r2Uqj_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.06475762 UTC

[section ""data" . $krep45_r2Uql_closure" {
     $krep45_r2Uql_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep44_r2Uqk_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.066579621 UTC

[section ""data" . GHC.Float.$tc'C:Floating1_closure" {
     GHC.Float.$tc'C:Floating1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r2UpY_closure+1;
         const $krep45_r2Uql_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.068302149 UTC

[section ""cstring" . GHC.Float.$tc'C:Floating3_bytes" {
     GHC.Float.$tc'C:Floating3_bytes:
         I8[] [39,67,58,70,108,111,97,116,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.070079066 UTC

[section ""data" . GHC.Float.$tc'C:Floating2_closure" {
     GHC.Float.$tc'C:Floating2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'C:Floating3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.071874365 UTC

[section ""data" . GHC.Float.$tc'C:Floating_closure" {
     GHC.Float.$tc'C:Floating_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'C:Floating2_closure+1;
         const GHC.Float.$tc'C:Floating1_closure+4;
         const 13412984222799990155;
         const 5552297363459117532;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.074000161 UTC

[section ""cstring" . GHC.Float.$tcRealFloat2_bytes" {
     GHC.Float.$tcRealFloat2_bytes:
         I8[] [82,101,97,108,70,108,111,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.075693746 UTC

[section ""data" . GHC.Float.$tcRealFloat1_closure" {
     GHC.Float.$tcRealFloat1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tcRealFloat2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.077554292 UTC

[section ""data" . GHC.Float.$tcRealFloat_closure" {
     GHC.Float.$tcRealFloat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tcRealFloat1_closure+1;
         const GHC.Float.$tcFloating1_closure+4;
         const 3941731172860576649;
         const 6292609957384615911;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.079420972 UTC

[section ""data" . $krep46_r2Uqm_closure" {
     $krep46_r2Uqm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Float.$tcRealFloat_closure+1;
         const $krep20_r2UpW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.081226739 UTC

[section ""data" . $krep47_r2Uqn_closure" {
     $krep47_r2Uqn_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r2UpO_closure+4;
         const $krep46_r2Uqm_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.084303359 UTC

[section ""data" . $krep48_r2Uqo_closure" {
     $krep48_r2Uqo_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep47_r2Uqn_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.086101641 UTC

[section ""data" . $krep49_r2Uqp_closure" {
     $krep49_r2Uqp_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep48_r2Uqo_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.087857189 UTC

[section ""data" . $krep50_r2Uqq_closure" {
     $krep50_r2Uqq_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep49_r2Uqp_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.089643897 UTC

[section ""data" . $krep51_r2Uqr_closure" {
     $krep51_r2Uqr_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep50_r2Uqq_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.091341279 UTC

[section ""data" . $krep52_r2Uqs_closure" {
     $krep52_r2Uqs_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep51_r2Uqr_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.093111446 UTC

[section ""data" . $krep53_r2Uqt_closure" {
     $krep53_r2Uqt_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r2UpN_closure+4;
         const $krep52_r2Uqs_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.094898219 UTC

[section ""data" . $krep54_r2Uqu_closure" {
     $krep54_r2Uqu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep53_r2Uqt_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.096608333 UTC

[section ""data" . $krep55_r2Uqv_closure" {
     $krep55_r2Uqv_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r2UpS_closure+4;
         const $krep54_r2Uqu_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.0987816 UTC

[section ""data" . $krep56_r2Uqw_closure" {
     $krep56_r2Uqw_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r2UpV_closure+4;
         const $krep55_r2Uqv_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.10046172 UTC

[section ""data" . $krep57_r2Uqx_closure" {
     $krep57_r2Uqx_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r2UpQ_closure+4;
         const $krep56_r2Uqw_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.102285381 UTC

[section ""data" . $krep58_r2Uqy_closure" {
     $krep58_r2Uqy_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r2UpP_closure+4;
         const $krep57_r2Uqx_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.103954484 UTC

[section ""data" . $krep59_r2Uqz_closure" {
     $krep59_r2Uqz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r2UpS_closure+4;
         const $krep58_r2Uqy_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.105785191 UTC

[section ""data" . $krep60_r2UqA_closure" {
     $krep60_r2UqA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r2UpR_closure+4;
         const $krep59_r2Uqz_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.10749809 UTC

[section ""data" . $krep61_r2UqB_closure" {
     $krep61_r2UqB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r2UpZ_closure+1;
         const $krep60_r2UqA_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.11003618 UTC

[section ""data" . GHC.Float.$tc'C:RealFloat1_closure" {
     GHC.Float.$tc'C:RealFloat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep21_r2UpX_closure+1;
         const $krep61_r2UqB_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.111772388 UTC

[section ""cstring" . GHC.Float.$tc'C:RealFloat3_bytes" {
     GHC.Float.$tc'C:RealFloat3_bytes:
         I8[] [39,67,58,82,101,97,108,70,108,111,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.113575218 UTC

[section ""data" . GHC.Float.$tc'C:RealFloat2_closure" {
     GHC.Float.$tc'C:RealFloat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'C:RealFloat3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.115306678 UTC

[section ""data" . GHC.Float.$tc'C:RealFloat_closure" {
     GHC.Float.$tc'C:RealFloat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'C:RealFloat2_closure+1;
         const GHC.Float.$tc'C:RealFloat1_closure+4;
         const 9049810847819341732;
         const 10151061231612833747;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.117179796 UTC

[section ""cstring" . GHC.Float.$tcFFFormat2_bytes" {
     GHC.Float.$tcFFFormat2_bytes:
         I8[] [70,70,70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.118992404 UTC

[section ""data" . GHC.Float.$tcFFFormat1_closure" {
     GHC.Float.$tcFFFormat1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tcFFFormat2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.120766606 UTC

[section ""data" . GHC.Float.$tcFFFormat_closure" {
     GHC.Float.$tcFFFormat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tcFFFormat1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1010825520712496676;
         const 1474964314088479952;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.1226591 UTC

[section ""data" . GHC.Float.$tc'FFExponent1_closure" {
     GHC.Float.$tc'FFExponent1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Float.$tcFFFormat_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.12438711 UTC

[section ""cstring" . GHC.Float.$tc'FFExponent3_bytes" {
     GHC.Float.$tc'FFExponent3_bytes:
         I8[] [39,70,70,69,120,112,111,110,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.126627221 UTC

[section ""data" . GHC.Float.$tc'FFExponent2_closure" {
     GHC.Float.$tc'FFExponent2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'FFExponent3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.128523476 UTC

[section ""data" . GHC.Float.$tc'FFExponent_closure" {
     GHC.Float.$tc'FFExponent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'FFExponent2_closure+1;
         const GHC.Float.$tc'FFExponent1_closure+1;
         const 5889061327753760791;
         const 13581434975010194000;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.130431299 UTC

[section ""cstring" . GHC.Float.$tc'FFFixed2_bytes" {
     GHC.Float.$tc'FFFixed2_bytes:
         I8[] [39,70,70,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.13222689 UTC

[section ""data" . GHC.Float.$tc'FFFixed1_closure" {
     GHC.Float.$tc'FFFixed1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'FFFixed2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.134198752 UTC

[section ""data" . GHC.Float.$tc'FFFixed_closure" {
     GHC.Float.$tc'FFFixed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'FFFixed1_closure+1;
         const GHC.Float.$tc'FFExponent1_closure+1;
         const 16973630707960676089;
         const 5471565003344425987;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.136694471 UTC

[section ""cstring" . GHC.Float.$tc'FFGeneric2_bytes" {
     GHC.Float.$tc'FFGeneric2_bytes:
         I8[] [39,70,70,71,101,110,101,114,105,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.138567988 UTC

[section ""data" . GHC.Float.$tc'FFGeneric1_closure" {
     GHC.Float.$tc'FFGeneric1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'FFGeneric2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.140422132 UTC

[section ""data" . GHC.Float.$tc'FFGeneric_closure" {
     GHC.Float.$tc'FFGeneric_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'FFGeneric1_closure+1;
         const GHC.Float.$tc'FFExponent1_closure+1;
         const 15786283387055545560;
         const 10263264619717801633;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.143467195 UTC

[section ""data" . GHC.Float.isFloatNaN_closure" {
     GHC.Float.isFloatNaN_closure:
         const GHC.Float.isFloatNaN_info;
 },
 GHC.Float.isFloatNaN_entry() //  [R2]
         { []
         }
     {offset
       c36wM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36wS; else goto c36wT;
       c36wS: // global
           R2 = R2;
           R1 = GHC.Float.isFloatNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36wT: // global
           I64[Sp - 8] = block_c36wJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36wX; else goto c36wK;
       u36wX: // global
           call _c36wJ(R1) args: 0, res: 0, upd: 0;
       c36wK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatNaN_info" {
     GHC.Float.isFloatNaN_info:
         const GHC.Float.isFloatNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36wJ() //  [R1]
         { []
         }
     {offset
       c36wJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36wW; else goto c36wV;
       c36wW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36wV: // global
           (_s2UYL::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNaN(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UYL::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36wJ_info" {
     block_c36wJ_info:
         const _c36wJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.149964778 UTC

[section ""data" . GHC.Float.isFloatInfinite_closure" {
     GHC.Float.isFloatInfinite_closure:
         const GHC.Float.isFloatInfinite_info;
 },
 GHC.Float.isFloatInfinite_entry() //  [R2]
         { []
         }
     {offset
       c36xf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36xl; else goto c36xm;
       c36xl: // global
           R2 = R2;
           R1 = GHC.Float.isFloatInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36xm: // global
           I64[Sp - 8] = block_c36xc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36xq; else goto c36xd;
       u36xq: // global
           call _c36xc(R1) args: 0, res: 0, upd: 0;
       c36xd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatInfinite_info" {
     GHC.Float.isFloatInfinite_info:
         const GHC.Float.isFloatInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36xc() //  [R1]
         { []
         }
     {offset
       c36xc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36xp; else goto c36xo;
       c36xp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36xo: // global
           (_s2UYS::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UYS::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36xc_info" {
     block_c36xc_info:
         const _c36xc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.156265838 UTC

[section ""data" . GHC.Float.isFloatDenormalized_closure" {
     GHC.Float.isFloatDenormalized_closure:
         const GHC.Float.isFloatDenormalized_info;
 },
 GHC.Float.isFloatDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c36xI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36xO; else goto c36xP;
       c36xO: // global
           R2 = R2;
           R1 = GHC.Float.isFloatDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36xP: // global
           I64[Sp - 8] = block_c36xF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36xT; else goto c36xG;
       u36xT: // global
           call _c36xF(R1) args: 0, res: 0, upd: 0;
       c36xG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatDenormalized_info" {
     GHC.Float.isFloatDenormalized_info:
         const GHC.Float.isFloatDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36xF() //  [R1]
         { []
         }
     {offset
       c36xF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36xS; else goto c36xR;
       c36xS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36xR: // global
           (_s2UYZ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatDenormalized(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UYZ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36xF_info" {
     block_c36xF_info:
         const _c36xF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.162568651 UTC

[section ""data" . GHC.Float.isFloatNegativeZero_closure" {
     GHC.Float.isFloatNegativeZero_closure:
         const GHC.Float.isFloatNegativeZero_info;
 },
 GHC.Float.isFloatNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c36yb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36yh; else goto c36yi;
       c36yh: // global
           R2 = R2;
           R1 = GHC.Float.isFloatNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36yi: // global
           I64[Sp - 8] = block_c36y8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36ym; else goto c36y9;
       u36ym: // global
           call _c36y8(R1) args: 0, res: 0, upd: 0;
       c36y9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatNegativeZero_info" {
     GHC.Float.isFloatNegativeZero_info:
         const GHC.Float.isFloatNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36y8() //  [R1]
         { []
         }
     {offset
       c36y8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36yl; else goto c36yk;
       c36yl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36yk: // global
           (_s2UZ6::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UZ6::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36y8_info" {
     block_c36y8_info:
         const _c36y8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.170257733 UTC

[section ""data" . GHC.Float.isFloatFinite_closure" {
     GHC.Float.isFloatFinite_closure:
         const GHC.Float.isFloatFinite_info;
 },
 GHC.Float.isFloatFinite_entry() //  [R2]
         { []
         }
     {offset
       c36yE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36yK; else goto c36yL;
       c36yK: // global
           R2 = R2;
           R1 = GHC.Float.isFloatFinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36yL: // global
           I64[Sp - 8] = block_c36yB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36yP; else goto c36yC;
       u36yP: // global
           call _c36yB(R1) args: 0, res: 0, upd: 0;
       c36yC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatFinite_info" {
     GHC.Float.isFloatFinite_info:
         const GHC.Float.isFloatFinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36yB() //  [R1]
         { []
         }
     {offset
       c36yB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36yO; else goto c36yN;
       c36yO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36yN: // global
           (_s2UZd::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatFinite(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UZd::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36yB_info" {
     block_c36yB_info:
         const _c36yB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.177864049 UTC

[section ""data" . GHC.Float.$w$cscaleFloat1_closure" {
     GHC.Float.$w$cscaleFloat1_closure:
         const GHC.Float.$w$cscaleFloat1_info;
 },
 GHC.Float.$w$cscaleFloat1_slow() //  [R1]
         { []
         }
     {offset
       c36z1: // global
           F1 = F32[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Float.$w$cscaleFloat1_entry() //  [R2, F1]
         { []
         }
     {offset
       c36z9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36za; else goto c36zb;
       c36za: // global
           R1 = GHC.Float.$w$cscaleFloat1_closure;
           I64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c36zb: // global
           _s2UZf::F32 = F1;
           if (R2 == 0) goto c36z8; else goto c36z7;
       c36z7: // global
           if (%MO_F_Eq_W32(_s2UZf::F32,
                            0.0 :: W32)) goto c36z8; else goto c36A1;
       c36A1: // global
           (_s2UZl::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatFinite(_s2UZf::F32);
           if (_s2UZl::I64 == 0) goto c36z8; else goto c36zm;
       c36z8: // global
           F1 = _s2UZf::F32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       c36zm: // global
           I64[Sp - 16] = block_c36zk_info;
           F1 = _s2UZf::F32;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cscaleFloat1_info" {
     GHC.Float.$w$cscaleFloat1_info:
         const GHC.Float.$w$cscaleFloat1_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 194;
         const GHC.Float.$w$cscaleFloat1_slow;
 },
 _c36zk() //  [R1, R2]
         { []
         }
     {offset
       c36zk: // global
           _s2UZg::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(349, _s2UZg::I64)) goto c36zX; else goto c36zY;
       c36zX: // global
           _s2UZp::I64 = R2;
           _s2UZo::I64 = R1;
           _s2UZr::I64 = _s2UZg::I64;
           goto s2UZq;
       c36zY: // global
           _s2UZp::I64 = R2;
           _s2UZo::I64 = R1;
           _s2UZr::I64 = 349;
           goto s2UZq;
       s2UZq: // global
           if (%MO_S_Gt_W64((-349), _s2UZr::I64)) goto c36zF; else goto c36zP;
       c36zF: // global
           I64[Sp] = block_c36zD_info;
           R2 = _s2UZo::I64;
           I64[Sp + 8] = _s2UZp::I64 - 349;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
       c36zP: // global
           I64[Sp] = block_c36zO_info;
           R2 = _s2UZo::I64;
           I64[Sp + 8] = _s2UZp::I64 + _s2UZr::I64;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36zk_info" {
     block_c36zk_info:
         const _c36zk;
         const 65;
         const 30;
 },
 _c36zD() //  [R1]
         { []
         }
     {offset
       c36zD: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36zD_info" {
     block_c36zD_info:
         const _c36zD;
         const 65;
         const 30;
 },
 _c36zO() //  [R1]
         { []
         }
     {offset
       c36zO: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36zO_info" {
     block_c36zO_info:
         const _c36zO;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.190700148 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cscaleFloat_closure" {
     GHC.Float.$fRealFloatFloat_$cscaleFloat_closure:
         const GHC.Float.$fRealFloatFloat_$cscaleFloat_info;
 },
 GHC.Float.$fRealFloatFloat_$cscaleFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c36Ax: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36AK; else goto c36AL;
       c36AK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cscaleFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36AL: // global
           I64[Sp - 16] = block_c36Au_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36AS; else goto c36Av;
       u36AS: // global
           call _c36Au(R1) args: 0, res: 0, upd: 0;
       c36Av: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cscaleFloat_info" {
     GHC.Float.$fRealFloatFloat_$cscaleFloat_info:
         const GHC.Float.$fRealFloatFloat_$cscaleFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c36Au() //  [R1]
         { []
         }
     {offset
       c36Au: // global
           I64[Sp] = block_c36AA_info;
           _s2UZB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2UZB::I64;
           if (R1 & 7 != 0) goto u36AR; else goto c36AB;
       u36AR: // global
           call _c36AA(R1) args: 0, res: 0, upd: 0;
       c36AB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Au_info" {
     block_c36Au_info:
         const _c36Au;
         const 1;
         const 30;
 },
 _c36AA() //  [R1]
         { []
         }
     {offset
       c36AA: // global
           _s2UZB::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c36AF_info;
           F1 = F32[R1 + 7];
           R2 = _s2UZB::I64;
           Sp = Sp + 8;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36AA_info" {
     block_c36AA_info:
         const _c36AA;
         const 65;
         const 30;
 },
 _c36AF() //  [F1]
         { []
         }
     {offset
       c36AF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36AQ; else goto c36AP;
       c36AQ: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c36AP: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36AF_info" {
     block_c36AF_info:
         const _c36AF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.200782375 UTC

[section ""data" . GHC.Float.isDoubleNaN_closure" {
     GHC.Float.isDoubleNaN_closure:
         const GHC.Float.isDoubleNaN_info;
 },
 GHC.Float.isDoubleNaN_entry() //  [R2]
         { []
         }
     {offset
       c36Bh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Bn; else goto c36Bo;
       c36Bn: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Bo: // global
           I64[Sp - 8] = block_c36Be_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Bs; else goto c36Bf;
       u36Bs: // global
           call _c36Be(R1) args: 0, res: 0, upd: 0;
       c36Bf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleNaN_info" {
     GHC.Float.isDoubleNaN_info:
         const GHC.Float.isDoubleNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Be() //  [R1]
         { []
         }
     {offset
       c36Be: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Br; else goto c36Bq;
       c36Br: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36Bq: // global
           (_s2UZL::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNaN(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UZL::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Be_info" {
     block_c36Be_info:
         const _c36Be;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.207333138 UTC

[section ""data" . GHC.Float.isDoubleInfinite_closure" {
     GHC.Float.isDoubleInfinite_closure:
         const GHC.Float.isDoubleInfinite_info;
 },
 GHC.Float.isDoubleInfinite_entry() //  [R2]
         { []
         }
     {offset
       c36BK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36BQ; else goto c36BR;
       c36BQ: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36BR: // global
           I64[Sp - 8] = block_c36BH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36BV; else goto c36BI;
       u36BV: // global
           call _c36BH(R1) args: 0, res: 0, upd: 0;
       c36BI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleInfinite_info" {
     GHC.Float.isDoubleInfinite_info:
         const GHC.Float.isDoubleInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36BH() //  [R1]
         { []
         }
     {offset
       c36BH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36BU; else goto c36BT;
       c36BU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36BT: // global
           (_s2UZS::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UZS::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36BH_info" {
     block_c36BH_info:
         const _c36BH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.213828929 UTC

[section ""data" . GHC.Float.isDoubleDenormalized_closure" {
     GHC.Float.isDoubleDenormalized_closure:
         const GHC.Float.isDoubleDenormalized_info;
 },
 GHC.Float.isDoubleDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c36Cd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Cj; else goto c36Ck;
       c36Cj: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Ck: // global
           I64[Sp - 8] = block_c36Ca_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Co; else goto c36Cb;
       u36Co: // global
           call _c36Ca(R1) args: 0, res: 0, upd: 0;
       c36Cb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleDenormalized_info" {
     GHC.Float.isDoubleDenormalized_info:
         const GHC.Float.isDoubleDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Ca() //  [R1]
         { []
         }
     {offset
       c36Ca: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Cn; else goto c36Cm;
       c36Cn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36Cm: // global
           (_s2UZZ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleDenormalized(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2UZZ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Ca_info" {
     block_c36Ca_info:
         const _c36Ca;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.22014603 UTC

[section ""data" . GHC.Float.isDoubleNegativeZero_closure" {
     GHC.Float.isDoubleNegativeZero_closure:
         const GHC.Float.isDoubleNegativeZero_info;
 },
 GHC.Float.isDoubleNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c36CG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36CM; else goto c36CN;
       c36CM: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36CN: // global
           I64[Sp - 8] = block_c36CD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36CR; else goto c36CE;
       u36CR: // global
           call _c36CD(R1) args: 0, res: 0, upd: 0;
       c36CE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleNegativeZero_info" {
     GHC.Float.isDoubleNegativeZero_info:
         const GHC.Float.isDoubleNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36CD() //  [R1]
         { []
         }
     {offset
       c36CD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36CQ; else goto c36CP;
       c36CQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36CP: // global
           (_s2V06::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V06::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36CD_info" {
     block_c36CD_info:
         const _c36CD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.227001442 UTC

[section ""data" . GHC.Float.isDoubleFinite_closure" {
     GHC.Float.isDoubleFinite_closure:
         const GHC.Float.isDoubleFinite_info;
 },
 GHC.Float.isDoubleFinite_entry() //  [R2]
         { []
         }
     {offset
       c36D9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Df; else goto c36Dg;
       c36Df: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleFinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Dg: // global
           I64[Sp - 8] = block_c36D6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Dk; else goto c36D7;
       u36Dk: // global
           call _c36D6(R1) args: 0, res: 0, upd: 0;
       c36D7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleFinite_info" {
     GHC.Float.isDoubleFinite_info:
         const GHC.Float.isDoubleFinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36D6() //  [R1]
         { []
         }
     {offset
       c36D6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Dj; else goto c36Di;
       c36Dj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36Di: // global
           (_s2V0d::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleFinite(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V0d::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36D6_info" {
     block_c36D6_info:
         const _c36D6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.234949917 UTC

[section ""data" . GHC.Float.$w$cscaleFloat_closure" {
     GHC.Float.$w$cscaleFloat_closure:
         const GHC.Float.$w$cscaleFloat_info;
         const 0;
 },
 GHC.Float.$w$cscaleFloat_slow() //  [R1]
         { []
         }
     {offset
       c36Dw: // global
           D1 = F64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Float.$w$cscaleFloat_entry() //  [R2, D1]
         { []
         }
     {offset
       c36DE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36DF; else goto c36DG;
       c36DF: // global
           R1 = GHC.Float.$w$cscaleFloat_closure;
           I64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c36DG: // global
           _s2V0f::F64 = D1;
           if (R2 == 0) goto c36DD; else goto c36DC;
       c36DC: // global
           if (%MO_F_Eq_W64(_s2V0f::F64,
                            0.0 :: W64)) goto c36DD; else goto c36Ee;
       c36Ee: // global
           (_s2V0l::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleFinite(_s2V0f::F64);
           if (_s2V0l::I64 == 0) goto c36DD; else goto c36DR;
       c36DD: // global
           D1 = _s2V0f::F64;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       c36DR: // global
           I64[Sp - 16] = block_c36DP_info;
           D1 = _s2V0f::F64;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cscaleFloat_info" {
     GHC.Float.$w$cscaleFloat_info:
         const GHC.Float.$w$cscaleFloat_entry;
         const 0;
         const 12884901902;
         const 8589934592;
         const S2VLN_srt+640;
         const 194;
         const GHC.Float.$w$cscaleFloat_slow;
 },
 _c36DP() //  [R1, R2]
         { []
         }
     {offset
       c36DP: // global
           _s2V0g::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(2257, _s2V0g::I64)) goto c36Ea; else goto c36Eb;
       c36Ea: // global
           _s2V0p::I64 = R2;
           _s2V0o::P64 = R1;
           _s2V0r::I64 = _s2V0g::I64;
           goto s2V0q;
       c36Eb: // global
           _s2V0p::I64 = R2;
           _s2V0o::P64 = R1;
           _s2V0r::I64 = 2257;
           goto s2V0q;
       s2V0q: // global
           if (%MO_S_Gt_W64((-2257),
                            _s2V0r::I64)) goto c36E5; else goto c36E6;
       c36E5: // global
           R3 = _s2V0p::I64 - 2257;
           R2 = _s2V0o::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       c36E6: // global
           R3 = _s2V0p::I64 + _s2V0r::I64;
           R2 = _s2V0o::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36DP_info" {
     block_c36DP_info:
         const _c36DP;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.244852011 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cscaleFloat_closure" {
     GHC.Float.$fRealFloatDouble_$cscaleFloat_closure:
         const GHC.Float.$fRealFloatDouble_$cscaleFloat_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$cscaleFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c36EG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36ET; else goto c36EU;
       c36ET: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cscaleFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36EU: // global
           I64[Sp - 16] = block_c36ED_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u36F1; else goto c36EE;
       u36F1: // global
           call _c36ED(R1) args: 0, res: 0, upd: 0;
       c36EE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cscaleFloat_info" {
     GHC.Float.$fRealFloatDouble_$cscaleFloat_info:
         const GHC.Float.$fRealFloatDouble_$cscaleFloat_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2VLN_srt+640;
 },
 _c36ED() //  [R1]
         { []
         }
     {offset
       c36ED: // global
           I64[Sp] = block_c36EJ_info;
           _s2V0z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2V0z::I64;
           if (R1 & 7 != 0) goto u36F0; else goto c36EK;
       u36F0: // global
           call _c36EJ(R1) args: 0, res: 0, upd: 0;
       c36EK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36ED_info" {
     block_c36ED_info:
         const _c36ED;
         const 1;
         const 4294967326;
         const S2VLN_srt+640;
 },
 _c36EJ() //  [R1]
         { []
         }
     {offset
       c36EJ: // global
           _s2V0z::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c36EO_info;
           D1 = F64[R1 + 7];
           R2 = _s2V0z::I64;
           Sp = Sp + 8;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36EJ_info" {
     block_c36EJ_info:
         const _c36EJ;
         const 65;
         const 4294967326;
         const S2VLN_srt+640;
 },
 _c36EO() //  [D1]
         { []
         }
     {offset
       c36EO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36EZ; else goto c36EY;
       c36EZ: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c36EY: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36EO_info" {
     block_c36EO_info:
         const _c36EO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.254531427 UTC

[section ""data" . GHC.Float.log1pDouble_closure" {
     GHC.Float.log1pDouble_closure:
         const GHC.Float.log1pDouble_info;
 },
 GHC.Float.log1pDouble_entry() //  [R2]
         { []
         }
     {offset
       c36Fq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Fw; else goto c36Fx;
       c36Fw: // global
           R2 = R2;
           R1 = GHC.Float.log1pDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Fx: // global
           I64[Sp - 8] = block_c36Fn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36FB; else goto c36Fo;
       u36FB: // global
           call _c36Fn(R1) args: 0, res: 0, upd: 0;
       c36Fo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1pDouble_info" {
     GHC.Float.log1pDouble_info:
         const GHC.Float.log1pDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Fn() //  [R1]
         { []
         }
     {offset
       c36Fn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36FA; else goto c36Fz;
       c36FA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36Fz: // global
           (_s2V0J::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2V0J::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Fn_info" {
     block_c36Fn_info:
         const _c36Fn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.261351517 UTC

[section ""data" . GHC.Float.expm1Double_closure" {
     GHC.Float.expm1Double_closure:
         const GHC.Float.expm1Double_info;
 },
 GHC.Float.expm1Double_entry() //  [R2]
         { []
         }
     {offset
       c36FT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36FZ; else goto c36G0;
       c36FZ: // global
           R2 = R2;
           R1 = GHC.Float.expm1Double_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36G0: // global
           I64[Sp - 8] = block_c36FQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36G4; else goto c36FR;
       u36G4: // global
           call _c36FQ(R1) args: 0, res: 0, upd: 0;
       c36FR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expm1Double_info" {
     GHC.Float.expm1Double_info:
         const GHC.Float.expm1Double_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36FQ() //  [R1]
         { []
         }
     {offset
       c36FQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36G3; else goto c36G2;
       c36G3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36G2: // global
           (_s2V0Q::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC2ZCbaseZCGHCziFloatZCexpm1(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2V0Q::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36FQ_info" {
     block_c36FQ_info:
         const _c36FQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.269128067 UTC

[section ""data" . lvl4_r2UqC_closure" {
     lvl4_r2UqC_closure:
         const lvl4_r2UqC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r2UqC_entry() //  [R1]
         { []
         }
     {offset
       c36Go: // global
           _r2UqC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c36Gr; else goto c36Gs;
       c36Gs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Gu; else goto c36Gt;
       c36Gu: // global
           HpAlloc = 16;
           goto c36Gr;
       c36Gr: // global
           R1 = _r2UqC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c36Gt: // global
           (_c36Gi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UqC::P64);
           if (_c36Gi::I64 == 0) goto c36Gk; else goto c36Gj;
       c36Gk: // global
           call (I64[I64[_r2UqC::P64]])() args: 8, res: 0, upd: 8;
       c36Gj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c36Gi::I64;
           (_c36Gl::F64) = call MO_F64_Log(2.0 :: W64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36Gl::F64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r2UqC_info" {
     lvl4_r2UqC_info:
         const lvl4_r2UqC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.275210781 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$clog1mexp_closure" {
     GHC.Float.$fFloatingDouble_$clog1mexp_closure:
         const GHC.Float.$fFloatingDouble_$clog1mexp_info;
         const 0;
 },
 GHC.Float.$fFloatingDouble_$clog1mexp_entry() //  [R2]
         { []
         }
     {offset
       c36GL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36GP; else goto c36GQ;
       c36GP: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$clog1mexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36GQ: // global
           I64[Sp - 8] = block_c36GI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Hr; else goto c36GJ;
       u36Hr: // global
           call _c36GI(R1) args: 0, res: 0, upd: 0;
       c36GJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$clog1mexp_info" {
     GHC.Float.$fFloatingDouble_$clog1mexp_info:
         const GHC.Float.$fFloatingDouble_$clog1mexp_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2VLN_srt+664;
 },
 _c36GI() //  [R1]
         { []
         }
     {offset
       c36GI: // global
           I64[Sp - 8] = block_c36GO_info;
           _s2V0U::F64 = F64[R1 + 7];
           R1 = lvl4_r2UqC_closure;
           F64[Sp] = _s2V0U::F64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Hq; else goto c36GS;
       u36Hq: // global
           call _c36GO(R1) args: 0, res: 0, upd: 0;
       c36GS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36GI_info" {
     block_c36GI_info:
         const _c36GI;
         const 0;
         const 4294967326;
         const S2VLN_srt+672;
 },
 _c36GO() //  [R1]
         { []
         }
     {offset
       c36GO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36GY; else goto c36GX;
       c36GY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36GX: // global
           _s2V0U::F64 = F64[Sp + 8];
           if (%MO_F_Le_W64(_s2V0U::F64,
                            F64[R1 + 7])) goto c36Hp; else goto c36Hd;
       c36Hp: // global
           (_s2V17::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC2ZCbaseZCGHCziFloatZCexpm1(_s2V0U::F64);
           (_c36Hk::F64) = call MO_F64_Log(%MO_F_Neg_W64(_s2V17::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c36Hk::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36Hd: // global
           (_c36H2::F64) = call MO_F64_Exp(_s2V0U::F64);
           (_s2V13::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(%MO_F_Neg_W64(_c36H2::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2V13::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36GO_info" {
     block_c36GO_info:
         const _c36GO;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.283430561 UTC

[section ""data" . GHC.Float.$fFloatingDouble_closure" {
     GHC.Float.$fFloatingDouble_closure:
         const GHC.Float.C:Floating_con_info;
         const GHC.Float.$fFractionalDouble_closure+1;
         const GHC.Float.$fFloatingDouble_$cpi_closure+1;
         const GHC.Float.expDouble_closure+1;
         const GHC.Float.logDouble_closure+1;
         const GHC.Float.sqrtDouble_closure+1;
         const GHC.Float.powerDouble_closure+2;
         const GHC.Float.$fFloatingDouble_$clogBase_closure+2;
         const GHC.Float.sinDouble_closure+1;
         const GHC.Float.cosDouble_closure+1;
         const GHC.Float.tanDouble_closure+1;
         const GHC.Float.asinDouble_closure+1;
         const GHC.Float.acosDouble_closure+1;
         const GHC.Float.atanDouble_closure+1;
         const GHC.Float.sinhDouble_closure+1;
         const GHC.Float.coshDouble_closure+1;
         const GHC.Float.tanhDouble_closure+1;
         const GHC.Float.$fFloatingDouble_$casinh_closure+1;
         const GHC.Float.$fFloatingDouble_$cacosh_closure+1;
         const GHC.Float.$fFloatingDouble_$catanh_closure+1;
         const GHC.Float.log1pDouble_closure+1;
         const GHC.Float.expm1Double_closure+1;
         const GHC.Float.$fFloatingDouble_$clog1pexp_closure+1;
         const GHC.Float.$fFloatingDouble_$clog1mexp_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.286736089 UTC

[section ""data" . GHC.Float.log1pFloat_closure" {
     GHC.Float.log1pFloat_closure:
         const GHC.Float.log1pFloat_info;
 },
 GHC.Float.log1pFloat_entry() //  [R2]
         { []
         }
     {offset
       c36HU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36I0; else goto c36I1;
       c36I0: // global
           R2 = R2;
           R1 = GHC.Float.log1pFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36I1: // global
           I64[Sp - 8] = block_c36HR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36I5; else goto c36HS;
       u36I5: // global
           call _c36HR(R1) args: 0, res: 0, upd: 0;
       c36HS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1pFloat_info" {
     GHC.Float.log1pFloat_info:
         const GHC.Float.log1pFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36HR() //  [R1]
         { []
         }
     {offset
       c36HR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36I4; else goto c36I3;
       c36I4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36I3: // global
           (_s2V1g::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2V1g::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36HR_info" {
     block_c36HR_info:
         const _c36HR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.293209241 UTC

[section ""data" . GHC.Float.expm1Float_closure" {
     GHC.Float.expm1Float_closure:
         const GHC.Float.expm1Float_info;
 },
 GHC.Float.expm1Float_entry() //  [R2]
         { []
         }
     {offset
       c36In: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36It; else goto c36Iu;
       c36It: // global
           R2 = R2;
           R1 = GHC.Float.expm1Float_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Iu: // global
           I64[Sp - 8] = block_c36Ik_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Iy; else goto c36Il;
       u36Iy: // global
           call _c36Ik(R1) args: 0, res: 0, upd: 0;
       c36Il: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expm1Float_info" {
     GHC.Float.expm1Float_info:
         const GHC.Float.expm1Float_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Ik() //  [R1]
         { []
         }
     {offset
       c36Ik: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Ix; else goto c36Iw;
       c36Ix: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36Iw: // global
           (_s2V1n::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC0ZCbaseZCGHCziFloatZCexpm1f(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2V1n::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Ik_info" {
     block_c36Ik_info:
         const _c36Ik;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.300183532 UTC

[section ""data" . lvl5_r2UqD_closure" {
     lvl5_r2UqD_closure:
         const lvl5_r2UqD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r2UqD_entry() //  [R1]
         { []
         }
     {offset
       c36IS: // global
           _r2UqD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c36IV; else goto c36IW;
       c36IW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36IY; else goto c36IX;
       c36IY: // global
           HpAlloc = 16;
           goto c36IV;
       c36IV: // global
           R1 = _r2UqD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c36IX: // global
           (_c36IM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UqD::P64);
           if (_c36IM::I64 == 0) goto c36IO; else goto c36IN;
       c36IO: // global
           call (I64[I64[_r2UqD::P64]])() args: 8, res: 0, upd: 8;
       c36IN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c36IM::I64;
           (_c36IP::F32) = call MO_F32_Log(2.0 :: W32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36IP::F32;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r2UqD_info" {
     lvl5_r2UqD_info:
         const lvl5_r2UqD_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.305696902 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$clog1mexp_closure" {
     GHC.Float.$fFloatingFloat_$clog1mexp_closure:
         const GHC.Float.$fFloatingFloat_$clog1mexp_info;
         const 0;
 },
 GHC.Float.$fFloatingFloat_$clog1mexp_entry() //  [R2]
         { []
         }
     {offset
       c36Jf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36Jj; else goto c36Jk;
       c36Jj: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$clog1mexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Jk: // global
           I64[Sp - 8] = block_c36Jc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36JV; else goto c36Jd;
       u36JV: // global
           call _c36Jc(R1) args: 0, res: 0, upd: 0;
       c36Jd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$clog1mexp_info" {
     GHC.Float.$fFloatingFloat_$clog1mexp_info:
         const GHC.Float.$fFloatingFloat_$clog1mexp_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2VLN_srt+680;
 },
 _c36Jc() //  [R1]
         { []
         }
     {offset
       c36Jc: // global
           I64[Sp - 8] = block_c36Ji_info;
           _s2V1r::F32 = F32[R1 + 7];
           R1 = lvl5_r2UqD_closure;
           F32[Sp] = _s2V1r::F32;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36JU; else goto c36Jm;
       u36JU: // global
           call _c36Ji(R1) args: 0, res: 0, upd: 0;
       c36Jm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Jc_info" {
     block_c36Jc_info:
         const _c36Jc;
         const 0;
         const 4294967326;
         const S2VLN_srt+688;
 },
 _c36Ji() //  [R1]
         { []
         }
     {offset
       c36Ji: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Js; else goto c36Jr;
       c36Js: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36Jr: // global
           _s2V1r::F32 = F32[Sp + 8];
           if (%MO_F_Le_W32(_s2V1r::F32,
                            F32[R1 + 7])) goto c36JT; else goto c36JH;
       c36JT: // global
           (_s2V1E::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC0ZCbaseZCGHCziFloatZCexpm1f(_s2V1r::F32);
           (_c36JO::F32) = call MO_F32_Log(%MO_F_Neg_W32(_s2V1E::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c36JO::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36JH: // global
           (_c36Jw::F32) = call MO_F32_Exp(_s2V1r::F32);
           (_s2V1A::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(%MO_F_Neg_W32(_c36Jw::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2V1A::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Ji_info" {
     block_c36Ji_info:
         const _c36Ji;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.313067393 UTC

[section ""data" . GHC.Float.$fFloatingFloat_closure" {
     GHC.Float.$fFloatingFloat_closure:
         const GHC.Float.C:Floating_con_info;
         const GHC.Float.$fFractionalFloat_closure+1;
         const GHC.Float.$fFloatingFloat_$cpi_closure+1;
         const GHC.Float.expFloat_closure+1;
         const GHC.Float.logFloat_closure+1;
         const GHC.Float.sqrtFloat_closure+1;
         const GHC.Float.powerFloat_closure+2;
         const GHC.Float.$fFloatingFloat_$clogBase_closure+2;
         const GHC.Float.sinFloat_closure+1;
         const GHC.Float.cosFloat_closure+1;
         const GHC.Float.tanFloat_closure+1;
         const GHC.Float.asinFloat_closure+1;
         const GHC.Float.acosFloat_closure+1;
         const GHC.Float.atanFloat_closure+1;
         const GHC.Float.sinhFloat_closure+1;
         const GHC.Float.coshFloat_closure+1;
         const GHC.Float.tanhFloat_closure+1;
         const GHC.Float.$fFloatingFloat_$casinh_closure+1;
         const GHC.Float.$fFloatingFloat_$cacosh_closure+1;
         const GHC.Float.$fFloatingFloat_$catanh_closure+1;
         const GHC.Float.log1pFloat_closure+1;
         const GHC.Float.expm1Float_closure+1;
         const GHC.Float.$fFloatingFloat_$clog1pexp_closure+1;
         const GHC.Float.$fFloatingFloat_$clog1mexp_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.315654179 UTC

[section ""data" . GHC.Float.stgWord32ToFloat_closure" {
     GHC.Float.stgWord32ToFloat_closure:
         const GHC.Float.stgWord32ToFloat_info;
 },
 GHC.Float.stgWord32ToFloat_entry() //  [R2]
         { []
         }
     {offset
       c36Kl: // global
           R1 = R2;
           call stg_word32ToFloatzh(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.stgWord32ToFloat_info" {
     GHC.Float.stgWord32ToFloat_info:
         const GHC.Float.stgWord32ToFloat_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.319898038 UTC

[section ""data" . GHC.Float.castWord32ToFloat_closure" {
     GHC.Float.castWord32ToFloat_closure:
         const GHC.Float.castWord32ToFloat_info;
 },
 GHC.Float.castWord32ToFloat_entry() //  [R2]
         { []
         }
     {offset
       c36Kz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36KH; else goto c36KI;
       c36KH: // global
           R2 = R2;
           R1 = GHC.Float.castWord32ToFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36KI: // global
           I64[Sp - 8] = block_c36Kw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36KN; else goto c36Kx;
       u36KN: // global
           call _c36Kw(R1) args: 0, res: 0, upd: 0;
       c36Kx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.castWord32ToFloat_info" {
     GHC.Float.castWord32ToFloat_info:
         const GHC.Float.castWord32ToFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Kw() //  [R1]
         { []
         }
     {offset
       c36Kw: // global
           I64[Sp] = block_c36KC_info;
           R1 = I64[R1 + 7];
           call stg_word32ToFloatzh(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Kw_info" {
     block_c36Kw_info:
         const _c36Kw;
         const 0;
         const 30;
 },
 _c36KC() //  [F1]
         { []
         }
     {offset
       c36KC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36KM; else goto c36KL;
       c36KM: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c36KL: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36KC_info" {
     block_c36KC_info:
         const _c36KC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.32807119 UTC

[section ""data" . GHC.Float.stgFloatToWord32_closure" {
     GHC.Float.stgFloatToWord32_closure:
         const GHC.Float.stgFloatToWord32_info;
 },
 GHC.Float.stgFloatToWord32_entry() //  [F1]
         { []
         }
     {offset
       c36L5: // global
           F1 = F1;
           call stg_floatToWord32zh(F1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.stgFloatToWord32_info" {
     GHC.Float.stgFloatToWord32_info:
         const GHC.Float.stgFloatToWord32_entry;
         const 0;
         const 14;
         const 4294967302;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.332261812 UTC

[section ""data" . GHC.Float.castFloatToWord32_closure" {
     GHC.Float.castFloatToWord32_closure:
         const GHC.Float.castFloatToWord32_info;
 },
 GHC.Float.castFloatToWord32_entry() //  [R2]
         { []
         }
     {offset
       c36Lj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Lr; else goto c36Ls;
       c36Lr: // global
           R2 = R2;
           R1 = GHC.Float.castFloatToWord32_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Ls: // global
           I64[Sp - 8] = block_c36Lg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Lx; else goto c36Lh;
       u36Lx: // global
           call _c36Lg(R1) args: 0, res: 0, upd: 0;
       c36Lh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.castFloatToWord32_info" {
     GHC.Float.castFloatToWord32_info:
         const GHC.Float.castFloatToWord32_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Lg() //  [R1]
         { []
         }
     {offset
       c36Lg: // global
           I64[Sp] = block_c36Lm_info;
           F1 = F32[R1 + 7];
           call stg_floatToWord32zh(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Lg_info" {
     block_c36Lg_info:
         const _c36Lg;
         const 0;
         const 30;
 },
 _c36Lm() //  [R1]
         { []
         }
     {offset
       c36Lm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Lw; else goto c36Lv;
       c36Lw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c36Lv: // global
           I64[Hp - 8] = GHC.Word.W32#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Lm_info" {
     block_c36Lm_info:
         const _c36Lm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.338964501 UTC

[section ""data" . GHC.Float.stgWord64ToDouble_closure" {
     GHC.Float.stgWord64ToDouble_closure:
         const GHC.Float.stgWord64ToDouble_info;
 },
 GHC.Float.stgWord64ToDouble_entry() //  [R2]
         { []
         }
     {offset
       c36LP: // global
           R1 = R2;
           call stg_word64ToDoublezh(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.stgWord64ToDouble_info" {
     GHC.Float.stgWord64ToDouble_info:
         const GHC.Float.stgWord64ToDouble_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.343162944 UTC

[section ""data" . GHC.Float.castWord64ToDouble_closure" {
     GHC.Float.castWord64ToDouble_closure:
         const GHC.Float.castWord64ToDouble_info;
 },
 GHC.Float.castWord64ToDouble_entry() //  [R2]
         { []
         }
     {offset
       c36M3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Mb; else goto c36Mc;
       c36Mb: // global
           R2 = R2;
           R1 = GHC.Float.castWord64ToDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Mc: // global
           I64[Sp - 8] = block_c36M0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Mh; else goto c36M1;
       u36Mh: // global
           call _c36M0(R1) args: 0, res: 0, upd: 0;
       c36M1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.castWord64ToDouble_info" {
     GHC.Float.castWord64ToDouble_info:
         const GHC.Float.castWord64ToDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36M0() //  [R1]
         { []
         }
     {offset
       c36M0: // global
           I64[Sp] = block_c36M6_info;
           R1 = I64[R1 + 7];
           call stg_word64ToDoublezh(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36M0_info" {
     block_c36M0_info:
         const _c36M0;
         const 0;
         const 30;
 },
 _c36M6() //  [D1]
         { []
         }
     {offset
       c36M6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Mg; else goto c36Mf;
       c36Mg: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c36Mf: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36M6_info" {
     block_c36M6_info:
         const _c36M6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.349947417 UTC

[section ""data" . GHC.Float.stgDoubleToWord64_closure" {
     GHC.Float.stgDoubleToWord64_closure:
         const GHC.Float.stgDoubleToWord64_info;
 },
 GHC.Float.stgDoubleToWord64_entry() //  [D1]
         { []
         }
     {offset
       c36Mz: // global
           D1 = D1;
           call stg_doubleToWord64zh(D1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.stgDoubleToWord64_info" {
     GHC.Float.stgDoubleToWord64_info:
         const GHC.Float.stgDoubleToWord64_entry;
         const 0;
         const 14;
         const 4294967303;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.354510504 UTC

[section ""data" . GHC.Float.castDoubleToWord64_closure" {
     GHC.Float.castDoubleToWord64_closure:
         const GHC.Float.castDoubleToWord64_info;
 },
 GHC.Float.castDoubleToWord64_entry() //  [R2]
         { []
         }
     {offset
       c36MN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36MV; else goto c36MW;
       c36MV: // global
           R2 = R2;
           R1 = GHC.Float.castDoubleToWord64_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36MW: // global
           I64[Sp - 8] = block_c36MK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36N1; else goto c36ML;
       u36N1: // global
           call _c36MK(R1) args: 0, res: 0, upd: 0;
       c36ML: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.castDoubleToWord64_info" {
     GHC.Float.castDoubleToWord64_info:
         const GHC.Float.castDoubleToWord64_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36MK() //  [R1]
         { []
         }
     {offset
       c36MK: // global
           I64[Sp] = block_c36MQ_info;
           D1 = F64[R1 + 7];
           call stg_doubleToWord64zh(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36MK_info" {
     block_c36MK_info:
         const _c36MK;
         const 0;
         const 30;
 },
 _c36MQ() //  [R1]
         { []
         }
     {offset
       c36MQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36N0; else goto c36MZ;
       c36N0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c36MZ: // global
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36MQ_info" {
     block_c36MQ_info:
         const _c36MQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.362789151 UTC

[section ""data" . GHC.Float.$fEnumFloat_$csucc_closure" {
     GHC.Float.$fEnumFloat_$csucc_closure:
         const GHC.Float.$fEnumFloat_$csucc_info;
 },
 GHC.Float.$fEnumFloat_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c36Nm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Nt; else goto c36Nu;
       c36Nt: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Nu: // global
           I64[Sp - 8] = block_c36Nj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Ny; else goto c36Nk;
       u36Ny: // global
           call _c36Nj(R1) args: 0, res: 0, upd: 0;
       c36Nk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$csucc_info" {
     GHC.Float.$fEnumFloat_$csucc_info:
         const GHC.Float.$fEnumFloat_$csucc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Nj() //  [R1]
         { []
         }
     {offset
       c36Nj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Nx; else goto c36Nw;
       c36Nx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36Nw: // global
           _s2V28::F32 = %MO_F_Add_W32(F32[R1 + 7], 1.0 :: W32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2V28::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Nj_info" {
     block_c36Nj_info:
         const _c36Nj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.369018709 UTC

[section ""data" . GHC.Float.$fEnumFloat_$cpred_closure" {
     GHC.Float.$fEnumFloat_$cpred_closure:
         const GHC.Float.$fEnumFloat_$cpred_info;
 },
 GHC.Float.$fEnumFloat_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c36NS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36NZ; else goto c36O0;
       c36NZ: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36O0: // global
           I64[Sp - 8] = block_c36NP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36O4; else goto c36NQ;
       u36O4: // global
           call _c36NP(R1) args: 0, res: 0, upd: 0;
       c36NQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$cpred_info" {
     GHC.Float.$fEnumFloat_$cpred_info:
         const GHC.Float.$fEnumFloat_$cpred_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36NP() //  [R1]
         { []
         }
     {offset
       c36NP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36O3; else goto c36O2;
       c36O3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36O2: // global
           _s2V2c::F32 = %MO_F_Sub_W32(F32[R1 + 7], 1.0 :: W32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2V2c::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36NP_info" {
     block_c36NP_info:
         const _c36NP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.374990278 UTC

[section ""data" . GHC.Float.$fRealFloat_closure" {
     GHC.Float.$fRealFloat_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Float.$fNumFloat_closure+1;
         const GHC.Classes.$fOrdFloat_closure;
         const GHC.Float.$fRealFloat_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.376769074 UTC

[section ""data" . GHC.Float.$fRealFracFloat_closure" {
     GHC.Float.$fRealFracFloat_closure:
         const GHC.Real.C:RealFrac_con_info;
         const GHC.Float.$fRealFloat_closure+1;
         const GHC.Float.$fFractionalFloat_closure+1;
         const GHC.Float.$fRealFracFloat_$cproperFraction_closure+2;
         const GHC.Float.$fRealFracFloat_$ctruncate_closure+2;
         const GHC.Float.$fRealFracFloat_$cround_closure+2;
         const GHC.Float.$fRealFracFloat_$cceiling_closure+2;
         const GHC.Float.$fRealFracFloat_$cfloor_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.37974446 UTC

[section ""data" . GHC.Float.$fEnumDouble_$csucc_closure" {
     GHC.Float.$fEnumDouble_$csucc_closure:
         const GHC.Float.$fEnumDouble_$csucc_info;
 },
 GHC.Float.$fEnumDouble_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c36Oq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Ox; else goto c36Oy;
       c36Ox: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Oy: // global
           I64[Sp - 8] = block_c36On_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36OC; else goto c36Oo;
       u36OC: // global
           call _c36On(R1) args: 0, res: 0, upd: 0;
       c36Oo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$csucc_info" {
     GHC.Float.$fEnumDouble_$csucc_info:
         const GHC.Float.$fEnumDouble_$csucc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36On() //  [R1]
         { []
         }
     {offset
       c36On: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36OB; else goto c36OA;
       c36OB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36OA: // global
           _s2V2g::F64 = %MO_F_Add_W64(F64[R1 + 7], 1.0 :: W64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2V2g::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36On_info" {
     block_c36On_info:
         const _c36On;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.386659378 UTC

[section ""data" . GHC.Float.$fEnumDouble_$cpred_closure" {
     GHC.Float.$fEnumDouble_$cpred_closure:
         const GHC.Float.$fEnumDouble_$cpred_info;
 },
 GHC.Float.$fEnumDouble_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c36OW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36P3; else goto c36P4;
       c36P3: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36P4: // global
           I64[Sp - 8] = block_c36OT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36P8; else goto c36OU;
       u36P8: // global
           call _c36OT(R1) args: 0, res: 0, upd: 0;
       c36OU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$cpred_info" {
     GHC.Float.$fEnumDouble_$cpred_info:
         const GHC.Float.$fEnumDouble_$cpred_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36OT() //  [R1]
         { []
         }
     {offset
       c36OT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36P7; else goto c36P6;
       c36P7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c36P6: // global
           _s2V2k::F64 = %MO_F_Sub_W64(F64[R1 + 7], 1.0 :: W64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2V2k::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36OT_info" {
     block_c36OT_info:
         const _c36OT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.392245868 UTC

[section ""data" . GHC.Float.$fRealDouble_closure" {
     GHC.Float.$fRealDouble_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Float.$fNumDouble_closure+1;
         const GHC.Classes.$fOrdDouble_closure;
         const GHC.Float.$fRealDouble_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.394111289 UTC

[section ""data" . GHC.Float.$fRealFracDouble_closure" {
     GHC.Float.$fRealFracDouble_closure:
         const GHC.Real.C:RealFrac_con_info;
         const GHC.Float.$fRealDouble_closure+1;
         const GHC.Float.$fFractionalDouble_closure+1;
         const GHC.Float.$fRealFracDouble_$cproperFraction_closure+2;
         const GHC.Float.$fRealFracDouble_$ctruncate_closure+2;
         const GHC.Float.$fRealFracDouble_$cround_closure+2;
         const GHC.Float.$fRealFracDouble_$cceiling_closure+2;
         const GHC.Float.$fRealFracDouble_$cfloor_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.39692359 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisNaN_closure" {
     GHC.Float.$fRealFloatDouble_$cisNaN_closure:
         const GHC.Float.$fRealFloatDouble_$cisNaN_info;
 },
 GHC.Float.$fRealFloatDouble_$cisNaN_entry() //  [R2]
         { []
         }
     {offset
       c36Pu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Pv; else goto c36Pw;
       c36Pv: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cisNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Pw: // global
           I64[Sp - 8] = block_c36Pr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36PG; else goto c36Ps;
       u36PG: // global
           call _c36Pr(R1) args: 0, res: 0, upd: 0;
       c36Ps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisNaN_info" {
     GHC.Float.$fRealFloatDouble_$cisNaN_info:
         const GHC.Float.$fRealFloatDouble_$cisNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Pr() //  [R1]
         { []
         }
     {offset
       c36Pr: // global
           (_s2V2r::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNaN(F64[R1 + 7]);
           if (_s2V2r::I64 == 0) goto c36PF; else goto c36PE;
       c36PF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36PE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Pr_info" {
     block_c36Pr_info:
         const _c36Pr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.403157818 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisInfinite_closure" {
     GHC.Float.$fRealFloatDouble_$cisInfinite_closure:
         const GHC.Float.$fRealFloatDouble_$cisInfinite_info;
 },
 GHC.Float.$fRealFloatDouble_$cisInfinite_entry() //  [R2]
         { []
         }
     {offset
       c36PZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Q0; else goto c36Q1;
       c36Q0: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cisInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Q1: // global
           I64[Sp - 8] = block_c36PW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Qb; else goto c36PX;
       u36Qb: // global
           call _c36PW(R1) args: 0, res: 0, upd: 0;
       c36PX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisInfinite_info" {
     GHC.Float.$fRealFloatDouble_$cisInfinite_info:
         const GHC.Float.$fRealFloatDouble_$cisInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36PW() //  [R1]
         { []
         }
     {offset
       c36PW: // global
           (_s2V2z::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(F64[R1 + 7]);
           if (_s2V2z::I64 == 0) goto c36Qa; else goto c36Q9;
       c36Qa: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36Q9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36PW_info" {
     block_c36PW_info:
         const _c36PW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.409318093 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisDenormalized_closure" {
     GHC.Float.$fRealFloatDouble_$cisDenormalized_closure:
         const GHC.Float.$fRealFloatDouble_$cisDenormalized_info;
 },
 GHC.Float.$fRealFloatDouble_$cisDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c36Qu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Qv; else goto c36Qw;
       c36Qv: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cisDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Qw: // global
           I64[Sp - 8] = block_c36Qr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36QG; else goto c36Qs;
       u36QG: // global
           call _c36Qr(R1) args: 0, res: 0, upd: 0;
       c36Qs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisDenormalized_info" {
     GHC.Float.$fRealFloatDouble_$cisDenormalized_info:
         const GHC.Float.$fRealFloatDouble_$cisDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Qr() //  [R1]
         { []
         }
     {offset
       c36Qr: // global
           (_s2V2H::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleDenormalized(F64[R1 + 7]);
           if (_s2V2H::I64 == 0) goto c36QF; else goto c36QE;
       c36QF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36QE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Qr_info" {
     block_c36Qr_info:
         const _c36Qr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.41638056 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisNegativeZero_closure" {
     GHC.Float.$fRealFloatDouble_$cisNegativeZero_closure:
         const GHC.Float.$fRealFloatDouble_$cisNegativeZero_info;
 },
 GHC.Float.$fRealFloatDouble_$cisNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c36QZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36R0; else goto c36R1;
       c36R0: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cisNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36R1: // global
           I64[Sp - 8] = block_c36QW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Rb; else goto c36QX;
       u36Rb: // global
           call _c36QW(R1) args: 0, res: 0, upd: 0;
       c36QX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisNegativeZero_info" {
     GHC.Float.$fRealFloatDouble_$cisNegativeZero_info:
         const GHC.Float.$fRealFloatDouble_$cisNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36QW() //  [R1]
         { []
         }
     {offset
       c36QW: // global
           (_s2V2P::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[R1 + 7]);
           if (_s2V2P::I64 == 0) goto c36Ra; else goto c36R9;
       c36Ra: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36R9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36QW_info" {
     block_c36QW_info:
         const _c36QW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.422968944 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisNaN_closure" {
     GHC.Float.$fRealFloatFloat_$cisNaN_closure:
         const GHC.Float.$fRealFloatFloat_$cisNaN_info;
 },
 GHC.Float.$fRealFloatFloat_$cisNaN_entry() //  [R2]
         { []
         }
     {offset
       c36Ru: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Rv; else goto c36Rw;
       c36Rv: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cisNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Rw: // global
           I64[Sp - 8] = block_c36Rr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36RG; else goto c36Rs;
       u36RG: // global
           call _c36Rr(R1) args: 0, res: 0, upd: 0;
       c36Rs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisNaN_info" {
     GHC.Float.$fRealFloatFloat_$cisNaN_info:
         const GHC.Float.$fRealFloatFloat_$cisNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Rr() //  [R1]
         { []
         }
     {offset
       c36Rr: // global
           (_s2V2X::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNaN(F32[R1 + 7]);
           if (_s2V2X::I64 == 0) goto c36RF; else goto c36RE;
       c36RF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36RE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Rr_info" {
     block_c36Rr_info:
         const _c36Rr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.429114452 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisInfinite_closure" {
     GHC.Float.$fRealFloatFloat_$cisInfinite_closure:
         const GHC.Float.$fRealFloatFloat_$cisInfinite_info;
 },
 GHC.Float.$fRealFloatFloat_$cisInfinite_entry() //  [R2]
         { []
         }
     {offset
       c36RZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36S0; else goto c36S1;
       c36S0: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cisInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36S1: // global
           I64[Sp - 8] = block_c36RW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Sb; else goto c36RX;
       u36Sb: // global
           call _c36RW(R1) args: 0, res: 0, upd: 0;
       c36RX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisInfinite_info" {
     GHC.Float.$fRealFloatFloat_$cisInfinite_info:
         const GHC.Float.$fRealFloatFloat_$cisInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36RW() //  [R1]
         { []
         }
     {offset
       c36RW: // global
           (_s2V35::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(F32[R1 + 7]);
           if (_s2V35::I64 == 0) goto c36Sa; else goto c36S9;
       c36Sa: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36S9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36RW_info" {
     block_c36RW_info:
         const _c36RW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.435664833 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisDenormalized_closure" {
     GHC.Float.$fRealFloatFloat_$cisDenormalized_closure:
         const GHC.Float.$fRealFloatFloat_$cisDenormalized_info;
 },
 GHC.Float.$fRealFloatFloat_$cisDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c36Su: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36Sv; else goto c36Sw;
       c36Sv: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cisDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Sw: // global
           I64[Sp - 8] = block_c36Sr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36SG; else goto c36Ss;
       u36SG: // global
           call _c36Sr(R1) args: 0, res: 0, upd: 0;
       c36Ss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisDenormalized_info" {
     GHC.Float.$fRealFloatFloat_$cisDenormalized_info:
         const GHC.Float.$fRealFloatFloat_$cisDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36Sr() //  [R1]
         { []
         }
     {offset
       c36Sr: // global
           (_s2V3d::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatDenormalized(F32[R1 + 7]);
           if (_s2V3d::I64 == 0) goto c36SF; else goto c36SE;
       c36SF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36SE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Sr_info" {
     block_c36Sr_info:
         const _c36Sr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.442114051 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisNegativeZero_closure" {
     GHC.Float.$fRealFloatFloat_$cisNegativeZero_closure:
         const GHC.Float.$fRealFloatFloat_$cisNegativeZero_info;
 },
 GHC.Float.$fRealFloatFloat_$cisNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c36SZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36T0; else goto c36T1;
       c36T0: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cisNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36T1: // global
           I64[Sp - 8] = block_c36SW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u36Tb; else goto c36SX;
       u36Tb: // global
           call _c36SW(R1) args: 0, res: 0, upd: 0;
       c36SX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisNegativeZero_info" {
     GHC.Float.$fRealFloatFloat_$cisNegativeZero_info:
         const GHC.Float.$fRealFloatFloat_$cisNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c36SW() //  [R1]
         { []
         }
     {offset
       c36SW: // global
           (_s2V3l::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[R1 + 7]);
           if (_s2V3l::I64 == 0) goto c36Ta; else goto c36T9;
       c36Ta: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36T9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36SW_info" {
     block_c36SW_info:
         const _c36SW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.448489657 UTC

[section ""cstring" . lvl6_r2UqE_bytes" {
     lvl6_r2UqE_bytes:
         I8[] [73,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.451002589 UTC

[section ""data" . lvl7_r2UqF_closure" {
     lvl7_r2UqF_closure:
         const lvl7_r2UqF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2UqF_entry() //  [R1]
         { []
         }
     {offset
       c36Tu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36Tv; else goto c36Tw;
       c36Tv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c36Tw: // global
           (_c36Tr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c36Tr::I64 == 0) goto c36Tt; else goto c36Ts;
       c36Tt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c36Ts: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c36Tr::I64;
           R2 = lvl6_r2UqE_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r2UqF_info" {
     lvl7_r2UqF_info:
         const lvl7_r2UqF_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.455523746 UTC

[section ""data" . GHC.Float.expts2_closure" {
     GHC.Float.expts2_closure:
         const GHC.Float.expts2_info;
         const 0;
 },
 GHC.Float.expts2_entry() //  [R2]
         { []
         }
     {offset
       c36TJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36TN; else goto c36TM;
       c36TN: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Float.expts2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36TM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R6 = lvl7_r2UqF_closure;
           R5 = Hp - 7;
           R4 = GHC.Float.maxExpt_closure+1;
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expts2_info" {
     GHC.Float.expts2_info:
         const GHC.Float.expts2_entry;
         const 0;
         const 30064771086;
         const 4294967300;
         const S2VLN_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.462456384 UTC

[section ""data" . GHC.Float.expts1_closure" {
     GHC.Float.expts1_closure:
         const GHC.Float.expts1_info;
         const 0;
 },
 sat_s2V3I_entry() //  [R1]
         { []
         }
     {offset
       c36Um: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36Un; else goto c36Ut;
       c36Un: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c36Ut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2V3A::I64 = I64[R1 + 16];
           if (%MO_S_Ge_W64(_s2V3A::I64, 0)) goto c36Uk; else goto c36Ul;
       c36Uk: // global
           if (_s2V3A::I64 == 0) goto c36Us; else goto c36Ur;
       c36Us: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c36Ur: // global
           R3 = _s2V3A::I64;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Real.$wf_entry(R3, R2) args: 24, res: 0, upd: 24;
       c36Ul: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V3I_info" {
     sat_s2V3I_info:
         const sat_s2V3I_entry;
         const 4294967296;
         const 70398808948753;
         const S2VLN_srt+440;
 },
 section ""relreadonly" . u36V1_srtd" {
     u36V1_srtd:
         const S2VLN_srt+440;
         const 37;
         const 111669166087;
 },
 GHC.Float.expts1_entry() //  []
         { []
         }
     {offset
       c36Uu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36Uv; else goto c36Uw;
       c36Uv: // global
           R1 = GHC.Float.expts1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c36Uw: // global
           I64[Sp - 8] = block_c36TW_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = 1101;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expts1_info" {
     GHC.Float.expts1_info:
         const GHC.Float.expts1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967299;
         const u36V1_srtd;
 },
 section ""relreadonly" . u36V2_srtd" {
     u36V2_srtd:
         const S2VLN_srt+440;
         const 34;
         const 8589950983;
 },
 _c36TW() //  [R1]
         { []
         }
     {offset
       c36TW: // global
           I64[Sp - 8] = 0;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c36U3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c36TW_info" {
     block_c36TW_info:
         const _c36TW;
         const 0;
         const 18446744069414584350;
         const u36V2_srtd;
 },
 _c36U3() //  []
         { []
         }
     {offset
       c36U3: // global
           Hp = Hp + 24;
           _s2V3A::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c36UH; else goto c36UG;
       c36UH: // global
           HpAlloc = 24;
           I64[Sp] = block_c36U2_info;
           R1 = _s2V3A::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c36UG: // global
           if (%MO_S_Gt_W64(0, _s2V3A::I64)) goto c36UL; else goto c36UR;
       c36UR: // global
           if (%MO_S_Gt_W64(_s2V3A::I64, 1100)) goto c36UL; else goto c36UQ;
       c36UL: // global
           Hp = Hp - 24;
           R2 = _s2V3A::I64;
           Sp = Sp + 16;
           call GHC.Float.expts2_entry(R2) args: 8, res: 0, upd: 8;
       c36UQ: // global
           I64[Hp - 16] = sat_s2V3I_info;
           I64[Hp] = _s2V3A::I64;
           _s2V3s::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2V3s::P64 + 24) + (_s2V3A::I64 << 3)] = Hp - 16;
           I64[_s2V3s::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2V3s::P64 + 24) + ((I64[_s2V3s::P64 + 8] << 3) + (_s2V3A::I64 >> 7))] = 1 :: W8;
           if (_s2V3A::I64 == 1100) goto u36UZ; else goto c36UO;
       u36UZ: // global
           call _c36Uz() args: 0, res: 0, upd: 0;
       c36UO: // global
           I64[Sp] = _s2V3A::I64 + 1;
           call _c36U3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . u36V3_srtd" {
     u36V3_srtd:
         const S2VLN_srt+440;
         const 34;
         const 8589950983;
 },
 _c36U2() //  [R1]
         { []
         }
     {offset
       c36U2: // global
           I64[Sp] = R1;
           call _c36U3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c36U2_info" {
     block_c36U2_info:
         const _c36U2;
         const 1;
         const 18446744069414584350;
         const u36V3_srtd;
 },
 _c36Uz() //  []
         { []
         }
     {offset
       c36Uz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c36UE; else goto c36UD;
       c36UE: // global
           HpAlloc = 40;
           I64[Sp] = block_c36Uz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c36UD: // global
           _s2V3s::P64 = P64[Sp + 8];
           I64[_s2V3s::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = GHC.Float.maxExpt_closure+1;
           P64[Hp - 8] = _s2V3s::P64;
           I64[Hp] = 1101;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Uz_info" {
     block_c36Uz_info:
         const _c36Uz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.477985765 UTC

[section ""data" . GHC.Float.expts_closure" {
     GHC.Float.expts_closure:
         const GHC.Float.expts_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.expts_entry() //  [R1]
         { []
         }
     {offset
       c36VI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c36VJ; else goto c36VK;
       c36VJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c36VK: // global
           (_c36VD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c36VD::I64 == 0) goto c36VF; else goto c36VE;
       c36VF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c36VE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c36VD::I64;
           I64[Sp - 24] = block_c36VG_info;
           Sp = Sp - 24;
           call GHC.Float.expts1_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.expts_info" {
     GHC.Float.expts_info:
         const GHC.Float.expts_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+728;
 },
 _c36VG() //  [R1]
         { []
         }
     {offset
       c36VG: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c36VG_info" {
     block_c36VG_info:
         const _c36VG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.483045573 UTC

[section ""data" . sat_s2V3P_closure" {
     sat_s2V3P_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.484807324 UTC

[section ""data" . sat_s2V3Q_closure" {
     sat_s2V3Q_closure:
         const :_con_info;
         const sat_s2V3P_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.487600874 UTC

[section ""data" . GHC.Float.expts4_closure" {
     GHC.Float.expts4_closure:
         const GHC.Float.expts4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.expts4_entry() //  [R1]
         { []
         }
     {offset
       c36W6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36W7; else goto c36W8;
       c36W7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c36W8: // global
           (_c36W3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c36W3::I64 == 0) goto c36W5; else goto c36W4;
       c36W5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c36W4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c36W3::I64;
           R3 = sat_s2V3Q_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.expts4_info" {
     GHC.Float.expts4_info:
         const GHC.Float.expts4_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.492026856 UTC

[section ""data" . GHC.Float.expts5_closure" {
     GHC.Float.expts5_closure:
         const GHC.Float.expts5_info;
         const 0;
 },
 GHC.Float.expts5_entry() //  [R2]
         { []
         }
     {offset
       c36Wl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36Wp; else goto c36Wo;
       c36Wp: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Float.expts5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c36Wo: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R6 = lvl7_r2UqF_closure;
           R5 = Hp - 7;
           R4 = GHC.Float.maxExpt10_closure+1;
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expts5_info" {
     GHC.Float.expts5_info:
         const GHC.Float.expts5_entry;
         const 0;
         const 296352743438;
         const 4294967300;
         const S2VLN_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.498977067 UTC

[section ""data" . GHC.Float.expts3_closure" {
     GHC.Float.expts3_closure:
         const GHC.Float.expts3_info;
         const 0;
 },
 sat_s2V4c_entry() //  [R1]
         { []
         }
     {offset
       c36WY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36WZ; else goto c36X5;
       c36WZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c36X5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2V44::I64 = I64[R1 + 16];
           if (%MO_S_Ge_W64(_s2V44::I64, 0)) goto c36WW; else goto c36WX;
       c36WW: // global
           if (_s2V44::I64 == 0) goto c36X4; else goto c36X3;
       c36X4: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c36X3: // global
           R3 = _s2V44::I64;
           R2 = GHC.Float.expts4_closure;
           Sp = Sp - 16;
           call GHC.Real.$wf_entry(R3, R2) args: 24, res: 0, upd: 24;
       c36WX: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V4c_info" {
     sat_s2V4c_info:
         const sat_s2V4c_entry;
         const 4294967296;
         const 64424509457;
         const S2VLN_srt+752;
 },
 GHC.Float.expts3_entry() //  []
         { []
         }
     {offset
       c36X6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c36X7; else goto c36X8;
       c36X7: // global
           R1 = GHC.Float.expts3_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c36X8: // global
           I64[Sp - 8] = block_c36Wy_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = 325;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expts3_info" {
     GHC.Float.expts3_info:
         const GHC.Float.expts3_entry;
         const 0;
         const 2168958484494;
         const 4294967299;
         const S2VLN_srt+720;
 },
 _c36Wy() //  [R1]
         { []
         }
     {offset
       c36Wy: // global
           I64[Sp - 8] = 0;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c36WF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c36Wy_info" {
     block_c36Wy_info:
         const _c36Wy;
         const 0;
         const 133143986206;
         const S2VLN_srt+744;
 },
 _c36WF() //  []
         { []
         }
     {offset
       c36WF: // global
           Hp = Hp + 24;
           _s2V44::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c36Xj; else goto c36Xi;
       c36Xj: // global
           HpAlloc = 24;
           I64[Sp] = block_c36WE_info;
           R1 = _s2V44::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c36Xi: // global
           if (%MO_S_Gt_W64(0, _s2V44::I64)) goto c36Xn; else goto c36Xt;
       c36Xt: // global
           if (%MO_S_Gt_W64(_s2V44::I64, 324)) goto c36Xn; else goto c36Xs;
       c36Xn: // global
           Hp = Hp - 24;
           R2 = _s2V44::I64;
           Sp = Sp + 16;
           call GHC.Float.expts5_entry(R2) args: 8, res: 0, upd: 8;
       c36Xs: // global
           I64[Hp - 16] = sat_s2V4c_info;
           I64[Hp] = _s2V44::I64;
           _s2V3W::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2V3W::P64 + 24) + (_s2V44::I64 << 3)] = Hp - 16;
           I64[_s2V3W::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2V3W::P64 + 24) + ((I64[_s2V3W::P64 + 8] << 3) + (_s2V44::I64 >> 7))] = 1 :: W8;
           if (_s2V44::I64 == 324) goto u36XB; else goto c36Xq;
       u36XB: // global
           call _c36Xb() args: 0, res: 0, upd: 0;
       c36Xq: // global
           I64[Sp] = _s2V44::I64 + 1;
           call _c36WF() args: 0, res: 0, upd: 0;
     }
 },
 _c36WE() //  [R1]
         { []
         }
     {offset
       c36WE: // global
           I64[Sp] = R1;
           call _c36WF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c36WE_info" {
     block_c36WE_info:
         const _c36WE;
         const 1;
         const 133143986206;
         const S2VLN_srt+744;
 },
 _c36Xb() //  []
         { []
         }
     {offset
       c36Xb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c36Xg; else goto c36Xf;
       c36Xg: // global
           HpAlloc = 40;
           I64[Sp] = block_c36Xb_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c36Xf: // global
           _s2V3W::P64 = P64[Sp + 8];
           I64[_s2V3W::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = GHC.Float.maxExpt10_closure+1;
           P64[Hp - 8] = _s2V3W::P64;
           I64[Hp] = 325;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Xb_info" {
     block_c36Xb_info:
         const _c36Xb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.512690833 UTC

[section ""data" . GHC.Float.expts10_closure" {
     GHC.Float.expts10_closure:
         const GHC.Float.expts10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.expts10_entry() //  [R1]
         { []
         }
     {offset
       c36Ye: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c36Yf; else goto c36Yg;
       c36Yf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c36Yg: // global
           (_c36Y9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c36Y9::I64 == 0) goto c36Yb; else goto c36Ya;
       c36Yb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c36Ya: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c36Y9::I64;
           I64[Sp - 24] = block_c36Yc_info;
           Sp = Sp - 24;
           call GHC.Float.expts3_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.expts10_info" {
     GHC.Float.expts10_info:
         const GHC.Float.expts10_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+784;
 },
 _c36Yc() //  [R1]
         { []
         }
     {offset
       c36Yc: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c36Yc_info" {
     block_c36Yc_info:
         const _c36Yc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.519871618 UTC

[section ""data" . GHC.Float.$wintegerLogBase_closure" {
     GHC.Float.$wintegerLogBase_closure:
         const GHC.Float.$wintegerLogBase_info;
         const 0;
 },
 section ""relreadonly" . u36Zb_srtd" {
     u36Zb_srtd:
         const S2VLN_srt+64;
         const 93;
         const 2305843009213693953;
         const 402653184;
 },
 GHC.Float.$wintegerLogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       c36YD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c36YE; else goto c36YF;
       c36YE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$wintegerLogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36YF: // global
           I64[Sp - 24] = block_c36Yy_info;
           _s2V4k::P64 = R3;
           R3 = R2;
           _s2V4j::P64 = R2;
           R2 = _s2V4k::P64;
           P64[Sp - 16] = _s2V4j::P64;
           P64[Sp - 8] = _s2V4k::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wintegerLogBase_info" {
     GHC.Float.$wintegerLogBase_info:
         const GHC.Float.$wintegerLogBase_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u36Zb_srtd;
 },
 section ""relreadonly" . u36Zc_srtd" {
     u36Zc_srtd:
         const S2VLN_srt+64;
         const 92;
         const 2305843009213693953;
         const 134217728;
 },
 _c36Yy() //  [R1]
         { []
         }
     {offset
       c36Yy: // global
           if (R1 == 1) goto c36YC; else goto c36YB;
       c36YC: // global
           R1 = 0;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c36YB: // global
           I64[Sp] = block_c36YI_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c36Yy_info" {
     block_c36Yy_info:
         const _c36Yy;
         const 2;
         const 18446744069414584350;
         const u36Zc_srtd;
 },
 section ""relreadonly" . u36Zd_srtd" {
     u36Zd_srtd:
         const S2VLN_srt+64;
         const 92;
         const 1;
         const 134217728;
 },
 _c36YI() //  [R1]
         { []
         }
     {offset
       c36YI: // global
           _s2V4k::P64 = P64[Sp + 16];
           if (R1 == 1) goto c36YU; else goto c36YP;
       c36YU: // global
           I64[Sp + 16] = block_c36YS_info;
           R1 = _s2V4k::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u36Za; else goto c36YV;
       u36Za: // global
           call _c36YS(R1) args: 0, res: 0, upd: 0;
       c36YV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c36YP: // global
           R3 = _s2V4k::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Logarithms.integerLogBase#_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36YI_info" {
     block_c36YI_info:
         const _c36YI;
         const 2;
         const 18446744069414584350;
         const u36Zd_srtd;
 },
 _c36YS() //  [R1]
         { []
         }
     {offset
       c36YS: // global
           if (R1 & 7 == 1) goto c36Z5; else goto c36Z1;
       c36Z5: // global
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
       c36Z1: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36YS_info" {
     block_c36YS_info:
         const _c36YS;
         const 0;
         const 4294967326;
         const S2VLN_srt+808;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.532010394 UTC

[section ""data" . GHC.Float.integerLogBase_closure" {
     GHC.Float.integerLogBase_closure:
         const GHC.Float.integerLogBase_info;
         const 0;
 },
 GHC.Float.integerLogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       c36ZG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c36ZK; else goto c36ZL;
       c36ZK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.integerLogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c36ZL: // global
           I64[Sp - 8] = block_c36ZE_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Float.$wintegerLogBase_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.integerLogBase_info" {
     GHC.Float.integerLogBase_info:
         const GHC.Float.integerLogBase_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2VLN_srt+800;
 },
 _c36ZE() //  [R1]
         { []
         }
     {offset
       c36ZE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c36ZO; else goto c36ZN;
       c36ZO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c36ZN: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c36ZE_info" {
     block_c36ZE_info:
         const _c36ZE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.540241516 UTC

[section ""data" . GHC.Float.$dmexponent_closure" {
     GHC.Float.$dmexponent_closure:
         const GHC.Float.$dmexponent_info;
         const 0;
 },
 GHC.Float.$dmexponent_entry() //  [R2, R3]
         { []
         }
     {offset
       c3704: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3705; else goto c3706;
       c3705: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$dmexponent_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3706: // global
           I64[Sp - 24] = block_c3702_info;
           _s2V4s::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _s2V4s::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Float.decodeFloat_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmexponent_info" {
     GHC.Float.$dmexponent_info:
         const GHC.Float.$dmexponent_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+824;
 },
 _c3702() //  [R1]
         { []
         }
     {offset
       c3702: // global
           I64[Sp - 8] = block_c3709_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3702_info" {
     block_c3702_info:
         const _c3702;
         const 2;
         const 4294967326;
         const S2VLN_srt+832;
 },
 _c3709() //  [R1]
         { []
         }
     {offset
       c3709: // global
           if (R1 == 1) goto c370B; else goto c370t;
       c370B: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c370t: // global
           _s2V4w::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c370e_info;
           R1 = _s2V4w::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u370C; else goto c370f;
       u370C: // global
           call _c370e(R1) args: 0, res: 0, upd: 0;
       c370f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3709_info" {
     block_c3709_info:
         const _c3709;
         const 3;
         const 30;
 },
 _c370e() //  [R1]
         { []
         }
     {offset
       c370e: // global
           _s2V4s::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c370j_info;
           R2 = _s2V4s::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c370e_info" {
     block_c370e_info:
         const _c370e;
         const 2;
         const 30;
 },
 _c370j() //  [R1]
         { []
         }
     {offset
       c370j: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c370x; else goto c370w;
       c370x: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c370w: // global
           _s2V4C::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V4C::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c370j_info" {
     block_c370j_info:
         const _c370j;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.552997497 UTC

[section ""data" . GHC.Float.$dmsignificand_closure" {
     GHC.Float.$dmsignificand_closure:
         const GHC.Float.$dmsignificand_info;
 },
 sat_s2V4M_entry() //  [R1]
         { []
         }
     {offset
       c371c: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c371j; else goto c371k;
       c371j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c371k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c371a_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V4M_info" {
     sat_s2V4M_info:
         const sat_s2V4M_entry;
         const 2;
         const 18;
 },
 _c371a() //  [R1]
         { []
         }
     {offset
       c371a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c371n; else goto c371m;
       c371n: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c371m: // global
           _s2V4L::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V4L::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c371a_info" {
     block_c371a_info:
         const _c371a;
         const 0;
         const 30;
 },
 sat_s2V4I_entry() //  [R1]
         { []
         }
     {offset
       c371u: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c371v; else goto c371w;
       c371v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c371w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c371s_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.decodeFloat_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V4I_info" {
     sat_s2V4I_info:
         const sat_s2V4I_entry;
         const 2;
         const 18;
 },
 _c371s() //  [R1]
         { []
         }
     {offset
       c371s: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c371s_info" {
     block_c371s_info:
         const _c371s;
         const 0;
         const 30;
 },
 GHC.Float.$dmsignificand_entry() //  [R2, R3]
         { []
         }
     {offset
       c371A: // global
           _s2V4E::P64 = R3;
           _s2V4D::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c371B; else goto c371C;
       c371C: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c371E; else goto c371D;
       c371E: // global
           HpAlloc = 64;
           goto c371B;
       c371B: // global
           R3 = _s2V4E::P64;
           R2 = _s2V4D::P64;
           R1 = GHC.Float.$dmsignificand_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c371D: // global
           I64[Hp - 56] = sat_s2V4M_info;
           P64[Hp - 40] = _s2V4D::P64;
           P64[Hp - 32] = _s2V4E::P64;
           I64[Hp - 24] = sat_s2V4I_info;
           P64[Hp - 8] = _s2V4D::P64;
           P64[Hp] = _s2V4E::P64;
           R2 = _s2V4D::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmsignificand_info" {
     GHC.Float.$dmsignificand_info:
         const GHC.Float.$dmsignificand_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.564155907 UTC

[section ""data" . GHC.Float.$fRealFloatDouble3_closure" {
     GHC.Float.$fRealFloatDouble3_closure:
         const GHC.Types.I#_con_info;
         const (-1021);
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.566664521 UTC

[section ""data" . GHC.Float.$fRealFloatDouble2_closure" {
     GHC.Float.$fRealFloatDouble2_closure:
         const GHC.Types.I#_con_info;
         const 1024;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.568589834 UTC

[section ""data" . GHC.Float.$fRealFloatDouble1_closure" {
     GHC.Float.$fRealFloatDouble1_closure:
         const (,)_con_info;
         const GHC.Float.$fRealFloatDouble3_closure+1;
         const GHC.Float.$fRealFloatDouble2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.570954701 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cfloatRange_closure" {
     GHC.Float.$fRealFloatDouble_$cfloatRange_closure:
         const GHC.Float.$fRealFloatDouble_$cfloatRange_info;
 },
 GHC.Float.$fRealFloatDouble_$cfloatRange_entry() //  []
         { []
         }
     {offset
       c372c: // global
           R1 = GHC.Float.$fRealFloatDouble1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cfloatRange_info" {
     GHC.Float.$fRealFloatDouble_$cfloatRange_info:
         const GHC.Float.$fRealFloatDouble_$cfloatRange_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.581013487 UTC

[section ""data" . GHC.Float.$w$catan2_closure" {
     GHC.Float.$w$catan2_closure:
         const GHC.Float.$w$catan2_info;
 },
 GHC.Float.$w$catan2_slow() //  [R1]
         { []
         }
     {offset
       c372l: // global
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$catan2_entry(D1, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2V4U_entry() //  [R1]
         { []
         }
     {offset
       c372L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c372M; else goto c372N;
       c372M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c372N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.negateDouble_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V4U_info" {
     sat_s2V4U_info:
         const sat_s2V4U_entry;
         const 1;
         const 16;
 },
 GHC.Float.$w$catan2_entry() //  [R2, D1]
         { []
         }
     {offset
       c372R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c372S; else goto c372T;
       c372S: // global
           R1 = GHC.Float.$w$catan2_closure;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c372T: // global
           if (%MO_F_Gt_W64(D1, 0.0 :: W64)) goto c372Q; else goto c372P;
       c372Q: // global
           I64[Sp - 16] = block_c375z_info;
           R1 = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u375S; else goto c375A;
       u375S: // global
           call _c375z(R1) args: 0, res: 0, upd: 0;
       c375A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c372P: // global
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto c375n; else goto u375K;
       c375n: // global
           I64[Sp - 24] = block_c375m_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u375T; else goto c375o;
       u375T: // global
           call _c375m(R1) args: 0, res: 0, upd: 0;
       c375o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u375K: // global
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call _s2V4R() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Float.$w$catan2_info" {
     GHC.Float.$w$catan2_info:
         const GHC.Float.$w$catan2_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 130;
         const GHC.Float.$w$catan2_slow;
 },
 _c375z() //  [R1]
         { []
         }
     {offset
       c375z: // global
           (_c375H::F64) = call MO_F64_Atan(%MO_F_Quot_W64(F64[R1 + 7],
                                                           F64[Sp + 8]));
           D1 = _c375H::F64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c375z_info" {
     block_c375z_info:
         const _c375z;
         const 65;
         const 30;
 },
 _c375m() //  [R1]
         { []
         }
     {offset
       c375m: // global
           if (%MO_F_Gt_W64(F64[R1 + 7],
                            0.0 :: W64)) goto c375x; else goto u375L;
       c375x: // global
           D1 = 1.5707963267948966 :: W64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       u375L: // global
           Sp = Sp + 8;
           call _s2V4R() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c375m_info" {
     block_c375m_info:
         const _c375m;
         const 130;
         const 30;
 },
 _s2V4R() //  []
         { []
         }
     {offset
       s2V4R: // global
           if (%MO_F_Lt_W64(F64[Sp + 8],
                            0.0 :: W64)) goto c374V; else goto u3764;
       c374V: // global
           I64[Sp - 8] = block_c374U_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3763; else goto c374W;
       u3763: // global
           call _c374U(R1) args: 0, res: 0, upd: 0;
       c374W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3764: // global
           call _s2V4S() args: 0, res: 0, upd: 0;
     }
 },
 _c374U() //  [R1]
         { []
         }
     {offset
       c374U: // global
           _s2V5v::F64 = F64[R1 + 7];
           if (%MO_F_Gt_W64(_s2V5v::F64,
                            0.0 :: W64)) goto c375f; else goto u375M;
       c375f: // global
           (_c375a::F64) = call MO_F64_Atan(%MO_F_Quot_W64(_s2V5v::F64,
                                                           F64[Sp + 16]));
           D1 = %MO_F_Add_W64(_c375a::F64, 3.141592653589793 :: W64);
           Sp = Sp + 24;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       u375M: // global
           Sp = Sp + 8;
           call _s2V4S() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c374U_info" {
     block_c374U_info:
         const _c374U;
         const 130;
         const 30;
 },
 _s2V4S() //  []
         { []
         }
     {offset
       s2V4S: // global
           if (%MO_F_Le_W64(F64[Sp + 8],
                            0.0 :: W64)) goto c374D; else goto u3766;
       c374D: // global
           I64[Sp - 8] = block_c374C_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3765; else goto c374E;
       u3765: // global
           call _c374C(R1) args: 0, res: 0, upd: 0;
       c374E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3766: // global
           call _s2V4W() args: 0, res: 0, upd: 0;
     }
 },
 _c374C() //  [R1]
         { []
         }
     {offset
       c374C: // global
           if (%MO_F_Lt_W64(F64[R1 + 7],
                            0.0 :: W64)) goto u375Z; else goto u375N;
       u375Z: // global
           call _c372F() args: 0, res: 0, upd: 0;
       u375N: // global
           Sp = Sp + 8;
           call _s2V4W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c374C_info" {
     block_c374C_info:
         const _c374C;
         const 130;
         const 30;
 },
 _s2V4W() //  []
         { []
         }
     {offset
       s2V4W: // global
           if (%MO_F_Lt_W64(F64[Sp + 8],
                            0.0 :: W64)) goto c374k; else goto u3768;
       c374k: // global
           I64[Sp - 8] = block_c374j_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3767; else goto c374l;
       u3767: // global
           call _c374j(R1) args: 0, res: 0, upd: 0;
       c374l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3768: // global
           call _s2V4X() args: 0, res: 0, upd: 0;
     }
 },
 _c374j() //  [R1]
         { []
         }
     {offset
       c374j: // global
           (_s2V5n::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[R1 + 7]);
           if (_s2V5n::I64 == 0) goto u375O; else goto u375X;
       u375O: // global
           Sp = Sp + 8;
           call _s2V4X() args: 0, res: 0, upd: 0;
       u375X: // global
           call _c372F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c374j_info" {
     block_c374j_info:
         const _c374j;
         const 130;
         const 30;
 },
 _s2V4X() //  []
         { []
         }
     {offset
       s2V4X: // global
           _s2V4O::P64 = P64[Sp];
           (_s2V51::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[Sp + 8]);
           if (_s2V51::I64 == 0) goto u375P; else goto c3740;
       u375P: // global
           I64[Sp - 8] = _s2V51::I64;
           Sp = Sp - 8;
           call _s2V52() args: 0, res: 0, upd: 0;
       c3740: // global
           I64[Sp - 16] = block_c373Y_info;
           R1 = _s2V4O::P64;
           I64[Sp - 8] = _s2V51::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3769; else goto c3741;
       u3769: // global
           call _c373Y(R1) args: 0, res: 0, upd: 0;
       c3741: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c373Y() //  [R1]
         { []
         }
     {offset
       c373Y: // global
           (_s2V5f::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[R1 + 7]);
           if (_s2V5f::I64 == 0) goto u375Q; else goto u375R;
       u375Q: // global
           Sp = Sp + 8;
           call _s2V52() args: 0, res: 0, upd: 0;
       u375R: // global
           Sp = Sp + 8;
           call _c372F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c373Y_info" {
     block_c373Y_info:
         const _c373Y;
         const 323;
         const 30;
 },
 _s2V52() //  []
         { []
         }
     {offset
       s2V52: // global
           I64[Sp - 8] = block_c373o_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u376b; else goto c373q;
       u376b: // global
           call _c373o(R1) args: 0, res: 0, upd: 0;
       c373q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c373o() //  [R1]
         { []
         }
     {offset
       c373o: // global
           _s2V4P::F64 = F64[Sp + 24];
           _s2V54::F64 = F64[R1 + 7];
           if (%MO_F_Eq_W64(_s2V54::F64,
                            0.0 :: W64)) goto c373V; else goto c373A;
       c373V: // global
           if (%MO_F_Lt_W64(_s2V4P::F64,
                            0.0 :: W64)) goto c373U; else goto c373T;
       c373T: // global
           if (I64[Sp + 8] != 0) goto c373U; else goto c373R;
       c373U: // global
           D1 = 3.141592653589793 :: W64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       c373R: // global
           if (%MO_F_Eq_W64(_s2V4P::F64,
                            0.0 :: W64)) goto c373Q; else goto c373P;
       c373Q: // global
           D1 = _s2V54::F64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       c373P: // global
           D1 = %MO_F_Add_W64(_s2V4P::F64, _s2V54::F64);
           Sp = Sp + 32;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       c373A: // global
           D1 = %MO_F_Add_W64(_s2V4P::F64, _s2V54::F64);
           Sp = Sp + 32;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c373o_info" {
     block_c373o_info:
         const _c373o;
         const 451;
         const 30;
 },
 _c372F() //  []
         { []
         }
     {offset
       c372F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3733; else goto c3732;
       c3733: // global
           HpAlloc = 24;
           I64[Sp] = block_c372F_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3732: // global
           I64[Hp - 16] = sat_s2V4U_info;
           P64[Hp] = P64[Sp + 8];
           _s2V4P::F64 = F64[Sp + 16];
           I64[Sp + 16] = block_c372W_info;
           D1 = _s2V4P::F64;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c372F_info" {
     block_c372F_info:
         const _c372F;
         const 130;
         const 30;
 },
 _c372W() //  [D1]
         { []
         }
     {offset
       c372W: // global
           D1 = %MO_F_Neg_W64(D1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c372W_info" {
     block_c372W_info:
         const _c372W;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.610168894 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$catan2_closure" {
     GHC.Float.$fRealFloatDouble_$catan2_closure:
         const GHC.Float.$fRealFloatDouble_$catan2_info;
 },
 GHC.Float.$fRealFloatDouble_$catan2_entry() //  [R2, R3]
         { []
         }
     {offset
       c377W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3784; else goto c3785;
       c3784: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$catan2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3785: // global
           I64[Sp - 16] = block_c377T_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u378a; else goto c377U;
       u378a: // global
           call _c377T(R1) args: 0, res: 0, upd: 0;
       c377U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$catan2_info" {
     GHC.Float.$fRealFloatDouble_$catan2_info:
         const GHC.Float.$fRealFloatDouble_$catan2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c377T() //  [R1]
         { []
         }
     {offset
       c377T: // global
           _s2V5G::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c377Z_info;
           D1 = F64[R1 + 7];
           R2 = _s2V5G::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c377T_info" {
     block_c377T_info:
         const _c377T;
         const 1;
         const 30;
 },
 _c377Z() //  [D1]
         { []
         }
     {offset
       c377Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3789; else goto c3788;
       c3789: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3788: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c377Z_info" {
     block_c377Z_info:
         const _c377Z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.617216765 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_closure" {
     GHC.Float.$fRealFloatDouble_closure:
         const GHC.Float.C:RealFloat_con_info;
         const GHC.Float.$fRealFracDouble_closure+1;
         const GHC.Float.$fFloatingDouble_closure+1;
         const GHC.Float.$fRealFloatDouble_$cfloatRadix_closure+1;
         const GHC.Float.$fRealFloatDouble_$cfloatDigits_closure+1;
         const GHC.Float.$fRealFloatDouble_$cfloatRange_closure+1;
         const GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure+1;
         const GHC.Float.$fRealFloatDouble_$cencodeFloat_closure+2;
         const GHC.Float.$fRealFloatDouble_$cexponent_closure+1;
         const GHC.Float.$fRealFloatDouble_$csignificand_closure+1;
         const GHC.Float.$fRealFloatDouble_$cscaleFloat_closure+2;
         const GHC.Float.$fRealFloatDouble_$cisNaN_closure+1;
         const GHC.Float.$fRealFloatDouble_$cisInfinite_closure+1;
         const GHC.Float.$fRealFloatDouble_$cisDenormalized_closure+1;
         const GHC.Float.$fRealFloatDouble_$cisNegativeZero_closure+1;
         const GHC.Float.$fRealFloatDouble_$cisIEEE_closure+1;
         const GHC.Float.$fRealFloatDouble_$catan2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.619857845 UTC

[section ""data" . GHC.Float.$fRealFloatFloat3_closure" {
     GHC.Float.$fRealFloatFloat3_closure:
         const GHC.Types.I#_con_info;
         const (-125);
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.6218199 UTC

[section ""data" . GHC.Float.$fRealFloatFloat2_closure" {
     GHC.Float.$fRealFloatFloat2_closure:
         const GHC.Types.I#_con_info;
         const 128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.623737835 UTC

[section ""data" . GHC.Float.$fRealFloatFloat1_closure" {
     GHC.Float.$fRealFloatFloat1_closure:
         const (,)_con_info;
         const GHC.Float.$fRealFloatFloat3_closure+1;
         const GHC.Float.$fRealFloatFloat2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.626615791 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cfloatRange_closure" {
     GHC.Float.$fRealFloatFloat_$cfloatRange_closure:
         const GHC.Float.$fRealFloatFloat_$cfloatRange_info;
 },
 GHC.Float.$fRealFloatFloat_$cfloatRange_entry() //  []
         { []
         }
     {offset
       c378w: // global
           R1 = GHC.Float.$fRealFloatFloat1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cfloatRange_info" {
     GHC.Float.$fRealFloatFloat_$cfloatRange_info:
         const GHC.Float.$fRealFloatFloat_$cfloatRange_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.636721368 UTC

[section ""data" . GHC.Float.$w$catan1_closure" {
     GHC.Float.$w$catan1_closure:
         const GHC.Float.$w$catan1_info;
 },
 GHC.Float.$w$catan1_slow() //  [R1]
         { []
         }
     {offset
       c378F: // global
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$catan1_entry(F1, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2V5S_entry() //  [R1]
         { []
         }
     {offset
       c3795: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3796; else goto c3797;
       c3796: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3797: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.negateFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V5S_info" {
     sat_s2V5S_info:
         const sat_s2V5S_entry;
         const 1;
         const 16;
 },
 GHC.Float.$w$catan1_entry() //  [R2, F1]
         { []
         }
     {offset
       c379b: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c379c; else goto c379d;
       c379c: // global
           R1 = GHC.Float.$w$catan1_closure;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c379d: // global
           if (%MO_F_Gt_W32(F1, 0.0 :: W32)) goto c379a; else goto c3799;
       c379a: // global
           I64[Sp - 16] = block_c37bT_info;
           R1 = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u37cc; else goto c37bU;
       u37cc: // global
           call _c37bT(R1) args: 0, res: 0, upd: 0;
       c37bU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3799: // global
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto c37bH; else goto u37c4;
       c37bH: // global
           I64[Sp - 24] = block_c37bG_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u37cd; else goto c37bI;
       u37cd: // global
           call _c37bG(R1) args: 0, res: 0, upd: 0;
       c37bI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u37c4: // global
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call _s2V5P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Float.$w$catan1_info" {
     GHC.Float.$w$catan1_info:
         const GHC.Float.$w$catan1_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 130;
         const GHC.Float.$w$catan1_slow;
 },
 _c37bT() //  [R1]
         { []
         }
     {offset
       c37bT: // global
           (_c37c1::F32) = call MO_F32_Atan(%MO_F_Quot_W32(F32[R1 + 7],
                                                           F32[Sp + 8]));
           F1 = _c37c1::F32;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37bT_info" {
     block_c37bT_info:
         const _c37bT;
         const 65;
         const 30;
 },
 _c37bG() //  [R1]
         { []
         }
     {offset
       c37bG: // global
           if (%MO_F_Gt_W32(F32[R1 + 7],
                            0.0 :: W32)) goto c37bR; else goto u37c5;
       c37bR: // global
           F1 = 1.5707963705062866 :: W32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       u37c5: // global
           Sp = Sp + 8;
           call _s2V5P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37bG_info" {
     block_c37bG_info:
         const _c37bG;
         const 130;
         const 30;
 },
 _s2V5P() //  []
         { []
         }
     {offset
       s2V5P: // global
           if (%MO_F_Lt_W32(F32[Sp + 8],
                            0.0 :: W32)) goto c37bf; else goto u37co;
       c37bf: // global
           I64[Sp - 8] = block_c37be_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37cn; else goto c37bg;
       u37cn: // global
           call _c37be(R1) args: 0, res: 0, upd: 0;
       c37bg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u37co: // global
           call _s2V5Q() args: 0, res: 0, upd: 0;
     }
 },
 _c37be() //  [R1]
         { []
         }
     {offset
       c37be: // global
           _s2V6t::F32 = F32[R1 + 7];
           if (%MO_F_Gt_W32(_s2V6t::F32,
                            0.0 :: W32)) goto c37bz; else goto u37c6;
       c37bz: // global
           (_c37bu::F32) = call MO_F32_Atan(%MO_F_Quot_W32(_s2V6t::F32,
                                                           F32[Sp + 16]));
           F1 = %MO_F_Add_W32(_c37bu::F32, 3.141592653589793 :: W32);
           Sp = Sp + 24;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       u37c6: // global
           Sp = Sp + 8;
           call _s2V5Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37be_info" {
     block_c37be_info:
         const _c37be;
         const 130;
         const 30;
 },
 _s2V5Q() //  []
         { []
         }
     {offset
       s2V5Q: // global
           if (%MO_F_Le_W32(F32[Sp + 8],
                            0.0 :: W32)) goto c37aX; else goto u37cq;
       c37aX: // global
           I64[Sp - 8] = block_c37aW_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37cp; else goto c37aY;
       u37cp: // global
           call _c37aW(R1) args: 0, res: 0, upd: 0;
       c37aY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u37cq: // global
           call _s2V5U() args: 0, res: 0, upd: 0;
     }
 },
 _c37aW() //  [R1]
         { []
         }
     {offset
       c37aW: // global
           if (%MO_F_Lt_W32(F32[R1 + 7],
                            0.0 :: W32)) goto u37cj; else goto u37c7;
       u37cj: // global
           call _c378Z() args: 0, res: 0, upd: 0;
       u37c7: // global
           Sp = Sp + 8;
           call _s2V5U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37aW_info" {
     block_c37aW_info:
         const _c37aW;
         const 130;
         const 30;
 },
 _s2V5U() //  []
         { []
         }
     {offset
       s2V5U: // global
           if (%MO_F_Lt_W32(F32[Sp + 8],
                            0.0 :: W32)) goto c37aE; else goto u37cs;
       c37aE: // global
           I64[Sp - 8] = block_c37aD_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37cr; else goto c37aF;
       u37cr: // global
           call _c37aD(R1) args: 0, res: 0, upd: 0;
       c37aF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u37cs: // global
           call _s2V5V() args: 0, res: 0, upd: 0;
     }
 },
 _c37aD() //  [R1]
         { []
         }
     {offset
       c37aD: // global
           (_s2V6l::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[R1 + 7]);
           if (_s2V6l::I64 == 0) goto u37c8; else goto u37ch;
       u37c8: // global
           Sp = Sp + 8;
           call _s2V5V() args: 0, res: 0, upd: 0;
       u37ch: // global
           call _c378Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37aD_info" {
     block_c37aD_info:
         const _c37aD;
         const 130;
         const 30;
 },
 _s2V5V() //  []
         { []
         }
     {offset
       s2V5V: // global
           _s2V5M::P64 = P64[Sp];
           (_s2V5Z::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[Sp + 8]);
           if (_s2V5Z::I64 == 0) goto u37c9; else goto c37ak;
       u37c9: // global
           I64[Sp - 8] = _s2V5Z::I64;
           Sp = Sp - 8;
           call _s2V60() args: 0, res: 0, upd: 0;
       c37ak: // global
           I64[Sp - 16] = block_c37ai_info;
           R1 = _s2V5M::P64;
           I64[Sp - 8] = _s2V5Z::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u37ct; else goto c37al;
       u37ct: // global
           call _c37ai(R1) args: 0, res: 0, upd: 0;
       c37al: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c37ai() //  [R1]
         { []
         }
     {offset
       c37ai: // global
           (_s2V6d::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[R1 + 7]);
           if (_s2V6d::I64 == 0) goto u37ca; else goto u37cb;
       u37ca: // global
           Sp = Sp + 8;
           call _s2V60() args: 0, res: 0, upd: 0;
       u37cb: // global
           Sp = Sp + 8;
           call _c378Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37ai_info" {
     block_c37ai_info:
         const _c37ai;
         const 323;
         const 30;
 },
 _s2V60() //  []
         { []
         }
     {offset
       s2V60: // global
           I64[Sp - 8] = block_c379I_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37cv; else goto c379K;
       u37cv: // global
           call _c379I(R1) args: 0, res: 0, upd: 0;
       c379K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c379I() //  [R1]
         { []
         }
     {offset
       c379I: // global
           _s2V5N::F32 = F32[Sp + 24];
           _s2V62::F32 = F32[R1 + 7];
           if (%MO_F_Eq_W32(_s2V62::F32,
                            0.0 :: W32)) goto c37af; else goto c379U;
       c37af: // global
           if (%MO_F_Lt_W32(_s2V5N::F32,
                            0.0 :: W32)) goto c37ae; else goto c37ad;
       c37ad: // global
           if (I64[Sp + 8] != 0) goto c37ae; else goto c37ab;
       c37ae: // global
           F1 = 3.141592653589793 :: W32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       c37ab: // global
           if (%MO_F_Eq_W32(_s2V5N::F32,
                            0.0 :: W32)) goto c37aa; else goto c37a9;
       c37aa: // global
           F1 = _s2V62::F32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       c37a9: // global
           F1 = %MO_F_Add_W32(_s2V5N::F32, _s2V62::F32);
           Sp = Sp + 32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       c379U: // global
           F1 = %MO_F_Add_W32(_s2V5N::F32, _s2V62::F32);
           Sp = Sp + 32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c379I_info" {
     block_c379I_info:
         const _c379I;
         const 451;
         const 30;
 },
 _c378Z() //  []
         { []
         }
     {offset
       c378Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c379n; else goto c379m;
       c379n: // global
           HpAlloc = 24;
           I64[Sp] = block_c378Z_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c379m: // global
           I64[Hp - 16] = sat_s2V5S_info;
           P64[Hp] = P64[Sp + 8];
           _s2V5N::F32 = F32[Sp + 16];
           I64[Sp + 16] = block_c379g_info;
           F1 = _s2V5N::F32;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c378Z_info" {
     block_c378Z_info:
         const _c378Z;
         const 130;
         const 30;
 },
 _c379g() //  [F1]
         { []
         }
     {offset
       c379g: // global
           F1 = %MO_F_Neg_W32(F1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c379g_info" {
     block_c379g_info:
         const _c379g;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.67081604 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$catan2_closure" {
     GHC.Float.$fRealFloatFloat_$catan2_closure:
         const GHC.Float.$fRealFloatFloat_$catan2_info;
 },
 GHC.Float.$fRealFloatFloat_$catan2_entry() //  [R2, R3]
         { []
         }
     {offset
       c37eg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37eo; else goto c37ep;
       c37eo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$catan2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c37ep: // global
           I64[Sp - 16] = block_c37ed_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u37eu; else goto c37ee;
       u37eu: // global
           call _c37ed(R1) args: 0, res: 0, upd: 0;
       c37ee: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$catan2_info" {
     GHC.Float.$fRealFloatFloat_$catan2_info:
         const GHC.Float.$fRealFloatFloat_$catan2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c37ed() //  [R1]
         { []
         }
     {offset
       c37ed: // global
           _s2V6E::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c37ej_info;
           F1 = F32[R1 + 7];
           R2 = _s2V6E::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37ed_info" {
     block_c37ed_info:
         const _c37ed;
         const 1;
         const 30;
 },
 _c37ej() //  [F1]
         { []
         }
     {offset
       c37ej: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37et; else goto c37es;
       c37et: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c37es: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37ej_info" {
     block_c37ej_info:
         const _c37ej;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.678070433 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_closure" {
     GHC.Float.$fRealFloatFloat_closure:
         const GHC.Float.C:RealFloat_con_info;
         const GHC.Float.$fRealFracFloat_closure+1;
         const GHC.Float.$fFloatingFloat_closure+1;
         const GHC.Float.$fRealFloatFloat_$cfloatRadix_closure+1;
         const GHC.Float.$fRealFloatFloat_$cfloatDigits_closure+1;
         const GHC.Float.$fRealFloatFloat_$cfloatRange_closure+1;
         const GHC.Float.$fRealFloatFloat_$cdecodeFloat_closure+1;
         const GHC.Float.$fRealFloatFloat_$cencodeFloat_closure+2;
         const GHC.Float.$fRealFloatFloat_$cexponent_closure+1;
         const GHC.Float.$fRealFloatFloat_$csignificand_closure+1;
         const GHC.Float.$fRealFloatFloat_$cscaleFloat_closure+2;
         const GHC.Float.$fRealFloatFloat_$cisNaN_closure+1;
         const GHC.Float.$fRealFloatFloat_$cisInfinite_closure+1;
         const GHC.Float.$fRealFloatFloat_$cisDenormalized_closure+1;
         const GHC.Float.$fRealFloatFloat_$cisNegativeZero_closure+1;
         const GHC.Float.$fRealFloatFloat_$cisIEEE_closure+1;
         const GHC.Float.$fRealFloatFloat_$catan2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.680112626 UTC

[section ""data" . GHC.Float.$fShowDouble3_closure" {
     GHC.Float.$fShowDouble3_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.686409901 UTC

[section ""data" . GHC.Float.$w$sshowSignedFloat1_closure" {
     GHC.Float.$w$sshowSignedFloat1_closure:
         const GHC.Float.$w$sshowSignedFloat1_info;
 },
 GHC.Float.$w$sshowSignedFloat1_slow() //  [R1]
         { []
         }
     {offset
       c37eL: // global
           F1 = F32[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 24;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2,
                                                     R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s2V6P_entry() //  [R1]
         { []
         }
     {offset
       c37f5: // global
           _s2V6P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c37f8; else goto c37f9;
       c37f9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37fb; else goto c37fa;
       c37fb: // global
           HpAlloc = 16;
           goto c37f8;
       c37f8: // global
           R1 = _s2V6P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37fa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2V6P::P64;
           _s2V6J::P64 = P64[_s2V6P::P64 + 16];
           _s2V6Q::F32 = %MO_F_Neg_W32(F32[_s2V6P::P64 + 24]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2V6Q::F32;
           R2 = Hp - 7;
           R1 = _s2V6J::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s2V6P_info" {
     g_s2V6P_info:
         const g_s2V6P_entry;
         const 4294967297;
         const 19;
 },
 sat_s2V6V_entry() //  [R1, R2]
         { []
         }
     {offset
       c37fm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c37fq; else goto c37fp;
       c37fq: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c37fp: // global
           _s2V6P::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s2V6P::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2V6V_info" {
     sat_s2V6V_info:
         const sat_s2V6V_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s2V6Y_entry() //  [R1]
         { []
         }
     {offset
       c37fC: // global
           _s2V6Y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c37fD; else goto c37fE;
       c37fE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37fG; else goto c37fF;
       c37fG: // global
           HpAlloc = 24;
           goto c37fD;
       c37fD: // global
           R1 = _s2V6Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37fF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2V6Y::P64;
           _s2V6P::P64 = P64[_s2V6Y::P64 + 16];
           _s2V6W::P64 = P64[_s2V6Y::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s2V6W::P64;
           R2 = Hp - 14;
           R1 = _s2V6P::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V6Y_info" {
     sat_s2V6Y_info:
         const sat_s2V6Y_entry;
         const 2;
         const 18;
 },
 sat_s2V70_entry() //  [R1, R2]
         { []
         }
     {offset
       c37fJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c37fN; else goto c37fM;
       c37fN: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c37fM: // global
           _s2V6P::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s2V6Y_info;
           P64[Hp - 56] = _s2V6P::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2V70_info" {
     sat_s2V70_info:
         const sat_s2V70_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Float.$w$sshowSignedFloat1_entry() //  [R2, R3, F1]
         { []
         }
     {offset
       c37fT: // global
           _s2V6L::F32 = F1;
           _s2V6K::P64 = R3;
           _s2V6J::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c37fU; else goto c37fV;
       c37fV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37fX; else goto c37fW;
       c37fX: // global
           HpAlloc = 16;
           goto c37fU;
       c37fU: // global
           R1 = GHC.Float.$w$sshowSignedFloat1_closure;
           P64[Sp - 24] = _s2V6J::P64;
           P64[Sp - 16] = _s2V6K::P64;
           F32[Sp - 8] = _s2V6L::F32;
           Sp = Sp - 24;
           call (stg_gc_fun)(R1) args: 32, res: 0, upd: 8;
       c37fW: // global
           if (%MO_F_Lt_W32(_s2V6L::F32,
                            0.0 :: W32)) goto c37fS; else goto c37fR;
       c37fR: // global
           (_s2V75::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(_s2V6L::F32);
           if (_s2V75::I64 != 0) goto c37fS; else goto c37ge;
       c37fS: // global
           Hp = Hp - 16;
           I64[Sp - 24] = block_c37eU_info;
           R1 = _s2V6K::P64;
           P64[Sp - 16] = _s2V6J::P64;
           F32[Sp - 8] = _s2V6L::F32;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u37gf; else goto c37eV;
       u37gf: // global
           call _c37eU(R1) args: 0, res: 0, upd: 0;
       c37eV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c37ge: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s2V6L::F32;
           R2 = Hp - 7;
           R1 = _s2V6J::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sshowSignedFloat1_info" {
     GHC.Float.$w$sshowSignedFloat1_info:
         const GHC.Float.$w$sshowSignedFloat1_entry;
         const 0;
         const 14;
         const 12884901888;
         const 0;
         const 259;
         const GHC.Float.$w$sshowSignedFloat1_slow;
 },
 _c37eU() //  [R1]
         { []
         }
     {offset
       c37eU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37g1; else goto c37g0;
       c37g1: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c37g0: // global
           _s2V6O::I64 = I64[R1 + 7];
           I64[Hp - 40] = g_s2V6P_info;
           P64[Hp - 24] = P64[Sp + 8];
           F32[Hp - 16] = F32[Sp + 16];
           _c37eZ::P64 = Hp - 40;
           if (%MO_S_Le_W64(_s2V6O::I64, 6)) goto c37g3; else goto c37g4;
       c37g3: // global
           I64[Hp - 8] = sat_s2V6V_info;
           P64[Hp] = _c37eZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c37g4: // global
           I64[Hp - 8] = sat_s2V70_info;
           P64[Hp] = _c37eZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37eU_info" {
     block_c37eU_info:
         const _c37eU;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.707353439 UTC

[section ""data" . GHC.Float.$fShowFloat_$sshowSignedFloat_closure" {
     GHC.Float.$fShowFloat_$sshowSignedFloat_closure:
         const GHC.Float.$fShowFloat_$sshowSignedFloat_info;
 },
 GHC.Float.$fShowFloat_$sshowSignedFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c37h0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c37h1; else goto c37h2;
       c37h1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowFloat_$sshowSignedFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c37h2: // global
           I64[Sp - 24] = block_c37gX_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u37h6; else goto c37gY;
       u37h6: // global
           call _c37gX(R1) args: 0, res: 0, upd: 0;
       c37gY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$sshowSignedFloat_info" {
     GHC.Float.$fShowFloat_$sshowSignedFloat_info:
         const GHC.Float.$fShowFloat_$sshowSignedFloat_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c37gX() //  [R1]
         { []
         }
     {offset
       c37gX: // global
           F1 = F32[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37gX_info" {
     block_c37gX_info:
         const _c37gX;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.718746419 UTC

[section ""data" . GHC.Float.$w$sshowSignedFloat_closure" {
     GHC.Float.$w$sshowSignedFloat_closure:
         const GHC.Float.$w$sshowSignedFloat_info;
 },
 GHC.Float.$w$sshowSignedFloat_slow() //  [R1]
         { []
         }
     {offset
       c37hh: // global
           D1 = F64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 24;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s2V7j_entry() //  [R1]
         { []
         }
     {offset
       c37hB: // global
           _s2V7j::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c37hE; else goto c37hF;
       c37hF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37hH; else goto c37hG;
       c37hH: // global
           HpAlloc = 16;
           goto c37hE;
       c37hE: // global
           R1 = _s2V7j::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37hG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2V7j::P64;
           _s2V7d::P64 = P64[_s2V7j::P64 + 16];
           _s2V7k::F64 = %MO_F_Neg_W64(F64[_s2V7j::P64 + 24]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2V7k::F64;
           R2 = Hp - 7;
           R1 = _s2V7d::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s2V7j_info" {
     g_s2V7j_info:
         const g_s2V7j_entry;
         const 4294967297;
         const 19;
 },
 sat_s2V7p_entry() //  [R1, R2]
         { []
         }
     {offset
       c37hS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c37hW; else goto c37hV;
       c37hW: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c37hV: // global
           _s2V7j::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s2V7j::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2V7p_info" {
     sat_s2V7p_info:
         const sat_s2V7p_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s2V7s_entry() //  [R1]
         { []
         }
     {offset
       c37i8: // global
           _s2V7s::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c37i9; else goto c37ia;
       c37ia: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37ic; else goto c37ib;
       c37ic: // global
           HpAlloc = 24;
           goto c37i9;
       c37i9: // global
           R1 = _s2V7s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37ib: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2V7s::P64;
           _s2V7j::P64 = P64[_s2V7s::P64 + 16];
           _s2V7q::P64 = P64[_s2V7s::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s2V7q::P64;
           R2 = Hp - 14;
           R1 = _s2V7j::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V7s_info" {
     sat_s2V7s_info:
         const sat_s2V7s_entry;
         const 2;
         const 18;
 },
 sat_s2V7u_entry() //  [R1, R2]
         { []
         }
     {offset
       c37if: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c37ij; else goto c37ii;
       c37ij: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c37ii: // global
           _s2V7j::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s2V7s_info;
           P64[Hp - 56] = _s2V7j::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2V7u_info" {
     sat_s2V7u_info:
         const sat_s2V7u_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Float.$w$sshowSignedFloat_entry() //  [R2, R3, D1]
         { []
         }
     {offset
       c37ip: // global
           _s2V7f::F64 = D1;
           _s2V7e::P64 = R3;
           _s2V7d::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c37iq; else goto c37ir;
       c37ir: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37it; else goto c37is;
       c37it: // global
           HpAlloc = 16;
           goto c37iq;
       c37iq: // global
           R1 = GHC.Float.$w$sshowSignedFloat_closure;
           P64[Sp - 24] = _s2V7d::P64;
           P64[Sp - 16] = _s2V7e::P64;
           F64[Sp - 8] = _s2V7f::F64;
           Sp = Sp - 24;
           call (stg_gc_fun)(R1) args: 32, res: 0, upd: 8;
       c37is: // global
           if (%MO_F_Lt_W64(_s2V7f::F64,
                            0.0 :: W64)) goto c37io; else goto c37in;
       c37in: // global
           (_s2V7z::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(_s2V7f::F64);
           if (_s2V7z::I64 != 0) goto c37io; else goto c37iK;
       c37io: // global
           Hp = Hp - 16;
           I64[Sp - 24] = block_c37hq_info;
           R1 = _s2V7e::P64;
           P64[Sp - 16] = _s2V7d::P64;
           F64[Sp - 8] = _s2V7f::F64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u37iL; else goto c37hr;
       u37iL: // global
           call _c37hq(R1) args: 0, res: 0, upd: 0;
       c37hr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c37iK: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s2V7f::F64;
           R2 = Hp - 7;
           R1 = _s2V7d::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sshowSignedFloat_info" {
     GHC.Float.$w$sshowSignedFloat_info:
         const GHC.Float.$w$sshowSignedFloat_entry;
         const 0;
         const 14;
         const 12884901888;
         const 0;
         const 259;
         const GHC.Float.$w$sshowSignedFloat_slow;
 },
 _c37hq() //  [R1]
         { []
         }
     {offset
       c37hq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37ix; else goto c37iw;
       c37ix: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c37iw: // global
           _s2V7i::I64 = I64[R1 + 7];
           I64[Hp - 40] = g_s2V7j_info;
           P64[Hp - 24] = P64[Sp + 8];
           F64[Hp - 16] = F64[Sp + 16];
           _c37hv::P64 = Hp - 40;
           if (%MO_S_Le_W64(_s2V7i::I64, 6)) goto c37iz; else goto c37iA;
       c37iz: // global
           I64[Hp - 8] = sat_s2V7p_info;
           P64[Hp] = _c37hv::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c37iA: // global
           I64[Hp - 8] = sat_s2V7u_info;
           P64[Hp] = _c37hv::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37hq_info" {
     block_c37hq_info:
         const _c37hq;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.737006 UTC

[section ""data" . GHC.Float.$fShowDouble_$sshowSignedFloat_closure" {
     GHC.Float.$fShowDouble_$sshowSignedFloat_closure:
         const GHC.Float.$fShowDouble_$sshowSignedFloat_info;
 },
 GHC.Float.$fShowDouble_$sshowSignedFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c37jw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c37jx; else goto c37jy;
       c37jx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowDouble_$sshowSignedFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c37jy: // global
           I64[Sp - 24] = block_c37jt_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u37jC; else goto c37ju;
       u37jC: // global
           call _c37jt(R1) args: 0, res: 0, upd: 0;
       c37ju: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$sshowSignedFloat_info" {
     GHC.Float.$fShowDouble_$sshowSignedFloat_info:
         const GHC.Float.$fShowDouble_$sshowSignedFloat_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c37jt() //  [R1]
         { []
         }
     {offset
       c37jt: // global
           D1 = F64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37jt_info" {
     block_c37jt_info:
         const _c37jt;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.75178904 UTC

[section ""data" . GHC.Float.showSignedFloat_closure" {
     GHC.Float.showSignedFloat_closure:
         const GHC.Float.showSignedFloat_info;
         const 0;
 },
 $dNum_s2V7N_entry() //  [R1]
         { []
         }
     {offset
       c37k2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37k3; else goto c37k4;
       c37k3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37k4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s2V7N_info" {
     $dNum_s2V7N_info:
         const $dNum_s2V7N_entry;
         const 1;
         const 16;
 },
 sat_s2V83_entry() //  [R1]
         { []
         }
     {offset
       c37k9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37ka; else goto c37kb;
       c37ka: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37kb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V83_info" {
     sat_s2V83_info:
         const sat_s2V83_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+832;
 },
 sat_s2V7S_entry() //  [R1]
         { []
         }
     {offset
       c37ky: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37kz; else goto c37kA;
       c37kz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37kA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V7S_info" {
     sat_s2V7S_info:
         const sat_s2V7S_entry;
         const 2;
         const 18;
 },
 g_s2V7R_entry() //  [R1]
         { []
         }
     {offset
       c37kB: // global
           _s2V7R::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c37kC; else goto c37kD;
       c37kD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c37kF; else goto c37kE;
       c37kF: // global
           HpAlloc = 32;
           goto c37kC;
       c37kC: // global
           R1 = _s2V7R::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37kE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2V7R::P64;
           _s2V7I::P64 = P64[_s2V7R::P64 + 16];
           _s2V7K::P64 = P64[_s2V7R::P64 + 24];
           _s2V7N::P64 = P64[_s2V7R::P64 + 32];
           I64[Hp - 24] = sat_s2V7S_info;
           P64[Hp - 8] = _s2V7K::P64;
           P64[Hp] = _s2V7N::P64;
           R2 = Hp - 24;
           R1 = _s2V7I::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s2V7R_info" {
     g_s2V7R_info:
         const g_s2V7R_entry;
         const 3;
         const 15;
 },
 sat_s2V7W_entry() //  [R1, R2]
         { []
         }
     {offset
       c37kQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c37kU; else goto c37kT;
       c37kU: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c37kT: // global
           _s2V7R::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s2V7R::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2V7W_info" {
     sat_s2V7W_info:
         const sat_s2V7W_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s2V7Z_entry() //  [R1]
         { []
         }
     {offset
       c37l6: // global
           _s2V7Z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c37l7; else goto c37l8;
       c37l8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37la; else goto c37l9;
       c37la: // global
           HpAlloc = 24;
           goto c37l7;
       c37l7: // global
           R1 = _s2V7Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37l9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2V7Z::P64;
           _s2V7R::P64 = P64[_s2V7Z::P64 + 16];
           _s2V7X::P64 = P64[_s2V7Z::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s2V7X::P64;
           R2 = Hp - 14;
           R1 = _s2V7R::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V7Z_info" {
     sat_s2V7Z_info:
         const sat_s2V7Z_entry;
         const 2;
         const 18;
 },
 sat_s2V81_entry() //  [R1, R2]
         { []
         }
     {offset
       c37ld: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c37lh; else goto c37lg;
       c37lh: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c37lg: // global
           _s2V7R::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s2V7Z_info;
           P64[Hp - 56] = _s2V7R::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2V81_info" {
     sat_s2V81_info:
         const sat_s2V81_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Float.showSignedFloat_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c37li: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c37lj; else goto c37lk;
       c37lj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.showSignedFloat_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c37lk: // global
           I64[Sp - 40] = block_c37jQ_info;
           _s2V7H::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s2V7H::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.showSignedFloat_info" {
     GHC.Float.showSignedFloat_info:
         const GHC.Float.showSignedFloat_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2VLN_srt+832;
 },
 _c37jQ() //  [R1]
         { []
         }
     {offset
       c37jQ: // global
           I64[Sp] = block_c37jU_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37jQ_info" {
     block_c37jQ_info:
         const _c37jQ;
         const 4;
         const 4294967326;
         const S2VLN_srt+832;
 },
 _c37jU() //  [R1]
         { []
         }
     {offset
       c37jU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37lo; else goto c37ln;
       c37lo: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c37ln: // global
           I64[Hp - 40] = $dNum_s2V7N_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s2V83_info;
           _c37jY::P64 = Hp - 40;
           P64[Hp] = _c37jY::P64;
           I64[Sp - 16] = block_c37kc_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c37jY::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37jU_info" {
     block_c37jU_info:
         const _c37jU;
         const 4;
         const 4294967326;
         const S2VLN_srt+832;
 },
 _c37kc() //  [R1]
         { []
         }
     {offset
       c37kc: // global
           _c37k5::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c37lp_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = _c37k5::P64;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37kc_info" {
     block_c37kc_info:
         const _c37kc;
         const 6;
         const 30;
 },
 _c37lp() //  [R1]
         { []
         }
     {offset
       c37lp: // global
           if (R1 & 7 == 1) goto c37lE; else goto u37lV;
       c37lE: // global
           I64[Sp] = block_c37lB_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
       u37lV: // global
           Sp = Sp + 8;
           call _s2V7O() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37lp_info" {
     block_c37lp_info:
         const _c37lp;
         const 5;
         const 30;
 },
 _c37lB() //  [R1]
         { []
         }
     {offset
       c37lB: // global
           if (R1 & 7 == 1) goto c37lK; else goto u37lW;
       c37lK: // global
           R2 = P64[Sp + 40];
           R1 = P64[Sp + 24];
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       u37lW: // global
           Sp = Sp + 8;
           call _s2V7O() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37lB_info" {
     block_c37lB_info:
         const _c37lB;
         const 133;
         const 30;
 },
 _s2V7O() //  []
         { []
         }
     {offset
       s2V7O: // global
           I64[Sp - 8] = block_c37kl_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37lZ; else goto c37km;
       u37lZ: // global
           call _c37kl(R1) args: 0, res: 0, upd: 0;
       c37km: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c37kl() //  [R1]
         { []
         }
     {offset
       c37kl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c37lu; else goto c37lt;
       c37lu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c37lt: // global
           _s2V7Q::I64 = I64[R1 + 7];
           I64[Hp - 48] = g_s2V7R_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 8];
           _c37kq::P64 = Hp - 48;
           if (%MO_S_Le_W64(_s2V7Q::I64, 6)) goto c37lw; else goto c37lx;
       c37lw: // global
           I64[Hp - 8] = sat_s2V7W_info;
           P64[Hp] = _c37kq::P64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c37lx: // global
           I64[Hp - 8] = sat_s2V81_info;
           P64[Hp] = _c37kq::P64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37kl_info" {
     block_c37kl_info:
         const _c37kl;
         const 645;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.78959438 UTC

[section ""data" . GHC.Float.clamp_closure" {
     GHC.Float.clamp_closure:
         const GHC.Float.clamp_info;
 },
 GHC.Float.clamp_entry() //  [R2, R3]
         { []
         }
     {offset
       c37nf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c37nj; else goto c37nk;
       c37nj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.clamp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c37nk: // global
           I64[Sp - 16] = block_c37nc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u37nS; else goto c37nd;
       u37nS: // global
           call _c37nc(R1) args: 0, res: 0, upd: 0;
       c37nd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.clamp_info" {
     GHC.Float.clamp_info:
         const GHC.Float.clamp_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c37nc() //  [R1]
         { []
         }
     {offset
       c37nc: // global
           I64[Sp - 8] = block_c37ni_info;
           _s2V88::P64 = R1;
           _s2V89::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s2V89::I64;
           P64[Sp + 8] = _s2V88::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37nR; else goto c37nm;
       u37nR: // global
           call _c37ni(R1) args: 0, res: 0, upd: 0;
       c37nm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37nc_info" {
     block_c37nc_info:
         const _c37nc;
         const 1;
         const 30;
 },
 _c37ni() //  [R1]
         { []
         }
     {offset
       c37ni: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37ns; else goto c37nr;
       c37ns: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c37nr: // global
           _s2V89::I64 = I64[Sp + 8];
           _s2V8b::I64 = I64[R1 + 7];
           _s2V8c::I64 = -_s2V89::I64;
           if (%MO_S_Gt_W64(_s2V89::I64,
                            _s2V8b::I64)) goto c37nH; else goto c37nQ;
       c37nH: // global
           if (%MO_S_Gt_W64(_s2V8c::I64,
                            _s2V8b::I64)) goto c37nE; else goto c37nF;
       c37nE: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V8c::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c37nF: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c37nQ: // global
           if (%MO_S_Gt_W64(_s2V8c::I64,
                            _s2V89::I64)) goto c37nO; else goto c37nP;
       c37nO: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V8c::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c37nP: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37ni_info" {
     block_c37ni_info:
         const _c37ni;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.804956208 UTC

[section ""data" . GHC.Float.$dmscaleFloat_closure" {
     GHC.Float.$dmscaleFloat_closure:
         const GHC.Float.$dmscaleFloat_info;
         const 0;
 },
 sat_s2V8r_entry() //  [R1]
         { []
         }
     {offset
       c37oB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37oC; else goto c37oD;
       c37oC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37oD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c37oz_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V8r_info" {
     sat_s2V8r_info:
         const sat_s2V8r_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+832;
 },
 _c37oz() //  [R1]
         { []
         }
     {offset
       c37oz: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37oz_info" {
     block_c37oz_info:
         const _c37oz;
         const 0;
         const 4294967326;
         const S2VLN_srt+832;
 },
 ds2_s2V8v_entry() //  [R1]
         { []
         }
     {offset
       c37p5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37p6; else goto c37p7;
       c37p6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37p7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.decodeFloat_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s2V8v_info" {
     ds2_s2V8v_info:
         const ds2_s2V8v_entry;
         const 2;
         const 18;
 },
 sat_s2V8Z_entry() //  [R1]
         { []
         }
     {offset
       c37pf: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c37pC; else goto c37pD;
       c37pC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37pD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c37pc_info;
           _s2V8g::P64 = P64[R1 + 16];
           _s2V8i::P64 = P64[R1 + 24];
           _s2V8l::I64 = I64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s2V8g::P64;
           P64[Sp - 32] = _s2V8i::P64;
           I64[Sp - 24] = _s2V8l::I64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u37qD; else goto c37pd;
       u37qD: // global
           call _c37pc(R1) args: 0, res: 0, upd: 0;
       c37pd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V8Z_info" {
     sat_s2V8Z_info:
         const sat_s2V8Z_entry;
         const 4294967299;
         const 15;
 },
 _c37pc() //  [R1]
         { []
         }
     {offset
       c37pc: // global
           I64[Sp] = block_c37pi_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u37qC; else goto c37pj;
       u37qC: // global
           call _c37pi(R1) args: 0, res: 0, upd: 0;
       c37pj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37pc_info" {
     block_c37pc_info:
         const _c37pc;
         const 259;
         const 30;
 },
 _c37pi() //  [R1]
         { []
         }
     {offset
       c37pi: // global
           I64[Sp - 8] = block_c37pn_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37pi_info" {
     block_c37pi_info:
         const _c37pi;
         const 259;
         const 30;
 },
 _c37pn() //  [R1]
         { []
         }
     {offset
       c37pn: // global
           I64[Sp - 8] = block_c37pr_info;
           _s2V8G::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s2V8G::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37qE; else goto c37ps;
       u37qE: // global
           call _c37pr(R1) args: 0, res: 0, upd: 0;
       c37ps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37pn_info" {
     block_c37pn_info:
         const _c37pn;
         const 580;
         const 30;
 },
 _c37pr() //  [R1]
         { []
         }
     {offset
       c37pr: // global
           I64[Sp] = block_c37pw_info;
           _s2V8J::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2V8J::I64;
           if (R1 & 7 != 0) goto u37qF; else goto c37px;
       u37qF: // global
           call _c37pw(R1) args: 0, res: 0, upd: 0;
       c37px: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37pr_info" {
     block_c37pr_info:
         const _c37pr;
         const 1157;
         const 30;
 },
 _c37pw() //  [R1]
         { []
         }
     {offset
       c37pw: // global
           I64[Sp] = block_c37pB_info;
           R2 = P64[Sp + 24];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37pw_info" {
     block_c37pw_info:
         const _c37pw;
         const 1221;
         const 30;
 },
 _c37pB() //  [R1]
         { []
         }
     {offset
       c37pB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37pO; else goto c37pN;
       c37pO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c37pN: // global
           _s2V8l::I64 = I64[Sp + 40];
           _s2V8E::I64 = I64[Sp + 16];
           _s2V8O::I64 = I64[Sp + 8] + ((I64[R1 + 7] << 2) - I64[Sp + 32]);
           _s2V8R::I64 = -_s2V8O::I64;
           if (%MO_S_Gt_W64(_s2V8O::I64,
                            _s2V8l::I64)) goto c37qk; else goto c37qB;
       c37qk: // global
           if (%MO_S_Gt_W64(_s2V8R::I64,
                            _s2V8l::I64)) goto c37qc; else goto c37qi;
       c37qc: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V8E::I64 + _s2V8R::I64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c37qi: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V8E::I64 + _s2V8l::I64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c37qB: // global
           if (%MO_S_Gt_W64(_s2V8R::I64,
                            _s2V8O::I64)) goto c37qu; else goto c37qA;
       c37qu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V8E::I64 + _s2V8R::I64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c37qA: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V8E::I64 + _s2V8O::I64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37pB_info" {
     block_c37pB_info:
         const _c37pB;
         const 1989;
         const 30;
 },
 GHC.Float.$dmscaleFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c37qG: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c37qH; else goto c37qI;
       c37qH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$dmscaleFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c37qI: // global
           I64[Sp - 24] = block_c37og_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u37rs; else goto c37oh;
       u37rs: // global
           call _c37og(R1) args: 0, res: 0, upd: 0;
       c37oh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmscaleFloat_info" {
     GHC.Float.$dmscaleFloat_info:
         const GHC.Float.$dmscaleFloat_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S2VLN_srt+832;
 },
 _c37og() //  [R1]
         { []
         }
     {offset
       c37og: // global
           _s2V8l::I64 = I64[R1 + 7];
           if (_s2V8l::I64 != 0) goto c37qL; else goto u37rk;
       c37qL: // global
           I64[Sp - 8] = block_c37on_info;
           R2 = P64[Sp + 8];
           I64[Sp] = _s2V8l::I64;
           Sp = Sp - 8;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
       u37rk: // global
           Sp = Sp + 16;
           call _c37rf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37og_info" {
     block_c37og_info:
         const _c37og;
         const 2;
         const 4294967326;
         const S2VLN_srt+832;
 },
 _c37on() //  [R1]
         { []
         }
     {offset
       c37on: // global
           I64[Sp] = block_c37or_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37on_info" {
     block_c37on_info:
         const _c37on;
         const 67;
         const 4294967326;
         const S2VLN_srt+832;
 },
 _c37or() //  [R1]
         { []
         }
     {offset
       c37or: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37qP; else goto c37qO;
       c37qP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c37qO: // global
           I64[Hp - 16] = sat_s2V8r_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c37oH_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37or_info" {
     block_c37or_info:
         const _c37or;
         const 67;
         const 4294967326;
         const S2VLN_srt+832;
 },
 _c37oH() //  [R1]
         { []
         }
     {offset
       c37oH: // global
           I64[Sp] = block_c37oL_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37oH_info" {
     block_c37oH_info:
         const _c37oH;
         const 132;
         const 30;
 },
 _c37oL() //  [R1]
         { []
         }
     {offset
       c37oL: // global
           _c37ov::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c37oP_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c37ov::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37oL_info" {
     block_c37oL_info:
         const _c37oL;
         const 132;
         const 30;
 },
 _c37oP() //  [R1]
         { []
         }
     {offset
       c37oP: // global
           if (R1 & 7 == 1) goto c37qU; else goto u37rl;
       c37qU: // global
           I64[Sp] = block_c37oT_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 16;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 8, upd: 8;
       u37rl: // global
           Sp = Sp + 24;
           call _c37rf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37oP_info" {
     block_c37oP_info:
         const _c37oP;
         const 67;
         const 30;
 },
 _c37oT() //  [R1]
         { []
         }
     {offset
       c37oT: // global
           if (R1 & 7 == 1) goto c37qX; else goto u37rm;
       c37qX: // global
           I64[Sp] = block_c37oX_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 16;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 8;
       u37rm: // global
           Sp = Sp + 24;
           call _c37rf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37oT_info" {
     block_c37oT_info:
         const _c37oT;
         const 67;
         const 30;
 },
 _c37oX() //  [R1]
         { []
         }
     {offset
       c37oX: // global
           if (R1 & 7 == 1) goto c37qZ; else goto u37rn;
       c37qZ: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c37r2; else goto c37r1;
       c37r2: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c37r1: // global
           I64[Hp - 96] = ds2_s2V8v_info;
           _s2V8g::P64 = P64[Sp + 16];
           P64[Hp - 80] = _s2V8g::P64;
           _s2V8i::P64 = P64[Sp + 24];
           P64[Hp - 72] = _s2V8i::P64;
           I64[Hp - 64] = sat_s2V8Z_info;
           P64[Hp - 48] = _s2V8g::P64;
           P64[Hp - 40] = _s2V8i::P64;
           _c37p1::P64 = Hp - 96;
           P64[Hp - 32] = _c37p1::P64;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c37p1::P64;
           R2 = _s2V8g::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           P64[Sp + 24] = Hp - 64;
           Sp = Sp + 8;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       u37rn: // global
           Sp = Sp + 24;
           call _c37rf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37oX_info" {
     block_c37oX_info:
         const _c37oX;
         const 67;
         const 30;
 },
 _c37rf() //  []
         { []
         }
     {offset
       c37rf: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.878129427 UTC

[section ""data" . GHC.Float.$wfromRat''_closure" {
     GHC.Float.$wfromRat''_closure:
         const GHC.Float.$wfromRat''_info;
         const 0;
 },
 GHC.Float.$wfromRat''_slow() //  [R1]
         { []
         }
     {offset
       c37t8: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Float.$wfromRat''_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2V9o_entry() //  [R1]
         { []
         }
     {offset
       c37tQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37tR; else goto c37tS;
       c37tR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37tS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V9o_info" {
     sat_s2V9o_info:
         const sat_s2V9o_entry;
         const 1;
         const 16;
 },
 sat_s2V9w_entry() //  [R1]
         { []
         }
     {offset
       c37u7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37u8; else goto c37u9;
       c37u8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37u9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2V9w_info" {
     sat_s2V9w_info:
         const sat_s2V9w_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . u37E0_srtd" {
     u37E0_srtd:
         const S2VLN_srt+48;
         const 96;
         const 1;
         const 2147483648;
 },
 ds_s2V99_entry() //  [R1]
         { []
         }
     {offset
       c37uh: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c37ui; else goto c37w3;
       c37ui: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37w3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c37ua_info;
           _s2V93::P64 = P64[R1 + 16];
           _s2V94::P64 = P64[R1 + 24];
           _s2V91::I64 = I64[R1 + 32];
           _s2V92::I64 = I64[R1 + 40];
           _s2V96::I64 = I64[R1 + 48];
           R1 = _s2V93::P64;
           I64[Sp - 56] = _s2V91::I64;
           I64[Sp - 48] = _s2V92::I64;
           P64[Sp - 40] = _s2V93::P64;
           P64[Sp - 32] = _s2V94::P64;
           I64[Sp - 24] = _s2V96::I64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u37wF; else goto c37ub;
       u37wF: // global
           call _c37ua(R1) args: 0, res: 0, upd: 0;
       c37ub: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s2V99_info" {
     ds_s2V99_info:
         const ds_s2V99_entry;
         const 12884901890;
         const 18446744069414584335;
         const u37E0_srtd;
 },
 section ""relreadonly" . u37E1_srtd" {
     u37E1_srtd:
         const S2VLN_srt+48;
         const 96;
         const 1;
         const 2147483648;
 },
 _c37ua() //  [R1]
         { []
         }
     {offset
       c37ua: // global
           if (R1 & 7 == 1) goto c37uf; else goto c37ue;
       c37uf: // global
           I64[Sp] = block_c37wh_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
       c37ue: // global
           _s2V9I::I64 = (-1) - I64[Sp + 40];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s2V9I::I64)) goto u37wv; else goto c37we;
       u37wv: // global
           Sp = Sp + 8;
           call _c37wt() args: 0, res: 0, upd: 0;
       c37we: // global
           I64[Sp + 40] = _s2V9I::I64;
           Sp = Sp + 16;
           call _s2V9a() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37ua_info" {
     block_c37ua_info:
         const _c37ua;
         const 1221;
         const 18446744069414584350;
         const u37E1_srtd;
 },
 _c37wh() //  [R1]
         { []
         }
     {offset
       c37wh: // global
           _s2V9M::I64 = R1 - I64[Sp + 40];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s2V9M::I64)) goto u37wx; else goto c37wu;
       u37wx: // global
           Sp = Sp + 8;
           call _c37wt() args: 0, res: 0, upd: 0;
       c37wu: // global
           I64[Sp + 40] = _s2V9M::I64;
           Sp = Sp + 16;
           call _s2V9a() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37wh_info" {
     block_c37wh_info:
         const _c37wh;
         const 1221;
         const 4294967326;
         const S2VLN_srt+856;
 },
 _c37wt() //  []
         { []
         }
     {offset
       c37wt: // global
           I64[Sp + 32] = I64[Sp];
           Sp = Sp + 8;
           call _s2V9a() args: 0, res: 0, upd: 0;
     }
 },
 _s2V9a() //  []
         { []
         }
     {offset
       s2V9a: // global
           _s2V92::I64 = I64[Sp];
           _s2V93::P64 = P64[Sp + 8];
           _s2V9b::I64 = I64[Sp + 24];
           if (%MO_S_Ge_W64(_s2V9b::I64,
                            _s2V92::I64)) goto c37vF; else goto c37vW;
       c37vF: // global
           _s2V94::P64 = P64[Sp + 16];
           if (_s2V9b::I64 == _s2V92::I64) goto c37vD; else goto c37vw;
       c37vD: // global
           P64[Sp + 16] = _s2V93::P64;
           P64[Sp + 8] = _s2V94::P64;
           call _s2V9c() args: 0, res: 0, upd: 0;
       c37vw: // global
           _s2V9z::I64 = _s2V9b::I64 - _s2V92::I64;
           if (%MO_S_Lt_W64(_s2V9z::I64, 0)) goto c37vr; else goto c37vu;
       c37vr: // global
           I64[Sp - 8] = block_c37vt_info;
           R3 = -_s2V9z::I64;
           R2 = _s2V94::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c37vu: // global
           I64[Sp - 8] = block_c37vt_info;
           R3 = _s2V9z::I64;
           R2 = _s2V94::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c37vW: // global
           _s2V9D::I64 = _s2V92::I64 - _s2V9b::I64;
           if (%MO_S_Lt_W64(_s2V9D::I64, 0)) goto c37vS; else goto c37vV;
       c37vS: // global
           I64[Sp - 8] = block_c37vU_info;
           R3 = -_s2V9D::I64;
           R2 = _s2V93::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c37vV: // global
           I64[Sp - 8] = block_c37vU_info;
           R3 = _s2V9D::I64;
           R2 = _s2V93::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 _c37vt() //  [R1]
         { []
         }
     {offset
       c37vt: // global
           _s2V9d::P64 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           P64[Sp + 24] = _s2V9d::P64;
           Sp = Sp + 8;
           call _s2V9c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37vt_info" {
     block_c37vt_info:
         const _c37vt;
         const 836;
         const 4294967326;
         const S2VLN_srt+856;
 },
 _c37vU() //  [R1]
         { []
         }
     {offset
       c37vU: // global
           _s2V9e::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp + 16] = _s2V9e::P64;
           Sp = Sp + 8;
           call _s2V9c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37vU_info" {
     block_c37vU_info:
         const _c37vU;
         const 708;
         const 4294967326;
         const S2VLN_srt+856;
 },
 _s2V9c() //  []
         { []
         }
     {offset
       s2V9c: // global
           _s2V92::I64 = I64[Sp];
           _s2V9e::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(_s2V92::I64, 0)) goto c37um; else goto c37uL;
       c37um: // global
           I64[Sp - 8] = block_c37tD_info;
           R3 = -_s2V92::I64;
           R2 = _s2V9e::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c37uL: // global
           I64[Sp - 8] = block_c37tU_info;
           R3 = _s2V92::I64;
           R2 = _s2V9e::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 _c37tD() //  [R1]
         { []
         }
     {offset
       c37tD: // global
           I64[Sp] = block_c37tH_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37tD_info" {
     block_c37tD_info:
         const _c37tD;
         const 580;
         const 30;
 },
 _c37tH() //  [R1]
         { []
         }
     {offset
       c37tH: // global
           _s2V92::I64 = I64[Sp + 8];
           _s2V9b::I64 = I64[Sp + 32];
           _s2V9d::P64 = P64[Sp + 24];
           _s2V9e::P64 = P64[Sp + 16];
           if (R1 == 1) goto c37uH; else goto c37uv;
       c37uH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c37uK; else goto c37uJ;
       c37uK: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c37uJ: // global
           I64[Hp - 64] = sat_s2V9o_info;
           P64[Hp - 48] = _s2V9e::P64;
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _s2V9b::I64 - _s2V92::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _s2V9d::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c37uv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37uy; else goto c37ux;
       c37uy: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c37ux: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _s2V9b::I64 - _s2V92::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _s2V9d::P64;
           P64[Hp] = _s2V9e::P64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37tH_info" {
     block_c37tH_info:
         const _c37tH;
         const 580;
         const 30;
 },
 _c37tU() //  [R1]
         { []
         }
     {offset
       c37tU: // global
           I64[Sp] = block_c37tY_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37tU_info" {
     block_c37tU_info:
         const _c37tU;
         const 580;
         const 30;
 },
 _c37tY() //  [R1]
         { []
         }
     {offset
       c37tY: // global
           _s2V92::I64 = I64[Sp + 8];
           _s2V9b::I64 = I64[Sp + 32];
           _s2V9d::P64 = P64[Sp + 24];
           _s2V9e::P64 = P64[Sp + 16];
           if (R1 == 1) goto c37v6; else goto c37uU;
       c37v6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c37v9; else goto c37v8;
       c37v9: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c37v8: // global
           I64[Hp - 64] = sat_s2V9w_info;
           P64[Hp - 48] = _s2V9e::P64;
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _s2V9b::I64 - _s2V92::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _s2V9d::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c37uU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37uX; else goto c37uW;
       c37uX: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c37uW: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _s2V9b::I64 - _s2V92::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _s2V9d::P64;
           P64[Hp] = _s2V9e::P64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37tY_info" {
     block_c37tY_info:
         const _c37tY;
         const 580;
         const 30;
 },
 section ""relreadonly" . u37E2_srtd" {
     u37E2_srtd:
         const S2VLN_srt+8;
         const 104;
         const 288230376151711745;
         const 549755814016;
 },
 sat_s2Va1_entry() //  [R1]
         { []
         }
     {offset
       c37wU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c37wV; else goto c37wW;
       c37wV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37wW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c37wR_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u37xY; else goto c37wS;
       u37xY: // global
           call _c37wR(R1) args: 0, res: 0, upd: 0;
       c37wS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Va1_info" {
     sat_s2Va1_info:
         const sat_s2Va1_entry;
         const 1;
         const 18446744069414584336;
         const u37E2_srtd;
 },
 section ""relreadonly" . u37E3_srtd" {
     u37E3_srtd:
         const S2VLN_srt+8;
         const 104;
         const 288230376151711745;
         const 549755814016;
 },
 _c37wR() //  [R1]
         { []
         }
     {offset
       c37wR: // global
           I64[Sp - 16] = block_c37wZ_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s2V9R::P64 = P64[R1 + 23];
           R2 = _s2V9R::P64;
           P64[Sp - 8] = _s2V9R::P64;
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37wR_info" {
     block_c37wR_info:
         const _c37wR;
         const 0;
         const 18446744069414584350;
         const u37E3_srtd;
 },
 _c37wZ() //  [R1]
         { []
         }
     {offset
       c37wZ: // global
           if (R1 == 1) goto c37xR; else goto c37x9;
       c37xR: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c37x9: // global
           I64[Sp] = block_c37x4_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37wZ_info" {
     block_c37wZ_info:
         const _c37wZ;
         const 2;
         const 30064771102;
         const S2VLN_srt+864;
 },
 _c37x4() //  [R1, R2]
         { []
         }
     {offset
       c37x4: // global
           I64[Sp] = block_c37x6_info;
           R3 = 1;
           R2 = R2;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37x4_info" {
     block_c37x4_info:
         const _c37x4;
         const 130;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37x6() //  [R1]
         { []
         }
     {offset
       c37x6: // global
           _s2V9R::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c37xe_info;
           R3 = _s2V9R::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37x6_info" {
     block_c37x6_info:
         const _c37x6;
         const 2;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37xe() //  [R1]
         { []
         }
     {offset
       c37xe: // global
           _c37xS::P64 = R1 & 7;
           if (_c37xS::P64 < 3) goto u37xT; else goto u37xU;
       u37xT: // global
           if (_c37xS::P64 < 2) goto u37xV; else goto c37xq;
       u37xV: // global
           Sp = Sp + 8;
           call _c37xG() args: 0, res: 0, upd: 0;
       c37xq: // global
           I64[Sp] = block_c37xo_info;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
       u37xU: // global
           Sp = Sp + 8;
           call _c37xN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37xe_info" {
     block_c37xe_info:
         const _c37xe;
         const 1;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37xo() //  [R1]
         { []
         }
     {offset
       c37xo: // global
           if (R1 & 1 == 0) goto u37xW; else goto u37xX;
       u37xW: // global
           Sp = Sp + 8;
           call _c37xG() args: 0, res: 0, upd: 0;
       u37xX: // global
           Sp = Sp + 8;
           call _c37xN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37xo_info" {
     block_c37xo_info:
         const _c37xo;
         const 1;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37xG() //  []
         { []
         }
     {offset
       c37xG: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _c37xN() //  []
         { []
         }
     {offset
       c37xN: // global
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp];
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 n'_s2Vas_entry() //  [R1]
         { []
         }
     {offset
       c37yB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37yC; else goto c37yJ;
       c37yC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37yJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2V93::P64 = P64[R1 + 16];
           _s2Vat::I64 = -I64[R1 + 24];
           if (%MO_S_Lt_W64(_s2Vat::I64, 0)) goto c37yH; else goto c37yI;
       c37yH: // global
           R3 = -_s2Vat::I64;
           R2 = _s2V93::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
       c37yI: // global
           R3 = _s2Vat::I64;
           R2 = _s2V93::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n'_s2Vas_info" {
     n'_s2Vas_info:
         const n'_s2Vas_entry;
         const 4294967297;
         const 4294967315;
         const S2VLN_srt+856;
 },
 sat_s2Vay_entry() //  [R1]
         { []
         }
     {offset
       c37z1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37z2; else goto c37z3;
       c37z2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37z3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vay_info" {
     sat_s2Vay_info:
         const sat_s2Vay_entry;
         const 1;
         const 21474836496;
         const S2VLN_srt+864;
 },
 sat_s2VaF_entry() //  [R1]
         { []
         }
     {offset
       c37zp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37zq; else goto c37zr;
       c37zq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37zr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VaF_info" {
     sat_s2VaF_info:
         const sat_s2VaF_entry;
         const 1;
         const 21474836496;
         const S2VLN_srt+864;
 },
 section ""relreadonly" . u37E4_srtd" {
     u37E4_srtd:
         const S2VLN_srt+56;
         const 104;
         const 1;
         const 755914244096;
 },
 sat_s2Vb1_entry() //  [R1]
         { []
         }
     {offset
       c37zM: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c37zN; else goto c37AX;
       c37zN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37AX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2V93::P64 = P64[R1 + 16];
           _s2V92::I64 = I64[R1 + 24];
           _s2Va8::I64 = I64[R1 + 32];
           _s2VaO::I64 = -((_s2Va8::I64 + 1) - _s2V92::I64);
           if (%MO_S_Lt_W64(_s2VaO::I64, 0)) goto c37AL; else goto c37AS;
       c37AL: // global
           I64[Sp - 48] = block_c37AJ_info;
           R3 = -_s2VaO::I64;
           R2 = _s2V93::P64;
           I64[Sp - 40] = _s2V92::I64;
           P64[Sp - 32] = _s2V93::P64;
           I64[Sp - 24] = _s2Va8::I64;
           Sp = Sp - 48;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c37AS: // global
           I64[Sp - 48] = block_c37AR_info;
           R3 = _s2VaO::I64;
           R2 = _s2V93::P64;
           I64[Sp - 40] = _s2V92::I64;
           P64[Sp - 32] = _s2V93::P64;
           I64[Sp - 24] = _s2Va8::I64;
           Sp = Sp - 48;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vb1_info" {
     sat_s2Vb1_info:
         const sat_s2Vb1_entry;
         const 8589934593;
         const 18446744069414584335;
         const u37E4_srtd;
 },
 section ""relreadonly" . u37E5_srtd" {
     u37E5_srtd:
         const S2VLN_srt+56;
         const 104;
         const 1;
         const 687194767360;
 },
 _c37AJ() //  [R1]
         { []
         }
     {offset
       c37AJ: // global
           P64[Sp] = R1;
           call _s2VaR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37AJ_info" {
     block_c37AJ_info:
         const _c37AJ;
         const 323;
         const 18446744069414584350;
         const u37E5_srtd;
 },
 section ""relreadonly" . u37E6_srtd" {
     u37E6_srtd:
         const S2VLN_srt+56;
         const 104;
         const 1;
         const 687194767360;
 },
 _c37AR() //  [R1]
         { []
         }
     {offset
       c37AR: // global
           P64[Sp] = R1;
           call _s2VaR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37AR_info" {
     block_c37AR_info:
         const _c37AR;
         const 323;
         const 18446744069414584350;
         const u37E6_srtd;
 },
 _s2VaR() //  []
         { []
         }
     {offset
       s2VaR: // global
           _s2VaT::I64 = I64[Sp + 24] - I64[Sp + 8];
           I64[Sp - 8] = block_c37A4_info;
           R3 = _s2VaT::I64;
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 _c37A4() //  [R1]
         { []
         }
     {offset
       c37A4: // global
           if (R1 == 0) goto u37B1; else goto u37AY;
       u37B1: // global
           Sp = Sp + 8;
           call _c37Ay() args: 0, res: 0, upd: 0;
       u37AY: // global
           if (R1 == 2) goto u37B2; else goto c37Ab;
       u37B2: // global
           Sp = Sp + 8;
           call _c37AC() args: 0, res: 0, upd: 0;
       c37Ab: // global
           I64[Sp] = block_c37A8_info;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37A4_info" {
     block_c37A4_info:
         const _c37A4;
         const 900;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37A8() //  [R1]
         { []
         }
     {offset
       c37A8: // global
           if (R1 & 1 == 0) goto u37B3; else goto u37B4;
       u37B3: // global
           Sp = Sp + 8;
           call _c37Ay() args: 0, res: 0, upd: 0;
       u37B4: // global
           Sp = Sp + 8;
           call _c37AC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37A8_info" {
     block_c37A8_info:
         const _c37A8;
         const 900;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37Ay() //  []
         { []
         }
     {offset
       c37Ay: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _c37AC() //  []
         { []
         }
     {offset
       c37AC: // global
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp];
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u37E7_srtd" {
     u37E7_srtd:
         const S2VLN_srt+56;
         const 105;
         const 5;
         const 2139967455232;
 },
 GHC.Float.$wfromRat''_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c37Bi: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c37Bj; else goto c37Bk;
       c37Bj: // global
           R1 = GHC.Float.$wfromRat''_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c37Bk: // global
           I64[Sp - 48] = block_c37Bb_info;
           R1 = R6;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u37DU; else goto c37Bc;
       u37DU: // global
           call _c37Bb(R1) args: 0, res: 0, upd: 0;
       c37Bc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wfromRat''_info" {
     GHC.Float.$wfromRat''_info:
         const GHC.Float.$wfromRat''_entry;
         const 0;
         const 18446744069414584334;
         const 21474836480;
         const u37E7_srtd;
         const 389;
         const GHC.Float.$wfromRat''_slow;
 },
 section ""relreadonly" . u37E8_srtd" {
     u37E8_srtd:
         const S2VLN_srt+56;
         const 104;
         const 5;
         const 1040455827456;
 },
 _c37Bb() //  [R1]
         { []
         }
     {offset
       c37Bb: // global
           if (R1 & 7 == 1) goto c37Bg; else goto c37Bf;
       c37Bg: // global
           I64[Sp] = block_c37D0_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c37Bf: // global
           I64[Sp - 8] = 1;
           I64[Sp] = (-1);
           Sp = Sp - 16;
           call _c37te() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37Bb_info" {
     block_c37Bb_info:
         const _c37Bb;
         const 389;
         const 18446744069414584350;
         const u37E8_srtd;
 },
 section ""relreadonly" . u37E9_srtd" {
     u37E9_srtd:
         const S2VLN_srt+56;
         const 104;
         const 5;
         const 1040455827456;
 },
 _c37D0() //  [R1, R2]
         { []
         }
     {offset
       c37D0: // global
           I64[Sp] = R1;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c37te() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37D0_info" {
     block_c37D0_info:
         const _c37D0;
         const 389;
         const 18446744069414584350;
         const u37E9_srtd;
 },
 section ""relreadonly" . u37Ea_srtd" {
     u37Ea_srtd:
         const S2VLN_srt+56;
         const 104;
         const 5;
         const 1040455827456;
 },
 _c37te() //  []
         { []
         }
     {offset
       c37te: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c37Bn; else goto c37Bm;
       c37Bn: // global
           HpAlloc = 104;
           I64[Sp] = block_c37te_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c37Bm: // global
           _s2V93::P64 = P64[Sp + 48];
           if (I64[Sp + 8] == 0) goto c37CE; else goto c37Bp;
       c37CE: // global
           Hp = Hp - 104;
           I64[Sp + 8] = block_c37Bq_info;
           R1 = _s2V93::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u37DN; else goto c37CF;
       u37DN: // global
           call _c37Bq(R1) args: 0, res: 0, upd: 0;
       c37CF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c37Bp: // global
           I64[Hp - 96] = ds_s2V99_info;
           P64[Hp - 80] = _s2V93::P64;
           P64[Hp - 72] = P64[Sp + 56];
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = stg_sel_0_upd_info;
           _c37tj::P64 = Hp - 96;
           P64[Hp - 24] = _c37tj::P64;
           I64[Hp - 16] = sat_s2Va1_info;
           P64[Hp] = _c37tj::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 40] = stg_ap_pp_info;
           P64[Sp + 48] = Hp - 16;
           P64[Sp + 56] = Hp - 40;
           Sp = Sp + 40;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37te_info" {
     block_c37te_info:
         const _c37te;
         const 1735;
         const 18446744069414584350;
         const u37Ea_srtd;
 },
 section ""relreadonly" . u37Eb_srtd" {
     u37Eb_srtd:
         const S2VLN_srt+56;
         const 104;
         const 5;
         const 765577920512;
 },
 _c37Bq() //  [R1]
         { []
         }
     {offset
       c37Bq: // global
           if (R1 & 7 == 1) goto c37CQ; else goto c37CL;
       c37CQ: // global
           I64[Sp] = block_c37CO_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c37CL: // global
           I64[Sp + 48] = (-1);
           Sp = Sp + 8;
           call _c37y7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37Bq_info" {
     block_c37Bq_info:
         const _c37Bq;
         const 2886;
         const 18446744069414584350;
         const u37Eb_srtd;
 },
 section ""relreadonly" . u37Ec_srtd" {
     u37Ec_srtd:
         const S2VLN_srt+56;
         const 104;
         const 5;
         const 764504178688;
 },
 _c37CO() //  [R1]
         { []
         }
     {offset
       c37CO: // global
           I64[Sp + 48] = R1;
           Sp = Sp + 8;
           call _c37y7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37CO_info" {
     block_c37CO_info:
         const _c37CO;
         const 2886;
         const 18446744069414584350;
         const u37Ec_srtd;
 },
 _c37y7() //  []
         { []
         }
     {offset
       c37y7: // global
           Hp = Hp + 56;
           _s2Va8::I64 = I64[Sp + 40];
           if (Hp > HpLim) (likely: False) goto c37Bt; else goto c37Bs;
       c37Bt: // global
           HpAlloc = 56;
           I64[Sp - 8] = block_c37y6_info;
           R1 = _s2Va8::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37Bs: // global
           _s2V90::P64 = P64[Sp + 8];
           _s2V91::I64 = I64[Sp + 16];
           _s2V92::I64 = I64[Sp + 24];
           _s2V93::P64 = P64[Sp + 32];
           _s2V96::I64 = I64[Sp];
           if (%MO_S_Lt_W64(_s2Va8::I64,
                            _s2V96::I64 + _s2V91::I64 - 1)) goto c37Cz; else goto c37CD;
       c37Cz: // global
           _s2Vac::I64 = _s2V96::I64 + (_s2V91::I64 - _s2V92::I64);
           if (%MO_S_Gt_W64(_s2Vac::I64, 0)) goto c37Cw; else goto c37Cx;
       c37Cw: // global
           if (%MO_S_Gt_W64(_s2Vac::I64,
                            _s2Va8::I64)) goto c37C3; else goto c37C4;
       c37C3: // global
           if (%MO_S_Le_W64(_s2Vac::I64,
                            _s2Va8::I64 + 1)) goto c37BC; else goto c37C1;
       c37BC: // global
           Hp = Hp - 56;
           I64[Sp] = block_c37BA_info;
           R1 = _s2V93::P64;
           if (R1 & 7 != 0) goto u37DP; else goto c37BD;
       u37DP: // global
           call _c37BA(R1) args: 0, res: 0, upd: 0;
       c37BD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c37C1: // global
           Hp = Hp - 56;
           R2 = _s2V90::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = GHC.Float.rationalToDouble5_closure;
           P64[Sp + 40] = GHC.Float.minExpt_closure+1;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       c37C4: // global
           I64[Hp - 48] = n'_s2Vas_info;
           P64[Hp - 32] = _s2V93::P64;
           I64[Hp - 24] = _s2Vac::I64;
           _c37yv::P64 = Hp - 48;
           Hp = Hp - 24;
           I64[Sp] = block_c37yP_info;
           R3 = _s2Vac::I64 - 1;
           R2 = _s2V93::P64;
           P64[Sp + 40] = _c37yv::P64;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
       c37Cx: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s2V91::I64 - _s2V92::I64 - _s2Vac::I64;
           _c37Dj::P64 = Hp - 47;
           Hp = Hp - 40;
           R2 = _s2V90::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 40] = _c37Dj::P64;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       c37CD: // global
           if (%MO_S_Ge_W64(_s2Va8::I64,
                            _s2V92::I64)) goto c37CB; else goto c37CC;
       c37CB: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s2Va8::I64 + (1 - _s2V92::I64 - _s2V96::I64);
           I64[Hp - 32] = sat_s2Vb1_info;
           P64[Hp - 16] = _s2V93::P64;
           I64[Hp - 8] = _s2V92::I64;
           I64[Hp] = _s2Va8::I64;
           R2 = _s2V90::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 47;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       c37CC: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = -_s2V96::I64;
           _c37Db::P64 = Hp - 47;
           Hp = Hp - 40;
           R2 = _s2V90::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 40] = _c37Db::P64;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u37Ed_srtd" {
     u37Ed_srtd:
         const S2VLN_srt+56;
         const 104;
         const 5;
         const 764504178688;
 },
 _c37y6() //  [R1]
         { []
         }
     {offset
       c37y6: // global
           I64[Sp + 48] = R1;
           Sp = Sp + 8;
           call _c37y7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37y6_info" {
     block_c37y6_info:
         const _c37y6;
         const 2886;
         const 18446744069414584350;
         const u37Ed_srtd;
 },
 section ""relreadonly" . u37Ee_srtd" {
     u37Ee_srtd:
         const S2VLN_srt+72;
         const 100;
         const 1;
         const 36507222016;
 },
 _c37BA() //  [R1]
         { []
         }
     {offset
       c37BA: // global
           if (R1 & 7 == 1) goto c37BQ; else goto c37BG;
       c37BQ: // global
           I64[Sp] = block_c37BO_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c37BG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37BL; else goto c37BK;
       c37BL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c37BK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16] - I64[Sp + 24];
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 40] = Hp - 7;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37BA_info" {
     block_c37BA_info:
         const _c37BA;
         const 1925;
         const 18446744069414584350;
         const u37Ee_srtd;
 },
 _c37BO() //  [R2]
         { []
         }
     {offset
       c37BO: // global
           I64[Sp + 40] = R2;
           call _c37BR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37BO_info" {
     block_c37BO_info:
         const _c37BO;
         const 1925;
         const 73014444062;
         const S2VLN_srt+832;
 },
 _c37BR() //  []
         { []
         }
     {offset
       c37BR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37BW; else goto c37BV;
       c37BW: // global
           HpAlloc = 16;
           I64[Sp] = block_c37BR_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c37BV: // global
           _s2V90::P64 = P64[Sp + 8];
           if (I64[Sp + 40] == 0) goto c37C0; else goto c37BZ;
       c37C0: // global
           Hp = Hp - 16;
           R2 = _s2V90::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = GHC.Float.rationalToDouble5_closure;
           P64[Sp + 40] = GHC.Float.minExpt_closure+1;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       c37BZ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16] - I64[Sp + 24];
           R2 = _s2V90::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 40] = Hp - 7;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37BR_info" {
     block_c37BR_info:
         const _c37BR;
         const 1925;
         const 73014444062;
         const S2VLN_srt+832;
 },
 _c37yP() //  [R1]
         { []
         }
     {offset
       c37yP: // global
           _c37yv::P64 = P64[Sp + 40];
           _s2V90::P64 = P64[Sp + 8];
           _s2V91::I64 = I64[Sp + 16];
           _s2V92::I64 = I64[Sp + 24];
           if (R1 == 0) goto c37Ca; else goto u37DC;
       c37Ca: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37Ce; else goto c37Cd;
       c37Ce: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37Cd: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2V91::I64 - _s2V92::I64;
           R2 = _s2V90::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = _c37yv::P64;
           P64[Sp + 40] = Hp - 7;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       u37DC: // global
           if (R1 == 1) goto c37Cg; else goto c37C6;
       c37Cg: // global
           I64[Sp] = block_c37z7_info;
           R2 = _c37yv::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c37C6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c37C9; else goto c37C8;
       c37C9: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37C8: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s2V91::I64 - _s2V92::I64;
           I64[Hp - 16] = sat_s2Vay_info;
           P64[Hp] = _c37yv::P64;
           R2 = _s2V90::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 16;
           P64[Sp + 40] = Hp - 31;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37yP_info" {
     block_c37yP_info:
         const _c37yP;
         const 901;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37z7() //  [R1]
         { []
         }
     {offset
       c37z7: // global
           _s2VaE::I64 = R1 & 1;
           if (_s2VaE::I64 != 0) goto u37DK; else goto u37DJ;
       u37DK: // global
           I64[Sp + 32] = _s2VaE::I64;
           Sp = Sp + 8;
           call _c37zf() args: 0, res: 0, upd: 0;
       u37DJ: // global
           I64[Sp + 32] = _s2VaE::I64;
           Sp = Sp + 8;
           call _c37Cq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37z7_info" {
     block_c37z7_info:
         const _c37z7;
         const 901;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37zf() //  []
         { []
         }
     {offset
       c37zf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c37Cm; else goto c37Cl;
       c37Cm: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c37ze_info;
           R1 = I64[Sp + 24];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37Cl: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = I64[Sp + 8] - I64[Sp + 16];
           I64[Hp - 16] = sat_s2VaF_info;
           P64[Hp] = P64[Sp + 32];
           R2 = P64[Sp];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           P64[Sp + 32] = Hp - 31;
           Sp = Sp + 16;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c37ze() //  [R1]
         { []
         }
     {offset
       c37ze: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c37zf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37ze_info" {
     block_c37ze_info:
         const _c37ze;
         const 901;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c37Cq() //  []
         { []
         }
     {offset
       c37Cq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37Cu; else goto c37Ct;
       c37Cu: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c37Co_info;
           R1 = I64[Sp + 24];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37Ct: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] - I64[Sp + 16];
           R2 = P64[Sp];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 7;
           Sp = Sp + 16;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c37Co() //  [R1]
         { []
         }
     {offset
       c37Co: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c37Cq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37Co_info" {
     block_c37Co_info:
         const _c37Co;
         const 901;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.97813432 UTC

[section ""data" . GHC.Float.fromRat''_closure" {
     GHC.Float.fromRat''_closure:
         const GHC.Float.fromRat''_info;
         const 0;
 },
 GHC.Float.fromRat''_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c37IA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c37IE; else goto c37IF;
       c37IE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat''_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c37IF: // global
           I64[Sp - 40] = block_c37Ix_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u37IN; else goto c37Iy;
       u37IN: // global
           call _c37Ix(R1) args: 0, res: 0, upd: 0;
       c37Iy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat''_info" {
     GHC.Float.fromRat''_info:
         const GHC.Float.fromRat''_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S2VLN_srt+888;
 },
 _c37Ix() //  [R1]
         { []
         }
     {offset
       c37Ix: // global
           I64[Sp] = block_c37ID_info;
           _s2Vbm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2Vbm::I64;
           if (R1 & 7 != 0) goto u37IM; else goto c37IH;
       u37IM: // global
           call _c37ID(R1) args: 0, res: 0, upd: 0;
       c37IH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Ix_info" {
     block_c37Ix_info:
         const _c37Ix;
         const 4;
         const 4294967326;
         const S2VLN_srt+888;
 },
 _c37ID() //  [R1]
         { []
         }
     {offset
       c37ID: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Float.$wfromRat''_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37ID_info" {
     block_c37ID_info:
         const _c37ID;
         const 132;
         const 4294967326;
         const S2VLN_srt+888;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:33.987593201 UTC

[section ""data" . GHC.Float.$w$cfromEnum_closure" {
     GHC.Float.$w$cfromEnum_closure:
         const GHC.Float.$w$cfromEnum_info;
         const 0;
 },
 section ""relreadonly" . u37K3_srtd" {
     u37K3_srtd:
         const S2VLN_srt+648;
         const 33;
         const 4303355905;
 },
 GHC.Float.$w$cfromEnum_entry() //  [D1]
         { []
         }
     {offset
       c37Je: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c37Jf; else goto c37Jg;
       c37Jf: // global
           D1 = D1;
           R1 = GHC.Float.$w$cfromEnum_closure;
           call (stg_gc_fun)(D1, R1) args: 8, res: 0, upd: 8;
       c37Jg: // global
           I64[Sp - 8] = block_c37J5_info;
           D1 = D1;
           Sp = Sp - 8;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cfromEnum_info" {
     GHC.Float.$w$cfromEnum_info:
         const GHC.Float.$w$cfromEnum_entry;
         const 0;
         const 18446744069414584334;
         const 4294967303;
         const u37K3_srtd;
 },
 _c37J5() //  [R1, R2]
         { []
         }
     {offset
       c37J5: // global
           if (%MO_S_Ge_W64(R2, 0)) goto c37Jc; else goto c37Jd;
       c37Jc: // global
           I64[Sp] = block_c37Jj_info;
           R3 = R2;
           R2 = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c37Jd: // global
           _s2Vbv::I64 = -R2;
           if (%MO_S_Le_W64(_s2Vbv::I64, 52)) goto c37Jx; else goto c37K2;
       c37Jx: // global
           I64[Sp - 16] = block_c37Jv_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           I64[Sp - 8] = _s2Vbv::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c37K2: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37J5_info" {
     block_c37J5_info:
         const _c37J5;
         const 0;
         const 4294967326;
         const S2VLN_srt+832;
 },
 _c37Jj() //  [R1]
         { []
         }
     {offset
       c37Jj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Jj_info" {
     block_c37Jj_info:
         const _c37Jj;
         const 0;
         const 30;
 },
 _c37Jv() //  [R1]
         { []
         }
     {offset
       c37Jv: // global
           _s2Vbr::P64 = P64[Sp + 16];
           if (R1 == 1) goto c37JZ; else goto c37JI;
       c37JZ: // global
           I64[Sp] = block_c37JM_info;
           R2 = _s2Vbr::P64;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c37JI: // global
           I64[Sp] = block_c37JB_info;
           R2 = _s2Vbr::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Jv_info" {
     block_c37Jv_info:
         const _c37Jv;
         const 66;
         const 30;
 },
 _c37JM() //  [R1]
         { []
         }
     {offset
       c37JM: // global
           I64[Sp] = block_c37JQ_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37JM_info" {
     block_c37JM_info:
         const _c37JM;
         const 194;
         const 30;
 },
 _c37JQ() //  [R1]
         { []
         }
     {offset
       c37JQ: // global
           R1 = -%MO_S_Shr_W64(R1, I64[Sp + 8]);
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37JQ_info" {
     block_c37JQ_info:
         const _c37JQ;
         const 194;
         const 30;
 },
 _c37JB() //  [R1]
         { []
         }
     {offset
       c37JB: // global
           R1 = %MO_S_Shr_W64(R1, I64[Sp + 8]);
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37JB_info" {
     block_c37JB_info:
         const _c37JB;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.002824216 UTC

[section ""data" . GHC.Float.$fEnumDouble_$cfromEnum_closure" {
     GHC.Float.$fEnumDouble_$cfromEnum_closure:
         const GHC.Float.$fEnumDouble_$cfromEnum_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c37KE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c37KM; else goto c37KN;
       c37KM: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c37KN: // global
           I64[Sp - 8] = block_c37KB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37KS; else goto c37KC;
       u37KS: // global
           call _c37KB(R1) args: 0, res: 0, upd: 0;
       c37KC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$cfromEnum_info" {
     GHC.Float.$fEnumDouble_$cfromEnum_info:
         const GHC.Float.$fEnumDouble_$cfromEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2VLN_srt+904;
 },
 _c37KB() //  [R1]
         { []
         }
     {offset
       c37KB: // global
           I64[Sp] = block_c37KH_info;
           D1 = F64[R1 + 7];
           call GHC.Float.$w$cfromEnum_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37KB_info" {
     block_c37KB_info:
         const _c37KB;
         const 0;
         const 4294967326;
         const S2VLN_srt+904;
 },
 _c37KH() //  [R1]
         { []
         }
     {offset
       c37KH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37KR; else goto c37KQ;
       c37KR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37KQ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37KH_info" {
     block_c37KH_info:
         const _c37KH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.009662494 UTC

[section ""data" . GHC.Float.$fEnumDouble_$cenumFromTo_closure" {
     GHC.Float.$fEnumDouble_$cenumFromTo_closure:
         const GHC.Float.$fEnumDouble_$cenumFromTo_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c37La: // global
           R5 = R3;
           R4 = R2;
           R3 = GHC.Float.$fFractionalDouble_closure+1;
           R2 = GHC.Classes.$fOrdDouble_closure;
           call GHC.Real.numericEnumFromTo_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$cenumFromTo_info" {
     GHC.Float.$fEnumDouble_$cenumFromTo_info:
         const GHC.Float.$fEnumDouble_$cenumFromTo_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.013516529 UTC

[section ""data" . GHC.Float.$fEnumDouble_$cenumFromThenTo_closure" {
     GHC.Float.$fEnumDouble_$cenumFromThenTo_closure:
         const GHC.Float.$fEnumDouble_$cenumFromThenTo_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c37Ll: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = GHC.Float.$fFractionalDouble_closure+1;
           R2 = GHC.Classes.$fOrdDouble_closure;
           call GHC.Real.numericEnumFromThenTo_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$cenumFromThenTo_info" {
     GHC.Float.$fEnumDouble_$cenumFromThenTo_info:
         const GHC.Float.$fEnumDouble_$cenumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S2VLN_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.016993544 UTC

[section ""data" . GHC.Float.$fEnumDouble_closure" {
     GHC.Float.$fEnumDouble_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Float.$fEnumDouble_$csucc_closure+1;
         const GHC.Float.$fEnumDouble_$cpred_closure+1;
         const GHC.Float.RealFracMethods.int2Double_closure+1;
         const GHC.Float.$fEnumDouble_$cfromEnum_closure+1;
         const GHC.Float.$fEnumDouble_$snumericEnumFrom_closure+1;
         const GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure+2;
         const GHC.Float.$fEnumDouble_$cenumFromTo_closure+2;
         const GHC.Float.$fEnumDouble_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.020164205 UTC

[section ""data" . GHC.Float.$fEnumFloat_$cenumFromTo_closure" {
     GHC.Float.$fEnumFloat_$cenumFromTo_closure:
         const GHC.Float.$fEnumFloat_$cenumFromTo_info;
         const 0;
 },
 section ""relreadonly" . u37LA_srtd" {
     u37LA_srtd:
         const S2VLN_srt+232;
         const 87;
         const 1;
         const 4194304;
 },
 GHC.Float.$fEnumFloat_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c37Lx: // global
           R5 = R3;
           R4 = R2;
           R3 = GHC.Float.$fFractionalFloat_closure+1;
           R2 = GHC.Classes.$fOrdFloat_closure;
           call GHC.Real.numericEnumFromTo_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$cenumFromTo_info" {
     GHC.Float.$fEnumFloat_$cenumFromTo_info:
         const GHC.Float.$fEnumFloat_$cenumFromTo_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u37LA_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.024732517 UTC

[section ""data" . GHC.Float.$fEnumFloat_$cenumFromThenTo_closure" {
     GHC.Float.$fEnumFloat_$cenumFromThenTo_closure:
         const GHC.Float.$fEnumFloat_$cenumFromThenTo_info;
         const 0;
 },
 section ""relreadonly" . u37LN_srtd" {
     u37LN_srtd:
         const S2VLN_srt+232;
         const 89;
         const 1;
         const 16777216;
 },
 GHC.Float.$fEnumFloat_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c37LK: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = GHC.Float.$fFractionalFloat_closure+1;
           R2 = GHC.Classes.$fOrdFloat_closure;
           call GHC.Real.numericEnumFromThenTo_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$cenumFromThenTo_info" {
     GHC.Float.$fEnumFloat_$cenumFromThenTo_info:
         const GHC.Float.$fEnumFloat_$cenumFromThenTo_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u37LN_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.030252568 UTC

[section ""data" . GHC.Float.$w$cfromEnum1_closure" {
     GHC.Float.$w$cfromEnum1_closure:
         const GHC.Float.$w$cfromEnum1_info;
 },
 GHC.Float.$w$cfromEnum1_entry() //  [F1]
         { []
         }
     {offset
       c37M6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37M7; else goto c37M8;
       c37M7: // global
           F1 = F1;
           R1 = GHC.Float.$w$cfromEnum1_closure;
           call (stg_gc_fun)(F1, R1) args: 8, res: 0, upd: 8;
       c37M8: // global
           I64[Sp - 8] = block_c37LX_info;
           F1 = F1;
           Sp = Sp - 8;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cfromEnum1_info" {
     GHC.Float.$w$cfromEnum1_info:
         const GHC.Float.$w$cfromEnum1_entry;
         const 0;
         const 14;
         const 4294967302;
 },
 _c37LX() //  [R1, R2]
         { []
         }
     {offset
       c37LX: // global
           if (%MO_S_Ge_W64(R2, 0)) goto c37M4; else goto c37M5;
       c37M4: // global
           I64[Sp - 8] = block_c37Mb_info;
           _s2VbJ::I64 = R2;
           R2 = R1;
           I64[Sp] = _s2VbJ::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
       c37M5: // global
           _s2VbN::I64 = -R2;
           if (%MO_S_Le_W64(_s2VbN::I64, 23)) goto c37MI; else goto c37MJ;
       c37MI: // global
           if (%MO_S_Ge_W64(R1, 0)) goto c37Mx; else goto c37MG;
       c37Mx: // global
           R1 = R1 >> _s2VbN::I64;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c37MG: // global
           R1 = -%MO_S_Shr_W64(-R1, _s2VbN::I64);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c37MJ: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37LX_info" {
     block_c37LX_info:
         const _c37LX;
         const 0;
         const 30;
 },
 _c37Mb() //  [R1]
         { []
         }
     {offset
       c37Mb: // global
           _s2VbJ::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c37Mf_info;
           R3 = _s2VbJ::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Mb_info" {
     block_c37Mb_info:
         const _c37Mb;
         const 65;
         const 30;
 },
 _c37Mf() //  [R1]
         { []
         }
     {offset
       c37Mf: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Mf_info" {
     block_c37Mf_info:
         const _c37Mf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.039970542 UTC

[section ""data" . GHC.Float.$fEnumFloat_$cfromEnum_closure" {
     GHC.Float.$fEnumFloat_$cfromEnum_closure:
         const GHC.Float.$fEnumFloat_$cfromEnum_info;
 },
 GHC.Float.$fEnumFloat_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c37Na: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c37Ni; else goto c37Nj;
       c37Ni: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c37Nj: // global
           I64[Sp - 8] = block_c37N7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37No; else goto c37N8;
       u37No: // global
           call _c37N7(R1) args: 0, res: 0, upd: 0;
       c37N8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$cfromEnum_info" {
     GHC.Float.$fEnumFloat_$cfromEnum_info:
         const GHC.Float.$fEnumFloat_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c37N7() //  [R1]
         { []
         }
     {offset
       c37N7: // global
           I64[Sp] = block_c37Nd_info;
           F1 = F32[R1 + 7];
           call GHC.Float.$w$cfromEnum1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37N7_info" {
     block_c37N7_info:
         const _c37N7;
         const 0;
         const 30;
 },
 _c37Nd() //  [R1]
         { []
         }
     {offset
       c37Nd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37Nn; else goto c37Nm;
       c37Nn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37Nm: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Nd_info" {
     block_c37Nd_info:
         const _c37Nd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.046699064 UTC

[section ""data" . GHC.Float.$fEnumFloat_closure" {
     GHC.Float.$fEnumFloat_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Float.$fEnumFloat_$csucc_closure+1;
         const GHC.Float.$fEnumFloat_$cpred_closure+1;
         const GHC.Float.RealFracMethods.int2Float_closure+1;
         const GHC.Float.$fEnumFloat_$cfromEnum_closure+1;
         const GHC.Float.$fEnumFloat_$snumericEnumFrom_closure+1;
         const GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure+2;
         const GHC.Float.$fEnumFloat_$cenumFromTo_closure+2;
         const GHC.Float.$fEnumFloat_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.049793517 UTC

[section ""data" . GHC.Float.expt1_closure" {
     GHC.Float.expt1_closure:
         const GHC.Float.expt1_info;
         const 0;
 },
 GHC.Float.expt1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c37NH: // global
           R6 = lvl7_r2UqF_closure;
           R5 = R4;
           R4 = R2;
           R3 = R3;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expt1_info" {
     GHC.Float.expt1_info:
         const GHC.Float.expt1_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S2VLN_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.05805626 UTC

[section ""data" . GHC.Float.$wexpt_closure" {
     GHC.Float.$wexpt_closure:
         const GHC.Float.$wexpt_info;
         const 0;
 },
 section ""relreadonly" . u37Qf_srtd" {
     u37Qf_srtd:
         const S2VLN_srt+552;
         const 53;
         const 8444249804636161;
 },
 GHC.Float.$wexpt_entry() //  [R2, R3]
         { []
         }
     {offset
       c37NU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c37NV; else goto c37NW;
       c37NV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$wexpt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c37NW: // global
           I64[Sp - 24] = block_c37NS_info;
           _s2Vc0::I64 = R3;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           _s2VbZ::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s2VbZ::P64;
           I64[Sp - 8] = _s2Vc0::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wexpt_info" {
     GHC.Float.$wexpt_info:
         const GHC.Float.$wexpt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934606;
         const u37Qf_srtd;
 },
 _c37NS() //  [R1]
         { []
         }
     {offset
       c37NS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37O1; else goto c37O0;
       c37O1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37O0: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s2Vc0::I64 = I64[Sp + 16];
           I64[Hp] = _s2Vc0::I64;
           _s2VbZ::P64 = P64[Sp + 8];
           _c37O2::P64 = Hp - 7;
           if (R1 != 1) goto s2Vc3; else goto c37Q2;
       c37Q2: // global
           if (%MO_S_Lt_W64(_s2Vc0::I64, 0)) goto s2Vc3; else goto c37Q1;
       c37Q1: // global
           if (%MO_S_Gt_W64(_s2Vc0::I64, 1100)) goto s2Vc3; else goto c37PH;
       s2Vc3: // global
           I64[Sp - 8] = block_c37O8_info;
           R3 = GHC.Float.expts4_closure;
           R2 = _s2VbZ::P64;
           P64[Sp] = _c37O2::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c37PH: // global
           I64[Sp] = block_c37Pw_info;
           R1 = GHC.Float.expts_closure;
           P64[Sp + 8] = _c37O2::P64;
           if (R1 & 7 != 0) goto u37Q9; else goto c37Px;
       u37Q9: // global
           call _c37Pw(R1) args: 0, res: 0, upd: 0;
       c37Px: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37NS_info" {
     block_c37NS_info:
         const _c37NS;
         const 130;
         const 792633598841716766;
         const S2VLN_srt+752;
 },
 _c37Pw() //  [R1]
         { []
         }
     {offset
       c37Pw: // global
           I64[Sp - 16] = block_c37PB_info;
           _s2Vcv::P64 = P64[R1 + 15];
           _s2Vcx::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2Vcx::P64;
           P64[Sp] = _s2Vcv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u37Qd; else goto c37PC;
       u37Qd: // global
           call _c37PB(R1) args: 0, res: 0, upd: 0;
       c37PC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Pw_info" {
     block_c37Pw_info:
         const _c37Pw;
         const 130;
         const 4294967326;
         const S2VLN_srt+968;
 },
 _c37PB() //  [R1]
         { []
         }
     {offset
       c37PB: // global
           I64[Sp - 8] = block_c37PG_info;
           _s2Vcy::P64 = R1;
           _s2Vcz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _s2Vcz::I64;
           P64[Sp + 16] = _s2Vcy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37Qe; else goto c37PK;
       u37Qe: // global
           call _c37PG(R1) args: 0, res: 0, upd: 0;
       c37PK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37PB_info" {
     block_c37PB_info:
         const _c37PB;
         const 516;
         const 4294967326;
         const S2VLN_srt+968;
 },
 _c37PG() //  [R1]
         { []
         }
     {offset
       c37PG: // global
           _c37O2::P64 = P64[Sp + 32];
           _s2Vc0::I64 = I64[Sp + 40];
           _s2Vcy::P64 = P64[Sp + 24];
           _s2Vcz::I64 = I64[Sp + 8];
           _s2VcA::P64 = R1;
           if (%MO_S_Gt_W64(_s2Vcz::I64,
                            _s2Vc0::I64)) goto c37PY; else goto c37Q0;
       c37Q0: // global
           if (%MO_S_Gt_W64(_s2Vc0::I64,
                            I64[R1 + 7])) goto c37PY; else goto c37PZ;
       c37PY: // global
           R4 = _c37O2::P64;
           R3 = _s2Vcy::P64;
           R2 = _s2VcA::P64;
           Sp = Sp + 48;
           call GHC.Float.expt1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c37PZ: // global
           R1 = P64[P64[Sp + 16] + ((_s2Vc0::I64 - _s2Vcz::I64 << 3) + 24)] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37PG_info" {
     block_c37PG_info:
         const _c37PG;
         const 1093;
         const 4294967326;
         const S2VLN_srt+968;
 },
 _c37O8() //  [R1]
         { []
         }
     {offset
       c37O8: // global
           _s2VbZ::P64 = P64[Sp + 16];
           _s2Vc0::I64 = I64[Sp + 24];
           if (R1 == 1) goto c37Pe; else goto c37Op;
       c37Pe: // global
           if (%MO_S_Gt_W64(_s2Vc0::I64, 324)) goto c37OH; else goto c37OU;
       c37OH: // global
           if (%MO_S_Lt_W64(_s2Vc0::I64, 0)) goto c37OF; else goto c37OE;
       c37OE: // global
           if (_s2Vc0::I64 == 0) goto c37OC; else goto c37OB;
       c37OB: // global
           R3 = _s2Vc0::I64;
           R2 = _s2VbZ::P64;
           Sp = Sp + 32;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 0, upd: 8;
       c37OU: // global
           I64[Sp] = block_c37OJ_info;
           R1 = GHC.Float.expts10_closure;
           if (R1 & 7 != 0) goto u37Qa; else goto c37OK;
       u37Qa: // global
           call _c37OJ(R1) args: 0, res: 0, upd: 0;
       c37OK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c37Op: // global
           if (%MO_S_Lt_W64(_s2Vc0::I64, 0)) goto c37OF; else goto c37Om;
       c37OF: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c37Om: // global
           if (_s2Vc0::I64 == 0) goto c37OC; else goto c37Oj;
       c37OC: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c37Oj: // global
           R3 = _s2Vc0::I64;
           R2 = _s2VbZ::P64;
           Sp = Sp + 32;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37O8_info" {
     block_c37O8_info:
         const _c37O8;
         const 259;
         const 360288000254410782;
         const S2VLN_srt+760;
 },
 _c37OJ() //  [R1]
         { []
         }
     {offset
       c37OJ: // global
           I64[Sp - 8] = block_c37OO_info;
           _s2Vcc::P64 = P64[R1 + 15];
           _s2Vce::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2Vce::P64;
           P64[Sp + 16] = _s2Vcc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37Qb; else goto c37OP;
       u37Qb: // global
           call _c37OO(R1) args: 0, res: 0, upd: 0;
       c37OP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37OJ_info" {
     block_c37OJ_info:
         const _c37OJ;
         const 387;
         const 4294967326;
         const S2VLN_srt+968;
 },
 _c37OO() //  [R1]
         { []
         }
     {offset
       c37OO: // global
           I64[Sp - 8] = block_c37OT_info;
           _s2Vcf::P64 = R1;
           _s2Vcg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp] = _s2Vcg::I64;
           P64[Sp + 24] = _s2Vcf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u37Qc; else goto c37OX;
       u37Qc: // global
           call _c37OT(R1) args: 0, res: 0, upd: 0;
       c37OX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37OO_info" {
     block_c37OO_info:
         const _c37OO;
         const 516;
         const 4294967326;
         const S2VLN_srt+968;
 },
 _c37OT() //  [R1]
         { []
         }
     {offset
       c37OT: // global
           _c37O2::P64 = P64[Sp + 24];
           _s2Vc0::I64 = I64[Sp + 40];
           _s2Vcf::P64 = P64[Sp + 32];
           _s2Vcg::I64 = I64[Sp + 8];
           _s2Vch::P64 = R1;
           if (%MO_S_Gt_W64(_s2Vcg::I64,
                            _s2Vc0::I64)) goto c37Pb; else goto c37Pd;
       c37Pd: // global
           if (%MO_S_Gt_W64(_s2Vc0::I64,
                            I64[R1 + 7])) goto c37Pb; else goto c37Pc;
       c37Pb: // global
           R4 = _c37O2::P64;
           R3 = _s2Vcf::P64;
           R2 = _s2Vch::P64;
           Sp = Sp + 48;
           call GHC.Float.expt1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c37Pc: // global
           R1 = P64[P64[Sp + 16] + ((_s2Vc0::I64 - _s2Vcg::I64 << 3) + 24)] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37OT_info" {
     block_c37OT_info:
         const _c37OT;
         const 1093;
         const 4294967326;
         const S2VLN_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.078570846 UTC

[section ""data" . GHC.Float.expt_closure" {
     GHC.Float.expt_closure:
         const GHC.Float.expt_info;
         const 0;
 },
 GHC.Float.expt_entry() //  [R2, R3]
         { []
         }
     {offset
       c37R9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37Ra; else goto c37Rb;
       c37Ra: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.expt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c37Rb: // global
           I64[Sp - 16] = block_c37R6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u37Rf; else goto c37R7;
       u37Rf: // global
           call _c37R6(R1) args: 0, res: 0, upd: 0;
       c37R7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expt_info" {
     GHC.Float.expt_info:
         const GHC.Float.expt_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2VLN_srt+960;
 },
 _c37R6() //  [R1]
         { []
         }
     {offset
       c37R6: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37R6_info" {
     block_c37R6_info:
         const _c37R6;
         const 1;
         const 4294967326;
         const S2VLN_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.09301452 UTC

[section ""data" . GHC.Float.fromRat'_closure" {
     GHC.Float.fromRat'_closure:
         const GHC.Float.fromRat'_info;
         const 0;
 },
 sat_s2VcY_entry() //  [R1]
         { []
         }
     {offset
       c37Sw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c37SA; else goto c37SB;
       c37SA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37SB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c37St_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u37SJ; else goto c37Su;
       u37SJ: // global
           call _c37St(R1) args: 0, res: 0, upd: 0;
       c37Su: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VcY_info" {
     sat_s2VcY_info:
         const sat_s2VcY_entry;
         const 1;
         const 12884901904;
         const S2VLN_srt+984;
 },
 _c37St() //  [R1]
         { []
         }
     {offset
       c37St: // global
           I64[Sp] = block_c37Sz_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u37SI; else goto c37SD;
       u37SI: // global
           call _c37Sz(R1) args: 0, res: 0, upd: 0;
       c37SD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37St_info" {
     block_c37St_info:
         const _c37St;
         const 0;
         const 12884901918;
         const S2VLN_srt+984;
 },
 _c37Sz() //  [R1]
         { []
         }
     {offset
       c37Sz: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37Sz_info" {
     block_c37Sz_info:
         const _c37Sz;
         const 0;
         const 12884901918;
         const S2VLN_srt+984;
 },
 r_s2VcP_entry() //  [R1]
         { []
         }
     {offset
       c37SK: // global
           _s2VcP::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c37SL; else goto c37SM;
       c37SM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37SO; else goto c37SN;
       c37SO: // global
           HpAlloc = 48;
           goto c37SL;
       c37SL: // global
           R1 = _s2VcP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37SN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2VcP::P64;
           _s2VcN::P64 = P64[_s2VcP::P64 + 16];
           _s2VcR::P64 = P64[_s2VcP::P64 + 24];
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _s2VcR::P64;
           I64[Hp - 16] = sat_s2VcY_info;
           P64[Hp] = _s2VcR::P64;
           R2 = _s2VcN::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 40;
           call GHC.Float.encodeFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . r_s2VcP_info" {
     r_s2VcP_info:
         const r_s2VcP_entry;
         const 2;
         const 12884901906;
         const S2VLN_srt+984;
 },
 b_s2VcQ_entry() //  [R1]
         { []
         }
     {offset
       c37SR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37SS; else goto c37ST;
       c37SS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37ST: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.floatRadix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . b_s2VcQ_info" {
     b_s2VcQ_info:
         const b_s2VcQ_entry;
         const 2;
         const 18;
 },
 sat_s2Vdu_entry() //  [R1]
         { []
         }
     {offset
       c37TC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c37TD; else goto c37TE;
       c37TD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37TE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c37Tz_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = P64[R1 + 16];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vdu_info" {
     sat_s2Vdu_info:
         const sat_s2Vdu_entry;
         const 3;
         const 1152921508901814287;
         const S2VLN_srt+776;
 },
 _c37Tz() //  [R1, R2]
         { []
         }
     {offset
       c37Tz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37TH; else goto c37TG;
       c37TH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c37TG: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37Tz_info" {
     block_c37Tz_info:
         const _c37Tz;
         const 0;
         const 30;
 },
 ds_s2VcR_entry() //  [R1]
         { []
         }
     {offset
       c37TI: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c37TJ; else goto c37TK;
       c37TJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37TK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c37RB_info;
           _s2VcN::P64 = P64[R1 + 16];
           R2 = _s2VcN::P64;
           I64[Sp - 72] = stg_ap_p_info;
           _s2VcP::P64 = P64[R1 + 32];
           P64[Sp - 64] = _s2VcP::P64;
           P64[Sp - 48] = _s2VcN::P64;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = _s2VcP::P64;
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 72;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s2VcR_info" {
     ds_s2VcR_info:
         const ds_s2VcR_entry;
         const 4;
         const 3494802145587232783;
         const S2VLN_srt+776;
 },
 _c37RB() //  [R1]
         { []
         }
     {offset
       c37RB: // global
           I64[Sp - 8] = block_c37RF_info;
           _s2Vd4::I64 = I64[R1 + 7];
           R3 = _s2Vd4::I64;
           R2 = P64[Sp + 32];
           I64[Sp] = _s2Vd4::I64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37RB_info" {
     block_c37RB_info:
         const _c37RB;
         const 4;
         const 3494802145587232798;
         const S2VLN_srt+776;
 },
 _c37RF() //  [R1]
         { []
         }
     {offset
       c37RF: // global
           I64[Sp] = block_c37RJ_info;
           _s2Vd5::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s2Vd5::P64;
           if (R1 & 7 != 0) goto u37Uq; else goto c37RK;
       u37Uq: // global
           call _c37RJ(R1) args: 0, res: 0, upd: 0;
       c37RK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37RF_info" {
     block_c37RF_info:
         const _c37RF;
         const 69;
         const 3494802145587232798;
         const S2VLN_srt+776;
 },
 _c37RJ() //  [R1]
         { []
         }
     {offset
       c37RJ: // global
           I64[Sp - 16] = block_c37RO_info;
           _s2Vd7::P64 = P64[R1 + 7];
           R3 = _s2Vd7::P64;
           R2 = P64[Sp + 40];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _s2Vd7::P64;
           Sp = Sp - 16;
           call GHC.Float.$wintegerLogBase_entry(R3,
                                                 R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37RJ_info" {
     block_c37RJ_info:
         const _c37RJ;
         const 69;
         const 3494802145587232798;
         const S2VLN_srt+776;
 },
 _c37RO() //  [R1]
         { []
         }
     {offset
       c37RO: // global
           I64[Sp - 8] = block_c37RS_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$wintegerLogBase_entry(R3,
                                                 R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37RO_info" {
     block_c37RO_info:
         const _c37RO;
         const 263;
         const 3494802145587232798;
         const S2VLN_srt+776;
 },
 _c37RS() //  [R1]
         { []
         }
     {offset
       c37RS: // global
           I64[Sp] = block_c37RW_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 56];
           I64[Sp + 56] = R1;
           Sp = Sp - 16;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37RS_info" {
     block_c37RS_info:
         const _c37RS;
         const 584;
         const 3494802111227494430;
         const S2VLN_srt+776;
 },
 _c37RW() //  [R1]
         { []
         }
     {offset
       c37RW: // global
           I64[Sp] = block_c37S0_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u37Ur; else goto c37S1;
       u37Ur: // global
           call _c37S0(R1) args: 0, res: 0, upd: 0;
       c37S1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37RW_info" {
     block_c37RW_info:
         const _c37RW;
         const 5704;
         const 3494802111227494430;
         const S2VLN_srt+776;
 },
 _c37S0() //  [R1]
         { []
         }
     {offset
       c37S0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c37TT; else goto c37TS;
       c37TT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c37TS: // global
           _s2VcQ::P64 = P64[Sp + 64];
           _s2Vd4::I64 = I64[Sp + 32];
           _s2Vdg::I64 = I64[Sp + 8] - I64[Sp + 56] - _s2Vd4::I64;
           _s2Vdi::I64 = I64[R1 + 7] - _s2Vd4::I64;
           if (%MO_S_Gt_W64(_s2Vdg::I64,
                            _s2Vdi::I64)) goto c37Ul; else goto c37Um;
       c37Ul: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vdg::I64;
           _s2Vdl::P64 = Hp - 7;
           _s2Vdk::I64 = _s2Vdg::I64;
           goto s2Vdj;
       c37Um: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vdi::I64;
           _s2Vdl::P64 = Hp - 7;
           _s2Vdk::I64 = _s2Vdi::I64;
           goto s2Vdj;
       s2Vdj: // global
           if (%MO_S_Ge_W64(_s2Vdk::I64, 0)) goto c37Ua; else goto c37Uf;
       c37Ua: // global
           I64[Sp + 8] = block_c37T2_info;
           R3 = _s2Vdk::I64;
           R2 = _s2VcQ::P64;
           P64[Sp + 40] = _s2Vdl::P64;
           I64[Sp + 56] = _s2Vdk::I64;
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
       c37Uf: // global
           I64[Sp + 8] = block_c37Td_info;
           R3 = -_s2Vdk::I64;
           R2 = _s2VcQ::P64;
           P64[Sp + 40] = _s2Vdl::P64;
           I64[Sp + 56] = _s2Vdk::I64;
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37S0_info" {
     block_c37S0_info:
         const _c37S0;
         const 5704;
         const 3494802111227494430;
         const S2VLN_srt+776;
 },
 _c37T2() //  [R1]
         { []
         }
     {offset
       c37T2: // global
           I64[Sp + 24] = block_c37T6_info;
           R5 = GHC.Float.$fRealDouble1_closure;
           R4 = R1;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37T2_info" {
     block_c37T2_info:
         const _c37T2;
         const 2311;
         const 3458773314208530462;
         const S2VLN_srt+776;
 },
 _c37T6() //  [R1, R2]
         { []
         }
     {offset
       c37T6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37Ue; else goto c37Ud;
       c37Ue: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c37Ud: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = Hp - 15;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _s2Vdm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37T6_info" {
     block_c37T6_info:
         const _c37T6;
         const 260;
         const 3458764518115508254;
         const S2VLN_srt+776;
 },
 _c37Td() //  [R1]
         { []
         }
     {offset
       c37Td: // global
           I64[Sp + 24] = block_c37Th_info;
           R5 = R1;
           R4 = GHC.Float.$fRealDouble1_closure;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c37Td_info" {
     block_c37Td_info:
         const _c37Td;
         const 2311;
         const 3458773314208530462;
         const S2VLN_srt+776;
 },
 _c37Th() //  [R1, R2]
         { []
         }
     {offset
       c37Th: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37Uj; else goto c37Ui;
       c37Uj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c37Ui: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           P64[Sp] = R1;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call _s2Vdm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c37Th_info" {
     block_c37Th_info:
         const _c37Th;
         const 260;
         const 3458764518115508254;
         const S2VLN_srt+776;
 },
 _s2Vdm() //  []
         { []
         }
     {offset
       s2Vdm: // global
           I64[Sp - 8] = block_c37Tn_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = P64[Sp + 32];
           R3 = P64[Sp];
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 24;
     }
 },
 _c37Tn() //  [R1]
         { []
         }
     {offset
       c37Tn: // global
           if (R1 & 7 == 1) goto c37U5; else goto c37TY;
       c37U5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37U8; else goto c37U7;
       c37U8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c37U7: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 15;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c37TY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c37U1; else goto c37U0;
       c37U1: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c37U0: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = I64[Sp + 48] + 1;
           I64[Hp - 56] = sat_s2Vdu_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37Tn_info" {
     block_c37Tn_info:
         const _c37Tn;
         const 3079;
         const 1152921508901814302;
         const S2VLN_srt+776;
 },
 GHC.Float.fromRat'_entry() //  [R2, R3]
         { []
         }
     {offset
       c37Uu: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c37Uy; else goto c37Ux;
       c37Uy: // global
           HpAlloc = 112;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c37Ux: // global
           I64[Hp - 104] = r_s2VcP_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = Hp - 40;
           I64[Hp - 72] = b_s2VcQ_info;
           P64[Hp - 56] = R2;
           _c37Rt::P64 = Hp - 104;
           P64[Hp - 48] = _c37Rt::P64;
           I64[Hp - 40] = ds_s2VcR_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = _c37Rt::P64;
           P64[Hp] = Hp - 72;
           R1 = _c37Rt::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat'_info" {
     GHC.Float.fromRat'_info:
         const GHC.Float.fromRat'_entry;
         const 0;
         const 8971179292469755918;
         const 8589934607;
         const S2VLN_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.144206919 UTC

[section ""data" . GHC.Float.$wfromRat_closure" {
     GHC.Float.$wfromRat_closure:
         const GHC.Float.$wfromRat_info;
         const 0;
 },
 $dRealFrac_s2VdP_entry() //  [R1]
         { []
         }
     {offset
       c37Wn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37Wo; else goto c37Wp;
       c37Wo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37Wp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dRealFrac_s2VdP_info" {
     $dRealFrac_s2VdP_info:
         const $dRealFrac_s2VdP_entry;
         const 1;
         const 16;
 },
 $dReal_s2VdQ_entry() //  [R1]
         { []
         }
     {offset
       c37Wu: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s2VdQ_info" {
     $dReal_s2VdQ_info:
         const $dReal_s2VdQ_entry;
         const 1;
         const 16;
 },
 $dNum_s2VdR_entry() //  [R1]
         { []
         }
     {offset
       c37WB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c37WC; else goto c37WD;
       c37WC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37WD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s2VdR_info" {
     $dNum_s2VdR_info:
         const $dNum_s2VdR_entry;
         const 1;
         const 16;
 },
 sat_s2VdW_entry() //  [R1]
         { []
         }
     {offset
       c37X1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37X5; else goto c37X6;
       c37X5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37X6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c37WZ_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VdW_info" {
     sat_s2VdW_info:
         const sat_s2VdW_entry;
         const 2;
         const 18;
 },
 _c37WZ() //  [R1]
         { []
         }
     {offset
       c37WZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37X9; else goto c37X8;
       c37X9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c37X8: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37WZ_info" {
     block_c37WZ_info:
         const _c37WZ;
         const 1;
         const 30;
 },
 sat_s2VdX_entry() //  [R1]
         { []
         }
     {offset
       c37Xa: // global
           _s2VdX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c37Xb; else goto c37Xc;
       c37Xc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c37Xe; else goto c37Xd;
       c37Xe: // global
           HpAlloc = 32;
           goto c37Xb;
       c37Xb: // global
           R1 = _s2VdX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37Xd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2VdX::P64;
           _s2VdM::P64 = P64[_s2VdX::P64 + 16];
           _s2VdN::P64 = P64[_s2VdX::P64 + 24];
           _s2VdO::P64 = P64[_s2VdX::P64 + 32];
           I64[Hp - 24] = sat_s2VdW_info;
           P64[Hp - 8] = _s2VdN::P64;
           P64[Hp] = _s2VdO::P64;
           R3 = Hp - 24;
           R2 = _s2VdM::P64;
           Sp = Sp - 16;
           call GHC.Float.fromRat'_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VdX_info" {
     sat_s2VdX_info:
         const sat_s2VdX_entry;
         const 3;
         const 4294967311;
         const S2VLN_srt+1016;
 },
 sat_s2Ve3_entry() //  [R1]
         { []
         }
     {offset
       c37Xt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37Xu; else goto c37Xv;
       c37Xu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37Xv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Ve3_info" {
     sat_s2Ve3_info:
         const sat_s2Ve3_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+832;
 },
 sat_s2Ve2_entry() //  [R1]
         { []
         }
     {offset
       c37XA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37XB; else goto c37XC;
       c37XB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37XC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Ve2_info" {
     sat_s2Ve2_info:
         const sat_s2Ve2_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+832;
 },
 sat_s2Ve6_entry() //  [R1]
         { []
         }
     {offset
       c37XN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37XO; else goto c37XP;
       c37XO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37XP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Ve6_info" {
     sat_s2Ve6_info:
         const sat_s2Ve6_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+832;
 },
 sat_s2Ve5_entry() //  [R1]
         { []
         }
     {offset
       c37XU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37XV; else goto c37XW;
       c37XV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37XW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Ve5_info" {
     sat_s2Ve5_info:
         const sat_s2Ve5_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+864;
 },
 sat_s2Ve7_entry() //  [R1]
         { []
         }
     {offset
       c37XZ: // global
           _s2Ve7::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c37Y0; else goto c37Y1;
       c37Y1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37Y3; else goto c37Y2;
       c37Y3: // global
           HpAlloc = 48;
           goto c37Y0;
       c37Y0: // global
           R1 = _s2Ve7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37Y2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Ve7::P64;
           _s2VdP::P64 = P64[_s2Ve7::P64 + 16];
           _s2VdR::P64 = P64[_s2Ve7::P64 + 24];
           I64[Hp - 40] = sat_s2Ve6_info;
           P64[Hp - 24] = _s2VdR::P64;
           I64[Hp - 16] = sat_s2Ve5_info;
           P64[Hp] = _s2VdR::P64;
           I64[Sp - 40] = block_c37XX_info;
           R2 = _s2VdP::P64;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Ve7_info" {
     sat_s2Ve7_info:
         const sat_s2Ve7_entry;
         const 2;
         const 73014444050;
         const S2VLN_srt+832;
 },
 _c37XX() //  [R1]
         { []
         }
     {offset
       c37XX: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c37XJ::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c37XJ::P64;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c37XX_info" {
     block_c37XX_info:
         const _c37XX;
         const 2;
         const 30;
 },
 sat_s2Vea_entry() //  [R1]
         { []
         }
     {offset
       c37Yd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37Ye; else goto c37Yf;
       c37Ye: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37Yf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vea_info" {
     sat_s2Vea_info:
         const sat_s2Vea_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+832;
 },
 sat_s2Ve9_entry() //  [R1]
         { []
         }
     {offset
       c37Yk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c37Yl; else goto c37Ym;
       c37Yl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c37Ym: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Ve9_info" {
     sat_s2Ve9_info:
         const sat_s2Ve9_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+864;
 },
 GHC.Float.$wfromRat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c37Yq: // global
           _s2VdO::P64 = R4;
           _s2VdN::P64 = R3;
           _s2VdM::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c37Yr; else goto c37Ys;
       c37Ys: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c37Yu; else goto c37Yt;
       c37Yu: // global
           HpAlloc = 72;
           goto c37Yr;
       c37Yr: // global
           R4 = _s2VdO::P64;
           R3 = _s2VdN::P64;
           R2 = _s2VdM::P64;
           R1 = GHC.Float.$wfromRat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c37Yt: // global
           I64[Hp - 64] = $dRealFrac_s2VdP_info;
           P64[Hp - 48] = _s2VdM::P64;
           I64[Hp - 40] = $dReal_s2VdQ_info;
           _c37Wj::P64 = Hp - 64;
           P64[Hp - 24] = _c37Wj::P64;
           I64[Hp - 16] = $dNum_s2VdR_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 48] = block_c37WE_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s2VdO::P64;
           P64[Sp - 40] = _c37Wj::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _s2VdM::P64;
           P64[Sp - 16] = _s2VdN::P64;
           P64[Sp - 8] = _s2VdO::P64;
           Sp = Sp - 48;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wfromRat_info" {
     GHC.Float.$wfromRat_info:
         const GHC.Float.$wfromRat_entry;
         const 0;
         const 108086464071335950;
         const 12884901911;
         const S2VLN_srt+832;
 },
 _c37WE() //  [R1]
         { []
         }
     {offset
       c37WE: // global
           _s2VdN::P64 = P64[Sp + 32];
           if (R1 == 1) goto c37Yp; else goto c37Yo;
       c37Yp: // global
           I64[Sp] = block_c37Xh_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s2VdN::P64;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c37Yo: // global
           I64[Sp + 8] = block_c37WI_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s2VdN::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37WE_info" {
     block_c37WE_info:
         const _c37WE;
         const 5;
         const 36028870033408030;
         const S2VLN_srt+832;
 },
 _c37Xh() //  [R1]
         { []
         }
     {offset
       c37Xh: // global
           if (R1 == 1) goto c37Z7; else goto c37YR;
       c37Z7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37Za; else goto c37Z9;
       c37Za: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37Z9: // global
           I64[Hp - 40] = sat_s2Vea_info;
           _c37Wx::P64 = P64[Sp + 16];
           P64[Hp - 24] = _c37Wx::P64;
           I64[Hp - 16] = sat_s2Ve9_info;
           P64[Hp] = _c37Wx::P64;
           I64[Sp + 24] = block_c37Z6_info;
           R2 = P64[Sp + 8];
           P64[Sp + 32] = Hp - 16;
           P64[Sp + 40] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
       c37YR: // global
           I64[Sp] = block_c37Xl_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Xh_info" {
     block_c37Xh_info:
         const _c37Xh;
         const 1285;
         const 73014444062;
         const S2VLN_srt+832;
 },
 _c37Z6() //  [R1]
         { []
         }
     {offset
       c37Z6: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Z6_info" {
     block_c37Z6_info:
         const _c37Z6;
         const 2;
         const 30;
 },
 _c37Xl() //  [R1]
         { []
         }
     {offset
       c37Xl: // global
           _c37Wj::P64 = P64[Sp + 8];
           _c37Wx::P64 = P64[Sp + 16];
           if (R1 == 1) goto c37Z2; else goto c37YU;
       c37Z2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c37Z5; else goto c37Z4;
       c37Z5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37Z4: // global
           I64[Hp - 24] = sat_s2Ve7_info;
           P64[Hp - 8] = _c37Wj::P64;
           P64[Hp] = _c37Wx::P64;
           R2 = _c37Wx::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 24;
           Sp = Sp + 32;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
       c37YU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c37YX; else goto c37YW;
       c37YX: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37YW: // global
           I64[Hp - 40] = sat_s2Ve3_info;
           P64[Hp - 24] = _c37Wx::P64;
           I64[Hp - 16] = sat_s2Ve2_info;
           P64[Hp] = _c37Wx::P64;
           I64[Sp + 24] = block_c37YS_info;
           R2 = _c37Wj::P64;
           P64[Sp + 32] = Hp - 16;
           P64[Sp + 40] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37Xl_info" {
     block_c37Xl_info:
         const _c37Xl;
         const 1797;
         const 73014444062;
         const S2VLN_srt+832;
 },
 _c37YS() //  [R1]
         { []
         }
     {offset
       c37YS: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37YS_info" {
     block_c37YS_info:
         const _c37YS;
         const 2;
         const 30;
 },
 _c37WI() //  [R1]
         { []
         }
     {offset
       c37WI: // global
           _s2VdN::P64 = P64[Sp + 24];
           if (R1 == 1) goto c37YK; else goto c37Yy;
       c37YK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c37YN; else goto c37YM;
       c37YN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37YM: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = _s2VdN::P64;
           P64[Hp] = P64[Sp + 32];
           R3 = Hp - 15;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call GHC.Float.fromRat'_entry(R3, R2) args: 8, res: 0, upd: 8;
       c37Yy: // global
           I64[Sp] = block_c37WM_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s2VdN::P64;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c37WI_info" {
     block_c37WI_info:
         const _c37WI;
         const 4;
         const 36028801313931294;
         const S2VLN_srt+832;
 },
 _c37WM() //  [R1]
         { []
         }
     {offset
       c37WM: // global
           _s2VdM::P64 = P64[Sp + 16];
           if (R1 == 1) goto c37YD; else goto c37YC;
       c37YD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c37YG; else goto c37YF;
       c37YG: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c37YF: // global
           I64[Hp - 32] = sat_s2VdX_info;
           P64[Hp - 16] = _s2VdM::P64;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp + 24;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
       c37YC: // global
           R2 = _s2VdM::P64;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = GHC.Float.rationalToDouble5_closure;
           P64[Sp + 32] = GHC.Float.minExpt_closure+1;
           Sp = Sp + 16;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c37WM_info" {
     block_c37WM_info:
         const _c37WM;
         const 4;
         const 36028801313931294;
         const S2VLN_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.189041144 UTC

[section ""data" . GHC.Float.fromRat_closure" {
     GHC.Float.fromRat_closure:
         const GHC.Float.fromRat_info;
         const 0;
 },
 GHC.Float.fromRat_entry() //  [R2, R3]
         { []
         }
     {offset
       c380U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c380V; else goto c380W;
       c380V: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c380W: // global
           I64[Sp - 16] = block_c380R_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3810; else goto c380S;
       u3810: // global
           call _c380R(R1) args: 0, res: 0, upd: 0;
       c380S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat_info" {
     GHC.Float.fromRat_info:
         const GHC.Float.fromRat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+1024;
 },
 _c380R() //  [R1]
         { []
         }
     {offset
       c380R: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$wfromRat_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c380R_info" {
     block_c380R_info:
         const _c380R;
         const 1;
         const 4294967326;
         const S2VLN_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.195200764 UTC

[section ""data" . lvl8_r2UqG_closure" {
     lvl8_r2UqG_closure:
         const lvl8_r2UqG_info;
 },
 lvl8_r2UqG_entry() //  [R2]
         { []
         }
     {offset
       c381g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c381k; else goto c381l;
       c381k: // global
           R2 = R2;
           R1 = lvl8_r2UqG_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c381l: // global
           I64[Sp - 8] = block_c381e_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_r2UqG_info" {
     lvl8_r2UqG_info:
         const lvl8_r2UqG_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c381e() //  [R1]
         { []
         }
     {offset
       c381e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c381o; else goto c381n;
       c381o: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c381n: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c381e_info" {
     block_c381e_info:
         const _c381e;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.201955958 UTC

[section ""data" . lvl9_r2UqH_closure" {
     lvl9_r2UqH_closure:
         const lvl9_r2UqH_info;
         const 0;
         const 0;
         const 0;
 },
 section ""relreadonly" . u381H_srtd" {
     u381H_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2251799813685249;
 },
 lvl9_r2UqH_entry() //  [R1]
         { []
         }
     {offset
       c381E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c381F; else goto c381G;
       c381F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c381G: // global
           (_c381B::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c381B::I64 == 0) goto c381D; else goto c381C;
       c381D: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c381C: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c381B::I64;
           R3 = 23;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r2UqH_info" {
     lvl9_r2UqH_info:
         const lvl9_r2UqH_entry;
         const 0;
         const 18446744069414584341;
         const u381H_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.206828241 UTC

[section ""data" . sat_s2Vei_closure" {
     sat_s2Vei_closure:
         const GHC.Types.I#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.20852208 UTC

[section ""data" . sat_s2Vej_closure" {
     sat_s2Vej_closure:
         const :_con_info;
         const sat_s2Vei_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.211039668 UTC

[section ""data" . lvl10_r2UqI_closure" {
     lvl10_r2UqI_closure:
         const lvl10_r2UqI_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r2UqI_entry() //  [R1]
         { []
         }
     {offset
       c381Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c381Z; else goto c3820;
       c381Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3820: // global
           (_c381V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c381V::I64 == 0) goto c381X; else goto c381W;
       c381X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c381W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c381V::I64;
           R3 = sat_s2Vej_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_r2UqI_info" {
     lvl10_r2UqI_info:
         const lvl10_r2UqI_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+1040;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.248961603 UTC

[section ""data" . GHC.Float.$w$sfloatToDigits1_closure" {
     GHC.Float.$w$sfloatToDigits1_closure:
         const GHC.Float.$w$sfloatToDigits1_info;
         const 0;
 },
 GHC.Float.$w$sfloatToDigits1_slow() //  [R1]
         { []
         }
     {offset
       c3829: // global
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$sfloatToDigits1_entry(F1,
                                                   R2,
                                                   R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2Ver_entry() //  [R1]
         { []
         }
     {offset
       c382t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c382u; else goto c382v;
       c382u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c382v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Ver_info" {
     sat_s2Ver_info:
         const sat_s2Ver_entry;
         const 4294967296;
         const 17;
 },
 ds_s2Ven_entry() //  [R1]
         { []
         }
     {offset
       c382x: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c382y; else goto c382z;
       c382y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c382z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c382k_info;
           F1 = F32[R1 + 16];
           Sp = Sp - 24;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s2Ven_info" {
     ds_s2Ven_info:
         const ds_s2Ven_entry;
         const 4294967296;
         const 17;
 },
 _c382k() //  [R1, R2]
         { []
         }
     {offset
       c382k: // global
           I64[Sp - 8] = R2;
           I64[Sp] = R1;
           Sp = Sp - 16;
           call _c382l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c382k_info" {
     block_c382k_info:
         const _c382k;
         const 0;
         const 30;
 },
 _c382l() //  []
         { []
         }
     {offset
       c382l: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c382C; else goto c382B;
       c382C: // global
           HpAlloc = 64;
           I64[Sp] = block_c382l_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c382B: // global
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = sat_s2Ver_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c382l_info" {
     block_c382l_info:
         const _c382l;
         const 194;
         const 30;
 },
 section ""relreadonly" . u38dk_srtd" {
     u38dk_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2252933685051393;
 },
 sat_s2VeD_entry() //  [R1]
         { []
         }
     {offset
       c383a: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c383b; else goto c383c;
       c383b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c383c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3838_info;
           R3 = I64[R1 + 24];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VeD_info" {
     sat_s2VeD_info:
         const sat_s2VeD_entry;
         const 4294967297;
         const 18446744069414584339;
         const u38dk_srtd;
 },
 _c3838() //  [R1]
         { []
         }
     {offset
       c3838: // global
           I64[Sp - 8] = block_c383f_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3838_info" {
     block_c3838_info:
         const _c3838;
         const 1;
         const 141733920798;
         const S2VLN_srt+832;
 },
 _c383f() //  [R1]
         { []
         }
     {offset
       c383f: // global
           if (R1 == 1) goto c383q; else goto c383m;
       c383q: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c383m: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c383f_info" {
     block_c383f_info:
         const _c383f;
         const 2;
         const 4294967326;
         const S2VLN_srt+872;
 },
 section ""relreadonly" . u38dl_srtd" {
     u38dl_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2252933685051393;
 },
 ds1_s2Vet_entry() //  [R1]
         { []
         }
     {offset
       c383r: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c383s; else goto c383t;
       c383s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c383t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c382J_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u383D; else goto c382K;
       u383D: // global
           call _c382J(R1) args: 0, res: 0, upd: 0;
       c382K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s2Vet_info" {
     ds1_s2Vet_info:
         const ds1_s2Vet_entry;
         const 1;
         const 18446744069414584336;
         const u38dl_srtd;
 },
 section ""relreadonly" . u38dm_srtd" {
     u38dm_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2252933685051393;
 },
 _c382J() //  [R1]
         { []
         }
     {offset
       c382J: // global
           I64[Sp - 16] = block_c382O_info;
           _s2Veu::P64 = R1;
           _s2Vev::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s2Vev::P64;
           P64[Sp] = _s2Veu::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u383C; else goto c382P;
       u383C: // global
           call _c382O(R1) args: 0, res: 0, upd: 0;
       c382P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c382J_info" {
     block_c382J_info:
         const _c382J;
         const 0;
         const 18446744069414584350;
         const u38dm_srtd;
 },
 section ""relreadonly" . u38dn_srtd" {
     u38dn_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2252933685051393;
 },
 _c382O() //  [R1]
         { []
         }
     {offset
       c382O: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c383x; else goto c383w;
       c383x: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c383w: // global
           _s2Vey::I64 = I64[R1 + 7];
           _s2Vez::I64 = (-149) - _s2Vey::I64;
           if (%MO_S_Le_W64(_s2Vez::I64, 0)) goto c383z; else goto c383B;
       c383z: // global
           Hp = Hp - 72;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c383B: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s2Vey::I64 + _s2Vez::I64;
           I64[Hp - 48] = sat_s2VeD_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s2Vez::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 63;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c382O_info" {
     block_c382O_info:
         const _c382O;
         const 2;
         const 18446744069414584350;
         const u38dn_srtd;
 },
 section ""relreadonly" . u38do_srtd" {
     u38do_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s2VeV_entry() //  [R1]
         { []
         }
     {offset
       c3847: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c384a; else goto c384b;
       c384a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c384b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3849_info;
           R3 = -I64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VeV_info" {
     sat_s2VeV_info:
         const sat_s2VeV_entry;
         const 4294967296;
         const 18446744069414584337;
         const u38do_srtd;
 },
 section ""relreadonly" . u38dp_srtd" {
     u38dp_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3849() //  [R1]
         { []
         }
     {offset
       c3849: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3849_info" {
     block_c3849_info:
         const _c3849;
         const 0;
         const 18446744069414584350;
         const u38dp_srtd;
 },
 section ""relreadonly" . u38dq_srtd" {
     u38dq_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VeS_entry() //  [R1]
         { []
         }
     {offset
       c384k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c384l; else goto c384m;
       c384l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c384m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VeS_info" {
     sat_s2VeS_info:
         const sat_s2VeS_entry;
         const 1;
         const 18446744069414584336;
         const u38dq_srtd;
 },
 section ""relreadonly" . u38dr_srtd" {
     u38dr_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s2Vf3_entry() //  [R1]
         { []
         }
     {offset
       c384C: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c384I; else goto c384J;
       c384I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c384J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c384H_info;
           R3 = -I64[R1 + 16] + 1;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vf3_info" {
     sat_s2Vf3_info:
         const sat_s2Vf3_entry;
         const 4294967296;
         const 18446744069414584337;
         const u38dr_srtd;
 },
 section ""relreadonly" . u38ds_srtd" {
     u38ds_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c384H() //  [R1]
         { []
         }
     {offset
       c384H: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c384H_info" {
     block_c384H_info:
         const _c384H;
         const 0;
         const 18446744069414584350;
         const u38ds_srtd;
 },
 section ""relreadonly" . u38dt_srtd" {
     u38dt_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VeZ_entry() //  [R1]
         { []
         }
     {offset
       c384U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c384V; else goto c384W;
       c384V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c384W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c384S_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VeZ_info" {
     sat_s2VeZ_info:
         const sat_s2VeZ_entry;
         const 1;
         const 18446744069414584336;
         const u38dt_srtd;
 },
 section ""relreadonly" . u38du_srtd" {
     u38du_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c384S() //  [R1]
         { []
         }
     {offset
       c384S: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c384S_info" {
     block_c384S_info:
         const _c384S;
         const 0;
         const 18446744069414584350;
         const u38du_srtd;
 },
 section ""relreadonly" . u38dv_srtd" {
     u38dv_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2251799813685249;
 },
 be_s2Vf4_entry() //  [R1]
         { []
         }
     {offset
       c3855: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3856; else goto c3857;
       c3856: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3857: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . be_s2Vf4_info" {
     be_s2Vf4_info:
         const be_s2Vf4_entry;
         const 4294967296;
         const 18446744069414584337;
         const u38dv_srtd;
 },
 section ""relreadonly" . u38dw_srtd" {
     u38dw_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2Vf7_entry() //  [R1]
         { []
         }
     {offset
       c385i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c385j; else goto c385k;
       c385j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c385k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c385g_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vf7_info" {
     sat_s2Vf7_info:
         const sat_s2Vf7_entry;
         const 2;
         const 18446744069414584338;
         const u38dw_srtd;
 },
 section ""relreadonly" . u38dx_srtd" {
     u38dx_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c385g() //  [R1]
         { []
         }
     {offset
       c385g: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c385g_info" {
     block_c385g_info:
         const _c385g;
         const 0;
         const 18446744069414584350;
         const u38dx_srtd;
 },
 section ""relreadonly" . u38dy_srtd" {
     u38dy_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2Vfb_entry() //  [R1]
         { []
         }
     {offset
       c385u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c385v; else goto c385w;
       c385v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c385w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vfb_info" {
     sat_s2Vfb_info:
         const sat_s2Vfb_entry;
         const 1;
         const 18446744069414584336;
         const u38dy_srtd;
 },
 section ""relreadonly" . u38dz_srtd" {
     u38dz_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2Vfa_entry() //  [R1]
         { []
         }
     {offset
       c385D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c385H; else goto c385I;
       c385H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c385I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c385B_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vfa_info" {
     sat_s2Vfa_info:
         const sat_s2Vfa_entry;
         const 2;
         const 18446744069414584338;
         const u38dz_srtd;
 },
 section ""relreadonly" . u38dA_srtd" {
     u38dA_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c385B() //  [R1]
         { []
         }
     {offset
       c385B: // global
           I64[Sp] = block_c385G_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c385B_info" {
     block_c385B_info:
         const _c385B;
         const 0;
         const 18446744069414584350;
         const u38dA_srtd;
 },
 section ""relreadonly" . u38dB_srtd" {
     u38dB_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c385G() //  [R1]
         { []
         }
     {offset
       c385G: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c385G_info" {
     block_c385G_info:
         const _c385G;
         const 0;
         const 18446744069414584350;
         const u38dB_srtd;
 },
 section ""relreadonly" . u38dC_srtd" {
     u38dC_srtd:
         const S2VLN_srt+552;
         const 65;
         const 13837310404851662849;
         const 1;
 },
 ds2_s2VeK_entry() //  [R1]
         { []
         }
     {offset
       c385O: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c385P; else goto c385Q;
       c385P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c385Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c383J_info;
           _s2VeG::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s2VeG::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u386t; else goto c383K;
       u386t: // global
           call _c383J(R1) args: 0, res: 0, upd: 0;
       c383K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s2VeK_info" {
     ds2_s2VeK_info:
         const ds2_s2VeK_entry;
         const 2;
         const 18446744069414584338;
         const u38dC_srtd;
 },
 section ""relreadonly" . u38dD_srtd" {
     u38dD_srtd:
         const S2VLN_srt+552;
         const 65;
         const 13837310404851662849;
         const 1;
 },
 _c383J() //  [R1]
         { []
         }
     {offset
       c383J: // global
           I64[Sp] = block_c383O_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u386q; else goto c383P;
       u386q: // global
           call _c383O(R1) args: 0, res: 0, upd: 0;
       c383P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c383J_info" {
     block_c383J_info:
         const _c383J;
         const 1;
         const 18446744069414584350;
         const u38dD_srtd;
 },
 section ""relreadonly" . u38dE_srtd" {
     u38dE_srtd:
         const S2VLN_srt+552;
         const 65;
         const 13837310404851662849;
         const 1;
 },
 _c383O() //  [R1]
         { []
         }
     {offset
       c383O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c385U; else goto c385T;
       c385U: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c385T: // global
           _s2VeG::P64 = P64[Sp + 8];
           _s2VeP::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2VeP::I64, 0)) goto c386c; else goto c386d;
       c386c: // global
           if (%MO_S_Le_W64(_s2VeP::I64, (-149))) goto c3860; else goto c3861;
       c3860: // global
           Hp = Hp - 24;
           I64[Sp] = _s2VeP::I64;
           Sp = Sp - 8;
           call _c383Z() args: 0, res: 0, upd: 0;
       c3861: // global
           Hp = Hp - 24;
           I64[Sp - 8] = block_c384r_info;
           R3 = lvl9_r2UqH_closure;
           R2 = _s2VeG::P64;
           I64[Sp] = _s2VeP::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
       c386d: // global
           I64[Hp - 16] = be_s2Vf4_info;
           I64[Hp] = _s2VeP::I64;
           I64[Sp - 8] = block_c3858_info;
           R3 = lvl9_r2UqH_closure;
           R2 = _s2VeG::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c383O_info" {
     block_c383O_info:
         const _c383O;
         const 1;
         const 18446744069414584350;
         const u38dE_srtd;
 },
 section ""relreadonly" . u38dF_srtd" {
     u38dF_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c384r() //  [R1]
         { []
         }
     {offset
       c384r: // global
           if (R1 == 1) goto c3867; else goto u386s;
       c3867: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c386a; else goto c3869;
       c386a: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3869: // global
           I64[Hp - 80] = sat_s2Vf3_info;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = sat_s2VeZ_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u386s: // global
           call _c383Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c384r_info" {
     block_c384r_info:
         const _c384r;
         const 66;
         const 18446744069414584350;
         const u38dF_srtd;
 },
 section ""relreadonly" . u38dG_srtd" {
     u38dG_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c383Z() //  []
         { []
         }
     {offset
       c383Z: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c385Y; else goto c385X;
       c385Y: // global
           HpAlloc = 88;
           I64[Sp] = block_c383Z_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c385X: // global
           I64[Hp - 80] = sat_s2VeV_info;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = sat_s2VeS_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Float.$fRealDouble1_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c383Z_info" {
     block_c383Z_info:
         const _c383Z;
         const 66;
         const 18446744069414584350;
         const u38dG_srtd;
 },
 section ""relreadonly" . u38dH_srtd" {
     u38dH_srtd:
         const S2VLN_srt+552;
         const 65;
         const 4611686018427387905;
         const 1;
 },
 _c3858() //  [R1]
         { []
         }
     {offset
       c3858: // global
           _c3851::P64 = P64[Sp + 8];
           _s2VeG::P64 = P64[Sp + 16];
           if (R1 == 1) goto c386l; else goto c386g;
       c386l: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c386o; else goto c386n;
       c386o: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c386n: // global
           I64[Hp - 88] = sat_s2Vfb_info;
           P64[Hp - 72] = _c3851::P64;
           I64[Hp - 64] = sat_s2Vfa_info;
           P64[Hp - 48] = _s2VeG::P64;
           P64[Hp - 40] = _c3851::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = lvl10_r2UqI_closure;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = _c3851::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c386g: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c386j; else goto c386i;
       c386j: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c386i: // global
           I64[Hp - 64] = sat_s2Vf7_info;
           P64[Hp - 48] = _s2VeG::P64;
           P64[Hp - 40] = _c3851::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp - 8] = _c3851::P64;
           P64[Hp] = _c3851::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3858_info" {
     block_c3858_info:
         const _c3858;
         const 2;
         const 18446744069414584350;
         const u38dH_srtd;
 },
 section ""relreadonly" . u38dI_srtd" {
     u38dI_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201572929793;
 },
 k_s2Vfu_entry() //  [R1]
         { []
         }
     {offset
       c386D: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c386E; else goto c386F;
       c386E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c386F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c386B_info;
           R3 = P64[R1 + 64];
           R2 = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 64;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_s2Vfu_info" {
     k_s2Vfu_info:
         const k_s2Vfu_entry;
         const 7;
         const 18446744069414584335;
         const u38dI_srtd;
 },
 section ""relreadonly" . u38dJ_srtd" {
     u38dJ_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201572929793;
 },
 _c386B() //  [R1]
         { []
         }
     {offset
       c386B: // global
           I64[Sp - 8] = block_c386K_info;
           R3 = GHC.Float.expts4_closure;
           R2 = P64[Sp + 8];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c386B_info" {
     block_c386B_info:
         const _c386B;
         const 5;
         const 18446744069414584350;
         const u38dJ_srtd;
 },
 section ""relreadonly" . u38dK_srtd" {
     u38dK_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201572929537;
 },
 _c386K() //  [R1]
         { []
         }
     {offset
       c386K: // global
           if (R1 == 1) goto c3893; else goto c388j;
       c3893: // global
           I64[Sp] = block_c388W_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u389G; else goto c388X;
       u389G: // global
           call _c388W(R1) args: 0, res: 0, upd: 0;
       c388X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c388j: // global
           I64[Sp] = block_c387P_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 40];
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c386K_info" {
     block_c386K_info:
         const _c386K;
         const 6;
         const 18446744069414584350;
         const u38dK_srtd;
 },
 _c388W() //  [R1]
         { []
         }
     {offset
       c388W: // global
           I64[Sp] = block_c3891_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u389O; else goto c3895;
       u389O: // global
           call _c3891(R1) args: 0, res: 0, upd: 0;
       c3895: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c388W_info" {
     block_c388W_info:
         const _c388W;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c3891() //  [R1]
         { []
         }
     {offset
       c3891: // global
           _s2Vg8::I64 = I64[R1 + 7] + 23;
           if (%MO_S_Lt_W64(_s2Vg8::I64, 0)) goto c389g; else goto c389h;
       c389g: // global
           I64[Sp + 40] = %MO_S_Quot_W64(_s2Vg8::I64 * 8651, 28738);
           Sp = Sp + 8;
           goto u389Q;
       c389h: // global
           I64[Sp + 40] = %MO_S_Quot_W64(_s2Vg8::I64 * 8651, 28738) + 1;
           Sp = Sp + 8;
           goto u389Q;
       u389Q: // global
           call _c386N() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3891_info" {
     block_c3891_info:
         const _c3891;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 section ""relreadonly" . u38dL_srtd" {
     u38dL_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201551958017;
 },
 _c387P() //  [R1]
         { []
         }
     {offset
       c387P: // global
           I64[Sp] = block_c387T_info;
           R2 = R1;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c387P_info" {
     block_c387P_info:
         const _c387P;
         const 1286;
         const 18446744069414584350;
         const u38dL_srtd;
 },
 section ""relreadonly" . u38dM_srtd" {
     u38dM_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201551958017;
 },
 _c387T() //  [F1]
         { []
         }
     {offset
       c387T: // global
           _s2Vet::P64 = P64[Sp + 32];
           _c387Y::F32 = F1;
           (_c387X::F32) = call MO_F32_Log(_c387Y::F32);
           I64[Sp] = block_c3881_info;
           R1 = _s2Vet::P64;
           F32[Sp + 40] = _c387X::F32;
           if (R1 & 7 != 0) goto u389J; else goto c3882;
       u389J: // global
           call _c3881(R1) args: 0, res: 0, upd: 0;
       c3882: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c387T_info" {
     block_c387T_info:
         const _c387T;
         const 1286;
         const 18446744069414584350;
         const u38dM_srtd;
 },
 section ""relreadonly" . u38dN_srtd" {
     u38dN_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3881() //  [R1]
         { []
         }
     {offset
       c3881: // global
           I64[Sp] = block_c3886_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u389K; else goto c3887;
       u389K: // global
           call _c3886(R1) args: 0, res: 0, upd: 0;
       c3887: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3881_info" {
     block_c3881_info:
         const _c3881;
         const 1798;
         const 18446744069414584350;
         const u38dN_srtd;
 },
 section ""relreadonly" . u38dO_srtd" {
     u38dO_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3886() //  [R1]
         { []
         }
     {offset
       c3886: // global
           I64[Sp] = block_c388b_info;
           _s2VfQ::I64 = I64[R1 + 7];
           R1 = lvl5_r2UqD_closure;
           I64[Sp + 32] = _s2VfQ::I64;
           if (R1 & 7 != 0) goto u389L; else goto c388c;
       u389L: // global
           call _c388b(R1) args: 0, res: 0, upd: 0;
       c388c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3886_info" {
     block_c3886_info:
         const _c3886;
         const 1798;
         const 18446744069414584350;
         const u38dO_srtd;
 },
 _c388b() //  [R1]
         { []
         }
     {offset
       c388b: // global
           I64[Sp] = block_c388g_info;
           R2 = P64[Sp + 16];
           F32[Sp + 24] = F32[R1 + 7];
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c388b_info" {
     block_c388b_info:
         const _c388b;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c388g() //  [F1]
         { []
         }
     {offset
       c388g: // global
           _s2VfL::F32 = F32[Sp + 40];
           _s2VfQ::I64 = I64[Sp + 32];
           _s2VfS::F32 = F32[Sp + 24];
           _c388u::F32 = F1;
           (_c388t::F32) = call MO_F32_Log(_c388u::F32);
           _s2VfY::F32 = %MO_F_Quot_W32(%MO_F_Add_W32(_s2VfL::F32,
                                                      %MO_F_Mul_W32(%MO_SF_Conv_W64_W32(_s2VfQ::I64),
                                                                    _s2VfS::F32)),
                                        _c388t::F32);
           _s2VfZ::I64 = %MO_FS_Conv_W32_W64(_s2VfY::F32);
           if (%MO_F_Lt_W32(%MO_SF_Conv_W64_W32(_s2VfZ::I64),
                            _s2VfY::F32)) goto c388T; else goto c388S;
       c388T: // global
           I64[Sp + 40] = _s2VfZ::I64 + 1;
           Sp = Sp + 8;
           goto u389N;
       c388S: // global
           I64[Sp + 40] = _s2VfZ::I64;
           Sp = Sp + 8;
           goto u389N;
       u389N: // global
           call _c386N() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c388g_info" {
     block_c388g_info:
         const _c388g;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c386N() //  []
         { []
         }
     {offset
       c386N: // global
           _s2Vek::P64 = P64[Sp + 8];
           _s2Vfx::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_s2Vfx::I64, 0)) goto c3872; else goto c387s;
       c3872: // global
           I64[Sp - 8] = block_c386W_info;
           R3 = -_s2Vfx::I64;
           R2 = _s2Vek::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
       c387s: // global
           I64[Sp - 8] = block_c387n_info;
           R3 = _s2Vfx::I64;
           R2 = _s2Vek::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c386W() //  [R1]
         { []
         }
     {offset
       c386W: // global
           I64[Sp] = block_c3870_info;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c386W_info" {
     block_c386W_info:
         const _c386W;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c3870() //  [R1]
         { []
         }
     {offset
       c3870: // global
           I64[Sp] = block_c3877_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3870_info" {
     block_c3870_info:
         const _c3870;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c3877() //  [R1]
         { []
         }
     {offset
       c3877: // global
           _s2Vfx::I64 = I64[Sp + 40];
           if (R1 == 1) goto c387i; else goto c387e;
       c387i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c387l; else goto c387k;
       c387l: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c387k: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vfx::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c387e: // global
           I64[Sp + 40] = _s2Vfx::I64 + 1;
           Sp = Sp + 8;
           call _c386N() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3877_info" {
     block_c3877_info:
         const _c3877;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c387n() //  [R1]
         { []
         }
     {offset
       c387n: // global
           I64[Sp] = block_c387r_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c387n_info" {
     block_c387n_info:
         const _c387n;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c387r() //  [R1]
         { []
         }
     {offset
       c387r: // global
           I64[Sp] = block_c387x_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c387r_info" {
     block_c387r_info:
         const _c387r;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c387x() //  [R1]
         { []
         }
     {offset
       c387x: // global
           _s2Vfx::I64 = I64[Sp + 40];
           if (R1 == 1) goto c387I; else goto c387E;
       c387I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c387L; else goto c387K;
       c387L: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c387K: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vfx::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c387E: // global
           I64[Sp + 40] = _s2Vfx::I64 + 1;
           Sp = Sp + 8;
           call _c386N() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c387x_info" {
     block_c387x_info:
         const _c387x;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 sat_s2Vgz_entry() //  [R1]
         { []
         }
     {offset
       c38aH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38aI; else goto c38aJ;
       c38aI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38aJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vgz_info" {
     sat_s2Vgz_info:
         const sat_s2Vgz_entry;
         const 1;
         const 21474836496;
         const S2VLN_srt+864;
 },
 sat_s2VgD_entry() //  [R1]
         { []
         }
     {offset
       c38b1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38b2; else goto c38b3;
       c38b2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38b3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VgD_info" {
     sat_s2VgD_info:
         const sat_s2VgD_entry;
         const 1;
         const 21474836496;
         const S2VLN_srt+864;
 },
 section ""relreadonly" . u38dP_srtd" {
     u38dP_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 gen_s2Vgh_entry() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c38b7: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c38b8; else goto u38bP;
       c38b8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u38bP: // global
           P64[Sp - 48] = R1;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call _c38a2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . gen_s2Vgh_info" {
     gen_s2Vgh_info:
         const gen_s2Vgh_entry;
         const 1;
         const 18446744069414584329;
         const 21474836505;
         const u38dP_srtd;
 },
 _c38a2() //  []
         { []
         }
     {offset
       c38a2: // global
           _s2Vek::P64 = P64[P64[Sp] + 3];
           I64[Sp - 16] = block_c38a5_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 24];
           P64[Sp - 8] = _s2Vek::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u38dQ_srtd" {
     u38dQ_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38a5() //  [R1]
         { []
         }
     {offset
       c38a5: // global
           if (R1 == 1) goto c38b6; else goto c38b5;
       c38b6: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c38b5: // global
           I64[Sp] = block_c38a9_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38a5_info" {
     block_c38a5_info:
         const _c38a5;
         const 7;
         const 18446744069414584350;
         const u38dQ_srtd;
 },
 section ""relreadonly" . u38dR_srtd" {
     u38dR_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38a9() //  [R1]
         { []
         }
     {offset
       c38a9: // global
           I64[Sp] = block_c38ad_info;
           R3 = P64[Sp + 40];
           R2 = R1;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38a9_info" {
     block_c38a9_info:
         const _c38a9;
         const 519;
         const 18446744069414584350;
         const u38dR_srtd;
 },
 section ""relreadonly" . u38dS_srtd" {
     u38dS_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38ad() //  [R1, R2]
         { []
         }
     {offset
       c38ad: // global
           I64[Sp] = block_c38af_info;
           R3 = P64[Sp + 8];
           _s2Vgr::P64 = R2;
           R2 = P64[Sp + 48];
           P64[Sp + 32] = _s2Vgr::P64;
           P64[Sp + 48] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38ad_info" {
     block_c38ad_info:
         const _c38ad;
         const 519;
         const 18446744069414584350;
         const u38dS_srtd;
 },
 section ""relreadonly" . u38dT_srtd" {
     u38dT_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38af() //  [R1]
         { []
         }
     {offset
       c38af: // global
           I64[Sp - 8] = block_c38aj_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38af_info" {
     block_c38af_info:
         const _c38af;
         const 7;
         const 18446744069414584350;
         const u38dT_srtd;
 },
 section ""relreadonly" . u38dU_srtd" {
     u38dU_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38aj() //  [R1]
         { []
         }
     {offset
       c38aj: // global
           I64[Sp] = block_c38an_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38aj_info" {
     block_c38aj_info:
         const _c38aj;
         const 8;
         const 18446744069414584350;
         const u38dU_srtd;
 },
 section ""relreadonly" . u38dV_srtd" {
     u38dV_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38an() //  [R1]
         { []
         }
     {offset
       c38an: // global
           I64[Sp] = block_c38ar_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 64];
           I64[Sp + 64] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38an_info" {
     block_c38an_info:
         const _c38an;
         const 8;
         const 18446744069414584350;
         const u38dV_srtd;
 },
 section ""relreadonly" . u38dW_srtd" {
     u38dW_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38ar() //  [R1]
         { []
         }
     {offset
       c38ar: // global
           I64[Sp] = block_c38av_info;
           R3 = R1;
           R2 = P64[Sp + 40];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38ar_info" {
     block_c38ar_info:
         const _c38ar;
         const 8328;
         const 18446744069414584350;
         const u38dW_srtd;
 },
 section ""relreadonly" . u38dX_srtd" {
     u38dX_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38av() //  [R1]
         { []
         }
     {offset
       c38av: // global
           _s2Vgi::P64 = P64[Sp + 32];
           _s2Vgq::P64 = P64[Sp + 56];
           _s2Vgr::P64 = P64[Sp + 40];
           _s2Vgu::I64 = I64[Sp + 64];
           if (R1 == 1) goto c38bq; else goto c38bi;
       c38bq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38bt; else goto c38bs;
       c38bt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38bs: // global
           if (_s2Vgu::I64 == 1) goto c38bx; else goto c38bw;
       c38bx: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_c38aP_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = _s2Vgr::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c38bw: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vgq::P64;
           P64[Hp] = _s2Vgi::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38bi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c38bl; else goto c38bk;
       c38bl: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38bk: // global
           if (_s2Vgu::I64 == 1) goto c38bp; else goto c38bn;
       c38bp: // global
           I64[Hp - 40] = sat_s2Vgz_info;
           P64[Hp - 24] = _s2Vgq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s2Vgi::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38bn: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s2Vgq::P64;
           P64[Hp - 24] = _s2Vgi::P64;
           _c38aB::P64 = Hp - 38;
           Hp = Hp - 24;
           P64[Sp + 32] = _c38aB::P64;
           P64[Sp + 40] = _s2Vgr::P64;
           P64[Sp + 48] = P64[Sp + 48];
           P64[Sp + 56] = P64[Sp + 8];
           P64[Sp + 64] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c38a2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38av_info" {
     block_c38av_info:
         const _c38av;
         const 8200;
         const 18446744069414584350;
         const u38dX_srtd;
 },
 _c38aP() //  [R1]
         { []
         }
     {offset
       c38aP: // global
           I64[Sp] = block_c38aT_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38aP_info" {
     block_c38aP_info:
         const _c38aP;
         const 1157;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c38aT() //  [R1]
         { []
         }
     {offset
       c38aT: // global
           _s2Vgi::P64 = P64[Sp + 8];
           _s2Vgq::P64 = P64[Sp + 32];
           if (R1 == 1) goto c38bI; else goto c38bB;
       c38bI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38bL; else goto c38bK;
       c38bL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38bK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vgq::P64;
           P64[Hp] = _s2Vgi::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38bB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c38bE; else goto c38bD;
       c38bE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38bD: // global
           I64[Hp - 40] = sat_s2VgD_info;
           P64[Hp - 24] = _s2Vgq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s2Vgi::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c38aT_info" {
     block_c38aT_info:
         const _c38aT;
         const 1413;
         const 21474836510;
         const S2VLN_srt+864;
 },
 section ""relreadonly" . u38dY_srtd" {
     u38dY_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613941700891508737;
 },
 sat_s2Vh1_entry() //  [R1]
         { []
         }
     {offset
       c38bT: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c38bU; else goto c38bV;
       c38bU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38bV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c389V_info;
           _s2Vek::P64 = P64[R1 + 16];
           _s2VeK::P64 = P64[R1 + 24];
           _s2Vfc::P64 = P64[R1 + 32];
           _s2Vfi::P64 = P64[R1 + 40];
           _s2Vfo::P64 = P64[R1 + 48];
           R1 = P64[R1 + 56];
           P64[Sp - 56] = _s2Vek::P64;
           P64[Sp - 48] = _s2VeK::P64;
           P64[Sp - 40] = _s2Vfc::P64;
           P64[Sp - 32] = _s2Vfi::P64;
           P64[Sp - 24] = _s2Vfo::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u38db; else goto c389W;
       u38db: // global
           call _c389V(R1) args: 0, res: 0, upd: 0;
       c389W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vh1_info" {
     sat_s2Vh1_info:
         const sat_s2Vh1_entry;
         const 6;
         const 18446744069414584335;
         const u38dY_srtd;
 },
 section ""relreadonly" . u38dZ_srtd" {
     u38dZ_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c389V() //  [R1]
         { []
         }
     {offset
       c389V: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c38bY; else goto c38bX;
       c38bY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c38bX: // global
           _s2Vgg::I64 = I64[R1 + 7];
           I64[Hp - 8] = gen_s2Vgh_info;
           P64[Hp] = P64[Sp + 8];
           _s2VeK::P64 = P64[Sp + 16];
           _c38a0::P64 = Hp - 3;
           if (%MO_S_Lt_W64(_s2Vgg::I64, 0)) goto c38cw; else goto c38d0;
       c38cw: // global
           I64[Sp - 8] = block_c38c2_info;
           R1 = _s2VeK::P64;
           I64[Sp] = _s2Vgg::I64;
           P64[Sp + 16] = _c38a0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u38d9; else goto c38c3;
       u38d9: // global
           call _c38c2(R1) args: 0, res: 0, upd: 0;
       c38c3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c38d0: // global
           I64[Sp - 8] = block_c38cI_info;
           R1 = _s2VeK::P64;
           I64[Sp] = _s2Vgg::I64;
           P64[Sp + 16] = _c38a0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u38da; else goto c38cJ;
       u38da: // global
           call _c38cI(R1) args: 0, res: 0, upd: 0;
       c38cJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c389V_info" {
     block_c389V_info:
         const _c389V;
         const 5;
         const 18446744069414584350;
         const u38dZ_srtd;
 },
 section ""relreadonly" . u38e0_srtd" {
     u38e0_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c38c2() //  [R1]
         { []
         }
     {offset
       c38c2: // global
           _s2VgM::I64 = -I64[Sp + 8];
           I64[Sp + 8] = block_c38ca_info;
           R3 = _s2VgM::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38c2_info" {
     block_c38c2_info:
         const _c38c2;
         const 70;
         const 18446744069414584350;
         const u38e0_srtd;
 },
 section ""relreadonly" . u38e1_srtd" {
     u38e1_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38ca() //  [R1]
         { []
         }
     {offset
       c38ca: // global
           I64[Sp] = block_c38ce_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38ca_info" {
     block_c38ca_info:
         const _c38ca;
         const 5;
         const 18446744069414584350;
         const u38e1_srtd;
 },
 section ""relreadonly" . u38e2_srtd" {
     u38e2_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38ce() //  [R1]
         { []
         }
     {offset
       c38ce: // global
           I64[Sp] = block_c38ci_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38ce_info" {
     block_c38ce_info:
         const _c38ce;
         const 5;
         const 18446744069414584350;
         const u38e2_srtd;
 },
 section ""relreadonly" . u38e3_srtd" {
     u38e3_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38ci() //  [R1]
         { []
         }
     {offset
       c38ci: // global
           _s2VgL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c38cm_info;
           R3 = _s2VgL::P64;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38ci_info" {
     block_c38ci_info:
         const _c38ci;
         const 5;
         const 18446744069414584350;
         const u38e3_srtd;
 },
 section ""relreadonly" . u38e4_srtd" {
     u38e4_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38cm() //  [R1]
         { []
         }
     {offset
       c38cm: // global
           _s2VgP::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c38cq_info;
           R6 = _s2VgP::P64;
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call gen_s2Vgh_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38cm_info" {
     block_c38cm_info:
         const _c38cm;
         const 4;
         const 18446744069414584350;
         const u38e4_srtd;
 },
 _c38cq() //  [R1]
         { []
         }
     {offset
       c38cq: // global
           I64[Sp] = block_c38cu_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38cq_info" {
     block_c38cq_info:
         const _c38cq;
         const 0;
         const 30;
 },
 _c38cu() //  [R1]
         { []
         }
     {offset
       c38cu: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38cu_info" {
     block_c38cu_info:
         const _c38cu;
         const 0;
         const 30;
 },
 section ""relreadonly" . u38e5_srtd" {
     u38e5_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c38cI() //  [R1]
         { []
         }
     {offset
       c38cI: // global
           _s2Vgg::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c38cN_info;
           R3 = _s2Vgg::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38cI_info" {
     block_c38cI_info:
         const _c38cI;
         const 70;
         const 18446744069414584350;
         const u38e5_srtd;
 },
 section ""relreadonly" . u38e6_srtd" {
     u38e6_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38cN() //  [R1]
         { []
         }
     {offset
       c38cN: // global
           I64[Sp] = block_c38cR_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38cN_info" {
     block_c38cN_info:
         const _c38cN;
         const 5;
         const 18446744069414584350;
         const u38e6_srtd;
 },
 section ""relreadonly" . u38e7_srtd" {
     u38e7_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38cR() //  [R1]
         { []
         }
     {offset
       c38cR: // global
           _s2Vfo::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c38cV_info;
           R6 = P64[Sp + 8];
           R5 = _s2Vfo::P64;
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call gen_s2Vgh_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38cR_info" {
     block_c38cR_info:
         const _c38cR;
         const 261;
         const 18446744069414584350;
         const u38e7_srtd;
 },
 _c38cV() //  [R1]
         { []
         }
     {offset
       c38cV: // global
           I64[Sp] = block_c38cZ_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38cV_info" {
     block_c38cV_info:
         const _c38cV;
         const 0;
         const 30;
 },
 _c38cZ() //  [R1]
         { []
         }
     {offset
       c38cZ: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38cZ_info" {
     block_c38cZ_info:
         const _c38cZ;
         const 0;
         const 30;
 },
 section ""relreadonly" . u38e8_srtd" {
     u38e8_srtd:
         const S2VLN_srt+552;
         const 66;
         const 13837313737779970049;
         const 3;
 },
 GHC.Float.$w$sfloatToDigits1_entry() //  [R2, F1]
         { []
         }
     {offset
       c38df: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c38dj; else goto c38di;
       c38dj: // global
           HpAlloc = 312;
           R1 = GHC.Float.$w$sfloatToDigits1_closure;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c38di: // global
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto c38de; else goto c38dd;
       c38de: // global
           Hp = Hp - 312;
           R2 = GHC.Float.minExpt_closure+1;
           R1 = lvl3_r2UpB_closure+2;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c38dd: // global
           I64[Hp - 304] = ds_s2Ven_info;
           F32[Hp - 288] = F1;
           I64[Hp - 280] = ds1_s2Vet_info;
           _c382g::P64 = Hp - 304;
           P64[Hp - 264] = _c382g::P64;
           I64[Hp - 256] = stg_sel_0_upd_info;
           _c382F::P64 = Hp - 280;
           P64[Hp - 240] = _c382F::P64;
           I64[Hp - 232] = ds2_s2VeK_info;
           P64[Hp - 216] = _c382F::P64;
           _c383E::P64 = Hp - 256;
           P64[Hp - 208] = _c383E::P64;
           I64[Hp - 200] = stg_sel_1_upd_info;
           _c383F::P64 = Hp - 232;
           P64[Hp - 184] = _c383F::P64;
           I64[Hp - 176] = stg_sel_0_upd_info;
           P64[Hp - 160] = _c383F::P64;
           I64[Hp - 152] = stg_sel_2_upd_info;
           P64[Hp - 136] = _c383F::P64;
           I64[Hp - 128] = k_s2Vfu_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = _c382g::P64;
           P64[Hp - 96] = _c382F::P64;
           P64[Hp - 88] = _c383E::P64;
           _c386u::P64 = Hp - 200;
           P64[Hp - 80] = _c386u::P64;
           _c386v::P64 = Hp - 176;
           P64[Hp - 72] = _c386v::P64;
           _c386w::P64 = Hp - 152;
           P64[Hp - 64] = _c386w::P64;
           I64[Hp - 56] = sat_s2Vh1_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _c383F::P64;
           P64[Hp - 24] = _c386u::P64;
           P64[Hp - 16] = _c386v::P64;
           P64[Hp - 8] = _c386w::P64;
           _c386x::P64 = Hp - 128;
           P64[Hp] = _c386x::P64;
           R2 = _c386x::P64;
           R1 = Hp - 56;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sfloatToDigits1_info" {
     GHC.Float.$w$sfloatToDigits1_info:
         const GHC.Float.$w$sfloatToDigits1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const u38e8_srtd;
         const 130;
         const GHC.Float.$w$sfloatToDigits1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.416101127 UTC

[section ""data" . lvl11_r2UqJ_closure" {
     lvl11_r2UqJ_closure:
         const lvl11_r2UqJ_info;
         const 0;
         const 0;
         const 0;
 },
 section ""relreadonly" . u38kw_srtd" {
     u38kw_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2251799813685249;
 },
 lvl11_r2UqJ_entry() //  [R1]
         { []
         }
     {offset
       c38kt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38ku; else goto c38kv;
       c38ku: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38kv: // global
           (_c38kq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c38kq::I64 == 0) goto c38ks; else goto c38kr;
       c38ks: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c38kr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c38kq::I64;
           R3 = 52;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_r2UqJ_info" {
     lvl11_r2UqJ_info:
         const lvl11_r2UqJ_entry;
         const 0;
         const 18446744069414584341;
         const u38kw_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.455633672 UTC

[section ""data" . GHC.Float.$w$sfloatToDigits_closure" {
     GHC.Float.$w$sfloatToDigits_closure:
         const GHC.Float.$w$sfloatToDigits_info;
         const 0;
 },
 GHC.Float.$w$sfloatToDigits_slow() //  [R1]
         { []
         }
     {offset
       c38kG: // global
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$sfloatToDigits_entry(D1,
                                                  R2,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 ds_s2Vh5_entry() //  [R1]
         { []
         }
     {offset
       c38kX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c38kY; else goto c38kZ;
       c38kY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38kZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38kR_info;
           D1 = F64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s2Vh5_info" {
     ds_s2Vh5_info:
         const ds_s2Vh5_entry;
         const 4294967296;
         const 4294967313;
         const S2VLN_srt+1080;
 },
 _c38kR() //  [R1, R2]
         { []
         }
     {offset
       c38kR: // global
           I64[Sp - 8] = R2;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _c38kS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38kR_info" {
     block_c38kR_info:
         const _c38kR;
         const 0;
         const 30;
 },
 _c38kS() //  []
         { []
         }
     {offset
       c38kS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c38l2; else goto c38l1;
       c38l2: // global
           HpAlloc = 40;
           I64[Sp] = block_c38kS_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c38l1: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38kS_info" {
     block_c38kS_info:
         const _c38kS;
         const 66;
         const 30;
 },
 section ""relreadonly" . u38vK_srtd" {
     u38vK_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2252933685051393;
 },
 sat_s2Vhk_entry() //  [R1]
         { []
         }
     {offset
       c38lA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c38lB; else goto c38lC;
       c38lB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38lC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c38ly_info;
           R3 = I64[R1 + 24];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vhk_info" {
     sat_s2Vhk_info:
         const sat_s2Vhk_entry;
         const 4294967297;
         const 18446744069414584339;
         const u38vK_srtd;
 },
 _c38ly() //  [R1]
         { []
         }
     {offset
       c38ly: // global
           I64[Sp - 8] = block_c38lF_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38ly_info" {
     block_c38ly_info:
         const _c38ly;
         const 1;
         const 141733920798;
         const S2VLN_srt+832;
 },
 _c38lF() //  [R1]
         { []
         }
     {offset
       c38lF: // global
           if (R1 == 1) goto c38lQ; else goto c38lM;
       c38lQ: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c38lM: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38lF_info" {
     block_c38lF_info:
         const _c38lF;
         const 2;
         const 4294967326;
         const S2VLN_srt+872;
 },
 section ""relreadonly" . u38vL_srtd" {
     u38vL_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2252933685051393;
 },
 ds1_s2Vha_entry() //  [R1]
         { []
         }
     {offset
       c38lR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c38lS; else goto c38lT;
       c38lS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38lT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38l9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u38m3; else goto c38la;
       u38m3: // global
           call _c38l9(R1) args: 0, res: 0, upd: 0;
       c38la: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s2Vha_info" {
     ds1_s2Vha_info:
         const ds1_s2Vha_entry;
         const 1;
         const 18446744069414584336;
         const u38vL_srtd;
 },
 section ""relreadonly" . u38vM_srtd" {
     u38vM_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2252933685051393;
 },
 _c38l9() //  [R1]
         { []
         }
     {offset
       c38l9: // global
           I64[Sp - 16] = block_c38le_info;
           _s2Vhb::P64 = R1;
           _s2Vhc::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s2Vhc::P64;
           P64[Sp] = _s2Vhb::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u38m2; else goto c38lf;
       u38m2: // global
           call _c38le(R1) args: 0, res: 0, upd: 0;
       c38lf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38l9_info" {
     block_c38l9_info:
         const _c38l9;
         const 0;
         const 18446744069414584350;
         const u38vM_srtd;
 },
 section ""relreadonly" . u38vN_srtd" {
     u38vN_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2252933685051393;
 },
 _c38le() //  [R1]
         { []
         }
     {offset
       c38le: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c38lX; else goto c38lW;
       c38lX: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c38lW: // global
           _s2Vhf::I64 = I64[R1 + 7];
           _s2Vhg::I64 = (-1074) - _s2Vhf::I64;
           if (%MO_S_Le_W64(_s2Vhg::I64, 0)) goto c38lZ; else goto c38m1;
       c38lZ: // global
           Hp = Hp - 72;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c38m1: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s2Vhf::I64 + _s2Vhg::I64;
           I64[Hp - 48] = sat_s2Vhk_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s2Vhg::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 63;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38le_info" {
     block_c38le_info:
         const _c38le;
         const 2;
         const 18446744069414584350;
         const u38vN_srtd;
 },
 section ""relreadonly" . u38vO_srtd" {
     u38vO_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s2VhC_entry() //  [R1]
         { []
         }
     {offset
       c38mx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38mA; else goto c38mB;
       c38mA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38mB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38mz_info;
           R3 = -I64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VhC_info" {
     sat_s2VhC_info:
         const sat_s2VhC_entry;
         const 4294967296;
         const 18446744069414584337;
         const u38vO_srtd;
 },
 section ""relreadonly" . u38vP_srtd" {
     u38vP_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38mz() //  [R1]
         { []
         }
     {offset
       c38mz: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38mz_info" {
     block_c38mz_info:
         const _c38mz;
         const 0;
         const 18446744069414584350;
         const u38vP_srtd;
 },
 section ""relreadonly" . u38vQ_srtd" {
     u38vQ_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2Vhz_entry() //  [R1]
         { []
         }
     {offset
       c38mK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38mL; else goto c38mM;
       c38mL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38mM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vhz_info" {
     sat_s2Vhz_info:
         const sat_s2Vhz_entry;
         const 1;
         const 18446744069414584336;
         const u38vQ_srtd;
 },
 section ""relreadonly" . u38vR_srtd" {
     u38vR_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s2VhK_entry() //  [R1]
         { []
         }
     {offset
       c38n2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38n8; else goto c38n9;
       c38n8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38n9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38n7_info;
           R3 = -I64[R1 + 16] + 1;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VhK_info" {
     sat_s2VhK_info:
         const sat_s2VhK_entry;
         const 4294967296;
         const 18446744069414584337;
         const u38vR_srtd;
 },
 section ""relreadonly" . u38vS_srtd" {
     u38vS_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38n7() //  [R1]
         { []
         }
     {offset
       c38n7: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38n7_info" {
     block_c38n7_info:
         const _c38n7;
         const 0;
         const 18446744069414584350;
         const u38vS_srtd;
 },
 section ""relreadonly" . u38vT_srtd" {
     u38vT_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VhG_entry() //  [R1]
         { []
         }
     {offset
       c38nk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38nl; else goto c38nm;
       c38nl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38nm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38ni_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VhG_info" {
     sat_s2VhG_info:
         const sat_s2VhG_entry;
         const 1;
         const 18446744069414584336;
         const u38vT_srtd;
 },
 section ""relreadonly" . u38vU_srtd" {
     u38vU_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38ni() //  [R1]
         { []
         }
     {offset
       c38ni: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38ni_info" {
     block_c38ni_info:
         const _c38ni;
         const 0;
         const 18446744069414584350;
         const u38vU_srtd;
 },
 section ""relreadonly" . u38vV_srtd" {
     u38vV_srtd:
         const S2VLN_srt+552;
         const 52;
         const 2251799813685249;
 },
 be_s2VhL_entry() //  [R1]
         { []
         }
     {offset
       c38nv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38nw; else goto c38nx;
       c38nw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38nx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . be_s2VhL_info" {
     be_s2VhL_info:
         const be_s2VhL_entry;
         const 4294967296;
         const 18446744069414584337;
         const u38vV_srtd;
 },
 section ""relreadonly" . u38vW_srtd" {
     u38vW_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VhO_entry() //  [R1]
         { []
         }
     {offset
       c38nI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38nJ; else goto c38nK;
       c38nJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38nK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38nG_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VhO_info" {
     sat_s2VhO_info:
         const sat_s2VhO_entry;
         const 2;
         const 18446744069414584338;
         const u38vW_srtd;
 },
 section ""relreadonly" . u38vX_srtd" {
     u38vX_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38nG() //  [R1]
         { []
         }
     {offset
       c38nG: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38nG_info" {
     block_c38nG_info:
         const _c38nG;
         const 0;
         const 18446744069414584350;
         const u38vX_srtd;
 },
 section ""relreadonly" . u38vY_srtd" {
     u38vY_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VhS_entry() //  [R1]
         { []
         }
     {offset
       c38nU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38nV; else goto c38nW;
       c38nV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38nW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VhS_info" {
     sat_s2VhS_info:
         const sat_s2VhS_entry;
         const 1;
         const 18446744069414584336;
         const u38vY_srtd;
 },
 section ""relreadonly" . u38vZ_srtd" {
     u38vZ_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VhR_entry() //  [R1]
         { []
         }
     {offset
       c38o3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38o7; else goto c38o8;
       c38o7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38o8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38o1_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VhR_info" {
     sat_s2VhR_info:
         const sat_s2VhR_entry;
         const 2;
         const 18446744069414584338;
         const u38vZ_srtd;
 },
 section ""relreadonly" . u38w0_srtd" {
     u38w0_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38o1() //  [R1]
         { []
         }
     {offset
       c38o1: // global
           I64[Sp] = block_c38o6_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38o1_info" {
     block_c38o1_info:
         const _c38o1;
         const 0;
         const 18446744069414584350;
         const u38w0_srtd;
 },
 section ""relreadonly" . u38w1_srtd" {
     u38w1_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38o6() //  [R1]
         { []
         }
     {offset
       c38o6: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38o6_info" {
     block_c38o6_info:
         const _c38o6;
         const 0;
         const 18446744069414584350;
         const u38w1_srtd;
 },
 section ""relreadonly" . u38w2_srtd" {
     u38w2_srtd:
         const S2VLN_srt+552;
         const 68;
         const 4613938367996887041;
         const 9;
 },
 ds2_s2Vhr_entry() //  [R1]
         { []
         }
     {offset
       c38oe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c38of; else goto c38og;
       c38of: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38og: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c38m9_info;
           _s2Vhn::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s2Vhn::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u38oT; else goto c38ma;
       u38oT: // global
           call _c38m9(R1) args: 0, res: 0, upd: 0;
       c38ma: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s2Vhr_info" {
     ds2_s2Vhr_info:
         const ds2_s2Vhr_entry;
         const 2;
         const 18446744069414584338;
         const u38w2_srtd;
 },
 section ""relreadonly" . u38w3_srtd" {
     u38w3_srtd:
         const S2VLN_srt+552;
         const 68;
         const 4613938367996887041;
         const 9;
 },
 _c38m9() //  [R1]
         { []
         }
     {offset
       c38m9: // global
           I64[Sp] = block_c38me_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u38oQ; else goto c38mf;
       u38oQ: // global
           call _c38me(R1) args: 0, res: 0, upd: 0;
       c38mf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38m9_info" {
     block_c38m9_info:
         const _c38m9;
         const 1;
         const 18446744069414584350;
         const u38w3_srtd;
 },
 section ""relreadonly" . u38w4_srtd" {
     u38w4_srtd:
         const S2VLN_srt+552;
         const 68;
         const 4613938367996887041;
         const 9;
 },
 _c38me() //  [R1]
         { []
         }
     {offset
       c38me: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38ok; else goto c38oj;
       c38ok: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c38oj: // global
           _s2Vhn::P64 = P64[Sp + 8];
           _s2Vhw::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2Vhw::I64, 0)) goto c38oC; else goto c38oD;
       c38oC: // global
           if (%MO_S_Le_W64(_s2Vhw::I64,
                            (-1074))) goto c38oq; else goto c38or;
       c38oq: // global
           Hp = Hp - 24;
           I64[Sp] = _s2Vhw::I64;
           Sp = Sp - 8;
           call _c38mp() args: 0, res: 0, upd: 0;
       c38or: // global
           Hp = Hp - 24;
           I64[Sp - 8] = block_c38mR_info;
           R3 = lvl11_r2UqJ_closure;
           R2 = _s2Vhn::P64;
           I64[Sp] = _s2Vhw::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
       c38oD: // global
           I64[Hp - 16] = be_s2VhL_info;
           I64[Hp] = _s2Vhw::I64;
           I64[Sp - 8] = block_c38ny_info;
           R3 = lvl11_r2UqJ_closure;
           R2 = _s2Vhn::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38me_info" {
     block_c38me_info:
         const _c38me;
         const 1;
         const 18446744069414584350;
         const u38w4_srtd;
 },
 section ""relreadonly" . u38w5_srtd" {
     u38w5_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38mR() //  [R1]
         { []
         }
     {offset
       c38mR: // global
           if (R1 == 1) goto c38ox; else goto u38oS;
       c38ox: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c38oA; else goto c38oz;
       c38oA: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38oz: // global
           I64[Hp - 80] = sat_s2VhK_info;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = sat_s2VhG_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u38oS: // global
           call _c38mp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38mR_info" {
     block_c38mR_info:
         const _c38mR;
         const 66;
         const 18446744069414584350;
         const u38w5_srtd;
 },
 section ""relreadonly" . u38w6_srtd" {
     u38w6_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38mp() //  []
         { []
         }
     {offset
       c38mp: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c38oo; else goto c38on;
       c38oo: // global
           HpAlloc = 88;
           I64[Sp] = block_c38mp_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c38on: // global
           I64[Hp - 80] = sat_s2VhC_info;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = sat_s2Vhz_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Float.$fRealDouble1_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38mp_info" {
     block_c38mp_info:
         const _c38mp;
         const 66;
         const 18446744069414584350;
         const u38w6_srtd;
 },
 section ""relreadonly" . u38w7_srtd" {
     u38w7_srtd:
         const S2VLN_srt+552;
         const 65;
         const 4611686018427387905;
         const 1;
 },
 _c38ny() //  [R1]
         { []
         }
     {offset
       c38ny: // global
           _c38nr::P64 = P64[Sp + 8];
           _s2Vhn::P64 = P64[Sp + 16];
           if (R1 == 1) goto c38oL; else goto c38oG;
       c38oL: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c38oO; else goto c38oN;
       c38oO: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38oN: // global
           I64[Hp - 88] = sat_s2VhS_info;
           P64[Hp - 72] = _c38nr::P64;
           I64[Hp - 64] = sat_s2VhR_info;
           P64[Hp - 48] = _s2Vhn::P64;
           P64[Hp - 40] = _c38nr::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = lvl10_r2UqI_closure;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = _c38nr::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c38oG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c38oJ; else goto c38oI;
       c38oJ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38oI: // global
           I64[Hp - 64] = sat_s2VhO_info;
           P64[Hp - 48] = _s2Vhn::P64;
           P64[Hp - 40] = _c38nr::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp - 8] = _c38nr::P64;
           P64[Hp] = _c38nr::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38ny_info" {
     block_c38ny_info:
         const _c38ny;
         const 2;
         const 18446744069414584350;
         const u38w7_srtd;
 },
 section ""relreadonly" . u38w8_srtd" {
     u38w8_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201572929793;
 },
 k_s2Vib_entry() //  [R1]
         { []
         }
     {offset
       c38p3: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c38p4; else goto c38p5;
       c38p4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38p5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c38p1_info;
           R3 = P64[R1 + 64];
           R2 = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 64;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_s2Vib_info" {
     k_s2Vib_info:
         const k_s2Vib_entry;
         const 7;
         const 18446744069414584335;
         const u38w8_srtd;
 },
 section ""relreadonly" . u38w9_srtd" {
     u38w9_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201572929793;
 },
 _c38p1() //  [R1]
         { []
         }
     {offset
       c38p1: // global
           I64[Sp - 8] = block_c38pa_info;
           R3 = GHC.Float.expts4_closure;
           R2 = P64[Sp + 8];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38p1_info" {
     block_c38p1_info:
         const _c38p1;
         const 5;
         const 18446744069414584350;
         const u38w9_srtd;
 },
 section ""relreadonly" . u38wa_srtd" {
     u38wa_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201572929537;
 },
 _c38pa() //  [R1]
         { []
         }
     {offset
       c38pa: // global
           if (R1 == 1) goto c38rt; else goto c38qJ;
       c38rt: // global
           I64[Sp] = block_c38rm_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u38s6; else goto c38rn;
       u38s6: // global
           call _c38rm(R1) args: 0, res: 0, upd: 0;
       c38rn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c38qJ: // global
           I64[Sp] = block_c38qf_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 40];
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38pa_info" {
     block_c38pa_info:
         const _c38pa;
         const 6;
         const 18446744069414584350;
         const u38wa_srtd;
 },
 _c38rm() //  [R1]
         { []
         }
     {offset
       c38rm: // global
           I64[Sp] = block_c38rr_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u38se; else goto c38rv;
       u38se: // global
           call _c38rr(R1) args: 0, res: 0, upd: 0;
       c38rv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38rm_info" {
     block_c38rm_info:
         const _c38rm;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38rr() //  [R1]
         { []
         }
     {offset
       c38rr: // global
           _s2ViP::I64 = I64[R1 + 7] + 52;
           if (%MO_S_Lt_W64(_s2ViP::I64, 0)) goto c38rG; else goto c38rH;
       c38rG: // global
           I64[Sp + 40] = %MO_S_Quot_W64(_s2ViP::I64 * 8651, 28738);
           Sp = Sp + 8;
           goto u38sg;
       c38rH: // global
           I64[Sp + 40] = %MO_S_Quot_W64(_s2ViP::I64 * 8651, 28738) + 1;
           Sp = Sp + 8;
           goto u38sg;
       u38sg: // global
           call _c38pd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38rr_info" {
     block_c38rr_info:
         const _c38rr;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 section ""relreadonly" . u38wb_srtd" {
     u38wb_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201551958017;
 },
 _c38qf() //  [R1]
         { []
         }
     {offset
       c38qf: // global
           I64[Sp] = block_c38qj_info;
           R2 = R1;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38qf_info" {
     block_c38qf_info:
         const _c38qf;
         const 1286;
         const 18446744069414584350;
         const u38wb_srtd;
 },
 section ""relreadonly" . u38wc_srtd" {
     u38wc_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201551958017;
 },
 _c38qj() //  [F1]
         { []
         }
     {offset
       c38qj: // global
           _s2Vha::P64 = P64[Sp + 32];
           _c38qo::F32 = F1;
           (_c38qn::F32) = call MO_F32_Log(_c38qo::F32);
           I64[Sp] = block_c38qr_info;
           R1 = _s2Vha::P64;
           F32[Sp + 40] = _c38qn::F32;
           if (R1 & 7 != 0) goto u38s9; else goto c38qs;
       u38s9: // global
           call _c38qr(R1) args: 0, res: 0, upd: 0;
       c38qs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38qj_info" {
     block_c38qj_info:
         const _c38qj;
         const 1286;
         const 18446744069414584350;
         const u38wc_srtd;
 },
 section ""relreadonly" . u38wd_srtd" {
     u38wd_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201551958017;
 },
 _c38qr() //  [R1]
         { []
         }
     {offset
       c38qr: // global
           I64[Sp] = block_c38qw_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u38sa; else goto c38qx;
       u38sa: // global
           call _c38qw(R1) args: 0, res: 0, upd: 0;
       c38qx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38qr_info" {
     block_c38qr_info:
         const _c38qr;
         const 1798;
         const 18446744069414584350;
         const u38wd_srtd;
 },
 section ""relreadonly" . u38we_srtd" {
     u38we_srtd:
         const S2VLN_srt+688;
         const 46;
         const 35201551958017;
 },
 _c38qw() //  [R1]
         { []
         }
     {offset
       c38qw: // global
           I64[Sp] = block_c38qB_info;
           _s2Vix::I64 = I64[R1 + 7];
           R1 = lvl5_r2UqD_closure;
           I64[Sp + 32] = _s2Vix::I64;
           if (R1 & 7 != 0) goto u38sb; else goto c38qC;
       u38sb: // global
           call _c38qB(R1) args: 0, res: 0, upd: 0;
       c38qC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38qw_info" {
     block_c38qw_info:
         const _c38qw;
         const 1798;
         const 18446744069414584350;
         const u38we_srtd;
 },
 _c38qB() //  [R1]
         { []
         }
     {offset
       c38qB: // global
           I64[Sp] = block_c38qG_info;
           R2 = P64[Sp + 16];
           F32[Sp + 24] = F32[R1 + 7];
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38qB_info" {
     block_c38qB_info:
         const _c38qB;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38qG() //  [F1]
         { []
         }
     {offset
       c38qG: // global
           _s2Vis::F32 = F32[Sp + 40];
           _s2Vix::I64 = I64[Sp + 32];
           _s2Viz::F32 = F32[Sp + 24];
           _c38qU::F32 = F1;
           (_c38qT::F32) = call MO_F32_Log(_c38qU::F32);
           _s2ViF::F32 = %MO_F_Quot_W32(%MO_F_Add_W32(_s2Vis::F32,
                                                      %MO_F_Mul_W32(%MO_SF_Conv_W64_W32(_s2Vix::I64),
                                                                    _s2Viz::F32)),
                                        _c38qT::F32);
           _s2ViG::I64 = %MO_FS_Conv_W32_W64(_s2ViF::F32);
           if (%MO_F_Lt_W32(%MO_SF_Conv_W64_W32(_s2ViG::I64),
                            _s2ViF::F32)) goto c38rj; else goto c38ri;
       c38rj: // global
           I64[Sp + 40] = _s2ViG::I64 + 1;
           Sp = Sp + 8;
           goto u38sd;
       c38ri: // global
           I64[Sp + 40] = _s2ViG::I64;
           Sp = Sp + 8;
           goto u38sd;
       u38sd: // global
           call _c38pd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38qG_info" {
     block_c38qG_info:
         const _c38qG;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38pd() //  []
         { []
         }
     {offset
       c38pd: // global
           _s2Vh2::P64 = P64[Sp + 8];
           _s2Vie::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_s2Vie::I64, 0)) goto c38ps; else goto c38pS;
       c38ps: // global
           I64[Sp - 8] = block_c38pm_info;
           R3 = -_s2Vie::I64;
           R2 = _s2Vh2::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
       c38pS: // global
           I64[Sp - 8] = block_c38pN_info;
           R3 = _s2Vie::I64;
           R2 = _s2Vh2::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c38pm() //  [R1]
         { []
         }
     {offset
       c38pm: // global
           I64[Sp] = block_c38pq_info;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38pm_info" {
     block_c38pm_info:
         const _c38pm;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38pq() //  [R1]
         { []
         }
     {offset
       c38pq: // global
           I64[Sp] = block_c38px_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38pq_info" {
     block_c38pq_info:
         const _c38pq;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38px() //  [R1]
         { []
         }
     {offset
       c38px: // global
           _s2Vie::I64 = I64[Sp + 40];
           if (R1 == 1) goto c38pI; else goto c38pE;
       c38pI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c38pL; else goto c38pK;
       c38pL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38pK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vie::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c38pE: // global
           I64[Sp + 40] = _s2Vie::I64 + 1;
           Sp = Sp + 8;
           call _c38pd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38px_info" {
     block_c38px_info:
         const _c38px;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38pN() //  [R1]
         { []
         }
     {offset
       c38pN: // global
           I64[Sp] = block_c38pR_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38pN_info" {
     block_c38pN_info:
         const _c38pN;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38pR() //  [R1]
         { []
         }
     {offset
       c38pR: // global
           I64[Sp] = block_c38pX_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38pR_info" {
     block_c38pR_info:
         const _c38pR;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38pX() //  [R1]
         { []
         }
     {offset
       c38pX: // global
           _s2Vie::I64 = I64[Sp + 40];
           if (R1 == 1) goto c38q8; else goto c38q4;
       c38q8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c38qb; else goto c38qa;
       c38qb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38qa: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vie::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c38q4: // global
           I64[Sp + 40] = _s2Vie::I64 + 1;
           Sp = Sp + 8;
           call _c38pd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38pX_info" {
     block_c38pX_info:
         const _c38pX;
         const 1798;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 sat_s2Vjg_entry() //  [R1]
         { []
         }
     {offset
       c38t7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38t8; else goto c38t9;
       c38t8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38t9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vjg_info" {
     sat_s2Vjg_info:
         const sat_s2Vjg_entry;
         const 1;
         const 21474836496;
         const S2VLN_srt+864;
 },
 sat_s2Vjk_entry() //  [R1]
         { []
         }
     {offset
       c38tr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38ts; else goto c38tt;
       c38ts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38tt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vjk_info" {
     sat_s2Vjk_info:
         const sat_s2Vjk_entry;
         const 1;
         const 21474836496;
         const S2VLN_srt+864;
 },
 section ""relreadonly" . u38wf_srtd" {
     u38wf_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 gen_s2ViY_entry() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c38tx: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c38ty; else goto u38uf;
       c38ty: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u38uf: // global
           P64[Sp - 48] = R1;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call _c38ss() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . gen_s2ViY_info" {
     gen_s2ViY_info:
         const gen_s2ViY_entry;
         const 1;
         const 18446744069414584329;
         const 21474836505;
         const u38wf_srtd;
 },
 _c38ss() //  []
         { []
         }
     {offset
       c38ss: // global
           _s2Vh2::P64 = P64[P64[Sp] + 3];
           I64[Sp - 16] = block_c38sv_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 24];
           P64[Sp - 8] = _s2Vh2::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u38wg_srtd" {
     u38wg_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38sv() //  [R1]
         { []
         }
     {offset
       c38sv: // global
           if (R1 == 1) goto c38tw; else goto c38tv;
       c38tw: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c38tv: // global
           I64[Sp] = block_c38sz_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38sv_info" {
     block_c38sv_info:
         const _c38sv;
         const 7;
         const 18446744069414584350;
         const u38wg_srtd;
 },
 section ""relreadonly" . u38wh_srtd" {
     u38wh_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38sz() //  [R1]
         { []
         }
     {offset
       c38sz: // global
           I64[Sp] = block_c38sD_info;
           R3 = P64[Sp + 40];
           R2 = R1;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38sz_info" {
     block_c38sz_info:
         const _c38sz;
         const 519;
         const 18446744069414584350;
         const u38wh_srtd;
 },
 section ""relreadonly" . u38wi_srtd" {
     u38wi_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38sD() //  [R1, R2]
         { []
         }
     {offset
       c38sD: // global
           I64[Sp] = block_c38sF_info;
           R3 = P64[Sp + 8];
           _s2Vj8::P64 = R2;
           R2 = P64[Sp + 48];
           P64[Sp + 32] = _s2Vj8::P64;
           P64[Sp + 48] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38sD_info" {
     block_c38sD_info:
         const _c38sD;
         const 519;
         const 18446744069414584350;
         const u38wi_srtd;
 },
 section ""relreadonly" . u38wj_srtd" {
     u38wj_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38sF() //  [R1]
         { []
         }
     {offset
       c38sF: // global
           I64[Sp - 8] = block_c38sJ_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38sF_info" {
     block_c38sF_info:
         const _c38sF;
         const 7;
         const 18446744069414584350;
         const u38wj_srtd;
 },
 section ""relreadonly" . u38wk_srtd" {
     u38wk_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38sJ() //  [R1]
         { []
         }
     {offset
       c38sJ: // global
           I64[Sp] = block_c38sN_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38sJ_info" {
     block_c38sJ_info:
         const _c38sJ;
         const 8;
         const 18446744069414584350;
         const u38wk_srtd;
 },
 section ""relreadonly" . u38wl_srtd" {
     u38wl_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38sN() //  [R1]
         { []
         }
     {offset
       c38sN: // global
           I64[Sp] = block_c38sR_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 64];
           I64[Sp + 64] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38sN_info" {
     block_c38sN_info:
         const _c38sN;
         const 8;
         const 18446744069414584350;
         const u38wl_srtd;
 },
 section ""relreadonly" . u38wm_srtd" {
     u38wm_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38sR() //  [R1]
         { []
         }
     {offset
       c38sR: // global
           I64[Sp] = block_c38sV_info;
           R3 = R1;
           R2 = P64[Sp + 40];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38sR_info" {
     block_c38sR_info:
         const _c38sR;
         const 8328;
         const 18446744069414584350;
         const u38wm_srtd;
 },
 section ""relreadonly" . u38wn_srtd" {
     u38wn_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38sV() //  [R1]
         { []
         }
     {offset
       c38sV: // global
           _s2ViZ::P64 = P64[Sp + 32];
           _s2Vj7::P64 = P64[Sp + 56];
           _s2Vj8::P64 = P64[Sp + 40];
           _s2Vjb::I64 = I64[Sp + 64];
           if (R1 == 1) goto c38tQ; else goto c38tI;
       c38tQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38tT; else goto c38tS;
       c38tT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38tS: // global
           if (_s2Vjb::I64 == 1) goto c38tX; else goto c38tW;
       c38tX: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_c38tf_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = _s2Vj8::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c38tW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vj7::P64;
           P64[Hp] = _s2ViZ::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38tI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c38tL; else goto c38tK;
       c38tL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38tK: // global
           if (_s2Vjb::I64 == 1) goto c38tP; else goto c38tN;
       c38tP: // global
           I64[Hp - 40] = sat_s2Vjg_info;
           P64[Hp - 24] = _s2Vj7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s2ViZ::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38tN: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s2Vj7::P64;
           P64[Hp - 24] = _s2ViZ::P64;
           _c38t1::P64 = Hp - 38;
           Hp = Hp - 24;
           P64[Sp + 32] = _c38t1::P64;
           P64[Sp + 40] = _s2Vj8::P64;
           P64[Sp + 48] = P64[Sp + 48];
           P64[Sp + 56] = P64[Sp + 8];
           P64[Sp + 64] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c38ss() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38sV_info" {
     block_c38sV_info:
         const _c38sV;
         const 8200;
         const 18446744069414584350;
         const u38wn_srtd;
 },
 _c38tf() //  [R1]
         { []
         }
     {offset
       c38tf: // global
           I64[Sp] = block_c38tj_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38tf_info" {
     block_c38tf_info:
         const _c38tf;
         const 1157;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c38tj() //  [R1]
         { []
         }
     {offset
       c38tj: // global
           _s2ViZ::P64 = P64[Sp + 8];
           _s2Vj7::P64 = P64[Sp + 32];
           if (R1 == 1) goto c38u8; else goto c38u1;
       c38u8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38ub; else goto c38ua;
       c38ub: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38ua: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vj7::P64;
           P64[Hp] = _s2ViZ::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38u1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c38u4; else goto c38u3;
       c38u4: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38u3: // global
           I64[Hp - 40] = sat_s2Vjk_info;
           P64[Hp - 24] = _s2Vj7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s2ViZ::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c38tj_info" {
     block_c38tj_info:
         const _c38tj;
         const 1413;
         const 21474836510;
         const S2VLN_srt+864;
 },
 section ""relreadonly" . u38wo_srtd" {
     u38wo_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613941700891508737;
 },
 sat_s2VjI_entry() //  [R1]
         { []
         }
     {offset
       c38uj: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c38uk; else goto c38ul;
       c38uk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38ul: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c38sl_info;
           _s2Vh2::P64 = P64[R1 + 16];
           _s2Vhr::P64 = P64[R1 + 24];
           _s2VhT::P64 = P64[R1 + 32];
           _s2VhZ::P64 = P64[R1 + 40];
           _s2Vi5::P64 = P64[R1 + 48];
           R1 = P64[R1 + 56];
           P64[Sp - 56] = _s2Vh2::P64;
           P64[Sp - 48] = _s2Vhr::P64;
           P64[Sp - 40] = _s2VhT::P64;
           P64[Sp - 32] = _s2VhZ::P64;
           P64[Sp - 24] = _s2Vi5::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u38vB; else goto c38sm;
       u38vB: // global
           call _c38sl(R1) args: 0, res: 0, upd: 0;
       c38sm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VjI_info" {
     sat_s2VjI_info:
         const sat_s2VjI_entry;
         const 6;
         const 18446744069414584335;
         const u38wo_srtd;
 },
 section ""relreadonly" . u38wp_srtd" {
     u38wp_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c38sl() //  [R1]
         { []
         }
     {offset
       c38sl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c38uo; else goto c38un;
       c38uo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c38un: // global
           _s2ViX::I64 = I64[R1 + 7];
           I64[Hp - 8] = gen_s2ViY_info;
           P64[Hp] = P64[Sp + 8];
           _s2Vhr::P64 = P64[Sp + 16];
           _c38sq::P64 = Hp - 3;
           if (%MO_S_Lt_W64(_s2ViX::I64, 0)) goto c38uW; else goto c38vq;
       c38uW: // global
           I64[Sp - 8] = block_c38us_info;
           R1 = _s2Vhr::P64;
           I64[Sp] = _s2ViX::I64;
           P64[Sp + 16] = _c38sq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u38vz; else goto c38ut;
       u38vz: // global
           call _c38us(R1) args: 0, res: 0, upd: 0;
       c38ut: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c38vq: // global
           I64[Sp - 8] = block_c38v8_info;
           R1 = _s2Vhr::P64;
           I64[Sp] = _s2ViX::I64;
           P64[Sp + 16] = _c38sq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u38vA; else goto c38v9;
       u38vA: // global
           call _c38v8(R1) args: 0, res: 0, upd: 0;
       c38v9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38sl_info" {
     block_c38sl_info:
         const _c38sl;
         const 5;
         const 18446744069414584350;
         const u38wp_srtd;
 },
 section ""relreadonly" . u38wq_srtd" {
     u38wq_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c38us() //  [R1]
         { []
         }
     {offset
       c38us: // global
           _s2Vjt::I64 = -I64[Sp + 8];
           I64[Sp + 8] = block_c38uA_info;
           R3 = _s2Vjt::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38us_info" {
     block_c38us_info:
         const _c38us;
         const 70;
         const 18446744069414584350;
         const u38wq_srtd;
 },
 section ""relreadonly" . u38wr_srtd" {
     u38wr_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38uA() //  [R1]
         { []
         }
     {offset
       c38uA: // global
           I64[Sp] = block_c38uE_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38uA_info" {
     block_c38uA_info:
         const _c38uA;
         const 5;
         const 18446744069414584350;
         const u38wr_srtd;
 },
 section ""relreadonly" . u38ws_srtd" {
     u38ws_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38uE() //  [R1]
         { []
         }
     {offset
       c38uE: // global
           I64[Sp] = block_c38uI_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38uE_info" {
     block_c38uE_info:
         const _c38uE;
         const 5;
         const 18446744069414584350;
         const u38ws_srtd;
 },
 section ""relreadonly" . u38wt_srtd" {
     u38wt_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38uI() //  [R1]
         { []
         }
     {offset
       c38uI: // global
           _s2Vjs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c38uM_info;
           R3 = _s2Vjs::P64;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38uI_info" {
     block_c38uI_info:
         const _c38uI;
         const 5;
         const 18446744069414584350;
         const u38wt_srtd;
 },
 section ""relreadonly" . u38wu_srtd" {
     u38wu_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38uM() //  [R1]
         { []
         }
     {offset
       c38uM: // global
           _s2Vjw::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c38uQ_info;
           R6 = _s2Vjw::P64;
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call gen_s2ViY_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38uM_info" {
     block_c38uM_info:
         const _c38uM;
         const 4;
         const 18446744069414584350;
         const u38wu_srtd;
 },
 _c38uQ() //  [R1]
         { []
         }
     {offset
       c38uQ: // global
           I64[Sp] = block_c38uU_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38uQ_info" {
     block_c38uQ_info:
         const _c38uQ;
         const 0;
         const 30;
 },
 _c38uU() //  [R1]
         { []
         }
     {offset
       c38uU: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38uU_info" {
     block_c38uU_info:
         const _c38uU;
         const 0;
         const 30;
 },
 section ""relreadonly" . u38wv_srtd" {
     u38wv_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c38v8() //  [R1]
         { []
         }
     {offset
       c38v8: // global
           _s2ViX::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c38vd_info;
           R3 = _s2ViX::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38v8_info" {
     block_c38v8_info:
         const _c38v8;
         const 70;
         const 18446744069414584350;
         const u38wv_srtd;
 },
 section ""relreadonly" . u38ww_srtd" {
     u38ww_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38vd() //  [R1]
         { []
         }
     {offset
       c38vd: // global
           I64[Sp] = block_c38vh_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38vd_info" {
     block_c38vd_info:
         const _c38vd;
         const 5;
         const 18446744069414584350;
         const u38ww_srtd;
 },
 section ""relreadonly" . u38wx_srtd" {
     u38wx_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c38vh() //  [R1]
         { []
         }
     {offset
       c38vh: // global
           _s2Vi5::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c38vl_info;
           R6 = P64[Sp + 8];
           R5 = _s2Vi5::P64;
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call gen_s2ViY_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38vh_info" {
     block_c38vh_info:
         const _c38vh;
         const 261;
         const 18446744069414584350;
         const u38wx_srtd;
 },
 _c38vl() //  [R1]
         { []
         }
     {offset
       c38vl: // global
           I64[Sp] = block_c38vp_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38vl_info" {
     block_c38vl_info:
         const _c38vl;
         const 0;
         const 30;
 },
 _c38vp() //  [R1]
         { []
         }
     {offset
       c38vp: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38vp_info" {
     block_c38vp_info:
         const _c38vp;
         const 0;
         const 30;
 },
 section ""relreadonly" . u38wy_srtd" {
     u38wy_srtd:
         const S2VLN_srt+552;
         const 69;
         const 4613941700925194241;
         const 29;
 },
 GHC.Float.$w$sfloatToDigits_entry() //  [R2, D1]
         { []
         }
     {offset
       c38vF: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c38vJ; else goto c38vI;
       c38vJ: // global
           HpAlloc = 312;
           R1 = GHC.Float.$w$sfloatToDigits_closure;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c38vI: // global
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto c38vE; else goto c38vD;
       c38vE: // global
           Hp = Hp - 312;
           R2 = GHC.Float.minExpt_closure+1;
           R1 = lvl3_r2UpB_closure+2;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c38vD: // global
           I64[Hp - 304] = ds_s2Vh5_info;
           F64[Hp - 288] = D1;
           I64[Hp - 280] = ds1_s2Vha_info;
           _c38kN::P64 = Hp - 304;
           P64[Hp - 264] = _c38kN::P64;
           I64[Hp - 256] = stg_sel_0_upd_info;
           _c38l5::P64 = Hp - 280;
           P64[Hp - 240] = _c38l5::P64;
           I64[Hp - 232] = ds2_s2Vhr_info;
           P64[Hp - 216] = _c38l5::P64;
           _c38m4::P64 = Hp - 256;
           P64[Hp - 208] = _c38m4::P64;
           I64[Hp - 200] = stg_sel_1_upd_info;
           _c38m5::P64 = Hp - 232;
           P64[Hp - 184] = _c38m5::P64;
           I64[Hp - 176] = stg_sel_0_upd_info;
           P64[Hp - 160] = _c38m5::P64;
           I64[Hp - 152] = stg_sel_2_upd_info;
           P64[Hp - 136] = _c38m5::P64;
           I64[Hp - 128] = k_s2Vib_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = _c38kN::P64;
           P64[Hp - 96] = _c38l5::P64;
           P64[Hp - 88] = _c38m4::P64;
           _c38oU::P64 = Hp - 200;
           P64[Hp - 80] = _c38oU::P64;
           _c38oV::P64 = Hp - 176;
           P64[Hp - 72] = _c38oV::P64;
           _c38oW::P64 = Hp - 152;
           P64[Hp - 64] = _c38oW::P64;
           I64[Hp - 56] = sat_s2VjI_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _c38m5::P64;
           P64[Hp - 24] = _c38oU::P64;
           P64[Hp - 16] = _c38oV::P64;
           P64[Hp - 8] = _c38oW::P64;
           _c38oX::P64 = Hp - 128;
           P64[Hp] = _c38oX::P64;
           R2 = _c38oX::P64;
           R1 = Hp - 56;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sfloatToDigits_info" {
     GHC.Float.$w$sfloatToDigits_info:
         const GHC.Float.$w$sfloatToDigits_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const u38wy_srtd;
         const 130;
         const GHC.Float.$w$sfloatToDigits_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.693686348 UTC

[section ""data" . GHC.Float.$wfloatToDigits_closure" {
     GHC.Float.$wfloatToDigits_closure:
         const GHC.Float.$wfloatToDigits_info;
         const 0;
 },
 sat_s2VjR_entry() //  [R1]
         { []
         }
     {offset
       c38D0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c38D1; else goto c38D2;
       c38D1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38D2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38CY_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VjR_info" {
     sat_s2VjR_info:
         const sat_s2VjR_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1104;
 },
 _c38CY() //  [R1]
         { []
         }
     {offset
       c38CY: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38CY_info" {
     block_c38CY_info:
         const _c38CY;
         const 0;
         const 4294967326;
         const S2VLN_srt+1104;
 },
 b_s2VjT_entry() //  [R1]
         { []
         }
     {offset
       c38Dm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c38Dn; else goto c38Do;
       c38Dn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38Do: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.floatRadix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . b_s2VjT_info" {
     b_s2VjT_info:
         const b_s2VjT_entry;
         const 2;
         const 18;
 },
 p_s2VjU_entry() //  [R1]
         { []
         }
     {offset
       c38Dt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c38Du; else goto c38Dv;
       c38Du: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38Dv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.floatDigits_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . p_s2VjU_info" {
     p_s2VjU_info:
         const p_s2VjU_entry;
         const 2;
         const 18;
 },
 minExp_s2VjV_entry() //  [R1]
         { []
         }
     {offset
       c38DC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c38DT; else goto c38DU;
       c38DT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38DU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c38DA_info;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . minExp_s2VjV_info" {
     minExp_s2VjV_info:
         const minExp_s2VjV_entry;
         const 3;
         const 15;
 },
 _c38DA() //  [R1]
         { []
         }
     {offset
       c38DA: // global
           I64[Sp] = block_c38DF_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u38E0; else goto c38DG;
       u38E0: // global
           call _c38DF(R1) args: 0, res: 0, upd: 0;
       c38DG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38DA_info" {
     block_c38DA_info:
         const _c38DA;
         const 1;
         const 30;
 },
 _c38DF() //  [R1]
         { []
         }
     {offset
       c38DF: // global
           I64[Sp] = block_c38DK_info;
           _s2Vk0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2Vk0::I64;
           if (R1 & 7 != 0) goto u38E1; else goto c38DL;
       u38E1: // global
           call _c38DK(R1) args: 0, res: 0, upd: 0;
       c38DL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38DF_info" {
     block_c38DF_info:
         const _c38DF;
         const 1;
         const 30;
 },
 _c38DK() //  [R1]
         { []
         }
     {offset
       c38DK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c38DZ; else goto c38DY;
       c38DZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c38DY: // global
           _s2Vk3::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vk3::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38DK_info" {
     block_c38DK_info:
         const _c38DK;
         const 65;
         const 30;
 },
 ds_s2Vk4_entry() //  [R1]
         { []
         }
     {offset
       c38E6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c38E7; else goto c38E8;
       c38E7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38E8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.decodeFloat_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s2Vk4_info" {
     ds_s2Vk4_info:
         const ds_s2Vk4_entry;
         const 2;
         const 18;
 },
 sat_s2Vkh_entry() //  [R1]
         { []
         }
     {offset
       c38EJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c38EK; else goto c38EL;
       c38EK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38EL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c38EH_info;
           R3 = I64[R1 + 32];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vkh_info" {
     sat_s2Vkh_info:
         const sat_s2Vkh_entry;
         const 4294967298;
         const 2305851809601683471;
         const S2VLN_srt+872;
 },
 _c38EH() //  [R1]
         { []
         }
     {offset
       c38EH: // global
           I64[Sp - 8] = block_c38EO_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38EH_info" {
     block_c38EH_info:
         const _c38EH;
         const 1;
         const 2305843013508661278;
         const S2VLN_srt+872;
 },
 _c38EO() //  [R1]
         { []
         }
     {offset
       c38EO: // global
           if (R1 == 1) goto c38EZ; else goto c38EV;
       c38EZ: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c38EV: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38EO_info" {
     block_c38EO_info:
         const _c38EO;
         const 2;
         const 4294967326;
         const S2VLN_srt+872;
 },
 ds1_s2Vk5_entry() //  [R1]
         { []
         }
     {offset
       c38F0: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c38F1; else goto c38F2;
       c38F1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38F2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c38Ed_info;
           _s2VjT::P64 = P64[R1 + 16];
           _s2Vk4::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s2VjT::P64;
           P64[Sp - 24] = _s2Vk4::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u38Fe; else goto c38Ee;
       u38Fe: // global
           call _c38Ed(R1) args: 0, res: 0, upd: 0;
       c38Ee: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s2Vk5_info" {
     ds1_s2Vk5_info:
         const ds1_s2Vk5_entry;
         const 3;
         const 2305851809601683471;
         const S2VLN_srt+872;
 },
 _c38Ed() //  [R1]
         { []
         }
     {offset
       c38Ed: // global
           I64[Sp] = block_c38Ei_info;
           _s2Vk7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2Vk7::I64;
           if (R1 & 7 != 0) goto u38Fc; else goto c38Ej;
       u38Fc: // global
           call _c38Ei(R1) args: 0, res: 0, upd: 0;
       c38Ej: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Ed_info" {
     block_c38Ed_info:
         const _c38Ed;
         const 2;
         const 2305851809601683486;
         const S2VLN_srt+872;
 },
 _c38Ei() //  [R1]
         { []
         }
     {offset
       c38Ei: // global
           I64[Sp - 16] = block_c38En_info;
           _s2Vk8::P64 = R1;
           _s2Vk9::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s2Vk9::P64;
           P64[Sp] = _s2Vk8::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u38Fd; else goto c38Eo;
       u38Fd: // global
           call _c38En(R1) args: 0, res: 0, upd: 0;
       c38Eo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Ei_info" {
     block_c38Ei_info:
         const _c38Ei;
         const 130;
         const 2305851809601683486;
         const S2VLN_srt+872;
 },
 _c38En() //  [R1]
         { []
         }
     {offset
       c38En: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c38F7; else goto c38F6;
       c38F7: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c38F6: // global
           _s2Vkc::I64 = I64[R1 + 7];
           _s2Vkd::I64 = I64[Sp + 32] - _s2Vkc::I64;
           if (%MO_S_Le_W64(_s2Vkd::I64, 0)) goto c38F9; else goto c38Fb;
       c38F9: // global
           Hp = Hp - 80;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c38Fb: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = _s2Vkc::I64 + _s2Vkd::I64;
           I64[Hp - 56] = sat_s2Vkh_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s2Vkd::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38En_info" {
     block_c38En_info:
         const _c38En;
         const 516;
         const 2305851809601683486;
         const S2VLN_srt+872;
 },
 section ""relreadonly" . u38Qk_srtd" {
     u38Qk_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s2VkB_entry() //  [R1]
         { []
         }
     {offset
       c38FN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38FQ; else goto c38FR;
       c38FQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38FR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38FP_info;
           R3 = -I64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VkB_info" {
     sat_s2VkB_info:
         const sat_s2VkB_entry;
         const 4294967297;
         const 18446744069414584339;
         const u38Qk_srtd;
 },
 section ""relreadonly" . u38Ql_srtd" {
     u38Ql_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38FP() //  [R1]
         { []
         }
     {offset
       c38FP: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38FP_info" {
     block_c38FP_info:
         const _c38FP;
         const 0;
         const 18446744069414584350;
         const u38Ql_srtd;
 },
 section ""relreadonly" . u38Qm_srtd" {
     u38Qm_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2Vky_entry() //  [R1]
         { []
         }
     {offset
       c38G0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38G1; else goto c38G2;
       c38G1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38G2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vky_info" {
     sat_s2Vky_info:
         const sat_s2Vky_entry;
         const 1;
         const 18446744069414584336;
         const u38Qm_srtd;
 },
 section ""relreadonly" . u38Qn_srtd" {
     u38Qn_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s2VkN_entry() //  [R1]
         { []
         }
     {offset
       c38Gu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38GA; else goto c38GB;
       c38GA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38GB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38Gz_info;
           R3 = -I64[R1 + 24] + 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VkN_info" {
     sat_s2VkN_info:
         const sat_s2VkN_entry;
         const 4294967297;
         const 18446744069414584339;
         const u38Qn_srtd;
 },
 section ""relreadonly" . u38Qo_srtd" {
     u38Qo_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38Gz() //  [R1]
         { []
         }
     {offset
       c38Gz: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Gz_info" {
     block_c38Gz_info:
         const _c38Gz;
         const 0;
         const 18446744069414584350;
         const u38Qo_srtd;
 },
 section ""relreadonly" . u38Qp_srtd" {
     u38Qp_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VkJ_entry() //  [R1]
         { []
         }
     {offset
       c38GM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38GN; else goto c38GO;
       c38GN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38GO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38GK_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VkJ_info" {
     sat_s2VkJ_info:
         const sat_s2VkJ_entry;
         const 2;
         const 18446744069414584338;
         const u38Qp_srtd;
 },
 section ""relreadonly" . u38Qq_srtd" {
     u38Qq_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38GK() //  [R1]
         { []
         }
     {offset
       c38GK: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38GK_info" {
     block_c38GK_info:
         const _c38GK;
         const 0;
         const 18446744069414584350;
         const u38Qq_srtd;
 },
 be_s2VkQ_entry() //  [R1]
         { []
         }
     {offset
       c38H2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38H3; else goto c38H4;
       c38H3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38H4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . be_s2VkQ_info" {
     be_s2VkQ_info:
         const be_s2VkQ_entry;
         const 4294967297;
         const 4294967315;
         const S2VLN_srt+960;
 },
 section ""relreadonly" . u38Qr_srtd" {
     u38Qr_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VkV_entry() //  [R1]
         { []
         }
     {offset
       c38Hm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38Hn; else goto c38Ho;
       c38Hn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38Ho: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c38Hk_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VkV_info" {
     sat_s2VkV_info:
         const sat_s2VkV_entry;
         const 2;
         const 18446744069414584338;
         const u38Qr_srtd;
 },
 section ""relreadonly" . u38Qs_srtd" {
     u38Qs_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38Hk() //  [R1]
         { []
         }
     {offset
       c38Hk: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Hk_info" {
     block_c38Hk_info:
         const _c38Hk;
         const 0;
         const 18446744069414584350;
         const u38Qs_srtd;
 },
 sat_s2Vl0_entry() //  [R1]
         { []
         }
     {offset
       c38Hy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38Hz; else goto c38HA;
       c38Hz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38HA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vl0_info" {
     sat_s2Vl0_info:
         const sat_s2Vl0_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+1048;
 },
 section ""relreadonly" . u38Qt_srtd" {
     u38Qt_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VkZ_entry() //  [R1]
         { []
         }
     {offset
       c38HF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38HG; else goto c38HH;
       c38HG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38HH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VkZ_info" {
     sat_s2VkZ_info:
         const sat_s2VkZ_entry;
         const 1;
         const 18446744069414584336;
         const u38Qt_srtd;
 },
 section ""relreadonly" . u38Qu_srtd" {
     u38Qu_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s2VkY_entry() //  [R1]
         { []
         }
     {offset
       c38HO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c38HS; else goto c38HT;
       c38HS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38HT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c38HM_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VkY_info" {
     sat_s2VkY_info:
         const sat_s2VkY_entry;
         const 3;
         const 18446744069414584335;
         const u38Qu_srtd;
 },
 section ""relreadonly" . u38Qv_srtd" {
     u38Qv_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38HM() //  [R1]
         { []
         }
     {offset
       c38HM: // global
           _s2VjT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c38HR_info;
           R3 = _s2VjT::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38HM_info" {
     block_c38HM_info:
         const _c38HM;
         const 1;
         const 18446744069414584350;
         const u38Qv_srtd;
 },
 section ""relreadonly" . u38Qw_srtd" {
     u38Qw_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38HR() //  [R1]
         { []
         }
     {offset
       c38HR: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38HR_info" {
     block_c38HR_info:
         const _c38HR;
         const 0;
         const 18446744069414584350;
         const u38Qw_srtd;
 },
 section ""relreadonly" . u38Qx_srtd" {
     u38Qx_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 ds2_s2Vko_entry() //  [R1]
         { []
         }
     {offset
       c38HZ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c38I0; else goto c38I1;
       c38I0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38I1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c38Fk_info;
           _s2VjT::P64 = P64[R1 + 16];
           _s2VjU::P64 = P64[R1 + 24];
           _s2VjV::P64 = P64[R1 + 32];
           _s2Vkk::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _s2VjT::P64;
           P64[Sp - 40] = _s2VjU::P64;
           P64[Sp - 32] = _s2VjV::P64;
           P64[Sp - 24] = _s2Vkk::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u38IL; else goto c38Fl;
       u38IL: // global
           call _c38Fk(R1) args: 0, res: 0, upd: 0;
       c38Fl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s2Vko_info" {
     ds2_s2Vko_info:
         const ds2_s2Vko_entry;
         const 5;
         const 18446744069414584335;
         const u38Qx_srtd;
 },
 section ""relreadonly" . u38Qy_srtd" {
     u38Qy_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38Fk() //  [R1]
         { []
         }
     {offset
       c38Fk: // global
           I64[Sp] = block_c38Fp_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u38IF; else goto c38Fq;
       u38IF: // global
           call _c38Fp(R1) args: 0, res: 0, upd: 0;
       c38Fq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Fk_info" {
     block_c38Fk_info:
         const _c38Fk;
         const 4;
         const 18446744069414584350;
         const u38Qy_srtd;
 },
 section ""relreadonly" . u38Qz_srtd" {
     u38Qz_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38Fp() //  [R1]
         { []
         }
     {offset
       c38Fp: // global
           _s2Vkt::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2Vkt::I64, 0)) goto c38I5; else goto c38Ip;
       c38I5: // global
           I64[Sp] = block_c38Fx_info;
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2Vkt::I64;
           if (R1 & 7 != 0) goto u38IG; else goto c38Fy;
       u38IG: // global
           call _c38Fx(R1) args: 0, res: 0, upd: 0;
       c38Fy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c38Ip: // global
           I64[Sp] = block_c38GT_info;
           R1 = P64[Sp + 16];
           I64[Sp + 24] = _s2Vkt::I64;
           if (R1 & 7 != 0) goto u38IH; else goto c38GU;
       u38IH: // global
           call _c38GT(R1) args: 0, res: 0, upd: 0;
       c38GU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Fp_info" {
     block_c38Fp_info:
         const _c38Fp;
         const 4;
         const 18446744069414584350;
         const u38Qz_srtd;
 },
 section ""relreadonly" . u38QA_srtd" {
     u38QA_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38Fx() //  [R1]
         { []
         }
     {offset
       c38Fx: // global
           if (%MO_S_Le_W64(I64[Sp + 24],
                            I64[R1 + 7])) goto u38II; else goto c38Id;
       u38II: // global
           call _c38FF() args: 0, res: 0, upd: 0;
       c38Id: // global
           I64[Sp] = block_c38G7_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u38IJ; else goto c38G8;
       u38IJ: // global
           call _c38G7(R1) args: 0, res: 0, upd: 0;
       c38G8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Fx_info" {
     block_c38Fx_info:
         const _c38Fx;
         const 260;
         const 18446744069414584350;
         const u38QA_srtd;
 },
 section ""relreadonly" . u38QB_srtd" {
     u38QB_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38G7() //  [R1]
         { []
         }
     {offset
       c38G7: // global
           I64[Sp] = block_c38Gf_info;
           R3 = I64[R1 + 7] - 1;
           R2 = P64[Sp + 8];
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38G7_info" {
     block_c38G7_info:
         const _c38G7;
         const 388;
         const 18446744069414584350;
         const u38QB_srtd;
 },
 section ""relreadonly" . u38QC_srtd" {
     u38QC_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38Gf() //  [R1]
         { []
         }
     {offset
       c38Gf: // global
           I64[Sp] = block_c38Gj_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Gf_info" {
     block_c38Gf_info:
         const _c38Gf;
         const 388;
         const 18446744069414584350;
         const u38QC_srtd;
 },
 section ""relreadonly" . u38QD_srtd" {
     u38QD_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38Gj() //  [R1]
         { []
         }
     {offset
       c38Gj: // global
           if (R1 == 1) goto c38Il; else goto u38IK;
       c38Il: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c38Io; else goto c38In;
       c38Io: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38In: // global
           I64[Hp - 96] = sat_s2VkN_info;
           _s2VjT::P64 = P64[Sp + 8];
           P64[Hp - 80] = _s2VjT::P64;
           I64[Hp - 72] = I64[Sp + 24];
           I64[Hp - 64] = sat_s2VkJ_info;
           P64[Hp - 48] = _s2VjT::P64;
           P64[Hp - 40] = P64[Sp + 32];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Hp - 96;
           P64[Hp - 8] = _s2VjT::P64;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u38IK: // global
           call _c38FF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38Gj_info" {
     block_c38Gj_info:
         const _c38Gj;
         const 388;
         const 18446744069414584350;
         const u38QD_srtd;
 },
 section ""relreadonly" . u38QE_srtd" {
     u38QE_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c38FF() //  []
         { []
         }
     {offset
       c38FF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c38Ia; else goto c38I9;
       c38Ia: // global
           HpAlloc = 96;
           I64[Sp] = block_c38FF_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c38I9: // global
           I64[Hp - 88] = sat_s2VkB_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = I64[Sp + 24];
           I64[Hp - 56] = sat_s2Vky_info;
           P64[Hp - 40] = P64[Sp + 32];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = GHC.Float.$fRealDouble1_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38FF_info" {
     block_c38FF_info:
         const _c38FF;
         const 388;
         const 18446744069414584350;
         const u38QE_srtd;
 },
 section ""relreadonly" . u38QF_srtd" {
     u38QF_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613937818241073153;
 },
 _c38GT() //  [R1]
         { []
         }
     {offset
       c38GT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c38Is; else goto c38Ir;
       c38Is: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c38Ir: // global
           _s2VkP::I64 = I64[R1 + 7];
           I64[Hp - 24] = be_s2VkQ_info;
           _s2VjT::P64 = P64[Sp + 8];
           P64[Hp - 8] = _s2VjT::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c38H8_info;
           R3 = _s2VkP::I64 - 1;
           R2 = _s2VjT::P64;
           P64[Sp + 24] = Hp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38GT_info" {
     block_c38GT_info:
         const _c38GT;
         const 388;
         const 18446744069414584350;
         const u38QF_srtd;
 },
 section ""relreadonly" . u38QG_srtd" {
     u38QG_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38H8() //  [R1]
         { []
         }
     {offset
       c38H8: // global
           I64[Sp] = block_c38Hc_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38H8_info" {
     block_c38H8_info:
         const _c38H8;
         const 132;
         const 18446744069414584350;
         const u38QG_srtd;
 },
 section ""relreadonly" . u38QH_srtd" {
     u38QH_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c38Hc() //  [R1]
         { []
         }
     {offset
       c38Hc: // global
           _c38GY::P64 = P64[Sp + 24];
           _s2Vkk::P64 = P64[Sp + 32];
           if (R1 == 1) goto c38IB; else goto c38Iw;
       c38IB: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c38IE; else goto c38ID;
       c38IE: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38ID: // global
           I64[Hp - 128] = sat_s2Vl0_info;
           _s2VjT::P64 = P64[Sp + 8];
           P64[Hp - 112] = _s2VjT::P64;
           P64[Hp - 104] = _c38GY::P64;
           I64[Hp - 96] = sat_s2VkZ_info;
           P64[Hp - 80] = _s2VjT::P64;
           I64[Hp - 72] = sat_s2VkY_info;
           P64[Hp - 56] = _s2VjT::P64;
           P64[Hp - 48] = _s2Vkk::P64;
           P64[Hp - 40] = _c38GY::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 72;
           P64[Hp - 16] = Hp - 96;
           P64[Hp - 8] = Hp - 128;
           P64[Hp] = _c38GY::P64;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c38Iw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c38Iz; else goto c38Iy;
       c38Iz: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38Iy: // global
           I64[Hp - 64] = sat_s2VkV_info;
           P64[Hp - 48] = _s2Vkk::P64;
           P64[Hp - 40] = _c38GY::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp - 8] = _c38GY::P64;
           P64[Hp] = _c38GY::P64;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Hc_info" {
     block_c38Hc_info:
         const _c38Hc;
         const 132;
         const 18446744069414584350;
         const u38QH_srtd;
 },
 section ""relreadonly" . u38QI_srtd" {
     u38QI_srtd:
         const S2VLN_srt+552;
         const 63;
         const 4613940567053697025;
 },
 k_s2Vlj_entry() //  [R1]
         { []
         }
     {offset
       c38IV: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c38IZ; else goto c38J0;
       c38IZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38J0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 96] = block_c38IT_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           _s2VjT::P64 = P64[R1 + 24];
           R2 = _s2VjT::P64;
           P64[Sp - 88] = P64[R1 + 16];
           P64[Sp - 80] = _s2VjT::P64;
           P64[Sp - 72] = P64[R1 + 32];
           P64[Sp - 64] = P64[R1 + 40];
           P64[Sp - 56] = P64[R1 + 48];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 96;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_s2Vlj_info" {
     k_s2Vlj_info:
         const k_s2Vlj_entry;
         const 9;
         const 18446744069414584335;
         const u38QI_srtd;
 },
 section ""relreadonly" . u38QJ_srtd" {
     u38QJ_srtd:
         const S2VLN_srt+752;
         const 38;
         const 137506144257;
 },
 _c38IT() //  [R1]
         { []
         }
     {offset
       c38IT: // global
           I64[Sp] = block_c38IY_info;
           R3 = P64[Sp + 72];
           R2 = P64[Sp + 64];
           I64[Sp + 72] = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38IT_info" {
     block_c38IT_info:
         const _c38IT;
         const 9;
         const 18446744069414584350;
         const u38QJ_srtd;
 },
 section ""relreadonly" . u38QK_srtd" {
     u38QK_srtd:
         const S2VLN_srt+752;
         const 38;
         const 137506144257;
 },
 _c38IY() //  [R1]
         { []
         }
     {offset
       c38IY: // global
           if (I64[Sp + 72] == 1) goto c38Lp; else goto u38Ml;
       c38Lp: // global
           I64[Sp] = block_c38Lo_info;
           R3 = GHC.Float.expts4_closure;
           R2 = P64[Sp + 8];
           P64[Sp + 72] = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
       u38Ml: // global
           P64[Sp + 72] = R1;
           Sp = Sp + 8;
           call _s2Vly() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38IY_info" {
     block_c38IY_info:
         const _c38IY;
         const 24585;
         const 18446744069414584350;
         const u38QK_srtd;
 },
 _c38Lo() //  [R1]
         { []
         }
     {offset
       c38Lo: // global
           if (R1 == 1) goto c38LK; else goto u38Mm;
       c38LK: // global
           I64[Sp] = block_c38Ly_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u38MA; else goto c38Lz;
       u38MA: // global
           call _c38Ly(R1) args: 0, res: 0, upd: 0;
       c38Lz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       u38Mm: // global
           Sp = Sp + 8;
           call _s2Vly() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38Lo_info" {
     block_c38Lo_info:
         const _c38Lo;
         const 8201;
         const 36046410679844894;
         const S2VLN_srt+864;
 },
 _c38Ly() //  [R1]
         { []
         }
     {offset
       c38Ly: // global
           I64[Sp] = block_c38LD_info;
           _s2VlW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 64] = _s2VlW::I64;
           if (R1 & 7 != 0) goto u38MC; else goto c38LE;
       u38MC: // global
           call _c38LD(R1) args: 0, res: 0, upd: 0;
       c38LE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Ly_info" {
     block_c38Ly_info:
         const _c38Ly;
         const 11657;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38LD() //  [R1]
         { []
         }
     {offset
       c38LD: // global
           I64[Sp] = block_c38LI_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u38MD; else goto c38LN;
       u38MD: // global
           call _c38LI(R1) args: 0, res: 0, upd: 0;
       c38LN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38LD_info" {
     block_c38LD_info:
         const _c38LD;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38LI() //  [R1]
         { []
         }
     {offset
       c38LI: // global
           _s2Vm2::I64 = I64[Sp + 64] + (I64[R1 + 7] - 1);
           if (%MO_S_Lt_W64(_s2Vm2::I64, 0)) goto c38M1; else goto c38M2;
       c38M1: // global
           I64[Sp + 64] = %MO_S_Quot_W64(_s2Vm2::I64 * 8651, 28738);
           Sp = Sp + 8;
           goto u38MF;
       c38M2: // global
           I64[Sp + 64] = %MO_S_Quot_W64(_s2Vm2::I64 * 8651, 28738) + 1;
           Sp = Sp + 8;
           goto u38MF;
       u38MF: // global
           call _c38J9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38LI_info" {
     block_c38LI_info:
         const _c38LI;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _s2Vly() //  []
         { []
         }
     {offset
       s2Vly: // global
           I64[Sp - 8] = block_c38Kd_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _c38Kd() //  [R1]
         { []
         }
     {offset
       c38Kd: // global
           I64[Sp] = block_c38Kh_info;
           R2 = R1;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Kd_info" {
     block_c38Kd_info:
         const _c38Kd;
         const 11017;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38Kh() //  [F1]
         { []
         }
     {offset
       c38Kh: // global
           _s2Vk5::P64 = P64[Sp + 40];
           _c38Km::F32 = F1;
           (_c38Kl::F32) = call MO_F32_Log(_c38Km::F32);
           I64[Sp] = block_c38Kp_info;
           R1 = _s2Vk5::P64;
           F32[Sp + 64] = _c38Kl::F32;
           if (R1 & 7 != 0) goto u38Mw; else goto c38Kq;
       u38Mw: // global
           call _c38Kp(R1) args: 0, res: 0, upd: 0;
       c38Kq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Kh_info" {
     block_c38Kh_info:
         const _c38Kh;
         const 11017;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38Kp() //  [R1]
         { []
         }
     {offset
       c38Kp: // global
           I64[Sp] = block_c38Ku_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u38Mx; else goto c38Kv;
       u38Mx: // global
           call _c38Ku(R1) args: 0, res: 0, upd: 0;
       c38Kv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Kp_info" {
     block_c38Kp_info:
         const _c38Kp;
         const 12041;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38Ku() //  [R1]
         { []
         }
     {offset
       c38Ku: // global
           I64[Sp] = block_c38Kz_info;
           R2 = P64[Sp + 16];
           I64[Sp + 48] = I64[R1 + 7];
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Ku_info" {
     block_c38Ku_info:
         const _c38Ku;
         const 12041;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38Kz() //  [F1]
         { []
         }
     {offset
       c38Kz: // global
           _s2VjK::P64 = P64[Sp + 8];
           _c38KE::F32 = F1;
           (_c38KD::F32) = call MO_F32_Log(_c38KE::F32);
           I64[Sp] = block_c38KH_info;
           R2 = _s2VjK::P64;
           F32[Sp + 40] = _c38KD::F32;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Kz_info" {
     block_c38Kz_info:
         const _c38Kz;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38KH() //  [F1]
         { []
         }
     {offset
       c38KH: // global
           _s2VlB::F32 = F32[Sp + 64];
           _s2VlG::I64 = I64[Sp + 48];
           _s2VlI::F32 = F32[Sp + 40];
           _c38KT::F32 = F1;
           (_c38KS::F32) = call MO_F32_Log(_c38KT::F32);
           _s2VlO::F32 = %MO_F_Quot_W32(%MO_F_Add_W32(_s2VlB::F32,
                                                      %MO_F_Mul_W32(%MO_SF_Conv_W64_W32(_s2VlG::I64),
                                                                    _s2VlI::F32)),
                                        _c38KS::F32);
           _s2VlP::I64 = %MO_FS_Conv_W32_W64(_s2VlO::F32);
           if (%MO_F_Lt_W32(%MO_SF_Conv_W64_W32(_s2VlP::I64),
                            _s2VlO::F32)) goto c38Li; else goto c38Lh;
       c38Li: // global
           I64[Sp + 64] = _s2VlP::I64 + 1;
           Sp = Sp + 8;
           goto u38Mz;
       c38Lh: // global
           I64[Sp + 64] = _s2VlP::I64;
           Sp = Sp + 8;
           goto u38Mz;
       u38Mz: // global
           call _c38J9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38KH_info" {
     block_c38KH_info:
         const _c38KH;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38J9() //  []
         { []
         }
     {offset
       c38J9: // global
           _s2VjK::P64 = P64[Sp];
           _s2Vln::I64 = I64[Sp + 56];
           if (%MO_S_Lt_W64(_s2Vln::I64, 0)) goto c38Jo; else goto c38JO;
       c38Jo: // global
           I64[Sp - 8] = block_c38Ji_info;
           R3 = -_s2Vln::I64;
           R2 = _s2VjK::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
       c38JO: // global
           I64[Sp - 8] = block_c38JJ_info;
           R3 = _s2Vln::I64;
           R2 = _s2VjK::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c38Ji() //  [R1]
         { []
         }
     {offset
       c38Ji: // global
           I64[Sp] = block_c38Jm_info;
           R3 = P64[Sp + 72];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Ji_info" {
     block_c38Ji_info:
         const _c38Ji;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38Jm() //  [R1]
         { []
         }
     {offset
       c38Jm: // global
           I64[Sp] = block_c38Jt_info;
           R3 = P64[Sp + 56];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Jm_info" {
     block_c38Jm_info:
         const _c38Jm;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38Jt() //  [R1]
         { []
         }
     {offset
       c38Jt: // global
           _s2Vln::I64 = I64[Sp + 64];
           if (R1 == 1) goto c38JE; else goto c38JA;
       c38JE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c38JH; else goto c38JG;
       c38JH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38JG: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vln::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c38JA: // global
           I64[Sp + 64] = _s2Vln::I64 + 1;
           Sp = Sp + 8;
           call _c38J9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38Jt_info" {
     block_c38Jt_info:
         const _c38Jt;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38JJ() //  [R1]
         { []
         }
     {offset
       c38JJ: // global
           I64[Sp] = block_c38JN_info;
           R3 = P64[Sp + 56];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38JJ_info" {
     block_c38JJ_info:
         const _c38JJ;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38JN() //  [R1]
         { []
         }
     {offset
       c38JN: // global
           I64[Sp] = block_c38JT_info;
           R3 = R1;
           R2 = P64[Sp + 72];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38JN_info" {
     block_c38JN_info:
         const _c38JN;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 _c38JT() //  [R1]
         { []
         }
     {offset
       c38JT: // global
           _s2Vln::I64 = I64[Sp + 64];
           if (R1 == 1) goto c38K4; else goto c38K0;
       c38K4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c38K7; else goto c38K6;
       c38K7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c38K6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vln::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c38K0: // global
           I64[Sp + 64] = _s2Vln::I64 + 1;
           Sp = Sp + 8;
           call _c38J9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38JT_info" {
     block_c38JT_info:
         const _c38JT;
         const 12169;
         const 8800387989534;
         const S2VLN_srt+960;
 },
 sat_s2Vmu_entry() //  [R1]
         { []
         }
     {offset
       c38Nw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38Nx; else goto c38Ny;
       c38Nx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38Ny: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vmu_info" {
     sat_s2Vmu_info:
         const sat_s2Vmu_entry;
         const 1;
         const 21474836496;
         const S2VLN_srt+864;
 },
 sat_s2Vmy_entry() //  [R1]
         { []
         }
     {offset
       c38NQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38NR; else goto c38NS;
       c38NR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38NS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vmy_info" {
     sat_s2Vmy_info:
         const sat_s2Vmy_entry;
         const 1;
         const 21474836496;
         const S2VLN_srt+864;
 },
 section ""relreadonly" . u38QL_srtd" {
     u38QL_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 gen_s2Vmc_entry() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c38NW: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c38NX; else goto u38OE;
       c38NX: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u38OE: // global
           P64[Sp - 48] = R1;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call _c38MR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . gen_s2Vmc_info" {
     gen_s2Vmc_info:
         const gen_s2Vmc_entry;
         const 1;
         const 18446744069414584329;
         const 21474836505;
         const u38QL_srtd;
 },
 _c38MR() //  []
         { []
         }
     {offset
       c38MR: // global
           _s2VjK::P64 = P64[P64[Sp] + 3];
           I64[Sp - 16] = block_c38MU_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 24];
           P64[Sp - 8] = _s2VjK::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u38QM_srtd" {
     u38QM_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38MU() //  [R1]
         { []
         }
     {offset
       c38MU: // global
           if (R1 == 1) goto c38NV; else goto c38NU;
       c38NV: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c38NU: // global
           I64[Sp] = block_c38MY_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38MU_info" {
     block_c38MU_info:
         const _c38MU;
         const 7;
         const 18446744069414584350;
         const u38QM_srtd;
 },
 section ""relreadonly" . u38QN_srtd" {
     u38QN_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38MY() //  [R1]
         { []
         }
     {offset
       c38MY: // global
           I64[Sp] = block_c38N2_info;
           R3 = P64[Sp + 40];
           R2 = R1;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38MY_info" {
     block_c38MY_info:
         const _c38MY;
         const 519;
         const 18446744069414584350;
         const u38QN_srtd;
 },
 section ""relreadonly" . u38QO_srtd" {
     u38QO_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38N2() //  [R1, R2]
         { []
         }
     {offset
       c38N2: // global
           I64[Sp] = block_c38N4_info;
           R3 = P64[Sp + 8];
           _s2Vmm::P64 = R2;
           R2 = P64[Sp + 48];
           P64[Sp + 32] = _s2Vmm::P64;
           P64[Sp + 48] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38N2_info" {
     block_c38N2_info:
         const _c38N2;
         const 519;
         const 18446744069414584350;
         const u38QO_srtd;
 },
 section ""relreadonly" . u38QP_srtd" {
     u38QP_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38N4() //  [R1]
         { []
         }
     {offset
       c38N4: // global
           I64[Sp - 8] = block_c38N8_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38N4_info" {
     block_c38N4_info:
         const _c38N4;
         const 7;
         const 18446744069414584350;
         const u38QP_srtd;
 },
 section ""relreadonly" . u38QQ_srtd" {
     u38QQ_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38N8() //  [R1]
         { []
         }
     {offset
       c38N8: // global
           I64[Sp] = block_c38Nc_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38N8_info" {
     block_c38N8_info:
         const _c38N8;
         const 8;
         const 18446744069414584350;
         const u38QQ_srtd;
 },
 section ""relreadonly" . u38QR_srtd" {
     u38QR_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38Nc() //  [R1]
         { []
         }
     {offset
       c38Nc: // global
           I64[Sp] = block_c38Ng_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 64];
           I64[Sp + 64] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38Nc_info" {
     block_c38Nc_info:
         const _c38Nc;
         const 8;
         const 18446744069414584350;
         const u38QR_srtd;
 },
 section ""relreadonly" . u38QS_srtd" {
     u38QS_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38Ng() //  [R1]
         { []
         }
     {offset
       c38Ng: // global
           I64[Sp] = block_c38Nk_info;
           R3 = R1;
           R2 = P64[Sp + 40];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38Ng_info" {
     block_c38Ng_info:
         const _c38Ng;
         const 8328;
         const 18446744069414584350;
         const u38QS_srtd;
 },
 section ""relreadonly" . u38QT_srtd" {
     u38QT_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38Nk() //  [R1]
         { []
         }
     {offset
       c38Nk: // global
           _s2Vmd::P64 = P64[Sp + 32];
           _s2Vml::P64 = P64[Sp + 56];
           _s2Vmm::P64 = P64[Sp + 40];
           _s2Vmp::I64 = I64[Sp + 64];
           if (R1 == 1) goto c38Of; else goto c38O7;
       c38Of: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38Oi; else goto c38Oh;
       c38Oi: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38Oh: // global
           if (_s2Vmp::I64 == 1) goto c38Om; else goto c38Ol;
       c38Om: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_c38NE_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = _s2Vmm::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c38Ol: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vml::P64;
           P64[Hp] = _s2Vmd::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38O7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c38Oa; else goto c38O9;
       c38Oa: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38O9: // global
           if (_s2Vmp::I64 == 1) goto c38Oe; else goto c38Oc;
       c38Oe: // global
           I64[Hp - 40] = sat_s2Vmu_info;
           P64[Hp - 24] = _s2Vml::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s2Vmd::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38Oc: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s2Vml::P64;
           P64[Hp - 24] = _s2Vmd::P64;
           _c38Nq::P64 = Hp - 38;
           Hp = Hp - 24;
           P64[Sp + 32] = _c38Nq::P64;
           P64[Sp + 40] = _s2Vmm::P64;
           P64[Sp + 48] = P64[Sp + 48];
           P64[Sp + 56] = P64[Sp + 8];
           P64[Sp + 64] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c38MR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c38Nk_info" {
     block_c38Nk_info:
         const _c38Nk;
         const 8200;
         const 18446744069414584350;
         const u38QT_srtd;
 },
 _c38NE() //  [R1]
         { []
         }
     {offset
       c38NE: // global
           I64[Sp] = block_c38NI_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38NE_info" {
     block_c38NE_info:
         const _c38NE;
         const 1157;
         const 21474836510;
         const S2VLN_srt+864;
 },
 _c38NI() //  [R1]
         { []
         }
     {offset
       c38NI: // global
           _s2Vmd::P64 = P64[Sp + 8];
           _s2Vml::P64 = P64[Sp + 32];
           if (R1 == 1) goto c38Ox; else goto c38Oq;
       c38Ox: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38OA; else goto c38Oz;
       c38OA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38Oz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vml::P64;
           P64[Hp] = _s2Vmd::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c38Oq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c38Ot; else goto c38Os;
       c38Ot: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c38Os: // global
           I64[Hp - 40] = sat_s2Vmy_info;
           P64[Hp - 24] = _s2Vml::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s2Vmd::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c38NI_info" {
     block_c38NI_info:
         const _c38NI;
         const 1413;
         const 21474836510;
         const S2VLN_srt+864;
 },
 section ""relreadonly" . u38QU_srtd" {
     u38QU_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666531770369;
         const 32;
 },
 sat_s2VmW_entry() //  [R1]
         { []
         }
     {offset
       c38OI: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c38OJ; else goto c38OK;
       c38OJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38OK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c38MK_info;
           _s2VjK::P64 = P64[R1 + 16];
           _s2Vko::P64 = P64[R1 + 24];
           _s2Vl1::P64 = P64[R1 + 32];
           _s2Vl7::P64 = P64[R1 + 40];
           _s2Vld::P64 = P64[R1 + 48];
           R1 = P64[R1 + 56];
           P64[Sp - 56] = _s2VjK::P64;
           P64[Sp - 48] = _s2Vko::P64;
           P64[Sp - 40] = _s2Vl1::P64;
           P64[Sp - 32] = _s2Vl7::P64;
           P64[Sp - 24] = _s2Vld::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u38Q0; else goto c38ML;
       u38Q0: // global
           call _c38MK(R1) args: 0, res: 0, upd: 0;
       c38ML: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VmW_info" {
     sat_s2VmW_info:
         const sat_s2VmW_entry;
         const 6;
         const 18446744069414584335;
         const u38QU_srtd;
 },
 section ""relreadonly" . u38QV_srtd" {
     u38QV_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666531770369;
         const 32;
 },
 _c38MK() //  [R1]
         { []
         }
     {offset
       c38MK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c38ON; else goto c38OM;
       c38ON: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c38OM: // global
           _s2Vmb::I64 = I64[R1 + 7];
           I64[Hp - 8] = gen_s2Vmc_info;
           P64[Hp] = P64[Sp + 8];
           _s2Vko::P64 = P64[Sp + 16];
           _c38MP::P64 = Hp - 3;
           if (%MO_S_Lt_W64(_s2Vmb::I64, 0)) goto c38Pl; else goto c38PP;
       c38Pl: // global
           I64[Sp - 8] = block_c38OR_info;
           R1 = _s2Vko::P64;
           I64[Sp] = _s2Vmb::I64;
           P64[Sp + 16] = _c38MP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u38PY; else goto c38OS;
       u38PY: // global
           call _c38OR(R1) args: 0, res: 0, upd: 0;
       c38OS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c38PP: // global
           I64[Sp - 8] = block_c38Px_info;
           R1 = _s2Vko::P64;
           I64[Sp] = _s2Vmb::I64;
           P64[Sp + 16] = _c38MP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u38PZ; else goto c38Py;
       u38PZ: // global
           call _c38Px(R1) args: 0, res: 0, upd: 0;
       c38Py: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38MK_info" {
     block_c38MK_info:
         const _c38MK;
         const 5;
         const 18446744069414584350;
         const u38QV_srtd;
 },
 section ""relreadonly" . u38QW_srtd" {
     u38QW_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666531770369;
         const 32;
 },
 _c38OR() //  [R1]
         { []
         }
     {offset
       c38OR: // global
           _s2VmH::I64 = -I64[Sp + 8];
           I64[Sp + 8] = block_c38OZ_info;
           R3 = _s2VmH::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38OR_info" {
     block_c38OR_info:
         const _c38OR;
         const 70;
         const 18446744069414584350;
         const u38QW_srtd;
 },
 section ""relreadonly" . u38QX_srtd" {
     u38QX_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38OZ() //  [R1]
         { []
         }
     {offset
       c38OZ: // global
           I64[Sp] = block_c38P3_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38OZ_info" {
     block_c38OZ_info:
         const _c38OZ;
         const 5;
         const 18446744069414584350;
         const u38QX_srtd;
 },
 section ""relreadonly" . u38QY_srtd" {
     u38QY_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38P3() //  [R1]
         { []
         }
     {offset
       c38P3: // global
           I64[Sp] = block_c38P7_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38P3_info" {
     block_c38P3_info:
         const _c38P3;
         const 5;
         const 18446744069414584350;
         const u38QY_srtd;
 },
 section ""relreadonly" . u38QZ_srtd" {
     u38QZ_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38P7() //  [R1]
         { []
         }
     {offset
       c38P7: // global
           _s2VmG::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c38Pb_info;
           R3 = _s2VmG::P64;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38P7_info" {
     block_c38P7_info:
         const _c38P7;
         const 5;
         const 18446744069414584350;
         const u38QZ_srtd;
 },
 section ""relreadonly" . u38R0_srtd" {
     u38R0_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38Pb() //  [R1]
         { []
         }
     {offset
       c38Pb: // global
           _s2VmK::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c38Pf_info;
           R6 = _s2VmK::P64;
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call gen_s2Vmc_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Pb_info" {
     block_c38Pb_info:
         const _c38Pb;
         const 4;
         const 18446744069414584350;
         const u38R0_srtd;
 },
 _c38Pf() //  [R1]
         { []
         }
     {offset
       c38Pf: // global
           I64[Sp] = block_c38Pj_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Pf_info" {
     block_c38Pf_info:
         const _c38Pf;
         const 0;
         const 30;
 },
 _c38Pj() //  [R1]
         { []
         }
     {offset
       c38Pj: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Pj_info" {
     block_c38Pj_info:
         const _c38Pj;
         const 0;
         const 30;
 },
 section ""relreadonly" . u38R1_srtd" {
     u38R1_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666531770369;
         const 32;
 },
 _c38Px() //  [R1]
         { []
         }
     {offset
       c38Px: // global
           _s2Vmb::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c38PC_info;
           R3 = _s2Vmb::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Px_info" {
     block_c38Px_info:
         const _c38Px;
         const 70;
         const 18446744069414584350;
         const u38R1_srtd;
 },
 section ""relreadonly" . u38R2_srtd" {
     u38R2_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38PC() //  [R1]
         { []
         }
     {offset
       c38PC: // global
           I64[Sp] = block_c38PG_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38PC_info" {
     block_c38PC_info:
         const _c38PC;
         const 5;
         const 18446744069414584350;
         const u38R2_srtd;
 },
 section ""relreadonly" . u38R3_srtd" {
     u38R3_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c38PG() //  [R1]
         { []
         }
     {offset
       c38PG: // global
           _s2Vld::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c38PK_info;
           R6 = P64[Sp + 8];
           R5 = _s2Vld::P64;
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call gen_s2Vmc_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38PG_info" {
     block_c38PG_info:
         const _c38PG;
         const 261;
         const 18446744069414584350;
         const u38R3_srtd;
 },
 _c38PK() //  [R1]
         { []
         }
     {offset
       c38PK: // global
           I64[Sp] = block_c38PO_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c38PK_info" {
     block_c38PK_info:
         const _c38PK;
         const 0;
         const 30;
 },
 _c38PO() //  [R1]
         { []
         }
     {offset
       c38PO: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38PO_info" {
     block_c38PO_info:
         const _c38PO;
         const 0;
         const 30;
 },
 section ""relreadonly" . u38R4_srtd" {
     u38R4_srtd:
         const S2VLN_srt+552;
         const 71;
         const 4613941666565324801;
         const 96;
 },
 GHC.Float.$wfloatToDigits_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c38Q1: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c38Q2; else goto c38Q3;
       c38Q2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$wfloatToDigits_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c38Q3: // global
           I64[Sp - 32] = block_c38CM_info;
           _s2VjJ::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s2VjJ::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wfloatToDigits_info" {
     GHC.Float.$wfloatToDigits_info:
         const GHC.Float.$wfloatToDigits_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u38R4_srtd;
 },
 section ""relreadonly" . u38R5_srtd" {
     u38R5_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c38CM() //  [R1]
         { []
         }
     {offset
       c38CM: // global
           I64[Sp] = block_c38CQ_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38CM_info" {
     block_c38CM_info:
         const _c38CM;
         const 3;
         const 18446744069414584350;
         const u38R5_srtd;
 },
 section ""relreadonly" . u38R6_srtd" {
     u38R6_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c38CQ() //  [R1]
         { []
         }
     {offset
       c38CQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38Q7; else goto c38Q6;
       c38Q7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c38Q6: // global
           I64[Hp - 16] = sat_s2VjR_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c38D6_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38CQ_info" {
     block_c38CQ_info:
         const _c38CQ;
         const 3;
         const 18446744069414584350;
         const u38R6_srtd;
 },
 section ""relreadonly" . u38R7_srtd" {
     u38R7_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c38D6() //  [R1]
         { []
         }
     {offset
       c38D6: // global
           I64[Sp] = block_c38Da_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38D6_info" {
     block_c38D6_info:
         const _c38D6;
         const 4;
         const 18446744069414584350;
         const u38R7_srtd;
 },
 section ""relreadonly" . u38R8_srtd" {
     u38R8_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c38Da() //  [R1]
         { []
         }
     {offset
       c38Da: // global
           _c38CU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c38De_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c38CU::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c38Da_info" {
     block_c38Da_info:
         const _c38Da;
         const 4;
         const 18446744069414584350;
         const u38R8_srtd;
 },
 section ""relreadonly" . u38R9_srtd" {
     u38R9_srtd:
         const S2VLN_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c38De() //  [R1]
         { []
         }
     {offset
       c38De: // global
           if (R1 & 7 == 1) goto c38Qb; else goto c38Qi;
       c38Qb: // global
           Hp = Hp + 480;
           if (Hp > HpLim) (likely: False) goto c38Qe; else goto c38Qd;
       c38Qe: // global
           HpAlloc = 480;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c38Qd: // global
           I64[Hp - 472] = b_s2VjT_info;
           _s2VjJ::P64 = P64[Sp + 8];
           P64[Hp - 456] = _s2VjJ::P64;
           _s2VjL::P64 = P64[Sp + 24];
           P64[Hp - 448] = _s2VjL::P64;
           I64[Hp - 440] = p_s2VjU_info;
           P64[Hp - 424] = _s2VjJ::P64;
           P64[Hp - 416] = _s2VjL::P64;
           I64[Hp - 408] = minExp_s2VjV_info;
           P64[Hp - 392] = _s2VjJ::P64;
           P64[Hp - 384] = _s2VjL::P64;
           _c38Dp::P64 = Hp - 440;
           P64[Hp - 376] = _c38Dp::P64;
           I64[Hp - 368] = ds_s2Vk4_info;
           P64[Hp - 352] = _s2VjJ::P64;
           P64[Hp - 344] = _s2VjL::P64;
           I64[Hp - 336] = ds1_s2Vk5_info;
           _c38Di::P64 = Hp - 472;
           P64[Hp - 320] = _c38Di::P64;
           _c38Dw::P64 = Hp - 408;
           P64[Hp - 312] = _c38Dw::P64;
           _c38E2::P64 = Hp - 368;
           P64[Hp - 304] = _c38E2::P64;
           I64[Hp - 296] = stg_sel_0_upd_info;
           _c38E9::P64 = Hp - 336;
           P64[Hp - 280] = _c38E9::P64;
           I64[Hp - 272] = ds2_s2Vko_info;
           P64[Hp - 256] = _c38Di::P64;
           P64[Hp - 248] = _c38Dp::P64;
           P64[Hp - 240] = _c38Dw::P64;
           P64[Hp - 232] = _c38E9::P64;
           _c38Ff::P64 = Hp - 296;
           P64[Hp - 224] = _c38Ff::P64;
           I64[Hp - 216] = stg_sel_1_upd_info;
           _c38Fg::P64 = Hp - 272;
           P64[Hp - 200] = _c38Fg::P64;
           I64[Hp - 192] = stg_sel_0_upd_info;
           P64[Hp - 176] = _c38Fg::P64;
           I64[Hp - 168] = stg_sel_2_upd_info;
           P64[Hp - 152] = _c38Fg::P64;
           I64[Hp - 144] = k_s2Vlj_info;
           _s2VjK::P64 = P64[Sp + 16];
           P64[Hp - 128] = _s2VjK::P64;
           P64[Hp - 120] = _c38Di::P64;
           P64[Hp - 112] = _c38Dp::P64;
           P64[Hp - 104] = _c38E2::P64;
           P64[Hp - 96] = _c38E9::P64;
           P64[Hp - 88] = _c38Ff::P64;
           _c38IM::P64 = Hp - 216;
           P64[Hp - 80] = _c38IM::P64;
           _c38IN::P64 = Hp - 192;
           P64[Hp - 72] = _c38IN::P64;
           _c38IO::P64 = Hp - 168;
           P64[Hp - 64] = _c38IO::P64;
           I64[Hp - 56] = sat_s2VmW_info;
           P64[Hp - 40] = _s2VjK::P64;
           P64[Hp - 32] = _c38Fg::P64;
           P64[Hp - 24] = _c38IM::P64;
           P64[Hp - 16] = _c38IN::P64;
           P64[Hp - 8] = _c38IO::P64;
           _c38IP::P64 = Hp - 144;
           P64[Hp] = _c38IP::P64;
           R2 = _c38IP::P64;
           R1 = Hp - 56;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c38Qi: // global
           R2 = GHC.Float.minExpt_closure+1;
           R1 = lvl3_r2UpB_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c38De_info" {
     block_c38De_info:
         const _c38De;
         const 3;
         const 18446744069414584350;
         const u38R9_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.919554046 UTC

[section ""data" . GHC.Float.floatToDigits_closure" {
     GHC.Float.floatToDigits_closure:
         const GHC.Float.floatToDigits_info;
         const 0;
 },
 GHC.Float.floatToDigits_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c38YT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c38YU; else goto c38YV;
       c38YU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.floatToDigits_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c38YV: // global
           I64[Sp - 8] = block_c38YQ_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Float.$wfloatToDigits_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.floatToDigits_info" {
     GHC.Float.floatToDigits_info:
         const GHC.Float.floatToDigits_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S2VLN_srt+1112;
 },
 _c38YQ() //  [R1, R2]
         { []
         }
     {offset
       c38YQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c38YY; else goto c38YX;
       c38YY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c38YX: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c38YQ_info" {
     block_c38YQ_info:
         const _c38YQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.924956474 UTC

[section ""data" . base_r2UqK_closure" {
     base_r2UqK_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.926645385 UTC

[section ""cstring" . lvl12_r2UqL_bytes" {
     lvl12_r2UqL_bytes:
         I8[] [102,111,114,109,97,116,82,101,97,108,70,108,111,97,116,47,100,111,70,109,116,47,70,70,69,120,112,111,110,101,110,116,58,32,91,93]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.92910952 UTC

[section ""data" . lvl13_r2UqM_closure" {
     lvl13_r2UqM_closure:
         const lvl13_r2UqM_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r2UqM_entry() //  [R1]
         { []
         }
     {offset
       c38Zi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c38Zj; else goto c38Zk;
       c38Zj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38Zk: // global
           (_c38Zd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c38Zd::I64 == 0) goto c38Zf; else goto c38Ze;
       c38Zf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c38Ze: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c38Zd::I64;
           I64[Sp - 24] = block_c38Zg_info;
           R2 = lvl12_r2UqL_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_r2UqM_info" {
     lvl13_r2UqM_info:
         const lvl13_r2UqM_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+1128;
 },
 _c38Zg() //  [R1]
         { []
         }
     {offset
       c38Zg: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c38Zg_info" {
     block_c38Zg_info:
         const _c38Zg;
         const 0;
         const 4294967326;
         const S2VLN_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.934269604 UTC

[section ""data" . lvl14_r2UqN_closure" {
     lvl14_r2UqN_closure:
         const GHC.Types.C#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.936258162 UTC

[section ""cstring" . lvl15_r2UqO_bytes" {
     lvl15_r2UqO_bytes:
         I8[] [48,46,48,101,48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.939164753 UTC

[section ""data" . lvl16_r2UqP_closure" {
     lvl16_r2UqP_closure:
         const lvl16_r2UqP_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_r2UqP_entry() //  [R1]
         { []
         }
     {offset
       c38ZG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38ZH; else goto c38ZI;
       c38ZH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38ZI: // global
           (_c38ZD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c38ZD::I64 == 0) goto c38ZF; else goto c38ZE;
       c38ZF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c38ZE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c38ZD::I64;
           R2 = lvl15_r2UqO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_r2UqP_info" {
     lvl16_r2UqP_info:
         const lvl16_r2UqP_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.943519276 UTC

[section ""cstring" . lvl17_r2UqQ_bytes" {
     lvl17_r2UqQ_bytes:
         I8[] [71,72,67,47,70,108,111,97,116,46,104,115,58,54,57,50,58,49,50,45,55,48,124,100,32,58,32,100,115,39]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.945865778 UTC

[section ""data" . lvl18_r2UqR_closure" {
     lvl18_r2UqR_closure:
         const lvl18_r2UqR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r2UqR_entry() //  [R1]
         { []
         }
     {offset
       c38ZX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c38ZY; else goto c38ZZ;
       c38ZY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c38ZZ: // global
           (_c38ZU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c38ZU::I64 == 0) goto c38ZW; else goto c38ZV;
       c38ZW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c38ZV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c38ZU::I64;
           R2 = lvl17_r2UqQ_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_r2UqR_info" {
     lvl18_r2UqR_info:
         const lvl18_r2UqR_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.949389566 UTC

[section ""data" . lvl19_r2UqS_closure" {
     lvl19_r2UqS_closure:
         const GHC.Types.C#_con_info;
         const 101;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.951064932 UTC

[section ""data" . lvl20_r2UqT_closure" {
     lvl20_r2UqT_closure:
         const GHC.Types.C#_con_info;
         const 48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.952693738 UTC

[section ""cstring" . lvl21_r2UqU_bytes" {
     lvl21_r2UqU_bytes:
         I8[] [101,48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.954341757 UTC

[section ""cstring" . lvl22_r2UqV_bytes" {
     lvl22_r2UqV_bytes:
         I8[] [48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.95671209 UTC

[section ""data" . lvl23_r2UqW_closure" {
     lvl23_r2UqW_closure:
         const lvl23_r2UqW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r2UqW_entry() //  [R1]
         { []
         }
     {offset
       c390h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c390i; else goto c390j;
       c390i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c390j: // global
           (_c390e::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c390e::I64 == 0) goto c390g; else goto c390f;
       c390g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c390f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c390e::I64;
           R2 = lvl22_r2UqV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_r2UqW_info" {
     lvl23_r2UqW_info:
         const lvl23_r2UqW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.965103158 UTC

[section ""data" . $wf_r2UqX_closure" {
     $wf_r2UqX_closure:
         const $wf_r2UqX_info;
         const 0;
 },
 sat_s2Vnj_entry() //  [R1]
         { []
         }
     {offset
       c390W: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c390X; else goto c390Y;
       c390X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c390Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c390P_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3915; else goto c390Q;
       u3915: // global
           call _c390P(R1) args: 0, res: 0, upd: 0;
       c390Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vnj_info" {
     sat_s2Vnj_info:
         const sat_s2Vnj_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1144;
 },
 _c390P() //  [R1]
         { []
         }
     {offset
       c390P: // global
           if (R1 & 7 == 1) goto c390T; else goto c390U;
       c390T: // global
           R1 = lvl23_r2UqW_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c390U: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c390P_info" {
     block_c390P_info:
         const _c390P;
         const 0;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 sat_s2Vnq_entry() //  [R1]
         { []
         }
     {offset
       c391j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c391k; else goto c391l;
       c391k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c391l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c391c_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u391s; else goto c391d;
       u391s: // global
           call _c391c(R1) args: 0, res: 0, upd: 0;
       c391d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vnq_info" {
     sat_s2Vnq_info:
         const sat_s2Vnq_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1144;
 },
 _c391c() //  [R1]
         { []
         }
     {offset
       c391c: // global
           if (R1 & 7 == 1) goto c391g; else goto c391h;
       c391g: // global
           R1 = lvl23_r2UqW_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c391h: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c391c_info" {
     block_c391c_info:
         const _c391c;
         const 0;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 $wf_r2UqX_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c391w: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c391x; else goto u391X;
       c391x: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wf_r2UqX_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u391X: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c390s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wf_r2UqX_info" {
     $wf_r2UqX_info:
         const $wf_r2UqX_entry;
         const 0;
         const 12884901902;
         const 12884901907;
         const S2VLN_srt+1144;
 },
 _c390s() //  []
         { []
         }
     {offset
       c390s: // global
           _s2Vn7::I64 = I64[Sp];
           if (_s2Vn7::I64 != 0) goto c391u; else goto c391v;
       c391u: // global
           I64[Sp] = block_c390x_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2Vn7::I64;
           if (R1 & 7 != 0) goto u3920; else goto c390y;
       u3920: // global
           call _c390x(R1) args: 0, res: 0, upd: 0;
       c390y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c391v: // global
           _s2Vn5::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c390H_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s2Vn5::P64;
           Sp = Sp + 8;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c390x() //  [R1]
         { []
         }
     {offset
       c390x: // global
           _s2Vn5::P64 = P64[Sp + 8];
           _s2Vn7::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c391A; else goto c391E;
       c391A: // global
           Hp = Hp + 24;
           _s2Vn8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c391H; else goto c391C;
       c391C: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = _s2Vn5::P64;
           I64[Sp] = _s2Vn7::I64 - 1;
           P64[Sp + 8] = Hp - 14;
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           goto u3922;
       c391E: // global
           Hp = Hp + 24;
           _s2Vn8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c391H; else goto c391G;
       c391H: // global
           HpAlloc = 24;
           R1 = _s2Vn8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c391G: // global
           _s2Vnb::P64 = P64[_s2Vn8::P64 + 6];
           _s2Vnc::P64 = P64[_s2Vn8::P64 + 14];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vnb::P64;
           P64[Hp] = _s2Vn5::P64;
           I64[Sp] = _s2Vn7::I64 - 1;
           P64[Sp + 8] = Hp - 14;
           P64[Sp + 16] = _s2Vnc::P64;
           goto u3922;
       u3922: // global
           call _c390s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c390x_info" {
     block_c390x_info:
         const _c390x;
         const 130;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c390H() //  [R1]
         { []
         }
     {offset
       c390H: // global
           _s2Vn6::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c391K; else goto c391P;
       c391K: // global
           Hp = Hp + 48;
           _s2Vnf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c391S; else goto c391M;
       c391M: // global
           I64[Hp - 40] = sat_s2Vnj_info;
           P64[Hp - 24] = _s2Vn6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c391P: // global
           Hp = Hp + 48;
           _s2Vnf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c391S; else goto c391R;
       c391S: // global
           HpAlloc = 48;
           R1 = _s2Vnf::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c391R: // global
           I64[Hp - 40] = sat_s2Vnq_info;
           P64[Hp - 24] = _s2Vn6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = _s2Vnf::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c390H_info" {
     block_c390H_info:
         const _c390H;
         const 1;
         const 4294967326;
         const S2VLN_srt+1144;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.981347518 UTC

[section ""cstring" . lvl24_r2UqY_bytes" {
     lvl24_r2UqY_bytes:
         I8[] [71,72,67,47,70,108,111,97,116,46,104,115,58,55,50,48,58,49,49,45,54,52,124,100,32,58,32,100,115,39]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.983701487 UTC

[section ""data" . lvl25_r2UqZ_closure" {
     lvl25_r2UqZ_closure:
         const lvl25_r2UqZ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r2UqZ_entry() //  [R1]
         { []
         }
     {offset
       c392Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3930; else goto c3931;
       c3930: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3931: // global
           (_c392W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c392W::I64 == 0) goto c392Y; else goto c392X;
       c392Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c392X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c392W::I64;
           R2 = lvl24_r2UqY_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_r2UqZ_info" {
     lvl25_r2UqZ_info:
         const lvl25_r2UqZ_entry;
         const 0;
         const 4294967317;
         const S2VLN_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.987635177 UTC

[section ""cstring" . lvl26_r2Ur0_bytes" {
     lvl26_r2Ur0_bytes:
         I8[] [73,110,102,105,110,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.989985061 UTC

[section ""data" . lvl27_r2Ur1_closure" {
     lvl27_r2Ur1_closure:
         const lvl27_r2Ur1_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r2Ur1_entry() //  [R1]
         { []
         }
     {offset
       c393g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c393h; else goto c393i;
       c393h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c393i: // global
           (_c393d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c393d::I64 == 0) goto c393f; else goto c393e;
       c393f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c393e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c393d::I64;
           R2 = lvl26_r2Ur0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_r2Ur1_info" {
     lvl27_r2Ur1_info:
         const lvl27_r2Ur1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.993767676 UTC

[section ""cstring" . lvl28_r2Ur2_bytes" {
     lvl28_r2Ur2_bytes:
         I8[] [45,73,110,102,105,110,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.996532663 UTC

[section ""data" . lvl29_r2Ur3_closure" {
     lvl29_r2Ur3_closure:
         const lvl29_r2Ur3_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r2Ur3_entry() //  [R1]
         { []
         }
     {offset
       c393x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c393y; else goto c393z;
       c393y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c393z: // global
           (_c393u::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c393u::I64 == 0) goto c393w; else goto c393v;
       c393w: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c393v: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c393u::I64;
           R2 = lvl28_r2Ur2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl29_r2Ur3_info" {
     lvl29_r2Ur3_info:
         const lvl29_r2Ur3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:34.999924678 UTC

[section ""cstring" . lvl30_r2Ur4_bytes" {
     lvl30_r2Ur4_bytes:
         I8[] [78,97,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.002078453 UTC

[section ""data" . lvl31_r2Ur5_closure" {
     lvl31_r2Ur5_closure:
         const lvl31_r2Ur5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r2Ur5_entry() //  [R1]
         { []
         }
     {offset
       c393O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c393P; else goto c393Q;
       c393P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c393Q: // global
           (_c393L::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c393L::I64 == 0) goto c393N; else goto c393M;
       c393N: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c393M: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c393L::I64;
           R2 = lvl30_r2Ur4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_r2Ur5_info" {
     lvl31_r2Ur5_info:
         const lvl31_r2Ur5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.005374447 UTC

[section ""cstring" . lvl32_r2Ur6_bytes" {
     lvl32_r2Ur6_bytes:
         I8[] [46,48,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.006833859 UTC

[section ""cstring" . lvl33_r2Ur7_bytes" {
     lvl33_r2Ur7_bytes:
         I8[] [101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.008977618 UTC

[section ""data" . lvl34_r2Ur8_closure" {
     lvl34_r2Ur8_closure:
         const lvl34_r2Ur8_info;
         const 0;
         const 0;
         const 0;
 },
 lvl34_r2Ur8_entry() //  [R1]
         { []
         }
     {offset
       c3946: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3947; else goto c3948;
       c3947: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3948: // global
           (_c3943::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3943::I64 == 0) goto c3945; else goto c3944;
       c3945: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3944: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3943::I64;
           R2 = lvl21_r2UqU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_r2Ur8_info" {
     lvl34_r2Ur8_info:
         const lvl34_r2Ur8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.01297565 UTC

[section ""data" . lvl35_r2Ur9_closure" {
     lvl35_r2Ur9_closure:
         const :_con_info;
         const lvl20_r2UqT_closure+1;
         const lvl34_r2Ur8_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.015826167 UTC

[section ""data" . $wxs1_r2Ura_closure" {
     $wxs1_r2Ura_closure:
         const $wxs1_r2Ura_info;
         const 0;
 },
 sat_s2Vnv_entry() //  [R1]
         { []
         }
     {offset
       c394t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c394u; else goto c394v;
       c394u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c394v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs1_r2Ura_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vnv_info" {
     sat_s2Vnv_info:
         const sat_s2Vnv_entry;
         const 4294967296;
         const 4294967313;
         const S2VLN_srt+1160;
 },
 $wxs1_r2Ura_entry() //  [R2]
         { []
         }
     {offset
       c394z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c394D; else goto c394C;
       c394D: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs1_r2Ura_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c394C: // global
           if (R2 == 1) goto c394y; else goto c394x;
       c394y: // global
           Hp = Hp - 48;
           R1 = lvl35_r2Ur9_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c394x: // global
           I64[Hp - 40] = sat_s2Vnv_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs1_r2Ura_info" {
     $wxs1_r2Ura_info:
         const $wxs1_r2Ura_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S2VLN_srt+1160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.021883961 UTC

[section ""cstring" . lvl36_r2Urb_bytes" {
     lvl36_r2Urb_bytes:
         I8[] [48,46]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.026579807 UTC

[section ""data" . $j_r2Urc_closure" {
     $j_r2Urc_closure:
         const $j_r2Urc_info;
         const 0;
 },
 $j_r2Urc_entry() //  [R2, R3]
         { []
         }
     {offset
       c394Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3950; else goto c3951;
       c3950: // global
           R3 = R3;
           R2 = R2;
           R1 = $j_r2Urc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3951: // global
           I64[Sp - 16] = block_c394W_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u395L; else goto c394X;
       u395L: // global
           call _c394W(R1) args: 0, res: 0, upd: 0;
       c394X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $j_r2Urc_info" {
     $j_r2Urc_info:
         const $j_r2Urc_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S2VLN_srt+1176;
 },
 _c394W() //  [R1]
         { []
         }
     {offset
       c394W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3956; else goto c3955;
       c3956: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3955: // global
           _s2Vnx::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(I64[R1 + 7], 0)) goto c395d; else goto c395t;
       c395d: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = _s2Vnx::P64;
           I64[Sp + 8] = block_c395b_info;
           R3 = Hp - 14;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c395t: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_c395s_info;
           R3 = _s2Vnx::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c394W_info" {
     block_c394W_info:
         const _c394W;
         const 1;
         const 12884901918;
         const S2VLN_srt+1176;
 },
 _c395b() //  [R1]
         { []
         }
     {offset
       c395b: // global
           if (R1 & 7 == 1) goto u395J; else goto c395n;
       u395J: // global
           Sp = Sp + 8;
           call _c395z() args: 0, res: 0, upd: 0;
       c395n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c395q; else goto c395p;
       c395q: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c395p: // global
           _s2VnD::P64 = P64[R1 + 6];
           _s2VnE::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2VnD::P64;
           P64[Hp] = _s2VnE::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c395b_info" {
     block_c395b_info:
         const _c395b;
         const 0;
         const 4294967326;
         const S2VLN_srt+1184;
 },
 _c395s() //  [R1]
         { []
         }
     {offset
       c395s: // global
           if (R1 & 7 == 1) goto u395K; else goto c395D;
       u395K: // global
           Sp = Sp + 8;
           call _c395z() args: 0, res: 0, upd: 0;
       c395D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c395G; else goto c395F;
       c395G: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c395F: // global
           _s2VnG::P64 = P64[R1 + 6];
           _s2VnH::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2VnG::P64;
           P64[Hp] = _s2VnH::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c395s_info" {
     block_c395s_info:
         const _c395s;
         const 0;
         const 4294967326;
         const S2VLN_srt+1184;
 },
 _c395z() //  []
         { []
         }
     {offset
       c395z: // global
           R1 = lvl25_r2UqZ_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.036178089 UTC

[section ""data" . lvl37_r2Urd_closure" {
     lvl37_r2Urd_closure:
         const :_con_info;
         const lvl14_r2UqN_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.102070097 UTC

[section ""data" . GHC.Float.$w$sformatRealFloatAlt1_closure" {
     GHC.Float.$w$sformatRealFloatAlt1_closure:
         const GHC.Float.$w$sformatRealFloatAlt1_info;
         const 0;
 },
 GHC.Float.$w$sformatRealFloatAlt1_slow() //  [R1]
         { []
         }
     {offset
       c396e: // global
           F1 = F32[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 8, res: 0, upd: 8;
     }
 },
 show_e'_s2Voa_entry() //  [R1]
         { []
         }
     {offset
       c3973: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c397c; else goto c397d;
       c397c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c397d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3970_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u397i; else goto c3971;
       u397i: // global
           call _c3970(R1) args: 0, res: 0, upd: 0;
       c3971: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . show_e'_s2Voa_info" {
     show_e'_s2Voa_info:
         const show_e'_s2Voa_entry;
         const 1;
         const 16;
 },
 _c3970() //  [R1]
         { []
         }
     {offset
       c3970: // global
           I64[Sp] = block_c3979_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7] - 1;
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3970_info" {
     block_c3970_info:
         const _c3970;
         const 0;
         const 30;
 },
 _c3979() //  [R1, R2]
         { []
         }
     {offset
       c3979: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c397h; else goto c397g;
       c397h: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c397g: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3979_info" {
     block_c3979_info:
         const _c3979;
         const 0;
         const 30;
 },
 sat_s2Voi_entry() //  [R1]
         { []
         }
     {offset
       c397s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c397t; else goto c397u;
       c397t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c397u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl32_r2Ur6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Voi_info" {
     sat_s2Voi_info:
         const sat_s2Voi_entry;
         const 1;
         const 16;
 },
 sat_s2Vol_entry() //  [R1]
         { []
         }
     {offset
       c397F: // global
           R3 = P64[R1 + 16];
           R2 = lvl33_r2Ur7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vol_info" {
     sat_s2Vol_info:
         const sat_s2Vol_entry;
         const 1;
         const 16;
 },
 sat_s2Vom_entry() //  [R1]
         { []
         }
     {offset
       c397I: // global
           _s2Vom::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c397J; else goto c397K;
       c397K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c397M; else goto c397L;
       c397M: // global
           HpAlloc = 24;
           goto c397J;
       c397J: // global
           R1 = _s2Vom::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c397L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Vom::P64;
           _s2Voa::P64 = P64[_s2Vom::P64 + 16];
           _s2Voh::P64 = P64[_s2Vom::P64 + 24];
           I64[Hp - 16] = sat_s2Vol_info;
           P64[Hp] = _s2Voa::P64;
           R3 = Hp - 16;
           R2 = _s2Voh::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vom_info" {
     sat_s2Vom_info:
         const sat_s2Vom_entry;
         const 2;
         const 18;
 },
 dec'_s2Vot_entry() //  [R1]
         { []
         }
     {offset
       c397W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c397X; else goto c397Y;
       c397X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c397Y: // global
           I64[Sp - 8] = block_c397T_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3987; else goto c397U;
       u3987: // global
           call _c397T(R1) args: 0, res: 0, upd: 0;
       c397U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dec'_s2Vot_info" {
     dec'_s2Vot_info:
         const dec'_s2Vot_entry;
         const 1;
         const 16;
 },
 _c397T() //  [R1]
         { []
         }
     {offset
       c397T: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 1)) goto c3985; else goto c3986;
       c3985: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3986: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c397T_info" {
     block_c397T_info:
         const _c397T;
         const 0;
         const 30;
 },
 sat_s2VoD_entry() //  [R1]
         { []
         }
     {offset
       c398n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c398u; else goto c398v;
       c398u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c398v: // global
           I64[Sp - 8] = block_c398l_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           call dec'_s2Vot_entry(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VoD_info" {
     sat_s2VoD_info:
         const sat_s2VoD_entry;
         const 1;
         const 16;
 },
 _c398l() //  [R1]
         { []
         }
     {offset
       c398l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c398y; else goto c398x;
       c398y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c398x: // global
           _s2VoC::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2VoC::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c398l_info" {
     block_c398l_info:
         const _c398l;
         const 0;
         const 30;
 },
 ds5_s2Voz_entry() //  [R1]
         { []
         }
     {offset
       c398C: // global
           _s2Voz::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c398D; else goto c398E;
       c398E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c398G; else goto c398F;
       c398G: // global
           HpAlloc = 24;
           goto c398D;
       c398D: // global
           R1 = _s2Voz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c398F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Voz::P64;
           _s2VnZ::P64 = P64[_s2Voz::P64 + 16];
           _s2Vot::P64 = P64[_s2Voz::P64 + 24];
           I64[Hp - 16] = sat_s2VoD_info;
           P64[Hp] = _s2Vot::P64;
           I64[Sp - 24] = block_c398z_info;
           R4 = _s2VnZ::P64;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds5_s2Voz_info" {
     ds5_s2Voz_info:
         const ds5_s2Voz_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+1200;
 },
 _c398z() //  [R1, R2]
         { []
         }
     {offset
       c398z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c398J; else goto c398I;
       c398J: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c398I: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c398z_info" {
     block_c398z_info:
         const _c398z;
         const 0;
         const 30;
 },
 ds6_s2VoH_entry() //  [R1]
         { []
         }
     {offset
       c398R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c398V; else goto c398W;
       c398V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c398W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c398O_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u399Z; else goto c398P;
       u399Z: // global
           call _c398O(R1) args: 0, res: 0, upd: 0;
       c398P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds6_s2VoH_info" {
     ds6_s2VoH_info:
         const ds6_s2VoH_entry;
         const 1;
         const 210453397520;
         const S2VLN_srt+1176;
 },
 _c398O() //  [R1]
         { []
         }
     {offset
       c398O: // global
           I64[Sp - 8] = block_c398U_info;
           _s2VoK::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2VoK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u399Y; else goto c398Y;
       u399Y: // global
           call _c398U(R1) args: 0, res: 0, upd: 0;
       c398Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c398O_info" {
     block_c398O_info:
         const _c398O;
         const 0;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c398U() //  [R1]
         { []
         }
     {offset
       c398U: // global
           _s2VoK::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(I64[R1 + 7], 0)) goto c3998; else goto c399o;
       c3998: // global
           I64[Sp + 8] = block_c3996_info;
           R3 = _s2VoK::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
       c399o: // global
           I64[Sp + 8] = block_c399n_info;
           R1 = _s2VoK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39a0; else goto c399p;
       u39a0: // global
           call _c399n(R1) args: 0, res: 0, upd: 0;
       c399p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c398U_info" {
     block_c398U_info:
         const _c398U;
         const 1;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c3996() //  [R1]
         { []
         }
     {offset
       c3996: // global
           if (R1 & 7 == 1) goto u399W; else goto c399i;
       u399W: // global
           Sp = Sp + 8;
           call _c399L() args: 0, res: 0, upd: 0;
       c399i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c399l; else goto c399k;
       c399l: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c399k: // global
           _s2VoP::P64 = P64[R1 + 6];
           _s2VoQ::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2VoP::P64;
           P64[Hp] = _s2VoQ::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3996_info" {
     block_c3996_info:
         const _c3996;
         const 0;
         const 4294967326;
         const S2VLN_srt+1216;
 },
 _c399n() //  [R1]
         { []
         }
     {offset
       c399n: // global
           if (R1 & 7 == 1) goto c399v; else goto c399A;
       c399v: // global
           R1 = GHC.List.init2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c399A: // global
           I64[Sp] = block_c399y_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.List.init1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c399n_info" {
     block_c399n_info:
         const _c399n;
         const 0;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c399y() //  [R1]
         { []
         }
     {offset
       c399y: // global
           I64[Sp] = block_c399E_info;
           R3 = R1;
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c399y_info" {
     block_c399y_info:
         const _c399y;
         const 0;
         const 141733920798;
         const S2VLN_srt+1176;
 },
 _c399E() //  [R1]
         { []
         }
     {offset
       c399E: // global
           if (R1 & 7 == 1) goto u399X; else goto c399P;
       u399X: // global
           Sp = Sp + 8;
           call _c399L() args: 0, res: 0, upd: 0;
       c399P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c399S; else goto c399R;
       c399S: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c399R: // global
           _s2VoX::P64 = P64[R1 + 6];
           _s2VoY::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2VoX::P64;
           P64[Hp] = _s2VoY::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c399E_info" {
     block_c399E_info:
         const _c399E;
         const 0;
         const 4294967326;
         const S2VLN_srt+1216;
 },
 _c399L() //  []
         { []
         }
     {offset
       c399L: // global
           R1 = lvl18_r2UqR_closure;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2Vpi_entry() //  [R1]
         { []
         }
     {offset
       c39aj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39aF; else goto c39aG;
       c39aF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39aG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c39ag_info;
           _s2Voz::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s2Voz::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u39aO; else goto c39ah;
       u39aO: // global
           call _c39ag(R1) args: 0, res: 0, upd: 0;
       c39ah: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vpi_info" {
     sat_s2Vpi_info:
         const sat_s2Vpi_entry;
         const 2;
         const 18;
 },
 _c39ag() //  [R1]
         { []
         }
     {offset
       c39ag: // global
           I64[Sp] = block_c39am_info;
           _s2Vp7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2Vp7::I64;
           if (R1 & 7 != 0) goto u39aN; else goto c39an;
       u39aN: // global
           call _c39am(R1) args: 0, res: 0, upd: 0;
       c39an: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39ag_info" {
     block_c39ag_info:
         const _c39ag;
         const 1;
         const 30;
 },
 _c39am() //  [R1]
         { []
         }
     {offset
       c39am: // global
           I64[Sp] = block_c39ar_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u39aP; else goto c39as;
       u39aP: // global
           call _c39ar(R1) args: 0, res: 0, upd: 0;
       c39as: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39am_info" {
     block_c39am_info:
         const _c39am;
         const 65;
         const 30;
 },
 _c39ar() //  [R1]
         { []
         }
     {offset
       c39ar: // global
           _s2Vpe::I64 = I64[Sp + 8] + (I64[R1 + 7] - 1);
           I64[Sp + 8] = block_c39aC_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = _s2Vpe::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39ar_info" {
     block_c39ar_info:
         const _c39ar;
         const 65;
         const 30;
 },
 _c39aC() //  [R1, R2]
         { []
         }
     {offset
       c39aC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39aM; else goto c39aL;
       c39aM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c39aL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39aC_info" {
     block_c39aC_info:
         const _c39aC;
         const 0;
         const 30;
 },
 sat_s2Vpk_entry() //  [R1]
         { []
         }
     {offset
       c39aQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c39aS; else goto c39aT;
       c39aS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39aT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c39a7_info;
           _s2Vo0::P64 = P64[R1 + 16];
           _s2Voz::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s2Vo0::P64;
           P64[Sp - 24] = _s2Voz::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u39aX; else goto c39a8;
       u39aX: // global
           call _c39a7(R1) args: 0, res: 0, upd: 0;
       c39a8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vpk_info" {
     sat_s2Vpk_info:
         const sat_s2Vpk_entry;
         const 3;
         const 15;
 },
 _c39a7() //  [R1]
         { []
         }
     {offset
       c39a7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39aW; else goto c39aV;
       c39aW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39aV: // global
           _s2Vp5::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2Vpi_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl19_r2UqS_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s2Vp5::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39a7_info" {
     block_c39a7_info:
         const _c39a7;
         const 2;
         const 30;
 },
 sat_s2Vpw_entry() //  [R1]
         { []
         }
     {offset
       c39bn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c39bo; else goto c39bp;
       c39bo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39bp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c39bl_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call dec'_s2Vot_entry(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vpw_info" {
     sat_s2Vpw_info:
         const sat_s2Vpw_entry;
         const 1;
         const 1103806595088;
         const S2VLN_srt+1160;
 },
 _c39bl() //  [R1]
         { []
         }
     {offset
       c39bl: // global
           _s2Vpu::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _s2Vpu::I64)) goto c39bw; else goto c39bx;
       c39bw: // global
           R1 = lvl34_r2Ur8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c39bx: // global
           R2 = _s2Vpu::I64;
           Sp = Sp + 8;
           call $wxs1_r2Ura_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39bl_info" {
     block_c39bl_info:
         const _c39bl;
         const 0;
         const 1103806595102;
         const S2VLN_srt+1160;
 },
 sat_s2VpE_entry() //  [R1]
         { []
         }
     {offset
       c39bR: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VpE_info" {
     sat_s2VpE_info:
         const sat_s2VpE_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1176;
 },
 n1_s2VpH_entry() //  [R1]
         { []
         }
     {offset
       c39ca: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39cb; else goto c39cc;
       c39cb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39cc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n1_s2VpH_info" {
     n1_s2VpH_info:
         const n1_s2VpH_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1176;
 },
 sat_s2VpN_entry() //  [R1]
         { []
         }
     {offset
       c39cr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39cs; else goto c39ct;
       c39cs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39ct: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s2VpJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VpN_info" {
     sat_s2VpN_info:
         const sat_s2VpN_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s2VpJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c39cx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39cB; else goto c39cA;
       c39cB: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c39cA: // global
           if (R2 == 1) goto c39cw; else goto c39cv;
       c39cw: // global
           _s2VpI::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s2VpI::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39cv: // global
           I64[Hp - 48] = sat_s2VpN_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s2VpJ_info" {
     $wxs4_s2VpJ_info:
         const $wxs4_s2VpJ_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s2VpO_entry() //  [R1]
         { []
         }
     {offset
       c39cD: // global
           _s2VpO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c39cE; else goto c39cF;
       c39cF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c39cH; else goto c39cG;
       c39cH: // global
           HpAlloc = 64;
           goto c39cE;
       c39cE: // global
           R1 = _s2VpO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39cG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2VpO::P64;
           _s2VnZ::P64 = P64[_s2VpO::P64 + 16];
           _s2VpF::I64 = -I64[_s2VpO::P64 + 24];
           if (%MO_S_Ge_W64(0, _s2VpF::I64)) goto c39cJ; else goto c39cK;
       c39cJ: // global
           Hp = Hp - 64;
           R3 = _s2VnZ::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
       c39cK: // global
           I64[Hp - 56] = n1_s2VpH_info;
           P64[Hp - 40] = _s2VnZ::P64;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = lvl20_r2UqT_closure+1;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = $wxs4_s2VpJ_info;
           P64[Hp] = Hp - 30;
           R2 = _s2VpF::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call $wxs4_s2VpJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VpO_info" {
     sat_s2VpO_info:
         const sat_s2VpO_entry;
         const 4294967297;
         const 4294967315;
         const S2VLN_srt+1176;
 },
 sat_s2VpZ_entry() //  [R1]
         { []
         }
     {offset
       c39dc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39dd; else goto c39de;
       c39dd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39de: // global
           I64[Sp - 8] = block_c39d9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39dn; else goto c39da;
       u39dn: // global
           call _c39d9(R1) args: 0, res: 0, upd: 0;
       c39da: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VpZ_info" {
     sat_s2VpZ_info:
         const sat_s2VpZ_entry;
         const 1;
         const 16;
 },
 _c39d9() //  [R1]
         { []
         }
     {offset
       c39d9: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c39dl; else goto c39dm;
       c39dl: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39dm: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39d9_info" {
     block_c39d9_info:
         const _c39d9;
         const 0;
         const 30;
 },
 sat_s2Vq8_entry() //  [R1]
         { []
         }
     {offset
       c39dD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39dE; else goto c39dF;
       c39dE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39dF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s2Vq4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vq8_info" {
     sat_s2Vq8_info:
         const sat_s2Vq8_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s2Vq4_entry() //  [R1, R2]
         { []
         }
     {offset
       c39dJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39dN; else goto c39dM;
       c39dN: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c39dM: // global
           if (R2 == 1) goto c39dI; else goto c39dH;
       c39dI: // global
           _s2Vq3::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s2Vq3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39dH: // global
           I64[Hp - 48] = sat_s2Vq8_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s2Vq4_info" {
     $wxs4_s2Vq4_info:
         const $wxs4_s2Vq4_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s2Vqc_entry() //  [R1]
         { []
         }
     {offset
       c39e0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39e1; else goto c39e2;
       c39e1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39e2: // global
           I64[Sp - 8] = block_c39dX_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39eb; else goto c39dY;
       u39eb: // global
           call _c39dX(R1) args: 0, res: 0, upd: 0;
       c39dY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vqc_info" {
     sat_s2Vqc_info:
         const sat_s2Vqc_entry;
         const 1;
         const 16;
 },
 _c39dX() //  [R1]
         { []
         }
     {offset
       c39dX: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c39e9; else goto c39ea;
       c39e9: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39ea: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39dX_info" {
     block_c39dX_info:
         const _c39dX;
         const 0;
         const 30;
 },
 ds4_s2VpT_entry() //  [R1]
         { []
         }
     {offset
       c39ec: // global
           _s2VpT::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c39ed; else goto c39ee;
       c39ee: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c39eg; else goto c39ef;
       c39eg: // global
           HpAlloc = 40;
           goto c39ed;
       c39ed: // global
           R1 = _s2VpT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39ef: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2VpT::P64;
           _s2VnZ::P64 = P64[_s2VpT::P64 + 16];
           _s2VpP::P64 = P64[_s2VpT::P64 + 24];
           _s2VpU::I64 = -I64[_s2VpT::P64 + 32];
           if (%MO_S_Ge_W64(0, _s2VpU::I64)) goto c39ej; else goto c39en;
       c39ej: // global
           I64[Hp - 32] = sat_s2VpZ_info;
           P64[Hp - 16] = _s2VpP::P64;
           _c39d5::P64 = Hp - 32;
           Hp = Hp - 16;
           I64[Sp - 24] = block_c39eh_info;
           R4 = _s2VnZ::P64;
           R3 = _c39d5::P64;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
       c39en: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = _s2VnZ::P64;
           I64[Hp - 8] = $wxs4_s2Vq4_info;
           P64[Hp] = Hp - 30;
           I64[Sp - 32] = block_c39dP_info;
           R2 = _s2VpU::I64;
           R1 = Hp - 7;
           P64[Sp - 24] = _s2VpP::P64;
           Sp = Sp - 32;
           call $wxs4_s2Vq4_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_s2VpT_info" {
     ds4_s2VpT_info:
         const ds4_s2VpT_entry;
         const 4294967298;
         const 12884901903;
         const S2VLN_srt+1192;
 },
 _c39eh() //  [R1, R2]
         { []
         }
     {offset
       c39eh: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39eh_info" {
     block_c39eh_info:
         const _c39eh;
         const 0;
         const 4294967326;
         const S2VLN_srt+1192;
 },
 _c39dP() //  [R1]
         { []
         }
     {offset
       c39dP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39eq; else goto c39ep;
       c39eq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39ep: // global
           I64[Hp - 16] = sat_s2Vqc_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c39em_info;
           R4 = R1;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39dP_info" {
     block_c39dP_info:
         const _c39dP;
         const 1;
         const 12884901918;
         const S2VLN_srt+1192;
 },
 _c39em() //  [R1, R2]
         { []
         }
     {offset
       c39em: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39em_info" {
     block_c39em_info:
         const _c39em;
         const 0;
         const 4294967326;
         const S2VLN_srt+1192;
 },
 sat_s2Vqs_entry() //  [R1]
         { []
         }
     {offset
       c39eA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39eB; else goto c39eC;
       c39eB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39eC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c39ex_info;
           _s2VnK::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s2VnK::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u39fa; else goto c39ey;
       u39fa: // global
           call _c39ex(R1) args: 0, res: 0, upd: 0;
       c39ey: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vqs_info" {
     sat_s2Vqs_info:
         const sat_s2Vqs_entry;
         const 2;
         const 18;
 },
 _c39ex() //  [R1]
         { []
         }
     {offset
       c39ex: // global
           I64[Sp] = block_c39eF_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u39f9; else goto c39eH;
       u39f9: // global
           call _c39eF(R1) args: 0, res: 0, upd: 0;
       c39eH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39ex_info" {
     block_c39ex_info:
         const _c39ex;
         const 1;
         const 30;
 },
 _c39eF() //  [R1]
         { []
         }
     {offset
       c39eF: // global
           if (R1 & 7 == 1) goto c39eO; else goto c39f3;
       c39eO: // global
           _s2VnK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39eL_info;
           R1 = _s2VnK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39fb; else goto c39eP;
       u39fb: // global
           call _c39eL(R1) args: 0, res: 0, upd: 0;
       c39eP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c39f3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39f6; else goto c39f5;
       c39f6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39f5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39eF_info" {
     block_c39eF_info:
         const _c39eF;
         const 1;
         const 30;
 },
 _c39eL() //  [R1]
         { []
         }
     {offset
       c39eL: // global
           if (R1 & 7 == 1) goto c39eV; else goto c39eZ;
       c39eV: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c39eZ: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39eL_info" {
     block_c39eL_info:
         const _c39eL;
         const 0;
         const 30;
 },
 sat_s2Vqx_entry() //  [R1]
         { []
         }
     {offset
       c39fk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c39fl; else goto c39fm;
       c39fl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39fm: // global
           I64[Sp - 24] = block_c39fh_info;
           _s2VpQ::P64 = P64[R1 + 24];
           _s2VpR::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _s2VpQ::P64;
           I64[Sp - 8] = _s2VpR::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u39fC; else goto c39fi;
       u39fC: // global
           call _c39fh(R1) args: 0, res: 0, upd: 0;
       c39fi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vqx_info" {
     sat_s2Vqx_info:
         const sat_s2Vqx_entry;
         const 4294967298;
         const 15;
 },
 _c39fh() //  [R1]
         { []
         }
     {offset
       c39fh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c39fr; else goto c39fq;
       c39fr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39fq: // global
           _s2Vqu::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2Vqu::I64, 0)) goto c39fA; else goto c39fB;
       c39fA: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vqu::I64 + I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39fB: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39fh_info" {
     block_c39fh_info:
         const _c39fh;
         const 130;
         const 30;
 },
 sat_s2VqP_entry() //  [R1]
         { []
         }
     {offset
       c39gd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39ge; else goto c39gf;
       c39ge: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39gf: // global
           I64[Sp - 16] = block_c39g6_info;
           _s2VnK::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s2VnK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u39gD; else goto c39g7;
       u39gD: // global
           call _c39g6(R1) args: 0, res: 0, upd: 0;
       c39g7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VqP_info" {
     sat_s2VqP_info:
         const sat_s2VqP_entry;
         const 2;
         const 18;
 },
 _c39g6() //  [R1]
         { []
         }
     {offset
       c39g6: // global
           if (R1 & 7 == 1) goto c39ga; else goto c39gb;
       c39ga: // global
           _s2VnK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39gi_info;
           R1 = _s2VnK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39gC; else goto c39gk;
       u39gC: // global
           call _c39gi(R1) args: 0, res: 0, upd: 0;
       c39gk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39gb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39gA; else goto c39gz;
       c39gA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39gz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39g6_info" {
     block_c39g6_info:
         const _c39g6;
         const 1;
         const 30;
 },
 _c39gi() //  [R1]
         { []
         }
     {offset
       c39gi: // global
           if (R1 & 7 == 1) goto c39gq; else goto c39gu;
       c39gq: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39gu: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39gi_info" {
     block_c39gi_info:
         const _c39gi;
         const 0;
         const 30;
 },
 sat_s2VqW_entry() //  [R1]
         { []
         }
     {offset
       c39gR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39gS; else goto c39gT;
       c39gS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39gT: // global
           I64[Sp - 16] = block_c39gK_info;
           _s2VnK::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s2VnK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u39hh; else goto c39gL;
       u39hh: // global
           call _c39gK(R1) args: 0, res: 0, upd: 0;
       c39gL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VqW_info" {
     sat_s2VqW_info:
         const sat_s2VqW_entry;
         const 2;
         const 18;
 },
 _c39gK() //  [R1]
         { []
         }
     {offset
       c39gK: // global
           if (R1 & 7 == 1) goto c39gO; else goto c39gP;
       c39gO: // global
           _s2VnK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39gW_info;
           R1 = _s2VnK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39hg; else goto c39gY;
       u39hg: // global
           call _c39gW(R1) args: 0, res: 0, upd: 0;
       c39gY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39gP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39he; else goto c39hd;
       c39he: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39hd: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39gK_info" {
     block_c39gK_info:
         const _c39gK;
         const 1;
         const 30;
 },
 _c39gW() //  [R1]
         { []
         }
     {offset
       c39gW: // global
           if (R1 & 7 == 1) goto c39h4; else goto c39h8;
       c39h4: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39h8: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39gW_info" {
     block_c39gW_info:
         const _c39gW;
         const 0;
         const 30;
 },
 sat_s2Vr1_entry() //  [R1]
         { []
         }
     {offset
       c39ht: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39hu; else goto c39hv;
       c39hu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39hv: // global
           I64[Sp - 16] = block_c39hn_info;
           R3 = P64[R1 + 24];
           R2 = GHC.Show.intToDigit_closure+1;
           P64[Sp - 8] = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vr1_info" {
     sat_s2Vr1_info:
         const sat_s2Vr1_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+1176;
 },
 _c39hn() //  [R1]
         { []
         }
     {offset
       c39hn: // global
           if (R1 & 7 == 1) goto c39hq; else goto c39hr;
       c39hq: // global
           _s2VnK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39hy_info;
           R1 = _s2VnK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39hS; else goto c39hA;
       u39hS: // global
           call _c39hy(R1) args: 0, res: 0, upd: 0;
       c39hA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39hr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39hQ; else goto c39hP;
       c39hQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39hP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39hn_info" {
     block_c39hn_info:
         const _c39hn;
         const 1;
         const 30;
 },
 _c39hy() //  [R1]
         { []
         }
     {offset
       c39hy: // global
           if (R1 & 7 == 1) goto c39hG; else goto c39hK;
       c39hG: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39hK: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39hy_info" {
     block_c39hy_info:
         const _c39hy;
         const 0;
         const 30;
 },
 $wdoFmt_s2VnX_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c39hY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c39hZ; else goto u39kl;
       c39hZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u39kl: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c396u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wdoFmt_s2VnX_info" {
     $wdoFmt_s2VnX_info:
         const $wdoFmt_s2VnX_entry;
         const 2;
         const 35008278429707;
         const 12884901911;
         const S2VLN_srt+1144;
 },
 _c396u() //  []
         { []
         }
     {offset
       c396u: // global
           I64[Sp - 16] = block_c396x_info;
           R1 = P64[Sp + 8];
           _s2VnX::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s2VnX::P64 + 13];
           P64[Sp + 8] = P64[_s2VnX::P64 + 5];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u39kq; else goto c396y;
       u39kq: // global
           call _c396x(R1) args: 0, res: 0, upd: 0;
       c396y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c396x() //  [R1]
         { []
         }
     {offset
       c396x: // global
           _c39hX::P64 = R1 & 7;
           if (_c39hX::P64 < 3) goto u39kk; else goto c39hW;
       u39kk: // global
           _s2VnJ::P64 = P64[Sp + 24];
           if (_c39hX::P64 < 2) goto c39hU; else goto c39hV;
       c39hU: // global
           I64[Sp + 24] = block_c396C_info;
           R1 = _s2VnJ::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u39kr; else goto c396D;
       u39kr: // global
           call _c396C(R1) args: 0, res: 0, upd: 0;
       c396D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39hV: // global
           I64[Sp] = block_c39bA_info;
           R1 = _s2VnJ::P64;
           if (R1 & 7 != 0) goto u39ks; else goto c39bB;
       u39ks: // global
           call _c39bA(R1) args: 0, res: 0, upd: 0;
       c39bB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39hW: // global
           I64[Sp + 8] = block_c39jU_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39kt; else goto c39jW;
       u39kt: // global
           call _c39jU(R1) args: 0, res: 0, upd: 0;
       c39jW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c396x_info" {
     block_c396x_info:
         const _c396x;
         const 5;
         const 35008278429726;
         const S2VLN_srt+1144;
 },
 _c396C() //  [R1]
         { []
         }
     {offset
       c396C: // global
           _s2VnZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c39i4; else goto c39iJ;
       c39i4: // global
           I64[Sp + 8] = block_c396H_info;
           R3 = _s2VnZ::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c39iJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39iM; else goto c39iL;
       c39iM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39iL: // global
           _s2Vos::P64 = P64[R1 + 6];
           I64[Hp - 16] = dec'_s2Vot_info;
           P64[Hp] = _s2Vos::P64;
           I64[Sp - 8] = block_c39aY_info;
           R1 = _s2VnZ::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39ku; else goto c39aZ;
       u39ku: // global
           call _c39aY(R1) args: 0, res: 0, upd: 0;
       c39aZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c396C_info" {
     block_c396C_info:
         const _c396C;
         const 2;
         const 8680128905246;
         const S2VLN_srt+1160;
 },
 _c396H() //  [R1]
         { []
         }
     {offset
       c396H: // global
           if (R1 & 7 == 1) goto c39i8; else goto c39ia;
       c39i8: // global
           R1 = lvl13_r2UqM_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39ia: // global
           I64[Sp - 8] = block_c396M_info;
           _s2Vo5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2Vo5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39kv; else goto c396N;
       u39kv: // global
           call _c396M(R1) args: 0, res: 0, upd: 0;
       c396N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c396H_info" {
     block_c396H_info:
         const _c396H;
         const 1;
         const 12884901918;
         const S2VLN_srt+1232;
 },
 _c396M() //  [R1]
         { []
         }
     {offset
       c396M: // global
           if (I64[R1 + 7] == 48) goto c39ix; else goto u39kn;
       c39ix: // global
           I64[Sp - 8] = block_c39iw_info;
           _s2Vo6::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s2Vo6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39kw; else goto c39iy;
       u39kw: // global
           call _c39iw(R1) args: 0, res: 0, upd: 0;
       c39iy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u39kn: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c396U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c396M_info" {
     block_c396M_info:
         const _c396M;
         const 2;
         const 4294967326;
         const S2VLN_srt+1240;
 },
 _c39iw() //  [R1]
         { []
         }
     {offset
       c39iw: // global
           if (R1 & 7 == 1) goto c39iE; else goto u39kJ;
       c39iE: // global
           R1 = lvl16_r2UqP_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u39kJ: // global
           call _c396U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39iw_info" {
     block_c39iw_info:
         const _c39iw;
         const 3;
         const 4294967326;
         const S2VLN_srt+1240;
 },
 _c396U() //  []
         { []
         }
     {offset
       c396U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39ie; else goto c39id;
       c39ie: // global
           HpAlloc = 24;
           I64[Sp] = block_c396U_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c39id: // global
           I64[Hp - 16] = show_e'_s2Voa_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c397j_info;
           R1 = P64[Sp + 16];
           P64[Sp + 24] = Hp - 16;
           if (R1 & 7 != 0) goto u39ky; else goto c397k;
       u39ky: // global
           call _c397j(R1) args: 0, res: 0, upd: 0;
       c397k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c396U_info" {
     block_c396U_info:
         const _c396U;
         const 3;
         const 30;
 },
 _c397j() //  [R1]
         { []
         }
     {offset
       c397j: // global
           _c396W::P64 = P64[Sp + 24];
           _s2Vo6::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c39ih; else goto c39in;
       c39ih: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c39ik; else goto c39ij;
       c39ik: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39ij: // global
           I64[Hp - 40] = sat_s2Voi_info;
           P64[Hp - 24] = _c396W::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vo6::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39in: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c39iq; else goto c39ip;
       c39iq: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39ip: // global
           I64[Hp - 72] = sat_s2Vom_info;
           P64[Hp - 56] = _c396W::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2Vo6::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c397j_info" {
     block_c397j_info:
         const _c397j;
         const 131;
         const 30;
 },
 _c39aY() //  [R1]
         { []
         }
     {offset
       c39aY: // global
           if (R1 & 7 == 1) goto u39kz; else goto c39iY;
       u39kz: // global
           call _c398b() args: 0, res: 0, upd: 0;
       c39iY: // global
           I64[Sp - 8] = block_c39b4_info;
           _s2Vpo::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2Vpo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39kA; else goto c39b5;
       u39kA: // global
           call _c39b4(R1) args: 0, res: 0, upd: 0;
       c39b5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39aY_info" {
     block_c39aY_info:
         const _c39aY;
         const 3;
         const 2083059138590;
         const S2VLN_srt+1160;
 },
 _c39b4() //  [R1]
         { []
         }
     {offset
       c39b4: // global
           if (I64[R1 + 7] == 0) goto c39j2; else goto u39km;
       c39j2: // global
           _s2Vpo::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39bc_info;
           R1 = _s2Vpo::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39kB; else goto c39bd;
       u39kB: // global
           call _c39bc(R1) args: 0, res: 0, upd: 0;
       c39bd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u39km: // global
           Sp = Sp + 8;
           call _c398b() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39b4_info" {
     block_c39b4_info:
         const _c39b4;
         const 4;
         const 2083059138590;
         const S2VLN_srt+1160;
 },
 _c39bc() //  [R1]
         { []
         }
     {offset
       c39bc: // global
           if (R1 & 7 == 1) goto c39j6; else goto u39kD;
       c39j6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c39j9; else goto c39j8;
       c39j9: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39j8: // global
           I64[Hp - 64] = sat_s2Vpw_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u39kD: // global
           call _c398b() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39bc_info" {
     block_c39bc_info:
         const _c39bc;
         const 3;
         const 2083059138590;
         const S2VLN_srt+1160;
 },
 _c398b() //  []
         { []
         }
     {offset
       c398b: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c39iS; else goto c39iR;
       c39iS: // global
           HpAlloc = 168;
           I64[Sp] = block_c398b_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c39iR: // global
           I64[Hp - 160] = ds5_s2Voz_info;
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 8];
           I64[Hp - 128] = ds6_s2VoH_info;
           _c398d::P64 = Hp - 160;
           P64[Hp - 112] = _c398d::P64;
           I64[Hp - 104] = sat_s2Vpk_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = _c398d::P64;
           _c398K::P64 = Hp - 128;
           P64[Hp - 72] = _c398K::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = lvl14_r2UqN_closure+1;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c398K::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c398b_info" {
     block_c398b_info:
         const _c398b;
         const 3;
         const 244813135902;
         const S2VLN_srt+1176;
 },
 _c39bA() //  [R1]
         { []
         }
     {offset
       c39bA: // global
           _s2Vo0::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c39jh; else goto c39jp;
       c39jh: // global
           I64[Sp + 24] = block_c39bF_info;
           R1 = _s2Vo0::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u39kE; else goto c39bG;
       u39kE: // global
           call _c39bF(R1) args: 0, res: 0, upd: 0;
       c39bG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39jp: // global
           I64[Sp] = block_c39cN_info;
           _s2VpP::P64 = P64[R1 + 6];
           R1 = _s2Vo0::P64;
           P64[Sp + 40] = _s2VpP::P64;
           if (R1 & 7 != 0) goto u39kF; else goto c39cO;
       u39kF: // global
           call _c39cN(R1) args: 0, res: 0, upd: 0;
       c39cO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39bA_info" {
     block_c39bA_info:
         const _c39bA;
         const 389;
         const 906238099486;
         const S2VLN_srt+1144;
 },
 _c39bF() //  [R1]
         { []
         }
     {offset
       c39bF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c39jk; else goto c39jj;
       c39jk: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39jj: // global
           _s2VnZ::P64 = P64[Sp + 8];
           _s2VpC::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2VpC::I64, 0)) goto c39jm; else goto c39jn;
       c39jm: // global
           I64[Hp - 24] = sat_s2VpE_info;
           P64[Hp - 8] = _s2VnZ::P64;
           _c39bN::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _c39bN::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s2VpC::I64;
           Sp = Sp + 24;
           call $wf_r2UqX_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c39jn: // global
           I64[Hp - 24] = sat_s2VpO_info;
           P64[Hp - 8] = _s2VnZ::P64;
           I64[Hp] = _s2VpC::I64;
           R3 = Hp - 24;
           R2 = lvl36_r2Urb_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39bF_info" {
     block_c39bF_info:
         const _c39bF;
         const 130;
         const 38654705694;
         const S2VLN_srt+1152;
 },
 _c39cN() //  [R1]
         { []
         }
     {offset
       c39cN: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c39js; else goto c39jr;
       c39js: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39jr: // global
           _s2VnZ::P64 = P64[Sp + 32];
           _s2VpP::P64 = P64[Sp + 40];
           _s2VpR::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2VpR::I64, 0)) goto c39jw; else goto c39jx;
       c39jw: // global
           I64[Hp - 112] = ds4_s2VpT_info;
           P64[Hp - 96] = _s2VnZ::P64;
           P64[Hp - 88] = _s2VpP::P64;
           I64[Hp - 80] = _s2VpR::I64;
           I64[Hp - 72] = sat_s2Vqs_info;
           P64[Hp - 56] = P64[Sp + 8];
           _c39cV::P64 = Hp - 112;
           P64[Hp - 48] = _c39cV::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c39cV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39jx: // global
           I64[Hp - 112] = sat_s2Vqx_info;
           P64[Hp - 96] = _s2VpP::P64;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = _s2VpR::I64;
           _c39fd::P64 = Hp - 112;
           Hp = Hp - 80;
           I64[Sp] = block_c39fD_info;
           R4 = _s2VnZ::P64;
           R3 = _c39fd::P64;
           R2 = base_r2UqK_closure+1;
           I64[Sp + 40] = _s2VpR::I64;
           call GHC.Float.$wroundTo_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39cN_info" {
     block_c39cN_info:
         const _c39cN;
         const 389;
         const 897648164894;
         const S2VLN_srt+1144;
 },
 _c39fD() //  [R1, R2]
         { []
         }
     {offset
       c39fD: // global
           I64[Sp] = block_c39fF_info;
           R1 = R1;
           P64[Sp + 32] = R2;
           if (R1 & 7 != 0) goto u39kG; else goto c39fG;
       u39kG: // global
           call _c39fF(R1) args: 0, res: 0, upd: 0;
       c39fG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39fD_info" {
     block_c39fD_info:
         const _c39fD;
         const 1925;
         const 73014444062;
         const S2VLN_srt+1144;
 },
 _c39fF() //  [R1]
         { []
         }
     {offset
       c39fF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c39jB; else goto c39jA;
       c39jB: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39jA: // global
           _s2VqA::P64 = P64[Sp + 32];
           _s2VqD::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2VqD::I64, 0)) goto c39jD; else goto c39jR;
       c39jD: // global
           Hp = Hp - 32;
           I64[Sp] = block_c39fQ_info;
           R3 = _s2VqA::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           I64[Sp + 40] = _s2VqD::I64;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c39jR: // global
           I64[Hp - 24] = sat_s2Vr1_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s2VqA::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39fF_info" {
     block_c39fF_info:
         const _c39fF;
         const 1413;
         const 73014444062;
         const S2VLN_srt+1144;
 },
 _c39fQ() //  [R1]
         { []
         }
     {offset
       c39fQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c39jG; else goto c39jF;
       c39jG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39jF: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40];
           I64[Sp] = block_c39fV_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.List.$wsplitAt'_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39fQ_info" {
     block_c39fQ_info:
         const _c39fQ;
         const 1925;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c39fV() //  [R1, R2]
         { []
         }
     {offset
       c39fV: // global
           I64[Sp] = block_c39fX_info;
           R1 = R1;
           P64[Sp + 40] = R2;
           if (R1 & 7 != 0) goto u39kH; else goto c39fY;
       u39kH: // global
           call _c39fX(R1) args: 0, res: 0, upd: 0;
       c39fY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39fV_info" {
     block_c39fV_info:
         const _c39fV;
         const 1925;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c39fX() //  [R1]
         { []
         }
     {offset
       c39fX: // global
           _s2VnK::P64 = P64[Sp + 8];
           _s2VqJ::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c39jJ; else goto c39jN;
       c39jJ: // global
           Hp = Hp + 32;
           _s2VqK::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c39jQ; else goto c39jL;
       c39jL: // global
           I64[Hp - 24] = sat_s2VqP_info;
           P64[Hp - 8] = _s2VnK::P64;
           P64[Hp] = _s2VqJ::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c39jN: // global
           Hp = Hp + 32;
           _s2VqK::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c39jQ; else goto c39jP;
       c39jQ: // global
           HpAlloc = 32;
           R1 = _s2VqK::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39jP: // global
           I64[Hp - 24] = sat_s2VqW_info;
           P64[Hp - 8] = _s2VnK::P64;
           P64[Hp] = _s2VqJ::P64;
           R3 = Hp - 24;
           R2 = _s2VqK::P64;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39fX_info" {
     block_c39fX_info:
         const _c39fX;
         const 901;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c39jU() //  [R1]
         { []
         }
     {offset
       c39jU: // global
           _s2VnZ::P64 = P64[Sp + 24];
           _s2Vr2::P64 = R1;
           _s2Vr3::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2Vr3::I64, 0)) goto c39kb; else goto c39ka;
       c39ka: // global
           if (%MO_S_Gt_W64(_s2Vr3::I64, 7)) goto c39kb; else goto c39k7;
       c39kb: // global
           P64[Sp + 16] = GHC.Float.FFExponent_closure+1;
           P64[Sp + 24] = _s2VnZ::P64;
           P64[Sp + 32] = _s2Vr2::P64;
           Sp = Sp + 8;
           goto u39kL;
       c39k7: // global
           P64[Sp + 16] = GHC.Float.FFFixed_closure+2;
           P64[Sp + 24] = _s2VnZ::P64;
           P64[Sp + 32] = _s2Vr2::P64;
           Sp = Sp + 8;
           goto u39kL;
       u39kL: // global
           call _c396u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39jU_info" {
     block_c39jU_info:
         const _c39jU;
         const 644;
         const 35008278429726;
         const S2VLN_srt+1144;
 },
 section ""relreadonly" . u39lJ_srtd" {
     u39lJ_srtd:
         const S2VLN_srt+752;
         const 62;
         const 4588606169848741889;
 },
 sat_s2Vrb_entry() //  [R1]
         { []
         }
     {offset
       c39kX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c39l0; else goto c39l1;
       c39l0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39l1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c39kZ_info;
           F1 = %MO_F_Neg_W32(F32[R1 + 32]);
           R2 = GHC.Float.expts4_closure;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.$w$sfloatToDigits1_entry(F1,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vrb_info" {
     sat_s2Vrb_info:
         const sat_s2Vrb_entry;
         const 4294967298;
         const 18446744069414584335;
         const u39lJ_srtd;
 },
 _c39kZ() //  [R1, R2]
         { []
         }
     {offset
       c39kZ: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wdoFmt_s2VnX_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39kZ_info" {
     block_c39kZ_info:
         const _c39kZ;
         const 2;
         const 35008278429726;
         const S2VLN_srt+1144;
 },
 section ""relreadonly" . u39lK_srtd" {
     u39lK_srtd:
         const S2VLN_srt+752;
         const 66;
         const 18423664225130905601;
         const 3;
 },
 GHC.Float.$w$sformatRealFloatAlt1_entry() //  [R2, R3, R4, F1]
         { []
         }
     {offset
       c39l7: // global
           _s2VnL::F32 = F1;
           _s2VnK::P64 = R4;
           _s2VnJ::P64 = R3;
           _s2VnI::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c39l8; else goto c39l9;
       c39l9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39lb; else goto c39la;
       c39lb: // global
           HpAlloc = 24;
           goto c39l8;
       c39l8: // global
           R1 = GHC.Float.$w$sformatRealFloatAlt1_closure;
           P64[Sp - 32] = _s2VnI::P64;
           P64[Sp - 24] = _s2VnJ::P64;
           P64[Sp - 16] = _s2VnK::P64;
           F32[Sp - 8] = _s2VnL::F32;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c39la: // global
           (_s2VnP::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNaN(_s2VnL::F32);
           if (_s2VnP::I64 == 0) goto c39l6; else goto c39l5;
       c39l6: // global
           (_s2VnU::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(_s2VnL::F32);
           if (_s2VnU::I64 == 0) goto c39lE; else goto c39li;
       c39lE: // global
           I64[Hp - 16] = $wdoFmt_s2VnX_info;
           P64[Hp - 8] = _s2VnJ::P64;
           P64[Hp] = _s2VnK::P64;
           _c396s::P64 = Hp - 13;
           if (%MO_F_Lt_W32(_s2VnL::F32,
                            0.0 :: W32)) goto u39lF; else goto c39lC;
       u39lF: // global
           P64[Sp - 24] = _c396s::P64;
           P64[Sp - 16] = _s2VnI::P64;
           F32[Sp - 8] = _s2VnL::F32;
           Sp = Sp - 32;
           goto u39lI;
       c39lC: // global
           (_s2Vrg::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(_s2VnL::F32);
           if (_s2Vrg::I64 == 0) goto c39ly; else goto u39lG;
       c39ly: // global
           I64[Sp - 24] = block_c39lx_info;
           F1 = _s2VnL::F32;
           R2 = GHC.Float.expts4_closure;
           P64[Sp - 16] = _c396s::P64;
           P64[Sp - 8] = _s2VnI::P64;
           Sp = Sp - 24;
           call GHC.Float.$w$sfloatToDigits1_entry(F1,
                                                   R2) args: 8, res: 8, upd: 8;
       u39lG: // global
           P64[Sp - 24] = _c396s::P64;
           P64[Sp - 16] = _s2VnI::P64;
           F32[Sp - 8] = _s2VnL::F32;
           Sp = Sp - 32;
           goto u39lI;
       u39lI: // global
           call _c39kP() args: 0, res: 0, upd: 0;
       c39li: // global
           if (%MO_F_Lt_W32(_s2VnL::F32,
                            0.0 :: W32)) goto c39lg; else goto c39lf;
       c39lg: // global
           Hp = Hp - 24;
           R1 = lvl29_r2Ur3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39lf: // global
           Hp = Hp - 24;
           R1 = lvl27_r2Ur1_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39l5: // global
           Hp = Hp - 24;
           R1 = lvl31_r2Ur5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sformatRealFloatAlt1_info" {
     GHC.Float.$w$sformatRealFloatAlt1_info:
         const GHC.Float.$w$sformatRealFloatAlt1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869184;
         const u39lK_srtd;
         const 516;
         const GHC.Float.$w$sformatRealFloatAlt1_slow;
 },
 _c39lx() //  [R1, R2]
         { []
         }
     {offset
       c39lx: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wdoFmt_s2VnX_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39lx_info" {
     block_c39lx_info:
         const _c39lx;
         const 2;
         const 35008278429726;
         const S2VLN_srt+1144;
 },
 section ""relreadonly" . u39lL_srtd" {
     u39lL_srtd:
         const S2VLN_srt+752;
         const 62;
         const 4588606169848741889;
 },
 _c39kP() //  []
         { []
         }
     {offset
       c39kP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c39lm; else goto c39ll;
       c39lm: // global
           HpAlloc = 64;
           I64[Sp] = block_c39kP_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c39ll: // global
           I64[Hp - 56] = sat_s2Vrb_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           F32[Hp - 24] = F32[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39kP_info" {
     block_c39kP_info:
         const _c39kP;
         const 259;
         const 18446744069414584350;
         const u39lL_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.271812414 UTC

[section ""data" . GHC.Float.$fShowFloat_$sformatRealFloatAlt_closure" {
     GHC.Float.$fShowFloat_$sformatRealFloatAlt_closure:
         const GHC.Float.$fShowFloat_$sformatRealFloatAlt_info;
         const 0;
 },
 GHC.Float.$fShowFloat_$sformatRealFloatAlt_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       c39tm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39tn; else goto c39to;
       c39tn: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowFloat_$sformatRealFloatAlt_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c39to: // global
           I64[Sp - 32] = block_c39tj_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u39ts; else goto c39tk;
       u39ts: // global
           call _c39tj(R1) args: 0, res: 0, upd: 0;
       c39tk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$sformatRealFloatAlt_info" {
     GHC.Float.$fShowFloat_$sformatRealFloatAlt_info:
         const GHC.Float.$fShowFloat_$sformatRealFloatAlt_entry;
         const 0;
         const 73014444046;
         const 17179869208;
         const S2VLN_srt+1248;
 },
 _c39tj() //  [R1]
         { []
         }
     {offset
       c39tj: // global
           F1 = F32[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39tj_info" {
     block_c39tj_info:
         const _c39tj;
         const 3;
         const 4294967326;
         const S2VLN_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.278409241 UTC

[section ""data" . $wxs2_r2Ure_closure" {
     $wxs2_r2Ure_closure:
         const $wxs2_r2Ure_info;
         const 0;
 },
 sat_s2Vru_entry() //  [R1]
         { []
         }
     {offset
       c39tO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39tP; else goto c39tQ;
       c39tP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39tQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs2_r2Ure_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vru_info" {
     sat_s2Vru_info:
         const sat_s2Vru_entry;
         const 4294967296;
         const 4294967313;
         const S2VLN_srt+1288;
 },
 $wxs2_r2Ure_entry() //  [R2]
         { []
         }
     {offset
       c39tU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c39tY; else goto c39tX;
       c39tY: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs2_r2Ure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c39tX: // global
           if (R2 == 1) goto c39tT; else goto c39tS;
       c39tT: // global
           Hp = Hp - 48;
           R1 = lvl35_r2Ur9_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39tS: // global
           I64[Hp - 40] = sat_s2Vru_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs2_r2Ure_info" {
     $wxs2_r2Ure_info:
         const $wxs2_r2Ure_entry;
         const 0;
         const 140741783322638;
         const 4294967300;
         const S2VLN_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.326671313 UTC

[section ""data" . GHC.Float.$w$sformatRealFloatAlt_closure" {
     GHC.Float.$w$sformatRealFloatAlt_closure:
         const GHC.Float.$w$sformatRealFloatAlt_info;
         const 0;
 },
 GHC.Float.$w$sformatRealFloatAlt_slow() //  [R1]
         { []
         }
     {offset
       c39ud: // global
           D1 = F64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 8, res: 0, upd: 8;
     }
 },
 show_e'_s2VrX_entry() //  [R1]
         { []
         }
     {offset
       c39v2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c39vb; else goto c39vc;
       c39vb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39vc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c39uZ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u39vh; else goto c39v0;
       u39vh: // global
           call _c39uZ(R1) args: 0, res: 0, upd: 0;
       c39v0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . show_e'_s2VrX_info" {
     show_e'_s2VrX_info:
         const show_e'_s2VrX_entry;
         const 1;
         const 16;
 },
 _c39uZ() //  [R1]
         { []
         }
     {offset
       c39uZ: // global
           I64[Sp] = block_c39v8_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7] - 1;
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39uZ_info" {
     block_c39uZ_info:
         const _c39uZ;
         const 0;
         const 30;
 },
 _c39v8() //  [R1, R2]
         { []
         }
     {offset
       c39v8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39vg; else goto c39vf;
       c39vg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c39vf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39v8_info" {
     block_c39v8_info:
         const _c39v8;
         const 0;
         const 30;
 },
 sat_s2Vs5_entry() //  [R1]
         { []
         }
     {offset
       c39vr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39vs; else goto c39vt;
       c39vs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39vt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl32_r2Ur6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vs5_info" {
     sat_s2Vs5_info:
         const sat_s2Vs5_entry;
         const 1;
         const 16;
 },
 sat_s2Vs8_entry() //  [R1]
         { []
         }
     {offset
       c39vE: // global
           R3 = P64[R1 + 16];
           R2 = lvl33_r2Ur7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vs8_info" {
     sat_s2Vs8_info:
         const sat_s2Vs8_entry;
         const 1;
         const 16;
 },
 sat_s2Vs9_entry() //  [R1]
         { []
         }
     {offset
       c39vH: // global
           _s2Vs9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c39vI; else goto c39vJ;
       c39vJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39vL; else goto c39vK;
       c39vL: // global
           HpAlloc = 24;
           goto c39vI;
       c39vI: // global
           R1 = _s2Vs9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39vK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Vs9::P64;
           _s2VrX::P64 = P64[_s2Vs9::P64 + 16];
           _s2Vs4::P64 = P64[_s2Vs9::P64 + 24];
           I64[Hp - 16] = sat_s2Vs8_info;
           P64[Hp] = _s2VrX::P64;
           R3 = Hp - 16;
           R2 = _s2Vs4::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vs9_info" {
     sat_s2Vs9_info:
         const sat_s2Vs9_entry;
         const 2;
         const 18;
 },
 dec'_s2Vsg_entry() //  [R1]
         { []
         }
     {offset
       c39vV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39vW; else goto c39vX;
       c39vW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39vX: // global
           I64[Sp - 8] = block_c39vS_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39w6; else goto c39vT;
       u39w6: // global
           call _c39vS(R1) args: 0, res: 0, upd: 0;
       c39vT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dec'_s2Vsg_info" {
     dec'_s2Vsg_info:
         const dec'_s2Vsg_entry;
         const 1;
         const 16;
 },
 _c39vS() //  [R1]
         { []
         }
     {offset
       c39vS: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 1)) goto c39w4; else goto c39w5;
       c39w4: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39w5: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39vS_info" {
     block_c39vS_info:
         const _c39vS;
         const 0;
         const 30;
 },
 sat_s2Vsq_entry() //  [R1]
         { []
         }
     {offset
       c39wm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39wt; else goto c39wu;
       c39wt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39wu: // global
           I64[Sp - 8] = block_c39wk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           call dec'_s2Vsg_entry(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vsq_info" {
     sat_s2Vsq_info:
         const sat_s2Vsq_entry;
         const 1;
         const 16;
 },
 _c39wk() //  [R1]
         { []
         }
     {offset
       c39wk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c39wx; else goto c39ww;
       c39wx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39ww: // global
           _s2Vsp::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vsp::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39wk_info" {
     block_c39wk_info:
         const _c39wk;
         const 0;
         const 30;
 },
 ds5_s2Vsm_entry() //  [R1]
         { []
         }
     {offset
       c39wB: // global
           _s2Vsm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c39wC; else goto c39wD;
       c39wD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39wF; else goto c39wE;
       c39wF: // global
           HpAlloc = 24;
           goto c39wC;
       c39wC: // global
           R1 = _s2Vsm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39wE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Vsm::P64;
           _s2VrM::P64 = P64[_s2Vsm::P64 + 16];
           _s2Vsg::P64 = P64[_s2Vsm::P64 + 24];
           I64[Hp - 16] = sat_s2Vsq_info;
           P64[Hp] = _s2Vsg::P64;
           I64[Sp - 24] = block_c39wy_info;
           R4 = _s2VrM::P64;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds5_s2Vsm_info" {
     ds5_s2Vsm_info:
         const ds5_s2Vsm_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+1200;
 },
 _c39wy() //  [R1, R2]
         { []
         }
     {offset
       c39wy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39wI; else goto c39wH;
       c39wI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c39wH: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39wy_info" {
     block_c39wy_info:
         const _c39wy;
         const 0;
         const 30;
 },
 ds6_s2Vsu_entry() //  [R1]
         { []
         }
     {offset
       c39wQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39wU; else goto c39wV;
       c39wU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39wV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c39wN_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u39xY; else goto c39wO;
       u39xY: // global
           call _c39wN(R1) args: 0, res: 0, upd: 0;
       c39wO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds6_s2Vsu_info" {
     ds6_s2Vsu_info:
         const ds6_s2Vsu_entry;
         const 1;
         const 210453397520;
         const S2VLN_srt+1176;
 },
 _c39wN() //  [R1]
         { []
         }
     {offset
       c39wN: // global
           I64[Sp - 8] = block_c39wT_info;
           _s2Vsx::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2Vsx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39xX; else goto c39wX;
       u39xX: // global
           call _c39wT(R1) args: 0, res: 0, upd: 0;
       c39wX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39wN_info" {
     block_c39wN_info:
         const _c39wN;
         const 0;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c39wT() //  [R1]
         { []
         }
     {offset
       c39wT: // global
           _s2Vsx::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(I64[R1 + 7], 0)) goto c39x7; else goto c39xn;
       c39x7: // global
           I64[Sp + 8] = block_c39x5_info;
           R3 = _s2Vsx::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
       c39xn: // global
           I64[Sp + 8] = block_c39xm_info;
           R1 = _s2Vsx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39xZ; else goto c39xo;
       u39xZ: // global
           call _c39xm(R1) args: 0, res: 0, upd: 0;
       c39xo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39wT_info" {
     block_c39wT_info:
         const _c39wT;
         const 1;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c39x5() //  [R1]
         { []
         }
     {offset
       c39x5: // global
           if (R1 & 7 == 1) goto u39xV; else goto c39xh;
       u39xV: // global
           Sp = Sp + 8;
           call _c39xK() args: 0, res: 0, upd: 0;
       c39xh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39xk; else goto c39xj;
       c39xk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39xj: // global
           _s2VsC::P64 = P64[R1 + 6];
           _s2VsD::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2VsC::P64;
           P64[Hp] = _s2VsD::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39x5_info" {
     block_c39x5_info:
         const _c39x5;
         const 0;
         const 4294967326;
         const S2VLN_srt+1216;
 },
 _c39xm() //  [R1]
         { []
         }
     {offset
       c39xm: // global
           if (R1 & 7 == 1) goto c39xu; else goto c39xz;
       c39xu: // global
           R1 = GHC.List.init2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c39xz: // global
           I64[Sp] = block_c39xx_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.List.init1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39xm_info" {
     block_c39xm_info:
         const _c39xm;
         const 0;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c39xx() //  [R1]
         { []
         }
     {offset
       c39xx: // global
           I64[Sp] = block_c39xD_info;
           R3 = R1;
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39xx_info" {
     block_c39xx_info:
         const _c39xx;
         const 0;
         const 141733920798;
         const S2VLN_srt+1176;
 },
 _c39xD() //  [R1]
         { []
         }
     {offset
       c39xD: // global
           if (R1 & 7 == 1) goto u39xW; else goto c39xO;
       u39xW: // global
           Sp = Sp + 8;
           call _c39xK() args: 0, res: 0, upd: 0;
       c39xO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39xR; else goto c39xQ;
       c39xR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39xQ: // global
           _s2VsK::P64 = P64[R1 + 6];
           _s2VsL::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2VsK::P64;
           P64[Hp] = _s2VsL::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39xD_info" {
     block_c39xD_info:
         const _c39xD;
         const 0;
         const 4294967326;
         const S2VLN_srt+1216;
 },
 _c39xK() //  []
         { []
         }
     {offset
       c39xK: // global
           R1 = lvl18_r2UqR_closure;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2Vt5_entry() //  [R1]
         { []
         }
     {offset
       c39yi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39yE; else goto c39yF;
       c39yE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39yF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c39yf_info;
           _s2Vsm::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s2Vsm::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u39yN; else goto c39yg;
       u39yN: // global
           call _c39yf(R1) args: 0, res: 0, upd: 0;
       c39yg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vt5_info" {
     sat_s2Vt5_info:
         const sat_s2Vt5_entry;
         const 2;
         const 18;
 },
 _c39yf() //  [R1]
         { []
         }
     {offset
       c39yf: // global
           I64[Sp] = block_c39yl_info;
           _s2VsU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2VsU::I64;
           if (R1 & 7 != 0) goto u39yM; else goto c39ym;
       u39yM: // global
           call _c39yl(R1) args: 0, res: 0, upd: 0;
       c39ym: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39yf_info" {
     block_c39yf_info:
         const _c39yf;
         const 1;
         const 30;
 },
 _c39yl() //  [R1]
         { []
         }
     {offset
       c39yl: // global
           I64[Sp] = block_c39yq_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u39yO; else goto c39yr;
       u39yO: // global
           call _c39yq(R1) args: 0, res: 0, upd: 0;
       c39yr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39yl_info" {
     block_c39yl_info:
         const _c39yl;
         const 65;
         const 30;
 },
 _c39yq() //  [R1]
         { []
         }
     {offset
       c39yq: // global
           _s2Vt1::I64 = I64[Sp + 8] + (I64[R1 + 7] - 1);
           I64[Sp + 8] = block_c39yB_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = _s2Vt1::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39yq_info" {
     block_c39yq_info:
         const _c39yq;
         const 65;
         const 30;
 },
 _c39yB() //  [R1, R2]
         { []
         }
     {offset
       c39yB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39yL; else goto c39yK;
       c39yL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c39yK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39yB_info" {
     block_c39yB_info:
         const _c39yB;
         const 0;
         const 30;
 },
 sat_s2Vt7_entry() //  [R1]
         { []
         }
     {offset
       c39yP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c39yR; else goto c39yS;
       c39yR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39yS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c39y6_info;
           _s2VrN::P64 = P64[R1 + 16];
           _s2Vsm::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s2VrN::P64;
           P64[Sp - 24] = _s2Vsm::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u39yW; else goto c39y7;
       u39yW: // global
           call _c39y6(R1) args: 0, res: 0, upd: 0;
       c39y7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vt7_info" {
     sat_s2Vt7_info:
         const sat_s2Vt7_entry;
         const 3;
         const 15;
 },
 _c39y6() //  [R1]
         { []
         }
     {offset
       c39y6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39yV; else goto c39yU;
       c39yV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39yU: // global
           _s2VsS::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2Vt5_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl19_r2UqS_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s2VsS::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39y6_info" {
     block_c39y6_info:
         const _c39y6;
         const 2;
         const 30;
 },
 sat_s2Vtj_entry() //  [R1]
         { []
         }
     {offset
       c39zm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c39zn; else goto c39zo;
       c39zn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39zo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c39zk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call dec'_s2Vsg_entry(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vtj_info" {
     sat_s2Vtj_info:
         const sat_s2Vtj_entry;
         const 1;
         const 1103806595088;
         const S2VLN_srt+1224;
 },
 _c39zk() //  [R1]
         { []
         }
     {offset
       c39zk: // global
           _s2Vth::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _s2Vth::I64)) goto c39zv; else goto c39zw;
       c39zv: // global
           R1 = lvl34_r2Ur8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c39zw: // global
           R2 = _s2Vth::I64;
           Sp = Sp + 8;
           call $wxs2_r2Ure_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39zk_info" {
     block_c39zk_info:
         const _c39zk;
         const 0;
         const 1103806595102;
         const S2VLN_srt+1224;
 },
 sat_s2Vtr_entry() //  [R1]
         { []
         }
     {offset
       c39zQ: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vtr_info" {
     sat_s2Vtr_info:
         const sat_s2Vtr_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1176;
 },
 n1_s2Vtu_entry() //  [R1]
         { []
         }
     {offset
       c39A9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39Aa; else goto c39Ab;
       c39Aa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Ab: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n1_s2Vtu_info" {
     n1_s2Vtu_info:
         const n1_s2Vtu_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1176;
 },
 sat_s2VtA_entry() //  [R1]
         { []
         }
     {offset
       c39Aq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39Ar; else goto c39As;
       c39Ar: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39As: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s2Vtw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VtA_info" {
     sat_s2VtA_info:
         const sat_s2VtA_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s2Vtw_entry() //  [R1, R2]
         { []
         }
     {offset
       c39Aw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39AA; else goto c39Az;
       c39AA: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c39Az: // global
           if (R2 == 1) goto c39Av; else goto c39Au;
       c39Av: // global
           _s2Vtv::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s2Vtv::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39Au: // global
           I64[Hp - 48] = sat_s2VtA_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s2Vtw_info" {
     $wxs4_s2Vtw_info:
         const $wxs4_s2Vtw_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s2VtB_entry() //  [R1]
         { []
         }
     {offset
       c39AC: // global
           _s2VtB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c39AD; else goto c39AE;
       c39AE: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c39AG; else goto c39AF;
       c39AG: // global
           HpAlloc = 64;
           goto c39AD;
       c39AD: // global
           R1 = _s2VtB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39AF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2VtB::P64;
           _s2VrM::P64 = P64[_s2VtB::P64 + 16];
           _s2Vts::I64 = -I64[_s2VtB::P64 + 24];
           if (%MO_S_Ge_W64(0, _s2Vts::I64)) goto c39AI; else goto c39AJ;
       c39AI: // global
           Hp = Hp - 64;
           R3 = _s2VrM::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
       c39AJ: // global
           I64[Hp - 56] = n1_s2Vtu_info;
           P64[Hp - 40] = _s2VrM::P64;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = lvl20_r2UqT_closure+1;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = $wxs4_s2Vtw_info;
           P64[Hp] = Hp - 30;
           R2 = _s2Vts::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call $wxs4_s2Vtw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VtB_info" {
     sat_s2VtB_info:
         const sat_s2VtB_entry;
         const 4294967297;
         const 4294967315;
         const S2VLN_srt+1176;
 },
 sat_s2VtM_entry() //  [R1]
         { []
         }
     {offset
       c39Bb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39Bc; else goto c39Bd;
       c39Bc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Bd: // global
           I64[Sp - 8] = block_c39B8_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39Bm; else goto c39B9;
       u39Bm: // global
           call _c39B8(R1) args: 0, res: 0, upd: 0;
       c39B9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VtM_info" {
     sat_s2VtM_info:
         const sat_s2VtM_entry;
         const 1;
         const 16;
 },
 _c39B8() //  [R1]
         { []
         }
     {offset
       c39B8: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c39Bk; else goto c39Bl;
       c39Bk: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39Bl: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39B8_info" {
     block_c39B8_info:
         const _c39B8;
         const 0;
         const 30;
 },
 sat_s2VtV_entry() //  [R1]
         { []
         }
     {offset
       c39BC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39BD; else goto c39BE;
       c39BD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39BE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s2VtR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VtV_info" {
     sat_s2VtV_info:
         const sat_s2VtV_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s2VtR_entry() //  [R1, R2]
         { []
         }
     {offset
       c39BI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39BM; else goto c39BL;
       c39BM: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c39BL: // global
           if (R2 == 1) goto c39BH; else goto c39BG;
       c39BH: // global
           _s2VtQ::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s2VtQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39BG: // global
           I64[Hp - 48] = sat_s2VtV_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s2VtR_info" {
     $wxs4_s2VtR_info:
         const $wxs4_s2VtR_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s2VtZ_entry() //  [R1]
         { []
         }
     {offset
       c39BZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39C0; else goto c39C1;
       c39C0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39C1: // global
           I64[Sp - 8] = block_c39BW_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39Ca; else goto c39BX;
       u39Ca: // global
           call _c39BW(R1) args: 0, res: 0, upd: 0;
       c39BX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VtZ_info" {
     sat_s2VtZ_info:
         const sat_s2VtZ_entry;
         const 1;
         const 16;
 },
 _c39BW() //  [R1]
         { []
         }
     {offset
       c39BW: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c39C8; else goto c39C9;
       c39C8: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39C9: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39BW_info" {
     block_c39BW_info:
         const _c39BW;
         const 0;
         const 30;
 },
 ds4_s2VtG_entry() //  [R1]
         { []
         }
     {offset
       c39Cb: // global
           _s2VtG::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c39Cc; else goto c39Cd;
       c39Cd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c39Cf; else goto c39Ce;
       c39Cf: // global
           HpAlloc = 40;
           goto c39Cc;
       c39Cc: // global
           R1 = _s2VtG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Ce: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2VtG::P64;
           _s2VrM::P64 = P64[_s2VtG::P64 + 16];
           _s2VtC::P64 = P64[_s2VtG::P64 + 24];
           _s2VtH::I64 = -I64[_s2VtG::P64 + 32];
           if (%MO_S_Ge_W64(0, _s2VtH::I64)) goto c39Ci; else goto c39Cm;
       c39Ci: // global
           I64[Hp - 32] = sat_s2VtM_info;
           P64[Hp - 16] = _s2VtC::P64;
           _c39B4::P64 = Hp - 32;
           Hp = Hp - 16;
           I64[Sp - 24] = block_c39Cg_info;
           R4 = _s2VrM::P64;
           R3 = _c39B4::P64;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
       c39Cm: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = _s2VrM::P64;
           I64[Hp - 8] = $wxs4_s2VtR_info;
           P64[Hp] = Hp - 30;
           I64[Sp - 32] = block_c39BO_info;
           R2 = _s2VtH::I64;
           R1 = Hp - 7;
           P64[Sp - 24] = _s2VtC::P64;
           Sp = Sp - 32;
           call $wxs4_s2VtR_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_s2VtG_info" {
     ds4_s2VtG_info:
         const ds4_s2VtG_entry;
         const 4294967298;
         const 12884901903;
         const S2VLN_srt+1192;
 },
 _c39Cg() //  [R1, R2]
         { []
         }
     {offset
       c39Cg: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Cg_info" {
     block_c39Cg_info:
         const _c39Cg;
         const 0;
         const 4294967326;
         const S2VLN_srt+1192;
 },
 _c39BO() //  [R1]
         { []
         }
     {offset
       c39BO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39Cp; else goto c39Co;
       c39Cp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39Co: // global
           I64[Hp - 16] = sat_s2VtZ_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c39Cl_info;
           R4 = R1;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39BO_info" {
     block_c39BO_info:
         const _c39BO;
         const 1;
         const 12884901918;
         const S2VLN_srt+1192;
 },
 _c39Cl() //  [R1, R2]
         { []
         }
     {offset
       c39Cl: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Cl_info" {
     block_c39Cl_info:
         const _c39Cl;
         const 0;
         const 4294967326;
         const S2VLN_srt+1192;
 },
 sat_s2Vuf_entry() //  [R1]
         { []
         }
     {offset
       c39Cz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39CA; else goto c39CB;
       c39CA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39CB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c39Cw_info;
           _s2Vrx::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s2Vrx::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u39D9; else goto c39Cx;
       u39D9: // global
           call _c39Cw(R1) args: 0, res: 0, upd: 0;
       c39Cx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vuf_info" {
     sat_s2Vuf_info:
         const sat_s2Vuf_entry;
         const 2;
         const 18;
 },
 _c39Cw() //  [R1]
         { []
         }
     {offset
       c39Cw: // global
           I64[Sp] = block_c39CE_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u39D8; else goto c39CG;
       u39D8: // global
           call _c39CE(R1) args: 0, res: 0, upd: 0;
       c39CG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Cw_info" {
     block_c39Cw_info:
         const _c39Cw;
         const 1;
         const 30;
 },
 _c39CE() //  [R1]
         { []
         }
     {offset
       c39CE: // global
           if (R1 & 7 == 1) goto c39CN; else goto c39D2;
       c39CN: // global
           _s2Vrx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39CK_info;
           R1 = _s2Vrx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39Da; else goto c39CO;
       u39Da: // global
           call _c39CK(R1) args: 0, res: 0, upd: 0;
       c39CO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c39D2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39D5; else goto c39D4;
       c39D5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39D4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39CE_info" {
     block_c39CE_info:
         const _c39CE;
         const 1;
         const 30;
 },
 _c39CK() //  [R1]
         { []
         }
     {offset
       c39CK: // global
           if (R1 & 7 == 1) goto c39CU; else goto c39CY;
       c39CU: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c39CY: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39CK_info" {
     block_c39CK_info:
         const _c39CK;
         const 0;
         const 30;
 },
 sat_s2Vuk_entry() //  [R1]
         { []
         }
     {offset
       c39Dj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c39Dk; else goto c39Dl;
       c39Dk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Dl: // global
           I64[Sp - 24] = block_c39Dg_info;
           _s2VtD::P64 = P64[R1 + 24];
           _s2VtE::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _s2VtD::P64;
           I64[Sp - 8] = _s2VtE::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u39DB; else goto c39Dh;
       u39DB: // global
           call _c39Dg(R1) args: 0, res: 0, upd: 0;
       c39Dh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vuk_info" {
     sat_s2Vuk_info:
         const sat_s2Vuk_entry;
         const 4294967298;
         const 15;
 },
 _c39Dg() //  [R1]
         { []
         }
     {offset
       c39Dg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c39Dq; else goto c39Dp;
       c39Dq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39Dp: // global
           _s2Vuh::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2Vuh::I64, 0)) goto c39Dz; else goto c39DA;
       c39Dz: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vuh::I64 + I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39DA: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Dg_info" {
     block_c39Dg_info:
         const _c39Dg;
         const 130;
         const 30;
 },
 sat_s2VuC_entry() //  [R1]
         { []
         }
     {offset
       c39Ec: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39Ed; else goto c39Ee;
       c39Ed: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Ee: // global
           I64[Sp - 16] = block_c39E5_info;
           _s2Vrx::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s2Vrx::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u39EC; else goto c39E6;
       u39EC: // global
           call _c39E5(R1) args: 0, res: 0, upd: 0;
       c39E6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VuC_info" {
     sat_s2VuC_info:
         const sat_s2VuC_entry;
         const 2;
         const 18;
 },
 _c39E5() //  [R1]
         { []
         }
     {offset
       c39E5: // global
           if (R1 & 7 == 1) goto c39E9; else goto c39Ea;
       c39E9: // global
           _s2Vrx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39Eh_info;
           R1 = _s2Vrx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39EB; else goto c39Ej;
       u39EB: // global
           call _c39Eh(R1) args: 0, res: 0, upd: 0;
       c39Ej: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39Ea: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39Ez; else goto c39Ey;
       c39Ez: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39Ey: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39E5_info" {
     block_c39E5_info:
         const _c39E5;
         const 1;
         const 30;
 },
 _c39Eh() //  [R1]
         { []
         }
     {offset
       c39Eh: // global
           if (R1 & 7 == 1) goto c39Ep; else goto c39Et;
       c39Ep: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39Et: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Eh_info" {
     block_c39Eh_info:
         const _c39Eh;
         const 0;
         const 30;
 },
 sat_s2VuJ_entry() //  [R1]
         { []
         }
     {offset
       c39EQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39ER; else goto c39ES;
       c39ER: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39ES: // global
           I64[Sp - 16] = block_c39EJ_info;
           _s2Vrx::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s2Vrx::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u39Fg; else goto c39EK;
       u39Fg: // global
           call _c39EJ(R1) args: 0, res: 0, upd: 0;
       c39EK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VuJ_info" {
     sat_s2VuJ_info:
         const sat_s2VuJ_entry;
         const 2;
         const 18;
 },
 _c39EJ() //  [R1]
         { []
         }
     {offset
       c39EJ: // global
           if (R1 & 7 == 1) goto c39EN; else goto c39EO;
       c39EN: // global
           _s2Vrx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39EV_info;
           R1 = _s2Vrx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39Ff; else goto c39EX;
       u39Ff: // global
           call _c39EV(R1) args: 0, res: 0, upd: 0;
       c39EX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39EO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39Fd; else goto c39Fc;
       c39Fd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39Fc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39EJ_info" {
     block_c39EJ_info:
         const _c39EJ;
         const 1;
         const 30;
 },
 _c39EV() //  [R1]
         { []
         }
     {offset
       c39EV: // global
           if (R1 & 7 == 1) goto c39F3; else goto c39F7;
       c39F3: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39F7: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39EV_info" {
     block_c39EV_info:
         const _c39EV;
         const 0;
         const 30;
 },
 sat_s2VuO_entry() //  [R1]
         { []
         }
     {offset
       c39Fs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39Ft; else goto c39Fu;
       c39Ft: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Fu: // global
           I64[Sp - 16] = block_c39Fm_info;
           R3 = P64[R1 + 24];
           R2 = GHC.Show.intToDigit_closure+1;
           P64[Sp - 8] = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VuO_info" {
     sat_s2VuO_info:
         const sat_s2VuO_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+1176;
 },
 _c39Fm() //  [R1]
         { []
         }
     {offset
       c39Fm: // global
           if (R1 & 7 == 1) goto c39Fp; else goto c39Fq;
       c39Fp: // global
           _s2Vrx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39Fx_info;
           R1 = _s2Vrx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39FR; else goto c39Fz;
       u39FR: // global
           call _c39Fx(R1) args: 0, res: 0, upd: 0;
       c39Fz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39Fq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39FP; else goto c39FO;
       c39FP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39FO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Fm_info" {
     block_c39Fm_info:
         const _c39Fm;
         const 1;
         const 30;
 },
 _c39Fx() //  [R1]
         { []
         }
     {offset
       c39Fx: // global
           if (R1 & 7 == 1) goto c39FF; else goto c39FJ;
       c39FF: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39FJ: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Fx_info" {
     block_c39Fx_info:
         const _c39Fx;
         const 0;
         const 30;
 },
 $wdoFmt_s2VrK_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c39FX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c39FY; else goto u39Ik;
       c39FY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u39Ik: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c39ut() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wdoFmt_s2VrK_info" {
     $wdoFmt_s2VrK_info:
         const $wdoFmt_s2VrK_entry;
         const 2;
         const 1160891005403147;
         const 12884901911;
         const S2VLN_srt+1144;
 },
 _c39ut() //  []
         { []
         }
     {offset
       c39ut: // global
           I64[Sp - 16] = block_c39uw_info;
           R1 = P64[Sp + 8];
           _s2VrK::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s2VrK::P64 + 13];
           P64[Sp + 8] = P64[_s2VrK::P64 + 5];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u39Ip; else goto c39ux;
       u39Ip: // global
           call _c39uw(R1) args: 0, res: 0, upd: 0;
       c39ux: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c39uw() //  [R1]
         { []
         }
     {offset
       c39uw: // global
           _c39FW::P64 = R1 & 7;
           if (_c39FW::P64 < 3) goto u39Ij; else goto c39FV;
       u39Ij: // global
           _s2Vrw::P64 = P64[Sp + 24];
           if (_c39FW::P64 < 2) goto c39FT; else goto c39FU;
       c39FT: // global
           I64[Sp + 24] = block_c39uB_info;
           R1 = _s2Vrw::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u39Iq; else goto c39uC;
       u39Iq: // global
           call _c39uB(R1) args: 0, res: 0, upd: 0;
       c39uC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39FU: // global
           I64[Sp] = block_c39zz_info;
           R1 = _s2Vrw::P64;
           if (R1 & 7 != 0) goto u39Ir; else goto c39zA;
       u39Ir: // global
           call _c39zz(R1) args: 0, res: 0, upd: 0;
       c39zA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39FV: // global
           I64[Sp + 8] = block_c39HT_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39Is; else goto c39HV;
       u39Is: // global
           call _c39HT(R1) args: 0, res: 0, upd: 0;
       c39HV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39uw_info" {
     block_c39uw_info:
         const _c39uw;
         const 5;
         const 1160891005403166;
         const S2VLN_srt+1144;
 },
 _c39uB() //  [R1]
         { []
         }
     {offset
       c39uB: // global
           _s2VrM::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c39G3; else goto c39GI;
       c39G3: // global
           I64[Sp + 8] = block_c39uG_info;
           R3 = _s2VrM::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c39GI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39GL; else goto c39GK;
       c39GL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39GK: // global
           _s2Vsf::P64 = P64[R1 + 6];
           I64[Hp - 16] = dec'_s2Vsg_info;
           P64[Hp] = _s2Vsf::P64;
           I64[Sp - 8] = block_c39yX_info;
           R1 = _s2VrM::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39It; else goto c39yY;
       u39It: // global
           call _c39yX(R1) args: 0, res: 0, upd: 0;
       c39yY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39uB_info" {
     block_c39uB_info:
         const _c39uB;
         const 2;
         const 72537702662174;
         const S2VLN_srt+1176;
 },
 _c39uG() //  [R1]
         { []
         }
     {offset
       c39uG: // global
           if (R1 & 7 == 1) goto c39G7; else goto c39G9;
       c39G7: // global
           R1 = lvl13_r2UqM_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39G9: // global
           I64[Sp - 8] = block_c39uL_info;
           _s2VrS::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2VrS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39Iu; else goto c39uM;
       u39Iu: // global
           call _c39uL(R1) args: 0, res: 0, upd: 0;
       c39uM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39uG_info" {
     block_c39uG_info:
         const _c39uG;
         const 1;
         const 12884901918;
         const S2VLN_srt+1232;
 },
 _c39uL() //  [R1]
         { []
         }
     {offset
       c39uL: // global
           if (I64[R1 + 7] == 48) goto c39Gw; else goto u39Im;
       c39Gw: // global
           I64[Sp - 8] = block_c39Gv_info;
           _s2VrT::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s2VrT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39Iv; else goto c39Gx;
       u39Iv: // global
           call _c39Gv(R1) args: 0, res: 0, upd: 0;
       c39Gx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u39Im: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c39uT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39uL_info" {
     block_c39uL_info:
         const _c39uL;
         const 2;
         const 4294967326;
         const S2VLN_srt+1240;
 },
 _c39Gv() //  [R1]
         { []
         }
     {offset
       c39Gv: // global
           if (R1 & 7 == 1) goto c39GD; else goto u39II;
       c39GD: // global
           R1 = lvl16_r2UqP_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u39II: // global
           call _c39uT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39Gv_info" {
     block_c39Gv_info:
         const _c39Gv;
         const 3;
         const 4294967326;
         const S2VLN_srt+1240;
 },
 _c39uT() //  []
         { []
         }
     {offset
       c39uT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39Gd; else goto c39Gc;
       c39Gd: // global
           HpAlloc = 24;
           I64[Sp] = block_c39uT_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c39Gc: // global
           I64[Hp - 16] = show_e'_s2VrX_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c39vi_info;
           R1 = P64[Sp + 16];
           P64[Sp + 24] = Hp - 16;
           if (R1 & 7 != 0) goto u39Ix; else goto c39vj;
       u39Ix: // global
           call _c39vi(R1) args: 0, res: 0, upd: 0;
       c39vj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39uT_info" {
     block_c39uT_info:
         const _c39uT;
         const 3;
         const 30;
 },
 _c39vi() //  [R1]
         { []
         }
     {offset
       c39vi: // global
           _c39uV::P64 = P64[Sp + 24];
           _s2VrT::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c39Gg; else goto c39Gm;
       c39Gg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c39Gj; else goto c39Gi;
       c39Gj: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39Gi: // global
           I64[Hp - 40] = sat_s2Vs5_info;
           P64[Hp - 24] = _c39uV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2VrT::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39Gm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c39Gp; else goto c39Go;
       c39Gp: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39Go: // global
           I64[Hp - 72] = sat_s2Vs9_info;
           P64[Hp - 56] = _c39uV::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2VrT::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39vi_info" {
     block_c39vi_info:
         const _c39vi;
         const 131;
         const 30;
 },
 _c39yX() //  [R1]
         { []
         }
     {offset
       c39yX: // global
           if (R1 & 7 == 1) goto u39Iy; else goto c39GX;
       u39Iy: // global
           call _c39wa() args: 0, res: 0, upd: 0;
       c39GX: // global
           I64[Sp - 8] = block_c39z3_info;
           _s2Vtb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2Vtb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39Iz; else goto c39z4;
       u39Iz: // global
           call _c39z3(R1) args: 0, res: 0, upd: 0;
       c39z4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39yX_info" {
     block_c39yX_info:
         const _c39yX;
         const 3;
         const 70888435220510;
         const S2VLN_srt+1176;
 },
 _c39z3() //  [R1]
         { []
         }
     {offset
       c39z3: // global
           if (I64[R1 + 7] == 0) goto c39H1; else goto u39Il;
       c39H1: // global
           _s2Vtb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39zb_info;
           R1 = _s2Vtb::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39IA; else goto c39zc;
       u39IA: // global
           call _c39zb(R1) args: 0, res: 0, upd: 0;
       c39zc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u39Il: // global
           Sp = Sp + 8;
           call _c39wa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39z3_info" {
     block_c39z3_info:
         const _c39z3;
         const 4;
         const 70888435220510;
         const S2VLN_srt+1176;
 },
 _c39zb() //  [R1]
         { []
         }
     {offset
       c39zb: // global
           if (R1 & 7 == 1) goto c39H5; else goto u39IC;
       c39H5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c39H8; else goto c39H7;
       c39H8: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39H7: // global
           I64[Hp - 64] = sat_s2Vtj_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u39IC: // global
           call _c39wa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39zb_info" {
     block_c39zb_info:
         const _c39zb;
         const 3;
         const 70888435220510;
         const S2VLN_srt+1176;
 },
 _c39wa() //  []
         { []
         }
     {offset
       c39wa: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c39GR; else goto c39GQ;
       c39GR: // global
           HpAlloc = 168;
           I64[Sp] = block_c39wa_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c39GQ: // global
           I64[Hp - 160] = ds5_s2Vsm_info;
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 8];
           I64[Hp - 128] = ds6_s2Vsu_info;
           _c39wc::P64 = Hp - 160;
           P64[Hp - 112] = _c39wc::P64;
           I64[Hp - 104] = sat_s2Vt7_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = _c39wc::P64;
           _c39wJ::P64 = Hp - 128;
           P64[Hp - 72] = _c39wJ::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = lvl14_r2UqN_closure+1;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c39wJ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39wa_info" {
     block_c39wa_info:
         const _c39wa;
         const 3;
         const 244813135902;
         const S2VLN_srt+1176;
 },
 _c39zz() //  [R1]
         { []
         }
     {offset
       c39zz: // global
           _s2VrN::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c39Hg; else goto c39Ho;
       c39Hg: // global
           I64[Sp + 24] = block_c39zE_info;
           R1 = _s2VrN::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u39ID; else goto c39zF;
       u39ID: // global
           call _c39zE(R1) args: 0, res: 0, upd: 0;
       c39zF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c39Ho: // global
           I64[Sp] = block_c39AM_info;
           _s2VtC::P64 = P64[R1 + 6];
           R1 = _s2VrN::P64;
           P64[Sp + 40] = _s2VtC::P64;
           if (R1 & 7 != 0) goto u39IE; else goto c39AN;
       u39IE: // global
           call _c39AM(R1) args: 0, res: 0, upd: 0;
       c39AN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39zz_info" {
     block_c39zz_info:
         const _c39zz;
         const 389;
         const 906238099486;
         const S2VLN_srt+1144;
 },
 _c39zE() //  [R1]
         { []
         }
     {offset
       c39zE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c39Hj; else goto c39Hi;
       c39Hj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39Hi: // global
           _s2VrM::P64 = P64[Sp + 8];
           _s2Vtp::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2Vtp::I64, 0)) goto c39Hl; else goto c39Hm;
       c39Hl: // global
           I64[Hp - 24] = sat_s2Vtr_info;
           P64[Hp - 8] = _s2VrM::P64;
           _c39zM::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _c39zM::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s2Vtp::I64;
           Sp = Sp + 24;
           call $wf_r2UqX_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c39Hm: // global
           I64[Hp - 24] = sat_s2VtB_info;
           P64[Hp - 8] = _s2VrM::P64;
           I64[Hp] = _s2Vtp::I64;
           R3 = Hp - 24;
           R2 = lvl36_r2Urb_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39zE_info" {
     block_c39zE_info:
         const _c39zE;
         const 130;
         const 38654705694;
         const S2VLN_srt+1152;
 },
 _c39AM() //  [R1]
         { []
         }
     {offset
       c39AM: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c39Hr; else goto c39Hq;
       c39Hr: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39Hq: // global
           _s2VrM::P64 = P64[Sp + 32];
           _s2VtC::P64 = P64[Sp + 40];
           _s2VtE::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2VtE::I64, 0)) goto c39Hv; else goto c39Hw;
       c39Hv: // global
           I64[Hp - 112] = ds4_s2VtG_info;
           P64[Hp - 96] = _s2VrM::P64;
           P64[Hp - 88] = _s2VtC::P64;
           I64[Hp - 80] = _s2VtE::I64;
           I64[Hp - 72] = sat_s2Vuf_info;
           P64[Hp - 56] = P64[Sp + 8];
           _c39AU::P64 = Hp - 112;
           P64[Hp - 48] = _c39AU::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c39AU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39Hw: // global
           I64[Hp - 112] = sat_s2Vuk_info;
           P64[Hp - 96] = _s2VtC::P64;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = _s2VtE::I64;
           _c39Dc::P64 = Hp - 112;
           Hp = Hp - 80;
           I64[Sp] = block_c39DC_info;
           R4 = _s2VrM::P64;
           R3 = _c39Dc::P64;
           R2 = base_r2UqK_closure+1;
           I64[Sp + 40] = _s2VtE::I64;
           call GHC.Float.$wroundTo_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39AM_info" {
     block_c39AM_info:
         const _c39AM;
         const 389;
         const 897648164894;
         const S2VLN_srt+1144;
 },
 _c39DC() //  [R1, R2]
         { []
         }
     {offset
       c39DC: // global
           I64[Sp] = block_c39DE_info;
           R1 = R1;
           P64[Sp + 32] = R2;
           if (R1 & 7 != 0) goto u39IF; else goto c39DF;
       u39IF: // global
           call _c39DE(R1) args: 0, res: 0, upd: 0;
       c39DF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39DC_info" {
     block_c39DC_info:
         const _c39DC;
         const 1925;
         const 73014444062;
         const S2VLN_srt+1144;
 },
 _c39DE() //  [R1]
         { []
         }
     {offset
       c39DE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c39HA; else goto c39Hz;
       c39HA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39Hz: // global
           _s2Vun::P64 = P64[Sp + 32];
           _s2Vuq::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2Vuq::I64, 0)) goto c39HC; else goto c39HQ;
       c39HC: // global
           Hp = Hp - 32;
           I64[Sp] = block_c39DP_info;
           R3 = _s2Vun::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           I64[Sp + 40] = _s2Vuq::I64;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c39HQ: // global
           I64[Hp - 24] = sat_s2VuO_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s2Vun::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39DE_info" {
     block_c39DE_info:
         const _c39DE;
         const 1413;
         const 73014444062;
         const S2VLN_srt+1144;
 },
 _c39DP() //  [R1]
         { []
         }
     {offset
       c39DP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c39HF; else goto c39HE;
       c39HF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39HE: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40];
           I64[Sp] = block_c39DU_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.List.$wsplitAt'_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39DP_info" {
     block_c39DP_info:
         const _c39DP;
         const 1925;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c39DU() //  [R1, R2]
         { []
         }
     {offset
       c39DU: // global
           I64[Sp] = block_c39DW_info;
           R1 = R1;
           P64[Sp + 40] = R2;
           if (R1 & 7 != 0) goto u39IG; else goto c39DX;
       u39IG: // global
           call _c39DW(R1) args: 0, res: 0, upd: 0;
       c39DX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39DU_info" {
     block_c39DU_info:
         const _c39DU;
         const 1925;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c39DW() //  [R1]
         { []
         }
     {offset
       c39DW: // global
           _s2Vrx::P64 = P64[Sp + 8];
           _s2Vuw::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c39HI; else goto c39HM;
       c39HI: // global
           Hp = Hp + 32;
           _s2Vux::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c39HP; else goto c39HK;
       c39HK: // global
           I64[Hp - 24] = sat_s2VuC_info;
           P64[Hp - 8] = _s2Vrx::P64;
           P64[Hp] = _s2Vuw::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c39HM: // global
           Hp = Hp + 32;
           _s2Vux::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c39HP; else goto c39HO;
       c39HP: // global
           HpAlloc = 32;
           R1 = _s2Vux::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39HO: // global
           I64[Hp - 24] = sat_s2VuJ_info;
           P64[Hp - 8] = _s2Vrx::P64;
           P64[Hp] = _s2Vuw::P64;
           R3 = Hp - 24;
           R2 = _s2Vux::P64;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39DW_info" {
     block_c39DW_info:
         const _c39DW;
         const 901;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c39HT() //  [R1]
         { []
         }
     {offset
       c39HT: // global
           _s2VrM::P64 = P64[Sp + 24];
           _s2VuP::P64 = R1;
           _s2VuQ::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2VuQ::I64, 0)) goto c39Ia; else goto c39I9;
       c39I9: // global
           if (%MO_S_Gt_W64(_s2VuQ::I64, 7)) goto c39Ia; else goto c39I6;
       c39Ia: // global
           P64[Sp + 16] = GHC.Float.FFExponent_closure+1;
           P64[Sp + 24] = _s2VrM::P64;
           P64[Sp + 32] = _s2VuP::P64;
           Sp = Sp + 8;
           goto u39IK;
       c39I6: // global
           P64[Sp + 16] = GHC.Float.FFFixed_closure+2;
           P64[Sp + 24] = _s2VrM::P64;
           P64[Sp + 32] = _s2VuP::P64;
           Sp = Sp + 8;
           goto u39IK;
       u39IK: // global
           call _c39ut() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39HT_info" {
     block_c39HT_info:
         const _c39HT;
         const 644;
         const 1160891005403166;
         const S2VLN_srt+1144;
 },
 section ""relreadonly" . u39JI_srtd" {
     u39JI_srtd:
         const S2VLN_srt+752;
         const 68;
         const 4586362066616451073;
         const 8;
 },
 sat_s2VuY_entry() //  [R1]
         { []
         }
     {offset
       c39IW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c39IZ; else goto c39J0;
       c39IZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39J0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c39IY_info;
           D1 = %MO_F_Neg_W64(F64[R1 + 32]);
           R2 = GHC.Float.expts4_closure;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.$w$sfloatToDigits_entry(D1,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VuY_info" {
     sat_s2VuY_info:
         const sat_s2VuY_entry;
         const 4294967298;
         const 18446744069414584335;
         const u39JI_srtd;
 },
 _c39IY() //  [R1, R2]
         { []
         }
     {offset
       c39IY: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wdoFmt_s2VrK_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39IY_info" {
     block_c39IY_info:
         const _c39IY;
         const 2;
         const 1160891005403166;
         const S2VLN_srt+1144;
 },
 section ""relreadonly" . u39JJ_srtd" {
     u39JJ_srtd:
         const S2VLN_srt+752;
         const 69;
         const 13809734103471226881;
         const 27;
 },
 GHC.Float.$w$sformatRealFloatAlt_entry() //  [R2, R3, R4, D1]
         { []
         }
     {offset
       c39J6: // global
           _s2Vry::F64 = D1;
           _s2Vrx::P64 = R4;
           _s2Vrw::P64 = R3;
           _s2Vrv::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c39J7; else goto c39J8;
       c39J8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39Ja; else goto c39J9;
       c39Ja: // global
           HpAlloc = 24;
           goto c39J7;
       c39J7: // global
           R1 = GHC.Float.$w$sformatRealFloatAlt_closure;
           P64[Sp - 32] = _s2Vrv::P64;
           P64[Sp - 24] = _s2Vrw::P64;
           P64[Sp - 16] = _s2Vrx::P64;
           F64[Sp - 8] = _s2Vry::F64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c39J9: // global
           (_s2VrC::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNaN(_s2Vry::F64);
           if (_s2VrC::I64 == 0) goto c39J5; else goto c39J4;
       c39J5: // global
           (_s2VrH::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(_s2Vry::F64);
           if (_s2VrH::I64 == 0) goto c39JD; else goto c39Jh;
       c39JD: // global
           I64[Hp - 16] = $wdoFmt_s2VrK_info;
           P64[Hp - 8] = _s2Vrw::P64;
           P64[Hp] = _s2Vrx::P64;
           _c39ur::P64 = Hp - 13;
           if (%MO_F_Lt_W64(_s2Vry::F64,
                            0.0 :: W64)) goto u39JE; else goto c39JB;
       u39JE: // global
           P64[Sp - 24] = _c39ur::P64;
           P64[Sp - 16] = _s2Vrv::P64;
           F64[Sp - 8] = _s2Vry::F64;
           Sp = Sp - 32;
           goto u39JH;
       c39JB: // global
           (_s2Vv3::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(_s2Vry::F64);
           if (_s2Vv3::I64 == 0) goto c39Jx; else goto u39JF;
       c39Jx: // global
           I64[Sp - 24] = block_c39Jw_info;
           D1 = _s2Vry::F64;
           R2 = GHC.Float.expts4_closure;
           P64[Sp - 16] = _c39ur::P64;
           P64[Sp - 8] = _s2Vrv::P64;
           Sp = Sp - 24;
           call GHC.Float.$w$sfloatToDigits_entry(D1,
                                                  R2) args: 8, res: 8, upd: 8;
       u39JF: // global
           P64[Sp - 24] = _c39ur::P64;
           P64[Sp - 16] = _s2Vrv::P64;
           F64[Sp - 8] = _s2Vry::F64;
           Sp = Sp - 32;
           goto u39JH;
       u39JH: // global
           call _c39IO() args: 0, res: 0, upd: 0;
       c39Jh: // global
           if (%MO_F_Lt_W64(_s2Vry::F64,
                            0.0 :: W64)) goto c39Jf; else goto c39Je;
       c39Jf: // global
           Hp = Hp - 24;
           R1 = lvl29_r2Ur3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39Je: // global
           Hp = Hp - 24;
           R1 = lvl27_r2Ur1_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39J4: // global
           Hp = Hp - 24;
           R1 = lvl31_r2Ur5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sformatRealFloatAlt_info" {
     GHC.Float.$w$sformatRealFloatAlt_info:
         const GHC.Float.$w$sformatRealFloatAlt_entry;
         const 0;
         const 18446744069414584334;
         const 17179869184;
         const u39JJ_srtd;
         const 516;
         const GHC.Float.$w$sformatRealFloatAlt_slow;
 },
 _c39Jw() //  [R1, R2]
         { []
         }
     {offset
       c39Jw: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wdoFmt_s2VrK_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Jw_info" {
     block_c39Jw_info:
         const _c39Jw;
         const 2;
         const 1160891005403166;
         const S2VLN_srt+1144;
 },
 section ""relreadonly" . u39JK_srtd" {
     u39JK_srtd:
         const S2VLN_srt+752;
         const 68;
         const 4586362066616451073;
         const 8;
 },
 _c39IO() //  []
         { []
         }
     {offset
       c39IO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c39Jl; else goto c39Jk;
       c39Jl: // global
           HpAlloc = 64;
           I64[Sp] = block_c39IO_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c39Jk: // global
           I64[Hp - 56] = sat_s2VuY_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           F64[Hp - 24] = F64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39IO_info" {
     block_c39IO_info:
         const _c39IO;
         const 259;
         const 18446744069414584350;
         const u39JK_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.487368886 UTC

[section ""data" . GHC.Float.$fShowDouble_$sformatRealFloatAlt_closure" {
     GHC.Float.$fShowDouble_$sformatRealFloatAlt_closure:
         const GHC.Float.$fShowDouble_$sformatRealFloatAlt_info;
         const 0;
 },
 GHC.Float.$fShowDouble_$sformatRealFloatAlt_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       c39Rl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39Rm; else goto c39Rn;
       c39Rm: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowDouble_$sformatRealFloatAlt_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c39Rn: // global
           I64[Sp - 32] = block_c39Ri_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u39Rr; else goto c39Rj;
       u39Rr: // global
           call _c39Ri(R1) args: 0, res: 0, upd: 0;
       c39Rj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$sformatRealFloatAlt_info" {
     GHC.Float.$fShowDouble_$sformatRealFloatAlt_info:
         const GHC.Float.$fShowDouble_$sformatRealFloatAlt_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2VLN_srt+1296;
 },
 _c39Ri() //  [R1]
         { []
         }
     {offset
       c39Ri: // global
           D1 = F64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Ri_info" {
     block_c39Ri_info:
         const _c39Ri;
         const 3;
         const 4294967326;
         const S2VLN_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.4937483 UTC

[section ""data" . $wxs3_r2Urf_closure" {
     $wxs3_r2Urf_closure:
         const $wxs3_r2Urf_info;
         const 0;
 },
 sat_s2Vvh_entry() //  [R1]
         { []
         }
     {offset
       c39RN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39RO; else goto c39RP;
       c39RO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39RP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs3_r2Urf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vvh_info" {
     sat_s2Vvh_info:
         const sat_s2Vvh_entry;
         const 4294967296;
         const 4294967313;
         const S2VLN_srt+1312;
 },
 $wxs3_r2Urf_entry() //  [R2]
         { []
         }
     {offset
       c39RT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c39RX; else goto c39RW;
       c39RX: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs3_r2Urf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c39RW: // global
           if (R2 == 1) goto c39RS; else goto c39RR;
       c39RS: // global
           Hp = Hp - 48;
           R1 = lvl35_r2Ur9_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39RR: // global
           I64[Hp - 40] = sat_s2Vvh_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs3_r2Urf_info" {
     $wxs3_r2Urf_info:
         const $wxs3_r2Urf_entry;
         const 0;
         const 1125904201809934;
         const 4294967300;
         const S2VLN_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.544721821 UTC

[section ""data" . GHC.Float.formatRealFloatAlt_closure" {
     GHC.Float.formatRealFloatAlt_closure:
         const GHC.Float.formatRealFloatAlt_info;
         const 0;
 },
 $dNum_s2Vvq_entry() //  [R1]
         { []
         }
     {offset
       c39Sv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39Sw; else goto c39Sx;
       c39Sw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Sx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s2Vvq_info" {
     $dNum_s2Vvq_info:
         const $dNum_s2Vvq_entry;
         const 1;
         const 16;
 },
 show_e'_s2VvF_entry() //  [R1]
         { []
         }
     {offset
       c39Td: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c39Tm; else goto c39Tn;
       c39Tm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Tn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c39Ta_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u39Ts; else goto c39Tb;
       u39Ts: // global
           call _c39Ta(R1) args: 0, res: 0, upd: 0;
       c39Tb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . show_e'_s2VvF_info" {
     show_e'_s2VvF_info:
         const show_e'_s2VvF_entry;
         const 1;
         const 16;
 },
 _c39Ta() //  [R1]
         { []
         }
     {offset
       c39Ta: // global
           I64[Sp] = block_c39Tj_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7] - 1;
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Ta_info" {
     block_c39Ta_info:
         const _c39Ta;
         const 0;
         const 30;
 },
 _c39Tj() //  [R1, R2]
         { []
         }
     {offset
       c39Tj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39Tr; else goto c39Tq;
       c39Tr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c39Tq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Tj_info" {
     block_c39Tj_info:
         const _c39Tj;
         const 0;
         const 30;
 },
 sat_s2VvN_entry() //  [R1]
         { []
         }
     {offset
       c39TC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39TD; else goto c39TE;
       c39TD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39TE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl32_r2Ur6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VvN_info" {
     sat_s2VvN_info:
         const sat_s2VvN_entry;
         const 1;
         const 16;
 },
 sat_s2VvQ_entry() //  [R1]
         { []
         }
     {offset
       c39TP: // global
           R3 = P64[R1 + 16];
           R2 = lvl33_r2Ur7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VvQ_info" {
     sat_s2VvQ_info:
         const sat_s2VvQ_entry;
         const 1;
         const 16;
 },
 sat_s2VvR_entry() //  [R1]
         { []
         }
     {offset
       c39TS: // global
           _s2VvR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c39TT; else goto c39TU;
       c39TU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39TW; else goto c39TV;
       c39TW: // global
           HpAlloc = 24;
           goto c39TT;
       c39TT: // global
           R1 = _s2VvR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39TV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2VvR::P64;
           _s2VvF::P64 = P64[_s2VvR::P64 + 16];
           _s2VvM::P64 = P64[_s2VvR::P64 + 24];
           I64[Hp - 16] = sat_s2VvQ_info;
           P64[Hp] = _s2VvF::P64;
           R3 = Hp - 16;
           R2 = _s2VvM::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VvR_info" {
     sat_s2VvR_info:
         const sat_s2VvR_entry;
         const 2;
         const 18;
 },
 dec'_s2VvY_entry() //  [R1]
         { []
         }
     {offset
       c39U6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39U7; else goto c39U8;
       c39U7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39U8: // global
           I64[Sp - 8] = block_c39U3_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39Uh; else goto c39U4;
       u39Uh: // global
           call _c39U3(R1) args: 0, res: 0, upd: 0;
       c39U4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dec'_s2VvY_info" {
     dec'_s2VvY_info:
         const dec'_s2VvY_entry;
         const 1;
         const 16;
 },
 _c39U3() //  [R1]
         { []
         }
     {offset
       c39U3: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 1)) goto c39Uf; else goto c39Ug;
       c39Uf: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39Ug: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39U3_info" {
     block_c39U3_info:
         const _c39U3;
         const 0;
         const 30;
 },
 sat_s2Vw8_entry() //  [R1]
         { []
         }
     {offset
       c39Ux: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39UE; else goto c39UF;
       c39UE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39UF: // global
           I64[Sp - 8] = block_c39Uv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           call dec'_s2VvY_entry(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vw8_info" {
     sat_s2Vw8_info:
         const sat_s2Vw8_entry;
         const 1;
         const 16;
 },
 _c39Uv() //  [R1]
         { []
         }
     {offset
       c39Uv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c39UI; else goto c39UH;
       c39UI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c39UH: // global
           _s2Vw7::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2Vw7::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Uv_info" {
     block_c39Uv_info:
         const _c39Uv;
         const 0;
         const 30;
 },
 ds1_s2Vw4_entry() //  [R1]
         { []
         }
     {offset
       c39UM: // global
           _s2Vw4::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c39UN; else goto c39UO;
       c39UO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39UQ; else goto c39UP;
       c39UQ: // global
           HpAlloc = 24;
           goto c39UN;
       c39UN: // global
           R1 = _s2Vw4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39UP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Vw4::P64;
           _s2Vvu::P64 = P64[_s2Vw4::P64 + 16];
           _s2VvY::P64 = P64[_s2Vw4::P64 + 24];
           I64[Hp - 16] = sat_s2Vw8_info;
           P64[Hp] = _s2VvY::P64;
           I64[Sp - 24] = block_c39UJ_info;
           R4 = _s2Vvu::P64;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s2Vw4_info" {
     ds1_s2Vw4_info:
         const ds1_s2Vw4_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+1200;
 },
 _c39UJ() //  [R1, R2]
         { []
         }
     {offset
       c39UJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39UT; else goto c39US;
       c39UT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c39US: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39UJ_info" {
     block_c39UJ_info:
         const _c39UJ;
         const 0;
         const 30;
 },
 ds2_s2Vwc_entry() //  [R1]
         { []
         }
     {offset
       c39V1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39V5; else goto c39V6;
       c39V5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39V6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c39UY_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u39W9; else goto c39UZ;
       u39W9: // global
           call _c39UY(R1) args: 0, res: 0, upd: 0;
       c39UZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s2Vwc_info" {
     ds2_s2Vwc_info:
         const ds2_s2Vwc_entry;
         const 1;
         const 210453397520;
         const S2VLN_srt+1176;
 },
 _c39UY() //  [R1]
         { []
         }
     {offset
       c39UY: // global
           I64[Sp - 8] = block_c39V4_info;
           _s2Vwf::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2Vwf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39W8; else goto c39V8;
       u39W8: // global
           call _c39V4(R1) args: 0, res: 0, upd: 0;
       c39V8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39UY_info" {
     block_c39UY_info:
         const _c39UY;
         const 0;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c39V4() //  [R1]
         { []
         }
     {offset
       c39V4: // global
           _s2Vwf::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(I64[R1 + 7], 0)) goto c39Vi; else goto c39Vy;
       c39Vi: // global
           I64[Sp + 8] = block_c39Vg_info;
           R3 = _s2Vwf::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
       c39Vy: // global
           I64[Sp + 8] = block_c39Vx_info;
           R1 = _s2Vwf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u39Wa; else goto c39Vz;
       u39Wa: // global
           call _c39Vx(R1) args: 0, res: 0, upd: 0;
       c39Vz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39V4_info" {
     block_c39V4_info:
         const _c39V4;
         const 1;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c39Vg() //  [R1]
         { []
         }
     {offset
       c39Vg: // global
           if (R1 & 7 == 1) goto u39W6; else goto c39Vs;
       u39W6: // global
           Sp = Sp + 8;
           call _c39VV() args: 0, res: 0, upd: 0;
       c39Vs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39Vv; else goto c39Vu;
       c39Vv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39Vu: // global
           _s2Vwk::P64 = P64[R1 + 6];
           _s2Vwl::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2Vwk::P64;
           P64[Hp] = _s2Vwl::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Vg_info" {
     block_c39Vg_info:
         const _c39Vg;
         const 0;
         const 4294967326;
         const S2VLN_srt+1216;
 },
 _c39Vx() //  [R1]
         { []
         }
     {offset
       c39Vx: // global
           if (R1 & 7 == 1) goto c39VF; else goto c39VK;
       c39VF: // global
           R1 = GHC.List.init2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c39VK: // global
           I64[Sp] = block_c39VI_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.List.init1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Vx_info" {
     block_c39Vx_info:
         const _c39Vx;
         const 0;
         const 210453397534;
         const S2VLN_srt+1176;
 },
 _c39VI() //  [R1]
         { []
         }
     {offset
       c39VI: // global
           I64[Sp] = block_c39VO_info;
           R3 = R1;
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39VI_info" {
     block_c39VI_info:
         const _c39VI;
         const 0;
         const 141733920798;
         const S2VLN_srt+1176;
 },
 _c39VO() //  [R1]
         { []
         }
     {offset
       c39VO: // global
           if (R1 & 7 == 1) goto u39W7; else goto c39VZ;
       u39W7: // global
           Sp = Sp + 8;
           call _c39VV() args: 0, res: 0, upd: 0;
       c39VZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39W2; else goto c39W1;
       c39W2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39W1: // global
           _s2Vws::P64 = P64[R1 + 6];
           _s2Vwt::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2Vws::P64;
           P64[Hp] = _s2Vwt::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39VO_info" {
     block_c39VO_info:
         const _c39VO;
         const 0;
         const 4294967326;
         const S2VLN_srt+1216;
 },
 _c39VV() //  []
         { []
         }
     {offset
       c39VV: // global
           R1 = lvl18_r2UqR_closure;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2VwN_entry() //  [R1]
         { []
         }
     {offset
       c39Wt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c39WP; else goto c39WQ;
       c39WP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39WQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c39Wq_info;
           _s2Vw4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s2Vw4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u39WY; else goto c39Wr;
       u39WY: // global
           call _c39Wq(R1) args: 0, res: 0, upd: 0;
       c39Wr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VwN_info" {
     sat_s2VwN_info:
         const sat_s2VwN_entry;
         const 2;
         const 18;
 },
 _c39Wq() //  [R1]
         { []
         }
     {offset
       c39Wq: // global
           I64[Sp] = block_c39Ww_info;
           _s2VwC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2VwC::I64;
           if (R1 & 7 != 0) goto u39WX; else goto c39Wx;
       u39WX: // global
           call _c39Ww(R1) args: 0, res: 0, upd: 0;
       c39Wx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Wq_info" {
     block_c39Wq_info:
         const _c39Wq;
         const 1;
         const 30;
 },
 _c39Ww() //  [R1]
         { []
         }
     {offset
       c39Ww: // global
           I64[Sp] = block_c39WB_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u39WZ; else goto c39WC;
       u39WZ: // global
           call _c39WB(R1) args: 0, res: 0, upd: 0;
       c39WC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Ww_info" {
     block_c39Ww_info:
         const _c39Ww;
         const 65;
         const 30;
 },
 _c39WB() //  [R1]
         { []
         }
     {offset
       c39WB: // global
           _s2VwJ::I64 = I64[Sp + 8] + (I64[R1 + 7] - 1);
           I64[Sp + 8] = block_c39WM_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = _s2VwJ::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39WB_info" {
     block_c39WB_info:
         const _c39WB;
         const 65;
         const 30;
 },
 _c39WM() //  [R1, R2]
         { []
         }
     {offset
       c39WM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c39WW; else goto c39WV;
       c39WW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c39WV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39WM_info" {
     block_c39WM_info:
         const _c39WM;
         const 0;
         const 30;
 },
 sat_s2VwP_entry() //  [R1]
         { []
         }
     {offset
       c39X0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c39X2; else goto c39X3;
       c39X2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39X3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c39Wh_info;
           _s2Vvv::P64 = P64[R1 + 16];
           _s2Vw4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s2Vvv::P64;
           P64[Sp - 24] = _s2Vw4::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u39X7; else goto c39Wi;
       u39X7: // global
           call _c39Wh(R1) args: 0, res: 0, upd: 0;
       c39Wi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VwP_info" {
     sat_s2VwP_info:
         const sat_s2VwP_entry;
         const 3;
         const 15;
 },
 _c39Wh() //  [R1]
         { []
         }
     {offset
       c39Wh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39X6; else goto c39X5;
       c39X6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c39X5: // global
           _s2VwA::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2VwN_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl19_r2UqS_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s2VwA::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Wh_info" {
     block_c39Wh_info:
         const _c39Wh;
         const 2;
         const 30;
 },
 sat_s2Vx1_entry() //  [R1]
         { []
         }
     {offset
       c39Xx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c39Xy; else goto c39Xz;
       c39Xy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Xz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c39Xv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call dec'_s2VvY_entry(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vx1_info" {
     sat_s2Vx1_info:
         const sat_s2Vx1_entry;
         const 1;
         const 8800387989520;
         const S2VLN_srt+1224;
 },
 _c39Xv() //  [R1]
         { []
         }
     {offset
       c39Xv: // global
           _s2VwZ::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _s2VwZ::I64)) goto c39XG; else goto c39XH;
       c39XG: // global
           R1 = lvl34_r2Ur8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c39XH: // global
           R2 = _s2VwZ::I64;
           Sp = Sp + 8;
           call $wxs3_r2Urf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c39Xv_info" {
     block_c39Xv_info:
         const _c39Xv;
         const 0;
         const 8800387989534;
         const S2VLN_srt+1224;
 },
 sat_s2Vx9_entry() //  [R1]
         { []
         }
     {offset
       c39Y1: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vx9_info" {
     sat_s2Vx9_info:
         const sat_s2Vx9_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1176;
 },
 n1_s2Vxc_entry() //  [R1]
         { []
         }
     {offset
       c39Yk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39Yl; else goto c39Ym;
       c39Yl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Ym: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n1_s2Vxc_info" {
     n1_s2Vxc_info:
         const n1_s2Vxc_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1176;
 },
 sat_s2Vxi_entry() //  [R1]
         { []
         }
     {offset
       c39YB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39YC; else goto c39YD;
       c39YC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39YD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s2Vxe_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vxi_info" {
     sat_s2Vxi_info:
         const sat_s2Vxi_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s2Vxe_entry() //  [R1, R2]
         { []
         }
     {offset
       c39YH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39YL; else goto c39YK;
       c39YL: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c39YK: // global
           if (R2 == 1) goto c39YG; else goto c39YF;
       c39YG: // global
           _s2Vxd::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s2Vxd::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39YF: // global
           I64[Hp - 48] = sat_s2Vxi_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s2Vxe_info" {
     $wxs4_s2Vxe_info:
         const $wxs4_s2Vxe_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s2Vxj_entry() //  [R1]
         { []
         }
     {offset
       c39YN: // global
           _s2Vxj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c39YO; else goto c39YP;
       c39YP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c39YR; else goto c39YQ;
       c39YR: // global
           HpAlloc = 64;
           goto c39YO;
       c39YO: // global
           R1 = _s2Vxj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39YQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Vxj::P64;
           _s2Vvu::P64 = P64[_s2Vxj::P64 + 16];
           _s2Vxa::I64 = -I64[_s2Vxj::P64 + 24];
           if (%MO_S_Ge_W64(0, _s2Vxa::I64)) goto c39YT; else goto c39YU;
       c39YT: // global
           Hp = Hp - 64;
           R3 = _s2Vvu::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
       c39YU: // global
           I64[Hp - 56] = n1_s2Vxc_info;
           P64[Hp - 40] = _s2Vvu::P64;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = lvl20_r2UqT_closure+1;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = $wxs4_s2Vxe_info;
           P64[Hp] = Hp - 30;
           R2 = _s2Vxa::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call $wxs4_s2Vxe_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vxj_info" {
     sat_s2Vxj_info:
         const sat_s2Vxj_entry;
         const 4294967297;
         const 4294967315;
         const S2VLN_srt+1176;
 },
 sat_s2Vxu_entry() //  [R1]
         { []
         }
     {offset
       c39Zm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c39Zn; else goto c39Zo;
       c39Zn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39Zo: // global
           I64[Sp - 8] = block_c39Zj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u39Zx; else goto c39Zk;
       u39Zx: // global
           call _c39Zj(R1) args: 0, res: 0, upd: 0;
       c39Zk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vxu_info" {
     sat_s2Vxu_info:
         const sat_s2Vxu_entry;
         const 1;
         const 16;
 },
 _c39Zj() //  [R1]
         { []
         }
     {offset
       c39Zj: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c39Zv; else goto c39Zw;
       c39Zv: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c39Zw: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Zj_info" {
     block_c39Zj_info:
         const _c39Zj;
         const 0;
         const 30;
 },
 sat_s2VxD_entry() //  [R1]
         { []
         }
     {offset
       c39ZN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c39ZO; else goto c39ZP;
       c39ZO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c39ZP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s2Vxz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VxD_info" {
     sat_s2VxD_info:
         const sat_s2VxD_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s2Vxz_entry() //  [R1, R2]
         { []
         }
     {offset
       c39ZT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c39ZX; else goto c39ZW;
       c39ZX: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c39ZW: // global
           if (R2 == 1) goto c39ZS; else goto c39ZR;
       c39ZS: // global
           _s2Vxy::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s2Vxy::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c39ZR: // global
           I64[Hp - 48] = sat_s2VxD_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s2Vxz_info" {
     $wxs4_s2Vxz_info:
         const $wxs4_s2Vxz_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s2VxH_entry() //  [R1]
         { []
         }
     {offset
       c3a0a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3a0b; else goto c3a0c;
       c3a0b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a0c: // global
           I64[Sp - 8] = block_c3a07_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3a0l; else goto c3a08;
       u3a0l: // global
           call _c3a07(R1) args: 0, res: 0, upd: 0;
       c3a08: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2VxH_info" {
     sat_s2VxH_info:
         const sat_s2VxH_entry;
         const 1;
         const 16;
 },
 _c3a07() //  [R1]
         { []
         }
     {offset
       c3a07: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c3a0j; else goto c3a0k;
       c3a0j: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3a0k: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a07_info" {
     block_c3a07_info:
         const _c3a07;
         const 0;
         const 30;
 },
 ds_s2Vxo_entry() //  [R1]
         { []
         }
     {offset
       c3a0m: // global
           _s2Vxo::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3a0n; else goto c3a0o;
       c3a0o: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3a0q; else goto c3a0p;
       c3a0q: // global
           HpAlloc = 40;
           goto c3a0n;
       c3a0n: // global
           R1 = _s2Vxo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a0p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Vxo::P64;
           _s2Vvu::P64 = P64[_s2Vxo::P64 + 16];
           _s2Vxk::P64 = P64[_s2Vxo::P64 + 24];
           _s2Vxp::I64 = -I64[_s2Vxo::P64 + 32];
           if (%MO_S_Ge_W64(0, _s2Vxp::I64)) goto c3a0t; else goto c3a0x;
       c3a0t: // global
           I64[Hp - 32] = sat_s2Vxu_info;
           P64[Hp - 16] = _s2Vxk::P64;
           _c39Zf::P64 = Hp - 32;
           Hp = Hp - 16;
           I64[Sp - 24] = block_c3a0r_info;
           R4 = _s2Vvu::P64;
           R3 = _c39Zf::P64;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
       c3a0x: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = _s2Vvu::P64;
           I64[Hp - 8] = $wxs4_s2Vxz_info;
           P64[Hp] = Hp - 30;
           I64[Sp - 32] = block_c39ZZ_info;
           R2 = _s2Vxp::I64;
           R1 = Hp - 7;
           P64[Sp - 24] = _s2Vxk::P64;
           Sp = Sp - 32;
           call $wxs4_s2Vxz_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s2Vxo_info" {
     ds_s2Vxo_info:
         const ds_s2Vxo_entry;
         const 4294967298;
         const 12884901903;
         const S2VLN_srt+1192;
 },
 _c3a0r() //  [R1, R2]
         { []
         }
     {offset
       c3a0r: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3a0r_info" {
     block_c3a0r_info:
         const _c3a0r;
         const 0;
         const 4294967326;
         const S2VLN_srt+1192;
 },
 _c39ZZ() //  [R1]
         { []
         }
     {offset
       c39ZZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a0A; else goto c3a0z;
       c3a0A: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3a0z: // global
           I64[Hp - 16] = sat_s2VxH_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3a0w_info;
           R4 = R1;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c39ZZ_info" {
     block_c39ZZ_info:
         const _c39ZZ;
         const 1;
         const 12884901918;
         const S2VLN_srt+1192;
 },
 _c3a0w() //  [R1, R2]
         { []
         }
     {offset
       c3a0w: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3a0w_info" {
     block_c3a0w_info:
         const _c3a0w;
         const 0;
         const 4294967326;
         const S2VLN_srt+1192;
 },
 sat_s2VxX_entry() //  [R1]
         { []
         }
     {offset
       c3a0K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3a0L; else goto c3a0M;
       c3a0L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a0M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3a0H_info;
           _s2Vvl::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s2Vvl::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3a1k; else goto c3a0I;
       u3a1k: // global
           call _c3a0H(R1) args: 0, res: 0, upd: 0;
       c3a0I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VxX_info" {
     sat_s2VxX_info:
         const sat_s2VxX_entry;
         const 2;
         const 18;
 },
 _c3a0H() //  [R1]
         { []
         }
     {offset
       c3a0H: // global
           I64[Sp] = block_c3a0P_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3a1j; else goto c3a0R;
       u3a1j: // global
           call _c3a0P(R1) args: 0, res: 0, upd: 0;
       c3a0R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3a0H_info" {
     block_c3a0H_info:
         const _c3a0H;
         const 1;
         const 30;
 },
 _c3a0P() //  [R1]
         { []
         }
     {offset
       c3a0P: // global
           if (R1 & 7 == 1) goto c3a0Y; else goto c3a1d;
       c3a0Y: // global
           _s2Vvl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3a0V_info;
           R1 = _s2Vvl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3a1l; else goto c3a0Z;
       u3a1l: // global
           call _c3a0V(R1) args: 0, res: 0, upd: 0;
       c3a0Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3a1d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a1g; else goto c3a1f;
       c3a1g: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3a1f: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3a0P_info" {
     block_c3a0P_info:
         const _c3a0P;
         const 1;
         const 30;
 },
 _c3a0V() //  [R1]
         { []
         }
     {offset
       c3a0V: // global
           if (R1 & 7 == 1) goto c3a15; else goto c3a19;
       c3a15: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3a19: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3a0V_info" {
     block_c3a0V_info:
         const _c3a0V;
         const 0;
         const 30;
 },
 sat_s2Vy2_entry() //  [R1]
         { []
         }
     {offset
       c3a1u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3a1v; else goto c3a1w;
       c3a1v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a1w: // global
           I64[Sp - 24] = block_c3a1r_info;
           _s2Vxl::P64 = P64[R1 + 24];
           _s2Vxm::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _s2Vxl::P64;
           I64[Sp - 8] = _s2Vxm::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3a1M; else goto c3a1s;
       u3a1M: // global
           call _c3a1r(R1) args: 0, res: 0, upd: 0;
       c3a1s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vy2_info" {
     sat_s2Vy2_info:
         const sat_s2Vy2_entry;
         const 4294967298;
         const 15;
 },
 _c3a1r() //  [R1]
         { []
         }
     {offset
       c3a1r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3a1B; else goto c3a1A;
       c3a1B: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a1A: // global
           _s2VxZ::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2VxZ::I64, 0)) goto c3a1K; else goto c3a1L;
       c3a1K: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2VxZ::I64 + I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3a1L: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a1r_info" {
     block_c3a1r_info:
         const _c3a1r;
         const 130;
         const 30;
 },
 sat_s2Vyk_entry() //  [R1]
         { []
         }
     {offset
       c3a2n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3a2o; else goto c3a2p;
       c3a2o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a2p: // global
           I64[Sp - 16] = block_c3a2g_info;
           _s2Vvl::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s2Vvl::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3a2N; else goto c3a2h;
       u3a2N: // global
           call _c3a2g(R1) args: 0, res: 0, upd: 0;
       c3a2h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vyk_info" {
     sat_s2Vyk_info:
         const sat_s2Vyk_entry;
         const 2;
         const 18;
 },
 _c3a2g() //  [R1]
         { []
         }
     {offset
       c3a2g: // global
           if (R1 & 7 == 1) goto c3a2k; else goto c3a2l;
       c3a2k: // global
           _s2Vvl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3a2s_info;
           R1 = _s2Vvl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3a2M; else goto c3a2u;
       u3a2M: // global
           call _c3a2s(R1) args: 0, res: 0, upd: 0;
       c3a2u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3a2l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a2K; else goto c3a2J;
       c3a2K: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a2J: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a2g_info" {
     block_c3a2g_info:
         const _c3a2g;
         const 1;
         const 30;
 },
 _c3a2s() //  [R1]
         { []
         }
     {offset
       c3a2s: // global
           if (R1 & 7 == 1) goto c3a2A; else goto c3a2E;
       c3a2A: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3a2E: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a2s_info" {
     block_c3a2s_info:
         const _c3a2s;
         const 0;
         const 30;
 },
 sat_s2Vyr_entry() //  [R1]
         { []
         }
     {offset
       c3a31: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3a32; else goto c3a33;
       c3a32: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a33: // global
           I64[Sp - 16] = block_c3a2U_info;
           _s2Vvl::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s2Vvl::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3a3r; else goto c3a2V;
       u3a3r: // global
           call _c3a2U(R1) args: 0, res: 0, upd: 0;
       c3a2V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vyr_info" {
     sat_s2Vyr_info:
         const sat_s2Vyr_entry;
         const 2;
         const 18;
 },
 _c3a2U() //  [R1]
         { []
         }
     {offset
       c3a2U: // global
           if (R1 & 7 == 1) goto c3a2Y; else goto c3a2Z;
       c3a2Y: // global
           _s2Vvl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3a36_info;
           R1 = _s2Vvl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3a3q; else goto c3a38;
       u3a3q: // global
           call _c3a36(R1) args: 0, res: 0, upd: 0;
       c3a38: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3a2Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a3o; else goto c3a3n;
       c3a3o: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a3n: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a2U_info" {
     block_c3a2U_info:
         const _c3a2U;
         const 1;
         const 30;
 },
 _c3a36() //  [R1]
         { []
         }
     {offset
       c3a36: // global
           if (R1 & 7 == 1) goto c3a3e; else goto c3a3i;
       c3a3e: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3a3i: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a36_info" {
     block_c3a36_info:
         const _c3a36;
         const 0;
         const 30;
 },
 sat_s2Vyw_entry() //  [R1]
         { []
         }
     {offset
       c3a3D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3a3E; else goto c3a3F;
       c3a3E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a3F: // global
           I64[Sp - 16] = block_c3a3x_info;
           R3 = P64[R1 + 24];
           R2 = GHC.Show.intToDigit_closure+1;
           P64[Sp - 8] = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2Vyw_info" {
     sat_s2Vyw_info:
         const sat_s2Vyw_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+1176;
 },
 _c3a3x() //  [R1]
         { []
         }
     {offset
       c3a3x: // global
           if (R1 & 7 == 1) goto c3a3A; else goto c3a3B;
       c3a3A: // global
           _s2Vvl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3a3I_info;
           R1 = _s2Vvl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3a42; else goto c3a3K;
       u3a42: // global
           call _c3a3I(R1) args: 0, res: 0, upd: 0;
       c3a3K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3a3B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a40; else goto c3a3Z;
       c3a40: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a3Z: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a3x_info" {
     block_c3a3x_info:
         const _c3a3x;
         const 1;
         const 30;
 },
 _c3a3I() //  [R1]
         { []
         }
     {offset
       c3a3I: // global
           if (R1 & 7 == 1) goto c3a3Q; else goto c3a3U;
       c3a3Q: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3a3U: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a3I_info" {
     block_c3a3I_info:
         const _c3a3I;
         const 0;
         const 30;
 },
 $wdoFmt_s2Vvs_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3a48: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3a49; else goto u3a6v;
       c3a49: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3a6v: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c39SE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wdoFmt_s2Vvs_info" {
     $wdoFmt_s2Vvs_info:
         const $wdoFmt_s2Vvs_entry;
         const 2;
         const 9042190353301515;
         const 12884901911;
         const S2VLN_srt+1144;
 },
 _c39SE() //  []
         { []
         }
     {offset
       c39SE: // global
           I64[Sp - 16] = block_c39SH_info;
           R1 = P64[Sp + 8];
           _s2Vvs::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s2Vvs::P64 + 13];
           P64[Sp + 8] = P64[_s2Vvs::P64 + 5];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3a6A; else goto c39SI;
       u3a6A: // global
           call _c39SH(R1) args: 0, res: 0, upd: 0;
       c39SI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c39SH() //  [R1]
         { []
         }
     {offset
       c39SH: // global
           _c3a47::P64 = R1 & 7;
           if (_c3a47::P64 < 3) goto u3a6u; else goto c3a46;
       u3a6u: // global
           _s2Vvk::P64 = P64[Sp + 24];
           if (_c3a47::P64 < 2) goto c3a44; else goto c3a45;
       c3a44: // global
           I64[Sp + 24] = block_c39SM_info;
           R1 = _s2Vvk::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3a6B; else goto c39SN;
       u3a6B: // global
           call _c39SM(R1) args: 0, res: 0, upd: 0;
       c39SN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3a45: // global
           I64[Sp] = block_c39XK_info;
           R1 = _s2Vvk::P64;
           if (R1 & 7 != 0) goto u3a6C; else goto c39XL;
       u3a6C: // global
           call _c39XK(R1) args: 0, res: 0, upd: 0;
       c39XL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3a46: // global
           I64[Sp + 8] = block_c3a64_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3a6D; else goto c3a66;
       u3a6D: // global
           call _c3a64(R1) args: 0, res: 0, upd: 0;
       c3a66: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39SH_info" {
     block_c39SH_info:
         const _c39SH;
         const 5;
         const 9042190353301534;
         const S2VLN_srt+1144;
 },
 _c39SM() //  [R1]
         { []
         }
     {offset
       c39SM: // global
           _s2Vvu::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3a4e; else goto c3a4T;
       c3a4e: // global
           I64[Sp + 8] = block_c39SR_info;
           R3 = _s2Vvu::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3a4T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a4W; else goto c3a4V;
       c3a4W: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a4V: // global
           _s2VvX::P64 = P64[R1 + 6];
           I64[Hp - 16] = dec'_s2VvY_info;
           P64[Hp] = _s2VvX::P64;
           I64[Sp - 8] = block_c39X8_info;
           R1 = _s2Vvu::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3a6E; else goto c39X9;
       u3a6E: // global
           call _c39X8(R1) args: 0, res: 0, upd: 0;
       c39X9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39SM_info" {
     block_c39SM_info:
         const _c39SM;
         const 2;
         const 565118911905822;
         const S2VLN_srt+1176;
 },
 _c39SR() //  [R1]
         { []
         }
     {offset
       c39SR: // global
           if (R1 & 7 == 1) goto c3a4i; else goto c3a4k;
       c3a4i: // global
           R1 = lvl13_r2UqM_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3a4k: // global
           I64[Sp - 8] = block_c39SW_info;
           _s2VvA::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2VvA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3a6F; else goto c39SX;
       u3a6F: // global
           call _c39SW(R1) args: 0, res: 0, upd: 0;
       c39SX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39SR_info" {
     block_c39SR_info:
         const _c39SR;
         const 1;
         const 12884901918;
         const S2VLN_srt+1232;
 },
 _c39SW() //  [R1]
         { []
         }
     {offset
       c39SW: // global
           if (I64[R1 + 7] == 48) goto c3a4H; else goto u3a6x;
       c3a4H: // global
           I64[Sp - 8] = block_c3a4G_info;
           _s2VvB::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s2VvB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3a6G; else goto c3a4I;
       u3a6G: // global
           call _c3a4G(R1) args: 0, res: 0, upd: 0;
       c3a4I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3a6x: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c39T4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39SW_info" {
     block_c39SW_info:
         const _c39SW;
         const 2;
         const 4294967326;
         const S2VLN_srt+1240;
 },
 _c3a4G() //  [R1]
         { []
         }
     {offset
       c3a4G: // global
           if (R1 & 7 == 1) goto c3a4O; else goto u3a6T;
       c3a4O: // global
           R1 = lvl16_r2UqP_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3a6T: // global
           call _c39T4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3a4G_info" {
     block_c3a4G_info:
         const _c3a4G;
         const 3;
         const 4294967326;
         const S2VLN_srt+1240;
 },
 _c39T4() //  []
         { []
         }
     {offset
       c39T4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a4o; else goto c3a4n;
       c3a4o: // global
           HpAlloc = 24;
           I64[Sp] = block_c39T4_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3a4n: // global
           I64[Hp - 16] = show_e'_s2VvF_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c39Tt_info;
           R1 = P64[Sp + 16];
           P64[Sp + 24] = Hp - 16;
           if (R1 & 7 != 0) goto u3a6I; else goto c39Tu;
       u3a6I: // global
           call _c39Tt(R1) args: 0, res: 0, upd: 0;
       c39Tu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39T4_info" {
     block_c39T4_info:
         const _c39T4;
         const 3;
         const 30;
 },
 _c39Tt() //  [R1]
         { []
         }
     {offset
       c39Tt: // global
           _c39T6::P64 = P64[Sp + 24];
           _s2VvB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3a4r; else goto c3a4x;
       c3a4r: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3a4u; else goto c3a4t;
       c3a4u: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a4t: // global
           I64[Hp - 40] = sat_s2VvN_info;
           P64[Hp - 24] = _c39T6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2VvB::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3a4x: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3a4A; else goto c3a4z;
       c3a4A: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a4z: // global
           I64[Hp - 72] = sat_s2VvR_info;
           P64[Hp - 56] = _c39T6::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s2VvB::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Tt_info" {
     block_c39Tt_info:
         const _c39Tt;
         const 131;
         const 30;
 },
 _c39X8() //  [R1]
         { []
         }
     {offset
       c39X8: // global
           if (R1 & 7 == 1) goto u3a6J; else goto c3a58;
       u3a6J: // global
           call _c39Ul() args: 0, res: 0, upd: 0;
       c3a58: // global
           I64[Sp - 8] = block_c39Xe_info;
           _s2VwT::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2VwT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3a6K; else goto c39Xf;
       u3a6K: // global
           call _c39Xe(R1) args: 0, res: 0, upd: 0;
       c39Xf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39X8_info" {
     block_c39X8_info:
         const _c39X8;
         const 3;
         const 563469644464158;
         const S2VLN_srt+1176;
 },
 _c39Xe() //  [R1]
         { []
         }
     {offset
       c39Xe: // global
           if (I64[R1 + 7] == 0) goto c3a5c; else goto u3a6w;
       c3a5c: // global
           _s2VwT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c39Xm_info;
           R1 = _s2VwT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3a6L; else goto c39Xn;
       u3a6L: // global
           call _c39Xm(R1) args: 0, res: 0, upd: 0;
       c39Xn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3a6w: // global
           Sp = Sp + 8;
           call _c39Ul() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39Xe_info" {
     block_c39Xe_info:
         const _c39Xe;
         const 4;
         const 563469644464158;
         const S2VLN_srt+1176;
 },
 _c39Xm() //  [R1]
         { []
         }
     {offset
       c39Xm: // global
           if (R1 & 7 == 1) goto c3a5g; else goto u3a6N;
       c3a5g: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3a5j; else goto c3a5i;
       c3a5j: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a5i: // global
           I64[Hp - 64] = sat_s2Vx1_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3a6N: // global
           call _c39Ul() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c39Xm_info" {
     block_c39Xm_info:
         const _c39Xm;
         const 3;
         const 563469644464158;
         const S2VLN_srt+1176;
 },
 _c39Ul() //  []
         { []
         }
     {offset
       c39Ul: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c3a52; else goto c3a51;
       c3a52: // global
           HpAlloc = 168;
           I64[Sp] = block_c39Ul_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3a51: // global
           I64[Hp - 160] = ds1_s2Vw4_info;
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 8];
           I64[Hp - 128] = ds2_s2Vwc_info;
           _c39Un::P64 = Hp - 160;
           P64[Hp - 112] = _c39Un::P64;
           I64[Hp - 104] = sat_s2VwP_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = _c39Un::P64;
           _c39UU::P64 = Hp - 128;
           P64[Hp - 72] = _c39UU::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = lvl14_r2UqN_closure+1;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c39UU::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Ul_info" {
     block_c39Ul_info:
         const _c39Ul;
         const 3;
         const 244813135902;
         const S2VLN_srt+1176;
 },
 _c39XK() //  [R1]
         { []
         }
     {offset
       c39XK: // global
           _s2Vvv::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c3a5r; else goto c3a5z;
       c3a5r: // global
           I64[Sp + 24] = block_c39XP_info;
           R1 = _s2Vvv::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3a6O; else goto c39XQ;
       u3a6O: // global
           call _c39XP(R1) args: 0, res: 0, upd: 0;
       c39XQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3a5z: // global
           I64[Sp] = block_c39YX_info;
           _s2Vxk::P64 = P64[R1 + 6];
           R1 = _s2Vvv::P64;
           P64[Sp + 40] = _s2Vxk::P64;
           if (R1 & 7 != 0) goto u3a6P; else goto c39YY;
       u3a6P: // global
           call _c39YX(R1) args: 0, res: 0, upd: 0;
       c39YY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39XK_info" {
     block_c39XK_info:
         const _c39XK;
         const 389;
         const 906238099486;
         const S2VLN_srt+1144;
 },
 _c39XP() //  [R1]
         { []
         }
     {offset
       c39XP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3a5u; else goto c3a5t;
       c3a5u: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a5t: // global
           _s2Vvu::P64 = P64[Sp + 8];
           _s2Vx7::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2Vx7::I64, 0)) goto c3a5w; else goto c3a5x;
       c3a5w: // global
           I64[Hp - 24] = sat_s2Vx9_info;
           P64[Hp - 8] = _s2Vvu::P64;
           _c39XX::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _c39XX::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s2Vx7::I64;
           Sp = Sp + 24;
           call $wf_r2UqX_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3a5x: // global
           I64[Hp - 24] = sat_s2Vxj_info;
           P64[Hp - 8] = _s2Vvu::P64;
           I64[Hp] = _s2Vx7::I64;
           R3 = Hp - 24;
           R2 = lvl36_r2Urb_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39XP_info" {
     block_c39XP_info:
         const _c39XP;
         const 130;
         const 38654705694;
         const S2VLN_srt+1152;
 },
 _c39YX() //  [R1]
         { []
         }
     {offset
       c39YX: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3a5C; else goto c3a5B;
       c3a5C: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a5B: // global
           _s2Vvu::P64 = P64[Sp + 32];
           _s2Vxk::P64 = P64[Sp + 40];
           _s2Vxm::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2Vxm::I64, 0)) goto c3a5G; else goto c3a5H;
       c3a5G: // global
           I64[Hp - 112] = ds_s2Vxo_info;
           P64[Hp - 96] = _s2Vvu::P64;
           P64[Hp - 88] = _s2Vxk::P64;
           I64[Hp - 80] = _s2Vxm::I64;
           I64[Hp - 72] = sat_s2VxX_info;
           P64[Hp - 56] = P64[Sp + 8];
           _c39Z5::P64 = Hp - 112;
           P64[Hp - 48] = _c39Z5::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c39Z5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3a5H: // global
           I64[Hp - 112] = sat_s2Vy2_info;
           P64[Hp - 96] = _s2Vxk::P64;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = _s2Vxm::I64;
           _c3a1n::P64 = Hp - 112;
           Hp = Hp - 80;
           I64[Sp] = block_c3a1N_info;
           R4 = _s2Vvu::P64;
           R3 = _c3a1n::P64;
           R2 = base_r2UqK_closure+1;
           I64[Sp + 40] = _s2Vxm::I64;
           call GHC.Float.$wroundTo_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39YX_info" {
     block_c39YX_info:
         const _c39YX;
         const 389;
         const 897648164894;
         const S2VLN_srt+1144;
 },
 _c3a1N() //  [R1, R2]
         { []
         }
     {offset
       c3a1N: // global
           I64[Sp] = block_c3a1P_info;
           R1 = R1;
           P64[Sp + 32] = R2;
           if (R1 & 7 != 0) goto u3a6Q; else goto c3a1Q;
       u3a6Q: // global
           call _c3a1P(R1) args: 0, res: 0, upd: 0;
       c3a1Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a1N_info" {
     block_c3a1N_info:
         const _c3a1N;
         const 1925;
         const 73014444062;
         const S2VLN_srt+1144;
 },
 _c3a1P() //  [R1]
         { []
         }
     {offset
       c3a1P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3a5L; else goto c3a5K;
       c3a5L: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a5K: // global
           _s2Vy5::P64 = P64[Sp + 32];
           _s2Vy8::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2Vy8::I64, 0)) goto c3a5N; else goto c3a61;
       c3a5N: // global
           Hp = Hp - 32;
           I64[Sp] = block_c3a20_info;
           R3 = _s2Vy5::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           I64[Sp + 40] = _s2Vy8::I64;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3a61: // global
           I64[Hp - 24] = sat_s2Vyw_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s2Vy5::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a1P_info" {
     block_c3a1P_info:
         const _c3a1P;
         const 1413;
         const 73014444062;
         const S2VLN_srt+1144;
 },
 _c3a20() //  [R1]
         { []
         }
     {offset
       c3a20: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3a5Q; else goto c3a5P;
       c3a5Q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a5P: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40];
           I64[Sp] = block_c3a25_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.List.$wsplitAt'_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a20_info" {
     block_c3a20_info:
         const _c3a20;
         const 1925;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c3a25() //  [R1, R2]
         { []
         }
     {offset
       c3a25: // global
           I64[Sp] = block_c3a27_info;
           R1 = R1;
           P64[Sp + 40] = R2;
           if (R1 & 7 != 0) goto u3a6R; else goto c3a28;
       u3a6R: // global
           call _c3a27(R1) args: 0, res: 0, upd: 0;
       c3a28: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a25_info" {
     block_c3a25_info:
         const _c3a25;
         const 1925;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c3a27() //  [R1]
         { []
         }
     {offset
       c3a27: // global
           _s2Vvl::P64 = P64[Sp + 8];
           _s2Vye::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c3a5T; else goto c3a5X;
       c3a5T: // global
           Hp = Hp + 32;
           _s2Vyf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3a60; else goto c3a5V;
       c3a5V: // global
           I64[Hp - 24] = sat_s2Vyk_info;
           P64[Hp - 8] = _s2Vvl::P64;
           P64[Hp] = _s2Vye::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3a5X: // global
           Hp = Hp + 32;
           _s2Vyf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3a60; else goto c3a5Z;
       c3a60: // global
           HpAlloc = 32;
           R1 = _s2Vyf::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a5Z: // global
           I64[Hp - 24] = sat_s2Vyr_info;
           P64[Hp - 8] = _s2Vvl::P64;
           P64[Hp] = _s2Vye::P64;
           R3 = Hp - 24;
           R2 = _s2Vyf::P64;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a27_info" {
     block_c3a27_info:
         const _c3a27;
         const 901;
         const 4294967326;
         const S2VLN_srt+1144;
 },
 _c3a64() //  [R1]
         { []
         }
     {offset
       c3a64: // global
           _s2Vvu::P64 = P64[Sp + 24];
           _s2Vyx::P64 = R1;
           _s2Vyy::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s2Vyy::I64, 0)) goto c3a6l; else goto c3a6k;
       c3a6k: // global
           if (%MO_S_Gt_W64(_s2Vyy::I64, 7)) goto c3a6l; else goto c3a6h;
       c3a6l: // global
           P64[Sp + 16] = GHC.Float.FFExponent_closure+1;
           P64[Sp + 24] = _s2Vvu::P64;
           P64[Sp + 32] = _s2Vyx::P64;
           Sp = Sp + 8;
           goto u3a6V;
       c3a6h: // global
           P64[Sp + 16] = GHC.Float.FFFixed_closure+2;
           P64[Sp + 24] = _s2Vvu::P64;
           P64[Sp + 32] = _s2Vyx::P64;
           Sp = Sp + 8;
           goto u3a6V;
       u3a6V: // global
           call _c39SE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3a64_info" {
     block_c3a64_info:
         const _c3a64;
         const 644;
         const 9042190353301534;
         const S2VLN_srt+1144;
 },
 sat_s2VyI_entry() //  [R1]
         { []
         }
     {offset
       c3a70: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3a71; else goto c3a72;
       c3a71: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a72: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VyI_info" {
     sat_s2VyI_info:
         const sat_s2VyI_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1104;
 },
 sat_s2VyC_entry() //  [R1]
         { []
         }
     {offset
       c3a7k: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3a7l; else goto c3a7m;
       c3a7l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a7m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VyC_info" {
     sat_s2VyC_info:
         const sat_s2VyC_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . u3a8S_srtd" {
     u3a8S_srtd:
         const S2VLN_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 sat_s2VyG_entry() //  [R1]
         { []
         }
     {offset
       c3a7p: // global
           _s2VyG::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3a7q; else goto c3a7r;
       c3a7r: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3a7t; else goto c3a7s;
       c3a7t: // global
           HpAlloc = 32;
           goto c3a7q;
       c3a7q: // global
           R1 = _s2VyG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a7s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2VyG::P64;
           _s2Vvi::P64 = P64[_s2VyG::P64 + 16];
           _s2Vvj::P64 = P64[_s2VyG::P64 + 24];
           _s2Vvm::P64 = P64[_s2VyG::P64 + 32];
           _s2Vvq::P64 = P64[_s2VyG::P64 + 40];
           _s2Vvs::P64 = P64[_s2VyG::P64 + 48];
           I64[Hp - 24] = sat_s2VyC_info;
           P64[Hp - 8] = _s2Vvm::P64;
           P64[Hp] = _s2Vvq::P64;
           I64[Sp - 40] = block_c3a7n_info;
           R4 = Hp - 24;
           R3 = GHC.Float.expts4_closure;
           R2 = _s2Vvi::P64;
           P64[Sp - 32] = _s2Vvj::P64;
           P64[Sp - 24] = _s2Vvs::P64;
           Sp = Sp - 40;
           call GHC.Float.$wfloatToDigits_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VyG_info" {
     sat_s2VyG_info:
         const sat_s2VyG_entry;
         const 5;
         const 18446744069414584335;
         const u3a8S_srtd;
 },
 _c3a7n() //  [R1, R2]
         { []
         }
     {offset
       c3a7n: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wdoFmt_s2Vvs_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3a7n_info" {
     block_c3a7n_info:
         const _c3a7n;
         const 2;
         const 9042190353301534;
         const S2VLN_srt+1144;
 },
 sat_s2VyP_entry() //  [R1]
         { []
         }
     {offset
       c3a7B: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3a7C; else goto c3a7D;
       c3a7C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3a7D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VyP_info" {
     sat_s2VyP_info:
         const sat_s2VyP_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1104;
 },
 section ""relreadonly" . u3a8T_srtd" {
     u3a8T_srtd:
         const S2VLN_srt+752;
         const 72;
         const 13809778083936337921;
         const 195;
 },
 GHC.Float.formatRealFloatAlt_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3a7I: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3a7J; else goto c3a7K;
       c3a7J: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.formatRealFloatAlt_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3a7K: // global
           I64[Sp - 48] = block_c39Sf_info;
           _s2Vvi::P64 = R2;
           R2 = R2;
           I64[Sp - 64] = stg_ap_p_info;
           P64[Sp - 56] = R6;
           P64[Sp - 40] = _s2Vvi::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 64;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.formatRealFloatAlt_info" {
     GHC.Float.formatRealFloatAlt_info:
         const GHC.Float.formatRealFloatAlt_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u3a8T_srtd;
 },
 section ""relreadonly" . u3a8U_srtd" {
     u3a8U_srtd:
         const S2VLN_srt+752;
         const 71;
         const 13809778083936337921;
         const 67;
 },
 _c39Sf() //  [R1]
         { []
         }
     {offset
       c39Sf: // global
           if (R1 & 7 == 1) goto c3a7F; else goto c3a7G;
       c3a7F: // global
           I64[Sp] = block_c39Sj_info;
           R2 = P64[Sp + 8];
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
       c3a7G: // global
           R1 = lvl31_r2Ur5_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Sf_info" {
     block_c39Sf_info:
         const _c39Sf;
         const 5;
         const 18446744069414584350;
         const u3a8U_srtd;
 },
 section ""relreadonly" . u3a8V_srtd" {
     u3a8V_srtd:
         const S2VLN_srt+752;
         const 71;
         const 13809778083936337921;
         const 65;
 },
 _c39Sj() //  [R1]
         { []
         }
     {offset
       c39Sj: // global
           I64[Sp] = block_c39Sn_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Sj_info" {
     block_c39Sj_info:
         const _c39Sj;
         const 5;
         const 18446744069414584350;
         const u3a8V_srtd;
 },
 section ""relreadonly" . u3a8W_srtd" {
     u3a8W_srtd:
         const S2VLN_srt+752;
         const 71;
         const 13809778083936337921;
         const 65;
 },
 _c39Sn() //  [R1]
         { []
         }
     {offset
       c39Sn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a7P; else goto c3a7O;
       c3a7P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a7O: // global
           I64[Hp - 16] = $dNum_s2Vvq_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c39Sy_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Sn_info" {
     block_c39Sn_info:
         const _c39Sn;
         const 5;
         const 18446744069414584350;
         const u3a8W_srtd;
 },
 section ""relreadonly" . u3a8X_srtd" {
     u3a8X_srtd:
         const S2VLN_srt+752;
         const 71;
         const 13809778083936337921;
         const 65;
 },
 _c39Sy() //  [R1]
         { []
         }
     {offset
       c39Sy: // global
           _c39Sr::P64 = P64[Sp + 16];
           _s2Vvp::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3a7R; else goto c3a8q;
       c3a7R: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3a7U; else goto c3a7T;
       c3a7U: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a7T: // global
           I64[Hp - 40] = $wdoFmt_s2Vvs_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           I64[Hp - 16] = sat_s2VyI_info;
           P64[Hp] = _c39Sr::P64;
           I64[Sp + 8] = block_c3a73_info;
           R2 = _s2Vvp::P64;
           P64[Sp + 40] = Hp - 16;
           P64[Sp + 48] = Hp - 37;
           Sp = Sp + 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
       c3a8q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3a8t; else goto c3a8s;
       c3a8t: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3a8s: // global
           I64[Hp - 16] = sat_s2VyP_info;
           P64[Hp] = _c39Sr::P64;
           I64[Sp + 40] = block_c3a8p_info;
           R2 = _s2Vvp::P64;
           P64[Sp + 48] = Hp - 16;
           Sp = Sp + 40;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c39Sy_info" {
     block_c39Sy_info:
         const _c39Sy;
         const 7;
         const 18446744069414584350;
         const u3a8X_srtd;
 },
 section ""relreadonly" . u3a8Y_srtd" {
     u3a8Y_srtd:
         const S2VLN_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 _c3a73() //  [R1]
         { []
         }
     {offset
       c3a73: // global
           I64[Sp] = block_c3a7V_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 48];
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a73_info" {
     block_c3a73_info:
         const _c3a73;
         const 6;
         const 18446744069414584350;
         const u3a8Y_srtd;
 },
 section ""relreadonly" . u3a8Z_srtd" {
     u3a8Z_srtd:
         const S2VLN_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 _c3a7V() //  [R1]
         { []
         }
     {offset
       c3a7V: // global
           if (R1 & 7 == 1) goto c3a87; else goto u3a8Q;
       c3a87: // global
           I64[Sp] = block_c3a84_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 48];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
       u3a8Q: // global
           call _c3a7a() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3a7V_info" {
     block_c3a7V_info:
         const _c3a7V;
         const 518;
         const 18446744069414584350;
         const u3a8Z_srtd;
 },
 section ""relreadonly" . u3a90_srtd" {
     u3a90_srtd:
         const S2VLN_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 _c3a84() //  [R1]
         { []
         }
     {offset
       c3a84: // global
           if (R1 & 7 == 1) goto c3a8e; else goto u3a8R;
       c3a8e: // global
           _s2Vvi::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3a8b_info;
           R4 = P64[Sp + 48];
           R3 = GHC.Float.expts4_closure;
           R2 = _s2Vvi::P64;
           Sp = Sp + 16;
           call GHC.Float.$wfloatToDigits_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
       u3a8R: // global
           call _c3a7a() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3a84_info" {
     block_c3a84_info:
         const _c3a84;
         const 518;
         const 18446744069414584350;
         const u3a90_srtd;
 },
 _c3a8b() //  [R1, R2]
         { []
         }
     {offset
       c3a8b: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call $wdoFmt_s2Vvs_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a8b_info" {
     block_c3a8b_info:
         const _c3a8b;
         const 644;
         const 9042190353301534;
         const S2VLN_srt+1144;
 },
 section ""relreadonly" . u3a91_srtd" {
     u3a91_srtd:
         const S2VLN_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 _c3a7a() //  []
         { []
         }
     {offset
       c3a7a: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3a80; else goto c3a7Z;
       c3a80: // global
           HpAlloc = 80;
           I64[Sp] = block_c3a7a_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3a7Z: // global
           I64[Hp - 72] = sat_s2VyG_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a7a_info" {
     block_c3a7a_info:
         const _c3a7a;
         const 518;
         const 18446744069414584350;
         const u3a91_srtd;
 },
 _c3a8p() //  [R1]
         { []
         }
     {offset
       c3a8p: // global
           _s2Vvm::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3a8x_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s2Vvm::P64;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a8p_info" {
     block_c3a8p_info:
         const _c3a8p;
         const 2;
         const 12884901918;
         const S2VLN_srt+1256;
 },
 _c3a8x() //  [R1]
         { []
         }
     {offset
       c3a8x: // global
           if (R1 & 7 == 1) goto c3a8E; else goto c3a8I;
       c3a8E: // global
           R1 = lvl27_r2Ur1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3a8I: // global
           R1 = lvl29_r2Ur3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3a8x_info" {
     block_c3a8x_info:
         const _c3a8x;
         const 0;
         const 12884901918;
         const S2VLN_srt+1256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.751621903 UTC

[section ""data" . GHC.Float.formatRealFloat_closure" {
     GHC.Float.formatRealFloat_closure:
         const GHC.Float.formatRealFloat_info;
         const 0;
 },
 GHC.Float.formatRealFloat_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3ahA: // global
           R6 = R5;
           R5 = GHC.Types.False_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.formatRealFloat_info" {
     GHC.Float.formatRealFloat_info:
         const GHC.Float.formatRealFloat_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S2VLN_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.756347285 UTC

[section ""data" . GHC.Float.showFloat_closure" {
     GHC.Float.showFloat_closure:
         const GHC.Float.showFloat_info;
         const 0;
 },
 sat_s2VyX_entry() //  [R1]
         { []
         }
     {offset
       c3ahP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ahQ; else goto c3ahR;
       c3ahQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ahR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 24];
           R5 = GHC.Types.False_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2VyX_info" {
     sat_s2VyX_info:
         const sat_s2VyX_entry;
         const 2;
         const 4294967314;
         const S2VLN_srt+1320;
 },
 GHC.Float.showFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ahS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ahW; else goto c3ahV;
       c3ahW: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.showFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ahV: // global
           I64[Hp - 24] = sat_s2VyX_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.showFloat_info" {
     GHC.Float.showFloat_info:
         const GHC.Float.showFloat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.764593974 UTC

[section ""data" . GHC.Float.$fShowDouble2_closure" {
     GHC.Float.$fShowDouble2_closure:
         const GHC.Float.$fShowDouble2_info;
         const 0;
 },
 sat_s2Vz1_entry() //  [R1]
         { []
         }
     {offset
       c3aig: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3aih; else goto c3aii;
       c3aih: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3aii: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3aid_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3aim; else goto c3aie;
       u3aim: // global
           call _c3aid(R1) args: 0, res: 0, upd: 0;
       c3aie: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vz1_info" {
     sat_s2Vz1_info:
         const sat_s2Vz1_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1296;
 },
 _c3aid() //  [R1]
         { []
         }
     {offset
       c3aid: // global
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 8;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3aid_info" {
     block_c3aid_info:
         const _c3aid;
         const 0;
         const 4294967326;
         const S2VLN_srt+1296;
 },
 GHC.Float.$fShowDouble2_entry() //  [R2]
         { []
         }
     {offset
       c3ain: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3air; else goto c3aiq;
       c3air: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Float.$fShowDouble2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3aiq: // global
           I64[Hp - 16] = sat_s2Vz1_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble2_info" {
     GHC.Float.$fShowDouble2_info:
         const GHC.Float.$fShowDouble2_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const S2VLN_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.772752199 UTC

[section ""data" . GHC.Float.$fShowDouble_$cshowsPrec_closure" {
     GHC.Float.$fShowDouble_$cshowsPrec_closure:
         const GHC.Float.$fShowDouble_$cshowsPrec_info;
         const 0;
 },
 GHC.Float.$fShowDouble_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3aiL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3aiM; else goto c3aiN;
       c3aiM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowDouble_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3aiN: // global
           I64[Sp - 16] = block_c3aiI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3aiR; else goto c3aiJ;
       u3aiR: // global
           call _c3aiI(R1) args: 0, res: 0, upd: 0;
       c3aiJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$cshowsPrec_info" {
     GHC.Float.$fShowDouble_$cshowsPrec_info:
         const GHC.Float.$fShowDouble_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+1336;
 },
 _c3aiI() //  [R1]
         { []
         }
     {offset
       c3aiI: // global
           D1 = F64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 16;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3aiI_info" {
     block_c3aiI_info:
         const _c3aiI;
         const 1;
         const 4294967326;
         const S2VLN_srt+1336;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.779379718 UTC

[section ""data" . GHC.Float.$fShowDouble_$cshow_closure" {
     GHC.Float.$fShowDouble_$cshow_closure:
         const GHC.Float.$fShowDouble_$cshow_info;
         const 0;
 },
 GHC.Float.$fShowDouble_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c3aj8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3aj9; else goto c3aja;
       c3aj9: // global
           R2 = R2;
           R1 = GHC.Float.$fShowDouble_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3aja: // global
           I64[Sp - 8] = block_c3aj5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3aje; else goto c3aj6;
       u3aje: // global
           call _c3aj5(R1) args: 0, res: 0, upd: 0;
       c3aj6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$cshow_info" {
     GHC.Float.$fShowDouble_$cshow_info:
         const GHC.Float.$fShowDouble_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S2VLN_srt+1336;
 },
 _c3aj5() //  [R1]
         { []
         }
     {offset
       c3aj5: // global
           D1 = F64[R1 + 7];
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3aj5_info" {
     block_c3aj5_info:
         const _c3aj5;
         const 0;
         const 4294967326;
         const S2VLN_srt+1336;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.786125413 UTC

[section ""data" . GHC.Float.$fShowDouble1_closure" {
     GHC.Float.$fShowDouble1_closure:
         const GHC.Float.$fShowDouble1_info;
         const 0;
 },
 GHC.Float.$fShowDouble1_entry() //  [R2]
         { []
         }
     {offset
       c3ajv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ajw; else goto c3ajx;
       c3ajw: // global
           R2 = R2;
           R1 = GHC.Float.$fShowDouble1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ajx: // global
           I64[Sp - 8] = block_c3ajs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ajB; else goto c3ajt;
       u3ajB: // global
           call _c3ajs(R1) args: 0, res: 0, upd: 0;
       c3ajt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble1_info" {
     GHC.Float.$fShowDouble1_info:
         const GHC.Float.$fShowDouble1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S2VLN_srt+1336;
 },
 _c3ajs() //  [R1]
         { []
         }
     {offset
       c3ajs: // global
           D1 = F64[R1 + 7];
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ajs_info" {
     block_c3ajs_info:
         const _c3ajs;
         const 0;
         const 4294967326;
         const S2VLN_srt+1336;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.792669457 UTC

[section ""data" . GHC.Float.$fShowDouble_$cshowList_closure" {
     GHC.Float.$fShowDouble_$cshowList_closure:
         const GHC.Float.$fShowDouble_$cshowList_info;
         const 0;
 },
 GHC.Float.$fShowDouble_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ajP: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Float.$fShowDouble1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$cshowList_info" {
     GHC.Float.$fShowDouble_$cshowList_info:
         const GHC.Float.$fShowDouble_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S2VLN_srt+1360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.796590991 UTC

[section ""data" . GHC.Float.$fShowDouble_closure" {
     GHC.Float.$fShowDouble_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Float.$fShowDouble_$cshowsPrec_closure+2;
         const GHC.Float.$fShowDouble_$cshow_closure+1;
         const GHC.Float.$fShowDouble_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.799826681 UTC

[section ""data" . GHC.Float.$fShowFloat2_closure" {
     GHC.Float.$fShowFloat2_closure:
         const GHC.Float.$fShowFloat2_info;
         const 0;
 },
 sat_s2Vzf_entry() //  [R1]
         { []
         }
     {offset
       c3ak8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ak9; else goto c3aka;
       c3ak9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3aka: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3ak5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3ake; else goto c3ak6;
       u3ake: // global
           call _c3ak5(R1) args: 0, res: 0, upd: 0;
       c3ak6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Vzf_info" {
     sat_s2Vzf_info:
         const sat_s2Vzf_entry;
         const 1;
         const 4294967312;
         const S2VLN_srt+1248;
 },
 _c3ak5() //  [R1]
         { []
         }
     {offset
       c3ak5: // global
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 8;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3ak5_info" {
     block_c3ak5_info:
         const _c3ak5;
         const 0;
         const 4294967326;
         const S2VLN_srt+1248;
 },
 GHC.Float.$fShowFloat2_entry() //  [R2]
         { []
         }
     {offset
       c3akf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3akj; else goto c3aki;
       c3akj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Float.$fShowFloat2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3aki: // global
           I64[Hp - 16] = sat_s2Vzf_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat2_info" {
     GHC.Float.$fShowFloat2_info:
         const GHC.Float.$fShowFloat2_entry;
         const 0;
         const 140741783322638;
         const 4294967301;
         const S2VLN_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.807983447 UTC

[section ""data" . GHC.Float.$fShowFloat_$cshowsPrec_closure" {
     GHC.Float.$fShowFloat_$cshowsPrec_closure:
         const GHC.Float.$fShowFloat_$cshowsPrec_info;
         const 0;
 },
 GHC.Float.$fShowFloat_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3akD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3akE; else goto c3akF;
       c3akE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowFloat_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3akF: // global
           I64[Sp - 16] = block_c3akA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3akJ; else goto c3akB;
       u3akJ: // global
           call _c3akA(R1) args: 0, res: 0, upd: 0;
       c3akB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$cshowsPrec_info" {
     GHC.Float.$fShowFloat_$cshowsPrec_info:
         const GHC.Float.$fShowFloat_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2VLN_srt+1368;
 },
 _c3akA() //  [R1]
         { []
         }
     {offset
       c3akA: // global
           F1 = F32[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = GHC.Float.$fShowFloat2_closure+1;
           Sp = Sp + 16;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3akA_info" {
     block_c3akA_info:
         const _c3akA;
         const 1;
         const 4294967326;
         const S2VLN_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.814306145 UTC

[section ""data" . GHC.Float.$fShowFloat_$cshow_closure" {
     GHC.Float.$fShowFloat_$cshow_closure:
         const GHC.Float.$fShowFloat_$cshow_info;
         const 0;
 },
 GHC.Float.$fShowFloat_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c3al0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3al1; else goto c3al2;
       c3al1: // global
           R2 = R2;
           R1 = GHC.Float.$fShowFloat_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3al2: // global
           I64[Sp - 8] = block_c3akX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3al6; else goto c3akY;
       u3al6: // global
           call _c3akX(R1) args: 0, res: 0, upd: 0;
       c3akY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$cshow_info" {
     GHC.Float.$fShowFloat_$cshow_info:
         const GHC.Float.$fShowFloat_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S2VLN_srt+1368;
 },
 _c3akX() //  [R1]
         { []
         }
     {offset
       c3akX: // global
           F1 = F32[R1 + 7];
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Float.$fShowFloat2_closure+1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3akX_info" {
     block_c3akX_info:
         const _c3akX;
         const 0;
         const 4294967326;
         const S2VLN_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.820978646 UTC

[section ""data" . GHC.Float.$fShowFloat1_closure" {
     GHC.Float.$fShowFloat1_closure:
         const GHC.Float.$fShowFloat1_info;
         const 0;
 },
 GHC.Float.$fShowFloat1_entry() //  [R2]
         { []
         }
     {offset
       c3aln: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3alo; else goto c3alp;
       c3alo: // global
           R2 = R2;
           R1 = GHC.Float.$fShowFloat1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3alp: // global
           I64[Sp - 8] = block_c3alk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3alt; else goto c3all;
       u3alt: // global
           call _c3alk(R1) args: 0, res: 0, upd: 0;
       c3all: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat1_info" {
     GHC.Float.$fShowFloat1_info:
         const GHC.Float.$fShowFloat1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S2VLN_srt+1368;
 },
 _c3alk() //  [R1]
         { []
         }
     {offset
       c3alk: // global
           F1 = F32[R1 + 7];
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Float.$fShowFloat2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3alk_info" {
     block_c3alk_info:
         const _c3alk;
         const 0;
         const 4294967326;
         const S2VLN_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.827907239 UTC

[section ""data" . GHC.Float.$fShowFloat_$cshowList_closure" {
     GHC.Float.$fShowFloat_$cshowList_closure:
         const GHC.Float.$fShowFloat_$cshowList_info;
         const 0;
 },
 GHC.Float.$fShowFloat_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3alH: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Float.$fShowFloat1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$cshowList_info" {
     GHC.Float.$fShowFloat_$cshowList_info:
         const GHC.Float.$fShowFloat_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S2VLN_srt+1392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.832686377 UTC

[section ""data" . GHC.Float.$fShowFloat_closure" {
     GHC.Float.$fShowFloat_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Float.$fShowFloat_$cshowsPrec_closure+2;
         const GHC.Float.$fShowFloat_$cshow_closure+1;
         const GHC.Float.$fShowFloat_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.838384134 UTC

[section ""data" . GHC.Float.C:Floating_closure" {
     GHC.Float.C:Floating_closure:
         const GHC.Float.C:Floating_info;
 },
 GHC.Float.C:Floating_slow() //  [R1]
         { []
         }
     {offset
       c3alQ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Float.C:Floating_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 152, res: 0, upd: 8;
     }
 },
 GHC.Float.C:Floating_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3alV: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c3alZ; else goto c3alY;
       c3alZ: // global
           HpAlloc = 192;
           R1 = GHC.Float.C:Floating_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 192, res: 0, upd: 8;
       c3alY: // global
           I64[Hp - 184] = GHC.Float.C:Floating_con_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           P64[Hp - 136] = P64[Sp];
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = P64[Sp + 128];
           P64[Hp] = P64[Sp + 136];
           R1 = Hp - 183;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.C:Floating_info" {
     GHC.Float.C:Floating_info:
         const GHC.Float.C:Floating_entry;
         const 0;
         const 14;
         const 98784247808;
         const 0;
         const 23;
         const GHC.Float.C:Floating_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.849456073 UTC

[section ""data" . GHC.Float.C:RealFloat_closure" {
     GHC.Float.C:RealFloat_closure:
         const GHC.Float.C:RealFloat_info;
 },
 GHC.Float.C:RealFloat_slow() //  [R1]
         { []
         }
     {offset
       c3amq: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Float.C:RealFloat_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 96, res: 0, upd: 8;
     }
 },
 GHC.Float.C:RealFloat_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3amv: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3amz; else goto c3amy;
       c3amz: // global
           HpAlloc = 136;
           R1 = GHC.Float.C:RealFloat_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c3amy: // global
           I64[Hp - 128] = GHC.Float.C:RealFloat_con_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           R1 = Hp - 127;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.C:RealFloat_info" {
     GHC.Float.C:RealFloat_info:
         const GHC.Float.C:RealFloat_entry;
         const 0;
         const 14;
         const 68719476736;
         const 0;
         const 16;
         const GHC.Float.C:RealFloat_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.856062619 UTC

[section ""data" . GHC.Float.FFExponent_closure" {
     GHC.Float.FFExponent_closure:
         const GHC.Float.FFExponent_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.857826568 UTC

[section ""data" . GHC.Float.FFFixed_closure" {
     GHC.Float.FFFixed_closure:
         const GHC.Float.FFFixed_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.860148278 UTC

[section ""data" . GHC.Float.FFGeneric_closure" {
     GHC.Float.FFGeneric_closure:
         const GHC.Float.FFGeneric_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.864184497 UTC

[section ""cstring" . i33YT_str" {
     i33YT_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,67,58,70,108,111,97,116,105,110,103]
 },
 GHC.Float.C:Floating_con_entry() //  [R1]
         { []
         }
     {offset
       c3amV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.C:Floating_con_info" {
     GHC.Float.C:Floating_con_info:
         const GHC.Float.C:Floating_con_entry;
         const 23;
         const 1;
         const i33YT_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.869215662 UTC

[section ""cstring" . i33YV_str" {
     i33YV_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,67,58,82,101,97,108,70,108,111,97,116]
 },
 GHC.Float.C:RealFloat_con_entry() //  [R1]
         { []
         }
     {offset
       c3an1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.C:RealFloat_con_info" {
     GHC.Float.C:RealFloat_con_info:
         const GHC.Float.C:RealFloat_con_entry;
         const 16;
         const 1;
         const i33YV_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.873563011 UTC

[section ""relreadonly" . GHC.Float.FFFormat_closure_tbl" {
     GHC.Float.FFFormat_closure_tbl:
         const GHC.Float.FFExponent_closure+1;
         const GHC.Float.FFFixed_closure+2;
         const GHC.Float.FFGeneric_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.876482225 UTC

[section ""cstring" . i33YX_str" {
     i33YX_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,70,70,69,120,112,111,110,101,110,116]
 },
 GHC.Float.FFExponent_con_entry() //  [R1]
         { []
         }
     {offset
       c3an8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.FFExponent_con_info" {
     GHC.Float.FFExponent_con_info:
         const GHC.Float.FFExponent_con_entry;
         const 4294967296;
         const 3;
         const i33YX_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.88151639 UTC

[section ""cstring" . i33YZ_str" {
     i33YZ_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,70,70,70,105,120,101,100]
 },
 GHC.Float.FFFixed_con_entry() //  [R1]
         { []
         }
     {offset
       c3ane: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.FFFixed_con_info" {
     GHC.Float.FFFixed_con_info:
         const GHC.Float.FFFixed_con_entry;
         const 4294967296;
         const 4294967299;
         const i33YZ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.88626011 UTC

[section ""cstring" . i33Z1_str" {
     i33Z1_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,70,70,71,101,110,101,114,105,99]
 },
 GHC.Float.FFGeneric_con_entry() //  [R1]
         { []
         }
     {offset
       c3ank: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.FFGeneric_con_info" {
     GHC.Float.FFGeneric_con_info:
         const GHC.Float.FFGeneric_con_entry;
         const 4294967296;
         const 8589934595;
         const i33Z1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:35.892996016 UTC

[section ""relreadonly" . S2VLN_srt" {
     S2VLN_srt:
         const sat_s2UFW_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Float.rationalToDouble5_closure;
         const GHC.Float.$fRealDouble1_closure;
         const $w$j_r2Upx_closure;
         const GHC.Integer.Type.shiftRInteger_closure;
         const GHC.Integer.Logarithms.Internals.roundingMode#_closure;
         const GHC.Integer.Logarithms.Internals.integerLog2#_step_closure;
         const GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure;
         const GHC.Float.$w$sfromRat''_closure;
         const GHC.Float.fromRat''_$sfromRat''1_closure;
         const GHC.Float.rationalToDouble_closure;
         const GHC.Float.rationalToDouble1_closure;
         const GHC.Float.rationalToDouble2_closure;
         const GHC.Float.rationalToDouble3_closure;
         const GHC.Float.$fFractionalDouble_$cfromRational_closure;
         const GHC.Float.$fFractionalDouble_closure;
         const GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure;
         const GHC.Real.$wnumericEnumFrom_closure;
         const GHC.Float.$fEnumDouble_$snumericEnumFrom_closure;
         const $w$j1_r2Upy_closure;
         const GHC.Float.$w$sfromRat''1_closure;
         const GHC.Float.fromRat''_$sfromRat''_closure;
         const GHC.Float.rationalToFloat_closure;
         const GHC.Float.rationalToFloat1_closure;
         const GHC.Float.rationalToFloat2_closure;
         const GHC.Float.rationalToFloat3_closure;
         const GHC.Float.$fFractionalFloat_$cfromRational_closure;
         const GHC.Float.$fFractionalFloat_closure;
         const GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure;
         const GHC.Float.$fEnumFloat_$snumericEnumFrom_closure;
         const sat_s2UN1_closure;
         const GHC.Float.$fRealFloatDouble5_closure;
         const GHC.Real.^_closure;
         const GHC.Real.$fIntegralInt_closure;
         const GHC.Float.$w$cproperFraction1_closure;
         const GHC.Float.$fRealFracFloat_$cproperFraction_closure;
         const GHC.Float.$fRealFracFloat_$ctruncate_closure;
         const GHC.Float.$fRealDouble1_closure;
         const GHC.Float.$fRealFracFloat_$cceiling_closure;
         const GHC.Float.$fRealFracFloat_$cfloor_closure;
         const GHC.Real.even_closure;
         const GHC.Float.$w$cround1_closure;
         const GHC.Float.$fRealFracFloat_$cround_closure;
         const GHC.Float.ConversionUtils.elimZerosInt#_closure;
         const GHC.Float.$w$ctoRational1_closure;
         const GHC.Float.$fRealFloat_$ctoRational_closure;
         const GHC.Integer.Type.decodeDoubleInteger_closure;
         const GHC.Float.$w$ctoRational_closure;
         const GHC.Float.$fRealDouble_$ctoRational_closure;
         const GHC.Float.$w$cexponent1_closure;
         const GHC.Float.rationalToDouble5_closure;
         const GHC.Float.$fRealFloatFloat_$cexponent_closure;
         const GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.^1_closure;
         const GHC.Real.$wf_closure;
         const GHC.Float.$w$cproperFraction_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Float.$fRealFracDouble_$cproperFraction_closure;
         const GHC.Float.$fRealFracDouble_$ctruncate_closure;
         const GHC.Float.$fRealFracDouble_$cceiling_closure;
         const GHC.Float.$fRealFracDouble_$cfloor_closure;
         const GHC.Float.$w$cexponent_closure;
         const GHC.Float.$fRealFloatDouble_$cexponent_closure;
         const GHC.Float.$fRealFloatDouble_$csignificand_closure;
         const GHC.Float.$w$cround_closure;
         const GHC.Float.$fRealFracDouble_$cround_closure;
         const GHC.Float.$fRealFloatDouble5_closure;
         const GHC.Float.$dmatan2_closure;
         const GHC.Float.$dmexpm1_closure;
         const GHC.Float.$fRealDouble1_closure;
         const GHC.Float.$dmlog1p_closure;
         const lvl1_r2Upz_closure;
         const GHC.Float.$dmsqrt_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Float.$wroundTo_closure;
         const GHC.Float.roundTo1_closure;
         const GHC.Float.roundTo_closure;
         const GHC.Float.$w$cscaleFloat_closure;
         const GHC.Integer.Type.decodeDoubleInteger_closure;
         const GHC.Float.$fRealFloatDouble_$cscaleFloat_closure;
         const GHC.Float.$fFloatingDouble_$clog1mexp_closure;
         const lvl4_r2UqC_closure;
         const GHC.Float.$fFloatingFloat_$clog1mexp_closure;
         const lvl5_r2UqD_closure;
         const GHC.Arr.$windexError_closure;
         const GHC.Float.expts2_closure;
         const lvl7_r2UqF_closure;
         const GHC.Arr.arrEleBottom_closure;
         const GHC.Float.expts1_closure;
         const sat_s2V3Q_closure;
         const GHC.Float.expts5_closure;
         const GHC.Float.expts4_closure;
         const GHC.Real.$wf_closure;
         const GHC.Real.^1_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Float.expts3_closure;
         const GHC.Integer.Logarithms.integerLogBase#_closure;
         const GHC.Float.$wintegerLogBase_closure;
         const GHC.Integer.Logarithms.Internals.integerLog2#_step_closure;
         const GHC.Float.integerLogBase_closure;
         const GHC.Float.$dmexponent_closure;
         const GHC.Float.rationalToDouble5_closure;
         const GHC.Float.showSignedFloat_closure;
         const GHC.Float.$dmscaleFloat_closure;
         const GHC.Integer.Type.shiftRInteger_closure;
         const GHC.Float.$fRealDouble1_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Float.$wfromRat''_closure;
         const GHC.Float.fromRat''_closure;
         const GHC.Float.$w$cfromEnum_closure;
         const GHC.Float.$fEnumDouble_$cfromEnum_closure;
         const GHC.Real.numericEnumFromTo_closure;
         const GHC.Float.$fFractionalDouble_closure;
         const GHC.Real.numericEnumFromThenTo_closure;
         const GHC.Float.expts_closure;
         const GHC.Float.expts10_closure;
         const GHC.Float.$wexpt_closure;
         const GHC.Float.expt1_closure;
         const GHC.Float.expt_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$s$cround_closure;
         const GHC.Real.$w$s$c/_closure;
         const GHC.Real.$w$s$ccompare_closure;
         const GHC.Float.fromRat'_closure;
         const GHC.Float.$wfromRat_closure;
         const GHC.Float.fromRat_closure;
         const sat_s2Vej_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const lvl9_r2UqH_closure;
         const lvl10_r2UqI_closure;
         const GHC.Float.$w$sfloatToDigits1_closure;
         const GHC.Integer.Type.decodeDoubleInteger_closure;
         const lvl11_r2UqJ_closure;
         const GHC.Float.$w$sfloatToDigits_closure;
         const GHC.Float.rationalToDouble5_closure;
         const GHC.Float.$wfloatToDigits_closure;
         const GHC.Float.floatToDigits_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Exception.Base.patError_closure;
         const lvl23_r2UqW_closure;
         const $wf_r2UqX_closure;
         const $wxs1_r2Ura_closure;
         const lvl35_r2Ur9_closure;
         const GHC.Show.intToDigit_closure;
         const lvl25_r2UqZ_closure;
         const $j_r2Urc_closure;
         const GHC.Float.$wroundTo_closure;
         const GHC.List.init2_closure;
         const lvl18_r2UqR_closure;
         const lvl34_r2Ur8_closure;
         const lvl13_r2UqM_closure;
         const lvl16_r2UqP_closure;
         const GHC.Float.$w$sformatRealFloatAlt1_closure;
         const lvl27_r2Ur1_closure;
         const lvl29_r2Ur3_closure;
         const lvl31_r2Ur5_closure;
         const GHC.Float.$fShowFloat_$sformatRealFloatAlt_closure;
         const $wxs2_r2Ure_closure;
         const GHC.Float.$w$sformatRealFloatAlt_closure;
         const GHC.Float.$fShowDouble_$sformatRealFloatAlt_closure;
         const $wxs3_r2Urf_closure;
         const GHC.Float.formatRealFloatAlt_closure;
         const GHC.Float.showFloat_closure;
         const GHC.Float.$fShowDouble2_closure;
         const GHC.Float.$fShowDouble_$cshowsPrec_closure;
         const GHC.Float.$fShowDouble_$cshow_closure;
         const GHC.Float.$fShowDouble1_closure;
         const GHC.Float.$fShowFloat2_closure;
         const GHC.Float.$fShowFloat_$cshowsPrec_closure;
         const GHC.Float.$fShowFloat_$cshow_closure;
         const GHC.Float.$fShowFloat1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.225389675 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:57:51.227241742 UTC

[section ""data" . GHC.Float.$p1Floating_closure" {
     GHC.Float.$p1Floating_closure:
         const GHC.Float.$p1Floating_info;
 },
 GHC.Float.$p1Floating_entry() //  [R2]
         { []
         }
     {offset
       c3bvH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bvI; else goto c3bvJ;
       c3bvI: // global
           R2 = R2;
           R1 = GHC.Float.$p1Floating_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bvJ: // global
           I64[Sp - 8] = block_c3bvE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bvN; else goto c3bvF;
       u3bvN: // global
           call _c3bvE(R1) args: 0, res: 0, upd: 0;
       c3bvF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$p1Floating_info" {
     GHC.Float.$p1Floating_info:
         const GHC.Float.$p1Floating_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bvE() //  [R1]
         { []
         }
     {offset
       c3bvE: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bvE_info" {
     block_c3bvE_info:
         const _c3bvE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.232785059 UTC

[section ""data" . GHC.Float.pi_closure" {
     GHC.Float.pi_closure:
         const GHC.Float.pi_info;
 },
 GHC.Float.pi_entry() //  [R2]
         { []
         }
     {offset
       c3bw7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bw8; else goto c3bw9;
       c3bw8: // global
           R2 = R2;
           R1 = GHC.Float.pi_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bw9: // global
           I64[Sp - 8] = block_c3bw4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bwd; else goto c3bw5;
       u3bwd: // global
           call _c3bw4(R1) args: 0, res: 0, upd: 0;
       c3bw5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.pi_info" {
     GHC.Float.pi_info:
         const GHC.Float.pi_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bw4() //  [R1]
         { []
         }
     {offset
       c3bw4: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bw4_info" {
     block_c3bw4_info:
         const _c3bw4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.238240006 UTC

[section ""data" . GHC.Float.exp_closure" {
     GHC.Float.exp_closure:
         const GHC.Float.exp_info;
 },
 GHC.Float.exp_entry() //  [R2]
         { []
         }
     {offset
       c3bwv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bww; else goto c3bwx;
       c3bww: // global
           R2 = R2;
           R1 = GHC.Float.exp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bwx: // global
           I64[Sp - 8] = block_c3bws_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bwB; else goto c3bwt;
       u3bwB: // global
           call _c3bws(R1) args: 0, res: 0, upd: 0;
       c3bwt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.exp_info" {
     GHC.Float.exp_info:
         const GHC.Float.exp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bws() //  [R1]
         { []
         }
     {offset
       c3bws: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bws_info" {
     block_c3bws_info:
         const _c3bws;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.243919601 UTC

[section ""data" . GHC.Float.log_closure" {
     GHC.Float.log_closure:
         const GHC.Float.log_info;
 },
 GHC.Float.log_entry() //  [R2]
         { []
         }
     {offset
       c3bwT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bwU; else goto c3bwV;
       c3bwU: // global
           R2 = R2;
           R1 = GHC.Float.log_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bwV: // global
           I64[Sp - 8] = block_c3bwQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bwZ; else goto c3bwR;
       u3bwZ: // global
           call _c3bwQ(R1) args: 0, res: 0, upd: 0;
       c3bwR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log_info" {
     GHC.Float.log_info:
         const GHC.Float.log_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bwQ() //  [R1]
         { []
         }
     {offset
       c3bwQ: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bwQ_info" {
     block_c3bwQ_info:
         const _c3bwQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.249574127 UTC

[section ""data" . GHC.Float.sqrt_closure" {
     GHC.Float.sqrt_closure:
         const GHC.Float.sqrt_info;
 },
 GHC.Float.sqrt_entry() //  [R2]
         { []
         }
     {offset
       c3bxh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bxi; else goto c3bxj;
       c3bxi: // global
           R2 = R2;
           R1 = GHC.Float.sqrt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bxj: // global
           I64[Sp - 8] = block_c3bxe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bxn; else goto c3bxf;
       u3bxn: // global
           call _c3bxe(R1) args: 0, res: 0, upd: 0;
       c3bxf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sqrt_info" {
     GHC.Float.sqrt_info:
         const GHC.Float.sqrt_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bxe() //  [R1]
         { []
         }
     {offset
       c3bxe: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bxe_info" {
     block_c3bxe_info:
         const _c3bxe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.258093816 UTC

[section ""data" . GHC.Float.**_closure" {
     GHC.Float.**_closure:
         const GHC.Float.**_info;
 },
 GHC.Float.**_entry() //  [R2]
         { []
         }
     {offset
       c3bxF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bxG; else goto c3bxH;
       c3bxG: // global
           R2 = R2;
           R1 = GHC.Float.**_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bxH: // global
           I64[Sp - 8] = block_c3bxC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bxL; else goto c3bxD;
       u3bxL: // global
           call _c3bxC(R1) args: 0, res: 0, upd: 0;
       c3bxD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.**_info" {
     GHC.Float.**_info:
         const GHC.Float.**_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bxC() //  [R1]
         { []
         }
     {offset
       c3bxC: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bxC_info" {
     block_c3bxC_info:
         const _c3bxC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.286061646 UTC

[section ""data" . GHC.Float.logBase_closure" {
     GHC.Float.logBase_closure:
         const GHC.Float.logBase_info;
 },
 GHC.Float.logBase_entry() //  [R2]
         { []
         }
     {offset
       c3by3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3by4; else goto c3by5;
       c3by4: // global
           R2 = R2;
           R1 = GHC.Float.logBase_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3by5: // global
           I64[Sp - 8] = block_c3by0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3by9; else goto c3by1;
       u3by9: // global
           call _c3by0(R1) args: 0, res: 0, upd: 0;
       c3by1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.logBase_info" {
     GHC.Float.logBase_info:
         const GHC.Float.logBase_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3by0() //  [R1]
         { []
         }
     {offset
       c3by0: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3by0_info" {
     block_c3by0_info:
         const _c3by0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.292644942 UTC

[section ""data" . GHC.Float.sin_closure" {
     GHC.Float.sin_closure:
         const GHC.Float.sin_info;
 },
 GHC.Float.sin_entry() //  [R2]
         { []
         }
     {offset
       c3byr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bys; else goto c3byt;
       c3bys: // global
           R2 = R2;
           R1 = GHC.Float.sin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3byt: // global
           I64[Sp - 8] = block_c3byo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3byx; else goto c3byp;
       u3byx: // global
           call _c3byo(R1) args: 0, res: 0, upd: 0;
       c3byp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sin_info" {
     GHC.Float.sin_info:
         const GHC.Float.sin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3byo() //  [R1]
         { []
         }
     {offset
       c3byo: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3byo_info" {
     block_c3byo_info:
         const _c3byo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.298175432 UTC

[section ""data" . GHC.Float.cos_closure" {
     GHC.Float.cos_closure:
         const GHC.Float.cos_info;
 },
 GHC.Float.cos_entry() //  [R2]
         { []
         }
     {offset
       c3byP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3byQ; else goto c3byR;
       c3byQ: // global
           R2 = R2;
           R1 = GHC.Float.cos_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3byR: // global
           I64[Sp - 8] = block_c3byM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3byV; else goto c3byN;
       u3byV: // global
           call _c3byM(R1) args: 0, res: 0, upd: 0;
       c3byN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.cos_info" {
     GHC.Float.cos_info:
         const GHC.Float.cos_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3byM() //  [R1]
         { []
         }
     {offset
       c3byM: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3byM_info" {
     block_c3byM_info:
         const _c3byM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.303633249 UTC

[section ""data" . GHC.Float.tan_closure" {
     GHC.Float.tan_closure:
         const GHC.Float.tan_info;
 },
 GHC.Float.tan_entry() //  [R2]
         { []
         }
     {offset
       c3bzd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bze; else goto c3bzf;
       c3bze: // global
           R2 = R2;
           R1 = GHC.Float.tan_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bzf: // global
           I64[Sp - 8] = block_c3bza_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bzj; else goto c3bzb;
       u3bzj: // global
           call _c3bza(R1) args: 0, res: 0, upd: 0;
       c3bzb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tan_info" {
     GHC.Float.tan_info:
         const GHC.Float.tan_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bza() //  [R1]
         { []
         }
     {offset
       c3bza: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bza_info" {
     block_c3bza_info:
         const _c3bza;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.309004132 UTC

[section ""data" . GHC.Float.asin_closure" {
     GHC.Float.asin_closure:
         const GHC.Float.asin_info;
 },
 GHC.Float.asin_entry() //  [R2]
         { []
         }
     {offset
       c3bzB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bzC; else goto c3bzD;
       c3bzC: // global
           R2 = R2;
           R1 = GHC.Float.asin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bzD: // global
           I64[Sp - 8] = block_c3bzy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bzH; else goto c3bzz;
       u3bzH: // global
           call _c3bzy(R1) args: 0, res: 0, upd: 0;
       c3bzz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.asin_info" {
     GHC.Float.asin_info:
         const GHC.Float.asin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bzy() //  [R1]
         { []
         }
     {offset
       c3bzy: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bzy_info" {
     block_c3bzy_info:
         const _c3bzy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.314640928 UTC

[section ""data" . GHC.Float.acos_closure" {
     GHC.Float.acos_closure:
         const GHC.Float.acos_info;
 },
 GHC.Float.acos_entry() //  [R2]
         { []
         }
     {offset
       c3bzZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bA0; else goto c3bA1;
       c3bA0: // global
           R2 = R2;
           R1 = GHC.Float.acos_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bA1: // global
           I64[Sp - 8] = block_c3bzW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bA5; else goto c3bzX;
       u3bA5: // global
           call _c3bzW(R1) args: 0, res: 0, upd: 0;
       c3bzX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.acos_info" {
     GHC.Float.acos_info:
         const GHC.Float.acos_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bzW() //  [R1]
         { []
         }
     {offset
       c3bzW: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bzW_info" {
     block_c3bzW_info:
         const _c3bzW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.320471079 UTC

[section ""data" . GHC.Float.atan_closure" {
     GHC.Float.atan_closure:
         const GHC.Float.atan_info;
 },
 GHC.Float.atan_entry() //  [R2]
         { []
         }
     {offset
       c3bAn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bAo; else goto c3bAp;
       c3bAo: // global
           R2 = R2;
           R1 = GHC.Float.atan_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bAp: // global
           I64[Sp - 8] = block_c3bAk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bAt; else goto c3bAl;
       u3bAt: // global
           call _c3bAk(R1) args: 0, res: 0, upd: 0;
       c3bAl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atan_info" {
     GHC.Float.atan_info:
         const GHC.Float.atan_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bAk() //  [R1]
         { []
         }
     {offset
       c3bAk: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bAk_info" {
     block_c3bAk_info:
         const _c3bAk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.326406247 UTC

[section ""data" . GHC.Float.sinh_closure" {
     GHC.Float.sinh_closure:
         const GHC.Float.sinh_info;
 },
 GHC.Float.sinh_entry() //  [R2]
         { []
         }
     {offset
       c3bAL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bAM; else goto c3bAN;
       c3bAM: // global
           R2 = R2;
           R1 = GHC.Float.sinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bAN: // global
           I64[Sp - 8] = block_c3bAI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bAR; else goto c3bAJ;
       u3bAR: // global
           call _c3bAI(R1) args: 0, res: 0, upd: 0;
       c3bAJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinh_info" {
     GHC.Float.sinh_info:
         const GHC.Float.sinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bAI() //  [R1]
         { []
         }
     {offset
       c3bAI: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bAI_info" {
     block_c3bAI_info:
         const _c3bAI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.335102887 UTC

[section ""data" . GHC.Float.cosh_closure" {
     GHC.Float.cosh_closure:
         const GHC.Float.cosh_info;
 },
 GHC.Float.cosh_entry() //  [R2]
         { []
         }
     {offset
       c3bB9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bBa; else goto c3bBb;
       c3bBa: // global
           R2 = R2;
           R1 = GHC.Float.cosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bBb: // global
           I64[Sp - 8] = block_c3bB6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bBf; else goto c3bB7;
       u3bBf: // global
           call _c3bB6(R1) args: 0, res: 0, upd: 0;
       c3bB7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.cosh_info" {
     GHC.Float.cosh_info:
         const GHC.Float.cosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bB6() //  [R1]
         { []
         }
     {offset
       c3bB6: // global
           R1 = P64[R1 + 119];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bB6_info" {
     block_c3bB6_info:
         const _c3bB6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.342873408 UTC

[section ""data" . GHC.Float.tanh_closure" {
     GHC.Float.tanh_closure:
         const GHC.Float.tanh_info;
 },
 GHC.Float.tanh_entry() //  [R2]
         { []
         }
     {offset
       c3bBx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bBy; else goto c3bBz;
       c3bBy: // global
           R2 = R2;
           R1 = GHC.Float.tanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bBz: // global
           I64[Sp - 8] = block_c3bBu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bBD; else goto c3bBv;
       u3bBD: // global
           call _c3bBu(R1) args: 0, res: 0, upd: 0;
       c3bBv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanh_info" {
     GHC.Float.tanh_info:
         const GHC.Float.tanh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bBu() //  [R1]
         { []
         }
     {offset
       c3bBu: // global
           R1 = P64[R1 + 127];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bBu_info" {
     block_c3bBu_info:
         const _c3bBu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.35014496 UTC

[section ""data" . GHC.Float.asinh_closure" {
     GHC.Float.asinh_closure:
         const GHC.Float.asinh_info;
 },
 GHC.Float.asinh_entry() //  [R2]
         { []
         }
     {offset
       c3bBV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bBW; else goto c3bBX;
       c3bBW: // global
           R2 = R2;
           R1 = GHC.Float.asinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bBX: // global
           I64[Sp - 8] = block_c3bBS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bC1; else goto c3bBT;
       u3bC1: // global
           call _c3bBS(R1) args: 0, res: 0, upd: 0;
       c3bBT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.asinh_info" {
     GHC.Float.asinh_info:
         const GHC.Float.asinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bBS() //  [R1]
         { []
         }
     {offset
       c3bBS: // global
           R1 = P64[R1 + 135];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bBS_info" {
     block_c3bBS_info:
         const _c3bBS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.357492995 UTC

[section ""data" . GHC.Float.acosh_closure" {
     GHC.Float.acosh_closure:
         const GHC.Float.acosh_info;
 },
 GHC.Float.acosh_entry() //  [R2]
         { []
         }
     {offset
       c3bCj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bCk; else goto c3bCl;
       c3bCk: // global
           R2 = R2;
           R1 = GHC.Float.acosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bCl: // global
           I64[Sp - 8] = block_c3bCg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bCp; else goto c3bCh;
       u3bCp: // global
           call _c3bCg(R1) args: 0, res: 0, upd: 0;
       c3bCh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.acosh_info" {
     GHC.Float.acosh_info:
         const GHC.Float.acosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bCg() //  [R1]
         { []
         }
     {offset
       c3bCg: // global
           R1 = P64[R1 + 143];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bCg_info" {
     block_c3bCg_info:
         const _c3bCg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.3649434 UTC

[section ""data" . GHC.Float.atanh_closure" {
     GHC.Float.atanh_closure:
         const GHC.Float.atanh_info;
 },
 GHC.Float.atanh_entry() //  [R2]
         { []
         }
     {offset
       c3bCH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bCI; else goto c3bCJ;
       c3bCI: // global
           R2 = R2;
           R1 = GHC.Float.atanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bCJ: // global
           I64[Sp - 8] = block_c3bCE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bCN; else goto c3bCF;
       u3bCN: // global
           call _c3bCE(R1) args: 0, res: 0, upd: 0;
       c3bCF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atanh_info" {
     GHC.Float.atanh_info:
         const GHC.Float.atanh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bCE() //  [R1]
         { []
         }
     {offset
       c3bCE: // global
           R1 = P64[R1 + 151];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bCE_info" {
     block_c3bCE_info:
         const _c3bCE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.370583845 UTC

[section ""data" . GHC.Float.log1p_closure" {
     GHC.Float.log1p_closure:
         const GHC.Float.log1p_info;
 },
 GHC.Float.log1p_entry() //  [R2]
         { []
         }
     {offset
       c3bD5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bD6; else goto c3bD7;
       c3bD6: // global
           R2 = R2;
           R1 = GHC.Float.log1p_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bD7: // global
           I64[Sp - 8] = block_c3bD2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bDb; else goto c3bD3;
       u3bDb: // global
           call _c3bD2(R1) args: 0, res: 0, upd: 0;
       c3bD3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1p_info" {
     GHC.Float.log1p_info:
         const GHC.Float.log1p_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bD2() //  [R1]
         { []
         }
     {offset
       c3bD2: // global
           R1 = P64[R1 + 159];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bD2_info" {
     block_c3bD2_info:
         const _c3bD2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.37628404 UTC

[section ""data" . GHC.Float.expm1_closure" {
     GHC.Float.expm1_closure:
         const GHC.Float.expm1_info;
 },
 GHC.Float.expm1_entry() //  [R2]
         { []
         }
     {offset
       c3bDt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bDu; else goto c3bDv;
       c3bDu: // global
           R2 = R2;
           R1 = GHC.Float.expm1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bDv: // global
           I64[Sp - 8] = block_c3bDq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bDz; else goto c3bDr;
       u3bDz: // global
           call _c3bDq(R1) args: 0, res: 0, upd: 0;
       c3bDr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expm1_info" {
     GHC.Float.expm1_info:
         const GHC.Float.expm1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bDq() //  [R1]
         { []
         }
     {offset
       c3bDq: // global
           R1 = P64[R1 + 167];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bDq_info" {
     block_c3bDq_info:
         const _c3bDq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.382824852 UTC

[section ""data" . GHC.Float.log1pexp_closure" {
     GHC.Float.log1pexp_closure:
         const GHC.Float.log1pexp_info;
 },
 GHC.Float.log1pexp_entry() //  [R2]
         { []
         }
     {offset
       c3bDR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bDS; else goto c3bDT;
       c3bDS: // global
           R2 = R2;
           R1 = GHC.Float.log1pexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bDT: // global
           I64[Sp - 8] = block_c3bDO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bDX; else goto c3bDP;
       u3bDX: // global
           call _c3bDO(R1) args: 0, res: 0, upd: 0;
       c3bDP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1pexp_info" {
     GHC.Float.log1pexp_info:
         const GHC.Float.log1pexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bDO() //  [R1]
         { []
         }
     {offset
       c3bDO: // global
           R1 = P64[R1 + 175];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bDO_info" {
     block_c3bDO_info:
         const _c3bDO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.388347798 UTC

[section ""data" . GHC.Float.log1mexp_closure" {
     GHC.Float.log1mexp_closure:
         const GHC.Float.log1mexp_info;
 },
 GHC.Float.log1mexp_entry() //  [R2]
         { []
         }
     {offset
       c3bEf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bEg; else goto c3bEh;
       c3bEg: // global
           R2 = R2;
           R1 = GHC.Float.log1mexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bEh: // global
           I64[Sp - 8] = block_c3bEc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bEl; else goto c3bEd;
       u3bEl: // global
           call _c3bEc(R1) args: 0, res: 0, upd: 0;
       c3bEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1mexp_info" {
     GHC.Float.log1mexp_info:
         const GHC.Float.log1mexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bEc() //  [R1]
         { []
         }
     {offset
       c3bEc: // global
           R1 = P64[R1 + 183];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bEc_info" {
     block_c3bEc_info:
         const _c3bEc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.394216373 UTC

[section ""data" . GHC.Float.$p1RealFloat_closure" {
     GHC.Float.$p1RealFloat_closure:
         const GHC.Float.$p1RealFloat_info;
 },
 GHC.Float.$p1RealFloat_entry() //  [R2]
         { []
         }
     {offset
       c3bED: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bEE; else goto c3bEF;
       c3bEE: // global
           R2 = R2;
           R1 = GHC.Float.$p1RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bEF: // global
           I64[Sp - 8] = block_c3bEA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bEJ; else goto c3bEB;
       u3bEJ: // global
           call _c3bEA(R1) args: 0, res: 0, upd: 0;
       c3bEB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$p1RealFloat_info" {
     GHC.Float.$p1RealFloat_info:
         const GHC.Float.$p1RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bEA() //  [R1]
         { []
         }
     {offset
       c3bEA: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bEA_info" {
     block_c3bEA_info:
         const _c3bEA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.400303428 UTC

[section ""data" . GHC.Float.$p2RealFloat_closure" {
     GHC.Float.$p2RealFloat_closure:
         const GHC.Float.$p2RealFloat_info;
 },
 GHC.Float.$p2RealFloat_entry() //  [R2]
         { []
         }
     {offset
       c3bF3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bF4; else goto c3bF5;
       c3bF4: // global
           R2 = R2;
           R1 = GHC.Float.$p2RealFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bF5: // global
           I64[Sp - 8] = block_c3bF0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bF9; else goto c3bF1;
       u3bF9: // global
           call _c3bF0(R1) args: 0, res: 0, upd: 0;
       c3bF1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$p2RealFloat_info" {
     GHC.Float.$p2RealFloat_info:
         const GHC.Float.$p2RealFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bF0() //  [R1]
         { []
         }
     {offset
       c3bF0: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bF0_info" {
     block_c3bF0_info:
         const _c3bF0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.40662679 UTC

[section ""data" . GHC.Float.floatRadix_closure" {
     GHC.Float.floatRadix_closure:
         const GHC.Float.floatRadix_info;
 },
 GHC.Float.floatRadix_entry() //  [R2]
         { []
         }
     {offset
       c3bFt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bFu; else goto c3bFv;
       c3bFu: // global
           R2 = R2;
           R1 = GHC.Float.floatRadix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bFv: // global
           I64[Sp - 8] = block_c3bFq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bFz; else goto c3bFr;
       u3bFz: // global
           call _c3bFq(R1) args: 0, res: 0, upd: 0;
       c3bFr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.floatRadix_info" {
     GHC.Float.floatRadix_info:
         const GHC.Float.floatRadix_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bFq() //  [R1]
         { []
         }
     {offset
       c3bFq: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bFq_info" {
     block_c3bFq_info:
         const _c3bFq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.412105016 UTC

[section ""data" . GHC.Float.floatDigits_closure" {
     GHC.Float.floatDigits_closure:
         const GHC.Float.floatDigits_info;
 },
 GHC.Float.floatDigits_entry() //  [R2]
         { []
         }
     {offset
       c3bFR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bFS; else goto c3bFT;
       c3bFS: // global
           R2 = R2;
           R1 = GHC.Float.floatDigits_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bFT: // global
           I64[Sp - 8] = block_c3bFO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bFX; else goto c3bFP;
       u3bFX: // global
           call _c3bFO(R1) args: 0, res: 0, upd: 0;
       c3bFP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.floatDigits_info" {
     GHC.Float.floatDigits_info:
         const GHC.Float.floatDigits_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bFO() //  [R1]
         { []
         }
     {offset
       c3bFO: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bFO_info" {
     block_c3bFO_info:
         const _c3bFO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.418185167 UTC

[section ""data" . GHC.Float.floatRange_closure" {
     GHC.Float.floatRange_closure:
         const GHC.Float.floatRange_info;
 },
 GHC.Float.floatRange_entry() //  [R2]
         { []
         }
     {offset
       c3bGf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bGg; else goto c3bGh;
       c3bGg: // global
           R2 = R2;
           R1 = GHC.Float.floatRange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bGh: // global
           I64[Sp - 8] = block_c3bGc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bGl; else goto c3bGd;
       u3bGl: // global
           call _c3bGc(R1) args: 0, res: 0, upd: 0;
       c3bGd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.floatRange_info" {
     GHC.Float.floatRange_info:
         const GHC.Float.floatRange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bGc() //  [R1]
         { []
         }
     {offset
       c3bGc: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bGc_info" {
     block_c3bGc_info:
         const _c3bGc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.423750171 UTC

[section ""data" . GHC.Float.decodeFloat_closure" {
     GHC.Float.decodeFloat_closure:
         const GHC.Float.decodeFloat_info;
 },
 GHC.Float.decodeFloat_entry() //  [R2]
         { []
         }
     {offset
       c3bGD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bGE; else goto c3bGF;
       c3bGE: // global
           R2 = R2;
           R1 = GHC.Float.decodeFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bGF: // global
           I64[Sp - 8] = block_c3bGA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bGJ; else goto c3bGB;
       u3bGJ: // global
           call _c3bGA(R1) args: 0, res: 0, upd: 0;
       c3bGB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.decodeFloat_info" {
     GHC.Float.decodeFloat_info:
         const GHC.Float.decodeFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bGA() //  [R1]
         { []
         }
     {offset
       c3bGA: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bGA_info" {
     block_c3bGA_info:
         const _c3bGA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.428976155 UTC

[section ""data" . GHC.Float.encodeFloat_closure" {
     GHC.Float.encodeFloat_closure:
         const GHC.Float.encodeFloat_info;
 },
 GHC.Float.encodeFloat_entry() //  [R2]
         { []
         }
     {offset
       c3bH1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bH2; else goto c3bH3;
       c3bH2: // global
           R2 = R2;
           R1 = GHC.Float.encodeFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bH3: // global
           I64[Sp - 8] = block_c3bGY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bH7; else goto c3bGZ;
       u3bH7: // global
           call _c3bGY(R1) args: 0, res: 0, upd: 0;
       c3bGZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.encodeFloat_info" {
     GHC.Float.encodeFloat_info:
         const GHC.Float.encodeFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bGY() //  [R1]
         { []
         }
     {offset
       c3bGY: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bGY_info" {
     block_c3bGY_info:
         const _c3bGY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.435133536 UTC

[section ""data" . GHC.Float.exponent_closure" {
     GHC.Float.exponent_closure:
         const GHC.Float.exponent_info;
 },
 GHC.Float.exponent_entry() //  [R2]
         { []
         }
     {offset
       c3bHp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bHq; else goto c3bHr;
       c3bHq: // global
           R2 = R2;
           R1 = GHC.Float.exponent_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bHr: // global
           I64[Sp - 8] = block_c3bHm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bHv; else goto c3bHn;
       u3bHv: // global
           call _c3bHm(R1) args: 0, res: 0, upd: 0;
       c3bHn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.exponent_info" {
     GHC.Float.exponent_info:
         const GHC.Float.exponent_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bHm() //  [R1]
         { []
         }
     {offset
       c3bHm: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bHm_info" {
     block_c3bHm_info:
         const _c3bHm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.440742753 UTC

[section ""data" . GHC.Float.significand_closure" {
     GHC.Float.significand_closure:
         const GHC.Float.significand_info;
 },
 GHC.Float.significand_entry() //  [R2]
         { []
         }
     {offset
       c3bHN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bHO; else goto c3bHP;
       c3bHO: // global
           R2 = R2;
           R1 = GHC.Float.significand_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bHP: // global
           I64[Sp - 8] = block_c3bHK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bHT; else goto c3bHL;
       u3bHT: // global
           call _c3bHK(R1) args: 0, res: 0, upd: 0;
       c3bHL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.significand_info" {
     GHC.Float.significand_info:
         const GHC.Float.significand_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bHK() //  [R1]
         { []
         }
     {offset
       c3bHK: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bHK_info" {
     block_c3bHK_info:
         const _c3bHK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.446622524 UTC

[section ""data" . GHC.Float.scaleFloat_closure" {
     GHC.Float.scaleFloat_closure:
         const GHC.Float.scaleFloat_info;
 },
 GHC.Float.scaleFloat_entry() //  [R2]
         { []
         }
     {offset
       c3bIb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bIc; else goto c3bId;
       c3bIc: // global
           R2 = R2;
           R1 = GHC.Float.scaleFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bId: // global
           I64[Sp - 8] = block_c3bI8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bIh; else goto c3bI9;
       u3bIh: // global
           call _c3bI8(R1) args: 0, res: 0, upd: 0;
       c3bI9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.scaleFloat_info" {
     GHC.Float.scaleFloat_info:
         const GHC.Float.scaleFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bI8() //  [R1]
         { []
         }
     {offset
       c3bI8: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bI8_info" {
     block_c3bI8_info:
         const _c3bI8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.452117015 UTC

[section ""data" . GHC.Float.isNaN_closure" {
     GHC.Float.isNaN_closure:
         const GHC.Float.isNaN_info;
 },
 GHC.Float.isNaN_entry() //  [R2]
         { []
         }
     {offset
       c3bIz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bIA; else goto c3bIB;
       c3bIA: // global
           R2 = R2;
           R1 = GHC.Float.isNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bIB: // global
           I64[Sp - 8] = block_c3bIw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bIF; else goto c3bIx;
       u3bIF: // global
           call _c3bIw(R1) args: 0, res: 0, upd: 0;
       c3bIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isNaN_info" {
     GHC.Float.isNaN_info:
         const GHC.Float.isNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bIw() //  [R1]
         { []
         }
     {offset
       c3bIw: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bIw_info" {
     block_c3bIw_info:
         const _c3bIw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.457504486 UTC

[section ""data" . GHC.Float.isInfinite_closure" {
     GHC.Float.isInfinite_closure:
         const GHC.Float.isInfinite_info;
 },
 GHC.Float.isInfinite_entry() //  [R2]
         { []
         }
     {offset
       c3bIX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bIY; else goto c3bIZ;
       c3bIY: // global
           R2 = R2;
           R1 = GHC.Float.isInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bIZ: // global
           I64[Sp - 8] = block_c3bIU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bJ3; else goto c3bIV;
       u3bJ3: // global
           call _c3bIU(R1) args: 0, res: 0, upd: 0;
       c3bIV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isInfinite_info" {
     GHC.Float.isInfinite_info:
         const GHC.Float.isInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bIU() //  [R1]
         { []
         }
     {offset
       c3bIU: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bIU_info" {
     block_c3bIU_info:
         const _c3bIU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.463305954 UTC

[section ""data" . GHC.Float.isDenormalized_closure" {
     GHC.Float.isDenormalized_closure:
         const GHC.Float.isDenormalized_info;
 },
 GHC.Float.isDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c3bJl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bJm; else goto c3bJn;
       c3bJm: // global
           R2 = R2;
           R1 = GHC.Float.isDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bJn: // global
           I64[Sp - 8] = block_c3bJi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bJr; else goto c3bJj;
       u3bJr: // global
           call _c3bJi(R1) args: 0, res: 0, upd: 0;
       c3bJj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDenormalized_info" {
     GHC.Float.isDenormalized_info:
         const GHC.Float.isDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bJi() //  [R1]
         { []
         }
     {offset
       c3bJi: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bJi_info" {
     block_c3bJi_info:
         const _c3bJi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.469309456 UTC

[section ""data" . GHC.Float.isNegativeZero_closure" {
     GHC.Float.isNegativeZero_closure:
         const GHC.Float.isNegativeZero_info;
 },
 GHC.Float.isNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c3bJJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bJK; else goto c3bJL;
       c3bJK: // global
           R2 = R2;
           R1 = GHC.Float.isNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bJL: // global
           I64[Sp - 8] = block_c3bJG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bJP; else goto c3bJH;
       u3bJP: // global
           call _c3bJG(R1) args: 0, res: 0, upd: 0;
       c3bJH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isNegativeZero_info" {
     GHC.Float.isNegativeZero_info:
         const GHC.Float.isNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bJG() //  [R1]
         { []
         }
     {offset
       c3bJG: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bJG_info" {
     block_c3bJG_info:
         const _c3bJG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.475352617 UTC

[section ""data" . GHC.Float.isIEEE_closure" {
     GHC.Float.isIEEE_closure:
         const GHC.Float.isIEEE_info;
 },
 GHC.Float.isIEEE_entry() //  [R2]
         { []
         }
     {offset
       c3bK7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bK8; else goto c3bK9;
       c3bK8: // global
           R2 = R2;
           R1 = GHC.Float.isIEEE_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bK9: // global
           I64[Sp - 8] = block_c3bK4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bKd; else goto c3bK5;
       u3bKd: // global
           call _c3bK4(R1) args: 0, res: 0, upd: 0;
       c3bK5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isIEEE_info" {
     GHC.Float.isIEEE_info:
         const GHC.Float.isIEEE_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bK4() //  [R1]
         { []
         }
     {offset
       c3bK4: // global
           R1 = P64[R1 + 119];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bK4_info" {
     block_c3bK4_info:
         const _c3bK4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.480865299 UTC

[section ""data" . GHC.Float.atan2_closure" {
     GHC.Float.atan2_closure:
         const GHC.Float.atan2_info;
 },
 GHC.Float.atan2_entry() //  [R2]
         { []
         }
     {offset
       c3bKv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bKw; else goto c3bKx;
       c3bKw: // global
           R2 = R2;
           R1 = GHC.Float.atan2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bKx: // global
           I64[Sp - 8] = block_c3bKs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bKB; else goto c3bKt;
       u3bKB: // global
           call _c3bKs(R1) args: 0, res: 0, upd: 0;
       c3bKt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atan2_info" {
     GHC.Float.atan2_info:
         const GHC.Float.atan2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bKs() //  [R1]
         { []
         }
     {offset
       c3bKs: // global
           R1 = P64[R1 + 127];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bKs_info" {
     block_c3bKs_info:
         const _c3bKs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.486533019 UTC

[section ""data" . GHC.Float.$seven_closure" {
     GHC.Float.$seven_closure:
         const GHC.Float.$seven_info;
 },
 GHC.Float.$seven_entry() //  [R2]
         { []
         }
     {offset
       c3bKT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bKU; else goto c3bKV;
       c3bKU: // global
           R2 = R2;
           R1 = GHC.Float.$seven_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bKV: // global
           I64[Sp - 8] = block_c3bKQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bLe; else goto c3bKR;
       u3bLe: // global
           call _c3bKQ(R1) args: 0, res: 0, upd: 0;
       c3bKR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$seven_info" {
     GHC.Float.$seven_info:
         const GHC.Float.$seven_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bKQ() //  [R1]
         { []
         }
     {offset
       c3bKQ: // global
           _s3aBo::I64 = I64[R1 + 7];
           if (_s3aBo::I64 - (_s3aBo::I64 + (_s3aBo::I64 >> 63)) & (-2) == 0) goto c3bLa; else goto c3bL4;
       c3bLa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3bL4: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bKQ_info" {
     block_c3bKQ_info:
         const _c3bKQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.492575347 UTC

[section ""data" . GHC.Float.$fNumFloat_$cfromInteger_closure" {
     GHC.Float.$fNumFloat_$cfromInteger_closure:
         const GHC.Float.$fNumFloat_$cfromInteger_info;
 },
 GHC.Float.$fNumFloat_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       c3bLF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bLJ; else goto c3bLK;
       c3bLJ: // global
           R2 = R2;
           R1 = GHC.Float.$fNumFloat_$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bLK: // global
           I64[Sp - 8] = block_c3bLD_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fNumFloat_$cfromInteger_info" {
     GHC.Float.$fNumFloat_$cfromInteger_info:
         const GHC.Float.$fNumFloat_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bLD() //  [F1]
         { []
         }
     {offset
       c3bLD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bLN; else goto c3bLM;
       c3bLN: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3bLM: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bLD_info" {
     block_c3bLD_info:
         const _c3bLD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.498966988 UTC

[section ""data" . GHC.Float.$fNumDouble_$cfromInteger_closure" {
     GHC.Float.$fNumDouble_$cfromInteger_closure:
         const GHC.Float.$fNumDouble_$cfromInteger_info;
 },
 GHC.Float.$fNumDouble_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       c3bM5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bM9; else goto c3bMa;
       c3bM9: // global
           R2 = R2;
           R1 = GHC.Float.$fNumDouble_$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bMa: // global
           I64[Sp - 8] = block_c3bM3_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.doubleFromInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fNumDouble_$cfromInteger_info" {
     GHC.Float.$fNumDouble_$cfromInteger_info:
         const GHC.Float.$fNumDouble_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bM3() //  [D1]
         { []
         }
     {offset
       c3bM3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bMd; else goto c3bMc;
       c3bMd: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3bMc: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bM3_info" {
     block_c3bM3_info:
         const _c3bM3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.505684861 UTC

[section ""data" . GHC.Float.plusFloat_closure" {
     GHC.Float.plusFloat_closure:
         const GHC.Float.plusFloat_info;
 },
 GHC.Float.plusFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3bMw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bMI; else goto c3bMJ;
       c3bMI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.plusFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3bMJ: // global
           I64[Sp - 16] = block_c3bMt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3bMP; else goto c3bMu;
       u3bMP: // global
           call _c3bMt(R1) args: 0, res: 0, upd: 0;
       c3bMu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.plusFloat_info" {
     GHC.Float.plusFloat_info:
         const GHC.Float.plusFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3bMt() //  [R1]
         { []
         }
     {offset
       c3bMt: // global
           I64[Sp] = block_c3bMz_info;
           _s3aBx::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aBx::F32;
           if (R1 & 7 != 0) goto u3bMO; else goto c3bMA;
       u3bMO: // global
           call _c3bMz(R1) args: 0, res: 0, upd: 0;
       c3bMA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bMt_info" {
     block_c3bMt_info:
         const _c3bMt;
         const 1;
         const 30;
 },
 _c3bMz() //  [R1]
         { []
         }
     {offset
       c3bMz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bMN; else goto c3bMM;
       c3bMN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bMM: // global
           _s3aBA::F32 = %MO_F_Add_W32(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aBA::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bMz_info" {
     block_c3bMz_info:
         const _c3bMz;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.513711582 UTC

[section ""data" . GHC.Float.minusFloat_closure" {
     GHC.Float.minusFloat_closure:
         const GHC.Float.minusFloat_info;
 },
 GHC.Float.minusFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3bNg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bNs; else goto c3bNt;
       c3bNs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.minusFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3bNt: // global
           I64[Sp - 16] = block_c3bNd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3bNz; else goto c3bNe;
       u3bNz: // global
           call _c3bNd(R1) args: 0, res: 0, upd: 0;
       c3bNe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.minusFloat_info" {
     GHC.Float.minusFloat_info:
         const GHC.Float.minusFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3bNd() //  [R1]
         { []
         }
     {offset
       c3bNd: // global
           I64[Sp] = block_c3bNj_info;
           _s3aBE::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aBE::F32;
           if (R1 & 7 != 0) goto u3bNy; else goto c3bNk;
       u3bNy: // global
           call _c3bNj(R1) args: 0, res: 0, upd: 0;
       c3bNk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bNd_info" {
     block_c3bNd_info:
         const _c3bNd;
         const 1;
         const 30;
 },
 _c3bNj() //  [R1]
         { []
         }
     {offset
       c3bNj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bNx; else goto c3bNw;
       c3bNx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bNw: // global
           _s3aBH::F32 = %MO_F_Sub_W32(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aBH::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bNj_info" {
     block_c3bNj_info:
         const _c3bNj;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.52175443 UTC

[section ""data" . GHC.Float.timesFloat_closure" {
     GHC.Float.timesFloat_closure:
         const GHC.Float.timesFloat_info;
 },
 GHC.Float.timesFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3bO0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bOc; else goto c3bOd;
       c3bOc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.timesFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3bOd: // global
           I64[Sp - 16] = block_c3bNX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3bOj; else goto c3bNY;
       u3bOj: // global
           call _c3bNX(R1) args: 0, res: 0, upd: 0;
       c3bNY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.timesFloat_info" {
     GHC.Float.timesFloat_info:
         const GHC.Float.timesFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3bNX() //  [R1]
         { []
         }
     {offset
       c3bNX: // global
           I64[Sp] = block_c3bO3_info;
           _s3aBL::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aBL::F32;
           if (R1 & 7 != 0) goto u3bOi; else goto c3bO4;
       u3bOi: // global
           call _c3bO3(R1) args: 0, res: 0, upd: 0;
       c3bO4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bNX_info" {
     block_c3bNX_info:
         const _c3bNX;
         const 1;
         const 30;
 },
 _c3bO3() //  [R1]
         { []
         }
     {offset
       c3bO3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bOh; else goto c3bOg;
       c3bOh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bOg: // global
           _s3aBO::F32 = %MO_F_Mul_W32(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aBO::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bO3_info" {
     block_c3bO3_info:
         const _c3bO3;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.529797069 UTC

[section ""data" . GHC.Float.divideFloat_closure" {
     GHC.Float.divideFloat_closure:
         const GHC.Float.divideFloat_info;
 },
 GHC.Float.divideFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3bOK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bOW; else goto c3bOX;
       c3bOW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.divideFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3bOX: // global
           I64[Sp - 16] = block_c3bOH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3bP3; else goto c3bOI;
       u3bP3: // global
           call _c3bOH(R1) args: 0, res: 0, upd: 0;
       c3bOI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.divideFloat_info" {
     GHC.Float.divideFloat_info:
         const GHC.Float.divideFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3bOH() //  [R1]
         { []
         }
     {offset
       c3bOH: // global
           I64[Sp] = block_c3bON_info;
           _s3aBS::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aBS::F32;
           if (R1 & 7 != 0) goto u3bP2; else goto c3bOO;
       u3bP2: // global
           call _c3bON(R1) args: 0, res: 0, upd: 0;
       c3bOO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bOH_info" {
     block_c3bOH_info:
         const _c3bOH;
         const 1;
         const 30;
 },
 _c3bON() //  [R1]
         { []
         }
     {offset
       c3bON: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bP1; else goto c3bP0;
       c3bP1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bP0: // global
           _s3aBV::F32 = %MO_F_Quot_W32(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aBV::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bON_info" {
     block_c3bON_info:
         const _c3bON;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.537749495 UTC

[section ""data" . GHC.Float.negateFloat_closure" {
     GHC.Float.negateFloat_closure:
         const GHC.Float.negateFloat_info;
 },
 GHC.Float.negateFloat_entry() //  [R2]
         { []
         }
     {offset
       c3bPu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bPB; else goto c3bPC;
       c3bPB: // global
           R2 = R2;
           R1 = GHC.Float.negateFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bPC: // global
           I64[Sp - 8] = block_c3bPr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bPG; else goto c3bPs;
       u3bPG: // global
           call _c3bPr(R1) args: 0, res: 0, upd: 0;
       c3bPs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.negateFloat_info" {
     GHC.Float.negateFloat_info:
         const GHC.Float.negateFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bPr() //  [R1]
         { []
         }
     {offset
       c3bPr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bPF; else goto c3bPE;
       c3bPF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bPE: // global
           _s3aBZ::F32 = %MO_F_Neg_W32(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aBZ::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bPr_info" {
     block_c3bPr_info:
         const _c3bPr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.543604505 UTC

[section ""data" . GHC.Float.$fNumFloat1_closure" {
     GHC.Float.$fNumFloat1_closure:
         const GHC.Types.F#_con_info;
         const 1.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.545382624 UTC

[section ""data" . GHC.Float.$fNumFloat2_closure" {
     GHC.Float.$fNumFloat2_closure:
         const GHC.Types.F#_con_info;
         const -1.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.548202135 UTC

[section ""data" . GHC.Float.$fNumFloat_$csignum_closure" {
     GHC.Float.$fNumFloat_$csignum_closure:
         const GHC.Float.$fNumFloat_$csignum_info;
 },
 GHC.Float.$fNumFloat_$csignum_entry() //  [R2]
         { []
         }
     {offset
       c3bQ4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bQ5; else goto c3bQ6;
       c3bQ5: // global
           R2 = R2;
           R1 = GHC.Float.$fNumFloat_$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bQ6: // global
           I64[Sp - 8] = block_c3bQ1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bQl; else goto c3bQ2;
       u3bQl: // global
           call _c3bQ1(R1) args: 0, res: 0, upd: 0;
       c3bQ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fNumFloat_$csignum_info" {
     GHC.Float.$fNumFloat_$csignum_info:
         const GHC.Float.$fNumFloat_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bQ1() //  [R1]
         { []
         }
     {offset
       c3bQ1: // global
           _s3aC2::F32 = F32[R1 + 7];
           if (%MO_F_Gt_W32(_s3aC2::F32,
                            0.0 :: W32)) goto c3bQk; else goto c3bQj;
       c3bQk: // global
           R1 = GHC.Float.$fNumFloat1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3bQj: // global
           if (%MO_F_Lt_W32(_s3aC2::F32,
                            0.0 :: W32)) goto c3bQh; else goto c3bQg;
       c3bQh: // global
           R1 = GHC.Float.$fNumFloat2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3bQg: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bQ1_info" {
     block_c3bQ1_info:
         const _c3bQ1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.553902298 UTC

[section ""data" . sat_s3aC5_closure" {
     sat_s3aC5_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.555650542 UTC

[section ""data" . sat_s3aC6_closure" {
     sat_s3aC6_closure:
         const :_con_info;
         const sat_s3aC5_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.558247871 UTC

[section ""data" . GHC.Float.$fRealDouble1_closure" {
     GHC.Float.$fRealDouble1_closure:
         const GHC.Float.$fRealDouble1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.$fRealDouble1_entry() //  [R1]
         { []
         }
     {offset
       c3bQM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bQN; else goto c3bQO;
       c3bQN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3bQO: // global
           (_c3bQJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3bQJ::I64 == 0) goto c3bQL; else goto c3bQK;
       c3bQL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3bQK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3bQJ::I64;
           R3 = sat_s3aC6_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealDouble1_info" {
     GHC.Float.$fRealDouble1_info:
         const GHC.Float.$fRealDouble1_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.563293284 UTC

[section ""data" . GHC.Float.fabsFloat_closure" {
     GHC.Float.fabsFloat_closure:
         const GHC.Float.fabsFloat_info;
 },
 GHC.Float.fabsFloat_entry() //  [R2]
         { []
         }
     {offset
       c3bR6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bRd; else goto c3bRe;
       c3bRd: // global
           R2 = R2;
           R1 = GHC.Float.fabsFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bRe: // global
           I64[Sp - 8] = block_c3bR3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bRi; else goto c3bR4;
       u3bRi: // global
           call _c3bR3(R1) args: 0, res: 0, upd: 0;
       c3bR4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fabsFloat_info" {
     GHC.Float.fabsFloat_info:
         const GHC.Float.fabsFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bR3() //  [R1]
         { []
         }
     {offset
       c3bR3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bRh; else goto c3bRg;
       c3bRh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bRg: // global
           (_c3bR9::F32) = call MO_F32_Fabs(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3bR9::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bR3_info" {
     block_c3bR3_info:
         const _c3bR3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.569011103 UTC

[section ""data" . GHC.Float.$fNumFloat_closure" {
     GHC.Float.$fNumFloat_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Float.plusFloat_closure+2;
         const GHC.Float.minusFloat_closure+2;
         const GHC.Float.timesFloat_closure+2;
         const GHC.Float.negateFloat_closure+1;
         const GHC.Float.fabsFloat_closure+1;
         const GHC.Float.$fNumFloat_$csignum_closure+1;
         const GHC.Float.$fNumFloat_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.572316081 UTC

[section ""data" . GHC.Float.plusDouble_closure" {
     GHC.Float.plusDouble_closure:
         const GHC.Float.plusDouble_info;
 },
 GHC.Float.plusDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3bRF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bRR; else goto c3bRS;
       c3bRR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.plusDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3bRS: // global
           I64[Sp - 16] = block_c3bRC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3bRY; else goto c3bRD;
       u3bRY: // global
           call _c3bRC(R1) args: 0, res: 0, upd: 0;
       c3bRD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.plusDouble_info" {
     GHC.Float.plusDouble_info:
         const GHC.Float.plusDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3bRC() //  [R1]
         { []
         }
     {offset
       c3bRC: // global
           I64[Sp] = block_c3bRI_info;
           _s3aCe::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aCe::F64;
           if (R1 & 7 != 0) goto u3bRX; else goto c3bRJ;
       u3bRX: // global
           call _c3bRI(R1) args: 0, res: 0, upd: 0;
       c3bRJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bRC_info" {
     block_c3bRC_info:
         const _c3bRC;
         const 1;
         const 30;
 },
 _c3bRI() //  [R1]
         { []
         }
     {offset
       c3bRI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bRW; else goto c3bRV;
       c3bRW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bRV: // global
           _s3aCh::F64 = %MO_F_Add_W64(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aCh::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bRI_info" {
     block_c3bRI_info:
         const _c3bRI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.582219306 UTC

[section ""data" . GHC.Float.minusDouble_closure" {
     GHC.Float.minusDouble_closure:
         const GHC.Float.minusDouble_info;
 },
 GHC.Float.minusDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3bSp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bSB; else goto c3bSC;
       c3bSB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.minusDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3bSC: // global
           I64[Sp - 16] = block_c3bSm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3bSI; else goto c3bSn;
       u3bSI: // global
           call _c3bSm(R1) args: 0, res: 0, upd: 0;
       c3bSn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.minusDouble_info" {
     GHC.Float.minusDouble_info:
         const GHC.Float.minusDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3bSm() //  [R1]
         { []
         }
     {offset
       c3bSm: // global
           I64[Sp] = block_c3bSs_info;
           _s3aCl::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aCl::F64;
           if (R1 & 7 != 0) goto u3bSH; else goto c3bSt;
       u3bSH: // global
           call _c3bSs(R1) args: 0, res: 0, upd: 0;
       c3bSt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bSm_info" {
     block_c3bSm_info:
         const _c3bSm;
         const 1;
         const 30;
 },
 _c3bSs() //  [R1]
         { []
         }
     {offset
       c3bSs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bSG; else goto c3bSF;
       c3bSG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bSF: // global
           _s3aCo::F64 = %MO_F_Sub_W64(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aCo::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bSs_info" {
     block_c3bSs_info:
         const _c3bSs;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.59045748 UTC

[section ""data" . GHC.Float.timesDouble_closure" {
     GHC.Float.timesDouble_closure:
         const GHC.Float.timesDouble_info;
 },
 GHC.Float.timesDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3bT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bTl; else goto c3bTm;
       c3bTl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.timesDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3bTm: // global
           I64[Sp - 16] = block_c3bT6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3bTs; else goto c3bT7;
       u3bTs: // global
           call _c3bT6(R1) args: 0, res: 0, upd: 0;
       c3bT7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.timesDouble_info" {
     GHC.Float.timesDouble_info:
         const GHC.Float.timesDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3bT6() //  [R1]
         { []
         }
     {offset
       c3bT6: // global
           I64[Sp] = block_c3bTc_info;
           _s3aCs::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aCs::F64;
           if (R1 & 7 != 0) goto u3bTr; else goto c3bTd;
       u3bTr: // global
           call _c3bTc(R1) args: 0, res: 0, upd: 0;
       c3bTd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bT6_info" {
     block_c3bT6_info:
         const _c3bT6;
         const 1;
         const 30;
 },
 _c3bTc() //  [R1]
         { []
         }
     {offset
       c3bTc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bTq; else goto c3bTp;
       c3bTq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bTp: // global
           _s3aCv::F64 = %MO_F_Mul_W64(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aCv::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bTc_info" {
     block_c3bTc_info:
         const _c3bTc;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.599094435 UTC

[section ""data" . GHC.Float.divideDouble_closure" {
     GHC.Float.divideDouble_closure:
         const GHC.Float.divideDouble_info;
 },
 GHC.Float.divideDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3bTT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bU5; else goto c3bU6;
       c3bU5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.divideDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3bU6: // global
           I64[Sp - 16] = block_c3bTQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3bUc; else goto c3bTR;
       u3bUc: // global
           call _c3bTQ(R1) args: 0, res: 0, upd: 0;
       c3bTR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.divideDouble_info" {
     GHC.Float.divideDouble_info:
         const GHC.Float.divideDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3bTQ() //  [R1]
         { []
         }
     {offset
       c3bTQ: // global
           I64[Sp] = block_c3bTW_info;
           _s3aCz::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aCz::F64;
           if (R1 & 7 != 0) goto u3bUb; else goto c3bTX;
       u3bUb: // global
           call _c3bTW(R1) args: 0, res: 0, upd: 0;
       c3bTX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bTQ_info" {
     block_c3bTQ_info:
         const _c3bTQ;
         const 1;
         const 30;
 },
 _c3bTW() //  [R1]
         { []
         }
     {offset
       c3bTW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bUa; else goto c3bU9;
       c3bUa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bU9: // global
           _s3aCC::F64 = %MO_F_Quot_W64(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aCC::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bTW_info" {
     block_c3bTW_info:
         const _c3bTW;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.606972827 UTC

[section ""data" . GHC.Float.negateDouble_closure" {
     GHC.Float.negateDouble_closure:
         const GHC.Float.negateDouble_info;
 },
 GHC.Float.negateDouble_entry() //  [R2]
         { []
         }
     {offset
       c3bUD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bUK; else goto c3bUL;
       c3bUK: // global
           R2 = R2;
           R1 = GHC.Float.negateDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bUL: // global
           I64[Sp - 8] = block_c3bUA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bUP; else goto c3bUB;
       u3bUP: // global
           call _c3bUA(R1) args: 0, res: 0, upd: 0;
       c3bUB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.negateDouble_info" {
     GHC.Float.negateDouble_info:
         const GHC.Float.negateDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bUA() //  [R1]
         { []
         }
     {offset
       c3bUA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bUO; else goto c3bUN;
       c3bUO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bUN: // global
           _s3aCG::F64 = %MO_F_Neg_W64(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aCG::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bUA_info" {
     block_c3bUA_info:
         const _c3bUA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.61249988 UTC

[section ""data" . GHC.Float.$fNumDouble1_closure" {
     GHC.Float.$fNumDouble1_closure:
         const GHC.Types.D#_con_info;
         const 1.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.614243449 UTC

[section ""data" . GHC.Float.$fNumDouble2_closure" {
     GHC.Float.$fNumDouble2_closure:
         const GHC.Types.D#_con_info;
         const -1.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.617072828 UTC

[section ""data" . GHC.Float.$fNumDouble_$csignum_closure" {
     GHC.Float.$fNumDouble_$csignum_closure:
         const GHC.Float.$fNumDouble_$csignum_info;
 },
 GHC.Float.$fNumDouble_$csignum_entry() //  [R2]
         { []
         }
     {offset
       c3bVd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bVe; else goto c3bVf;
       c3bVe: // global
           R2 = R2;
           R1 = GHC.Float.$fNumDouble_$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bVf: // global
           I64[Sp - 8] = block_c3bVa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bVu; else goto c3bVb;
       u3bVu: // global
           call _c3bVa(R1) args: 0, res: 0, upd: 0;
       c3bVb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fNumDouble_$csignum_info" {
     GHC.Float.$fNumDouble_$csignum_info:
         const GHC.Float.$fNumDouble_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bVa() //  [R1]
         { []
         }
     {offset
       c3bVa: // global
           _s3aCJ::F64 = F64[R1 + 7];
           if (%MO_F_Gt_W64(_s3aCJ::F64,
                            0.0 :: W64)) goto c3bVt; else goto c3bVs;
       c3bVt: // global
           R1 = GHC.Float.$fNumDouble1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3bVs: // global
           if (%MO_F_Lt_W64(_s3aCJ::F64,
                            0.0 :: W64)) goto c3bVq; else goto c3bVp;
       c3bVq: // global
           R1 = GHC.Float.$fNumDouble2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3bVp: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bVa_info" {
     block_c3bVa_info:
         const _c3bVa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.624162762 UTC

[section ""data" . GHC.Float.fabsDouble_closure" {
     GHC.Float.fabsDouble_closure:
         const GHC.Float.fabsDouble_info;
 },
 GHC.Float.fabsDouble_entry() //  [R2]
         { []
         }
     {offset
       c3bVU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bW1; else goto c3bW2;
       c3bW1: // global
           R2 = R2;
           R1 = GHC.Float.fabsDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bW2: // global
           I64[Sp - 8] = block_c3bVR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bW6; else goto c3bVS;
       u3bW6: // global
           call _c3bVR(R1) args: 0, res: 0, upd: 0;
       c3bVS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fabsDouble_info" {
     GHC.Float.fabsDouble_info:
         const GHC.Float.fabsDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bVR() //  [R1]
         { []
         }
     {offset
       c3bVR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bW5; else goto c3bW4;
       c3bW5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bW4: // global
           (_c3bVX::F64) = call MO_F64_Fabs(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3bVX::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bVR_info" {
     block_c3bVR_info:
         const _c3bVR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.629885923 UTC

[section ""data" . GHC.Float.$fNumDouble_closure" {
     GHC.Float.$fNumDouble_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Float.plusDouble_closure+2;
         const GHC.Float.minusDouble_closure+2;
         const GHC.Float.timesDouble_closure+2;
         const GHC.Float.negateDouble_closure+1;
         const GHC.Float.fabsDouble_closure+1;
         const GHC.Float.$fNumDouble_$csignum_closure+1;
         const GHC.Float.$fNumDouble_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.633190413 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$cacosh_closure" {
     GHC.Float.$fFloatingDouble_$cacosh_closure:
         const GHC.Float.$fFloatingDouble_$cacosh_info;
 },
 GHC.Float.$fFloatingDouble_$cacosh_entry() //  [R2]
         { []
         }
     {offset
       c3bWt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bWX; else goto c3bWY;
       c3bWX: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$cacosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bWY: // global
           I64[Sp - 8] = block_c3bWq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bX2; else goto c3bWr;
       u3bX2: // global
           call _c3bWq(R1) args: 0, res: 0, upd: 0;
       c3bWr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$cacosh_info" {
     GHC.Float.$fFloatingDouble_$cacosh_info:
         const GHC.Float.$fFloatingDouble_$cacosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bWq() //  [R1]
         { []
         }
     {offset
       c3bWq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bX1; else goto c3bX0;
       c3bX1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bX0: // global
           _s3aCS::F64 = F64[R1 + 7];
           (_c3bWF::F64) = call MO_F64_Sqrt(%MO_F_Quot_W64(%MO_F_Sub_W64(_s3aCS::F64,
                                                                         1.0 :: W64),
                                                           %MO_F_Add_W64(_s3aCS::F64, 1.0 :: W64)));
           (_c3bWS::F64) = call MO_F64_Log(%MO_F_Add_W64(_s3aCS::F64,
                                                         %MO_F_Mul_W64(%MO_F_Add_W64(_s3aCS::F64,
                                                                                     1.0 :: W64),
                                                                       _c3bWF::F64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3bWS::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bWq_info" {
     block_c3bWq_info:
         const _c3bWq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.640028032 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$casinh_closure" {
     GHC.Float.$fFloatingDouble_$casinh_closure:
         const GHC.Float.$fFloatingDouble_$casinh_info;
 },
 GHC.Float.$fFloatingDouble_$casinh_entry() //  [R2]
         { []
         }
     {offset
       c3bXy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bXT; else goto c3bXU;
       c3bXT: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$casinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bXU: // global
           I64[Sp - 8] = block_c3bXv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bXY; else goto c3bXw;
       u3bXY: // global
           call _c3bXv(R1) args: 0, res: 0, upd: 0;
       c3bXw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$casinh_info" {
     GHC.Float.$fFloatingDouble_$casinh_info:
         const GHC.Float.$fFloatingDouble_$casinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bXv() //  [R1]
         { []
         }
     {offset
       c3bXv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bXX; else goto c3bXW;
       c3bXX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bXW: // global
           _s3aD3::F64 = F64[R1 + 7];
           (_c3bXH::F64) = call MO_F64_Sqrt(%MO_F_Add_W64(%MO_F_Mul_W64(_s3aD3::F64,
                                                                        _s3aD3::F64),
                                                          1.0 :: W64));
           (_c3bXO::F64) = call MO_F64_Log(%MO_F_Add_W64(_s3aD3::F64,
                                                         _c3bXH::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3bXO::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bXv_info" {
     block_c3bXv_info:
         const _c3bXv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.646734706 UTC

[section ""data" . GHC.Float.$fFractionalDouble_$crecip_closure" {
     GHC.Float.$fFractionalDouble_$crecip_closure:
         const GHC.Float.$fFractionalDouble_$crecip_info;
 },
 GHC.Float.$fFractionalDouble_$crecip_entry() //  [R2]
         { []
         }
     {offset
       c3bYn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3bYu; else goto c3bYv;
       c3bYu: // global
           R2 = R2;
           R1 = GHC.Float.$fFractionalDouble_$crecip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3bYv: // global
           I64[Sp - 8] = block_c3bYk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3bYz; else goto c3bYl;
       u3bYz: // global
           call _c3bYk(R1) args: 0, res: 0, upd: 0;
       c3bYl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFractionalDouble_$crecip_info" {
     GHC.Float.$fFractionalDouble_$crecip_info:
         const GHC.Float.$fFractionalDouble_$crecip_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3bYk() //  [R1]
         { []
         }
     {offset
       c3bYk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bYy; else goto c3bYx;
       c3bYy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3bYx: // global
           _s3aDc::F64 = %MO_F_Quot_W64(1.0 :: W64, F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aDc::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3bYk_info" {
     block_c3bYk_info:
         const _c3bYk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.652843158 UTC

[section ""data" . GHC.Float.rationalToDouble5_closure" {
     GHC.Float.rationalToDouble5_closure:
         const GHC.Float.rationalToDouble5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToDouble5_entry() //  [R1]
         { []
         }
     {offset
       c3bYV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3bYW; else goto c3bYX;
       c3bYW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3bYX: // global
           (_c3bYS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3bYS::I64 == 0) goto c3bYU; else goto c3bYT;
       c3bYU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3bYT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3bYS::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble5_info" {
     GHC.Float.rationalToDouble5_info:
         const GHC.Float.rationalToDouble5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.657757661 UTC

[section ""data" . GHC.Float.rationalToDouble1_closure" {
     GHC.Float.rationalToDouble1_closure:
         const GHC.Float.rationalToDouble1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToDouble1_entry() //  [R1]
         { []
         }
     {offset
       c3bZg: // global
           _r2UmA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3bZj; else goto c3bZk;
       c3bZk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bZm; else goto c3bZl;
       c3bZm: // global
           HpAlloc = 16;
           goto c3bZj;
       c3bZj: // global
           R1 = _r2UmA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3bZl: // global
           (_c3bZb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmA::P64);
           if (_c3bZb::I64 == 0) goto c3bZd; else goto c3bZc;
       c3bZd: // global
           call (I64[I64[_r2UmA::P64]])() args: 8, res: 0, upd: 8;
       c3bZc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3bZb::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(0.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble1_info" {
     GHC.Float.rationalToDouble1_info:
         const GHC.Float.rationalToDouble1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.663229356 UTC

[section ""data" . GHC.Float.rationalToDouble2_closure" {
     GHC.Float.rationalToDouble2_closure:
         const GHC.Float.rationalToDouble2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToDouble2_entry() //  [R1]
         { []
         }
     {offset
       c3bZI: // global
           _r2UmB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3bZL; else goto c3bZM;
       c3bZM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3bZO; else goto c3bZN;
       c3bZO: // global
           HpAlloc = 16;
           goto c3bZL;
       c3bZL: // global
           R1 = _r2UmB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3bZN: // global
           (_c3bZD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmB::P64);
           if (_c3bZD::I64 == 0) goto c3bZF; else goto c3bZE;
       c3bZF: // global
           call (I64[I64[_r2UmB::P64]])() args: 8, res: 0, upd: 8;
       c3bZE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3bZD::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(-1.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble2_info" {
     GHC.Float.rationalToDouble2_info:
         const GHC.Float.rationalToDouble2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.667973281 UTC

[section ""data" . GHC.Float.rationalToDouble3_closure" {
     GHC.Float.rationalToDouble3_closure:
         const GHC.Float.rationalToDouble3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToDouble3_entry() //  [R1]
         { []
         }
     {offset
       c3c0b: // global
           _r2UmC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3c0e; else goto c3c0f;
       c3c0f: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3c0h; else goto c3c0g;
       c3c0h: // global
           HpAlloc = 16;
           goto c3c0e;
       c3c0e: // global
           R1 = _r2UmC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3c0g: // global
           (_c3c06::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmC::P64);
           if (_c3c06::I64 == 0) goto c3c08; else goto c3c07;
       c3c08: // global
           call (I64[I64[_r2UmC::P64]])() args: 8, res: 0, upd: 8;
       c3c07: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3c06::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(1.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble3_info" {
     GHC.Float.rationalToDouble3_info:
         const GHC.Float.rationalToDouble3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.671902026 UTC

[section ""data" . GHC.Float.rationalToDouble4_closure" {
     GHC.Float.rationalToDouble4_closure:
         const GHC.Types.D#_con_info;
         const 0.0 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.676327659 UTC

[section ""data" . $w$j_r2Upx_closure" {
     $w$j_r2Upx_closure:
         const $w$j_r2Upx_info;
         const 0;
 },
 $w$j_r2Upx_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3c0G: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3c0H; else goto c3c0I;
       c3c0H: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $w$j_r2Upx_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3c0I: // global
           I64[Sp - 32] = block_c3c0B_info;
           _s3aDh::P64 = R3;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s3aDg::I64 = R2;
           R2 = R4;
           I64[Sp - 24] = _s3aDg::I64;
           P64[Sp - 16] = _s3aDh::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $w$j_r2Upx_info" {
     $w$j_r2Upx_info:
         const $w$j_r2Upx_entry;
         const 0;
         const 133143986190;
         const 12884901907;
         const S3bQP_srt+8;
 },
 _c3c0B() //  [R1]
         { []
         }
     {offset
       c3c0B: // global
           if (R1 == 1) goto c3c0F; else goto c3c0E;
       c3c0F: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3c0E: // global
           I64[Sp] = block_c3c0L_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c0B_info" {
     block_c3c0B_info:
         const _c3c0B;
         const 67;
         const 47244640286;
         const S3bQP_srt+8;
 },
 _c3c0L() //  [R1, R2]
         { []
         }
     {offset
       c3c0L: // global
           I64[Sp] = block_c3c0N_info;
           R3 = 1;
           R2 = R2;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c0L_info" {
     block_c3c0L_info:
         const _c3c0L;
         const 195;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3c0N() //  [R1]
         { []
         }
     {offset
       c3c0N: // global
           I64[Sp] = block_c3c0T_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c0N_info" {
     block_c3c0N_info:
         const _c3c0N;
         const 67;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3c0T() //  [R1]
         { []
         }
     {offset
       c3c0T: // global
           _s3aDl::P64 = P64[Sp + 16];
           _c3c1G::P64 = R1 & 7;
           if (_c3c1G::P64 < 3) goto u3c1H; else goto c3c1y;
       u3c1H: // global
           if (_c3c1G::P64 < 2) goto u3c1I; else goto c3c15;
       u3c1I: // global
           Sp = Sp + 8;
           call _c3c1q() args: 0, res: 0, upd: 0;
       c3c15: // global
           I64[Sp] = block_c3c13_info;
           R2 = _s3aDl::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c3c1y: // global
           I64[Sp] = block_c3c1w_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aDl::P64;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c0T_info" {
     block_c3c0T_info:
         const _c3c0T;
         const 323;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3c13() //  [R1]
         { []
         }
     {offset
       c3c13: // global
           if (R1 & 1 == 0) goto u3c1J; else goto c3c1i;
       u3c1J: // global
           Sp = Sp + 8;
           call _c3c1q() args: 0, res: 0, upd: 0;
       c3c1i: // global
           I64[Sp] = block_c3c1g_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c13_info" {
     block_c3c13_info:
         const _c3c13;
         const 323;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3c1q() //  []
         { []
         }
     {offset
       c3c1q: // global
           R3 = I64[Sp];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3c1g() //  [R1]
         { []
         }
     {offset
       c3c1g: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c1g_info" {
     block_c3c1g_info:
         const _c3c1g;
         const 451;
         const 30;
 },
 _c3c1w() //  [R1]
         { []
         }
     {offset
       c3c1w: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c1w_info" {
     block_c3c1w_info:
         const _c3c1w;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.706651321 UTC

[section ""data" . GHC.Float.$w$sfromRat''_closure" {
     GHC.Float.$w$sfromRat''_closure:
         const GHC.Float.$w$sfromRat''_info;
         const 0;
 },
 GHC.Float.$w$sfromRat''_slow() //  [R1]
         { []
         }
     {offset
       c3c2n: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Float.$w$sfromRat''_entry(R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Float.$w$sfromRat''_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3c2A: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3c2B; else goto c3c2C;
       c3c2B: // global
           R1 = GHC.Float.$w$sfromRat''_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3c2C: // global
           I64[Sp - 40] = block_c3c2t_info;
           R1 = R5;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3caP; else goto c3c2u;
       u3caP: // global
           call _c3c2t(R1) args: 0, res: 0, upd: 0;
       c3c2u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sfromRat''_info" {
     GHC.Float.$w$sfromRat''_info:
         const GHC.Float.$w$sfromRat''_entry;
         const 0;
         const 4367981740046;
         const 17179869184;
         const S3bQP_srt+8;
         const 196;
         const GHC.Float.$w$sfromRat''_slow;
 },
 _c3c2t() //  [R1]
         { []
         }
     {offset
       c3c2t: // global
           if (R1 & 7 == 1) goto c3c2y; else goto c3c2x;
       c3c2y: // global
           I64[Sp] = block_c3c9L_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c3c2x: // global
           I64[Sp - 8] = 1;
           I64[Sp] = (-1);
           Sp = Sp - 8;
           call _s3aDy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c2t_info" {
     block_c3c2t_info:
         const _c3c2t;
         const 196;
         const 2168958484510;
         const S3bQP_srt+8;
 },
 _c3c9L() //  [R1, R2]
         { []
         }
     {offset
       c3c9L: // global
           I64[Sp] = R1;
           I64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _s3aDy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c9L_info" {
     block_c3c9L_info:
         const _c3c9L;
         const 196;
         const 2168958484510;
         const S3bQP_srt+8;
 },
 _s3aDy() //  []
         { []
         }
     {offset
       s3aDy: // global
           _s3aDw::P64 = P64[Sp + 32];
           if (I64[Sp] == 0) goto c3c9p; else goto c3c4G;
       c3c9p: // global
           I64[Sp] = block_c3c5g_info;
           R1 = _s3aDw::P64;
           if (R1 & 7 != 0) goto u3cb6; else goto c3c9q;
       u3cb6: // global
           call _c3c5g(R1) args: 0, res: 0, upd: 0;
       c3c9q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3c4G: // global
           I64[Sp] = block_c3c2L_info;
           R1 = _s3aDw::P64;
           if (R1 & 7 != 0) goto u3cb5; else goto c3c4H;
       u3cb5: // global
           call _c3c2L(R1) args: 0, res: 0, upd: 0;
       c3c4H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3c5g() //  [R1]
         { []
         }
     {offset
       c3c5g: // global
           if (R1 & 7 == 1) goto c3c9B; else goto c3c9w;
       c3c9B: // global
           I64[Sp] = block_c3c9z_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c3c9w: // global
           I64[Sp + 40] = (-1);
           Sp = Sp + 8;
           call _s3aEc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c5g_info" {
     block_c3c5g_info:
         const _c3c5g;
         const 1477;
         const 2100239007774;
         const S3bQP_srt+8;
 },
 _c3c9z() //  [R1]
         { []
         }
     {offset
       c3c9z: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _s3aEc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c9z_info" {
     block_c3c9z_info:
         const _c3c9z;
         const 1477;
         const 1550483193886;
         const S3bQP_srt+8;
 },
 _s3aEc() //  []
         { []
         }
     {offset
       s3aEc: // global
           _s3aDu::I64 = I64[Sp + 8];
           _s3aDv::I64 = I64[Sp + 16];
           _s3aDw::P64 = P64[Sp + 24];
           _s3aDz::I64 = I64[Sp];
           _s3aEd::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_s3aEd::I64,
                            _s3aDz::I64 + _s3aDu::I64 - 1)) goto c3c7D; else goto c3c9o;
       c3c7D: // global
           _s3aEh::I64 = _s3aDz::I64 + (_s3aDu::I64 - _s3aDv::I64);
           if (%MO_S_Gt_W64(_s3aEh::I64, 0)) goto c3c7A; else goto c3c7B;
       c3c7A: // global
           if (%MO_S_Gt_W64(_s3aEh::I64,
                            _s3aEd::I64)) goto c3c6b; else goto c3c7y;
       c3c6b: // global
           if (%MO_S_Le_W64(_s3aEh::I64,
                            _s3aEd::I64 + 1)) goto c3c5O; else goto u3caI;
       c3c5O: // global
           I64[Sp] = block_c3c5M_info;
           R1 = _s3aDw::P64;
           if (R1 & 7 != 0) goto u3cb8; else goto c3c5P;
       u3cb8: // global
           call _c3c5M(R1) args: 0, res: 0, upd: 0;
       c3c5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3caI: // global
           Sp = Sp + 40;
           call _c3c69() args: 0, res: 0, upd: 0;
       c3c7y: // global
           _s3aEv::I64 = -_s3aEh::I64;
           if (%MO_S_Lt_W64(_s3aEv::I64, 0)) goto c3c7m; else goto c3c7t;
       c3c7m: // global
           I64[Sp] = block_c3c7k_info;
           R3 = -_s3aEv::I64;
           R2 = _s3aDw::P64;
           I64[Sp + 32] = _s3aEh::I64;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c7t: // global
           I64[Sp] = block_c3c7s_info;
           R3 = _s3aEv::I64;
           R2 = _s3aDw::P64;
           I64[Sp + 32] = _s3aEh::I64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c7B: // global
           R3 = _s3aDu::I64 - _s3aDv::I64 - _s3aEh::I64;
           R2 = _s3aDw::P64;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       c3c9o: // global
           if (%MO_S_Ge_W64(_s3aEd::I64,
                            _s3aDv::I64)) goto c3c9m; else goto c3c9n;
       c3c9m: // global
           _s3aEP::I64 = -((_s3aEd::I64 + 1) - _s3aDv::I64);
           if (%MO_S_Lt_W64(_s3aEP::I64, 0)) goto c3c99; else goto c3c9g;
       c3c99: // global
           I64[Sp - 8] = block_c3c97_info;
           R3 = -_s3aEP::I64;
           R2 = _s3aDw::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c9g: // global
           I64[Sp - 8] = block_c3c9f_info;
           R3 = _s3aEP::I64;
           R2 = _s3aDw::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c9n: // global
           R3 = -_s3aDz::I64;
           R2 = _s3aDw::P64;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3c5M() //  [R1]
         { []
         }
     {offset
       c3c5M: // global
           if (R1 & 7 == 1) goto c3c60; else goto c3c5V;
       c3c60: // global
           I64[Sp] = block_c3c5Y_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c3c5V: // global
           R3 = I64[Sp + 8] - I64[Sp + 16];
           R2 = GHC.Float.$fRealDouble1_closure;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c5M_info" {
     block_c3c5M_info:
         const _c3c5M;
         const 964;
         const 141733920798;
         const S3bQP_srt+32;
 },
 _c3c5Y() //  [R2]
         { []
         }
     {offset
       c3c5Y: // global
           if (R2 == 0) goto u3caJ; else goto c3c67;
       u3caJ: // global
           Sp = Sp + 40;
           call _c3c69() args: 0, res: 0, upd: 0;
       c3c67: // global
           R3 = I64[Sp + 8] - I64[Sp + 16];
           R2 = GHC.Float.$fRealDouble1_closure;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c5Y_info" {
     block_c3c5Y_info:
         const _c3c5Y;
         const 964;
         const 4294967326;
         const S3bQP_srt+32;
 },
 _c3c69() //  []
         { []
         }
     {offset
       c3c69: // global
           D1 = 0.0 :: W64;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
     }
 },
 _c3c7k() //  [R1]
         { []
         }
     {offset
       c3c7k: // global
           P64[Sp] = R1;
           call _s3aEw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c7k_info" {
     block_c3c7k_info:
         const _c3c7k;
         const 708;
         const 313532612638;
         const S3bQP_srt+8;
 },
 _c3c7s() //  [R1]
         { []
         }
     {offset
       c3c7s: // global
           P64[Sp] = R1;
           call _s3aEw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c7s_info" {
     block_c3c7s_info:
         const _c3c7s;
         const 708;
         const 313532612638;
         const S3bQP_srt+8;
 },
 _s3aEw() //  []
         { []
         }
     {offset
       s3aEw: // global
           I64[Sp - 8] = block_c3c6p_info;
           R3 = I64[Sp + 32] - 1;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3c6p() //  [R1]
         { []
         }
     {offset
       c3c6p: // global
           _s3aDu::I64 = I64[Sp + 16];
           _s3aDv::I64 = I64[Sp + 24];
           _s3aEx::P64 = P64[Sp + 8];
           if (R1 == 0) goto c3c6H; else goto u3cau;
       c3c6H: // global
           R3 = _s3aDu::I64 - _s3aDv::I64;
           R2 = _s3aEx::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       u3cau: // global
           if (R1 == 1) goto c3c6M; else goto c3c6z;
       c3c6M: // global
           I64[Sp] = block_c3c6K_info;
           R2 = _s3aEx::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c3c6z: // global
           I64[Sp + 32] = block_c3c6w_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aEx::P64;
           I64[Sp + 40] = _s3aDu::I64 - _s3aDv::I64;
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c6p_info" {
     block_c3c6p_info:
         const _c3c6p;
         const 1925;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3c6K() //  [R1]
         { []
         }
     {offset
       c3c6K: // global
           _s3aDu::I64 = I64[Sp + 16];
           _s3aDv::I64 = I64[Sp + 24];
           _s3aEx::P64 = P64[Sp + 8];
           if (R1 & 1 == 0) goto c3c7a; else goto c3c72;
       c3c7a: // global
           R3 = _s3aDu::I64 - _s3aDv::I64;
           R2 = _s3aEx::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       c3c72: // global
           I64[Sp + 32] = block_c3c70_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aEx::P64;
           I64[Sp + 40] = _s3aDu::I64 - _s3aDv::I64;
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c6K_info" {
     block_c3c6K_info:
         const _c3c6K;
         const 1925;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3c70() //  [R1]
         { []
         }
     {offset
       c3c70: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c70_info" {
     block_c3c70_info:
         const _c3c70;
         const 65;
         const 30;
 },
 _c3c6w() //  [R1]
         { []
         }
     {offset
       c3c6w: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c6w_info" {
     block_c3c6w_info:
         const _c3c6w;
         const 65;
         const 30;
 },
 _c3c97() //  [R1]
         { []
         }
     {offset
       c3c97: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _s3aES() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c97_info" {
     block_c3c97_info:
         const _c3c97;
         const 1477;
         const 313532612638;
         const S3bQP_srt+8;
 },
 _c3c9f() //  [R1]
         { []
         }
     {offset
       c3c9f: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _s3aES() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c9f_info" {
     block_c3c9f_info:
         const _c3c9f;
         const 1477;
         const 313532612638;
         const S3bQP_srt+8;
 },
 _s3aES() //  []
         { []
         }
     {offset
       s3aES: // global
           _s3aEU::I64 = I64[Sp + 32] - I64[Sp + 16];
           I64[Sp - 8] = block_c3c80_info;
           R3 = _s3aEU::I64;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3c80() //  [R1]
         { []
         }
     {offset
       c3c80: // global
           _s3aDv::I64 = I64[Sp + 24];
           _s3aDz::I64 = I64[Sp + 8];
           _s3aEd::I64 = I64[Sp + 40];
           _s3aET::P64 = P64[Sp + 16];
           if (R1 == 0) goto c3c8I; else goto u3cav;
       c3c8I: // global
           R3 = _s3aEd::I64 + (1 - _s3aDv::I64 - _s3aDz::I64);
           R2 = _s3aET::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       u3cav: // global
           if (R1 == 2) goto c3c8W; else goto c3c87;
       c3c8W: // global
           I64[Sp + 32] = block_c3c8U_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aET::P64;
           I64[Sp + 40] = _s3aEd::I64 + (1 - _s3aDv::I64 - _s3aDz::I64);
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       c3c87: // global
           I64[Sp] = block_c3c84_info;
           R2 = _s3aET::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c80_info" {
     block_c3c80_info:
         const _c3c80;
         const 1861;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3c8U() //  [R1]
         { []
         }
     {offset
       c3c8U: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c8U_info" {
     block_c3c8U_info:
         const _c3c8U;
         const 65;
         const 30;
 },
 _c3c84() //  [R1]
         { []
         }
     {offset
       c3c84: // global
           _s3aDv::I64 = I64[Sp + 24];
           _s3aDz::I64 = I64[Sp + 8];
           _s3aEd::I64 = I64[Sp + 40];
           _s3aET::P64 = P64[Sp + 16];
           if (R1 & 1 == 0) goto c3c8B; else goto c3c8t;
       c3c8B: // global
           R3 = _s3aEd::I64 + (1 - _s3aDv::I64 - _s3aDz::I64);
           R2 = _s3aET::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       c3c8t: // global
           I64[Sp + 32] = block_c3c8r_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aET::P64;
           I64[Sp + 40] = _s3aEd::I64 + (1 - _s3aDv::I64 - _s3aDz::I64);
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c84_info" {
     block_c3c84_info:
         const _c3c84;
         const 1861;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3c8r() //  [R1]
         { []
         }
     {offset
       c3c8r: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c8r_info" {
     block_c3c8r_info:
         const _c3c8r;
         const 65;
         const 30;
 },
 _c3c2L() //  [R1]
         { []
         }
     {offset
       c3c2L: // global
           if (R1 & 7 == 1) goto c3c50; else goto c3c4V;
       c3c50: // global
           I64[Sp] = block_c3c4Y_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c3c4V: // global
           _s3aE6::I64 = (-1) - I64[Sp + 8];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s3aE6::I64)) goto u3cay; else goto c3c4T;
       u3cay: // global
           Sp = Sp + 16;
           call _c3c5b() args: 0, res: 0, upd: 0;
       c3c4T: // global
           I64[Sp + 16] = _s3aE6::I64;
           Sp = Sp + 16;
           call _s3aDC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c2L_info" {
     block_c3c2L_info:
         const _c3c2L;
         const 453;
         const 47244640286;
         const S3bQP_srt+40;
 },
 _c3c4Y() //  [R1]
         { []
         }
     {offset
       c3c4Y: // global
           _s3aEa::I64 = R1 - I64[Sp + 8];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s3aEa::I64)) goto u3caA; else goto c3c5c;
       u3caA: // global
           Sp = Sp + 16;
           call _c3c5b() args: 0, res: 0, upd: 0;
       c3c5c: // global
           I64[Sp + 16] = _s3aEa::I64;
           Sp = Sp + 16;
           call _s3aDC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c4Y_info" {
     block_c3c4Y_info:
         const _c3c4Y;
         const 453;
         const 12884901918;
         const S3bQP_srt+40;
 },
 _c3c5b() //  []
         { []
         }
     {offset
       c3c5b: // global
           I64[Sp] = I64[Sp];
           call _s3aDC() args: 0, res: 0, upd: 0;
     }
 },
 _s3aDC() //  []
         { []
         }
     {offset
       s3aDC: // global
           _s3aDv::I64 = I64[Sp + 8];
           _s3aDw::P64 = P64[Sp + 16];
           _s3aDD::I64 = I64[Sp];
           if (%MO_S_Ge_W64(_s3aDD::I64,
                            _s3aDv::I64)) goto c3c4h; else goto c3c4y;
       c3c4h: // global
           _s3aDx::P64 = P64[Sp + 24];
           if (_s3aDD::I64 == _s3aDv::I64) goto c3c4f; else goto c3c48;
       c3c4f: // global
           P64[Sp + 24] = _s3aDw::P64;
           P64[Sp + 16] = _s3aDx::P64;
           call _s3aDE() args: 0, res: 0, upd: 0;
       c3c48: // global
           _s3aDX::I64 = _s3aDD::I64 - _s3aDv::I64;
           if (%MO_S_Lt_W64(_s3aDX::I64, 0)) goto c3c43; else goto c3c46;
       c3c43: // global
           I64[Sp - 8] = block_c3c45_info;
           R3 = -_s3aDX::I64;
           R2 = _s3aDx::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c46: // global
           I64[Sp - 8] = block_c3c45_info;
           R3 = _s3aDX::I64;
           R2 = _s3aDx::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c4y: // global
           _s3aE1::I64 = _s3aDv::I64 - _s3aDD::I64;
           if (%MO_S_Lt_W64(_s3aE1::I64, 0)) goto c3c4u; else goto c3c4x;
       c3c4u: // global
           I64[Sp - 8] = block_c3c4w_info;
           R3 = -_s3aE1::I64;
           R2 = _s3aDw::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c4x: // global
           I64[Sp - 8] = block_c3c4w_info;
           R3 = _s3aE1::I64;
           R2 = _s3aDw::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3c45() //  [R1]
         { []
         }
     {offset
       c3c45: // global
           _s3aDF::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp + 32] = _s3aDF::P64;
           Sp = Sp + 8;
           call _s3aDE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c45_info" {
     block_c3c45_info:
         const _c3c45;
         const 708;
         const 12884901918;
         const S3bQP_srt+40;
 },
 _c3c4w() //  [R1]
         { []
         }
     {offset
       c3c4w: // global
           _s3aDG::P64 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           P64[Sp + 24] = _s3aDG::P64;
           Sp = Sp + 8;
           call _s3aDE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3c4w_info" {
     block_c3c4w_info:
         const _c3c4w;
         const 452;
         const 12884901918;
         const S3bQP_srt+40;
 },
 _s3aDE() //  []
         { []
         }
     {offset
       s3aDE: // global
           _s3aDv::I64 = I64[Sp + 8];
           _s3aDG::P64 = P64[Sp + 16];
           if (%MO_S_Lt_W64(_s3aDv::I64, 0)) goto c3c34; else goto c3c3r;
       c3c34: // global
           I64[Sp - 8] = block_c3c32_info;
           R3 = -_s3aDv::I64;
           R2 = _s3aDG::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c3r: // global
           I64[Sp - 8] = block_c3c3q_info;
           R3 = _s3aDv::I64;
           R2 = _s3aDG::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3c32() //  [R1]
         { []
         }
     {offset
       c3c32: // global
           I64[Sp] = block_c3c38_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c32_info" {
     block_c3c32_info:
         const _c3c32;
         const 196;
         const 4294967326;
         const S3bQP_srt+40;
 },
 _c3c38() //  [R1]
         { []
         }
     {offset
       c3c38: // global
           _s3aDG::P64 = P64[Sp + 24];
           if (R1 == 1) goto c3c3k; else goto c3c3f;
       c3c3k: // global
           I64[Sp] = block_c3c3i_info;
           R3 = 1;
           R2 = _s3aDG::P64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c3f: // global
           R4 = _s3aDG::P64;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] - I64[Sp + 16];
           Sp = Sp + 40;
           call $w$j_r2Upx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c38_info" {
     block_c3c38_info:
         const _c3c38;
         const 196;
         const 4294967326;
         const S3bQP_srt+40;
 },
 _c3c3i() //  [R1]
         { []
         }
     {offset
       c3c3i: // global
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] + (1 - I64[Sp + 16]);
           Sp = Sp + 40;
           call $w$j_r2Upx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c3i_info" {
     block_c3c3i_info:
         const _c3c3i;
         const 452;
         const 4294967326;
         const S3bQP_srt+40;
 },
 _c3c3q() //  [R1]
         { []
         }
     {offset
       c3c3q: // global
           I64[Sp] = block_c3c3v_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c3q_info" {
     block_c3c3q_info:
         const _c3c3q;
         const 196;
         const 4294967326;
         const S3bQP_srt+40;
 },
 _c3c3v() //  [R1]
         { []
         }
     {offset
       c3c3v: // global
           _s3aDG::P64 = P64[Sp + 24];
           if (R1 == 1) goto c3c3H; else goto c3c3C;
       c3c3H: // global
           I64[Sp] = block_c3c3F_info;
           R3 = 1;
           R2 = _s3aDG::P64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3c3C: // global
           R4 = _s3aDG::P64;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] - I64[Sp + 16];
           Sp = Sp + 40;
           call $w$j_r2Upx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c3v_info" {
     block_c3c3v_info:
         const _c3c3v;
         const 196;
         const 4294967326;
         const S3bQP_srt+40;
 },
 _c3c3F() //  [R1]
         { []
         }
     {offset
       c3c3F: // global
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] + (1 - I64[Sp + 16]);
           Sp = Sp + 40;
           call $w$j_r2Upx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3c3F_info" {
     block_c3c3F_info:
         const _c3c3F;
         const 452;
         const 4294967326;
         const S3bQP_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.767918912 UTC

[section ""data" . GHC.Float.fromRat''_$sfromRat''1_closure" {
     GHC.Float.fromRat''_$sfromRat''1_closure:
         const GHC.Float.fromRat''_$sfromRat''1_info;
         const 0;
 },
 GHC.Float.fromRat''_$sfromRat''1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3cew: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3ceJ; else goto c3ceK;
       c3ceJ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat''_$sfromRat''1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ceK: // global
           I64[Sp - 32] = block_c3cet_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3ceR; else goto c3ceu;
       u3ceR: // global
           call _c3cet(R1) args: 0, res: 0, upd: 0;
       c3ceu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat''_$sfromRat''1_info" {
     GHC.Float.fromRat''_$sfromRat''1_info:
         const GHC.Float.fromRat''_$sfromRat''1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3bQP_srt+80;
 },
 _c3cet() //  [R1]
         { []
         }
     {offset
       c3cet: // global
           I64[Sp] = block_c3cez_info;
           _s3aFu::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3aFu::I64;
           if (R1 & 7 != 0) goto u3ceQ; else goto c3ceA;
       u3ceQ: // global
           call _c3cez(R1) args: 0, res: 0, upd: 0;
       c3ceA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cet_info" {
     block_c3cet_info:
         const _c3cet;
         const 3;
         const 4294967326;
         const S3bQP_srt+80;
 },
 _c3cez() //  [R1]
         { []
         }
     {offset
       c3cez: // global
           _s3aFs::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3ceE_info;
           R5 = _s3aFs::P64;
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Float.$w$sfromRat''_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cez_info" {
     block_c3cez_info:
         const _c3cez;
         const 67;
         const 4294967326;
         const S3bQP_srt+80;
 },
 _c3ceE() //  [D1]
         { []
         }
     {offset
       c3ceE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ceP; else goto c3ceO;
       c3ceP: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3ceO: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ceE_info" {
     block_c3ceE_info:
         const _c3ceE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.782560269 UTC

[section ""data" . GHC.Float.rationalToDouble_closure" {
     GHC.Float.rationalToDouble_closure:
         const GHC.Float.rationalToDouble_info;
         const 0;
 },
 GHC.Float.rationalToDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cfm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3cfn; else goto c3cfo;
       c3cfn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.rationalToDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cfo: // global
           I64[Sp - 24] = block_c3cfh_info;
           _s3aFz::P64 = R3;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s3aFy::P64 = R2;
           R2 = _s3aFz::P64;
           P64[Sp - 16] = _s3aFy::P64;
           P64[Sp - 8] = _s3aFz::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToDouble_info" {
     GHC.Float.rationalToDouble_info:
         const GHC.Float.rationalToDouble_entry;
         const 0;
         const 33539399614478;
         const 8589934607;
         const S3bQP_srt+24;
 },
 _c3cfh() //  [R1]
         { []
         }
     {offset
       c3cfh: // global
           _s3aFy::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3cfl; else goto c3cfk;
       c3cfl: // global
           I64[Sp] = block_c3cge_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s3aFy::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3cfk: // global
           I64[Sp] = block_c3cfr_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s3aFy::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cfh_info" {
     block_c3cfh_info:
         const _c3cfh;
         const 2;
         const 31340376358942;
         const S3bQP_srt+24;
 },
 _c3cge() //  [R1]
         { []
         }
     {offset
       c3cge: // global
           if (R1 == 1) goto c3cgA; else goto c3cgm;
       c3cgA: // global
           R1 = GHC.Float.rationalToDouble1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3cgm: // global
           I64[Sp + 16] = block_c3cgj_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cge_info" {
     block_c3cge_info:
         const _c3cge;
         const 130;
         const 30790620545054;
         const S3bQP_srt+24;
 },
 _c3cgj() //  [R1]
         { []
         }
     {offset
       c3cgj: // global
           if (R1 == 1) goto c3cgw; else goto c3cgs;
       c3cgw: // global
           R1 = GHC.Float.rationalToDouble2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3cgs: // global
           R1 = GHC.Float.rationalToDouble3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cgj_info" {
     block_c3cgj_info:
         const _c3cgj;
         const 0;
         const 12884901918;
         const S3bQP_srt+112;
 },
 _c3cfr() //  [R1]
         { []
         }
     {offset
       c3cfr: // global
           if (R1 == 1) goto c3cgb; else goto c3cfz;
       c3cgb: // global
           R1 = GHC.Float.rationalToDouble4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3cfz: // global
           I64[Sp] = block_c3cfw_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cfr_info" {
     block_c3cfr_info:
         const _c3cfr;
         const 2;
         const 554050781214;
         const S3bQP_srt+24;
 },
 _c3cfw() //  [R1]
         { []
         }
     {offset
       c3cfw: // global
           _s3aFy::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3cg3; else goto c3cfK;
       c3cg3: // global
           I64[Sp + 8] = block_c3cfQ_info;
           R2 = _s3aFy::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3cfK: // global
           _s3aFz::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3cfD_info;
           R5 = _s3aFz::P64;
           R4 = _s3aFy::P64;
           R3 = 53;
           R2 = (-1021);
           Sp = Sp + 16;
           call GHC.Float.$w$sfromRat''_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cfw_info" {
     block_c3cfw_info:
         const _c3cfw;
         const 2;
         const 4294967326;
         const S3bQP_srt+80;
 },
 _c3cfQ() //  [R1]
         { []
         }
     {offset
       c3cfQ: // global
           _s3aFz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3cfU_info;
           R5 = _s3aFz::P64;
           R4 = R1;
           R3 = 53;
           R2 = (-1021);
           Sp = Sp + 8;
           call GHC.Float.$w$sfromRat''_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cfQ_info" {
     block_c3cfQ_info:
         const _c3cfQ;
         const 1;
         const 4294967326;
         const S3bQP_srt+80;
 },
 _c3cfU() //  [D1]
         { []
         }
     {offset
       c3cfU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cg7; else goto c3cg6;
       c3cg7: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3cg6: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Neg_W64(D1);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cfU_info" {
     block_c3cfU_info:
         const _c3cfU;
         const 0;
         const 30;
 },
 _c3cfD() //  [D1]
         { []
         }
     {offset
       c3cfD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cfN; else goto c3cfM;
       c3cfN: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3cfM: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cfD_info" {
     block_c3cfD_info:
         const _c3cfD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.801373107 UTC

[section ""data" . GHC.Float.$fFractionalDouble_$cfromRational_closure" {
     GHC.Float.$fFractionalDouble_$cfromRational_closure:
         const GHC.Float.$fFractionalDouble_$cfromRational_info;
         const 0;
 },
 GHC.Float.$fFractionalDouble_$cfromRational_entry() //  [R2]
         { []
         }
     {offset
       c3chu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3chv; else goto c3chw;
       c3chv: // global
           R2 = R2;
           R1 = GHC.Float.$fFractionalDouble_$cfromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3chw: // global
           I64[Sp - 8] = block_c3chr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3chA; else goto c3chs;
       u3chA: // global
           call _c3chr(R1) args: 0, res: 0, upd: 0;
       c3chs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFractionalDouble_$cfromRational_info" {
     GHC.Float.$fFractionalDouble_$cfromRational_info:
         const GHC.Float.$fFractionalDouble_$cfromRational_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S3bQP_srt+96;
 },
 _c3chr() //  [R1]
         { []
         }
     {offset
       c3chr: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Float.rationalToDouble_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3chr_info" {
     block_c3chr_info:
         const _c3chr;
         const 0;
         const 4294967326;
         const S3bQP_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.806288379 UTC

[section ""data" . GHC.Float.$fFractionalDouble_closure" {
     GHC.Float.$fFractionalDouble_closure:
         const GHC.Real.C:Fractional_con_info;
         const GHC.Float.$fNumDouble_closure+1;
         const GHC.Float.divideDouble_closure+2;
         const GHC.Float.$fFractionalDouble_$crecip_closure+1;
         const GHC.Float.$fFractionalDouble_$cfromRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.809049131 UTC

[section ""data" . GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure" {
     GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure:
         const GHC.Float.$fEnumDouble_$snumericEnumFromThen_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$snumericEnumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c3chT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3chU; else goto c3chV;
       c3chU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3chV: // global
           I64[Sp - 8] = block_c3chQ_info;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Float.$fFractionalDouble_closure+1;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$snumericEnumFromThen_info" {
     GHC.Float.$fEnumDouble_$snumericEnumFromThen_info:
         const GHC.Float.$fEnumDouble_$snumericEnumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+136;
 },
 _c3chQ() //  [R1, R2]
         { []
         }
     {offset
       c3chQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3chY; else goto c3chX;
       c3chY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3chX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3chQ_info" {
     block_c3chQ_info:
         const _c3chQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.815779591 UTC

[section ""data" . GHC.Float.$fEnumDouble_$snumericEnumFrom_closure" {
     GHC.Float.$fEnumDouble_$snumericEnumFrom_closure:
         const GHC.Float.$fEnumDouble_$snumericEnumFrom_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$snumericEnumFrom_entry() //  [R2]
         { []
         }
     {offset
       c3cih: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cii; else goto c3cij;
       c3cii: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$snumericEnumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cij: // global
           I64[Sp - 8] = block_c3cie_info;
           R3 = R2;
           R2 = GHC.Float.$fFractionalDouble_closure+1;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$snumericEnumFrom_info" {
     GHC.Float.$fEnumDouble_$snumericEnumFrom_info:
         const GHC.Float.$fEnumDouble_$snumericEnumFrom_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const S3bQP_srt+136;
 },
 _c3cie() //  [R1, R2]
         { []
         }
     {offset
       c3cie: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cim; else goto c3cil;
       c3cim: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3cil: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cie_info" {
     block_c3cie_info:
         const _c3cie;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.821794303 UTC

[section ""data" . GHC.Float.rationalToFloat1_closure" {
     GHC.Float.rationalToFloat1_closure:
         const GHC.Float.rationalToFloat1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToFloat1_entry() //  [R1]
         { []
         }
     {offset
       c3ciG: // global
           _r2UmU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ciJ; else goto c3ciK;
       c3ciK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ciM; else goto c3ciL;
       c3ciM: // global
           HpAlloc = 16;
           goto c3ciJ;
       c3ciJ: // global
           R1 = _r2UmU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ciL: // global
           (_c3ciB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmU::P64);
           if (_c3ciB::I64 == 0) goto c3ciD; else goto c3ciC;
       c3ciD: // global
           call (I64[I64[_r2UmU::P64]])() args: 8, res: 0, upd: 8;
       c3ciC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ciB::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(0.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToFloat1_info" {
     GHC.Float.rationalToFloat1_info:
         const GHC.Float.rationalToFloat1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.826583499 UTC

[section ""data" . GHC.Float.rationalToFloat2_closure" {
     GHC.Float.rationalToFloat2_closure:
         const GHC.Float.rationalToFloat2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToFloat2_entry() //  [R1]
         { []
         }
     {offset
       c3cj8: // global
           _r2UmV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3cjb; else goto c3cjc;
       c3cjc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cje; else goto c3cjd;
       c3cje: // global
           HpAlloc = 16;
           goto c3cjb;
       c3cjb: // global
           R1 = _r2UmV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cjd: // global
           (_c3cj3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmV::P64);
           if (_c3cj3::I64 == 0) goto c3cj5; else goto c3cj4;
       c3cj5: // global
           call (I64[I64[_r2UmV::P64]])() args: 8, res: 0, upd: 8;
       c3cj4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3cj3::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(-1.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToFloat2_info" {
     GHC.Float.rationalToFloat2_info:
         const GHC.Float.rationalToFloat2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.832491255 UTC

[section ""data" . GHC.Float.rationalToFloat3_closure" {
     GHC.Float.rationalToFloat3_closure:
         const GHC.Float.rationalToFloat3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.rationalToFloat3_entry() //  [R1]
         { []
         }
     {offset
       c3cjB: // global
           _r2UmW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3cjE; else goto c3cjF;
       c3cjF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cjH; else goto c3cjG;
       c3cjH: // global
           HpAlloc = 16;
           goto c3cjE;
       c3cjE: // global
           R1 = _r2UmW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cjG: // global
           (_c3cjw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UmW::P64);
           if (_c3cjw::I64 == 0) goto c3cjy; else goto c3cjx;
       c3cjy: // global
           call (I64[I64[_r2UmW::P64]])() args: 8, res: 0, upd: 8;
       c3cjx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3cjw::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(1.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToFloat3_info" {
     GHC.Float.rationalToFloat3_info:
         const GHC.Float.rationalToFloat3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.836332803 UTC

[section ""data" . GHC.Float.rationalToFloat4_closure" {
     GHC.Float.rationalToFloat4_closure:
         const GHC.Types.F#_con_info;
         const 0.0 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.84074083 UTC

[section ""data" . $w$j1_r2Upy_closure" {
     $w$j1_r2Upy_closure:
         const $w$j1_r2Upy_info;
         const 0;
 },
 $w$j1_r2Upy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3ck6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3ck7; else goto c3ck8;
       c3ck7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $w$j1_r2Upy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ck8: // global
           I64[Sp - 32] = block_c3ck1_info;
           _s3aG0::P64 = R3;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s3aFZ::I64 = R2;
           R2 = R4;
           I64[Sp - 24] = _s3aFZ::I64;
           P64[Sp - 16] = _s3aG0::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $w$j1_r2Upy_info" {
     $w$j1_r2Upy_info:
         const $w$j1_r2Upy_entry;
         const 0;
         const 4503664051879950;
         const 12884901907;
         const S3bQP_srt+8;
 },
 _c3ck1() //  [R1]
         { []
         }
     {offset
       c3ck1: // global
           if (R1 == 1) goto c3ck5; else goto c3ck4;
       c3ck5: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3ck4: // global
           I64[Sp] = block_c3ckb_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ck1_info" {
     block_c3ck1_info:
         const _c3ck1;
         const 67;
         const 47244640286;
         const S3bQP_srt+8;
 },
 _c3ckb() //  [R1, R2]
         { []
         }
     {offset
       c3ckb: // global
           I64[Sp] = block_c3ckd_info;
           R3 = 1;
           R2 = R2;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ckb_info" {
     block_c3ckb_info:
         const _c3ckb;
         const 195;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3ckd() //  [R1]
         { []
         }
     {offset
       c3ckd: // global
           I64[Sp] = block_c3ckj_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ckd_info" {
     block_c3ckd_info:
         const _c3ckd;
         const 67;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3ckj() //  [R1]
         { []
         }
     {offset
       c3ckj: // global
           _s3aG4::P64 = P64[Sp + 16];
           _c3cl6::P64 = R1 & 7;
           if (_c3cl6::P64 < 3) goto u3cl7; else goto c3ckY;
       u3cl7: // global
           if (_c3cl6::P64 < 2) goto u3cl8; else goto c3ckv;
       u3cl8: // global
           Sp = Sp + 8;
           call _c3ckQ() args: 0, res: 0, upd: 0;
       c3ckv: // global
           I64[Sp] = block_c3ckt_info;
           R2 = _s3aG4::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c3ckY: // global
           I64[Sp] = block_c3ckW_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aG4::P64;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ckj_info" {
     block_c3ckj_info:
         const _c3ckj;
         const 323;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3ckt() //  [R1]
         { []
         }
     {offset
       c3ckt: // global
           if (R1 & 1 == 0) goto u3cl9; else goto c3ckI;
       u3cl9: // global
           Sp = Sp + 8;
           call _c3ckQ() args: 0, res: 0, upd: 0;
       c3ckI: // global
           I64[Sp] = block_c3ckG_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ckt_info" {
     block_c3ckt_info:
         const _c3ckt;
         const 323;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3ckQ() //  []
         { []
         }
     {offset
       c3ckQ: // global
           R3 = I64[Sp];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3ckG() //  [R1]
         { []
         }
     {offset
       c3ckG: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ckG_info" {
     block_c3ckG_info:
         const _c3ckG;
         const 451;
         const 30;
 },
 _c3ckW() //  [R1]
         { []
         }
     {offset
       c3ckW: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ckW_info" {
     block_c3ckW_info:
         const _c3ckW;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.871060926 UTC

[section ""data" . GHC.Float.$w$sfromRat''1_closure" {
     GHC.Float.$w$sfromRat''1_closure:
         const GHC.Float.$w$sfromRat''1_info;
         const 0;
 },
 GHC.Float.$w$sfromRat''1_slow() //  [R1]
         { []
         }
     {offset
       c3clN: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Float.$w$sfromRat''1_entry(R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Float.$w$sfromRat''1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3cm0: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3cm1; else goto c3cm2;
       c3cm1: // global
           R1 = GHC.Float.$w$sfromRat''1_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3cm2: // global
           I64[Sp - 40] = block_c3clT_info;
           R1 = R5;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3cuf; else goto c3clU;
       u3cuf: // global
           call _c3clT(R1) args: 0, res: 0, upd: 0;
       c3clU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sfromRat''1_info" {
     GHC.Float.$w$sfromRat''1_info:
         const GHC.Float.$w$sfromRat''1_entry;
         const 0;
         const 13512899121119246;
         const 17179869184;
         const S3bQP_srt+8;
         const 196;
         const GHC.Float.$w$sfromRat''1_slow;
 },
 _c3clT() //  [R1]
         { []
         }
     {offset
       c3clT: // global
           if (R1 & 7 == 1) goto c3clY; else goto c3clX;
       c3clY: // global
           I64[Sp] = block_c3ctb_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c3clX: // global
           I64[Sp - 8] = 1;
           I64[Sp] = (-1);
           Sp = Sp - 8;
           call _s3aGh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3clT_info" {
     block_c3clT_info:
         const _c3clT;
         const 196;
         const 4505699866378270;
         const S3bQP_srt+8;
 },
 _c3ctb() //  [R1, R2]
         { []
         }
     {offset
       c3ctb: // global
           I64[Sp] = R1;
           I64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _s3aGh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3ctb_info" {
     block_c3ctb_info:
         const _c3ctb;
         const 196;
         const 4505699866378270;
         const S3bQP_srt+8;
 },
 _s3aGh() //  []
         { []
         }
     {offset
       s3aGh: // global
           _s3aGf::P64 = P64[Sp + 32];
           if (I64[Sp] == 0) goto c3csP; else goto c3co6;
       c3csP: // global
           I64[Sp] = block_c3coG_info;
           R1 = _s3aGf::P64;
           if (R1 & 7 != 0) goto u3cuw; else goto c3csQ;
       u3cuw: // global
           call _c3coG(R1) args: 0, res: 0, upd: 0;
       c3csQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3co6: // global
           I64[Sp] = block_c3cmb_info;
           R1 = _s3aGf::P64;
           if (R1 & 7 != 0) goto u3cuv; else goto c3co7;
       u3cuv: // global
           call _c3cmb(R1) args: 0, res: 0, upd: 0;
       c3co7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3coG() //  [R1]
         { []
         }
     {offset
       c3coG: // global
           if (R1 & 7 == 1) goto c3ct1; else goto c3csW;
       c3ct1: // global
           I64[Sp] = block_c3csZ_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c3csW: // global
           I64[Sp + 40] = (-1);
           Sp = Sp + 8;
           call _s3aGV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3coG_info" {
     block_c3coG_info:
         const _c3coG;
         const 1477;
         const 2100239007774;
         const S3bQP_srt+8;
 },
 _c3csZ() //  [R1]
         { []
         }
     {offset
       c3csZ: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _s3aGV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3csZ_info" {
     block_c3csZ_info:
         const _c3csZ;
         const 1477;
         const 1550483193886;
         const S3bQP_srt+8;
 },
 _s3aGV() //  []
         { []
         }
     {offset
       s3aGV: // global
           _s3aGd::I64 = I64[Sp + 8];
           _s3aGe::I64 = I64[Sp + 16];
           _s3aGf::P64 = P64[Sp + 24];
           _s3aGi::I64 = I64[Sp];
           _s3aGW::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_s3aGW::I64,
                            _s3aGi::I64 + _s3aGd::I64 - 1)) goto c3cr3; else goto c3csO;
       c3cr3: // global
           _s3aH0::I64 = _s3aGi::I64 + (_s3aGd::I64 - _s3aGe::I64);
           if (%MO_S_Gt_W64(_s3aH0::I64, 0)) goto c3cr0; else goto c3cr1;
       c3cr0: // global
           if (%MO_S_Gt_W64(_s3aH0::I64,
                            _s3aGW::I64)) goto c3cpB; else goto c3cqY;
       c3cpB: // global
           if (%MO_S_Le_W64(_s3aH0::I64,
                            _s3aGW::I64 + 1)) goto c3cpe; else goto u3cu8;
       c3cpe: // global
           I64[Sp] = block_c3cpc_info;
           R1 = _s3aGf::P64;
           if (R1 & 7 != 0) goto u3cuy; else goto c3cpf;
       u3cuy: // global
           call _c3cpc(R1) args: 0, res: 0, upd: 0;
       c3cpf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3cu8: // global
           Sp = Sp + 40;
           call _c3cpz() args: 0, res: 0, upd: 0;
       c3cqY: // global
           _s3aHe::I64 = -_s3aH0::I64;
           if (%MO_S_Lt_W64(_s3aHe::I64, 0)) goto c3cqM; else goto c3cqT;
       c3cqM: // global
           I64[Sp] = block_c3cqK_info;
           R3 = -_s3aHe::I64;
           R2 = _s3aGf::P64;
           I64[Sp + 32] = _s3aH0::I64;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3cqT: // global
           I64[Sp] = block_c3cqS_info;
           R3 = _s3aHe::I64;
           R2 = _s3aGf::P64;
           I64[Sp + 32] = _s3aH0::I64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3cr1: // global
           R3 = _s3aGd::I64 - _s3aGe::I64 - _s3aH0::I64;
           R2 = _s3aGf::P64;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       c3csO: // global
           if (%MO_S_Ge_W64(_s3aGW::I64,
                            _s3aGe::I64)) goto c3csM; else goto c3csN;
       c3csM: // global
           _s3aHy::I64 = -((_s3aGW::I64 + 1) - _s3aGe::I64);
           if (%MO_S_Lt_W64(_s3aHy::I64, 0)) goto c3csz; else goto c3csG;
       c3csz: // global
           I64[Sp - 8] = block_c3csx_info;
           R3 = -_s3aHy::I64;
           R2 = _s3aGf::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3csG: // global
           I64[Sp - 8] = block_c3csF_info;
           R3 = _s3aHy::I64;
           R2 = _s3aGf::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3csN: // global
           R3 = -_s3aGi::I64;
           R2 = _s3aGf::P64;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3cpc() //  [R1]
         { []
         }
     {offset
       c3cpc: // global
           if (R1 & 7 == 1) goto c3cpq; else goto c3cpl;
       c3cpq: // global
           I64[Sp] = block_c3cpo_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c3cpl: // global
           R3 = I64[Sp + 8] - I64[Sp + 16];
           R2 = GHC.Float.$fRealDouble1_closure;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cpc_info" {
     block_c3cpc_info:
         const _c3cpc;
         const 964;
         const 141733920798;
         const S3bQP_srt+32;
 },
 _c3cpo() //  [R2]
         { []
         }
     {offset
       c3cpo: // global
           if (R2 == 0) goto u3cu9; else goto c3cpx;
       u3cu9: // global
           Sp = Sp + 40;
           call _c3cpz() args: 0, res: 0, upd: 0;
       c3cpx: // global
           R3 = I64[Sp + 8] - I64[Sp + 16];
           R2 = GHC.Float.$fRealDouble1_closure;
           Sp = Sp + 40;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cpo_info" {
     block_c3cpo_info:
         const _c3cpo;
         const 964;
         const 4294967326;
         const S3bQP_srt+32;
 },
 _c3cpz() //  []
         { []
         }
     {offset
       c3cpz: // global
           F1 = 0.0 :: W32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
     }
 },
 _c3cqK() //  [R1]
         { []
         }
     {offset
       c3cqK: // global
           P64[Sp] = R1;
           call _s3aHf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cqK_info" {
     block_c3cqK_info:
         const _c3cqK;
         const 708;
         const 313532612638;
         const S3bQP_srt+8;
 },
 _c3cqS() //  [R1]
         { []
         }
     {offset
       c3cqS: // global
           P64[Sp] = R1;
           call _s3aHf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cqS_info" {
     block_c3cqS_info:
         const _c3cqS;
         const 708;
         const 313532612638;
         const S3bQP_srt+8;
 },
 _s3aHf() //  []
         { []
         }
     {offset
       s3aHf: // global
           I64[Sp - 8] = block_c3cpP_info;
           R3 = I64[Sp + 32] - 1;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3cpP() //  [R1]
         { []
         }
     {offset
       c3cpP: // global
           _s3aGd::I64 = I64[Sp + 16];
           _s3aGe::I64 = I64[Sp + 24];
           _s3aHg::P64 = P64[Sp + 8];
           if (R1 == 0) goto c3cq7; else goto u3ctU;
       c3cq7: // global
           R3 = _s3aGd::I64 - _s3aGe::I64;
           R2 = _s3aHg::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       u3ctU: // global
           if (R1 == 1) goto c3cqc; else goto c3cpZ;
       c3cqc: // global
           I64[Sp] = block_c3cqa_info;
           R2 = _s3aHg::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c3cpZ: // global
           I64[Sp + 32] = block_c3cpW_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aHg::P64;
           I64[Sp + 40] = _s3aGd::I64 - _s3aGe::I64;
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cpP_info" {
     block_c3cpP_info:
         const _c3cpP;
         const 1925;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3cqa() //  [R1]
         { []
         }
     {offset
       c3cqa: // global
           _s3aGd::I64 = I64[Sp + 16];
           _s3aGe::I64 = I64[Sp + 24];
           _s3aHg::P64 = P64[Sp + 8];
           if (R1 & 1 == 0) goto c3cqA; else goto c3cqs;
       c3cqA: // global
           R3 = _s3aGd::I64 - _s3aGe::I64;
           R2 = _s3aHg::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       c3cqs: // global
           I64[Sp + 32] = block_c3cqq_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aHg::P64;
           I64[Sp + 40] = _s3aGd::I64 - _s3aGe::I64;
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cqa_info" {
     block_c3cqa_info:
         const _c3cqa;
         const 1925;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3cqq() //  [R1]
         { []
         }
     {offset
       c3cqq: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cqq_info" {
     block_c3cqq_info:
         const _c3cqq;
         const 65;
         const 30;
 },
 _c3cpW() //  [R1]
         { []
         }
     {offset
       c3cpW: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cpW_info" {
     block_c3cpW_info:
         const _c3cpW;
         const 65;
         const 30;
 },
 _c3csx() //  [R1]
         { []
         }
     {offset
       c3csx: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _s3aHB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3csx_info" {
     block_c3csx_info:
         const _c3csx;
         const 1477;
         const 313532612638;
         const S3bQP_srt+8;
 },
 _c3csF() //  [R1]
         { []
         }
     {offset
       c3csF: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _s3aHB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3csF_info" {
     block_c3csF_info:
         const _c3csF;
         const 1477;
         const 313532612638;
         const S3bQP_srt+8;
 },
 _s3aHB() //  []
         { []
         }
     {offset
       s3aHB: // global
           _s3aHD::I64 = I64[Sp + 32] - I64[Sp + 16];
           I64[Sp - 8] = block_c3crq_info;
           R3 = _s3aHD::I64;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3crq() //  [R1]
         { []
         }
     {offset
       c3crq: // global
           _s3aGe::I64 = I64[Sp + 24];
           _s3aGi::I64 = I64[Sp + 8];
           _s3aGW::I64 = I64[Sp + 40];
           _s3aHC::P64 = P64[Sp + 16];
           if (R1 == 0) goto c3cs8; else goto u3ctV;
       c3cs8: // global
           R3 = _s3aGW::I64 + (1 - _s3aGe::I64 - _s3aGi::I64);
           R2 = _s3aHC::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       u3ctV: // global
           if (R1 == 2) goto c3csm; else goto c3crx;
       c3csm: // global
           I64[Sp + 32] = block_c3csk_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aHC::P64;
           I64[Sp + 40] = _s3aGW::I64 + (1 - _s3aGe::I64 - _s3aGi::I64);
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       c3crx: // global
           I64[Sp] = block_c3cru_info;
           R2 = _s3aHC::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3crq_info" {
     block_c3crq_info:
         const _c3crq;
         const 1861;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3csk() //  [R1]
         { []
         }
     {offset
       c3csk: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3csk_info" {
     block_c3csk_info:
         const _c3csk;
         const 65;
         const 30;
 },
 _c3cru() //  [R1]
         { []
         }
     {offset
       c3cru: // global
           _s3aGe::I64 = I64[Sp + 24];
           _s3aGi::I64 = I64[Sp + 8];
           _s3aGW::I64 = I64[Sp + 40];
           _s3aHC::P64 = P64[Sp + 16];
           if (R1 & 1 == 0) goto c3cs1; else goto c3crT;
       c3cs1: // global
           R3 = _s3aGW::I64 + (1 - _s3aGe::I64 - _s3aGi::I64);
           R2 = _s3aHC::P64;
           Sp = Sp + 48;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       c3crT: // global
           I64[Sp + 32] = block_c3crR_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = _s3aHC::P64;
           I64[Sp + 40] = _s3aGW::I64 + (1 - _s3aGe::I64 - _s3aGi::I64);
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cru_info" {
     block_c3cru_info:
         const _c3cru;
         const 1861;
         const 38654705694;
         const S3bQP_srt+8;
 },
 _c3crR() //  [R1]
         { []
         }
     {offset
       c3crR: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3crR_info" {
     block_c3crR_info:
         const _c3crR;
         const 65;
         const 30;
 },
 _c3cmb() //  [R1]
         { []
         }
     {offset
       c3cmb: // global
           if (R1 & 7 == 1) goto c3coq; else goto c3col;
       c3coq: // global
           I64[Sp] = block_c3coo_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c3col: // global
           _s3aGP::I64 = (-1) - I64[Sp + 8];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s3aGP::I64)) goto u3ctY; else goto c3coj;
       u3ctY: // global
           Sp = Sp + 16;
           call _c3coB() args: 0, res: 0, upd: 0;
       c3coj: // global
           I64[Sp + 16] = _s3aGP::I64;
           Sp = Sp + 16;
           call _s3aGl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cmb_info" {
     block_c3cmb_info:
         const _c3cmb;
         const 453;
         const 140758963191838;
         const S3bQP_srt+48;
 },
 _c3coo() //  [R1]
         { []
         }
     {offset
       c3coo: // global
           _s3aGT::I64 = R1 - I64[Sp + 8];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s3aGT::I64)) goto u3cu0; else goto c3coC;
       u3cu0: // global
           Sp = Sp + 16;
           call _c3coB() args: 0, res: 0, upd: 0;
       c3coC: // global
           I64[Sp + 16] = _s3aGT::I64;
           Sp = Sp + 16;
           call _s3aGl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3coo_info" {
     block_c3coo_info:
         const _c3coo;
         const 453;
         const 140741783322654;
         const S3bQP_srt+48;
 },
 _c3coB() //  []
         { []
         }
     {offset
       c3coB: // global
           I64[Sp] = I64[Sp];
           call _s3aGl() args: 0, res: 0, upd: 0;
     }
 },
 _s3aGl() //  []
         { []
         }
     {offset
       s3aGl: // global
           _s3aGe::I64 = I64[Sp + 8];
           _s3aGf::P64 = P64[Sp + 16];
           _s3aGm::I64 = I64[Sp];
           if (%MO_S_Ge_W64(_s3aGm::I64,
                            _s3aGe::I64)) goto c3cnH; else goto c3cnY;
       c3cnH: // global
           _s3aGg::P64 = P64[Sp + 24];
           if (_s3aGm::I64 == _s3aGe::I64) goto c3cnF; else goto c3cny;
       c3cnF: // global
           P64[Sp + 24] = _s3aGf::P64;
           P64[Sp + 16] = _s3aGg::P64;
           call _s3aGn() args: 0, res: 0, upd: 0;
       c3cny: // global
           _s3aGG::I64 = _s3aGm::I64 - _s3aGe::I64;
           if (%MO_S_Lt_W64(_s3aGG::I64, 0)) goto c3cnt; else goto c3cnw;
       c3cnt: // global
           I64[Sp - 8] = block_c3cnv_info;
           R3 = -_s3aGG::I64;
           R2 = _s3aGg::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3cnw: // global
           I64[Sp - 8] = block_c3cnv_info;
           R3 = _s3aGG::I64;
           R2 = _s3aGg::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3cnY: // global
           _s3aGK::I64 = _s3aGe::I64 - _s3aGm::I64;
           if (%MO_S_Lt_W64(_s3aGK::I64, 0)) goto c3cnU; else goto c3cnX;
       c3cnU: // global
           I64[Sp - 8] = block_c3cnW_info;
           R3 = -_s3aGK::I64;
           R2 = _s3aGf::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3cnX: // global
           I64[Sp - 8] = block_c3cnW_info;
           R3 = _s3aGK::I64;
           R2 = _s3aGf::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3cnv() //  [R1]
         { []
         }
     {offset
       c3cnv: // global
           _s3aGo::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp + 32] = _s3aGo::P64;
           Sp = Sp + 8;
           call _s3aGn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cnv_info" {
     block_c3cnv_info:
         const _c3cnv;
         const 708;
         const 140741783322654;
         const S3bQP_srt+48;
 },
 _c3cnW() //  [R1]
         { []
         }
     {offset
       c3cnW: // global
           _s3aGp::P64 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           P64[Sp + 24] = _s3aGp::P64;
           Sp = Sp + 8;
           call _s3aGn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cnW_info" {
     block_c3cnW_info:
         const _c3cnW;
         const 452;
         const 140741783322654;
         const S3bQP_srt+48;
 },
 _s3aGn() //  []
         { []
         }
     {offset
       s3aGn: // global
           _s3aGe::I64 = I64[Sp + 8];
           _s3aGp::P64 = P64[Sp + 16];
           if (%MO_S_Lt_W64(_s3aGe::I64, 0)) goto c3cmu; else goto c3cmR;
       c3cmu: // global
           I64[Sp - 8] = block_c3cms_info;
           R3 = -_s3aGe::I64;
           R2 = _s3aGp::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3cmR: // global
           I64[Sp - 8] = block_c3cmQ_info;
           R3 = _s3aGe::I64;
           R2 = _s3aGp::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3cms() //  [R1]
         { []
         }
     {offset
       c3cms: // global
           I64[Sp] = block_c3cmy_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cms_info" {
     block_c3cms_info:
         const _c3cms;
         const 196;
         const 4294967326;
         const S3bQP_srt+168;
 },
 _c3cmy() //  [R1]
         { []
         }
     {offset
       c3cmy: // global
           _s3aGp::P64 = P64[Sp + 24];
           if (R1 == 1) goto c3cmK; else goto c3cmF;
       c3cmK: // global
           I64[Sp] = block_c3cmI_info;
           R3 = 1;
           R2 = _s3aGp::P64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3cmF: // global
           R4 = _s3aGp::P64;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] - I64[Sp + 16];
           Sp = Sp + 40;
           call $w$j1_r2Upy_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cmy_info" {
     block_c3cmy_info:
         const _c3cmy;
         const 196;
         const 4294967326;
         const S3bQP_srt+168;
 },
 _c3cmI() //  [R1]
         { []
         }
     {offset
       c3cmI: // global
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] + (1 - I64[Sp + 16]);
           Sp = Sp + 40;
           call $w$j1_r2Upy_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cmI_info" {
     block_c3cmI_info:
         const _c3cmI;
         const 452;
         const 4294967326;
         const S3bQP_srt+168;
 },
 _c3cmQ() //  [R1]
         { []
         }
     {offset
       c3cmQ: // global
           I64[Sp] = block_c3cmV_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cmQ_info" {
     block_c3cmQ_info:
         const _c3cmQ;
         const 196;
         const 4294967326;
         const S3bQP_srt+168;
 },
 _c3cmV() //  [R1]
         { []
         }
     {offset
       c3cmV: // global
           _s3aGp::P64 = P64[Sp + 24];
           if (R1 == 1) goto c3cn7; else goto c3cn2;
       c3cn7: // global
           I64[Sp] = block_c3cn5_info;
           R3 = 1;
           R2 = _s3aGp::P64;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3cn2: // global
           R4 = _s3aGp::P64;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] - I64[Sp + 16];
           Sp = Sp + 40;
           call $w$j1_r2Upy_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cmV_info" {
     block_c3cmV_info:
         const _c3cmV;
         const 196;
         const 4294967326;
         const S3bQP_srt+168;
 },
 _c3cn5() //  [R1]
         { []
         }
     {offset
       c3cn5: // global
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 8] + (1 - I64[Sp + 16]);
           Sp = Sp + 40;
           call $w$j1_r2Upy_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cn5_info" {
     block_c3cn5_info:
         const _c3cn5;
         const 452;
         const 4294967326;
         const S3bQP_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.934687749 UTC

[section ""data" . GHC.Float.fromRat''_$sfromRat''_closure" {
     GHC.Float.fromRat''_$sfromRat''_closure:
         const GHC.Float.fromRat''_$sfromRat''_info;
         const 0;
 },
 GHC.Float.fromRat''_$sfromRat''_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3cxW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3cy9; else goto c3cya;
       c3cy9: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat''_$sfromRat''_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cya: // global
           I64[Sp - 32] = block_c3cxT_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3cyh; else goto c3cxU;
       u3cyh: // global
           call _c3cxT(R1) args: 0, res: 0, upd: 0;
       c3cxU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat''_$sfromRat''_info" {
     GHC.Float.fromRat''_$sfromRat''_info:
         const GHC.Float.fromRat''_$sfromRat''_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3bQP_srt+176;
 },
 _c3cxT() //  [R1]
         { []
         }
     {offset
       c3cxT: // global
           I64[Sp] = block_c3cxZ_info;
           _s3aId::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3aId::I64;
           if (R1 & 7 != 0) goto u3cyg; else goto c3cy0;
       u3cyg: // global
           call _c3cxZ(R1) args: 0, res: 0, upd: 0;
       c3cy0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cxT_info" {
     block_c3cxT_info:
         const _c3cxT;
         const 3;
         const 4294967326;
         const S3bQP_srt+176;
 },
 _c3cxZ() //  [R1]
         { []
         }
     {offset
       c3cxZ: // global
           _s3aIb::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c3cy4_info;
           R5 = _s3aIb::P64;
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Float.$w$sfromRat''1_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cxZ_info" {
     block_c3cxZ_info:
         const _c3cxZ;
         const 67;
         const 4294967326;
         const S3bQP_srt+176;
 },
 _c3cy4() //  [F1]
         { []
         }
     {offset
       c3cy4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cyf; else goto c3cye;
       c3cyf: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3cye: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cy4_info" {
     block_c3cy4_info:
         const _c3cy4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.946568975 UTC

[section ""data" . GHC.Float.rationalToFloat_closure" {
     GHC.Float.rationalToFloat_closure:
         const GHC.Float.rationalToFloat_info;
         const 0;
 },
 GHC.Float.rationalToFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cyM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3cyN; else goto c3cyO;
       c3cyN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.rationalToFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cyO: // global
           I64[Sp - 24] = block_c3cyH_info;
           _s3aIi::P64 = R3;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s3aIh::P64 = R2;
           R2 = _s3aIi::P64;
           P64[Sp - 16] = _s3aIh::P64;
           P64[Sp - 8] = _s3aIi::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.rationalToFloat_info" {
     GHC.Float.rationalToFloat_info:
         const GHC.Float.rationalToFloat_entry;
         const 0;
         const 137359792929767438;
         const 8589934607;
         const S3bQP_srt+24;
 },
 _c3cyH() //  [R1]
         { []
         }
     {offset
       c3cyH: // global
           _s3aIh::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3cyL; else goto c3cyK;
       c3cyL: // global
           I64[Sp] = block_c3czE_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s3aIh::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3cyK: // global
           I64[Sp] = block_c3cyR_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s3aIh::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cyH_info" {
     block_c3cyH_info:
         const _c3cyH;
         const 2;
         const 128352593675026462;
         const S3bQP_srt+24;
 },
 _c3czE() //  [R1]
         { []
         }
     {offset
       c3czE: // global
           if (R1 == 1) goto c3cA0; else goto c3czM;
       c3cA0: // global
           R1 = GHC.Float.rationalToFloat1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3czM: // global
           I64[Sp + 16] = block_c3czJ_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3czE_info" {
     block_c3czE_info:
         const _c3czE;
         const 130;
         const 126100793861341214;
         const S3bQP_srt+24;
 },
 _c3czJ() //  [R1]
         { []
         }
     {offset
       c3czJ: // global
           if (R1 == 1) goto c3czW; else goto c3czS;
       c3czW: // global
           R1 = GHC.Float.rationalToFloat2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3czS: // global
           R1 = GHC.Float.rationalToFloat3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3czJ_info" {
     block_c3czJ_info:
         const _c3czJ;
         const 0;
         const 12884901918;
         const S3bQP_srt+208;
 },
 _c3cyR() //  [R1]
         { []
         }
     {offset
       c3cyR: // global
           if (R1 == 1) goto c3czB; else goto c3cyZ;
       c3czB: // global
           R1 = GHC.Float.rationalToFloat4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3cyZ: // global
           I64[Sp] = block_c3cyW_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cyR_info" {
     block_c3cyR_info:
         const _c3cyR;
         const 2;
         const 2251804108652574;
         const S3bQP_srt+24;
 },
 _c3cyW() //  [R1]
         { []
         }
     {offset
       c3cyW: // global
           _s3aIh::P64 = P64[Sp + 8];
           if (R1 == 1) goto c3czt; else goto c3cza;
       c3czt: // global
           I64[Sp + 8] = block_c3czg_info;
           R2 = _s3aIh::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3cza: // global
           _s3aIi::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3cz3_info;
           R5 = _s3aIi::P64;
           R4 = _s3aIh::P64;
           R3 = 24;
           R2 = (-125);
           Sp = Sp + 16;
           call GHC.Float.$w$sfromRat''1_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cyW_info" {
     block_c3cyW_info:
         const _c3cyW;
         const 2;
         const 4294967326;
         const S3bQP_srt+176;
 },
 _c3czg() //  [R1]
         { []
         }
     {offset
       c3czg: // global
           _s3aIi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3czk_info;
           R5 = _s3aIi::P64;
           R4 = R1;
           R3 = 24;
           R2 = (-125);
           Sp = Sp + 8;
           call GHC.Float.$w$sfromRat''1_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3czg_info" {
     block_c3czg_info:
         const _c3czg;
         const 1;
         const 4294967326;
         const S3bQP_srt+176;
 },
 _c3czk() //  [F1]
         { []
         }
     {offset
       c3czk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3czx; else goto c3czw;
       c3czx: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3czw: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Neg_W32(F1);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3czk_info" {
     block_c3czk_info:
         const _c3czk;
         const 0;
         const 30;
 },
 _c3cz3() //  [F1]
         { []
         }
     {offset
       c3cz3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3czd; else goto c3czc;
       c3czd: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3czc: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cz3_info" {
     block_c3cz3_info:
         const _c3cz3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.964901204 UTC

[section ""data" . GHC.Float.$fFractionalFloat_$cfromRational_closure" {
     GHC.Float.$fFractionalFloat_$cfromRational_closure:
         const GHC.Float.$fFractionalFloat_$cfromRational_info;
         const 0;
 },
 GHC.Float.$fFractionalFloat_$cfromRational_entry() //  [R2]
         { []
         }
     {offset
       c3cAU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cAV; else goto c3cAW;
       c3cAV: // global
           R2 = R2;
           R1 = GHC.Float.$fFractionalFloat_$cfromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cAW: // global
           I64[Sp - 8] = block_c3cAR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cB0; else goto c3cAS;
       u3cB0: // global
           call _c3cAR(R1) args: 0, res: 0, upd: 0;
       c3cAS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFractionalFloat_$cfromRational_info" {
     GHC.Float.$fFractionalFloat_$cfromRational_info:
         const GHC.Float.$fFractionalFloat_$cfromRational_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S3bQP_srt+192;
 },
 _c3cAR() //  [R1]
         { []
         }
     {offset
       c3cAR: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Float.rationalToFloat_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cAR_info" {
     block_c3cAR_info:
         const _c3cAR;
         const 0;
         const 4294967326;
         const S3bQP_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.971208885 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$catanh_closure" {
     GHC.Float.$fFloatingFloat_$catanh_closure:
         const GHC.Float.$fFloatingFloat_$catanh_info;
 },
 GHC.Float.$fFloatingFloat_$catanh_entry() //  [R2]
         { []
         }
     {offset
       c3cBi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cBC; else goto c3cBD;
       c3cBC: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$catanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cBD: // global
           I64[Sp - 8] = block_c3cBf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cBH; else goto c3cBg;
       u3cBH: // global
           call _c3cBf(R1) args: 0, res: 0, upd: 0;
       c3cBg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$catanh_info" {
     GHC.Float.$fFloatingFloat_$catanh_info:
         const GHC.Float.$fFloatingFloat_$catanh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3cBf() //  [R1]
         { []
         }
     {offset
       c3cBf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cBG; else goto c3cBF;
       c3cBG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3cBF: // global
           _s3aIy::F32 = F32[R1 + 7];
           (_c3cBu::F32) = call MO_F32_Log(%MO_F_Quot_W32(%MO_F_Add_W32(_s3aIy::F32,
                                                                        1.0 :: W32),
                                                          %MO_F_Sub_W32(1.0 :: W32, _s3aIy::F32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Mul_W32(_c3cBu::F32, 0.5 :: W32);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cBf_info" {
     block_c3cBf_info:
         const _c3cBf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.977691531 UTC

[section ""data" . GHC.Float.$fFractionalFloat_$crecip_closure" {
     GHC.Float.$fFractionalFloat_$crecip_closure:
         const GHC.Float.$fFractionalFloat_$crecip_info;
 },
 GHC.Float.$fFractionalFloat_$crecip_entry() //  [R2]
         { []
         }
     {offset
       c3cCa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cCh; else goto c3cCi;
       c3cCh: // global
           R2 = R2;
           R1 = GHC.Float.$fFractionalFloat_$crecip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cCi: // global
           I64[Sp - 8] = block_c3cC7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cCm; else goto c3cC8;
       u3cCm: // global
           call _c3cC7(R1) args: 0, res: 0, upd: 0;
       c3cC8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFractionalFloat_$crecip_info" {
     GHC.Float.$fFractionalFloat_$crecip_info:
         const GHC.Float.$fFractionalFloat_$crecip_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3cC7() //  [R1]
         { []
         }
     {offset
       c3cC7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cCl; else goto c3cCk;
       c3cCl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3cCk: // global
           _s3aIH::F32 = %MO_F_Quot_W32(1.0 :: W32, F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aIH::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cC7_info" {
     block_c3cC7_info:
         const _c3cC7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.982997741 UTC

[section ""data" . GHC.Float.$fFractionalFloat_closure" {
     GHC.Float.$fFractionalFloat_closure:
         const GHC.Real.C:Fractional_con_info;
         const GHC.Float.$fNumFloat_closure+1;
         const GHC.Float.divideFloat_closure+2;
         const GHC.Float.$fFractionalFloat_$crecip_closure+1;
         const GHC.Float.$fFractionalFloat_$cfromRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.985777283 UTC

[section ""data" . GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure" {
     GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure:
         const GHC.Float.$fEnumFloat_$snumericEnumFromThen_info;
         const 0;
 },
 GHC.Float.$fEnumFloat_$snumericEnumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cCK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cCL; else goto c3cCM;
       c3cCL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cCM: // global
           I64[Sp - 8] = block_c3cCH_info;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Float.$fFractionalFloat_closure+1;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$snumericEnumFromThen_info" {
     GHC.Float.$fEnumFloat_$snumericEnumFromThen_info:
         const GHC.Float.$fEnumFloat_$snumericEnumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+232;
 },
 _c3cCH() //  [R1, R2]
         { []
         }
     {offset
       c3cCH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cCP; else goto c3cCO;
       c3cCP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3cCO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cCH_info" {
     block_c3cCH_info:
         const _c3cCH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.992343744 UTC

[section ""data" . GHC.Float.$fEnumFloat_$snumericEnumFrom_closure" {
     GHC.Float.$fEnumFloat_$snumericEnumFrom_closure:
         const GHC.Float.$fEnumFloat_$snumericEnumFrom_info;
         const 0;
 },
 GHC.Float.$fEnumFloat_$snumericEnumFrom_entry() //  [R2]
         { []
         }
     {offset
       c3cD8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cD9; else goto c3cDa;
       c3cD9: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$snumericEnumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cDa: // global
           I64[Sp - 8] = block_c3cD5_info;
           R3 = R2;
           R2 = GHC.Float.$fFractionalFloat_closure+1;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$snumericEnumFrom_info" {
     GHC.Float.$fEnumFloat_$snumericEnumFrom_info:
         const GHC.Float.$fEnumFloat_$snumericEnumFrom_entry;
         const 0;
         const 21994527522830;
         const 4294967301;
         const S3bQP_srt+152;
 },
 _c3cD5() //  [R1, R2]
         { []
         }
     {offset
       c3cD5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cDd; else goto c3cDc;
       c3cDd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3cDc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cD5_info" {
     block_c3cD5_info:
         const _c3cD5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:51.998515117 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$cacosh_closure" {
     GHC.Float.$fFloatingFloat_$cacosh_closure:
         const GHC.Float.$fFloatingFloat_$cacosh_info;
 },
 GHC.Float.$fFloatingFloat_$cacosh_entry() //  [R2]
         { []
         }
     {offset
       c3cDw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cE0; else goto c3cE1;
       c3cE0: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$cacosh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cE1: // global
           I64[Sp - 8] = block_c3cDt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cE5; else goto c3cDu;
       u3cE5: // global
           call _c3cDt(R1) args: 0, res: 0, upd: 0;
       c3cDu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$cacosh_info" {
     GHC.Float.$fFloatingFloat_$cacosh_info:
         const GHC.Float.$fFloatingFloat_$cacosh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3cDt() //  [R1]
         { []
         }
     {offset
       c3cDt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cE4; else goto c3cE3;
       c3cE4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3cE3: // global
           _s3aIT::F32 = F32[R1 + 7];
           (_c3cDI::F32) = call MO_F32_Sqrt(%MO_F_Quot_W32(%MO_F_Sub_W32(_s3aIT::F32,
                                                                         1.0 :: W32),
                                                           %MO_F_Add_W32(_s3aIT::F32, 1.0 :: W32)));
           (_c3cDV::F32) = call MO_F32_Log(%MO_F_Add_W32(_s3aIT::F32,
                                                         %MO_F_Mul_W32(%MO_F_Add_W32(_s3aIT::F32,
                                                                                     1.0 :: W32),
                                                                       _c3cDI::F32)));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3cDV::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cDt_info" {
     block_c3cDt_info:
         const _c3cDt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.005978328 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$casinh_closure" {
     GHC.Float.$fFloatingFloat_$casinh_closure:
         const GHC.Float.$fFloatingFloat_$casinh_info;
 },
 GHC.Float.$fFloatingFloat_$casinh_entry() //  [R2]
         { []
         }
     {offset
       c3cEB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cEW; else goto c3cEX;
       c3cEW: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$casinh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cEX: // global
           I64[Sp - 8] = block_c3cEy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cF1; else goto c3cEz;
       u3cF1: // global
           call _c3cEy(R1) args: 0, res: 0, upd: 0;
       c3cEz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$casinh_info" {
     GHC.Float.$fFloatingFloat_$casinh_info:
         const GHC.Float.$fFloatingFloat_$casinh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3cEy() //  [R1]
         { []
         }
     {offset
       c3cEy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cF0; else goto c3cEZ;
       c3cF0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3cEZ: // global
           _s3aJ4::F32 = F32[R1 + 7];
           (_c3cEK::F32) = call MO_F32_Sqrt(%MO_F_Add_W32(%MO_F_Mul_W32(_s3aJ4::F32,
                                                                        _s3aJ4::F32),
                                                          1.0 :: W32));
           (_c3cER::F32) = call MO_F32_Log(%MO_F_Add_W32(_s3aJ4::F32,
                                                         _c3cEK::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3cER::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cEy_info" {
     block_c3cEy_info:
         const _c3cEy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.011312188 UTC

[section ""data" . sat_s3aJa_closure" {
     sat_s3aJa_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.012891829 UTC

[section ""data" . sat_s3aJb_closure" {
     sat_s3aJb_closure:
         const :_con_info;
         const sat_s3aJa_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.015321442 UTC

[section ""data" . GHC.Float.$fRealFloatDouble5_closure" {
     GHC.Float.$fRealFloatDouble5_closure:
         const GHC.Float.$fRealFloatDouble5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.$fRealFloatDouble5_entry() //  [R1]
         { []
         }
     {offset
       c3cFr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cFs; else goto c3cFt;
       c3cFs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cFt: // global
           (_c3cFo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3cFo::I64 == 0) goto c3cFq; else goto c3cFp;
       c3cFq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3cFp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3cFo::I64;
           R3 = sat_s3aJb_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble5_info" {
     GHC.Float.$fRealFloatDouble5_info:
         const GHC.Float.$fRealFloatDouble5_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.019013129 UTC

[section ""data" . GHC.Float.minExpt_closure" {
     GHC.Float.minExpt_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.020696849 UTC

[section ""data" . GHC.Float.$fRealFracFloat2_closure" {
     GHC.Float.$fRealFracFloat2_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.022836407 UTC

[section ""data" . GHC.Float.$fRealFracFloat1_closure" {
     GHC.Float.$fRealFracFloat1_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.033517393 UTC

[section ""data" . GHC.Float.$w$cproperFraction1_closure" {
     GHC.Float.$w$cproperFraction1_closure:
         const GHC.Float.$w$cproperFraction1_info;
         const 0;
 },
 GHC.Float.$w$cproperFraction1_slow() //  [R1]
         { []
         }
     {offset
       c3cFH: // global
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $dReal_s3aJh_entry() //  [R1]
         { []
         }
     {offset
       c3cFT: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s3aJh_info" {
     $dReal_s3aJh_info:
         const $dReal_s3aJh_entry;
         const 1;
         const 16;
 },
 $dNum_s3aJi_entry() //  [R1]
         { []
         }
     {offset
       c3cG0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cG1; else goto c3cG2;
       c3cG1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cG2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s3aJi_info" {
     $dNum_s3aJi_info:
         const $dNum_s3aJi_entry;
         const 1;
         const 16;
 },
 i_s3aJk_entry() //  [R1]
         { []
         }
     {offset
       c3cGf: // global
           _s3aJk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3cGg; else goto c3cGh;
       c3cGh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cGj; else goto c3cGi;
       c3cGj: // global
           HpAlloc = 16;
           goto c3cGg;
       c3cGg: // global
           R1 = _s3aJk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cGi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aJk::P64;
           _s3aJf::I64 = I64[_s3aJk::P64 + 16];
           _s3aJg::I64 = I64[_s3aJk::P64 + 24];
           if (%MO_S_Lt_W64(_s3aJf::I64, 0)) goto c3cGd; else goto c3cGe;
       c3cGd: // global
           _s3aJm::I64 = -_s3aJg::I64;
           if (%MO_S_Lt_W64(_s3aJm::I64, 64)) goto c3cGC; else goto c3cGM;
       c3cGC: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -%MO_S_Shr_W64(-_s3aJf::I64, _s3aJm::I64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3cGM: // global
           if (%MO_S_Ge_W64(-_s3aJf::I64, 0)) goto c3cH4; else goto c3cGL;
       c3cGL: // global
           Hp = Hp - 16;
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3cGe: // global
           _s3aJt::I64 = -_s3aJg::I64;
           if (%MO_S_Lt_W64(_s3aJt::I64, 64)) goto c3cGZ; else goto c3cH6;
       c3cGZ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Shr_W64(_s3aJf::I64, _s3aJt::I64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3cH6: // global
           if (%MO_S_Ge_W64(_s3aJf::I64, 0)) goto c3cH4; else goto c3cH5;
       c3cH4: // global
           Hp = Hp - 16;
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3cH5: // global
           Hp = Hp - 16;
           R1 = GHC.Float.$fRealFracFloat1_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . i_s3aJk_info" {
     i_s3aJk_info:
         const i_s3aJk_entry;
         const 8589934592;
         const 20;
 },
 sat_s3aJL_entry() //  [R1]
         { []
         }
     {offset
       c3cHe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3cHf; else goto c3cHg;
       c3cHf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cHg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3cHb_info;
           _s3aJf::I64 = I64[R1 + 24];
           _s3aJg::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s3aJf::I64;
           I64[Sp - 24] = _s3aJg::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3cI0; else goto c3cHc;
       u3cI0: // global
           call _c3cHb(R1) args: 0, res: 0, upd: 0;
       c3cHc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aJL_info" {
     sat_s3aJL_info:
         const sat_s3aJL_entry;
         const 8589934593;
         const 15;
 },
 _c3cHb() //  [R1]
         { []
         }
     {offset
       c3cHb: // global
           _s3aJf::I64 = I64[Sp + 8];
           _s3aJD::I64 = -I64[Sp + 16];
           if (%MO_S_Lt_W64(_s3aJD::I64, 64)) goto c3cHG; else goto c3cHV;
       c3cHG: // global
           I64[Sp + 8] = block_c3cHw_info;
           R2 = _s3aJf::I64 - (I64[R1 + 7] << _s3aJD::I64);
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
       c3cHV: // global
           I64[Sp + 8] = block_c3cHM_info;
           R2 = _s3aJf::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3cHb_info" {
     block_c3cHb_info:
         const _c3cHb;
         const 194;
         const 30;
 },
 _c3cHw() //  [R1]
         { []
         }
     {offset
       c3cHw: // global
           _s3aJg::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3cHA_info;
           R3 = _s3aJg::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3cHw_info" {
     block_c3cHw_info:
         const _c3cHw;
         const 65;
         const 30;
 },
 _c3cHA() //  [F1]
         { []
         }
     {offset
       c3cHA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cHK; else goto c3cHJ;
       c3cHK: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 24;
       c3cHJ: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3cHA_info" {
     block_c3cHA_info:
         const _c3cHA;
         const 0;
         const 30;
 },
 _c3cHM() //  [R1]
         { []
         }
     {offset
       c3cHM: // global
           _s3aJg::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3cHQ_info;
           R3 = _s3aJg::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3cHM_info" {
     block_c3cHM_info:
         const _c3cHM;
         const 65;
         const 30;
 },
 _c3cHQ() //  [F1]
         { []
         }
     {offset
       c3cHQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cHZ; else goto c3cHY;
       c3cHZ: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 24;
       c3cHY: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3cHQ_info" {
     block_c3cHQ_info:
         const _c3cHQ;
         const 0;
         const 30;
 },
 sat_s3aJz_entry() //  [R1]
         { []
         }
     {offset
       c3cIc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3cId; else goto c3cIe;
       c3cId: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cIe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3cI9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3cIi; else goto c3cIa;
       u3cIi: // global
           call _c3cI9(R1) args: 0, res: 0, upd: 0;
       c3cIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aJz_info" {
     sat_s3aJz_info:
         const sat_s3aJz_entry;
         const 1;
         const 16;
 },
 _c3cI9() //  [R1]
         { []
         }
     {offset
       c3cI9: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3cI9_info" {
     block_c3cI9_info:
         const _c3cI9;
         const 0;
         const 30;
 },
 sat_s3aJA_entry() //  [R1]
         { []
         }
     {offset
       c3cIj: // global
           _s3aJA::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3cIk; else goto c3cIl;
       c3cIl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cIn; else goto c3cIm;
       c3cIn: // global
           HpAlloc = 24;
           goto c3cIk;
       c3cIk: // global
           R1 = _s3aJA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cIm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aJA::P64;
           _s3aJi::P64 = P64[_s3aJA::P64 + 16];
           _s3aJk::P64 = P64[_s3aJA::P64 + 24];
           I64[Hp - 16] = sat_s3aJz_info;
           P64[Hp] = _s3aJk::P64;
           R2 = _s3aJi::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aJA_info" {
     sat_s3aJA_info:
         const sat_s3aJA_entry;
         const 2;
         const 18;
 },
 sat_s3aJO_entry() //  [R1]
         { []
         }
     {offset
       c3cIC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3cID; else goto c3cIE;
       c3cID: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cIE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aJO_info" {
     sat_s3aJO_info:
         const sat_s3aJO_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+264;
 },
 sat_s3aJQ_entry() //  [R1]
         { []
         }
     {offset
       c3cIF: // global
           _s3aJQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3cIG; else goto c3cIH;
       c3cIH: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3cIJ; else goto c3cII;
       c3cIJ: // global
           HpAlloc = 40;
           goto c3cIG;
       c3cIG: // global
           R1 = _s3aJQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cII: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aJQ::P64;
           _s3aJi::P64 = P64[_s3aJQ::P64 + 16];
           _s3aJg::I64 = I64[_s3aJQ::P64 + 24];
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s3aJg::I64;
           I64[Hp - 16] = sat_s3aJO_info;
           P64[Hp] = _s3aJi::P64;
           R5 = Hp - 31;
           R4 = Hp - 16;
           R3 = GHC.Real.$fIntegralInt_closure;
           R2 = _s3aJi::P64;
           Sp = Sp - 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aJQ_info" {
     sat_s3aJQ_info:
         const sat_s3aJQ_entry;
         const 4294967297;
         const 30064771091;
         const S3bQP_srt+264;
 },
 sat_s3aJM_entry() //  [R1]
         { []
         }
     {offset
       c3cIS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cIT; else goto c3cIU;
       c3cIT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cIU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aJM_info" {
     sat_s3aJM_info:
         const sat_s3aJM_entry;
         const 4294967296;
         const 17;
 },
 sat_s3aJN_entry() //  [R1]
         { []
         }
     {offset
       c3cIV: // global
           _s3aJN::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3cIW; else goto c3cIX;
       c3cIX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cIZ; else goto c3cIY;
       c3cIZ: // global
           HpAlloc = 24;
           goto c3cIW;
       c3cIW: // global
           R1 = _s3aJN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cIY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aJN::P64;
           _s3aJi::P64 = P64[_s3aJN::P64 + 16];
           _s3aJf::I64 = I64[_s3aJN::P64 + 24];
           I64[Hp - 16] = sat_s3aJM_info;
           I64[Hp] = _s3aJf::I64;
           R2 = _s3aJi::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aJN_info" {
     sat_s3aJN_info:
         const sat_s3aJN_entry;
         const 4294967297;
         const 19;
 },
 sat_s3aJR_entry() //  [R1]
         { []
         }
     {offset
       c3cJ0: // global
           _s3aJR::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3cJ1; else goto c3cJ2;
       c3cJ2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3cJ4; else goto c3cJ3;
       c3cJ4: // global
           HpAlloc = 64;
           goto c3cJ1;
       c3cJ1: // global
           R1 = _s3aJR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cJ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aJR::P64;
           _s3aJi::P64 = P64[_s3aJR::P64 + 16];
           _s3aJf::I64 = I64[_s3aJR::P64 + 24];
           _s3aJg::I64 = I64[_s3aJR::P64 + 32];
           I64[Hp - 56] = sat_s3aJQ_info;
           P64[Hp - 40] = _s3aJi::P64;
           I64[Hp - 32] = _s3aJg::I64;
           I64[Hp - 24] = sat_s3aJN_info;
           P64[Hp - 8] = _s3aJi::P64;
           I64[Hp] = _s3aJf::I64;
           R2 = _s3aJi::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aJR_info" {
     sat_s3aJR_info:
         const sat_s3aJR_entry;
         const 8589934593;
         const 30064771087;
         const S3bQP_srt+264;
 },
 GHC.Float.$w$cproperFraction1_entry() //  [R2, F1]
         { []
         }
     {offset
       c3cJ8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3cJ9; else goto c3cJa;
       c3cJ9: // global
           R1 = GHC.Float.$w$cproperFraction1_closure;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3cJa: // global
           I64[Sp - 16] = block_c3cFL_info;
           F1 = F1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cproperFraction1_info" {
     GHC.Float.$w$cproperFraction1_info:
         const GHC.Float.$w$cproperFraction1_entry;
         const 0;
         const 64424509454;
         const 8589934592;
         const S3bQP_srt+264;
         const 130;
         const GHC.Float.$w$cproperFraction1_slow;
 },
 _c3cFL() //  [R1, R2]
         { []
         }
     {offset
       c3cFL: // global
           I64[Sp - 8] = R2;
           I64[Sp] = R1;
           Sp = Sp - 16;
           call _c3cFM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cFL_info" {
     block_c3cFL_info:
         const _c3cFL;
         const 1;
         const 30064771102;
         const S3bQP_srt+264;
 },
 _c3cFM() //  []
         { []
         }
     {offset
       c3cFM: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3cJd; else goto c3cJc;
       c3cJd: // global
           HpAlloc = 152;
           I64[Sp] = block_c3cFM_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3cJc: // global
           I64[Hp - 144] = $dReal_s3aJh_info;
           P64[Hp - 128] = P64[Sp + 24];
           I64[Hp - 120] = $dNum_s3aJi_info;
           P64[Hp - 104] = Hp - 144;
           _s3aJf::I64 = I64[Sp + 16];
           _s3aJg::I64 = I64[Sp + 8];
           _c3cFW::P64 = Hp - 120;
           if (%MO_S_Lt_W64(_s3aJg::I64, 0)) goto c3cJ6; else goto c3cJ7;
       c3cJ6: // global
           I64[Hp - 96] = i_s3aJk_info;
           I64[Hp - 80] = _s3aJf::I64;
           I64[Hp - 72] = _s3aJg::I64;
           I64[Hp - 64] = sat_s3aJL_info;
           _c3cG6::P64 = Hp - 96;
           P64[Hp - 48] = _c3cG6::P64;
           I64[Hp - 40] = _s3aJf::I64;
           I64[Hp - 32] = _s3aJg::I64;
           I64[Hp - 24] = sat_s3aJA_info;
           P64[Hp - 8] = _c3cFW::P64;
           P64[Hp] = _c3cG6::P64;
           R2 = Hp - 64;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3cJ7: // global
           I64[Hp - 96] = sat_s3aJR_info;
           P64[Hp - 80] = _c3cFW::P64;
           I64[Hp - 72] = _s3aJf::I64;
           I64[Hp - 64] = _s3aJg::I64;
           _c3cIp::P64 = Hp - 96;
           Hp = Hp - 64;
           R2 = GHC.Float.rationalToFloat4_closure+1;
           R1 = _c3cIp::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cFM_info" {
     block_c3cFM_info:
         const _c3cFM;
         const 195;
         const 30064771102;
         const S3bQP_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.079400469 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$cproperFraction_closure" {
     GHC.Float.$fRealFracFloat_$cproperFraction_closure:
         const GHC.Float.$fRealFracFloat_$cproperFraction_info;
         const 0;
 },
 GHC.Float.$fRealFracFloat_$cproperFraction_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cLz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cLF; else goto c3cLG;
       c3cLF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$cproperFraction_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cLG: // global
           I64[Sp - 16] = block_c3cLw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3cLL; else goto c3cLx;
       u3cLL: // global
           call _c3cLw(R1) args: 0, res: 0, upd: 0;
       c3cLx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$cproperFraction_info" {
     GHC.Float.$fRealFracFloat_$cproperFraction_info:
         const GHC.Float.$fRealFracFloat_$cproperFraction_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+288;
 },
 _c3cLw() //  [R1]
         { []
         }
     {offset
       c3cLw: // global
           _s3aJS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3cLC_info;
           F1 = F32[R1 + 7];
           R2 = _s3aJS::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cLw_info" {
     block_c3cLw_info:
         const _c3cLw;
         const 1;
         const 4294967326;
         const S3bQP_srt+288;
 },
 _c3cLC() //  [R1, R2]
         { []
         }
     {offset
       c3cLC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cLK; else goto c3cLJ;
       c3cLK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3cLJ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cLC_info" {
     block_c3cLC_info:
         const _c3cLC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.09163657 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$ctruncate_closure" {
     GHC.Float.$fRealFracFloat_$ctruncate_closure:
         const GHC.Float.$fRealFracFloat_$ctruncate_info;
         const 0;
 },
 GHC.Float.$fRealFracFloat_$ctruncate_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cM9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cMd; else goto c3cMe;
       c3cMd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$ctruncate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cMe: // global
           I64[Sp - 16] = block_c3cM6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3cMi; else goto c3cM7;
       u3cMi: // global
           call _c3cM6(R1) args: 0, res: 0, upd: 0;
       c3cM7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$ctruncate_info" {
     GHC.Float.$fRealFracFloat_$ctruncate_info:
         const GHC.Float.$fRealFracFloat_$ctruncate_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3bQP_srt+288;
 },
 _c3cM6() //  [R1]
         { []
         }
     {offset
       c3cM6: // global
           _s3aJZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3cMc_info;
           F1 = F32[R1 + 7];
           R2 = _s3aJZ::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cM6_info" {
     block_c3cM6_info:
         const _c3cM6;
         const 1;
         const 4294967326;
         const S3bQP_srt+288;
 },
 _c3cMc() //  [R1]
         { []
         }
     {offset
       c3cMc: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cMc_info" {
     block_c3cMc_info:
         const _c3cMc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.100916368 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$cceiling_closure" {
     GHC.Float.$fRealFracFloat_$cceiling_closure:
         const GHC.Float.$fRealFracFloat_$cceiling_info;
         const 0;
 },
 sat_s3aKi_entry() //  [R1]
         { []
         }
     {offset
       c3cN3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3cN4; else goto c3cN5;
       c3cN4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cN5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aKi_info" {
     sat_s3aKi_info:
         const sat_s3aKi_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 GHC.Float.$fRealFracFloat_$cceiling_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cN6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3cN7; else goto c3cN8;
       c3cN7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$cceiling_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cN8: // global
           I64[Sp - 16] = block_c3cMB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3cNk; else goto c3cMC;
       u3cNk: // global
           call _c3cMB(R1) args: 0, res: 0, upd: 0;
       c3cMC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$cceiling_info" {
     GHC.Float.$fRealFracFloat_$cceiling_info:
         const GHC.Float.$fRealFracFloat_$cceiling_entry;
         const 0;
         const 107374182414;
         const 8589934607;
         const S3bQP_srt+288;
 },
 _c3cMB() //  [R1]
         { []
         }
     {offset
       c3cMB: // global
           I64[Sp] = block_c3cMG_info;
           F1 = F32[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cMB_info" {
     block_c3cMB_info:
         const _c3cMB;
         const 1;
         const 38654705694;
         const S3bQP_srt+288;
 },
 _c3cMG() //  [R1, R2]
         { []
         }
     {offset
       c3cMG: // global
           I64[Sp - 8] = block_c3cMI_info;
           _s3aKb::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3aKb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cNj; else goto c3cMJ;
       u3cNj: // global
           call _c3cMI(R1) args: 0, res: 0, upd: 0;
       c3cMJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cMG_info" {
     block_c3cMG_info:
         const _c3cMG;
         const 1;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cMI() //  [R1]
         { []
         }
     {offset
       c3cMI: // global
           if (%MO_F_Gt_W32(F32[R1 + 7],
                            0.0 :: W32)) goto c3cNe; else goto c3cNd;
       c3cNe: // global
           I64[Sp] = block_c3cMR_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c3cNd: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cMI_info" {
     block_c3cMI_info:
         const _c3cMI;
         const 2;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cMR() //  [R1]
         { []
         }
     {offset
       c3cMR: // global
           I64[Sp] = block_c3cMV_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cMR_info" {
     block_c3cMR_info:
         const _c3cMR;
         const 130;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cMV() //  [R1]
         { []
         }
     {offset
       c3cMV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cNi; else goto c3cNh;
       c3cNi: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3cNh: // global
           I64[Hp - 16] = sat_s3aKi_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cMV_info" {
     block_c3cMV_info:
         const _c3cMV;
         const 130;
         const 4294967326;
         const S3bQP_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.120285826 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$cfloor_closure" {
     GHC.Float.$fRealFracFloat_$cfloor_closure:
         const GHC.Float.$fRealFracFloat_$cfloor_info;
         const 0;
 },
 sat_s3aKv_entry() //  [R1]
         { []
         }
     {offset
       c3cOv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3cOw; else goto c3cOx;
       c3cOw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cOx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aKv_info" {
     sat_s3aKv_info:
         const sat_s3aKv_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 GHC.Float.$fRealFracFloat_$cfloor_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cOy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3cOz; else goto c3cOA;
       c3cOz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$cfloor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cOA: // global
           I64[Sp - 16] = block_c3cO3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3cOM; else goto c3cO4;
       u3cOM: // global
           call _c3cO3(R1) args: 0, res: 0, upd: 0;
       c3cO4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$cfloor_info" {
     GHC.Float.$fRealFracFloat_$cfloor_info:
         const GHC.Float.$fRealFracFloat_$cfloor_entry;
         const 0;
         const 176093659150;
         const 8589934607;
         const S3bQP_srt+288;
 },
 _c3cO3() //  [R1]
         { []
         }
     {offset
       c3cO3: // global
           I64[Sp] = block_c3cO8_info;
           F1 = F32[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cO3_info" {
     block_c3cO3_info:
         const _c3cO3;
         const 1;
         const 38654705694;
         const S3bQP_srt+288;
 },
 _c3cO8() //  [R1, R2]
         { []
         }
     {offset
       c3cO8: // global
           I64[Sp - 8] = block_c3cOa_info;
           _s3aKo::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3aKo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cOL; else goto c3cOb;
       u3cOL: // global
           call _c3cOa(R1) args: 0, res: 0, upd: 0;
       c3cOb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cO8_info" {
     block_c3cO8_info:
         const _c3cO8;
         const 1;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cOa() //  [R1]
         { []
         }
     {offset
       c3cOa: // global
           if (%MO_F_Lt_W32(F32[R1 + 7],
                            0.0 :: W32)) goto c3cOG; else goto c3cOF;
       c3cOG: // global
           I64[Sp] = block_c3cOj_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c3cOF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cOa_info" {
     block_c3cOa_info:
         const _c3cOa;
         const 2;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cOj() //  [R1]
         { []
         }
     {offset
       c3cOj: // global
           I64[Sp] = block_c3cOn_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cOj_info" {
     block_c3cOj_info:
         const _c3cOj;
         const 130;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cOn() //  [R1]
         { []
         }
     {offset
       c3cOn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cOK; else goto c3cOJ;
       c3cOK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3cOJ: // global
           I64[Hp - 16] = sat_s3aKv_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cOn_info" {
     block_c3cOn_info:
         const _c3cOn;
         const 130;
         const 4294967326;
         const S3bQP_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.140380353 UTC

[section ""data" . GHC.Float.$w$cround1_closure" {
     GHC.Float.$w$cround1_closure:
         const GHC.Float.$w$cround1_info;
         const 0;
 },
 GHC.Float.$w$cround1_slow() //  [R1]
         { []
         }
     {offset
       c3cPs: // global
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cround1_entry(F1,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3aKK_entry() //  [R1]
         { []
         }
     {offset
       c3cQ6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3cQ7; else goto c3cQ8;
       c3cQ7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cQ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aKK_info" {
     sat_s3aKK_info:
         const sat_s3aKK_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 sat_s3aKL_entry() //  [R1]
         { []
         }
     {offset
       c3cQe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3cQf; else goto c3cQg;
       c3cQf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cQg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aKL_info" {
     sat_s3aKL_info:
         const sat_s3aKL_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 GHC.Float.$w$cround1_entry() //  [R2, F1]
         { []
         }
     {offset
       c3cQh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3cQi; else goto c3cQj;
       c3cQi: // global
           R1 = GHC.Float.$w$cround1_closure;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3cQj: // global
           I64[Sp - 16] = block_c3cPw_info;
           F1 = F1;
           _s3aKw::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s3aKw::P64;
           Sp = Sp - 16;
           call GHC.Float.$w$cproperFraction1_entry(F1,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cround1_info" {
     GHC.Float.$w$cround1_info:
         const GHC.Float.$w$cround1_entry;
         const 0;
         const 863288426510;
         const 8589934592;
         const S3bQP_srt+288;
         const 130;
         const GHC.Float.$w$cround1_slow;
 },
 _c3cPw() //  [R1, R2]
         { []
         }
     {offset
       c3cPw: // global
           I64[Sp - 8] = block_c3cPy_info;
           _s3aKz::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3aKz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cQU; else goto c3cPz;
       u3cQU: // global
           call _c3cPy(R1) args: 0, res: 0, upd: 0;
       c3cPz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cPw_info" {
     block_c3cPw_info:
         const _c3cPw;
         const 1;
         const 38654705694;
         const S3bQP_srt+312;
 },
 _c3cPy() //  [R1]
         { []
         }
     {offset
       c3cPy: // global
           _s3aKw::P64 = P64[Sp + 16];
           _s3aKz::P64 = P64[Sp + 8];
           _s3aKC::F32 = F32[R1 + 7];
           (_c3cPD::F32) = call MO_F32_Fabs(_s3aKC::F32);
           _s3aKD::F32 = %MO_F_Sub_W32(_c3cPD::F32, 0.5 :: W32);
           if (%MO_F_Lt_W32(_s3aKD::F32,
                            0.0 :: W32)) goto u3cQQ; else goto c3cQN;
       u3cQQ: // global
           Sp = Sp + 8;
           call _c3cQO() args: 0, res: 0, upd: 0;
       c3cQN: // global
           if (%MO_F_Eq_W32(_s3aKD::F32,
                            0.0 :: W32)) goto c3cQB; else goto u3cQR;
       c3cQB: // global
           I64[Sp - 8] = block_c3cQA_info;
           R3 = _s3aKz::P64;
           R2 = _s3aKw::P64;
           F32[Sp] = _s3aKC::F32;
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3cQR: // global
           F32[Sp] = _s3aKC::F32;
           call _s3aKG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cPy_info" {
     block_c3cPy_info:
         const _c3cPy;
         const 2;
         const 38654705694;
         const S3bQP_srt+312;
 },
 _c3cQA() //  [R1]
         { []
         }
     {offset
       c3cQA: // global
           if (R1 & 7 == 1) goto u3cQS; else goto u3cQT;
       u3cQS: // global
           Sp = Sp + 8;
           call _s3aKG() args: 0, res: 0, upd: 0;
       u3cQT: // global
           Sp = Sp + 16;
           call _c3cQO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cQA_info" {
     block_c3cQA_info:
         const _c3cQA;
         const 67;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cQO() //  []
         { []
         }
     {offset
       c3cQO: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _s3aKG() //  []
         { []
         }
     {offset
       s3aKG: // global
           I64[Sp - 8] = block_c3cPR_info;
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3cPR() //  [R1]
         { []
         }
     {offset
       c3cPR: // global
           I64[Sp] = block_c3cPV_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cPR_info" {
     block_c3cPR_info:
         const _c3cPR;
         const 323;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cPV() //  [R1]
         { []
         }
     {offset
       c3cPV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cQq; else goto c3cQp;
       c3cQq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3cQp: // global
           if (%MO_F_Lt_W32(F32[Sp + 8],
                            0.0 :: W32)) goto c3cQt; else goto c3cQs;
       c3cQt: // global
           I64[Hp - 16] = sat_s3aKL_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
       c3cQs: // global
           I64[Hp - 16] = sat_s3aKK_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cPV_info" {
     block_c3cPV_info:
         const _c3cPV;
         const 323;
         const 4294967326;
         const S3bQP_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.167204606 UTC

[section ""data" . GHC.Float.$fRealFracFloat_$cround_closure" {
     GHC.Float.$fRealFracFloat_$cround_closure:
         const GHC.Float.$fRealFracFloat_$cround_info;
         const 0;
 },
 GHC.Float.$fRealFracFloat_$cround_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cS9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cSa; else goto c3cSb;
       c3cSa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracFloat_$cround_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cSb: // global
           I64[Sp - 16] = block_c3cS6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3cSf; else goto c3cS7;
       u3cSf: // global
           call _c3cS6(R1) args: 0, res: 0, upd: 0;
       c3cS7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracFloat_$cround_info" {
     GHC.Float.$fRealFracFloat_$cround_info:
         const GHC.Float.$fRealFracFloat_$cround_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+344;
 },
 _c3cS6() //  [R1]
         { []
         }
     {offset
       c3cS6: // global
           F1 = F32[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$w$cround1_entry(F1, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cS6_info" {
     block_c3cS6_info:
         const _c3cS6;
         const 1;
         const 4294967326;
         const S3bQP_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.173721808 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$catanh_closure" {
     GHC.Float.$fFloatingDouble_$catanh_closure:
         const GHC.Float.$fFloatingDouble_$catanh_info;
 },
 GHC.Float.$fFloatingDouble_$catanh_entry() //  [R2]
         { []
         }
     {offset
       c3cSx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cSR; else goto c3cSS;
       c3cSR: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$catanh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cSS: // global
           I64[Sp - 8] = block_c3cSu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cSW; else goto c3cSv;
       u3cSW: // global
           call _c3cSu(R1) args: 0, res: 0, upd: 0;
       c3cSv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$catanh_info" {
     GHC.Float.$fFloatingDouble_$catanh_info:
         const GHC.Float.$fFloatingDouble_$catanh_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3cSu() //  [R1]
         { []
         }
     {offset
       c3cSu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cSV; else goto c3cSU;
       c3cSV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3cSU: // global
           _s3aKU::F64 = F64[R1 + 7];
           (_c3cSJ::F64) = call MO_F64_Log(%MO_F_Quot_W64(%MO_F_Add_W64(_s3aKU::F64,
                                                                        1.0 :: W64),
                                                          %MO_F_Sub_W64(1.0 :: W64, _s3aKU::F64)));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Mul_W64(_c3cSJ::F64, 0.5 :: W64);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cSu_info" {
     block_c3cSu_info:
         const _c3cSu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.182698219 UTC

[section ""data" . GHC.Float.$w$ctoRational1_closure" {
     GHC.Float.$w$ctoRational1_closure:
         const GHC.Float.$w$ctoRational1_info;
         const 0;
 },
 GHC.Float.$w$ctoRational1_entry() //  [F1]
         { []
         }
     {offset
       c3cTv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cTw; else goto c3cTx;
       c3cTw: // global
           F1 = F1;
           R1 = GHC.Float.$w$ctoRational1_closure;
           call (stg_gc_fun)(F1, R1) args: 8, res: 0, upd: 8;
       c3cTx: // global
           I64[Sp - 8] = block_c3cTm_info;
           F1 = F1;
           Sp = Sp - 8;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$ctoRational1_info" {
     GHC.Float.$w$ctoRational1_info:
         const GHC.Float.$w$ctoRational1_entry;
         const 0;
         const 828928688142;
         const 4294967302;
         const S3bQP_srt+312;
 },
 _c3cTm() //  [R1, R2]
         { []
         }
     {offset
       c3cTm: // global
           if (%MO_S_Lt_W64(R2, 0)) goto c3cTt; else goto c3cTu;
       c3cTt: // global
           if (R1 & 1 == 0) goto c3cUg; else goto c3cTS;
       c3cUg: // global
           I64[Sp] = block_c3cU6_info;
           R3 = -R2;
           R2 = R1;
           call GHC.Float.ConversionUtils.elimZerosInt#_entry(R3,
                                                              R2) args: 8, res: 8, upd: 8;
       c3cTS: // global
           I64[Sp - 8] = block_c3cTJ_info;
           _s3aL3::I64 = R2;
           R2 = R1;
           I64[Sp] = _s3aL3::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3cTu: // global
           I64[Sp - 8] = block_c3cUp_info;
           _s3aL3::I64 = R2;
           R2 = R1;
           I64[Sp] = _s3aL3::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cTm_info" {
     block_c3cTm_info:
         const _c3cTm;
         const 0;
         const 279172874270;
         const S3bQP_srt+312;
 },
 _c3cU6() //  [R1, R2]
         { []
         }
     {offset
       c3cU6: // global
           I64[Sp - 8] = block_c3cUa_info;
           R1 = R1;
           I64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cUz; else goto c3cUb;
       u3cUz: // global
           call _c3cUa(R1) args: 0, res: 0, upd: 0;
       c3cUb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cU6_info" {
     block_c3cU6_info:
         const _c3cU6;
         const 0;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cUa() //  [R1]
         { []
         }
     {offset
       c3cUa: // global
           I64[Sp] = block_c3cUf_info;
           R3 = I64[Sp + 8];
           R2 = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cUa_info" {
     block_c3cUa_info:
         const _c3cUa;
         const 65;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cUf() //  [R1]
         { []
         }
     {offset
       c3cUf: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cUf_info" {
     block_c3cUf_info:
         const _c3cUf;
         const 1;
         const 30;
 },
 _c3cTJ() //  [R1]
         { []
         }
     {offset
       c3cTJ: // global
           I64[Sp] = block_c3cTQ_info;
           R3 = -I64[Sp + 8];
           R2 = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cTJ_info" {
     block_c3cTJ_info:
         const _c3cTJ;
         const 65;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cTQ() //  [R1]
         { []
         }
     {offset
       c3cTQ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cTQ_info" {
     block_c3cTQ_info:
         const _c3cTQ;
         const 1;
         const 30;
 },
 _c3cUp() //  [R1]
         { []
         }
     {offset
       c3cUp: // global
           _s3aL3::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3cUt_info;
           R3 = _s3aL3::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cUp_info" {
     block_c3cUp_info:
         const _c3cUp;
         const 65;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cUt() //  [R1]
         { []
         }
     {offset
       c3cUt: // global
           R2 = GHC.Float.$fRealDouble1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cUt_info" {
     block_c3cUt_info:
         const _c3cUt;
         const 0;
         const 4294967326;
         const S3bQP_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.201659498 UTC

[section ""data" . GHC.Float.$fRealFloat_$ctoRational_closure" {
     GHC.Float.$fRealFloat_$ctoRational_closure:
         const GHC.Float.$fRealFloat_$ctoRational_info;
         const 0;
 },
 GHC.Float.$fRealFloat_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c3cVm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cVs; else goto c3cVt;
       c3cVs: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloat_$ctoRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cVt: // global
           I64[Sp - 8] = block_c3cVj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cVy; else goto c3cVk;
       u3cVy: // global
           call _c3cVj(R1) args: 0, res: 0, upd: 0;
       c3cVk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloat_$ctoRational_info" {
     GHC.Float.$fRealFloat_$ctoRational_info:
         const GHC.Float.$fRealFloat_$ctoRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3bQP_srt+368;
 },
 _c3cVj() //  [R1]
         { []
         }
     {offset
       c3cVj: // global
           I64[Sp] = block_c3cVp_info;
           F1 = F32[R1 + 7];
           call GHC.Float.$w$ctoRational1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cVj_info" {
     block_c3cVj_info:
         const _c3cVj;
         const 0;
         const 4294967326;
         const S3bQP_srt+368;
 },
 _c3cVp() //  [R1, R2]
         { []
         }
     {offset
       c3cVp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cVx; else goto c3cVw;
       c3cVx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3cVw: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cVp_info" {
     block_c3cVp_info:
         const _c3cVp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.211198998 UTC

[section ""data" . GHC.Float.$w$ctoRational_closure" {
     GHC.Float.$w$ctoRational_closure:
         const GHC.Float.$w$ctoRational_info;
         const 0;
 },
 GHC.Float.$w$ctoRational_entry() //  [D1]
         { []
         }
     {offset
       c3cW2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3cW3; else goto c3cW4;
       c3cW3: // global
           D1 = D1;
           R1 = GHC.Float.$w$ctoRational_closure;
           call (stg_gc_fun)(D1, R1) args: 8, res: 0, upd: 8;
       c3cW4: // global
           I64[Sp - 8] = block_c3cVT_info;
           D1 = D1;
           Sp = Sp - 8;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$ctoRational_info" {
     GHC.Float.$w$ctoRational_info:
         const GHC.Float.$w$ctoRational_entry;
         const 0;
         const 6876242640910;
         const 4294967303;
         const S3bQP_srt+312;
 },
 _c3cVT() //  [R1, R2]
         { []
         }
     {offset
       c3cVT: // global
           if (%MO_S_Lt_W64(R2, 0)) goto c3cW0; else goto c3cW1;
       c3cW0: // global
           I64[Sp - 16] = block_c3cW7_info;
           _s3aLr::I64 = R2;
           R2 = R1;
           I64[Sp - 8] = _s3aLr::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Integer.Type.integerToWord_entry(R2) args: 8, res: 8, upd: 8;
       c3cW1: // global
           I64[Sp] = block_c3cX4_info;
           R3 = R2;
           R2 = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cVT_info" {
     block_c3cVT_info:
         const _c3cVT;
         const 0;
         const 279172874270;
         const S3bQP_srt+312;
 },
 _c3cW7() //  [R1]
         { []
         }
     {offset
       c3cW7: // global
           _s3aLq::P64 = P64[Sp + 16];
           if (R1 & 1 == 0) goto c3cWU; else goto c3cWs;
       c3cWU: // global
           I64[Sp] = block_c3cWD_info;
           R2 = _s3aLq::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c3cWs: // global
           I64[Sp] = block_c3cWi_info;
           R1 = _s3aLq::P64;
           if (R1 & 7 != 0) goto u3cX9; else goto c3cWj;
       u3cX9: // global
           call _c3cWi(R1) args: 0, res: 0, upd: 0;
       c3cWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cW7_info" {
     block_c3cW7_info:
         const _c3cW7;
         const 66;
         const 279172874270;
         const S3bQP_srt+312;
 },
 _c3cWD() //  [R1]
         { []
         }
     {offset
       c3cWD: // global
           I64[Sp + 16] = block_c3cWK_info;
           R3 = -I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Float.ConversionUtils.elimZerosInt#_entry(R3,
                                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cWD_info" {
     block_c3cWD_info:
         const _c3cWD;
         const 194;
         const 279172874270;
         const S3bQP_srt+312;
 },
 _c3cWK() //  [R1, R2]
         { []
         }
     {offset
       c3cWK: // global
           I64[Sp - 8] = block_c3cWO_info;
           R1 = R1;
           I64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cXa; else goto c3cWP;
       u3cXa: // global
           call _c3cWO(R1) args: 0, res: 0, upd: 0;
       c3cWP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cWK_info" {
     block_c3cWK_info:
         const _c3cWK;
         const 0;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cWO() //  [R1]
         { []
         }
     {offset
       c3cWO: // global
           I64[Sp] = block_c3cWT_info;
           R3 = I64[Sp + 8];
           R2 = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cWO_info" {
     block_c3cWO_info:
         const _c3cWO;
         const 65;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cWT() //  [R1]
         { []
         }
     {offset
       c3cWT: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cWT_info" {
     block_c3cWT_info:
         const _c3cWT;
         const 1;
         const 30;
 },
 _c3cWi() //  [R1]
         { []
         }
     {offset
       c3cWi: // global
           _s3aLw::I64 = -I64[Sp + 8];
           I64[Sp + 8] = block_c3cWq_info;
           R3 = _s3aLw::I64;
           R2 = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cWi_info" {
     block_c3cWi_info:
         const _c3cWi;
         const 194;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3cWq() //  [R1]
         { []
         }
     {offset
       c3cWq: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cWq_info" {
     block_c3cWq_info:
         const _c3cWq;
         const 1;
         const 30;
 },
 _c3cX4() //  [R1]
         { []
         }
     {offset
       c3cX4: // global
           R2 = GHC.Float.$fRealDouble1_closure;
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cX4_info" {
     block_c3cX4_info:
         const _c3cX4;
         const 0;
         const 4294967326;
         const S3bQP_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.230832611 UTC

[section ""data" . GHC.Float.$fRealDouble_$ctoRational_closure" {
     GHC.Float.$fRealDouble_$ctoRational_closure:
         const GHC.Float.$fRealDouble_$ctoRational_info;
         const 0;
 },
 GHC.Float.$fRealDouble_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c3cY2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3cY8; else goto c3cY9;
       c3cY8: // global
           R2 = R2;
           R1 = GHC.Float.$fRealDouble_$ctoRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cY9: // global
           I64[Sp - 8] = block_c3cXZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cYe; else goto c3cY0;
       u3cYe: // global
           call _c3cXZ(R1) args: 0, res: 0, upd: 0;
       c3cY0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealDouble_$ctoRational_info" {
     GHC.Float.$fRealDouble_$ctoRational_info:
         const GHC.Float.$fRealDouble_$ctoRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3bQP_srt+392;
 },
 _c3cXZ() //  [R1]
         { []
         }
     {offset
       c3cXZ: // global
           I64[Sp] = block_c3cY5_info;
           D1 = F64[R1 + 7];
           call GHC.Float.$w$ctoRational_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cXZ_info" {
     block_c3cXZ_info:
         const _c3cXZ;
         const 0;
         const 4294967326;
         const S3bQP_srt+392;
 },
 _c3cY5() //  [R1, R2]
         { []
         }
     {offset
       c3cY5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3cYd; else goto c3cYc;
       c3cYd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3cYc: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cY5_info" {
     block_c3cY5_info:
         const _c3cY5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.237989211 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$cpi_closure" {
     GHC.Float.$fFloatingFloat_$cpi_closure:
         const GHC.Types.F#_con_info;
         const 3.141592653589793 :: W32;
         const 0 :: W32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.239954452 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$cpi_closure" {
     GHC.Float.$fFloatingDouble_$cpi_closure:
         const GHC.Types.D#_con_info;
         const 3.141592653589793 :: W64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.242198004 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisIEEE_closure" {
     GHC.Float.$fRealFloatFloat_$cisIEEE_closure:
         const GHC.Float.$fRealFloatFloat_$cisIEEE_info;
 },
 GHC.Float.$fRealFloatFloat_$cisIEEE_entry() //  []
         { []
         }
     {offset
       c3cYB: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisIEEE_info" {
     GHC.Float.$fRealFloatFloat_$cisIEEE_info:
         const GHC.Float.$fRealFloatFloat_$cisIEEE_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.246673218 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cencodeFloat_closure" {
     GHC.Float.$fRealFloatFloat_$cencodeFloat_closure:
         const GHC.Float.$fRealFloatFloat_$cencodeFloat_info;
 },
 GHC.Float.$fRealFloatFloat_$cencodeFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3cYR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cYZ; else goto c3cZ0;
       c3cYZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cencodeFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3cZ0: // global
           I64[Sp - 16] = block_c3cYO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3cZ5; else goto c3cYP;
       u3cZ5: // global
           call _c3cYO(R1) args: 0, res: 0, upd: 0;
       c3cYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cencodeFloat_info" {
     GHC.Float.$fRealFloatFloat_$cencodeFloat_info:
         const GHC.Float.$fRealFloatFloat_$cencodeFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3cYO() //  [R1]
         { []
         }
     {offset
       c3cYO: // global
           _s3aLN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3cYU_info;
           R3 = I64[R1 + 7];
           R2 = _s3aLN::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cYO_info" {
     block_c3cYO_info:
         const _c3cYO;
         const 1;
         const 30;
 },
 _c3cYU() //  [F1]
         { []
         }
     {offset
       c3cYU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3cZ4; else goto c3cZ3;
       c3cZ4: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3cZ3: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cYU_info" {
     block_c3cYU_info:
         const _c3cYU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.255114614 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cdecodeFloat_closure" {
     GHC.Float.$fRealFloatFloat_$cdecodeFloat_closure:
         const GHC.Float.$fRealFloatFloat_$cdecodeFloat_info;
 },
 sat_s3aLY_entry() //  [R1]
         { []
         }
     {offset
       c3cZE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3cZF; else goto c3cZG;
       c3cZF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3cZG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aLY_info" {
     sat_s3aLY_info:
         const sat_s3aLY_entry;
         const 4294967296;
         const 17;
 },
 GHC.Float.$fRealFloatFloat_$cdecodeFloat_entry() //  [R2]
         { []
         }
     {offset
       c3cZH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3cZJ; else goto c3cZK;
       c3cZJ: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cdecodeFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3cZK: // global
           I64[Sp - 8] = block_c3cZq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3cZR; else goto c3cZr;
       u3cZR: // global
           call _c3cZq(R1) args: 0, res: 0, upd: 0;
       c3cZr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cdecodeFloat_info" {
     GHC.Float.$fRealFloatFloat_$cdecodeFloat_info:
         const GHC.Float.$fRealFloatFloat_$cdecodeFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3cZq() //  [R1]
         { []
         }
     {offset
       c3cZq: // global
           I64[Sp] = block_c3cZv_info;
           F1 = F32[R1 + 7];
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cZq_info" {
     block_c3cZq_info:
         const _c3cZq;
         const 0;
         const 30;
 },
 _c3cZv() //  [R1, R2]
         { []
         }
     {offset
       c3cZv: // global
           I64[Sp - 8] = R2;
           I64[Sp] = R1;
           Sp = Sp - 16;
           call _c3cZw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3cZv_info" {
     block_c3cZv_info:
         const _c3cZv;
         const 0;
         const 30;
 },
 _c3cZw() //  []
         { []
         }
     {offset
       c3cZw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3cZO; else goto c3cZN;
       c3cZO: // global
           HpAlloc = 64;
           I64[Sp] = block_c3cZw_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3cZN: // global
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = sat_s3aLY_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3cZw_info" {
     block_c3cZw_info:
         const _c3cZw;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.266798705 UTC

[section ""data" . GHC.Float.$w$cexponent1_closure" {
     GHC.Float.$w$cexponent1_closure:
         const GHC.Float.$w$cexponent1_info;
         const 0;
 },
 GHC.Float.$w$cexponent1_entry() //  [F1]
         { []
         }
     {offset
       c3d0x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3d0y; else goto c3d0z;
       c3d0y: // global
           F1 = F1;
           R1 = GHC.Float.$w$cexponent1_closure;
           call (stg_gc_fun)(F1, R1) args: 8, res: 0, upd: 8;
       c3d0z: // global
           I64[Sp - 8] = block_c3d0r_info;
           F1 = F1;
           Sp = Sp - 8;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cexponent1_info" {
     GHC.Float.$w$cexponent1_info:
         const GHC.Float.$w$cexponent1_entry;
         const 0;
         const 12884901902;
         const 4294967302;
         const S3bQP_srt+408;
 },
 _c3d0r() //  [R1, R2]
         { []
         }
     {offset
       c3d0r: // global
           I64[Sp - 8] = block_c3d0v_info;
           _s3aM3::I64 = R2;
           R2 = R1;
           I64[Sp] = _s3aM3::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d0r_info" {
     block_c3d0r_info:
         const _c3d0r;
         const 0;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3d0v() //  [R1]
         { []
         }
     {offset
       c3d0v: // global
           I64[Sp] = block_c3d0D_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d0v_info" {
     block_c3d0v_info:
         const _c3d0v;
         const 65;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3d0D() //  [R1]
         { []
         }
     {offset
       c3d0D: // global
           if (R1 == 1) goto c3d0P; else goto c3d0L;
       c3d0P: // global
           R1 = 0;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3d0L: // global
           R1 = I64[Sp + 8] + 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d0D_info" {
     block_c3d0D_info:
         const _c3d0D;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.277517912 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cexponent_closure" {
     GHC.Float.$fRealFloatFloat_$cexponent_closure:
         const GHC.Float.$fRealFloatFloat_$cexponent_info;
         const 0;
 },
 GHC.Float.$fRealFloatFloat_$cexponent_entry() //  [R2]
         { []
         }
     {offset
       c3d1h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3d1p; else goto c3d1q;
       c3d1p: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cexponent_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3d1q: // global
           I64[Sp - 8] = block_c3d1e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3d1v; else goto c3d1f;
       u3d1v: // global
           call _c3d1e(R1) args: 0, res: 0, upd: 0;
       c3d1f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cexponent_info" {
     GHC.Float.$fRealFloatFloat_$cexponent_info:
         const GHC.Float.$fRealFloatFloat_$cexponent_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S3bQP_srt+408;
 },
 _c3d1e() //  [R1]
         { []
         }
     {offset
       c3d1e: // global
           I64[Sp] = block_c3d1k_info;
           F1 = F32[R1 + 7];
           call GHC.Float.$w$cexponent1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d1e_info" {
     block_c3d1e_info:
         const _c3d1e;
         const 0;
         const 4294967326;
         const S3bQP_srt+408;
 },
 _c3d1k() //  [R1]
         { []
         }
     {offset
       c3d1k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3d1u; else goto c3d1t;
       c3d1u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3d1t: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d1k_info" {
     block_c3d1k_info:
         const _c3d1k;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.28979972 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$csignificand_closure" {
     GHC.Float.$fRealFloatFloat_$csignificand_closure:
         const GHC.Float.$fRealFloatFloat_$csignificand_info;
 },
 GHC.Float.$fRealFloatFloat_$csignificand_entry() //  [R2]
         { []
         }
     {offset
       c3d1T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3d29; else goto c3d2a;
       c3d29: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$csignificand_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3d2a: // global
           I64[Sp - 8] = block_c3d1Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3d2h; else goto c3d1R;
       u3d2h: // global
           call _c3d1Q(R1) args: 0, res: 0, upd: 0;
       c3d1R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$csignificand_info" {
     GHC.Float.$fRealFloatFloat_$csignificand_info:
         const GHC.Float.$fRealFloatFloat_$csignificand_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3d1Q() //  [R1]
         { []
         }
     {offset
       c3d1Q: // global
           I64[Sp] = block_c3d1W_info;
           F1 = F32[R1 + 7];
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d1Q_info" {
     block_c3d1Q_info:
         const _c3d1Q;
         const 0;
         const 30;
 },
 _c3d1W() //  [R1]
         { []
         }
     {offset
       c3d1W: // global
           I64[Sp] = block_c3d20_info;
           R2 = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d1W_info" {
     block_c3d1W_info:
         const _c3d1W;
         const 0;
         const 30;
 },
 _c3d20() //  [R1]
         { []
         }
     {offset
       c3d20: // global
           I64[Sp] = block_c3d24_info;
           R3 = (-24);
           R2 = R1;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d20_info" {
     block_c3d20_info:
         const _c3d20;
         const 0;
         const 30;
 },
 _c3d24() //  [F1]
         { []
         }
     {offset
       c3d24: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3d2g; else goto c3d2f;
       c3d2g: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3d2f: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d24_info" {
     block_c3d24_info:
         const _c3d24;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.303776037 UTC

[section ""data" . GHC.Float.$fRealFloatFloat4_closure" {
     GHC.Float.$fRealFloatFloat4_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.307405936 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cfloatDigits_closure" {
     GHC.Float.$fRealFloatFloat_$cfloatDigits_closure:
         const GHC.Float.$fRealFloatFloat_$cfloatDigits_info;
 },
 GHC.Float.$fRealFloatFloat_$cfloatDigits_entry() //  []
         { []
         }
     {offset
       c3d2L: // global
           R1 = GHC.Float.$fRealFloatFloat4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cfloatDigits_info" {
     GHC.Float.$fRealFloatFloat_$cfloatDigits_info:
         const GHC.Float.$fRealFloatFloat_$cfloatDigits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.313682414 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cfloatRadix_closure" {
     GHC.Float.$fRealFloatFloat_$cfloatRadix_closure:
         const GHC.Float.$fRealFloatFloat_$cfloatRadix_info;
         const 0;
 },
 GHC.Float.$fRealFloatFloat_$cfloatRadix_entry() //  []
         { []
         }
     {offset
       c3d2X: // global
           R1 = GHC.Float.$fRealFloatDouble5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cfloatRadix_info" {
     GHC.Float.$fRealFloatFloat_$cfloatRadix_info:
         const GHC.Float.$fRealFloatFloat_$cfloatRadix_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3bQP_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.318885503 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisIEEE_closure" {
     GHC.Float.$fRealFloatDouble_$cisIEEE_closure:
         const GHC.Float.$fRealFloatDouble_$cisIEEE_info;
 },
 GHC.Float.$fRealFloatDouble_$cisIEEE_entry() //  []
         { []
         }
     {offset
       c3d39: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisIEEE_info" {
     GHC.Float.$fRealFloatDouble_$cisIEEE_info:
         const GHC.Float.$fRealFloatDouble_$cisIEEE_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.326089006 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cencodeFloat_closure" {
     GHC.Float.$fRealFloatDouble_$cencodeFloat_closure:
         const GHC.Float.$fRealFloatDouble_$cencodeFloat_info;
 },
 GHC.Float.$fRealFloatDouble_$cencodeFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3d3p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3d3x; else goto c3d3y;
       c3d3x: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cencodeFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3d3y: // global
           I64[Sp - 16] = block_c3d3m_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3d3D; else goto c3d3n;
       u3d3D: // global
           call _c3d3m(R1) args: 0, res: 0, upd: 0;
       c3d3n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cencodeFloat_info" {
     GHC.Float.$fRealFloatDouble_$cencodeFloat_info:
         const GHC.Float.$fRealFloatDouble_$cencodeFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3d3m() //  [R1]
         { []
         }
     {offset
       c3d3m: // global
           _s3aMl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3d3s_info;
           R3 = I64[R1 + 7];
           R2 = _s3aMl::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d3m_info" {
     block_c3d3m_info:
         const _c3d3m;
         const 1;
         const 30;
 },
 _c3d3s() //  [D1]
         { []
         }
     {offset
       c3d3s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3d3C; else goto c3d3B;
       c3d3C: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3d3B: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d3s_info" {
     block_c3d3s_info:
         const _c3d3s;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.334293984 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure" {
     GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure:
         const GHC.Float.$fRealFloatDouble_$cdecodeFloat_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$cdecodeFloat_entry() //  [R2]
         { []
         }
     {offset
       c3d41: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3d4a; else goto c3d4b;
       c3d4a: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3d4b: // global
           I64[Sp - 8] = block_c3d3Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3d4h; else goto c3d3Z;
       u3d4h: // global
           call _c3d3Y(R1) args: 0, res: 0, upd: 0;
       c3d3Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cdecodeFloat_info" {
     GHC.Float.$fRealFloatDouble_$cdecodeFloat_info:
         const GHC.Float.$fRealFloatDouble_$cdecodeFloat_entry;
         const 0;
         const 279172874254;
         const 4294967301;
         const S3bQP_srt+384;
 },
 _c3d3Y() //  [R1]
         { []
         }
     {offset
       c3d3Y: // global
           I64[Sp] = block_c3d44_info;
           D1 = F64[R1 + 7];
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d3Y_info" {
     block_c3d3Y_info:
         const _c3d3Y;
         const 0;
         const 4294967326;
         const S3bQP_srt+384;
 },
 _c3d44() //  [R1, R2]
         { []
         }
     {offset
       c3d44: // global
           I64[Sp - 8] = R2;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _c3d45() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3d44_info" {
     block_c3d44_info:
         const _c3d44;
         const 0;
         const 30;
 },
 _c3d45() //  []
         { []
         }
     {offset
       c3d45: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3d4f; else goto c3d4e;
       c3d4f: // global
           HpAlloc = 40;
           I64[Sp] = block_c3d45_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3d4e: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d45_info" {
     block_c3d45_info:
         const _c3d45;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.350238101 UTC

[section ""data" . GHC.Float.$w$cproperFraction_closure" {
     GHC.Float.$w$cproperFraction_closure:
         const GHC.Float.$w$cproperFraction_info;
         const 0;
 },
 GHC.Float.$w$cproperFraction_slow() //  [R1]
         { []
         }
     {offset
       c3d4I: // global
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2,
                                                   R1) args: 8, res: 0, upd: 8;
     }
 },
 $dReal_s3aMC_entry() //  [R1]
         { []
         }
     {offset
       c3d4U: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s3aMC_info" {
     $dReal_s3aMC_info:
         const $dReal_s3aMC_entry;
         const 1;
         const 16;
 },
 $dNum_s3aMD_entry() //  [R1]
         { []
         }
     {offset
       c3d51: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3d52; else goto c3d53;
       c3d52: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3d53: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s3aMD_info" {
     $dNum_s3aMD_info:
         const $dNum_s3aMD_entry;
         const 1;
         const 16;
 },
 sat_s3aMP_entry() //  [R1]
         { []
         }
     {offset
       c3d5u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3d5y; else goto c3d5z;
       c3d5y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3d5z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3d5s_info;
           R3 = I64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aMP_info" {
     sat_s3aMP_info:
         const sat_s3aMP_entry;
         const 4294967297;
         const 19;
 },
 _c3d5s() //  [D1]
         { []
         }
     {offset
       c3d5s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3d5C; else goto c3d5B;
       c3d5C: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 24;
       c3d5B: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3d5s_info" {
     block_c3d5s_info:
         const _c3d5s;
         const 0;
         const 30;
 },
 sat_s3aMN_entry() //  [R1]
         { []
         }
     {offset
       c3d5H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3d5I; else goto c3d5J;
       c3d5I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3d5J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aMN_info" {
     sat_s3aMN_info:
         const sat_s3aMN_entry;
         const 2;
         const 18;
 },
 sat_s3aMV_entry() //  [R1]
         { []
         }
     {offset
       c3d5Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3d5Z; else goto c3d60;
       c3d5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3d60: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aMV_info" {
     sat_s3aMV_info:
         const sat_s3aMV_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+264;
 },
 sat_s3aMX_entry() //  [R1]
         { []
         }
     {offset
       c3d61: // global
           _s3aMX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3d62; else goto c3d63;
       c3d63: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3d65; else goto c3d64;
       c3d65: // global
           HpAlloc = 40;
           goto c3d62;
       c3d62: // global
           R1 = _s3aMX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3d64: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aMX::P64;
           _s3aMD::P64 = P64[_s3aMX::P64 + 16];
           _s3aMB::I64 = I64[_s3aMX::P64 + 24];
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s3aMB::I64;
           I64[Hp - 16] = sat_s3aMV_info;
           P64[Hp] = _s3aMD::P64;
           R5 = Hp - 31;
           R4 = Hp - 16;
           R3 = GHC.Real.$fIntegralInt_closure;
           R2 = _s3aMD::P64;
           Sp = Sp - 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aMX_info" {
     sat_s3aMX_info:
         const sat_s3aMX_entry;
         const 4294967297;
         const 30064771091;
         const S3bQP_srt+264;
 },
 sat_s3aMU_entry() //  [R1]
         { []
         }
     {offset
       c3d6a: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3d6b; else goto c3d6c;
       c3d6b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3d6c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aMU_info" {
     sat_s3aMU_info:
         const sat_s3aMU_entry;
         const 2;
         const 18;
 },
 sat_s3aMY_entry() //  [R1]
         { []
         }
     {offset
       c3d6d: // global
           _s3aMY::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3d6e; else goto c3d6f;
       c3d6f: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3d6h; else goto c3d6g;
       c3d6h: // global
           HpAlloc = 64;
           goto c3d6e;
       c3d6e: // global
           R1 = _s3aMY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3d6g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aMY::P64;
           _s3aMA::P64 = P64[_s3aMY::P64 + 16];
           _s3aMD::P64 = P64[_s3aMY::P64 + 24];
           _s3aMB::I64 = I64[_s3aMY::P64 + 32];
           I64[Hp - 56] = sat_s3aMX_info;
           P64[Hp - 40] = _s3aMD::P64;
           I64[Hp - 32] = _s3aMB::I64;
           I64[Hp - 24] = sat_s3aMU_info;
           P64[Hp - 8] = _s3aMA::P64;
           P64[Hp] = _s3aMD::P64;
           R2 = _s3aMD::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aMY_info" {
     sat_s3aMY_info:
         const sat_s3aMY_entry;
         const 4294967298;
         const 30064771087;
         const S3bQP_srt+264;
 },
 section ""relreadonly" . u3d6V_srtd" {
     u3d6V_srtd:
         const S3bQP_srt+16;
         const 57;
         const 136304272504520705;
 },
 GHC.Float.$w$cproperFraction_entry() //  [R2, D1]
         { []
         }
     {offset
       c3d6l: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3d6m; else goto c3d6n;
       c3d6m: // global
           R1 = GHC.Float.$w$cproperFraction_closure;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3d6n: // global
           I64[Sp - 16] = block_c3d4M_info;
           D1 = D1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cproperFraction_info" {
     GHC.Float.$w$cproperFraction_info:
         const GHC.Float.$w$cproperFraction_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const u3d6V_srtd;
         const 130;
         const GHC.Float.$w$cproperFraction_slow;
 },
 section ""relreadonly" . u3d6W_srtd" {
     u3d6W_srtd:
         const S3bQP_srt+16;
         const 56;
         const 64176309722415105;
 },
 _c3d4M() //  [R1, R2]
         { []
         }
     {offset
       c3d4M: // global
           I64[Sp - 8] = R2;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _c3d4N() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3d4M_info" {
     block_c3d4M_info:
         const _c3d4M;
         const 1;
         const 18446744069414584350;
         const u3d6W_srtd;
 },
 section ""relreadonly" . u3d6X_srtd" {
     u3d6X_srtd:
         const S3bQP_srt+16;
         const 56;
         const 64176309722415105;
 },
 _c3d4N() //  []
         { []
         }
     {offset
       c3d4N: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3d6q; else goto c3d6p;
       c3d6q: // global
           HpAlloc = 88;
           I64[Sp] = block_c3d4N_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3d6p: // global
           I64[Hp - 80] = $dReal_s3aMC_info;
           P64[Hp - 64] = P64[Sp + 24];
           I64[Hp - 56] = $dNum_s3aMD_info;
           P64[Hp - 40] = Hp - 80;
           _s3aMB::I64 = I64[Sp + 8];
           _c3d4X::P64 = Hp - 56;
           if (%MO_S_Lt_W64(_s3aMB::I64, 0)) goto c3d6j; else goto c3d6k;
       c3d6j: // global
           _s3aMF::I64 = -_s3aMB::I64;
           if (%MO_S_Ge_W64(_s3aMF::I64, 0)) goto c3d6N; else goto c3d6O;
       c3d6N: // global
           if (_s3aMF::I64 == 0) goto c3d6L; else goto c3d6G;
       c3d6L: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _c3d4X::P64;
           P64[Sp] = GHC.Real.$fEnumRatio1_closure;
           call _s3aMH() args: 0, res: 0, upd: 0;
       c3d6G: // global
           Hp = Hp - 40;
           I64[Sp] = block_c3d6E_info;
           R3 = _s3aMF::I64;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           P64[Sp + 24] = _c3d4X::P64;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3d6O: // global
           Hp = Hp - 40;
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3d6k: // global
           I64[Hp - 32] = sat_s3aMY_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _c3d4X::P64;
           I64[Hp] = _s3aMB::I64;
           R2 = GHC.Float.rationalToDouble4_closure+1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d4N_info" {
     block_c3d4N_info:
         const _c3d4N;
         const 67;
         const 18446744069414584350;
         const u3d6X_srtd;
 },
 section ""relreadonly" . u3d6Y_srtd" {
     u3d6Y_srtd:
         const S3bQP_srt+16;
         const 51;
         const 1125899906842625;
 },
 _c3d6E() //  [R1]
         { []
         }
     {offset
       c3d6E: // global
           P64[Sp] = R1;
           call _s3aMH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3d6E_info" {
     block_c3d6E_info:
         const _c3d6E;
         const 67;
         const 18446744069414584350;
         const u3d6Y_srtd;
 },
 _s3aMH() //  []
         { []
         }
     {offset
       s3aMH: // global
           I64[Sp - 8] = block_c3d5i_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3d5i() //  [R1]
         { []
         }
     {offset
       c3d5i: // global
           if (R1 == 1) goto c3d6B; else goto c3d6u;
       c3d6B: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3d6u: // global
           _s3aMI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3d5m_info;
           R3 = _s3aMI::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 8;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d5i_info" {
     block_c3d5i_info:
         const _c3d5i;
         const 132;
         const 4294967326;
         const S3bQP_srt+472;
 },
 _c3d5m() //  [R1, R2]
         { []
         }
     {offset
       c3d5m: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3d6x; else goto c3d6w;
       c3d6x: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3d6w: // global
           I64[Hp - 56] = sat_s3aMP_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = I64[Sp + 8];
           I64[Hp - 24] = sat_s3aMN_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R2 = Hp - 56;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d5m_info" {
     block_c3d5m_info:
         const _c3d5m;
         const 195;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.386674819 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$cproperFraction_closure" {
     GHC.Float.$fRealFracDouble_$cproperFraction_closure:
         const GHC.Float.$fRealFracDouble_$cproperFraction_info;
         const 0;
 },
 GHC.Float.$fRealFracDouble_$cproperFraction_entry() //  [R2, R3]
         { []
         }
     {offset
       c3d8M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3d8S; else goto c3d8T;
       c3d8S: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$cproperFraction_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3d8T: // global
           I64[Sp - 16] = block_c3d8J_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3d8Y; else goto c3d8K;
       u3d8Y: // global
           call _c3d8J(R1) args: 0, res: 0, upd: 0;
       c3d8K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$cproperFraction_info" {
     GHC.Float.$fRealFracDouble_$cproperFraction_info:
         const GHC.Float.$fRealFracDouble_$cproperFraction_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3bQP_srt+464;
 },
 _c3d8J() //  [R1]
         { []
         }
     {offset
       c3d8J: // global
           _s3aMZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3d8P_info;
           D1 = F64[R1 + 7];
           R2 = _s3aMZ::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d8J_info" {
     block_c3d8J_info:
         const _c3d8J;
         const 1;
         const 4294967326;
         const S3bQP_srt+464;
 },
 _c3d8P() //  [R1, R2]
         { []
         }
     {offset
       c3d8P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3d8X; else goto c3d8W;
       c3d8X: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3d8W: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d8P_info" {
     block_c3d8P_info:
         const _c3d8P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.395478574 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$ctruncate_closure" {
     GHC.Float.$fRealFracDouble_$ctruncate_closure:
         const GHC.Float.$fRealFracDouble_$ctruncate_info;
         const 0;
 },
 GHC.Float.$fRealFracDouble_$ctruncate_entry() //  [R2, R3]
         { []
         }
     {offset
       c3d9m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3d9q; else goto c3d9r;
       c3d9q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$ctruncate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3d9r: // global
           I64[Sp - 16] = block_c3d9j_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3d9v; else goto c3d9k;
       u3d9v: // global
           call _c3d9j(R1) args: 0, res: 0, upd: 0;
       c3d9k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$ctruncate_info" {
     GHC.Float.$fRealFracDouble_$ctruncate_info:
         const GHC.Float.$fRealFracDouble_$ctruncate_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S3bQP_srt+464;
 },
 _c3d9j() //  [R1]
         { []
         }
     {offset
       c3d9j: // global
           _s3aN6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3d9p_info;
           D1 = F64[R1 + 7];
           R2 = _s3aN6::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d9j_info" {
     block_c3d9j_info:
         const _c3d9j;
         const 1;
         const 4294967326;
         const S3bQP_srt+464;
 },
 _c3d9p() //  [R1]
         { []
         }
     {offset
       c3d9p: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d9p_info" {
     block_c3d9p_info:
         const _c3d9p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.405668775 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$cceiling_closure" {
     GHC.Float.$fRealFracDouble_$cceiling_closure:
         const GHC.Float.$fRealFracDouble_$cceiling_info;
         const 0;
 },
 sat_s3aNp_entry() //  [R1]
         { []
         }
     {offset
       c3dag: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dah; else goto c3dai;
       c3dah: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dai: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aNp_info" {
     sat_s3aNp_info:
         const sat_s3aNp_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 GHC.Float.$fRealFracDouble_$cceiling_entry() //  [R2, R3]
         { []
         }
     {offset
       c3daj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3dak; else goto c3dal;
       c3dak: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$cceiling_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dal: // global
           I64[Sp - 16] = block_c3d9O_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dax; else goto c3d9P;
       u3dax: // global
           call _c3d9O(R1) args: 0, res: 0, upd: 0;
       c3d9P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$cceiling_info" {
     GHC.Float.$fRealFracDouble_$cceiling_info:
         const GHC.Float.$fRealFracDouble_$cceiling_entry;
         const 0;
         const 38280601127616526;
         const 8589934607;
         const S3bQP_srt+312;
 },
 _c3d9O() //  [R1]
         { []
         }
     {offset
       c3d9O: // global
           I64[Sp] = block_c3d9T_info;
           D1 = F64[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d9O_info" {
     block_c3d9O_info:
         const _c3d9O;
         const 1;
         const 2251804108652574;
         const S3bQP_srt+312;
 },
 _c3d9T() //  [R1, R2]
         { []
         }
     {offset
       c3d9T: // global
           I64[Sp - 8] = block_c3d9V_info;
           _s3aNi::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3aNi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3daw; else goto c3d9W;
       u3daw: // global
           call _c3d9V(R1) args: 0, res: 0, upd: 0;
       c3d9W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d9T_info" {
     block_c3d9T_info:
         const _c3d9T;
         const 1;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3d9V() //  [R1]
         { []
         }
     {offset
       c3d9V: // global
           if (%MO_F_Gt_W64(F64[R1 + 7],
                            0.0 :: W64)) goto c3dar; else goto c3daq;
       c3dar: // global
           I64[Sp] = block_c3da4_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c3daq: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3d9V_info" {
     block_c3d9V_info:
         const _c3d9V;
         const 2;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3da4() //  [R1]
         { []
         }
     {offset
       c3da4: // global
           I64[Sp] = block_c3da8_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3da4_info" {
     block_c3da4_info:
         const _c3da4;
         const 130;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3da8() //  [R1]
         { []
         }
     {offset
       c3da8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dav; else goto c3dau;
       c3dav: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dau: // global
           I64[Hp - 16] = sat_s3aNp_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3da8_info" {
     block_c3da8_info:
         const _c3da8;
         const 130;
         const 4294967326;
         const S3bQP_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.42182702 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$cfloor_closure" {
     GHC.Float.$fRealFracDouble_$cfloor_closure:
         const GHC.Float.$fRealFracDouble_$cfloor_info;
         const 0;
 },
 sat_s3aNC_entry() //  [R1]
         { []
         }
     {offset
       c3dbI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dbJ; else goto c3dbK;
       c3dbJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dbK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aNC_info" {
     sat_s3aNC_info:
         const sat_s3aNC_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 GHC.Float.$fRealFracDouble_$cfloor_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dbL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3dbM; else goto c3dbN;
       c3dbM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$cfloor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dbN: // global
           I64[Sp - 16] = block_c3dbg_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dbZ; else goto c3dbh;
       u3dbZ: // global
           call _c3dbg(R1) args: 0, res: 0, upd: 0;
       c3dbh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$cfloor_info" {
     GHC.Float.$fRealFracDouble_$cfloor_info:
         const GHC.Float.$fRealFracDouble_$cfloor_entry;
         const 0;
         const 74309398146580494;
         const 8589934607;
         const S3bQP_srt+312;
 },
 _c3dbg() //  [R1]
         { []
         }
     {offset
       c3dbg: // global
           I64[Sp] = block_c3dbl_info;
           D1 = F64[R1 + 7];
           R2 = P64[Sp + 8];
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dbg_info" {
     block_c3dbg_info:
         const _c3dbg;
         const 1;
         const 2251804108652574;
         const S3bQP_srt+312;
 },
 _c3dbl() //  [R1, R2]
         { []
         }
     {offset
       c3dbl: // global
           I64[Sp - 8] = block_c3dbn_info;
           _s3aNv::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3aNv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dbY; else goto c3dbo;
       u3dbY: // global
           call _c3dbn(R1) args: 0, res: 0, upd: 0;
       c3dbo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dbl_info" {
     block_c3dbl_info:
         const _c3dbl;
         const 1;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3dbn() //  [R1]
         { []
         }
     {offset
       c3dbn: // global
           if (%MO_F_Lt_W64(F64[R1 + 7],
                            0.0 :: W64)) goto c3dbT; else goto c3dbS;
       c3dbT: // global
           I64[Sp] = block_c3dbw_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c3dbS: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dbn_info" {
     block_c3dbn_info:
         const _c3dbn;
         const 2;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3dbw() //  [R1]
         { []
         }
     {offset
       c3dbw: // global
           I64[Sp] = block_c3dbA_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dbw_info" {
     block_c3dbw_info:
         const _c3dbw;
         const 130;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3dbA() //  [R1]
         { []
         }
     {offset
       c3dbA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dbX; else goto c3dbW;
       c3dbX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dbW: // global
           I64[Hp - 16] = sat_s3aNC_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dbA_info" {
     block_c3dbA_info:
         const _c3dbA;
         const 130;
         const 4294967326;
         const S3bQP_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.436094559 UTC

[section ""data" . GHC.Float.$w$cexponent_closure" {
     GHC.Float.$w$cexponent_closure:
         const GHC.Float.$w$cexponent_info;
         const 0;
 },
 GHC.Float.$w$cexponent_entry() //  [D1]
         { []
         }
     {offset
       c3dcR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dcS; else goto c3dcT;
       c3dcS: // global
           D1 = D1;
           R1 = GHC.Float.$w$cexponent_closure;
           call (stg_gc_fun)(D1, R1) args: 8, res: 0, upd: 8;
       c3dcT: // global
           I64[Sp - 8] = block_c3dcI_info;
           D1 = D1;
           Sp = Sp - 8;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cexponent_info" {
     GHC.Float.$w$cexponent_info:
         const GHC.Float.$w$cexponent_entry;
         const 0;
         const 281547991154702;
         const 4294967303;
         const S3bQP_srt+384;
 },
 _c3dcI() //  [R1, R2]
         { []
         }
     {offset
       c3dcI: // global
           I64[Sp - 8] = block_c3dcM_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s3aNG::I64 = R2;
           R2 = R1;
           I64[Sp] = _s3aNG::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dcI_info" {
     block_c3dcI_info:
         const _c3dcI;
         const 0;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dcM() //  [R1]
         { []
         }
     {offset
       c3dcM: // global
           if (R1 == 1) goto c3dcQ; else goto c3dcP;
       c3dcQ: // global
           R1 = 0;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3dcP: // global
           R1 = I64[Sp + 8] + 53;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dcM_info" {
     block_c3dcM_info:
         const _c3dcM;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.444518322 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cexponent_closure" {
     GHC.Float.$fRealFloatDouble_$cexponent_closure:
         const GHC.Float.$fRealFloatDouble_$cexponent_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$cexponent_entry() //  [R2]
         { []
         }
     {offset
       c3ddp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ddx; else goto c3ddy;
       c3ddx: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cexponent_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ddy: // global
           I64[Sp - 8] = block_c3ddm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ddD; else goto c3ddn;
       u3ddD: // global
           call _c3ddm(R1) args: 0, res: 0, upd: 0;
       c3ddn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cexponent_info" {
     GHC.Float.$fRealFloatDouble_$cexponent_info:
         const GHC.Float.$fRealFloatDouble_$cexponent_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3bQP_srt+512;
 },
 _c3ddm() //  [R1]
         { []
         }
     {offset
       c3ddm: // global
           I64[Sp] = block_c3dds_info;
           D1 = F64[R1 + 7];
           call GHC.Float.$w$cexponent_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ddm_info" {
     block_c3ddm_info:
         const _c3ddm;
         const 0;
         const 4294967326;
         const S3bQP_srt+512;
 },
 _c3dds() //  [R1]
         { []
         }
     {offset
       c3dds: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ddC; else goto c3ddB;
       c3ddC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3ddB: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dds_info" {
     block_c3dds_info:
         const _c3dds;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.452753221 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$csignificand_closure" {
     GHC.Float.$fRealFloatDouble_$csignificand_closure:
         const GHC.Float.$fRealFloatDouble_$csignificand_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$csignificand_entry() //  [R2]
         { []
         }
     {offset
       c3de1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ded; else goto c3dee;
       c3ded: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$csignificand_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dee: // global
           I64[Sp - 8] = block_c3ddY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dek; else goto c3ddZ;
       u3dek: // global
           call _c3ddY(R1) args: 0, res: 0, upd: 0;
       c3ddZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$csignificand_info" {
     GHC.Float.$fRealFloatDouble_$csignificand_info:
         const GHC.Float.$fRealFloatDouble_$csignificand_entry;
         const 0;
         const 1125904201809934;
         const 4294967301;
         const S3bQP_srt+384;
 },
 _c3ddY() //  [R1]
         { []
         }
     {offset
       c3ddY: // global
           I64[Sp] = block_c3de4_info;
           D1 = F64[R1 + 7];
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ddY_info" {
     block_c3ddY_info:
         const _c3ddY;
         const 0;
         const 4294967326;
         const S3bQP_srt+384;
 },
 _c3de4() //  [R1]
         { []
         }
     {offset
       c3de4: // global
           I64[Sp] = block_c3de8_info;
           R3 = (-53);
           R2 = R1;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3de4_info" {
     block_c3de4_info:
         const _c3de4;
         const 0;
         const 30;
 },
 _c3de8() //  [D1]
         { []
         }
     {offset
       c3de8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dej; else goto c3dei;
       c3dej: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3dei: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3de8_info" {
     block_c3de8_info:
         const _c3de8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.464803298 UTC

[section ""data" . GHC.Float.$w$cround_closure" {
     GHC.Float.$w$cround_closure:
         const GHC.Float.$w$cround_info;
         const 0;
 },
 GHC.Float.$w$cround_slow() //  [R1]
         { []
         }
     {offset
       c3deG: // global
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cround_entry(D1, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3aO7_entry() //  [R1]
         { []
         }
     {offset
       c3dfk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dfl; else goto c3dfm;
       c3dfl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dfm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aO7_info" {
     sat_s3aO7_info:
         const sat_s3aO7_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 sat_s3aO8_entry() //  [R1]
         { []
         }
     {offset
       c3dfs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dft; else goto c3dfu;
       c3dft: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dfu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aO8_info" {
     sat_s3aO8_info:
         const sat_s3aO8_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 GHC.Float.$w$cround_entry() //  [R2, D1]
         { []
         }
     {offset
       c3dfv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dfw; else goto c3dfx;
       c3dfw: // global
           R1 = GHC.Float.$w$cround_closure;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3dfx: // global
           I64[Sp - 16] = block_c3deK_info;
           D1 = D1;
           _s3aNT::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s3aNT::P64;
           Sp = Sp - 16;
           call GHC.Float.$w$cproperFraction_entry(D1,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cround_info" {
     GHC.Float.$w$cround_info:
         const GHC.Float.$w$cround_entry;
         const 0;
         const 1155173343075237902;
         const 8589934592;
         const S3bQP_srt+312;
         const 130;
         const GHC.Float.$w$cround_slow;
 },
 _c3deK() //  [R1, R2]
         { []
         }
     {offset
       c3deK: // global
           I64[Sp - 8] = block_c3deM_info;
           _s3aNW::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3aNW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dg8; else goto c3deN;
       u3dg8: // global
           call _c3deM(R1) args: 0, res: 0, upd: 0;
       c3deN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3deK_info" {
     block_c3deK_info:
         const _c3deK;
         const 1;
         const 38654705694;
         const S3bQP_srt+312;
 },
 _c3deM() //  [R1]
         { []
         }
     {offset
       c3deM: // global
           _s3aNT::P64 = P64[Sp + 16];
           _s3aNW::P64 = P64[Sp + 8];
           _s3aNZ::F64 = F64[R1 + 7];
           (_c3deR::F64) = call MO_F64_Fabs(_s3aNZ::F64);
           _s3aO0::F64 = %MO_F_Sub_W64(_c3deR::F64, 0.5 :: W64);
           if (%MO_F_Lt_W64(_s3aO0::F64,
                            0.0 :: W64)) goto u3dg4; else goto c3dg1;
       u3dg4: // global
           Sp = Sp + 8;
           call _c3dg2() args: 0, res: 0, upd: 0;
       c3dg1: // global
           if (%MO_F_Eq_W64(_s3aO0::F64,
                            0.0 :: W64)) goto c3dfP; else goto u3dg5;
       c3dfP: // global
           I64[Sp - 8] = block_c3dfO_info;
           R3 = _s3aNW::P64;
           R2 = _s3aNT::P64;
           F64[Sp] = _s3aNZ::F64;
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3dg5: // global
           F64[Sp] = _s3aNZ::F64;
           call _s3aO3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3deM_info" {
     block_c3deM_info:
         const _c3deM;
         const 2;
         const 38654705694;
         const S3bQP_srt+312;
 },
 _c3dfO() //  [R1]
         { []
         }
     {offset
       c3dfO: // global
           if (R1 & 7 == 1) goto u3dg6; else goto u3dg7;
       u3dg6: // global
           Sp = Sp + 8;
           call _s3aO3() args: 0, res: 0, upd: 0;
       u3dg7: // global
           Sp = Sp + 16;
           call _c3dg2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3dfO_info" {
     block_c3dfO_info:
         const _c3dfO;
         const 67;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3dg2() //  []
         { []
         }
     {offset
       c3dg2: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _s3aO3() //  []
         { []
         }
     {offset
       s3aO3: // global
           I64[Sp - 8] = block_c3df5_info;
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3df5() //  [R1]
         { []
         }
     {offset
       c3df5: // global
           I64[Sp] = block_c3df9_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3df5_info" {
     block_c3df5_info:
         const _c3df5;
         const 323;
         const 4294967326;
         const S3bQP_srt+312;
 },
 _c3df9() //  [R1]
         { []
         }
     {offset
       c3df9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dfE; else goto c3dfD;
       c3dfE: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dfD: // global
           if (%MO_F_Lt_W64(F64[Sp + 8],
                            0.0 :: W64)) goto c3dfH; else goto c3dfG;
       c3dfH: // global
           I64[Hp - 16] = sat_s3aO8_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
       c3dfG: // global
           I64[Hp - 16] = sat_s3aO7_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3df9_info" {
     block_c3df9_info:
         const _c3df9;
         const 323;
         const 4294967326;
         const S3bQP_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.484743735 UTC

[section ""data" . GHC.Float.$fRealFracDouble_$cround_closure" {
     GHC.Float.$fRealFracDouble_$cround_closure:
         const GHC.Float.$fRealFracDouble_$cround_info;
         const 0;
 },
 GHC.Float.$fRealFracDouble_$cround_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dhn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dho; else goto c3dhp;
       c3dho: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFracDouble_$cround_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dhp: // global
           I64[Sp - 16] = block_c3dhk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dht; else goto c3dhl;
       u3dht: // global
           call _c3dhk(R1) args: 0, res: 0, upd: 0;
       c3dhl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFracDouble_$cround_info" {
     GHC.Float.$fRealFracDouble_$cround_info:
         const GHC.Float.$fRealFracDouble_$cround_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+536;
 },
 _c3dhk() //  [R1]
         { []
         }
     {offset
       c3dhk: // global
           D1 = F64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$w$cround_entry(D1, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dhk_info" {
     block_c3dhk_info:
         const _c3dhk;
         const 1;
         const 4294967326;
         const S3bQP_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.490199796 UTC

[section ""data" . GHC.Float.$fRealFloatDouble4_closure" {
     GHC.Float.$fRealFloatDouble4_closure:
         const GHC.Types.I#_con_info;
         const 53;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.492511225 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cfloatDigits_closure" {
     GHC.Float.$fRealFloatDouble_$cfloatDigits_closure:
         const GHC.Float.$fRealFloatDouble_$cfloatDigits_info;
 },
 GHC.Float.$fRealFloatDouble_$cfloatDigits_entry() //  []
         { []
         }
     {offset
       c3dhJ: // global
           R1 = GHC.Float.$fRealFloatDouble4_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cfloatDigits_info" {
     GHC.Float.$fRealFloatDouble_$cfloatDigits_info:
         const GHC.Float.$fRealFloatDouble_$cfloatDigits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.497918656 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cfloatRadix_closure" {
     GHC.Float.$fRealFloatDouble_$cfloatRadix_closure:
         const GHC.Float.$fRealFloatDouble_$cfloatRadix_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$cfloatRadix_entry() //  []
         { []
         }
     {offset
       c3dhV: // global
           R1 = GHC.Float.$fRealFloatDouble5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cfloatRadix_info" {
     GHC.Float.$fRealFloatDouble_$cfloatRadix_info:
         const GHC.Float.$fRealFloatDouble_$cfloatRadix_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3bQP_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.543978945 UTC

[section ""data" . GHC.Float.$dmatan2_closure" {
     GHC.Float.$dmatan2_closure:
         const GHC.Float.$dmatan2_info;
         const 0;
 },
 $dNum_s3aOm_entry() //  [R1]
         { []
         }
     {offset
       c3dij: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dik; else goto c3dil;
       c3dik: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dil: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s3aOm_info" {
     $dNum_s3aOm_info:
         const $dNum_s3aOm_entry;
         const 1;
         const 16;
 },
 $dFloating_s3aOo_entry() //  [R1]
         { []
         }
     {offset
       c3diu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3div; else goto c3diw;
       c3div: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3diw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p2RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dFloating_s3aOo_info" {
     $dFloating_s3aOo_info:
         const $dFloating_s3aOo_entry;
         const 1;
         const 16;
 },
 sat_s3aOp_entry() //  [R1]
         { []
         }
     {offset
       c3diB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3diC; else goto c3diD;
       c3diC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3diD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOp_info" {
     sat_s3aOp_info:
         const sat_s3aOp_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aP4_entry() //  [R1]
         { []
         }
     {offset
       c3diQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3diR; else goto c3diS;
       c3diR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3diS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aP4_info" {
     sat_s3aP4_info:
         const sat_s3aP4_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOW_entry() //  [R1]
         { []
         }
     {offset
       c3dj2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dj3; else goto c3dj4;
       c3dj3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dj4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOW_info" {
     sat_s3aOW_info:
         const sat_s3aOW_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOQ_entry() //  [R1]
         { []
         }
     {offset
       c3dje: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3djf; else goto c3djg;
       c3djf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3djg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOQ_info" {
     sat_s3aOQ_info:
         const sat_s3aOQ_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOL_entry() //  [R1]
         { []
         }
     {offset
       c3djq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3djr; else goto c3djs;
       c3djr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3djs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOL_info" {
     sat_s3aOL_info:
         const sat_s3aOL_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOC_entry() //  [R1]
         { []
         }
     {offset
       c3djH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3djI; else goto c3djJ;
       c3djI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3djJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOC_info" {
     sat_s3aOC_info:
         const sat_s3aOC_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOy_entry() //  [R1]
         { []
         }
     {offset
       c3djT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3djU; else goto c3djV;
       c3djU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3djV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOy_info" {
     sat_s3aOy_info:
         const sat_s3aOy_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOA_entry() //  [R1]
         { []
         }
     {offset
       c3dk5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dk6; else goto c3dk7;
       c3dk6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dk7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOA_info" {
     sat_s3aOA_info:
         const sat_s3aOA_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOE_entry() //  [R1]
         { []
         }
     {offset
       c3dkh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dki; else goto c3dkj;
       c3dki: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dkj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOE_info" {
     sat_s3aOE_info:
         const sat_s3aOE_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOJ_entry() //  [R1]
         { []
         }
     {offset
       c3dkC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dkD; else goto c3dkE;
       c3dkD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dkE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOJ_info" {
     sat_s3aOJ_info:
         const sat_s3aOJ_entry;
         const 2;
         const 18;
 },
 sat_s3aOK_entry() //  [R1]
         { []
         }
     {offset
       c3dkF: // global
           _s3aOK::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3dkG; else goto c3dkH;
       c3dkH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dkJ; else goto c3dkI;
       c3dkJ: // global
           HpAlloc = 32;
           goto c3dkG;
       c3dkG: // global
           R1 = _s3aOK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dkI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aOK::P64;
           _s3aOh::P64 = P64[_s3aOK::P64 + 16];
           _s3aOi::P64 = P64[_s3aOK::P64 + 24];
           _s3aOj::P64 = P64[_s3aOK::P64 + 32];
           _s3aOm::P64 = P64[_s3aOK::P64 + 40];
           I64[Hp - 24] = sat_s3aOJ_info;
           P64[Hp - 8] = _s3aOi::P64;
           P64[Hp] = _s3aOm::P64;
           R2 = _s3aOh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s3aOj::P64;
           Sp = Sp - 40;
           call GHC.Float.atan2_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOK_info" {
     sat_s3aOK_info:
         const sat_s3aOK_entry;
         const 4;
         const 15;
 },
 sat_s3aOO_entry() //  [R1]
         { []
         }
     {offset
       c3dl2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dl3; else goto c3dl4;
       c3dl3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dl4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOO_info" {
     sat_s3aOO_info:
         const sat_s3aOO_entry;
         const 2;
         const 18;
 },
 sat_s3aOP_entry() //  [R1]
         { []
         }
     {offset
       c3dl5: // global
           _s3aOP::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3dl6; else goto c3dl7;
       c3dl7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dl9; else goto c3dl8;
       c3dl9: // global
           HpAlloc = 32;
           goto c3dl6;
       c3dl6: // global
           R1 = _s3aOP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dl8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aOP::P64;
           _s3aOh::P64 = P64[_s3aOP::P64 + 16];
           _s3aOi::P64 = P64[_s3aOP::P64 + 24];
           _s3aOj::P64 = P64[_s3aOP::P64 + 32];
           _s3aOm::P64 = P64[_s3aOP::P64 + 40];
           I64[Hp - 24] = sat_s3aOO_info;
           P64[Hp - 8] = _s3aOi::P64;
           P64[Hp] = _s3aOm::P64;
           R2 = _s3aOh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s3aOj::P64;
           Sp = Sp - 40;
           call GHC.Float.atan2_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOP_info" {
     sat_s3aOP_info:
         const sat_s3aOP_entry;
         const 4;
         const 15;
 },
 sat_s3aOS_entry() //  [R1]
         { []
         }
     {offset
       c3dlj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dlk; else goto c3dll;
       c3dlk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dll: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOS_info" {
     sat_s3aOS_info:
         const sat_s3aOS_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aOU_entry() //  [R1]
         { []
         }
     {offset
       c3dlz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dlA; else goto c3dlB;
       c3dlA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dlB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOU_info" {
     sat_s3aOU_info:
         const sat_s3aOU_entry;
         const 2;
         const 18;
 },
 sat_s3aOV_entry() //  [R1]
         { []
         }
     {offset
       c3dlC: // global
           _s3aOV::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3dlD; else goto c3dlE;
       c3dlE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dlG; else goto c3dlF;
       c3dlG: // global
           HpAlloc = 32;
           goto c3dlD;
       c3dlD: // global
           R1 = _s3aOV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dlF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aOV::P64;
           _s3aOh::P64 = P64[_s3aOV::P64 + 16];
           _s3aOi::P64 = P64[_s3aOV::P64 + 24];
           _s3aOj::P64 = P64[_s3aOV::P64 + 32];
           _s3aOm::P64 = P64[_s3aOV::P64 + 40];
           I64[Hp - 24] = sat_s3aOU_info;
           P64[Hp - 8] = _s3aOi::P64;
           P64[Hp] = _s3aOm::P64;
           R2 = _s3aOh::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s3aOj::P64;
           Sp = Sp - 40;
           call GHC.Float.atan2_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOV_info" {
     sat_s3aOV_info:
         const sat_s3aOV_entry;
         const 4;
         const 15;
 },
 sat_s3aOY_entry() //  [R1]
         { []
         }
     {offset
       c3dlQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dlR; else goto c3dlS;
       c3dlR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dlS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aOY_info" {
     sat_s3aOY_info:
         const sat_s3aOY_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aP2_entry() //  [R1]
         { []
         }
     {offset
       c3dm8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3dm9; else goto c3dma;
       c3dm9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dma: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3dm6_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aP2_info" {
     sat_s3aP2_info:
         const sat_s3aP2_entry;
         const 3;
         const 15;
 },
 _c3dm6() //  [R1]
         { []
         }
     {offset
       c3dm6: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dm6_info" {
     block_c3dm6_info:
         const _c3dm6;
         const 2;
         const 30;
 },
 sat_s3aP3_entry() //  [R1]
         { []
         }
     {offset
       c3dme: // global
           _s3aP3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3dmf; else goto c3dmg;
       c3dmg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3dmi; else goto c3dmh;
       c3dmi: // global
           HpAlloc = 40;
           goto c3dmf;
       c3dmf: // global
           R1 = _s3aP3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dmh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aP3::P64;
           _s3aOi::P64 = P64[_s3aP3::P64 + 16];
           _s3aOj::P64 = P64[_s3aP3::P64 + 24];
           _s3aOk::P64 = P64[_s3aP3::P64 + 32];
           _s3aOo::P64 = P64[_s3aP3::P64 + 40];
           I64[Hp - 32] = sat_s3aP2_info;
           P64[Hp - 16] = _s3aOi::P64;
           P64[Hp - 8] = _s3aOj::P64;
           P64[Hp] = _s3aOk::P64;
           R2 = _s3aOo::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           call GHC.Float.atan_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aP3_info" {
     sat_s3aP3_info:
         const sat_s3aP3_entry;
         const 4;
         const 15;
 },
 sat_s3aP0_entry() //  [R1]
         { []
         }
     {offset
       c3dmn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dmo; else goto c3dmp;
       c3dmo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dmp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.pi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aP0_info" {
     sat_s3aP0_info:
         const sat_s3aP0_entry;
         const 1;
         const 16;
 },
 sat_s3aP6_entry() //  [R1]
         { []
         }
     {offset
       c3dmz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dmA; else goto c3dmB;
       c3dmA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dmB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aP6_info" {
     sat_s3aP6_info:
         const sat_s3aP6_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+416;
 },
 sat_s3aPa_entry() //  [R1]
         { []
         }
     {offset
       c3dmL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dmM; else goto c3dmN;
       c3dmM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dmN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPa_info" {
     sat_s3aPa_info:
         const sat_s3aPa_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+552;
 },
 sat_s3aP9_entry() //  [R1]
         { []
         }
     {offset
       c3dmS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dmT; else goto c3dmU;
       c3dmT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dmU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.pi_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aP9_info" {
     sat_s3aP9_info:
         const sat_s3aP9_entry;
         const 1;
         const 16;
 },
 sat_s3aPc_entry() //  [R1]
         { []
         }
     {offset
       c3dn3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3dn4; else goto c3dn5;
       c3dn4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dn5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3dn1_info;
           R2 = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPc_info" {
     sat_s3aPc_info:
         const sat_s3aPc_entry;
         const 3;
         const 15;
 },
 _c3dn1() //  [R1]
         { []
         }
     {offset
       c3dn1: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dn1_info" {
     block_c3dn1_info:
         const _c3dn1;
         const 2;
         const 30;
 },
 GHC.Float.$dmatan2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3dn9: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3dna; else goto c3dnb;
       c3dna: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$dmatan2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dnb: // global
           I64[Sp - 32] = block_c3di7_info;
           _s3aOh::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s3aOh::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmatan2_info" {
     GHC.Float.$dmatan2_info:
         const GHC.Float.$dmatan2_entry;
         const 0;
         const 1688854155231246;
         const 12884901911;
         const S3bQP_srt+416;
 },
 _c3di7() //  [R1]
         { []
         }
     {offset
       c3di7: // global
           I64[Sp - 8] = block_c3dib_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3di7_info" {
     block_c3di7_info:
         const _c3di7;
         const 3;
         const 562954248388638;
         const S3bQP_srt+416;
 },
 _c3dib() //  [R1]
         { []
         }
     {offset
       c3dib: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dnf; else goto c3dne;
       c3dnf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dne: // global
           I64[Hp - 16] = $dNum_s3aOm_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c3dim_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dib_info" {
     block_c3dib_info:
         const _c3dib;
         const 4;
         const 562954248388638;
         const S3bQP_srt+416;
 },
 _c3dim() //  [R1]
         { []
         }
     {offset
       c3dim: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3dni; else goto c3dnh;
       c3dni: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dnh: // global
           I64[Hp - 40] = $dFloating_s3aOo_info;
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = sat_s3aOp_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c3diE_info;
           R2 = R1;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[Sp + 40];
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 40;
           Sp = Sp - 40;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dim_info" {
     block_c3dim_info:
         const _c3dim;
         const 5;
         const 562954248388638;
         const S3bQP_srt+416;
 },
 _c3diE() //  [R1]
         { []
         }
     {offset
       c3diE: // global
           if (R1 & 7 == 1) goto c3dnl; else goto c3dpL;
       c3dnl: // global
           I64[Sp] = block_c3diI_info;
           R2 = P64[Sp + 8];
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c3dpL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3dpO; else goto c3dpN;
       c3dpO: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dpN: // global
           I64[Hp - 32] = sat_s3aPc_info;
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 32];
           R2 = P64[Sp + 16];
           I64[Sp + 48] = stg_ap_p_info;
           P64[Sp + 56] = Hp - 32;
           Sp = Sp + 48;
           call GHC.Float.atan_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3diE_info" {
     block_c3diE_info:
         const _c3diE;
         const 7;
         const 562954248388638;
         const S3bQP_srt+416;
 },
 _c3diI() //  [R1]
         { []
         }
     {offset
       c3diI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dno; else goto c3dnn;
       c3dno: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dnn: // global
           I64[Hp - 16] = sat_s3aP4_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 8] = block_c3dmq_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 56];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3diI_info" {
     block_c3diI_info:
         const _c3diI;
         const 7;
         const 562954248388638;
         const S3bQP_srt+416;
 },
 _c3dmq() //  [R1]
         { []
         }
     {offset
       c3dmq: // global
           if (R1 & 7 == 1) goto u3dql; else goto c3dpu;
       u3dql: // global
           call _c3diW() args: 0, res: 0, upd: 0;
       c3dpu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dpx; else goto c3dpw;
       c3dpx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dpw: // global
           I64[Hp - 16] = sat_s3aP6_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3dmC_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dmq_info" {
     block_c3dmq_info:
         const _c3dmq;
         const 8;
         const 562954248388638;
         const S3bQP_srt+416;
 },
 _c3dmC() //  [R1]
         { []
         }
     {offset
       c3dmC: // global
           if (R1 & 7 == 1) goto u3dqm; else goto c3dpD;
       u3dqm: // global
           call _c3diW() args: 0, res: 0, upd: 0;
       c3dpD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3dpG; else goto c3dpF;
       c3dpG: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dpF: // global
           I64[Hp - 40] = sat_s3aPa_info;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = sat_s3aP9_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 48] = block_c3dpC_info;
           R2 = P64[Sp + 40];
           P64[Sp + 56] = Hp - 16;
           P64[Sp + 64] = Hp - 40;
           Sp = Sp + 48;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dmC_info" {
     block_c3dmC_info:
         const _c3dmC;
         const 8;
         const 562954248388638;
         const S3bQP_srt+416;
 },
 _c3diW() //  []
         { []
         }
     {offset
       c3diW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dnr; else goto c3dnq;
       c3dnr: // global
           HpAlloc = 24;
           I64[Sp] = block_c3diW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3dnq: // global
           I64[Hp - 16] = sat_s3aOW_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3dlH_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3diW_info" {
     block_c3diW_info:
         const _c3diW;
         const 8;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dlH() //  [R1]
         { []
         }
     {offset
       c3dlH: // global
           if (R1 & 7 == 1) goto u3dqj; else goto c3dpe;
       u3dqj: // global
           call _c3dj8() args: 0, res: 0, upd: 0;
       c3dpe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dph; else goto c3dpg;
       c3dph: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dpg: // global
           I64[Hp - 16] = sat_s3aOY_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3dlT_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dlH_info" {
     block_c3dlH_info:
         const _c3dlH;
         const 8;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dlT() //  [R1]
         { []
         }
     {offset
       c3dlT: // global
           if (R1 & 7 == 1) goto u3dqk; else goto c3dpm;
       u3dqk: // global
           call _c3dj8() args: 0, res: 0, upd: 0;
       c3dpm: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3dpp; else goto c3dpo;
       c3dpp: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dpo: // global
           I64[Hp - 64] = sat_s3aP3_info;
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 40];
           _c3diq::P64 = P64[Sp + 24];
           P64[Hp - 24] = _c3diq::P64;
           I64[Hp - 16] = sat_s3aP0_info;
           P64[Hp] = _c3diq::P64;
           R2 = P64[Sp + 32];
           I64[Sp + 48] = stg_ap_pp_info;
           P64[Sp + 56] = Hp - 16;
           P64[Sp + 64] = Hp - 64;
           Sp = Sp + 48;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dlT_info" {
     block_c3dlT_info:
         const _c3dlT;
         const 8;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dj8() //  []
         { []
         }
     {offset
       c3dj8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dnu; else goto c3dnt;
       c3dnu: // global
           HpAlloc = 24;
           I64[Sp] = block_c3dj8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3dnt: // global
           I64[Hp - 16] = sat_s3aOQ_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3dla_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dj8_info" {
     block_c3dj8_info:
         const _c3dj8;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dla() //  [R1]
         { []
         }
     {offset
       c3dla: // global
           if (R1 & 7 == 1) goto u3dqh; else goto c3doY;
       u3dqh: // global
           call _c3djk() args: 0, res: 0, upd: 0;
       c3doY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dp1; else goto c3dp0;
       c3dp1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dp0: // global
           I64[Hp - 16] = sat_s3aOS_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3dlm_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dla_info" {
     block_c3dla_info:
         const _c3dla;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dlm() //  [R1]
         { []
         }
     {offset
       c3dlm: // global
           if (R1 & 7 == 1) goto u3dqi; else goto c3dp6;
       u3dqi: // global
           call _c3djk() args: 0, res: 0, upd: 0;
       c3dp6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3dp9; else goto c3dp8;
       c3dp9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dp8: // global
           I64[Hp - 40] = sat_s3aOV_info;
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           _c3dif::P64 = P64[Sp + 32];
           P64[Hp] = _c3dif::P64;
           R2 = _c3dif::P64;
           I64[Sp + 56] = stg_ap_p_info;
           P64[Sp + 64] = Hp - 40;
           Sp = Sp + 56;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dlm_info" {
     block_c3dlm_info:
         const _c3dlm;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3djk() //  []
         { []
         }
     {offset
       c3djk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dnx; else goto c3dnw;
       c3dnx: // global
           HpAlloc = 24;
           I64[Sp] = block_c3djk_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3dnw: // global
           I64[Hp - 16] = sat_s3aOL_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3dkK_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3djk_info" {
     block_c3djk_info:
         const _c3djk;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dkK() //  [R1]
         { []
         }
     {offset
       c3dkK: // global
           if (R1 & 7 == 1) goto u3dq5; else goto c3doL;
       u3dq5: // global
           Sp = Sp + 8;
           call _s3aOv() args: 0, res: 0, upd: 0;
       c3doL: // global
           I64[Sp] = block_c3dkP_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 56];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dkK_info" {
     block_c3dkK_info:
         const _c3dkK;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dkP() //  [R1]
         { []
         }
     {offset
       c3dkP: // global
           if (R1 & 7 == 1) goto u3dq6; else goto c3doQ;
       u3dq6: // global
           Sp = Sp + 8;
           call _s3aOv() args: 0, res: 0, upd: 0;
       c3doQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3doT; else goto c3doS;
       c3doT: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3doS: // global
           I64[Hp - 40] = sat_s3aOP_info;
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           _c3dif::P64 = P64[Sp + 32];
           P64[Hp] = _c3dif::P64;
           R2 = _c3dif::P64;
           I64[Sp + 56] = stg_ap_p_info;
           P64[Sp + 64] = Hp - 40;
           Sp = Sp + 56;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dkP_info" {
     block_c3dkP_info:
         const _c3dkP;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _s3aOv() //  []
         { []
         }
     {offset
       s3aOv: // global
           I64[Sp - 8] = block_c3dkk_info;
           R2 = P64[Sp + 40];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 56];
           Sp = Sp - 24;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c3dkk() //  [R1]
         { []
         }
     {offset
       c3dkk: // global
           if (R1 & 7 == 1) goto u3dqd; else goto c3dox;
       u3dqd: // global
           call _c3djB() args: 0, res: 0, upd: 0;
       c3dox: // global
           I64[Sp] = block_c3dkp_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 56];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dkk_info" {
     block_c3dkk_info:
         const _c3dkk;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dkp() //  [R1]
         { []
         }
     {offset
       c3dkp: // global
           if (R1 & 7 == 1) goto u3dqe; else goto c3doC;
       u3dqe: // global
           call _c3djB() args: 0, res: 0, upd: 0;
       c3doC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3doF; else goto c3doE;
       c3doF: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3doE: // global
           I64[Hp - 40] = sat_s3aOK_info;
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           _c3dif::P64 = P64[Sp + 32];
           P64[Hp] = _c3dif::P64;
           R2 = _c3dif::P64;
           I64[Sp + 56] = stg_ap_p_info;
           P64[Sp + 64] = Hp - 40;
           Sp = Sp + 56;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dkp_info" {
     block_c3dkp_info:
         const _c3dkp;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3djB() //  []
         { []
         }
     {offset
       c3djB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dnB; else goto c3dnA;
       c3dnB: // global
           HpAlloc = 24;
           I64[Sp] = block_c3djB_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3dnA: // global
           I64[Hp - 16] = sat_s3aOC_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3dk8_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3djB_info" {
     block_c3djB_info:
         const _c3djB;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dk8() //  [R1]
         { []
         }
     {offset
       c3dk8: // global
           if (R1 & 7 == 1) goto u3dqc; else goto c3do3;
       u3dqc: // global
           call _c3djN() args: 0, res: 0, upd: 0;
       c3do3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3do6; else goto c3do5;
       c3do6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3do5: // global
           I64[Hp - 16] = sat_s3aOE_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3do2_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dk8_info" {
     block_c3dk8_info:
         const _c3dk8;
         const 1032;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3do2() //  [R1]
         { []
         }
     {offset
       c3do2: // global
           if (R1 & 7 == 1) goto c3dod; else goto u3dq7;
       c3dod: // global
           I64[Sp] = block_c3doa_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 64];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
       u3dq7: // global
           Sp = Sp + 24;
           call _c3dor() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3do2_info" {
     block_c3do2_info:
         const _c3do2;
         const 1160;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3doa() //  [R1]
         { []
         }
     {offset
       c3doa: // global
           if (R1 & 7 == 1) goto u3dqp; else goto u3dq8;
       u3dqp: // global
           call _c3djN() args: 0, res: 0, upd: 0;
       u3dq8: // global
           Sp = Sp + 24;
           call _c3dor() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3doa_info" {
     block_c3doa_info:
         const _c3doa;
         const 3208;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3djN() //  []
         { []
         }
     {offset
       c3djN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dnE; else goto c3dnD;
       c3dnE: // global
           HpAlloc = 24;
           I64[Sp] = block_c3djN_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3dnD: // global
           I64[Hp - 16] = sat_s3aOy_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_c3djW_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3djN_info" {
     block_c3djN_info:
         const _c3djN;
         const 3464;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3djW() //  [R1]
         { []
         }
     {offset
       c3djW: // global
           if (R1 & 7 == 1) goto u3dq9; else goto c3dnK;
       u3dq9: // global
           Sp = Sp + 32;
           call _c3dnT() args: 0, res: 0, upd: 0;
       c3dnK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dnN; else goto c3dnM;
       c3dnN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dnM: // global
           I64[Hp - 16] = sat_s3aOA_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 24] = block_c3dnJ_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = P64[Sp + 56];
           P64[Sp + 16] = Hp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3djW_info" {
     block_c3djW_info:
         const _c3djW;
         const 3464;
         const 4294967326;
         const S3bQP_srt+416;
 },
 _c3dnJ() //  [R1]
         { []
         }
     {offset
       c3dnJ: // global
           if (R1 & 7 == 1) goto u3dqa; else goto c3dnX;
       u3dqa: // global
           Sp = Sp + 8;
           call _c3dnT() args: 0, res: 0, upd: 0;
       c3dnX: // global
           R1 = P64[Sp + 32];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dnJ_info" {
     block_c3dnJ_info:
         const _c3dnJ;
         const 389;
         const 30;
 },
 _c3dnT() //  []
         { []
         }
     {offset
       c3dnT: // global
           R2 = P64[Sp];
           I64[Sp + 16] = stg_ap_pp_info;
           _s3aOi::P64 = P64[Sp + 24];
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = _s3aOi::P64;
           Sp = Sp + 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c3dor() //  []
         { []
         }
     {offset
       c3dor: // global
           R2 = P64[Sp];
           Sp = Sp + 48;
           call GHC.Float.pi_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c3dpC() //  [R1]
         { []
         }
     {offset
       c3dpC: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dpC_info" {
     block_c3dpC_info:
         const _c3dpC;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.656960644 UTC

[section ""data" . GHC.Float.$dmlog1mexp_closure" {
     GHC.Float.$dmlog1mexp_closure:
         const GHC.Float.$dmlog1mexp_info;
 },
 sat_s3aPh_entry() //  [R1]
         { []
         }
     {offset
       c3dxS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dxT; else goto c3dxU;
       c3dxT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dxU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.exp_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPh_info" {
     sat_s3aPh_info:
         const sat_s3aPh_entry;
         const 2;
         const 18;
 },
 sat_s3aPi_entry() //  [R1]
         { []
         }
     {offset
       c3dxX: // global
           _s3aPi::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3dy1; else goto c3dy2;
       c3dy2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dy4; else goto c3dy3;
       c3dy4: // global
           HpAlloc = 32;
           goto c3dy1;
       c3dy1: // global
           R1 = _s3aPi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dy3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aPi::P64;
           _s3aPd::P64 = P64[_s3aPi::P64 + 16];
           _s3aPe::P64 = P64[_s3aPi::P64 + 24];
           I64[Hp - 24] = sat_s3aPh_info;
           P64[Hp - 8] = _s3aPd::P64;
           P64[Hp] = _s3aPe::P64;
           I64[Sp - 32] = block_c3dxV_info;
           R2 = _s3aPd::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPi_info" {
     sat_s3aPi_info:
         const sat_s3aPi_entry;
         const 2;
         const 18;
 },
 _c3dxV() //  [R1]
         { []
         }
     {offset
       c3dxV: // global
           I64[Sp] = block_c3dy0_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dxV_info" {
     block_c3dxV_info:
         const _c3dxV;
         const 1;
         const 30;
 },
 _c3dy0() //  [R1]
         { []
         }
     {offset
       c3dy0: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dy0_info" {
     block_c3dy0_info:
         const _c3dy0;
         const 1;
         const 30;
 },
 GHC.Float.$dmlog1mexp_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dya: // global
           _s3aPe::P64 = R3;
           _s3aPd::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3dyb; else goto c3dyc;
       c3dyc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dye; else goto c3dyd;
       c3dye: // global
           HpAlloc = 32;
           goto c3dyb;
       c3dyb: // global
           R3 = _s3aPe::P64;
           R2 = _s3aPd::P64;
           R1 = GHC.Float.$dmlog1mexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dyd: // global
           I64[Hp - 24] = sat_s3aPi_info;
           P64[Hp - 8] = _s3aPd::P64;
           P64[Hp] = _s3aPe::P64;
           R2 = _s3aPd::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmlog1mexp_info" {
     GHC.Float.$dmlog1mexp_info:
         const GHC.Float.$dmlog1mexp_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.668042274 UTC

[section ""data" . GHC.Float.$dmlog1pexp_closure" {
     GHC.Float.$dmlog1pexp_closure:
         const GHC.Float.$dmlog1pexp_info;
 },
 sat_s3aPl_entry() //  [R1]
         { []
         }
     {offset
       c3dyS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dyT; else goto c3dyU;
       c3dyT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dyU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.exp_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPl_info" {
     sat_s3aPl_info:
         const sat_s3aPl_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmlog1pexp_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dyV: // global
           _s3aPk::P64 = R3;
           _s3aPj::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3dyW; else goto c3dyX;
       c3dyX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dyZ; else goto c3dyY;
       c3dyZ: // global
           HpAlloc = 32;
           goto c3dyW;
       c3dyW: // global
           R3 = _s3aPk::P64;
           R2 = _s3aPj::P64;
           R1 = GHC.Float.$dmlog1pexp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dyY: // global
           I64[Hp - 24] = sat_s3aPl_info;
           P64[Hp - 8] = _s3aPj::P64;
           P64[Hp] = _s3aPk::P64;
           R2 = _s3aPj::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Float.log1p_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmlog1pexp_info" {
     GHC.Float.$dmlog1pexp_info:
         const GHC.Float.$dmlog1pexp_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.675760134 UTC

[section ""data" . GHC.Float.$dmexpm1_closure" {
     GHC.Float.$dmexpm1_closure:
         const GHC.Float.$dmexpm1_info;
         const 0;
 },
 sat_s3aPr_entry() //  [R1]
         { []
         }
     {offset
       c3dzv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dzw; else goto c3dzx;
       c3dzw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dzx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPr_info" {
     sat_s3aPr_info:
         const sat_s3aPr_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+312;
 },
 sat_s3aPq_entry() //  [R1]
         { []
         }
     {offset
       c3dzC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dzD; else goto c3dzE;
       c3dzD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dzE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.exp_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPq_info" {
     sat_s3aPq_info:
         const sat_s3aPq_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmexpm1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dzF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3dzG; else goto c3dzH;
       c3dzG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$dmexpm1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dzH: // global
           I64[Sp - 24] = block_c3dzj_info;
           _s3aPm::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3aPm::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmexpm1_info" {
     GHC.Float.$dmexpm1_info:
         const GHC.Float.$dmexpm1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+568;
 },
 _c3dzj() //  [R1]
         { []
         }
     {offset
       c3dzj: // global
           I64[Sp] = block_c3dzn_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dzj_info" {
     block_c3dzj_info:
         const _c3dzj;
         const 2;
         const 4294967326;
         const S3bQP_srt+576;
 },
 _c3dzn() //  [R1]
         { []
         }
     {offset
       c3dzn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3dzL; else goto c3dzK;
       c3dzL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dzK: // global
           I64[Hp - 48] = sat_s3aPr_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_s3aPq_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 48;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dzn_info" {
     block_c3dzn_info:
         const _c3dzn;
         const 2;
         const 4294967326;
         const S3bQP_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.68858499 UTC

[section ""data" . GHC.Float.$dmlog1p_closure" {
     GHC.Float.$dmlog1p_closure:
         const GHC.Float.$dmlog1p_info;
         const 0;
 },
 sat_s3aPw_entry() //  [R1]
         { []
         }
     {offset
       c3dAE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dAF; else goto c3dAG;
       c3dAF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dAG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPw_info" {
     sat_s3aPw_info:
         const sat_s3aPw_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+576;
 },
 sat_s3aPx_entry() //  [R1]
         { []
         }
     {offset
       c3dAH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3dAI; else goto c3dAJ;
       c3dAI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dAJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3dAs_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPx_info" {
     sat_s3aPx_info:
         const sat_s3aPx_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+576;
 },
 _c3dAs() //  [R1]
         { []
         }
     {offset
       c3dAs: // global
           I64[Sp] = block_c3dAw_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dAs_info" {
     block_c3dAs_info:
         const _c3dAs;
         const 1;
         const 4294967326;
         const S3bQP_srt+576;
 },
 _c3dAw() //  [R1]
         { []
         }
     {offset
       c3dAw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dAN; else goto c3dAM;
       c3dAN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3dAM: // global
           I64[Hp - 16] = sat_s3aPw_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dAw_info" {
     block_c3dAw_info:
         const _c3dAw;
         const 1;
         const 4294967326;
         const S3bQP_srt+576;
 },
 GHC.Float.$dmlog1p_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dAO: // global
           _s3aPt::P64 = R3;
           _s3aPs::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3dAP; else goto c3dAQ;
       c3dAQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dAS; else goto c3dAR;
       c3dAS: // global
           HpAlloc = 32;
           goto c3dAP;
       c3dAP: // global
           R3 = _s3aPt::P64;
           R2 = _s3aPs::P64;
           R1 = GHC.Float.$dmlog1p_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dAR: // global
           I64[Hp - 24] = sat_s3aPx_info;
           P64[Hp - 8] = _s3aPs::P64;
           P64[Hp] = _s3aPt::P64;
           R2 = _s3aPs::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Float.log_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmlog1p_info" {
     GHC.Float.$dmlog1p_info:
         const GHC.Float.$dmlog1p_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.700801371 UTC

[section ""data" . GHC.Float.$dmtanh_closure" {
     GHC.Float.$dmtanh_closure:
         const GHC.Float.$dmtanh_info;
 },
 sat_s3aPC_entry() //  [R1]
         { []
         }
     {offset
       c3dBx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dBy; else goto c3dBz;
       c3dBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.cosh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPC_info" {
     sat_s3aPC_info:
         const sat_s3aPC_entry;
         const 2;
         const 18;
 },
 sat_s3aPB_entry() //  [R1]
         { []
         }
     {offset
       c3dBE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dBF; else goto c3dBG;
       c3dBF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dBG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.sinh_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPB_info" {
     sat_s3aPB_info:
         const sat_s3aPB_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmtanh_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dBJ: // global
           _s3aPz::P64 = R3;
           _s3aPy::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c3dBK; else goto c3dBL;
       c3dBL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3dBN; else goto c3dBM;
       c3dBN: // global
           HpAlloc = 64;
           goto c3dBK;
       c3dBK: // global
           R3 = _s3aPz::P64;
           R2 = _s3aPy::P64;
           R1 = GHC.Float.$dmtanh_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dBM: // global
           I64[Hp - 56] = sat_s3aPC_info;
           P64[Hp - 40] = _s3aPy::P64;
           P64[Hp - 32] = _s3aPz::P64;
           I64[Hp - 24] = sat_s3aPB_info;
           P64[Hp - 8] = _s3aPy::P64;
           P64[Hp] = _s3aPz::P64;
           I64[Sp - 24] = block_c3dBH_info;
           R2 = _s3aPy::P64;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmtanh_info" {
     GHC.Float.$dmtanh_info:
         const GHC.Float.$dmtanh_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3dBH() //  [R1]
         { []
         }
     {offset
       c3dBH: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c3dBt::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c3dBt::P64;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dBH_info" {
     block_c3dBH_info:
         const _c3dBH;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.71157557 UTC

[section ""data" . GHC.Float.$dmtan_closure" {
     GHC.Float.$dmtan_closure:
         const GHC.Float.$dmtan_info;
 },
 sat_s3aPH_entry() //  [R1]
         { []
         }
     {offset
       c3dCs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dCt; else goto c3dCu;
       c3dCt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dCu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.cos_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPH_info" {
     sat_s3aPH_info:
         const sat_s3aPH_entry;
         const 2;
         const 18;
 },
 sat_s3aPG_entry() //  [R1]
         { []
         }
     {offset
       c3dCz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dCA; else goto c3dCB;
       c3dCA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dCB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.sin_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPG_info" {
     sat_s3aPG_info:
         const sat_s3aPG_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmtan_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dCE: // global
           _s3aPE::P64 = R3;
           _s3aPD::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c3dCF; else goto c3dCG;
       c3dCG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3dCI; else goto c3dCH;
       c3dCI: // global
           HpAlloc = 64;
           goto c3dCF;
       c3dCF: // global
           R3 = _s3aPE::P64;
           R2 = _s3aPD::P64;
           R1 = GHC.Float.$dmtan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dCH: // global
           I64[Hp - 56] = sat_s3aPH_info;
           P64[Hp - 40] = _s3aPD::P64;
           P64[Hp - 32] = _s3aPE::P64;
           I64[Hp - 24] = sat_s3aPG_info;
           P64[Hp - 8] = _s3aPD::P64;
           P64[Hp] = _s3aPE::P64;
           I64[Sp - 24] = block_c3dCC_info;
           R2 = _s3aPD::P64;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmtan_info" {
     GHC.Float.$dmtan_info:
         const GHC.Float.$dmtan_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3dCC() //  [R1]
         { []
         }
     {offset
       c3dCC: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c3dCo::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c3dCo::P64;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dCC_info" {
     block_c3dCC_info:
         const _c3dCC;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.721961167 UTC

[section ""data" . GHC.Float.$dmlogBase_closure" {
     GHC.Float.$dmlogBase_closure:
         const GHC.Float.$dmlogBase_info;
 },
 sat_s3aPN_entry() //  [R1]
         { []
         }
     {offset
       c3dDn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dDo; else goto c3dDp;
       c3dDo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dDp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.log_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPN_info" {
     sat_s3aPN_info:
         const sat_s3aPN_entry;
         const 2;
         const 18;
 },
 sat_s3aPM_entry() //  [R1]
         { []
         }
     {offset
       c3dDu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dDv; else goto c3dDw;
       c3dDv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dDw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.log_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPM_info" {
     sat_s3aPM_info:
         const sat_s3aPM_entry;
         const 2;
         const 18;
 },
 GHC.Float.$dmlogBase_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3dDz: // global
           _s3aPK::P64 = R4;
           _s3aPJ::P64 = R3;
           _s3aPI::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c3dDA; else goto c3dDB;
       c3dDB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3dDD; else goto c3dDC;
       c3dDD: // global
           HpAlloc = 64;
           goto c3dDA;
       c3dDA: // global
           R4 = _s3aPK::P64;
           R3 = _s3aPJ::P64;
           R2 = _s3aPI::P64;
           R1 = GHC.Float.$dmlogBase_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dDC: // global
           I64[Hp - 56] = sat_s3aPN_info;
           P64[Hp - 40] = _s3aPI::P64;
           P64[Hp - 32] = _s3aPJ::P64;
           I64[Hp - 24] = sat_s3aPM_info;
           P64[Hp - 8] = _s3aPI::P64;
           P64[Hp] = _s3aPK::P64;
           I64[Sp - 24] = block_c3dDx_info;
           R2 = _s3aPI::P64;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmlogBase_info" {
     GHC.Float.$dmlogBase_info:
         const GHC.Float.$dmlogBase_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3dDx() //  [R1]
         { []
         }
     {offset
       c3dDx: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c3dDj::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c3dDj::P64;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dDx_info" {
     block_c3dDx_info:
         const _c3dDx;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.733444011 UTC

[section ""data" . GHC.Float.$dm**_closure" {
     GHC.Float.$dm**_closure:
         const GHC.Float.$dm**_info;
 },
 sat_s3aPT_entry() //  [R1]
         { []
         }
     {offset
       c3dEm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dEn; else goto c3dEo;
       c3dEn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dEo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.log_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPT_info" {
     sat_s3aPT_info:
         const sat_s3aPT_entry;
         const 2;
         const 18;
 },
 sat_s3aPU_entry() //  [R1]
         { []
         }
     {offset
       c3dEr: // global
           _s3aPU::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3dEv; else goto c3dEw;
       c3dEw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dEy; else goto c3dEx;
       c3dEy: // global
           HpAlloc = 32;
           goto c3dEv;
       c3dEv: // global
           R1 = _s3aPU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dEx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3aPU::P64;
           _s3aPO::P64 = P64[_s3aPU::P64 + 16];
           _s3aPP::P64 = P64[_s3aPU::P64 + 24];
           _s3aPQ::P64 = P64[_s3aPU::P64 + 32];
           I64[Hp - 24] = sat_s3aPT_info;
           P64[Hp - 8] = _s3aPO::P64;
           P64[Hp] = _s3aPP::P64;
           I64[Sp - 40] = block_c3dEp_info;
           R2 = _s3aPO::P64;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _s3aPQ::P64;
           Sp = Sp - 40;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPU_info" {
     sat_s3aPU_info:
         const sat_s3aPU_entry;
         const 3;
         const 15;
 },
 _c3dEp() //  [R1]
         { []
         }
     {offset
       c3dEp: // global
           I64[Sp] = block_c3dEu_info;
           R2 = R1;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dEp_info" {
     block_c3dEp_info:
         const _c3dEp;
         const 2;
         const 30;
 },
 _c3dEu() //  [R1]
         { []
         }
     {offset
       c3dEu: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dEu_info" {
     block_c3dEu_info:
         const _c3dEu;
         const 2;
         const 30;
 },
 GHC.Float.$dm**_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3dEE: // global
           _s3aPQ::P64 = R4;
           _s3aPP::P64 = R3;
           _s3aPO::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3dEF; else goto c3dEG;
       c3dEG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3dEI; else goto c3dEH;
       c3dEI: // global
           HpAlloc = 40;
           goto c3dEF;
       c3dEF: // global
           R4 = _s3aPQ::P64;
           R3 = _s3aPP::P64;
           R2 = _s3aPO::P64;
           R1 = GHC.Float.$dm**_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dEH: // global
           I64[Hp - 32] = sat_s3aPU_info;
           P64[Hp - 16] = _s3aPO::P64;
           P64[Hp - 8] = _s3aPP::P64;
           P64[Hp] = _s3aPQ::P64;
           R2 = _s3aPO::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Float.exp_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dm**_info" {
     GHC.Float.$dm**_info:
         const GHC.Float.$dm**_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.747059941 UTC

[section ""data" . lvl1_r2Upz_closure" {
     lvl1_r2Upz_closure:
         const GHC.Real.:%_con_info;
         const GHC.Float.$fRealDouble1_closure;
         const GHC.Float.$fRealFloatDouble5_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.751065903 UTC

[section ""data" . GHC.Float.$dmsqrt_closure" {
     GHC.Float.$dmsqrt_closure:
         const GHC.Float.$dmsqrt_info;
         const 0;
 },
 sat_s3aPY_entry() //  [R1]
         { []
         }
     {offset
       c3dFp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3dFq; else goto c3dFr;
       c3dFq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dFr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3dFn_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Float.$p1Floating_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aPY_info" {
     sat_s3aPY_info:
         const sat_s3aPY_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+592;
 },
 _c3dFn() //  [R1]
         { []
         }
     {offset
       c3dFn: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = lvl1_r2Upz_closure+1;
           Sp = Sp - 8;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dFn_info" {
     block_c3dFn_info:
         const _c3dFn;
         const 0;
         const 4294967326;
         const S3bQP_srt+592;
 },
 GHC.Float.$dmsqrt_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dFv: // global
           _s3aPW::P64 = R3;
           _s3aPV::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c3dFw; else goto c3dFx;
       c3dFx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dFz; else goto c3dFy;
       c3dFz: // global
           HpAlloc = 24;
           goto c3dFw;
       c3dFw: // global
           R3 = _s3aPW::P64;
           R2 = _s3aPV::P64;
           R1 = GHC.Float.$dmsqrt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dFy: // global
           I64[Hp - 16] = sat_s3aPY_info;
           P64[Hp] = _s3aPV::P64;
           R2 = _s3aPV::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3aPW::P64;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Float.**_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmsqrt_info" {
     GHC.Float.$dmsqrt_info:
         const GHC.Float.$dmsqrt_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.759770057 UTC

[section ""data" . GHC.Float.roundTo2_closure" {
     GHC.Float.roundTo2_closure:
         const GHC.Float.roundTo2_info;
 },
 GHC.Float.roundTo2_entry() //  [R2]
         { []
         }
     {offset
       c3dG0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dG1; else goto c3dG2;
       c3dG1: // global
           R2 = R2;
           R1 = GHC.Float.roundTo2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dG2: // global
           I64[Sp - 8] = block_c3dFX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dGa; else goto c3dFY;
       u3dGa: // global
           call _c3dFX(R1) args: 0, res: 0, upd: 0;
       c3dFY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.roundTo2_info" {
     GHC.Float.roundTo2_info:
         const GHC.Float.roundTo2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dFX() //  [R1]
         { []
         }
     {offset
       c3dFX: // global
           if (I64[R1 + 7] == 0) goto c3dG9; else goto c3dG8;
       c3dG9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3dG8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dFX_info" {
     block_c3dFX_info:
         const _c3dFX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.765486226 UTC

[section ""cstring" . lvl2_r2UpA_bytes" {
     lvl2_r2UpA_bytes:
         I8[] [114,111,117,110,100,84,111,58,32,98,97,100,32,86,97,108,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.772074886 UTC

[section ""data" . GHC.Float.roundTo1_closure" {
     GHC.Float.roundTo1_closure:
         const GHC.Float.roundTo1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.roundTo1_entry() //  [R1]
         { []
         }
     {offset
       c3dGy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3dGz; else goto c3dGA;
       c3dGz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dGA: // global
           (_c3dGt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3dGt::I64 == 0) goto c3dGv; else goto c3dGu;
       c3dGv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3dGu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3dGt::I64;
           I64[Sp - 24] = block_c3dGw_info;
           R2 = lvl2_r2UpA_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.roundTo1_info" {
     GHC.Float.roundTo1_info:
         const GHC.Float.roundTo1_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+608;
 },
 _c3dGw() //  [R1]
         { []
         }
     {offset
       c3dGw: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dGw_info" {
     block_c3dGw_info:
         const _c3dGw;
         const 0;
         const 4294967326;
         const S3bQP_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.783399692 UTC

[section ""data" . lvl3_r2UpB_closure" {
     lvl3_r2UpB_closure:
         const :_con_info;
         const GHC.Float.minExpt_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.788198401 UTC

[section ""data" . GHC.Float.$wxs_closure" {
     GHC.Float.$wxs_closure:
         const GHC.Float.$wxs_info;
 },
 sat_s3aQ7_entry() //  [R1]
         { []
         }
     {offset
       c3dH3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dH4; else goto c3dH5;
       c3dH4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dH5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call GHC.Float.$wxs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aQ7_info" {
     sat_s3aQ7_info:
         const sat_s3aQ7_entry;
         const 4294967296;
         const 17;
 },
 GHC.Float.$wxs_entry() //  [R2]
         { []
         }
     {offset
       c3dH9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3dHd; else goto c3dHc;
       c3dHd: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Float.$wxs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dHc: // global
           if (R2 == 1) goto c3dH8; else goto c3dH7;
       c3dH8: // global
           Hp = Hp - 48;
           R1 = lvl3_r2UpB_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3dH7: // global
           I64[Hp - 40] = sat_s3aQ7_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wxs_info" {
     GHC.Float.$wxs_info:
         const GHC.Float.$wxs_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.806054199 UTC

[section ""data" . GHC.Float.$wroundTo_closure" {
     GHC.Float.$wroundTo_closure:
         const GHC.Float.$wroundTo_info;
         const 0;
 },
 b2_s3aQb_entry() //  [R1]
         { []
         }
     {offset
       c3dHG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3dHN; else goto c3dHO;
       c3dHN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dHO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3dHD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3dHS; else goto c3dHE;
       u3dHS: // global
           call _c3dHD(R1) args: 0, res: 0, upd: 0;
       c3dHE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . b2_s3aQb_info" {
     b2_s3aQb_info:
         const b2_s3aQb_entry;
         const 1;
         const 16;
 },
 _c3dHD() //  [R1]
         { []
         }
     {offset
       c3dHD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dHR; else goto c3dHQ;
       c3dHR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3dHQ: // global
           _s3aQd::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Shr_W64(_s3aQd::I64 + (_s3aQd::I64 >> 63), 1);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dHD_info" {
     block_c3dHD_info:
         const _c3dHD;
         const 0;
         const 30;
 },
 sat_s3aQn_entry() //  [R1]
         { []
         }
     {offset
       c3dIa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3dIb; else goto c3dIc;
       c3dIb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dIc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3dI7_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3dIl; else goto c3dI8;
       u3dIl: // global
           call _c3dI7(R1) args: 0, res: 0, upd: 0;
       c3dI8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aQn_info" {
     sat_s3aQn_info:
         const sat_s3aQn_entry;
         const 1;
         const 16;
 },
 _c3dI7() //  [R1]
         { []
         }
     {offset
       c3dI7: // global
           _s3aQl::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _s3aQl::I64)) goto c3dIj; else goto c3dIk;
       c3dIj: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3dIk: // global
           R2 = _s3aQl::I64;
           Sp = Sp + 8;
           call GHC.Float.$wxs_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3dI7_info" {
     block_c3dI7_info:
         const _c3dI7;
         const 0;
         const 30;
 },
 sat_s3aQv_entry() //  [R1]
         { []
         }
     {offset
       c3dIz: // global
           R2 = P64[R1 + 16];
           call GHC.Float.$seven_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3aQv_info" {
     sat_s3aQv_info:
         const sat_s3aQv_entry;
         const 1;
         const 16;
 },
 sat_s3aQQ_entry() //  [R1]
         { []
         }
     {offset
       c3dIZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dJ0; else goto c3dJ1;
       c3dJ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dJ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (%MO_S_Lt_W64(I64[R1 + 16],
                            I64[R1 + 24])) goto c3dIX; else goto c3dIY;
       c3dIX: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3dIY: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aQQ_info" {
     sat_s3aQQ_info:
         const sat_s3aQQ_entry;
         const 8589934592;
         const 20;
 },
 sat_s3aQT_entry() //  [R1]
         { []
         }
     {offset
       c3dJh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dJi; else goto c3dJj;
       c3dJi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dJj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (%MO_S_Lt_W64(I64[R1 + 16],
                            I64[R1 + 24])) goto c3dJf; else goto c3dJg;
       c3dJf: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3dJg: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aQT_info" {
     sat_s3aQT_info:
         const sat_s3aQT_entry;
         const 8589934592;
         const 20;
 },
 sat_s3aQW_entry() //  [R1]
         { []
         }
     {offset
       c3dJz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dJA; else goto c3dJB;
       c3dJA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3dJB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (%MO_S_Lt_W64(I64[R1 + 16],
                            I64[R1 + 24])) goto c3dJx; else goto c3dJy;
       c3dJx: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3dJy: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aQW_info" {
     sat_s3aQW_info:
         const sat_s3aQW_entry;
         const 8589934592;
         const 20;
 },
 $wf1_s3aQf_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3dJG: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3dJH; else goto c3dJI;
       c3dJH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dJI: // global
           I64[Sp - 48] = block_c3dHY_info;
           _s3aQf::P64 = R1;
           _s3aQ8::P64 = P64[R1 + 5];
           _s3aQb::P64 = P64[R1 + 13];
           R1 = R4;
           P64[Sp - 40] = _s3aQ8::P64;
           P64[Sp - 32] = _s3aQb::P64;
           P64[Sp - 24] = _s3aQf::P64;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3dL0; else goto c3dHZ;
       u3dL0: // global
           call _c3dHY(R1) args: 0, res: 0, upd: 0;
       c3dHZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wf1_s3aQf_info" {
     $wf1_s3aQf_info:
         const $wf1_s3aQf_entry;
         const 2;
         const 11;
         const 12884901911;
 },
 _c3dHY() //  [R1]
         { []
         }
     {offset
       c3dHY: // global
           _s3aQg::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c3dJD; else goto c3dJE;
       c3dJD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dJL; else goto c3dJK;
       c3dJL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dJK: // global
           I64[Hp - 16] = sat_s3aQn_info;
           P64[Hp] = _s3aQg::P64;
           R2 = Hp - 16;
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3dJE: // global
           I64[Sp - 8] = block_c3dIo_info;
           _s3aQo::P64 = P64[R1 + 6];
           _s3aQp::P64 = P64[R1 + 14];
           R1 = _s3aQg::P64;
           P64[Sp] = _s3aQp::P64;
           P64[Sp + 32] = _s3aQo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dKW; else goto c3dIp;
       u3dKW: // global
           call _c3dIo(R1) args: 0, res: 0, upd: 0;
       c3dIp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dHY_info" {
     block_c3dHY_info:
         const _c3dHY;
         const 5;
         const 30;
 },
 _c3dIo() //  [R1]
         { []
         }
     {offset
       c3dIo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3dJP; else goto c3dJO;
       c3dJP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dJO: // global
           _s3aQo::P64 = P64[Sp + 40];
           _s3aQs::I64 = I64[R1 + 7];
           if (_s3aQs::I64 != 0) goto c3dK8; else goto c3dKw;
       c3dK8: // global
           I64[Hp - 32] = sat_s3aQv_info;
           P64[Hp - 16] = _s3aQo::P64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aQs::I64 - 1;
           _s3aQp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3dJU_info;
           R4 = _s3aQp::P64;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = P64[Sp + 32];
           Sp = Sp + 8;
           call $wf1_s3aQf_entry(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       c3dKw: // global
           Hp = Hp - 40;
           I64[Sp] = block_c3dID_info;
           R1 = _s3aQo::P64;
           if (R1 & 7 != 0) goto u3dKX; else goto c3dIE;
       u3dKX: // global
           call _c3dID(R1) args: 0, res: 0, upd: 0;
       c3dIE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dIo_info" {
     block_c3dIo_info:
         const _c3dIo;
         const 6;
         const 30;
 },
 _c3dJU() //  [R1, R2]
         { []
         }
     {offset
       c3dJU: // global
           I64[Sp] = block_c3dJW_info;
           R1 = R1;
           P64[Sp + 40] = R2;
           if (R1 & 7 != 0) goto u3dL1; else goto c3dJX;
       u3dL1: // global
           call _c3dJW(R1) args: 0, res: 0, upd: 0;
       c3dJX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dJU_info" {
     block_c3dJU_info:
         const _c3dJU;
         const 1413;
         const 30;
 },
 _c3dJW() //  [R1]
         { []
         }
     {offset
       c3dJW: // global
           I64[Sp] = block_c3dK1_info;
           _s3aQA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3aQA::I64;
           if (R1 & 7 != 0) goto u3dL2; else goto c3dK2;
       u3dL2: // global
           call _c3dK1(R1) args: 0, res: 0, upd: 0;
       c3dK2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dJW_info" {
     block_c3dJW_info:
         const _c3dJW;
         const 389;
         const 30;
 },
 _c3dK1() //  [R1]
         { []
         }
     {offset
       c3dK1: // global
           I64[Sp + 16] = block_c3dK6_info;
           _s3aQC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 24] = _s3aQC::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u3dL3; else goto c3dKc;
       u3dL3: // global
           call _c3dK6(R1) args: 0, res: 0, upd: 0;
       c3dKc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dK1_info" {
     block_c3dK1_info:
         const _c3dK1;
         const 901;
         const 30;
 },
 _c3dK6() //  [R1]
         { []
         }
     {offset
       c3dK6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3dKi; else goto c3dKh;
       c3dKi: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dKh: // global
           _s3aQy::P64 = P64[Sp + 24];
           _s3aQF::I64 = I64[Sp + 16] + I64[Sp + 8];
           if (_s3aQF::I64 == I64[R1 + 7]) goto c3dKv; else goto c3dKs;
       c3dKv: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = _s3aQy::P64;
           _c3dKu::P64 = Hp - 30;
           Hp = Hp - 16;
           R2 = _c3dKu::P64;
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3dKs: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s3aQF::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s3aQy::P64;
           R2 = Hp - 14;
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dK6_info" {
     block_c3dK6_info:
         const _c3dK6;
         const 195;
         const 30;
 },
 _c3dID() //  [R1]
         { []
         }
     {offset
       c3dID: // global
           I64[Sp] = block_c3dII_info;
           _s3aQL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 40] = _s3aQL::I64;
           if (R1 & 7 != 0) goto u3dKY; else goto c3dIJ;
       u3dKY: // global
           call _c3dII(R1) args: 0, res: 0, upd: 0;
       c3dIJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dID_info" {
     block_c3dID_info:
         const _c3dID;
         const 1670;
         const 30;
 },
 _c3dII() //  [R1]
         { []
         }
     {offset
       c3dII: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dKA; else goto c3dKz;
       c3dKA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dKz: // global
           _s3aQL::I64 = I64[Sp + 40];
           _s3aQN::I64 = I64[R1 + 7];
           if (_s3aQL::I64 == _s3aQN::I64) goto c3dKD; else goto c3dKC;
       c3dKD: // global
           Hp = Hp - 32;
           I64[Sp] = block_c3dJ3_info;
           R1 = P64[Sp + 48];
           I64[Sp + 48] = _s3aQN::I64;
           if (R1 & 7 != 0) goto u3dKZ; else goto c3dJ4;
       u3dKZ: // global
           call _c3dJ3(R1) args: 0, res: 0, upd: 0;
       c3dJ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3dKC: // global
           I64[Hp - 24] = sat_s3aQQ_info;
           I64[Hp - 8] = _s3aQL::I64;
           I64[Hp] = _s3aQN::I64;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dII_info" {
     block_c3dII_info:
         const _c3dII;
         const 1926;
         const 30;
 },
 _c3dJ3() //  [R1]
         { []
         }
     {offset
       c3dJ3: // global
           if (R1 & 7 == 1) goto c3dKF; else goto c3dKK;
       c3dKF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dKI; else goto c3dKH;
       c3dKI: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dKH: // global
           I64[Hp - 24] = sat_s3aQT_info;
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 48];
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3dKK: // global
           I64[Sp + 32] = block_c3dJm_info;
           R3 = P64[Sp + 8];
           R2 = GHC.Float.roundTo2_closure+1;
           Sp = Sp + 32;
           call GHC.List.all_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dJ3_info" {
     block_c3dJ3_info:
         const _c3dJ3;
         const 3974;
         const 30;
 },
 _c3dJm() //  [R1]
         { []
         }
     {offset
       c3dJm: // global
           if (R1 & 7 == 1) goto c3dKM; else goto c3dKT;
       c3dKM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3dKP; else goto c3dKO;
       c3dKP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dKO: // global
           I64[Hp - 24] = sat_s3aQW_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3dKT: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dJm_info" {
     block_c3dJm_info:
         const _c3dJm;
         const 194;
         const 30;
 },
 GHC.Float.$wroundTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3dL9: // global
           _s3aQa::P64 = R4;
           _s3aQ9::P64 = R3;
           _s3aQ8::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c3dLa; else goto c3dLb;
       c3dLb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3dLd; else goto c3dLc;
       c3dLd: // global
           HpAlloc = 48;
           goto c3dLa;
       c3dLa: // global
           R4 = _s3aQa::P64;
           R3 = _s3aQ9::P64;
           R2 = _s3aQ8::P64;
           R1 = GHC.Float.$wroundTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dLc: // global
           I64[Hp - 40] = b2_s3aQb_info;
           P64[Hp - 24] = _s3aQ8::P64;
           I64[Hp - 16] = $wf1_s3aQf_info;
           P64[Hp - 8] = _s3aQ8::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c3dL4_info;
           R4 = _s3aQa::P64;
           R3 = GHC.Types.True_closure+2;
           R2 = _s3aQ9::P64;
           R1 = Hp - 13;
           Sp = Sp - 8;
           call $wf1_s3aQf_entry(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wroundTo_info" {
     GHC.Float.$wroundTo_info:
         const GHC.Float.$wroundTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3bQP_srt+616;
 },
 _c3dL4() //  [R1, R2]
         { []
         }
     {offset
       c3dL4: // global
           I64[Sp - 16] = block_c3dL6_info;
           _s3aQY::P64 = R1;
           R1 = R1;
           P64[Sp - 8] = R2;
           P64[Sp] = _s3aQY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dLu; else goto c3dL7;
       u3dLu: // global
           call _c3dL6(R1) args: 0, res: 0, upd: 0;
       c3dL7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dL4_info" {
     block_c3dL4_info:
         const _c3dL4;
         const 0;
         const 4294967326;
         const S3bQP_srt+624;
 },
 _c3dL6() //  [R1]
         { []
         }
     {offset
       c3dL6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dLj; else goto c3dLi;
       c3dLj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dLi: // global
           _s3aQZ::P64 = P64[Sp + 8];
           _s3aR2::I64 = I64[R1 + 7];
           if (_s3aR2::I64 != 0) goto u3dLt; else goto c3dLn;
       u3dLt: // global
           if (_s3aR2::I64 != 1) goto c3dLm; else goto c3dLs;
       c3dLm: // global
           Hp = Hp - 24;
           R1 = GHC.Float.roundTo1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3dLs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fRealFracFloat2_closure+1;
           P64[Hp] = _s3aQZ::P64;
           R2 = Hp - 14;
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3dLn: // global
           Hp = Hp - 24;
           R2 = _s3aQZ::P64;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dL6_info" {
     block_c3dL6_info:
         const _c3dL6;
         const 2;
         const 4294967326;
         const S3bQP_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.849350272 UTC

[section ""data" . GHC.Float.roundTo_closure" {
     GHC.Float.roundTo_closure:
         const GHC.Float.roundTo_info;
         const 0;
 },
 GHC.Float.roundTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3dOf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dOg; else goto c3dOh;
       c3dOg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.roundTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dOh: // global
           I64[Sp - 8] = block_c3dOc_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Float.$wroundTo_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.roundTo_info" {
     GHC.Float.roundTo_info:
         const GHC.Float.roundTo_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3bQP_srt+616;
 },
 _c3dOc() //  [R1, R2]
         { []
         }
     {offset
       c3dOc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3dOk; else goto c3dOj;
       c3dOk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3dOj: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dOc_info" {
     block_c3dOc_info:
         const _c3dOc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.854392788 UTC

[section ""data" . GHC.Float.maxExpt_closure" {
     GHC.Float.maxExpt_closure:
         const GHC.Types.I#_con_info;
         const 1100;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.856083477 UTC

[section ""data" . GHC.Float.maxExpt10_closure" {
     GHC.Float.maxExpt10_closure:
         const GHC.Types.I#_con_info;
         const 324;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.858916713 UTC

[section ""data" . GHC.Float.gtFloat_closure" {
     GHC.Float.gtFloat_closure:
         const GHC.Float.gtFloat_info;
 },
 GHC.Float.gtFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dOF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dOJ; else goto c3dOK;
       c3dOJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.gtFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dOK: // global
           I64[Sp - 16] = block_c3dOC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dOT; else goto c3dOD;
       u3dOT: // global
           call _c3dOC(R1) args: 0, res: 0, upd: 0;
       c3dOD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.gtFloat_info" {
     GHC.Float.gtFloat_info:
         const GHC.Float.gtFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3dOC() //  [R1]
         { []
         }
     {offset
       c3dOC: // global
           I64[Sp] = block_c3dOI_info;
           _s3aRe::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aRe::F32;
           if (R1 & 7 != 0) goto u3dOS; else goto c3dOM;
       u3dOS: // global
           call _c3dOI(R1) args: 0, res: 0, upd: 0;
       c3dOM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dOC_info" {
     block_c3dOC_info:
         const _c3dOC;
         const 1;
         const 30;
 },
 _c3dOI() //  [R1]
         { []
         }
     {offset
       c3dOI: // global
           R1 = I64[(%MO_F_Gt_W32(F32[Sp + 8],
                                  F32[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dOI_info" {
     block_c3dOI_info:
         const _c3dOI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.867797549 UTC

[section ""data" . GHC.Float.geFloat_closure" {
     GHC.Float.geFloat_closure:
         const GHC.Float.geFloat_info;
 },
 GHC.Float.geFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dPm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dPq; else goto c3dPr;
       c3dPq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.geFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dPr: // global
           I64[Sp - 16] = block_c3dPj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dPA; else goto c3dPk;
       u3dPA: // global
           call _c3dPj(R1) args: 0, res: 0, upd: 0;
       c3dPk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.geFloat_info" {
     GHC.Float.geFloat_info:
         const GHC.Float.geFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3dPj() //  [R1]
         { []
         }
     {offset
       c3dPj: // global
           I64[Sp] = block_c3dPp_info;
           _s3aRl::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aRl::F32;
           if (R1 & 7 != 0) goto u3dPz; else goto c3dPt;
       u3dPz: // global
           call _c3dPp(R1) args: 0, res: 0, upd: 0;
       c3dPt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dPj_info" {
     block_c3dPj_info:
         const _c3dPj;
         const 1;
         const 30;
 },
 _c3dPp() //  [R1]
         { []
         }
     {offset
       c3dPp: // global
           R1 = I64[(%MO_F_Ge_W32(F32[Sp + 8],
                                  F32[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dPp_info" {
     block_c3dPp_info:
         const _c3dPp;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.875948197 UTC

[section ""data" . GHC.Float.ltFloat_closure" {
     GHC.Float.ltFloat_closure:
         const GHC.Float.ltFloat_info;
 },
 GHC.Float.ltFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dQ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dQ7; else goto c3dQ8;
       c3dQ7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.ltFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dQ8: // global
           I64[Sp - 16] = block_c3dQ0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dQh; else goto c3dQ1;
       u3dQh: // global
           call _c3dQ0(R1) args: 0, res: 0, upd: 0;
       c3dQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ltFloat_info" {
     GHC.Float.ltFloat_info:
         const GHC.Float.ltFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3dQ0() //  [R1]
         { []
         }
     {offset
       c3dQ0: // global
           I64[Sp] = block_c3dQ6_info;
           _s3aRs::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aRs::F32;
           if (R1 & 7 != 0) goto u3dQg; else goto c3dQa;
       u3dQg: // global
           call _c3dQ6(R1) args: 0, res: 0, upd: 0;
       c3dQa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dQ0_info" {
     block_c3dQ0_info:
         const _c3dQ0;
         const 1;
         const 30;
 },
 _c3dQ6() //  [R1]
         { []
         }
     {offset
       c3dQ6: // global
           R1 = I64[(%MO_F_Lt_W32(F32[Sp + 8],
                                  F32[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dQ6_info" {
     block_c3dQ6_info:
         const _c3dQ6;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.883575128 UTC

[section ""data" . GHC.Float.leFloat_closure" {
     GHC.Float.leFloat_closure:
         const GHC.Float.leFloat_info;
 },
 GHC.Float.leFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dQK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dQO; else goto c3dQP;
       c3dQO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.leFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dQP: // global
           I64[Sp - 16] = block_c3dQH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dQY; else goto c3dQI;
       u3dQY: // global
           call _c3dQH(R1) args: 0, res: 0, upd: 0;
       c3dQI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.leFloat_info" {
     GHC.Float.leFloat_info:
         const GHC.Float.leFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3dQH() //  [R1]
         { []
         }
     {offset
       c3dQH: // global
           I64[Sp] = block_c3dQN_info;
           _s3aRz::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aRz::F32;
           if (R1 & 7 != 0) goto u3dQX; else goto c3dQR;
       u3dQX: // global
           call _c3dQN(R1) args: 0, res: 0, upd: 0;
       c3dQR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dQH_info" {
     block_c3dQH_info:
         const _c3dQH;
         const 1;
         const 30;
 },
 _c3dQN() //  [R1]
         { []
         }
     {offset
       c3dQN: // global
           R1 = I64[(%MO_F_Le_W32(F32[Sp + 8],
                                  F32[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dQN_info" {
     block_c3dQN_info:
         const _c3dQN;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.891026813 UTC

[section ""data" . GHC.Float.expFloat_closure" {
     GHC.Float.expFloat_closure:
         const GHC.Float.expFloat_info;
 },
 GHC.Float.expFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dRr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dRz; else goto c3dRA;
       c3dRz: // global
           R2 = R2;
           R1 = GHC.Float.expFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dRA: // global
           I64[Sp - 8] = block_c3dRo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dRE; else goto c3dRp;
       u3dRE: // global
           call _c3dRo(R1) args: 0, res: 0, upd: 0;
       c3dRp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expFloat_info" {
     GHC.Float.expFloat_info:
         const GHC.Float.expFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dRo() //  [R1]
         { []
         }
     {offset
       c3dRo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dRD; else goto c3dRC;
       c3dRD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dRC: // global
           (_c3dRu::F32) = call MO_F32_Exp(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dRu::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dRo_info" {
     block_c3dRo_info:
         const _c3dRo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.897855568 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$clog1pexp_closure" {
     GHC.Float.$fFloatingFloat_$clog1pexp_closure:
         const GHC.Float.$fFloatingFloat_$clog1pexp_info;
 },
 GHC.Float.$fFloatingFloat_$clog1pexp_entry() //  [R2]
         { []
         }
     {offset
       c3dRY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dRZ; else goto c3dS0;
       c3dRZ: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$clog1pexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dS0: // global
           I64[Sp - 8] = block_c3dRV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dSC; else goto c3dRW;
       u3dSC: // global
           call _c3dRV(R1) args: 0, res: 0, upd: 0;
       c3dRW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$clog1pexp_info" {
     GHC.Float.$fFloatingFloat_$clog1pexp_info:
         const GHC.Float.$fFloatingFloat_$clog1pexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dRV() //  [R1]
         { []
         }
     {offset
       c3dRV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dS5; else goto c3dS4;
       c3dS5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dS4: // global
           _s3aRJ::F32 = F32[R1 + 7];
           if (%MO_F_Le_W32(_s3aRJ::F32,
                            18.0 :: W32)) goto c3dSB; else goto c3dSs;
       c3dSB: // global
           (_c3dSu::F32) = call MO_F32_Exp(_s3aRJ::F32);
           (_s3aRT::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(_c3dSu::F32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aRT::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3dSs: // global
           if (%MO_F_Le_W32(_s3aRJ::F32,
                            100.0 :: W32)) goto c3dSq; else goto c3dSc;
       c3dSq: // global
           (_c3dSi::F32) = call MO_F32_Exp(%MO_F_Neg_W32(_s3aRJ::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Add_W32(_s3aRJ::F32, _c3dSi::F32);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3dSc: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dRV_info" {
     block_c3dRV_info:
         const _c3dRV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.905345784 UTC

[section ""data" . GHC.Float.logFloat_closure" {
     GHC.Float.logFloat_closure:
         const GHC.Float.logFloat_info;
 },
 GHC.Float.logFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dT8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dTg; else goto c3dTh;
       c3dTg: // global
           R2 = R2;
           R1 = GHC.Float.logFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dTh: // global
           I64[Sp - 8] = block_c3dT5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dTl; else goto c3dT6;
       u3dTl: // global
           call _c3dT5(R1) args: 0, res: 0, upd: 0;
       c3dT6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.logFloat_info" {
     GHC.Float.logFloat_info:
         const GHC.Float.logFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dT5() //  [R1]
         { []
         }
     {offset
       c3dT5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dTk; else goto c3dTj;
       c3dTk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dTj: // global
           (_c3dTb::F32) = call MO_F32_Log(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dTb::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dT5_info" {
     block_c3dT5_info:
         const _c3dT5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.911734084 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$clogBase_closure" {
     GHC.Float.$fFloatingFloat_$clogBase_closure:
         const GHC.Float.$fFloatingFloat_$clogBase_info;
 },
 GHC.Float.$fFloatingFloat_$clogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dTF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3dTZ; else goto c3dU0;
       c3dTZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$clogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3dU0: // global
           I64[Sp - 16] = block_c3dTC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3dU6; else goto c3dTD;
       u3dU6: // global
           call _c3dTC(R1) args: 0, res: 0, upd: 0;
       c3dTD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$clogBase_info" {
     GHC.Float.$fFloatingFloat_$clogBase_info:
         const GHC.Float.$fFloatingFloat_$clogBase_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3dTC() //  [R1]
         { []
         }
     {offset
       c3dTC: // global
           _s3aRY::P64 = P64[Sp + 8];
           (_c3dTI::F32) = call MO_F32_Log(F32[R1 + 7]);
           I64[Sp] = block_c3dTM_info;
           R1 = _s3aRY::P64;
           F32[Sp + 8] = _c3dTI::F32;
           if (R1 & 7 != 0) goto u3dU5; else goto c3dTN;
       u3dU5: // global
           call _c3dTM(R1) args: 0, res: 0, upd: 0;
       c3dTN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dTC_info" {
     block_c3dTC_info:
         const _c3dTC;
         const 1;
         const 30;
 },
 _c3dTM() //  [R1]
         { []
         }
     {offset
       c3dTM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dU4; else goto c3dU3;
       c3dU4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dU3: // global
           _s3aS2::F32 = F32[Sp + 8];
           (_c3dTR::F32) = call MO_F32_Log(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(_s3aS2::F32, _c3dTR::F32);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dTM_info" {
     block_c3dTM_info:
         const _c3dTM;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.919937622 UTC

[section ""data" . GHC.Float.sqrtFloat_closure" {
     GHC.Float.sqrtFloat_closure:
         const GHC.Float.sqrtFloat_info;
 },
 GHC.Float.sqrtFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dUx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dUF; else goto c3dUG;
       c3dUF: // global
           R2 = R2;
           R1 = GHC.Float.sqrtFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dUG: // global
           I64[Sp - 8] = block_c3dUu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dUK; else goto c3dUv;
       u3dUK: // global
           call _c3dUu(R1) args: 0, res: 0, upd: 0;
       c3dUv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sqrtFloat_info" {
     GHC.Float.sqrtFloat_info:
         const GHC.Float.sqrtFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dUu() //  [R1]
         { []
         }
     {offset
       c3dUu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dUJ; else goto c3dUI;
       c3dUJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dUI: // global
           (_c3dUA::F32) = call MO_F32_Sqrt(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dUA::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dUu_info" {
     block_c3dUu_info:
         const _c3dUu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.926153258 UTC

[section ""data" . GHC.Float.sinFloat_closure" {
     GHC.Float.sinFloat_closure:
         const GHC.Float.sinFloat_info;
 },
 GHC.Float.sinFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dV5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dVd; else goto c3dVe;
       c3dVd: // global
           R2 = R2;
           R1 = GHC.Float.sinFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dVe: // global
           I64[Sp - 8] = block_c3dV2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dVi; else goto c3dV3;
       u3dVi: // global
           call _c3dV2(R1) args: 0, res: 0, upd: 0;
       c3dV3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinFloat_info" {
     GHC.Float.sinFloat_info:
         const GHC.Float.sinFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dV2() //  [R1]
         { []
         }
     {offset
       c3dV2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dVh; else goto c3dVg;
       c3dVh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dVg: // global
           (_c3dV8::F32) = call MO_F32_Sin(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dV8::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dV2_info" {
     block_c3dV2_info:
         const _c3dV2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.93220994 UTC

[section ""data" . GHC.Float.cosFloat_closure" {
     GHC.Float.cosFloat_closure:
         const GHC.Float.cosFloat_info;
 },
 GHC.Float.cosFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dVC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dVK; else goto c3dVL;
       c3dVK: // global
           R2 = R2;
           R1 = GHC.Float.cosFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dVL: // global
           I64[Sp - 8] = block_c3dVz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dVP; else goto c3dVA;
       u3dVP: // global
           call _c3dVz(R1) args: 0, res: 0, upd: 0;
       c3dVA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.cosFloat_info" {
     GHC.Float.cosFloat_info:
         const GHC.Float.cosFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dVz() //  [R1]
         { []
         }
     {offset
       c3dVz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dVO; else goto c3dVN;
       c3dVO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dVN: // global
           (_c3dVF::F32) = call MO_F32_Cos(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dVF::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dVz_info" {
     block_c3dVz_info:
         const _c3dVz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.938775544 UTC

[section ""data" . GHC.Float.tanFloat_closure" {
     GHC.Float.tanFloat_closure:
         const GHC.Float.tanFloat_info;
 },
 GHC.Float.tanFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dW9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dWh; else goto c3dWi;
       c3dWh: // global
           R2 = R2;
           R1 = GHC.Float.tanFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dWi: // global
           I64[Sp - 8] = block_c3dW6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dWm; else goto c3dW7;
       u3dWm: // global
           call _c3dW6(R1) args: 0, res: 0, upd: 0;
       c3dW7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanFloat_info" {
     GHC.Float.tanFloat_info:
         const GHC.Float.tanFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dW6() //  [R1]
         { []
         }
     {offset
       c3dW6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dWl; else goto c3dWk;
       c3dWl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dWk: // global
           (_c3dWc::F32) = call MO_F32_Tan(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dWc::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dW6_info" {
     block_c3dW6_info:
         const _c3dW6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.945470602 UTC

[section ""data" . GHC.Float.asinFloat_closure" {
     GHC.Float.asinFloat_closure:
         const GHC.Float.asinFloat_info;
 },
 GHC.Float.asinFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dWG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dWO; else goto c3dWP;
       c3dWO: // global
           R2 = R2;
           R1 = GHC.Float.asinFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dWP: // global
           I64[Sp - 8] = block_c3dWD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dWT; else goto c3dWE;
       u3dWT: // global
           call _c3dWD(R1) args: 0, res: 0, upd: 0;
       c3dWE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.asinFloat_info" {
     GHC.Float.asinFloat_info:
         const GHC.Float.asinFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dWD() //  [R1]
         { []
         }
     {offset
       c3dWD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dWS; else goto c3dWR;
       c3dWS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dWR: // global
           (_c3dWJ::F32) = call MO_F32_Asin(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dWJ::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dWD_info" {
     block_c3dWD_info:
         const _c3dWD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.951519572 UTC

[section ""data" . GHC.Float.acosFloat_closure" {
     GHC.Float.acosFloat_closure:
         const GHC.Float.acosFloat_info;
 },
 GHC.Float.acosFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dXd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dXl; else goto c3dXm;
       c3dXl: // global
           R2 = R2;
           R1 = GHC.Float.acosFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dXm: // global
           I64[Sp - 8] = block_c3dXa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dXq; else goto c3dXb;
       u3dXq: // global
           call _c3dXa(R1) args: 0, res: 0, upd: 0;
       c3dXb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.acosFloat_info" {
     GHC.Float.acosFloat_info:
         const GHC.Float.acosFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dXa() //  [R1]
         { []
         }
     {offset
       c3dXa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dXp; else goto c3dXo;
       c3dXp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dXo: // global
           (_c3dXg::F32) = call MO_F32_Acos(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dXg::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dXa_info" {
     block_c3dXa_info:
         const _c3dXa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.958000318 UTC

[section ""data" . GHC.Float.atanFloat_closure" {
     GHC.Float.atanFloat_closure:
         const GHC.Float.atanFloat_info;
 },
 GHC.Float.atanFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dXK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dXS; else goto c3dXT;
       c3dXS: // global
           R2 = R2;
           R1 = GHC.Float.atanFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dXT: // global
           I64[Sp - 8] = block_c3dXH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dXX; else goto c3dXI;
       u3dXX: // global
           call _c3dXH(R1) args: 0, res: 0, upd: 0;
       c3dXI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atanFloat_info" {
     GHC.Float.atanFloat_info:
         const GHC.Float.atanFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dXH() //  [R1]
         { []
         }
     {offset
       c3dXH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dXW; else goto c3dXV;
       c3dXW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dXV: // global
           (_c3dXN::F32) = call MO_F32_Atan(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dXN::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dXH_info" {
     block_c3dXH_info:
         const _c3dXH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.964238651 UTC

[section ""data" . GHC.Float.sinhFloat_closure" {
     GHC.Float.sinhFloat_closure:
         const GHC.Float.sinhFloat_info;
 },
 GHC.Float.sinhFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dYh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dYp; else goto c3dYq;
       c3dYp: // global
           R2 = R2;
           R1 = GHC.Float.sinhFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dYq: // global
           I64[Sp - 8] = block_c3dYe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dYu; else goto c3dYf;
       u3dYu: // global
           call _c3dYe(R1) args: 0, res: 0, upd: 0;
       c3dYf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinhFloat_info" {
     GHC.Float.sinhFloat_info:
         const GHC.Float.sinhFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dYe() //  [R1]
         { []
         }
     {offset
       c3dYe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dYt; else goto c3dYs;
       c3dYt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dYs: // global
           (_c3dYk::F32) = call MO_F32_Sinh(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dYk::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dYe_info" {
     block_c3dYe_info:
         const _c3dYe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.970246689 UTC

[section ""data" . GHC.Float.coshFloat_closure" {
     GHC.Float.coshFloat_closure:
         const GHC.Float.coshFloat_info;
 },
 GHC.Float.coshFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dYO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dYW; else goto c3dYX;
       c3dYW: // global
           R2 = R2;
           R1 = GHC.Float.coshFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dYX: // global
           I64[Sp - 8] = block_c3dYL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dZ1; else goto c3dYM;
       u3dZ1: // global
           call _c3dYL(R1) args: 0, res: 0, upd: 0;
       c3dYM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.coshFloat_info" {
     GHC.Float.coshFloat_info:
         const GHC.Float.coshFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dYL() //  [R1]
         { []
         }
     {offset
       c3dYL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dZ0; else goto c3dYZ;
       c3dZ0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dYZ: // global
           (_c3dYR::F32) = call MO_F32_Cosh(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dYR::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dYL_info" {
     block_c3dYL_info:
         const _c3dYL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.976464369 UTC

[section ""data" . GHC.Float.tanhFloat_closure" {
     GHC.Float.tanhFloat_closure:
         const GHC.Float.tanhFloat_info;
 },
 GHC.Float.tanhFloat_entry() //  [R2]
         { []
         }
     {offset
       c3dZl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3dZt; else goto c3dZu;
       c3dZt: // global
           R2 = R2;
           R1 = GHC.Float.tanhFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3dZu: // global
           I64[Sp - 8] = block_c3dZi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3dZy; else goto c3dZj;
       u3dZy: // global
           call _c3dZi(R1) args: 0, res: 0, upd: 0;
       c3dZj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanhFloat_info" {
     GHC.Float.tanhFloat_info:
         const GHC.Float.tanhFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3dZi() //  [R1]
         { []
         }
     {offset
       c3dZi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3dZx; else goto c3dZw;
       c3dZx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3dZw: // global
           (_c3dZo::F32) = call MO_F32_Tanh(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3dZo::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dZi_info" {
     block_c3dZi_info:
         const _c3dZi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.984081804 UTC

[section ""data" . GHC.Float.powerFloat_closure" {
     GHC.Float.powerFloat_closure:
         const GHC.Float.powerFloat_info;
 },
 GHC.Float.powerFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3dZS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3e06; else goto c3e07;
       c3e06: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.powerFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3e07: // global
           I64[Sp - 16] = block_c3dZP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3e0d; else goto c3dZQ;
       u3e0d: // global
           call _c3dZP(R1) args: 0, res: 0, upd: 0;
       c3dZQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.powerFloat_info" {
     GHC.Float.powerFloat_info:
         const GHC.Float.powerFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3dZP() //  [R1]
         { []
         }
     {offset
       c3dZP: // global
           I64[Sp] = block_c3dZV_info;
           _s3aSO::F32 = F32[R1 + 7];
           R1 = P64[Sp + 8];
           F32[Sp + 8] = _s3aSO::F32;
           if (R1 & 7 != 0) goto u3e0c; else goto c3dZW;
       u3e0c: // global
           call _c3dZV(R1) args: 0, res: 0, upd: 0;
       c3dZW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dZP_info" {
     block_c3dZP_info:
         const _c3dZP;
         const 1;
         const 30;
 },
 _c3dZV() //  [R1]
         { []
         }
     {offset
       c3dZV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e0b; else goto c3e0a;
       c3e0b: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e0a: // global
           (_c3e00::F32) = call MO_F32_Pwr(F32[Sp + 8], F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3e00::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3dZV_info" {
     block_c3dZV_info:
         const _c3dZV;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.992274911 UTC

[section ""data" . GHC.Float.gtDouble_closure" {
     GHC.Float.gtDouble_closure:
         const GHC.Float.gtDouble_info;
 },
 GHC.Float.gtDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3e0C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3e0G; else goto c3e0H;
       c3e0G: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.gtDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3e0H: // global
           I64[Sp - 16] = block_c3e0z_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3e0Q; else goto c3e0A;
       u3e0Q: // global
           call _c3e0z(R1) args: 0, res: 0, upd: 0;
       c3e0A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.gtDouble_info" {
     GHC.Float.gtDouble_info:
         const GHC.Float.gtDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3e0z() //  [R1]
         { []
         }
     {offset
       c3e0z: // global
           I64[Sp] = block_c3e0F_info;
           _s3aSV::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aSV::F64;
           if (R1 & 7 != 0) goto u3e0P; else goto c3e0J;
       u3e0P: // global
           call _c3e0F(R1) args: 0, res: 0, upd: 0;
       c3e0J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e0z_info" {
     block_c3e0z_info:
         const _c3e0z;
         const 1;
         const 30;
 },
 _c3e0F() //  [R1]
         { []
         }
     {offset
       c3e0F: // global
           R1 = I64[(%MO_F_Gt_W64(F64[Sp + 8],
                                  F64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e0F_info" {
     block_c3e0F_info:
         const _c3e0F;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:52.999994113 UTC

[section ""data" . GHC.Float.geDouble_closure" {
     GHC.Float.geDouble_closure:
         const GHC.Float.geDouble_info;
 },
 GHC.Float.geDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3e1j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3e1n; else goto c3e1o;
       c3e1n: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.geDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3e1o: // global
           I64[Sp - 16] = block_c3e1g_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3e1x; else goto c3e1h;
       u3e1x: // global
           call _c3e1g(R1) args: 0, res: 0, upd: 0;
       c3e1h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.geDouble_info" {
     GHC.Float.geDouble_info:
         const GHC.Float.geDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3e1g() //  [R1]
         { []
         }
     {offset
       c3e1g: // global
           I64[Sp] = block_c3e1m_info;
           _s3aT2::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aT2::F64;
           if (R1 & 7 != 0) goto u3e1w; else goto c3e1q;
       u3e1w: // global
           call _c3e1m(R1) args: 0, res: 0, upd: 0;
       c3e1q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e1g_info" {
     block_c3e1g_info:
         const _c3e1g;
         const 1;
         const 30;
 },
 _c3e1m() //  [R1]
         { []
         }
     {offset
       c3e1m: // global
           R1 = I64[(%MO_F_Ge_W64(F64[Sp + 8],
                                  F64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e1m_info" {
     block_c3e1m_info:
         const _c3e1m;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.007776034 UTC

[section ""data" . GHC.Float.ltDouble_closure" {
     GHC.Float.ltDouble_closure:
         const GHC.Float.ltDouble_info;
 },
 GHC.Float.ltDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3e20: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3e24; else goto c3e25;
       c3e24: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.ltDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3e25: // global
           I64[Sp - 16] = block_c3e1X_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3e2e; else goto c3e1Y;
       u3e2e: // global
           call _c3e1X(R1) args: 0, res: 0, upd: 0;
       c3e1Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.ltDouble_info" {
     GHC.Float.ltDouble_info:
         const GHC.Float.ltDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3e1X() //  [R1]
         { []
         }
     {offset
       c3e1X: // global
           I64[Sp] = block_c3e23_info;
           _s3aT9::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aT9::F64;
           if (R1 & 7 != 0) goto u3e2d; else goto c3e27;
       u3e2d: // global
           call _c3e23(R1) args: 0, res: 0, upd: 0;
       c3e27: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e1X_info" {
     block_c3e1X_info:
         const _c3e1X;
         const 1;
         const 30;
 },
 _c3e23() //  [R1]
         { []
         }
     {offset
       c3e23: // global
           R1 = I64[(%MO_F_Lt_W64(F64[Sp + 8],
                                  F64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e23_info" {
     block_c3e23_info:
         const _c3e23;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.015679027 UTC

[section ""data" . GHC.Float.leDouble_closure" {
     GHC.Float.leDouble_closure:
         const GHC.Float.leDouble_info;
 },
 GHC.Float.leDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3e2H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3e2L; else goto c3e2M;
       c3e2L: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.leDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3e2M: // global
           I64[Sp - 16] = block_c3e2E_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3e2V; else goto c3e2F;
       u3e2V: // global
           call _c3e2E(R1) args: 0, res: 0, upd: 0;
       c3e2F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.leDouble_info" {
     GHC.Float.leDouble_info:
         const GHC.Float.leDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3e2E() //  [R1]
         { []
         }
     {offset
       c3e2E: // global
           I64[Sp] = block_c3e2K_info;
           _s3aTg::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aTg::F64;
           if (R1 & 7 != 0) goto u3e2U; else goto c3e2O;
       u3e2U: // global
           call _c3e2K(R1) args: 0, res: 0, upd: 0;
       c3e2O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e2E_info" {
     block_c3e2E_info:
         const _c3e2E;
         const 1;
         const 30;
 },
 _c3e2K() //  [R1]
         { []
         }
     {offset
       c3e2K: // global
           R1 = I64[(%MO_F_Le_W64(F64[Sp + 8],
                                  F64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e2K_info" {
     block_c3e2K_info:
         const _c3e2K;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.023664323 UTC

[section ""data" . GHC.Float.double2Float_closure" {
     GHC.Float.double2Float_closure:
         const GHC.Float.double2Float_info;
 },
 GHC.Float.double2Float_entry() //  [R2]
         { []
         }
     {offset
       c3e3o: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e3v; else goto c3e3w;
       c3e3v: // global
           R2 = R2;
           R1 = GHC.Float.double2Float_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e3w: // global
           I64[Sp - 8] = block_c3e3l_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e3A; else goto c3e3m;
       u3e3A: // global
           call _c3e3l(R1) args: 0, res: 0, upd: 0;
       c3e3m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.double2Float_info" {
     GHC.Float.double2Float_info:
         const GHC.Float.double2Float_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e3l() //  [R1]
         { []
         }
     {offset
       c3e3l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e3z; else goto c3e3y;
       c3e3z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e3y: // global
           _s3aTn::F32 = %MO_FF_Conv_W64_W32(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aTn::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e3l_info" {
     block_c3e3l_info:
         const _c3e3l;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.029684288 UTC

[section ""data" . GHC.Float.float2Double_closure" {
     GHC.Float.float2Double_closure:
         const GHC.Float.float2Double_info;
 },
 GHC.Float.float2Double_entry() //  [R2]
         { []
         }
     {offset
       c3e3V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e42; else goto c3e43;
       c3e42: // global
           R2 = R2;
           R1 = GHC.Float.float2Double_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e43: // global
           I64[Sp - 8] = block_c3e3S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e47; else goto c3e3T;
       u3e47: // global
           call _c3e3S(R1) args: 0, res: 0, upd: 0;
       c3e3T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.float2Double_info" {
     GHC.Float.float2Double_info:
         const GHC.Float.float2Double_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e3S() //  [R1]
         { []
         }
     {offset
       c3e3S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e46; else goto c3e45;
       c3e46: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e45: // global
           _s3aTr::F64 = %MO_FF_Conv_W32_W64(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aTr::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e3S_info" {
     block_c3e3S_info:
         const _c3e3S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.036039379 UTC

[section ""data" . GHC.Float.expDouble_closure" {
     GHC.Float.expDouble_closure:
         const GHC.Float.expDouble_info;
 },
 GHC.Float.expDouble_entry() //  [R2]
         { []
         }
     {offset
       c3e4s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e4A; else goto c3e4B;
       c3e4A: // global
           R2 = R2;
           R1 = GHC.Float.expDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e4B: // global
           I64[Sp - 8] = block_c3e4p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e4F; else goto c3e4q;
       u3e4F: // global
           call _c3e4p(R1) args: 0, res: 0, upd: 0;
       c3e4q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expDouble_info" {
     GHC.Float.expDouble_info:
         const GHC.Float.expDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e4p() //  [R1]
         { []
         }
     {offset
       c3e4p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e4E; else goto c3e4D;
       c3e4E: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e4D: // global
           (_c3e4v::F64) = call MO_F64_Exp(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3e4v::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e4p_info" {
     block_c3e4p_info:
         const _c3e4p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.042673669 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$clog1pexp_closure" {
     GHC.Float.$fFloatingDouble_$clog1pexp_closure:
         const GHC.Float.$fFloatingDouble_$clog1pexp_info;
 },
 GHC.Float.$fFloatingDouble_$clog1pexp_entry() //  [R2]
         { []
         }
     {offset
       c3e4Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e50; else goto c3e51;
       c3e50: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$clog1pexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e51: // global
           I64[Sp - 8] = block_c3e4W_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e5D; else goto c3e4X;
       u3e5D: // global
           call _c3e4W(R1) args: 0, res: 0, upd: 0;
       c3e4X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$clog1pexp_info" {
     GHC.Float.$fFloatingDouble_$clog1pexp_info:
         const GHC.Float.$fFloatingDouble_$clog1pexp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e4W() //  [R1]
         { []
         }
     {offset
       c3e4W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e56; else goto c3e55;
       c3e56: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e55: // global
           _s3aTy::F64 = F64[R1 + 7];
           if (%MO_F_Le_W64(_s3aTy::F64,
                            18.0 :: W64)) goto c3e5C; else goto c3e5t;
       c3e5C: // global
           (_c3e5v::F64) = call MO_F64_Exp(_s3aTy::F64);
           (_s3aTI::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(_c3e5v::F64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aTI::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3e5t: // global
           if (%MO_F_Le_W64(_s3aTy::F64,
                            100.0 :: W64)) goto c3e5r; else goto c3e5d;
       c3e5r: // global
           (_c3e5j::F64) = call MO_F64_Exp(%MO_F_Neg_W64(_s3aTy::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Add_W64(_s3aTy::F64, _c3e5j::F64);
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3e5d: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e4W_info" {
     block_c3e4W_info:
         const _c3e4W;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.050359416 UTC

[section ""data" . GHC.Float.logDouble_closure" {
     GHC.Float.logDouble_closure:
         const GHC.Float.logDouble_info;
 },
 GHC.Float.logDouble_entry() //  [R2]
         { []
         }
     {offset
       c3e69: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e6h; else goto c3e6i;
       c3e6h: // global
           R2 = R2;
           R1 = GHC.Float.logDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e6i: // global
           I64[Sp - 8] = block_c3e66_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e6m; else goto c3e67;
       u3e6m: // global
           call _c3e66(R1) args: 0, res: 0, upd: 0;
       c3e67: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.logDouble_info" {
     GHC.Float.logDouble_info:
         const GHC.Float.logDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e66() //  [R1]
         { []
         }
     {offset
       c3e66: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e6l; else goto c3e6k;
       c3e6l: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e6k: // global
           (_c3e6c::F64) = call MO_F64_Log(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3e6c::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e66_info" {
     block_c3e66_info:
         const _c3e66;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.057402561 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$clogBase_closure" {
     GHC.Float.$fFloatingDouble_$clogBase_closure:
         const GHC.Float.$fFloatingDouble_$clogBase_info;
 },
 GHC.Float.$fFloatingDouble_$clogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       c3e6G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3e70; else goto c3e71;
       c3e70: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$clogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3e71: // global
           I64[Sp - 16] = block_c3e6D_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3e77; else goto c3e6E;
       u3e77: // global
           call _c3e6D(R1) args: 0, res: 0, upd: 0;
       c3e6E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$clogBase_info" {
     GHC.Float.$fFloatingDouble_$clogBase_info:
         const GHC.Float.$fFloatingDouble_$clogBase_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3e6D() //  [R1]
         { []
         }
     {offset
       c3e6D: // global
           _s3aTN::P64 = P64[Sp + 8];
           (_c3e6J::F64) = call MO_F64_Log(F64[R1 + 7]);
           I64[Sp] = block_c3e6N_info;
           R1 = _s3aTN::P64;
           F64[Sp + 8] = _c3e6J::F64;
           if (R1 & 7 != 0) goto u3e76; else goto c3e6O;
       u3e76: // global
           call _c3e6N(R1) args: 0, res: 0, upd: 0;
       c3e6O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e6D_info" {
     block_c3e6D_info:
         const _c3e6D;
         const 1;
         const 30;
 },
 _c3e6N() //  [R1]
         { []
         }
     {offset
       c3e6N: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e75; else goto c3e74;
       c3e75: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e74: // global
           _s3aTR::F64 = F64[Sp + 8];
           (_c3e6S::F64) = call MO_F64_Log(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(_s3aTR::F64, _c3e6S::F64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e6N_info" {
     block_c3e6N_info:
         const _c3e6N;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.066020678 UTC

[section ""data" . GHC.Float.sqrtDouble_closure" {
     GHC.Float.sqrtDouble_closure:
         const GHC.Float.sqrtDouble_info;
 },
 GHC.Float.sqrtDouble_entry() //  [R2]
         { []
         }
     {offset
       c3e7y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e7G; else goto c3e7H;
       c3e7G: // global
           R2 = R2;
           R1 = GHC.Float.sqrtDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e7H: // global
           I64[Sp - 8] = block_c3e7v_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e7L; else goto c3e7w;
       u3e7L: // global
           call _c3e7v(R1) args: 0, res: 0, upd: 0;
       c3e7w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sqrtDouble_info" {
     GHC.Float.sqrtDouble_info:
         const GHC.Float.sqrtDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e7v() //  [R1]
         { []
         }
     {offset
       c3e7v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e7K; else goto c3e7J;
       c3e7K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e7J: // global
           (_c3e7B::F64) = call MO_F64_Sqrt(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3e7B::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e7v_info" {
     block_c3e7v_info:
         const _c3e7v;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.07211357 UTC

[section ""data" . GHC.Float.sinDouble_closure" {
     GHC.Float.sinDouble_closure:
         const GHC.Float.sinDouble_info;
 },
 GHC.Float.sinDouble_entry() //  [R2]
         { []
         }
     {offset
       c3e86: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e8e; else goto c3e8f;
       c3e8e: // global
           R2 = R2;
           R1 = GHC.Float.sinDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e8f: // global
           I64[Sp - 8] = block_c3e83_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e8j; else goto c3e84;
       u3e8j: // global
           call _c3e83(R1) args: 0, res: 0, upd: 0;
       c3e84: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinDouble_info" {
     GHC.Float.sinDouble_info:
         const GHC.Float.sinDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e83() //  [R1]
         { []
         }
     {offset
       c3e83: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e8i; else goto c3e8h;
       c3e8i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e8h: // global
           (_c3e89::F64) = call MO_F64_Sin(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3e89::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e83_info" {
     block_c3e83_info:
         const _c3e83;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.078243214 UTC

[section ""data" . GHC.Float.cosDouble_closure" {
     GHC.Float.cosDouble_closure:
         const GHC.Float.cosDouble_info;
 },
 GHC.Float.cosDouble_entry() //  [R2]
         { []
         }
     {offset
       c3e8D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e8L; else goto c3e8M;
       c3e8L: // global
           R2 = R2;
           R1 = GHC.Float.cosDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e8M: // global
           I64[Sp - 8] = block_c3e8A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e8Q; else goto c3e8B;
       u3e8Q: // global
           call _c3e8A(R1) args: 0, res: 0, upd: 0;
       c3e8B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.cosDouble_info" {
     GHC.Float.cosDouble_info:
         const GHC.Float.cosDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e8A() //  [R1]
         { []
         }
     {offset
       c3e8A: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e8P; else goto c3e8O;
       c3e8P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e8O: // global
           (_c3e8G::F64) = call MO_F64_Cos(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3e8G::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e8A_info" {
     block_c3e8A_info:
         const _c3e8A;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.084823749 UTC

[section ""data" . GHC.Float.tanDouble_closure" {
     GHC.Float.tanDouble_closure:
         const GHC.Float.tanDouble_info;
 },
 GHC.Float.tanDouble_entry() //  [R2]
         { []
         }
     {offset
       c3e9a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e9i; else goto c3e9j;
       c3e9i: // global
           R2 = R2;
           R1 = GHC.Float.tanDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e9j: // global
           I64[Sp - 8] = block_c3e97_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e9n; else goto c3e98;
       u3e9n: // global
           call _c3e97(R1) args: 0, res: 0, upd: 0;
       c3e98: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanDouble_info" {
     GHC.Float.tanDouble_info:
         const GHC.Float.tanDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e97() //  [R1]
         { []
         }
     {offset
       c3e97: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e9m; else goto c3e9l;
       c3e9m: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e9l: // global
           (_c3e9d::F64) = call MO_F64_Tan(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3e9d::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e97_info" {
     block_c3e97_info:
         const _c3e97;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.091113255 UTC

[section ""data" . GHC.Float.asinDouble_closure" {
     GHC.Float.asinDouble_closure:
         const GHC.Float.asinDouble_info;
 },
 GHC.Float.asinDouble_entry() //  [R2]
         { []
         }
     {offset
       c3e9H: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3e9P; else goto c3e9Q;
       c3e9P: // global
           R2 = R2;
           R1 = GHC.Float.asinDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3e9Q: // global
           I64[Sp - 8] = block_c3e9E_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3e9U; else goto c3e9F;
       u3e9U: // global
           call _c3e9E(R1) args: 0, res: 0, upd: 0;
       c3e9F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.asinDouble_info" {
     GHC.Float.asinDouble_info:
         const GHC.Float.asinDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3e9E() //  [R1]
         { []
         }
     {offset
       c3e9E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3e9T; else goto c3e9S;
       c3e9T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3e9S: // global
           (_c3e9K::F64) = call MO_F64_Asin(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3e9K::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3e9E_info" {
     block_c3e9E_info:
         const _c3e9E;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.097301786 UTC

[section ""data" . GHC.Float.acosDouble_closure" {
     GHC.Float.acosDouble_closure:
         const GHC.Float.acosDouble_info;
 },
 GHC.Float.acosDouble_entry() //  [R2]
         { []
         }
     {offset
       c3eae: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eam; else goto c3ean;
       c3eam: // global
           R2 = R2;
           R1 = GHC.Float.acosDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ean: // global
           I64[Sp - 8] = block_c3eab_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ear; else goto c3eac;
       u3ear: // global
           call _c3eab(R1) args: 0, res: 0, upd: 0;
       c3eac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.acosDouble_info" {
     GHC.Float.acosDouble_info:
         const GHC.Float.acosDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eab() //  [R1]
         { []
         }
     {offset
       c3eab: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eaq; else goto c3eap;
       c3eaq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3eap: // global
           (_c3eah::F64) = call MO_F64_Acos(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3eah::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eab_info" {
     block_c3eab_info:
         const _c3eab;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.10407436 UTC

[section ""data" . GHC.Float.atanDouble_closure" {
     GHC.Float.atanDouble_closure:
         const GHC.Float.atanDouble_info;
 },
 GHC.Float.atanDouble_entry() //  [R2]
         { []
         }
     {offset
       c3eaL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eaT; else goto c3eaU;
       c3eaT: // global
           R2 = R2;
           R1 = GHC.Float.atanDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eaU: // global
           I64[Sp - 8] = block_c3eaI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eaY; else goto c3eaJ;
       u3eaY: // global
           call _c3eaI(R1) args: 0, res: 0, upd: 0;
       c3eaJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.atanDouble_info" {
     GHC.Float.atanDouble_info:
         const GHC.Float.atanDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eaI() //  [R1]
         { []
         }
     {offset
       c3eaI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eaX; else goto c3eaW;
       c3eaX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3eaW: // global
           (_c3eaO::F64) = call MO_F64_Atan(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3eaO::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eaI_info" {
     block_c3eaI_info:
         const _c3eaI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.110795264 UTC

[section ""data" . GHC.Float.sinhDouble_closure" {
     GHC.Float.sinhDouble_closure:
         const GHC.Float.sinhDouble_info;
 },
 GHC.Float.sinhDouble_entry() //  [R2]
         { []
         }
     {offset
       c3ebi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ebq; else goto c3ebr;
       c3ebq: // global
           R2 = R2;
           R1 = GHC.Float.sinhDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ebr: // global
           I64[Sp - 8] = block_c3ebf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ebv; else goto c3ebg;
       u3ebv: // global
           call _c3ebf(R1) args: 0, res: 0, upd: 0;
       c3ebg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.sinhDouble_info" {
     GHC.Float.sinhDouble_info:
         const GHC.Float.sinhDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ebf() //  [R1]
         { []
         }
     {offset
       c3ebf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ebu; else goto c3ebt;
       c3ebu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ebt: // global
           (_c3ebl::F64) = call MO_F64_Sinh(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3ebl::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ebf_info" {
     block_c3ebf_info:
         const _c3ebf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.116871089 UTC

[section ""data" . GHC.Float.coshDouble_closure" {
     GHC.Float.coshDouble_closure:
         const GHC.Float.coshDouble_info;
 },
 GHC.Float.coshDouble_entry() //  [R2]
         { []
         }
     {offset
       c3ebP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ebX; else goto c3ebY;
       c3ebX: // global
           R2 = R2;
           R1 = GHC.Float.coshDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ebY: // global
           I64[Sp - 8] = block_c3ebM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ec2; else goto c3ebN;
       u3ec2: // global
           call _c3ebM(R1) args: 0, res: 0, upd: 0;
       c3ebN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.coshDouble_info" {
     GHC.Float.coshDouble_info:
         const GHC.Float.coshDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ebM() //  [R1]
         { []
         }
     {offset
       c3ebM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ec1; else goto c3ec0;
       c3ec1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ec0: // global
           (_c3ebS::F64) = call MO_F64_Cosh(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3ebS::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ebM_info" {
     block_c3ebM_info:
         const _c3ebM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.123066741 UTC

[section ""data" . GHC.Float.tanhDouble_closure" {
     GHC.Float.tanhDouble_closure:
         const GHC.Float.tanhDouble_info;
 },
 GHC.Float.tanhDouble_entry() //  [R2]
         { []
         }
     {offset
       c3ecm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ecu; else goto c3ecv;
       c3ecu: // global
           R2 = R2;
           R1 = GHC.Float.tanhDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ecv: // global
           I64[Sp - 8] = block_c3ecj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ecz; else goto c3eck;
       u3ecz: // global
           call _c3ecj(R1) args: 0, res: 0, upd: 0;
       c3eck: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.tanhDouble_info" {
     GHC.Float.tanhDouble_info:
         const GHC.Float.tanhDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ecj() //  [R1]
         { []
         }
     {offset
       c3ecj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ecy; else goto c3ecx;
       c3ecy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ecx: // global
           (_c3ecp::F64) = call MO_F64_Tanh(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3ecp::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ecj_info" {
     block_c3ecj_info:
         const _c3ecj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.129775563 UTC

[section ""data" . GHC.Float.powerDouble_closure" {
     GHC.Float.powerDouble_closure:
         const GHC.Float.powerDouble_info;
 },
 GHC.Float.powerDouble_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ecT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ed7; else goto c3ed8;
       c3ed7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.powerDouble_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ed8: // global
           I64[Sp - 16] = block_c3ecQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ede; else goto c3ecR;
       u3ede: // global
           call _c3ecQ(R1) args: 0, res: 0, upd: 0;
       c3ecR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.powerDouble_info" {
     GHC.Float.powerDouble_info:
         const GHC.Float.powerDouble_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3ecQ() //  [R1]
         { []
         }
     {offset
       c3ecQ: // global
           I64[Sp] = block_c3ecW_info;
           _s3aUD::F64 = F64[R1 + 7];
           R1 = P64[Sp + 8];
           F64[Sp + 8] = _s3aUD::F64;
           if (R1 & 7 != 0) goto u3edd; else goto c3ecX;
       u3edd: // global
           call _c3ecW(R1) args: 0, res: 0, upd: 0;
       c3ecX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ecQ_info" {
     block_c3ecQ_info:
         const _c3ecQ;
         const 1;
         const 30;
 },
 _c3ecW() //  [R1]
         { []
         }
     {offset
       c3ecW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3edc; else goto c3edb;
       c3edc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3edb: // global
           (_c3ed1::F64) = call MO_F64_Pwr(F64[Sp + 8], F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3ed1::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ecW_info" {
     block_c3ecW_info:
         const _c3ecW;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.138021305 UTC

[section ""data" . GHC.Float.word2Double_closure" {
     GHC.Float.word2Double_closure:
         const GHC.Float.word2Double_info;
 },
 GHC.Float.word2Double_entry() //  [R2]
         { []
         }
     {offset
       c3edD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3edL; else goto c3edM;
       c3edL: // global
           R2 = R2;
           R1 = GHC.Float.word2Double_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3edM: // global
           I64[Sp - 8] = block_c3edA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3edQ; else goto c3edB;
       u3edQ: // global
           call _c3edA(R1) args: 0, res: 0, upd: 0;
       c3edB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.word2Double_info" {
     GHC.Float.word2Double_info:
         const GHC.Float.word2Double_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3edA() //  [R1]
         { []
         }
     {offset
       c3edA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3edP; else goto c3edO;
       c3edP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3edO: // global
           (_c3edG::F64) = call MO_UF_Conv W64(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3edG::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3edA_info" {
     block_c3edA_info:
         const _c3edA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.144674658 UTC

[section ""data" . GHC.Float.word2Float_closure" {
     GHC.Float.word2Float_closure:
         const GHC.Float.word2Float_info;
 },
 GHC.Float.word2Float_entry() //  [R2]
         { []
         }
     {offset
       c3eea: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eei; else goto c3eej;
       c3eei: // global
           R2 = R2;
           R1 = GHC.Float.word2Float_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eej: // global
           I64[Sp - 8] = block_c3ee7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3een; else goto c3ee8;
       u3een: // global
           call _c3ee7(R1) args: 0, res: 0, upd: 0;
       c3ee8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.word2Float_info" {
     GHC.Float.word2Float_info:
         const GHC.Float.word2Float_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ee7() //  [R1]
         { []
         }
     {offset
       c3ee7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eem; else goto c3eel;
       c3eem: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3eel: // global
           (_c3eed::F32) = call MO_UF_Conv W32(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3eed::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ee7_info" {
     block_c3ee7_info:
         const _c3ee7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.149866284 UTC

[section ""cstring" . GHC.Float.$trModule4_bytes" {
     GHC.Float.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.151566354 UTC

[section ""data" . GHC.Float.$trModule3_closure" {
     GHC.Float.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.15319159 UTC

[section ""cstring" . GHC.Float.$trModule2_bytes" {
     GHC.Float.$trModule2_bytes:
         I8[] [71,72,67,46,70,108,111,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.155051425 UTC

[section ""data" . GHC.Float.$trModule1_closure" {
     GHC.Float.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.15674837 UTC

[section ""data" . GHC.Float.$trModule_closure" {
     GHC.Float.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Float.$trModule3_closure+1;
         const GHC.Float.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.158568307 UTC

[section ""data" . $krep_r2UpC_closure" {
     $krep_r2UpC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.160244611 UTC

[section ""data" . $krep1_r2UpD_closure" {
     $krep1_r2UpD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.162197207 UTC

[section ""data" . $krep2_r2UpE_closure" {
     $krep2_r2UpE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.163861969 UTC

[section ""data" . $krep3_r2UpF_closure" {
     $krep3_r2UpF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.165679739 UTC

[section ""data" . $krep4_r2UpG_closure" {
     $krep4_r2UpG_closure:
         const :_con_info;
         const $krep1_r2UpD_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.167914044 UTC

[section ""data" . $krep5_r2UpH_closure" {
     $krep5_r2UpH_closure:
         const :_con_info;
         const $krep2_r2UpE_closure+1;
         const $krep4_r2UpG_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.169817025 UTC

[section ""data" . $krep6_r2UpI_closure" {
     $krep6_r2UpI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_r2UpH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.171465485 UTC

[section ""data" . $krep7_r2UpJ_closure" {
     $krep7_r2UpJ_closure:
         const :_con_info;
         const $krep1_r2UpD_closure+1;
         const $krep4_r2UpG_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.173102061 UTC

[section ""data" . $krep8_r2UpK_closure" {
     $krep8_r2UpK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep7_r2UpJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.175353215 UTC

[section ""data" . GHC.Float.$tcFloating1_closure" {
     GHC.Float.$tcFloating1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep3_r2UpF_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.177069599 UTC

[section ""data" . $krep9_r2UpL_closure" {
     $krep9_r2UpL_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.178823257 UTC

[section ""data" . $krep10_r2UpM_closure" {
     $krep10_r2UpM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep9_r2UpL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.180499113 UTC

[section ""data" . $krep11_r2UpN_closure" {
     $krep11_r2UpN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r2UpD_closure+1;
         const $krep10_r2UpM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.182234264 UTC

[section ""data" . $krep12_r2UpO_closure" {
     $krep12_r2UpO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep10_r2UpM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.183899544 UTC

[section ""data" . $krep13_r2UpP_closure" {
     $krep13_r2UpP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep8_r2UpK_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.185642347 UTC

[section ""data" . $krep14_r2UpQ_closure" {
     $krep14_r2UpQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep6_r2UpI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.187400865 UTC

[section ""data" . $krep15_r2UpR_closure" {
     $krep15_r2UpR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep2_r2UpE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.189153988 UTC

[section ""data" . $krep16_r2UpS_closure" {
     $krep16_r2UpS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep1_r2UpD_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.190926519 UTC

[section ""data" . $krep17_r2UpT_closure" {
     $krep17_r2UpT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep_r2UpC_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.193158341 UTC

[section ""data" . $krep18_r2UpU_closure" {
     $krep18_r2UpU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r2UpD_closure+1;
         const $krep9_r2UpL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.19534119 UTC

[section ""data" . $krep19_r2UpV_closure" {
     $krep19_r2UpV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r2UpE_closure+1;
         const $krep18_r2UpU_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.198344234 UTC

[section ""data" . $krep20_r2UpW_closure" {
     $krep20_r2UpW_closure:
         const :_con_info;
         const $krep9_r2UpL_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.200643229 UTC

[section ""data" . $krep21_r2UpX_closure" {
     $krep21_r2UpX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcRealFrac_closure;
         const $krep20_r2UpW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.203093991 UTC

[section ""data" . $krep22_r2UpY_closure" {
     $krep22_r2UpY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcFractional_closure;
         const $krep20_r2UpW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.20547559 UTC

[section ""cstring" . GHC.Float.$tcFloating3_bytes" {
     GHC.Float.$tcFloating3_bytes:
         I8[] [70,108,111,97,116,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.207672916 UTC

[section ""data" . GHC.Float.$tcFloating2_closure" {
     GHC.Float.$tcFloating2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tcFloating3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.210093704 UTC

[section ""data" . GHC.Float.$tcFloating_closure" {
     GHC.Float.$tcFloating_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tcFloating2_closure+1;
         const GHC.Float.$tcFloating1_closure+4;
         const 7129224378091624681;
         const 15164683064282921132;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.212600422 UTC

[section ""data" . $krep23_r2UpZ_closure" {
     $krep23_r2UpZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Float.$tcFloating_closure+1;
         const $krep20_r2UpW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.214671682 UTC

[section ""data" . $krep24_r2Uq0_closure" {
     $krep24_r2Uq0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep23_r2UpZ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.216507857 UTC

[section ""data" . $krep25_r2Uq1_closure" {
     $krep25_r2Uq1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep24_r2Uq0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.218340842 UTC

[section ""data" . $krep26_r2Uq2_closure" {
     $krep26_r2Uq2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep25_r2Uq1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.220106647 UTC

[section ""data" . $krep27_r2Uq3_closure" {
     $krep27_r2Uq3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep26_r2Uq2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.221871467 UTC

[section ""data" . $krep28_r2Uq4_closure" {
     $krep28_r2Uq4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep27_r2Uq3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.223639153 UTC

[section ""data" . $krep29_r2Uq5_closure" {
     $krep29_r2Uq5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep28_r2Uq4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.225976016 UTC

[section ""data" . $krep30_r2Uq6_closure" {
     $krep30_r2Uq6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep29_r2Uq5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.227635214 UTC

[section ""data" . $krep31_r2Uq7_closure" {
     $krep31_r2Uq7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep30_r2Uq6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.229887548 UTC

[section ""data" . $krep32_r2Uq8_closure" {
     $krep32_r2Uq8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep31_r2Uq7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.231647738 UTC

[section ""data" . $krep33_r2Uq9_closure" {
     $krep33_r2Uq9_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep32_r2Uq8_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.233393659 UTC

[section ""data" . $krep34_r2Uqa_closure" {
     $krep34_r2Uqa_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep33_r2Uq9_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.235104947 UTC

[section ""data" . $krep35_r2Uqb_closure" {
     $krep35_r2Uqb_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep34_r2Uqa_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.236802134 UTC

[section ""data" . $krep36_r2Uqc_closure" {
     $krep36_r2Uqc_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep35_r2Uqb_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.238909229 UTC

[section ""data" . $krep37_r2Uqd_closure" {
     $krep37_r2Uqd_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep36_r2Uqc_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.240591316 UTC

[section ""data" . $krep38_r2Uqe_closure" {
     $krep38_r2Uqe_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep37_r2Uqd_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.242282508 UTC

[section ""data" . $krep39_r2Uqf_closure" {
     $krep39_r2Uqf_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep38_r2Uqe_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.243886676 UTC

[section ""data" . $krep40_r2Uqg_closure" {
     $krep40_r2Uqg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r2UpO_closure+4;
         const $krep39_r2Uqf_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.245514125 UTC

[section ""data" . $krep41_r2Uqh_closure" {
     $krep41_r2Uqh_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r2UpO_closure+4;
         const $krep40_r2Uqg_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.247166271 UTC

[section ""data" . $krep42_r2Uqi_closure" {
     $krep42_r2Uqi_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep41_r2Uqh_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.249524296 UTC

[section ""data" . $krep43_r2Uqj_closure" {
     $krep43_r2Uqj_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep42_r2Uqi_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.252361008 UTC

[section ""data" . $krep44_r2Uqk_closure" {
     $krep44_r2Uqk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep43_r2Uqj_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.254665699 UTC

[section ""data" . $krep45_r2Uql_closure" {
     $krep45_r2Uql_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r2UpL_closure+2;
         const $krep44_r2Uqk_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.257139141 UTC

[section ""data" . GHC.Float.$tc'C:Floating1_closure" {
     GHC.Float.$tc'C:Floating1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r2UpY_closure+1;
         const $krep45_r2Uql_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.25946324 UTC

[section ""cstring" . GHC.Float.$tc'C:Floating3_bytes" {
     GHC.Float.$tc'C:Floating3_bytes:
         I8[] [39,67,58,70,108,111,97,116,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.262321795 UTC

[section ""data" . GHC.Float.$tc'C:Floating2_closure" {
     GHC.Float.$tc'C:Floating2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'C:Floating3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.26468507 UTC

[section ""data" . GHC.Float.$tc'C:Floating_closure" {
     GHC.Float.$tc'C:Floating_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'C:Floating2_closure+1;
         const GHC.Float.$tc'C:Floating1_closure+4;
         const 13412984222799990155;
         const 5552297363459117532;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.26713628 UTC

[section ""cstring" . GHC.Float.$tcRealFloat2_bytes" {
     GHC.Float.$tcRealFloat2_bytes:
         I8[] [82,101,97,108,70,108,111,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.26904721 UTC

[section ""data" . GHC.Float.$tcRealFloat1_closure" {
     GHC.Float.$tcRealFloat1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tcRealFloat2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.271348184 UTC

[section ""data" . GHC.Float.$tcRealFloat_closure" {
     GHC.Float.$tcRealFloat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tcRealFloat1_closure+1;
         const GHC.Float.$tcFloating1_closure+4;
         const 3941731172860576649;
         const 6292609957384615911;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.273811197 UTC

[section ""data" . $krep46_r2Uqm_closure" {
     $krep46_r2Uqm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Float.$tcRealFloat_closure+1;
         const $krep20_r2UpW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.27609457 UTC

[section ""data" . $krep47_r2Uqn_closure" {
     $krep47_r2Uqn_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r2UpO_closure+4;
         const $krep46_r2Uqm_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.279202789 UTC

[section ""data" . $krep48_r2Uqo_closure" {
     $krep48_r2Uqo_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep47_r2Uqn_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.281530756 UTC

[section ""data" . $krep49_r2Uqp_closure" {
     $krep49_r2Uqp_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep48_r2Uqo_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.283475044 UTC

[section ""data" . $krep50_r2Uqq_closure" {
     $krep50_r2Uqq_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep49_r2Uqp_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.285825061 UTC

[section ""data" . $krep51_r2Uqr_closure" {
     $krep51_r2Uqr_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep50_r2Uqq_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.287543587 UTC

[section ""data" . $krep52_r2Uqs_closure" {
     $krep52_r2Uqs_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r2UpT_closure+4;
         const $krep51_r2Uqr_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.289291763 UTC

[section ""data" . $krep53_r2Uqt_closure" {
     $krep53_r2Uqt_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r2UpN_closure+4;
         const $krep52_r2Uqs_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.29099763 UTC

[section ""data" . $krep54_r2Uqu_closure" {
     $krep54_r2Uqu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r2UpM_closure+4;
         const $krep53_r2Uqt_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.292739033 UTC

[section ""data" . $krep55_r2Uqv_closure" {
     $krep55_r2Uqv_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r2UpS_closure+4;
         const $krep54_r2Uqu_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.294720855 UTC

[section ""data" . $krep56_r2Uqw_closure" {
     $krep56_r2Uqw_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r2UpV_closure+4;
         const $krep55_r2Uqv_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.296436666 UTC

[section ""data" . $krep57_r2Uqx_closure" {
     $krep57_r2Uqx_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r2UpQ_closure+4;
         const $krep56_r2Uqw_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.298181635 UTC

[section ""data" . $krep58_r2Uqy_closure" {
     $krep58_r2Uqy_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r2UpP_closure+4;
         const $krep57_r2Uqx_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.299853289 UTC

[section ""data" . $krep59_r2Uqz_closure" {
     $krep59_r2Uqz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r2UpS_closure+4;
         const $krep58_r2Uqy_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.301559117 UTC

[section ""data" . $krep60_r2UqA_closure" {
     $krep60_r2UqA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r2UpR_closure+4;
         const $krep59_r2Uqz_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.303268172 UTC

[section ""data" . $krep61_r2UqB_closure" {
     $krep61_r2UqB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r2UpZ_closure+1;
         const $krep60_r2UqA_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.304883337 UTC

[section ""data" . GHC.Float.$tc'C:RealFloat1_closure" {
     GHC.Float.$tc'C:RealFloat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep21_r2UpX_closure+1;
         const $krep61_r2UqB_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.306727561 UTC

[section ""cstring" . GHC.Float.$tc'C:RealFloat3_bytes" {
     GHC.Float.$tc'C:RealFloat3_bytes:
         I8[] [39,67,58,82,101,97,108,70,108,111,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.308347694 UTC

[section ""data" . GHC.Float.$tc'C:RealFloat2_closure" {
     GHC.Float.$tc'C:RealFloat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'C:RealFloat3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.310624893 UTC

[section ""data" . GHC.Float.$tc'C:RealFloat_closure" {
     GHC.Float.$tc'C:RealFloat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'C:RealFloat2_closure+1;
         const GHC.Float.$tc'C:RealFloat1_closure+4;
         const 9049810847819341732;
         const 10151061231612833747;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.312543231 UTC

[section ""cstring" . GHC.Float.$tcFFFormat2_bytes" {
     GHC.Float.$tcFFFormat2_bytes:
         I8[] [70,70,70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.314210121 UTC

[section ""data" . GHC.Float.$tcFFFormat1_closure" {
     GHC.Float.$tcFFFormat1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tcFFFormat2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.315935692 UTC

[section ""data" . GHC.Float.$tcFFFormat_closure" {
     GHC.Float.$tcFFFormat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tcFFFormat1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1010825520712496676;
         const 1474964314088479952;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.318090023 UTC

[section ""data" . GHC.Float.$tc'FFExponent1_closure" {
     GHC.Float.$tc'FFExponent1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Float.$tcFFFormat_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.31979149 UTC

[section ""cstring" . GHC.Float.$tc'FFExponent3_bytes" {
     GHC.Float.$tc'FFExponent3_bytes:
         I8[] [39,70,70,69,120,112,111,110,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.321537654 UTC

[section ""data" . GHC.Float.$tc'FFExponent2_closure" {
     GHC.Float.$tc'FFExponent2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'FFExponent3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.323834666 UTC

[section ""data" . GHC.Float.$tc'FFExponent_closure" {
     GHC.Float.$tc'FFExponent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'FFExponent2_closure+1;
         const GHC.Float.$tc'FFExponent1_closure+1;
         const 5889061327753760791;
         const 13581434975010194000;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.326181232 UTC

[section ""cstring" . GHC.Float.$tc'FFFixed2_bytes" {
     GHC.Float.$tc'FFFixed2_bytes:
         I8[] [39,70,70,70,105,120,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.328258068 UTC

[section ""data" . GHC.Float.$tc'FFFixed1_closure" {
     GHC.Float.$tc'FFFixed1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'FFFixed2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.331088411 UTC

[section ""data" . GHC.Float.$tc'FFFixed_closure" {
     GHC.Float.$tc'FFFixed_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'FFFixed1_closure+1;
         const GHC.Float.$tc'FFExponent1_closure+1;
         const 16973630707960676089;
         const 5471565003344425987;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.333365438 UTC

[section ""cstring" . GHC.Float.$tc'FFGeneric2_bytes" {
     GHC.Float.$tc'FFGeneric2_bytes:
         I8[] [39,70,70,71,101,110,101,114,105,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.335459858 UTC

[section ""data" . GHC.Float.$tc'FFGeneric1_closure" {
     GHC.Float.$tc'FFGeneric1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Float.$tc'FFGeneric2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.337733391 UTC

[section ""data" . GHC.Float.$tc'FFGeneric_closure" {
     GHC.Float.$tc'FFGeneric_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Float.$trModule_closure+1;
         const GHC.Float.$tc'FFGeneric1_closure+1;
         const GHC.Float.$tc'FFExponent1_closure+1;
         const 15786283387055545560;
         const 10263264619717801633;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.341446275 UTC

[section ""data" . GHC.Float.isFloatNaN_closure" {
     GHC.Float.isFloatNaN_closure:
         const GHC.Float.isFloatNaN_info;
 },
 GHC.Float.isFloatNaN_entry() //  [R2]
         { []
         }
     {offset
       c3ege: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3egk; else goto c3egl;
       c3egk: // global
           R2 = R2;
           R1 = GHC.Float.isFloatNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3egl: // global
           I64[Sp - 8] = block_c3egb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3egp; else goto c3egc;
       u3egp: // global
           call _c3egb(R1) args: 0, res: 0, upd: 0;
       c3egc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatNaN_info" {
     GHC.Float.isFloatNaN_info:
         const GHC.Float.isFloatNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3egb() //  [R1]
         { []
         }
     {offset
       c3egb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ego; else goto c3egn;
       c3ego: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3egn: // global
           (_s3aUV::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNaN(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aUV::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3egb_info" {
     block_c3egb_info:
         const _c3egb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.350870971 UTC

[section ""data" . GHC.Float.isFloatInfinite_closure" {
     GHC.Float.isFloatInfinite_closure:
         const GHC.Float.isFloatInfinite_info;
 },
 GHC.Float.isFloatInfinite_entry() //  [R2]
         { []
         }
     {offset
       c3egJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3egP; else goto c3egQ;
       c3egP: // global
           R2 = R2;
           R1 = GHC.Float.isFloatInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3egQ: // global
           I64[Sp - 8] = block_c3egG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3egU; else goto c3egH;
       u3egU: // global
           call _c3egG(R1) args: 0, res: 0, upd: 0;
       c3egH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatInfinite_info" {
     GHC.Float.isFloatInfinite_info:
         const GHC.Float.isFloatInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3egG() //  [R1]
         { []
         }
     {offset
       c3egG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3egT; else goto c3egS;
       c3egT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3egS: // global
           (_s3aV2::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aV2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3egG_info" {
     block_c3egG_info:
         const _c3egG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.358899775 UTC

[section ""data" . GHC.Float.isFloatDenormalized_closure" {
     GHC.Float.isFloatDenormalized_closure:
         const GHC.Float.isFloatDenormalized_info;
 },
 GHC.Float.isFloatDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c3ehe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ehk; else goto c3ehl;
       c3ehk: // global
           R2 = R2;
           R1 = GHC.Float.isFloatDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ehl: // global
           I64[Sp - 8] = block_c3ehb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ehp; else goto c3ehc;
       u3ehp: // global
           call _c3ehb(R1) args: 0, res: 0, upd: 0;
       c3ehc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatDenormalized_info" {
     GHC.Float.isFloatDenormalized_info:
         const GHC.Float.isFloatDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ehb() //  [R1]
         { []
         }
     {offset
       c3ehb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eho; else goto c3ehn;
       c3eho: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ehn: // global
           (_s3aV9::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatDenormalized(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aV9::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ehb_info" {
     block_c3ehb_info:
         const _c3ehb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.366628246 UTC

[section ""data" . GHC.Float.isFloatNegativeZero_closure" {
     GHC.Float.isFloatNegativeZero_closure:
         const GHC.Float.isFloatNegativeZero_info;
 },
 GHC.Float.isFloatNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c3ehJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ehP; else goto c3ehQ;
       c3ehP: // global
           R2 = R2;
           R1 = GHC.Float.isFloatNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ehQ: // global
           I64[Sp - 8] = block_c3ehG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ehU; else goto c3ehH;
       u3ehU: // global
           call _c3ehG(R1) args: 0, res: 0, upd: 0;
       c3ehH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatNegativeZero_info" {
     GHC.Float.isFloatNegativeZero_info:
         const GHC.Float.isFloatNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ehG() //  [R1]
         { []
         }
     {offset
       c3ehG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ehT; else goto c3ehS;
       c3ehT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ehS: // global
           (_s3aVg::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aVg::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ehG_info" {
     block_c3ehG_info:
         const _c3ehG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.374716 UTC

[section ""data" . GHC.Float.isFloatFinite_closure" {
     GHC.Float.isFloatFinite_closure:
         const GHC.Float.isFloatFinite_info;
 },
 GHC.Float.isFloatFinite_entry() //  [R2]
         { []
         }
     {offset
       c3eie: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eik; else goto c3eil;
       c3eik: // global
           R2 = R2;
           R1 = GHC.Float.isFloatFinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eil: // global
           I64[Sp - 8] = block_c3eib_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eip; else goto c3eic;
       u3eip: // global
           call _c3eib(R1) args: 0, res: 0, upd: 0;
       c3eic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isFloatFinite_info" {
     GHC.Float.isFloatFinite_info:
         const GHC.Float.isFloatFinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eib() //  [R1]
         { []
         }
     {offset
       c3eib: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eio; else goto c3ein;
       c3eio: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ein: // global
           (_s3aVn::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatFinite(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aVn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eib_info" {
     block_c3eib_info:
         const _c3eib;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.384267266 UTC

[section ""data" . GHC.Float.$w$cscaleFloat1_closure" {
     GHC.Float.$w$cscaleFloat1_closure:
         const GHC.Float.$w$cscaleFloat1_info;
 },
 GHC.Float.$w$cscaleFloat1_slow() //  [R1]
         { []
         }
     {offset
       c3eiD: // global
           F1 = F32[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2,
                                                R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Float.$w$cscaleFloat1_entry() //  [R2, F1]
         { []
         }
     {offset
       c3eiL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eiM; else goto c3eiN;
       c3eiM: // global
           R1 = GHC.Float.$w$cscaleFloat1_closure;
           I64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3eiN: // global
           _s3aVp::F32 = F1;
           if (R2 == 0) goto c3eiK; else goto c3eiJ;
       c3eiJ: // global
           if (%MO_F_Eq_W32(_s3aVp::F32,
                            0.0 :: W32)) goto c3eiK; else goto c3ejD;
       c3ejD: // global
           (_s3aVv::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatFinite(_s3aVp::F32);
           if (_s3aVv::I64 == 0) goto c3eiK; else goto c3eiY;
       c3eiK: // global
           F1 = _s3aVp::F32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       c3eiY: // global
           I64[Sp - 16] = block_c3eiW_info;
           F1 = _s3aVp::F32;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cscaleFloat1_info" {
     GHC.Float.$w$cscaleFloat1_info:
         const GHC.Float.$w$cscaleFloat1_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 194;
         const GHC.Float.$w$cscaleFloat1_slow;
 },
 _c3eiW() //  [R1, R2]
         { []
         }
     {offset
       c3eiW: // global
           _s3aVq::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(349, _s3aVq::I64)) goto c3ejz; else goto c3ejA;
       c3ejz: // global
           _s3aVz::I64 = R2;
           _s3aVy::I64 = R1;
           _s3aVB::I64 = _s3aVq::I64;
           goto s3aVA;
       c3ejA: // global
           _s3aVz::I64 = R2;
           _s3aVy::I64 = R1;
           _s3aVB::I64 = 349;
           goto s3aVA;
       s3aVA: // global
           if (%MO_S_Gt_W64((-349), _s3aVB::I64)) goto c3ejh; else goto c3ejr;
       c3ejh: // global
           I64[Sp] = block_c3ejf_info;
           R2 = _s3aVy::I64;
           I64[Sp + 8] = _s3aVz::I64 - 349;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3ejr: // global
           I64[Sp] = block_c3ejq_info;
           R2 = _s3aVy::I64;
           I64[Sp + 8] = _s3aVz::I64 + _s3aVB::I64;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eiW_info" {
     block_c3eiW_info:
         const _c3eiW;
         const 65;
         const 30;
 },
 _c3ejf() //  [R1]
         { []
         }
     {offset
       c3ejf: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ejf_info" {
     block_c3ejf_info:
         const _c3ejf;
         const 65;
         const 30;
 },
 _c3ejq() //  [R1]
         { []
         }
     {offset
       c3ejq: // global
           R3 = I64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeFloatInteger_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ejq_info" {
     block_c3ejq_info:
         const _c3ejq;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.400084432 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cscaleFloat_closure" {
     GHC.Float.$fRealFloatFloat_$cscaleFloat_closure:
         const GHC.Float.$fRealFloatFloat_$cscaleFloat_info;
 },
 GHC.Float.$fRealFloatFloat_$cscaleFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ekc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ekp; else goto c3ekq;
       c3ekp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cscaleFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ekq: // global
           I64[Sp - 16] = block_c3ek9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ekx; else goto c3eka;
       u3ekx: // global
           call _c3ek9(R1) args: 0, res: 0, upd: 0;
       c3eka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cscaleFloat_info" {
     GHC.Float.$fRealFloatFloat_$cscaleFloat_info:
         const GHC.Float.$fRealFloatFloat_$cscaleFloat_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3ek9() //  [R1]
         { []
         }
     {offset
       c3ek9: // global
           I64[Sp] = block_c3ekf_info;
           _s3aVL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3aVL::I64;
           if (R1 & 7 != 0) goto u3ekw; else goto c3ekg;
       u3ekw: // global
           call _c3ekf(R1) args: 0, res: 0, upd: 0;
       c3ekg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ek9_info" {
     block_c3ek9_info:
         const _c3ek9;
         const 1;
         const 30;
 },
 _c3ekf() //  [R1]
         { []
         }
     {offset
       c3ekf: // global
           _s3aVL::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3ekk_info;
           F1 = F32[R1 + 7];
           R2 = _s3aVL::I64;
           Sp = Sp + 8;
           call GHC.Float.$w$cscaleFloat1_entry(F1,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ekf_info" {
     block_c3ekf_info:
         const _c3ekf;
         const 65;
         const 30;
 },
 _c3ekk() //  [F1]
         { []
         }
     {offset
       c3ekk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ekv; else goto c3eku;
       c3ekv: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3eku: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ekk_info" {
     block_c3ekk_info:
         const _c3ekk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.413811026 UTC

[section ""data" . GHC.Float.isDoubleNaN_closure" {
     GHC.Float.isDoubleNaN_closure:
         const GHC.Float.isDoubleNaN_info;
 },
 GHC.Float.isDoubleNaN_entry() //  [R2]
         { []
         }
     {offset
       c3el0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3el6; else goto c3el7;
       c3el6: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3el7: // global
           I64[Sp - 8] = block_c3ekX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3elb; else goto c3ekY;
       u3elb: // global
           call _c3ekX(R1) args: 0, res: 0, upd: 0;
       c3ekY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleNaN_info" {
     GHC.Float.isDoubleNaN_info:
         const GHC.Float.isDoubleNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ekX() //  [R1]
         { []
         }
     {offset
       c3ekX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ela; else goto c3el9;
       c3ela: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3el9: // global
           (_s3aVV::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNaN(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aVV::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ekX_info" {
     block_c3ekX_info:
         const _c3ekX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.420341813 UTC

[section ""data" . GHC.Float.isDoubleInfinite_closure" {
     GHC.Float.isDoubleInfinite_closure:
         const GHC.Float.isDoubleInfinite_info;
 },
 GHC.Float.isDoubleInfinite_entry() //  [R2]
         { []
         }
     {offset
       c3elv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3elB; else goto c3elC;
       c3elB: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3elC: // global
           I64[Sp - 8] = block_c3els_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3elG; else goto c3elt;
       u3elG: // global
           call _c3els(R1) args: 0, res: 0, upd: 0;
       c3elt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleInfinite_info" {
     GHC.Float.isDoubleInfinite_info:
         const GHC.Float.isDoubleInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3els() //  [R1]
         { []
         }
     {offset
       c3els: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3elF; else goto c3elE;
       c3elF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3elE: // global
           (_s3aW2::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aW2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3els_info" {
     block_c3els_info:
         const _c3els;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.426503845 UTC

[section ""data" . GHC.Float.isDoubleDenormalized_closure" {
     GHC.Float.isDoubleDenormalized_closure:
         const GHC.Float.isDoubleDenormalized_info;
 },
 GHC.Float.isDoubleDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c3em0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3em6; else goto c3em7;
       c3em6: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3em7: // global
           I64[Sp - 8] = block_c3elX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3emb; else goto c3elY;
       u3emb: // global
           call _c3elX(R1) args: 0, res: 0, upd: 0;
       c3elY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleDenormalized_info" {
     GHC.Float.isDoubleDenormalized_info:
         const GHC.Float.isDoubleDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3elX() //  [R1]
         { []
         }
     {offset
       c3elX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ema; else goto c3em9;
       c3ema: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3em9: // global
           (_s3aW9::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleDenormalized(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aW9::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3elX_info" {
     block_c3elX_info:
         const _c3elX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.434592583 UTC

[section ""data" . GHC.Float.isDoubleNegativeZero_closure" {
     GHC.Float.isDoubleNegativeZero_closure:
         const GHC.Float.isDoubleNegativeZero_info;
 },
 GHC.Float.isDoubleNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c3emv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3emB; else goto c3emC;
       c3emB: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3emC: // global
           I64[Sp - 8] = block_c3ems_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3emG; else goto c3emt;
       u3emG: // global
           call _c3ems(R1) args: 0, res: 0, upd: 0;
       c3emt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleNegativeZero_info" {
     GHC.Float.isDoubleNegativeZero_info:
         const GHC.Float.isDoubleNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ems() //  [R1]
         { []
         }
     {offset
       c3ems: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3emF; else goto c3emE;
       c3emF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3emE: // global
           (_s3aWg::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aWg::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ems_info" {
     block_c3ems_info:
         const _c3ems;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.443405564 UTC

[section ""data" . GHC.Float.isDoubleFinite_closure" {
     GHC.Float.isDoubleFinite_closure:
         const GHC.Float.isDoubleFinite_info;
 },
 GHC.Float.isDoubleFinite_entry() //  [R2]
         { []
         }
     {offset
       c3en0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3en6; else goto c3en7;
       c3en6: // global
           R2 = R2;
           R1 = GHC.Float.isDoubleFinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3en7: // global
           I64[Sp - 8] = block_c3emX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3enb; else goto c3emY;
       u3enb: // global
           call _c3emX(R1) args: 0, res: 0, upd: 0;
       c3emY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.isDoubleFinite_info" {
     GHC.Float.isDoubleFinite_info:
         const GHC.Float.isDoubleFinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3emX() //  [R1]
         { []
         }
     {offset
       c3emX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ena; else goto c3en9;
       c3ena: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3en9: // global
           (_s3aWn::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleFinite(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3aWn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3emX_info" {
     block_c3emX_info:
         const _c3emX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.452927128 UTC

[section ""data" . GHC.Float.$w$cscaleFloat_closure" {
     GHC.Float.$w$cscaleFloat_closure:
         const GHC.Float.$w$cscaleFloat_info;
         const 0;
 },
 GHC.Float.$w$cscaleFloat_slow() //  [R1]
         { []
         }
     {offset
       c3enp: // global
           D1 = F64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Float.$w$cscaleFloat_entry() //  [R2, D1]
         { []
         }
     {offset
       c3enx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eny; else goto c3enz;
       c3eny: // global
           R1 = GHC.Float.$w$cscaleFloat_closure;
           I64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3enz: // global
           _s3aWp::F64 = D1;
           if (R2 == 0) goto c3enw; else goto c3env;
       c3env: // global
           if (%MO_F_Eq_W64(_s3aWp::F64,
                            0.0 :: W64)) goto c3enw; else goto c3eo7;
       c3eo7: // global
           (_s3aWv::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleFinite(_s3aWp::F64);
           if (_s3aWv::I64 == 0) goto c3enw; else goto c3enK;
       c3enw: // global
           D1 = _s3aWp::F64;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       c3enK: // global
           I64[Sp - 16] = block_c3enI_info;
           D1 = _s3aWp::F64;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cscaleFloat_info" {
     GHC.Float.$w$cscaleFloat_info:
         const GHC.Float.$w$cscaleFloat_entry;
         const 0;
         const 12884901902;
         const 8589934592;
         const S3bQP_srt+640;
         const 194;
         const GHC.Float.$w$cscaleFloat_slow;
 },
 _c3enI() //  [R1, R2]
         { []
         }
     {offset
       c3enI: // global
           _s3aWq::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(2257, _s3aWq::I64)) goto c3eo3; else goto c3eo4;
       c3eo3: // global
           _s3aWz::I64 = R2;
           _s3aWy::P64 = R1;
           _s3aWB::I64 = _s3aWq::I64;
           goto s3aWA;
       c3eo4: // global
           _s3aWz::I64 = R2;
           _s3aWy::P64 = R1;
           _s3aWB::I64 = 2257;
           goto s3aWA;
       s3aWA: // global
           if (%MO_S_Gt_W64((-2257),
                            _s3aWB::I64)) goto c3enY; else goto c3enZ;
       c3enY: // global
           R3 = _s3aWz::I64 - 2257;
           R2 = _s3aWy::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
       c3enZ: // global
           R3 = _s3aWz::I64 + _s3aWB::I64;
           R2 = _s3aWy::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.encodeDoubleInteger_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3enI_info" {
     block_c3enI_info:
         const _c3enI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.463808869 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cscaleFloat_closure" {
     GHC.Float.$fRealFloatDouble_$cscaleFloat_closure:
         const GHC.Float.$fRealFloatDouble_$cscaleFloat_info;
         const 0;
 },
 GHC.Float.$fRealFloatDouble_$cscaleFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3eoA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eoN; else goto c3eoO;
       c3eoN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cscaleFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3eoO: // global
           I64[Sp - 16] = block_c3eox_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3eoV; else goto c3eoy;
       u3eoV: // global
           call _c3eox(R1) args: 0, res: 0, upd: 0;
       c3eoy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cscaleFloat_info" {
     GHC.Float.$fRealFloatDouble_$cscaleFloat_info:
         const GHC.Float.$fRealFloatDouble_$cscaleFloat_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3bQP_srt+640;
 },
 _c3eox() //  [R1]
         { []
         }
     {offset
       c3eox: // global
           I64[Sp] = block_c3eoD_info;
           _s3aWJ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3aWJ::I64;
           if (R1 & 7 != 0) goto u3eoU; else goto c3eoE;
       u3eoU: // global
           call _c3eoD(R1) args: 0, res: 0, upd: 0;
       c3eoE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eox_info" {
     block_c3eox_info:
         const _c3eox;
         const 1;
         const 4294967326;
         const S3bQP_srt+640;
 },
 _c3eoD() //  [R1]
         { []
         }
     {offset
       c3eoD: // global
           _s3aWJ::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3eoI_info;
           D1 = F64[R1 + 7];
           R2 = _s3aWJ::I64;
           Sp = Sp + 8;
           call GHC.Float.$w$cscaleFloat_entry(D1,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eoD_info" {
     block_c3eoD_info:
         const _c3eoD;
         const 65;
         const 4294967326;
         const S3bQP_srt+640;
 },
 _c3eoI() //  [D1]
         { []
         }
     {offset
       c3eoI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eoT; else goto c3eoS;
       c3eoT: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3eoS: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eoI_info" {
     block_c3eoI_info:
         const _c3eoI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.473455469 UTC

[section ""data" . GHC.Float.log1pDouble_closure" {
     GHC.Float.log1pDouble_closure:
         const GHC.Float.log1pDouble_info;
 },
 GHC.Float.log1pDouble_entry() //  [R2]
         { []
         }
     {offset
       c3epo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3epu; else goto c3epv;
       c3epu: // global
           R2 = R2;
           R1 = GHC.Float.log1pDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3epv: // global
           I64[Sp - 8] = block_c3epl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3epz; else goto c3epm;
       u3epz: // global
           call _c3epl(R1) args: 0, res: 0, upd: 0;
       c3epm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1pDouble_info" {
     GHC.Float.log1pDouble_info:
         const GHC.Float.log1pDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3epl() //  [R1]
         { []
         }
     {offset
       c3epl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3epy; else goto c3epx;
       c3epy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3epx: // global
           (_s3aWT::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aWT::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3epl_info" {
     block_c3epl_info:
         const _c3epl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.479680237 UTC

[section ""data" . GHC.Float.expm1Double_closure" {
     GHC.Float.expm1Double_closure:
         const GHC.Float.expm1Double_info;
 },
 GHC.Float.expm1Double_entry() //  [R2]
         { []
         }
     {offset
       c3epT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3epZ; else goto c3eq0;
       c3epZ: // global
           R2 = R2;
           R1 = GHC.Float.expm1Double_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eq0: // global
           I64[Sp - 8] = block_c3epQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eq4; else goto c3epR;
       u3eq4: // global
           call _c3epQ(R1) args: 0, res: 0, upd: 0;
       c3epR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expm1Double_info" {
     GHC.Float.expm1Double_info:
         const GHC.Float.expm1Double_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3epQ() //  [R1]
         { []
         }
     {offset
       c3epQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eq3; else goto c3eq2;
       c3eq3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3eq2: // global
           (_s3aX0::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC2ZCbaseZCGHCziFloatZCexpm1(F64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aX0::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3epQ_info" {
     block_c3epQ_info:
         const _c3epQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.486103624 UTC

[section ""data" . lvl4_r2UqC_closure" {
     lvl4_r2UqC_closure:
         const lvl4_r2UqC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r2UqC_entry() //  [R1]
         { []
         }
     {offset
       c3eqq: // global
           _r2UqC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3eqt; else goto c3equ;
       c3equ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eqw; else goto c3eqv;
       c3eqw: // global
           HpAlloc = 16;
           goto c3eqt;
       c3eqt: // global
           R1 = _r2UqC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eqv: // global
           (_c3eqk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UqC::P64);
           if (_c3eqk::I64 == 0) goto c3eqm; else goto c3eql;
       c3eqm: // global
           call (I64[I64[_r2UqC::P64]])() args: 8, res: 0, upd: 8;
       c3eql: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3eqk::I64;
           (_c3eqn::F64) = call MO_F64_Log(2.0 :: W64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3eqn::F64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r2UqC_info" {
     lvl4_r2UqC_info:
         const lvl4_r2UqC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.492507318 UTC

[section ""data" . GHC.Float.$fFloatingDouble_$clog1mexp_closure" {
     GHC.Float.$fFloatingDouble_$clog1mexp_closure:
         const GHC.Float.$fFloatingDouble_$clog1mexp_info;
         const 0;
 },
 GHC.Float.$fFloatingDouble_$clog1mexp_entry() //  [R2]
         { []
         }
     {offset
       c3eqP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eqT; else goto c3eqU;
       c3eqT: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingDouble_$clog1mexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eqU: // global
           I64[Sp - 8] = block_c3eqM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3erv; else goto c3eqN;
       u3erv: // global
           call _c3eqM(R1) args: 0, res: 0, upd: 0;
       c3eqN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingDouble_$clog1mexp_info" {
     GHC.Float.$fFloatingDouble_$clog1mexp_info:
         const GHC.Float.$fFloatingDouble_$clog1mexp_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3bQP_srt+664;
 },
 _c3eqM() //  [R1]
         { []
         }
     {offset
       c3eqM: // global
           I64[Sp - 8] = block_c3eqS_info;
           _s3aX4::F64 = F64[R1 + 7];
           R1 = lvl4_r2UqC_closure;
           F64[Sp] = _s3aX4::F64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eru; else goto c3eqW;
       u3eru: // global
           call _c3eqS(R1) args: 0, res: 0, upd: 0;
       c3eqW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eqM_info" {
     block_c3eqM_info:
         const _c3eqM;
         const 0;
         const 4294967326;
         const S3bQP_srt+672;
 },
 _c3eqS() //  [R1]
         { []
         }
     {offset
       c3eqS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3er2; else goto c3er1;
       c3er2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3er1: // global
           _s3aX4::F64 = F64[Sp + 8];
           if (%MO_F_Le_W64(_s3aX4::F64,
                            F64[R1 + 7])) goto c3ert; else goto c3erh;
       c3ert: // global
           (_s3aXh::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC2ZCbaseZCGHCziFloatZCexpm1(_s3aX4::F64);
           (_c3ero::F64) = call MO_F64_Log(%MO_F_Neg_W64(_s3aXh::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _c3ero::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3erh: // global
           (_c3er6::F64) = call MO_F64_Exp(_s3aX4::F64);
           (_s3aXd::F64) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC3ZCbaseZCGHCziFloatZClog1p(%MO_F_Neg_W64(_c3er6::F64));
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aXd::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eqS_info" {
     block_c3eqS_info:
         const _c3eqS;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.500411116 UTC

[section ""data" . GHC.Float.$fFloatingDouble_closure" {
     GHC.Float.$fFloatingDouble_closure:
         const GHC.Float.C:Floating_con_info;
         const GHC.Float.$fFractionalDouble_closure+1;
         const GHC.Float.$fFloatingDouble_$cpi_closure+1;
         const GHC.Float.expDouble_closure+1;
         const GHC.Float.logDouble_closure+1;
         const GHC.Float.sqrtDouble_closure+1;
         const GHC.Float.powerDouble_closure+2;
         const GHC.Float.$fFloatingDouble_$clogBase_closure+2;
         const GHC.Float.sinDouble_closure+1;
         const GHC.Float.cosDouble_closure+1;
         const GHC.Float.tanDouble_closure+1;
         const GHC.Float.asinDouble_closure+1;
         const GHC.Float.acosDouble_closure+1;
         const GHC.Float.atanDouble_closure+1;
         const GHC.Float.sinhDouble_closure+1;
         const GHC.Float.coshDouble_closure+1;
         const GHC.Float.tanhDouble_closure+1;
         const GHC.Float.$fFloatingDouble_$casinh_closure+1;
         const GHC.Float.$fFloatingDouble_$cacosh_closure+1;
         const GHC.Float.$fFloatingDouble_$catanh_closure+1;
         const GHC.Float.log1pDouble_closure+1;
         const GHC.Float.expm1Double_closure+1;
         const GHC.Float.$fFloatingDouble_$clog1pexp_closure+1;
         const GHC.Float.$fFloatingDouble_$clog1mexp_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.503440702 UTC

[section ""data" . GHC.Float.log1pFloat_closure" {
     GHC.Float.log1pFloat_closure:
         const GHC.Float.log1pFloat_info;
 },
 GHC.Float.log1pFloat_entry() //  [R2]
         { []
         }
     {offset
       c3es2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3es8; else goto c3es9;
       c3es8: // global
           R2 = R2;
           R1 = GHC.Float.log1pFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3es9: // global
           I64[Sp - 8] = block_c3erZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3esd; else goto c3es0;
       u3esd: // global
           call _c3erZ(R1) args: 0, res: 0, upd: 0;
       c3es0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.log1pFloat_info" {
     GHC.Float.log1pFloat_info:
         const GHC.Float.log1pFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3erZ() //  [R1]
         { []
         }
     {offset
       c3erZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3esc; else goto c3esb;
       c3esc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3esb: // global
           (_s3aXq::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aXq::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3erZ_info" {
     block_c3erZ_info:
         const _c3erZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.509874908 UTC

[section ""data" . GHC.Float.expm1Float_closure" {
     GHC.Float.expm1Float_closure:
         const GHC.Float.expm1Float_info;
 },
 GHC.Float.expm1Float_entry() //  [R2]
         { []
         }
     {offset
       c3esx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3esD; else goto c3esE;
       c3esD: // global
           R2 = R2;
           R1 = GHC.Float.expm1Float_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3esE: // global
           I64[Sp - 8] = block_c3esu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3esI; else goto c3esv;
       u3esI: // global
           call _c3esu(R1) args: 0, res: 0, upd: 0;
       c3esv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expm1Float_info" {
     GHC.Float.expm1Float_info:
         const GHC.Float.expm1Float_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3esu() //  [R1]
         { []
         }
     {offset
       c3esu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3esH; else goto c3esG;
       c3esH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3esG: // global
           (_s3aXx::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC0ZCbaseZCGHCziFloatZCexpm1f(F32[R1 + 7]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aXx::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3esu_info" {
     block_c3esu_info:
         const _c3esu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.516489099 UTC

[section ""data" . lvl5_r2UqD_closure" {
     lvl5_r2UqD_closure:
         const lvl5_r2UqD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r2UqD_entry() //  [R1]
         { []
         }
     {offset
       c3et4: // global
           _r2UqD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3et7; else goto c3et8;
       c3et8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eta; else goto c3et9;
       c3eta: // global
           HpAlloc = 16;
           goto c3et7;
       c3et7: // global
           R1 = _r2UqD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3et9: // global
           (_c3esY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r2UqD::P64);
           if (_c3esY::I64 == 0) goto c3et0; else goto c3esZ;
       c3et0: // global
           call (I64[I64[_r2UqD::P64]])() args: 8, res: 0, upd: 8;
       c3esZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3esY::I64;
           (_c3et1::F32) = call MO_F32_Log(2.0 :: W32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3et1::F32;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r2UqD_info" {
     lvl5_r2UqD_info:
         const lvl5_r2UqD_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.521964302 UTC

[section ""data" . GHC.Float.$fFloatingFloat_$clog1mexp_closure" {
     GHC.Float.$fFloatingFloat_$clog1mexp_closure:
         const GHC.Float.$fFloatingFloat_$clog1mexp_info;
         const 0;
 },
 GHC.Float.$fFloatingFloat_$clog1mexp_entry() //  [R2]
         { []
         }
     {offset
       c3ett: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3etx; else goto c3ety;
       c3etx: // global
           R2 = R2;
           R1 = GHC.Float.$fFloatingFloat_$clog1mexp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ety: // global
           I64[Sp - 8] = block_c3etq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eu9; else goto c3etr;
       u3eu9: // global
           call _c3etq(R1) args: 0, res: 0, upd: 0;
       c3etr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fFloatingFloat_$clog1mexp_info" {
     GHC.Float.$fFloatingFloat_$clog1mexp_info:
         const GHC.Float.$fFloatingFloat_$clog1mexp_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3bQP_srt+680;
 },
 _c3etq() //  [R1]
         { []
         }
     {offset
       c3etq: // global
           I64[Sp - 8] = block_c3etw_info;
           _s3aXB::F32 = F32[R1 + 7];
           R1 = lvl5_r2UqD_closure;
           F32[Sp] = _s3aXB::F32;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eu8; else goto c3etA;
       u3eu8: // global
           call _c3etw(R1) args: 0, res: 0, upd: 0;
       c3etA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3etq_info" {
     block_c3etq_info:
         const _c3etq;
         const 0;
         const 4294967326;
         const S3bQP_srt+688;
 },
 _c3etw() //  [R1]
         { []
         }
     {offset
       c3etw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3etG; else goto c3etF;
       c3etG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3etF: // global
           _s3aXB::F32 = F32[Sp + 8];
           if (%MO_F_Le_W32(_s3aXB::F32,
                            F32[R1 + 7])) goto c3eu7; else goto c3etV;
       c3eu7: // global
           (_s3aXO::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC0ZCbaseZCGHCziFloatZCexpm1f(_s3aXB::F32);
           (_c3eu2::F32) = call MO_F32_Log(%MO_F_Neg_W32(_s3aXO::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _c3eu2::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3etV: // global
           (_c3etK::F32) = call MO_F32_Exp(_s3aXB::F32);
           (_s3aXK::F32) = call "capi" arg hints:  []  result hints:  [] ghczuwrapperZC1ZCbaseZCGHCziFloatZClog1pf(%MO_F_Neg_W32(_c3etK::F32));
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aXK::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3etw_info" {
     block_c3etw_info:
         const _c3etw;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.530750767 UTC

[section ""data" . GHC.Float.$fFloatingFloat_closure" {
     GHC.Float.$fFloatingFloat_closure:
         const GHC.Float.C:Floating_con_info;
         const GHC.Float.$fFractionalFloat_closure+1;
         const GHC.Float.$fFloatingFloat_$cpi_closure+1;
         const GHC.Float.expFloat_closure+1;
         const GHC.Float.logFloat_closure+1;
         const GHC.Float.sqrtFloat_closure+1;
         const GHC.Float.powerFloat_closure+2;
         const GHC.Float.$fFloatingFloat_$clogBase_closure+2;
         const GHC.Float.sinFloat_closure+1;
         const GHC.Float.cosFloat_closure+1;
         const GHC.Float.tanFloat_closure+1;
         const GHC.Float.asinFloat_closure+1;
         const GHC.Float.acosFloat_closure+1;
         const GHC.Float.atanFloat_closure+1;
         const GHC.Float.sinhFloat_closure+1;
         const GHC.Float.coshFloat_closure+1;
         const GHC.Float.tanhFloat_closure+1;
         const GHC.Float.$fFloatingFloat_$casinh_closure+1;
         const GHC.Float.$fFloatingFloat_$cacosh_closure+1;
         const GHC.Float.$fFloatingFloat_$catanh_closure+1;
         const GHC.Float.log1pFloat_closure+1;
         const GHC.Float.expm1Float_closure+1;
         const GHC.Float.$fFloatingFloat_$clog1pexp_closure+1;
         const GHC.Float.$fFloatingFloat_$clog1mexp_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.533509698 UTC

[section ""data" . GHC.Float.stgWord32ToFloat_closure" {
     GHC.Float.stgWord32ToFloat_closure:
         const GHC.Float.stgWord32ToFloat_info;
 },
 GHC.Float.stgWord32ToFloat_entry() //  [R2]
         { []
         }
     {offset
       c3euD: // global
           R1 = R2;
           call stg_word32ToFloatzh(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.stgWord32ToFloat_info" {
     GHC.Float.stgWord32ToFloat_info:
         const GHC.Float.stgWord32ToFloat_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.5384775 UTC

[section ""data" . GHC.Float.castWord32ToFloat_closure" {
     GHC.Float.castWord32ToFloat_closure:
         const GHC.Float.castWord32ToFloat_info;
 },
 GHC.Float.castWord32ToFloat_entry() //  [R2]
         { []
         }
     {offset
       c3euR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3euZ; else goto c3ev0;
       c3euZ: // global
           R2 = R2;
           R1 = GHC.Float.castWord32ToFloat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ev0: // global
           I64[Sp - 8] = block_c3euO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ev5; else goto c3euP;
       u3ev5: // global
           call _c3euO(R1) args: 0, res: 0, upd: 0;
       c3euP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.castWord32ToFloat_info" {
     GHC.Float.castWord32ToFloat_info:
         const GHC.Float.castWord32ToFloat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3euO() //  [R1]
         { []
         }
     {offset
       c3euO: // global
           I64[Sp] = block_c3euU_info;
           R1 = I64[R1 + 7];
           call stg_word32ToFloatzh(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3euO_info" {
     block_c3euO_info:
         const _c3euO;
         const 0;
         const 30;
 },
 _c3euU() //  [F1]
         { []
         }
     {offset
       c3euU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ev4; else goto c3ev3;
       c3ev4: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3ev3: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3euU_info" {
     block_c3euU_info:
         const _c3euU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.545508566 UTC

[section ""data" . GHC.Float.stgFloatToWord32_closure" {
     GHC.Float.stgFloatToWord32_closure:
         const GHC.Float.stgFloatToWord32_info;
 },
 GHC.Float.stgFloatToWord32_entry() //  [F1]
         { []
         }
     {offset
       c3evq: // global
           F1 = F1;
           call stg_floatToWord32zh(F1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.stgFloatToWord32_info" {
     GHC.Float.stgFloatToWord32_info:
         const GHC.Float.stgFloatToWord32_entry;
         const 0;
         const 14;
         const 4294967302;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.55000358 UTC

[section ""data" . GHC.Float.castFloatToWord32_closure" {
     GHC.Float.castFloatToWord32_closure:
         const GHC.Float.castFloatToWord32_info;
 },
 GHC.Float.castFloatToWord32_entry() //  [R2]
         { []
         }
     {offset
       c3evE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3evM; else goto c3evN;
       c3evM: // global
           R2 = R2;
           R1 = GHC.Float.castFloatToWord32_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3evN: // global
           I64[Sp - 8] = block_c3evB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3evS; else goto c3evC;
       u3evS: // global
           call _c3evB(R1) args: 0, res: 0, upd: 0;
       c3evC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.castFloatToWord32_info" {
     GHC.Float.castFloatToWord32_info:
         const GHC.Float.castFloatToWord32_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3evB() //  [R1]
         { []
         }
     {offset
       c3evB: // global
           I64[Sp] = block_c3evH_info;
           F1 = F32[R1 + 7];
           call stg_floatToWord32zh(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3evB_info" {
     block_c3evB_info:
         const _c3evB;
         const 0;
         const 30;
 },
 _c3evH() //  [R1]
         { []
         }
     {offset
       c3evH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3evR; else goto c3evQ;
       c3evR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3evQ: // global
           I64[Hp - 8] = GHC.Word.W32#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3evH_info" {
     block_c3evH_info:
         const _c3evH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.556909596 UTC

[section ""data" . GHC.Float.stgWord64ToDouble_closure" {
     GHC.Float.stgWord64ToDouble_closure:
         const GHC.Float.stgWord64ToDouble_info;
 },
 GHC.Float.stgWord64ToDouble_entry() //  [R2]
         { []
         }
     {offset
       c3ewd: // global
           R1 = R2;
           call stg_word64ToDoublezh(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.stgWord64ToDouble_info" {
     GHC.Float.stgWord64ToDouble_info:
         const GHC.Float.stgWord64ToDouble_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.561354963 UTC

[section ""data" . GHC.Float.castWord64ToDouble_closure" {
     GHC.Float.castWord64ToDouble_closure:
         const GHC.Float.castWord64ToDouble_info;
 },
 GHC.Float.castWord64ToDouble_entry() //  [R2]
         { []
         }
     {offset
       c3ewr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ewz; else goto c3ewA;
       c3ewz: // global
           R2 = R2;
           R1 = GHC.Float.castWord64ToDouble_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ewA: // global
           I64[Sp - 8] = block_c3ewo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ewF; else goto c3ewp;
       u3ewF: // global
           call _c3ewo(R1) args: 0, res: 0, upd: 0;
       c3ewp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.castWord64ToDouble_info" {
     GHC.Float.castWord64ToDouble_info:
         const GHC.Float.castWord64ToDouble_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ewo() //  [R1]
         { []
         }
     {offset
       c3ewo: // global
           I64[Sp] = block_c3ewu_info;
           R1 = I64[R1 + 7];
           call stg_word64ToDoublezh(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ewo_info" {
     block_c3ewo_info:
         const _c3ewo;
         const 0;
         const 30;
 },
 _c3ewu() //  [D1]
         { []
         }
     {offset
       c3ewu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ewE; else goto c3ewD;
       c3ewE: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3ewD: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ewu_info" {
     block_c3ewu_info:
         const _c3ewu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.56890028 UTC

[section ""data" . GHC.Float.stgDoubleToWord64_closure" {
     GHC.Float.stgDoubleToWord64_closure:
         const GHC.Float.stgDoubleToWord64_info;
 },
 GHC.Float.stgDoubleToWord64_entry() //  [D1]
         { []
         }
     {offset
       c3ex0: // global
           D1 = D1;
           call stg_doubleToWord64zh(D1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.stgDoubleToWord64_info" {
     GHC.Float.stgDoubleToWord64_info:
         const GHC.Float.stgDoubleToWord64_entry;
         const 0;
         const 14;
         const 4294967303;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.573120135 UTC

[section ""data" . GHC.Float.castDoubleToWord64_closure" {
     GHC.Float.castDoubleToWord64_closure:
         const GHC.Float.castDoubleToWord64_info;
 },
 GHC.Float.castDoubleToWord64_entry() //  [R2]
         { []
         }
     {offset
       c3exe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3exm; else goto c3exn;
       c3exm: // global
           R2 = R2;
           R1 = GHC.Float.castDoubleToWord64_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3exn: // global
           I64[Sp - 8] = block_c3exb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3exs; else goto c3exc;
       u3exs: // global
           call _c3exb(R1) args: 0, res: 0, upd: 0;
       c3exc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.castDoubleToWord64_info" {
     GHC.Float.castDoubleToWord64_info:
         const GHC.Float.castDoubleToWord64_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3exb() //  [R1]
         { []
         }
     {offset
       c3exb: // global
           I64[Sp] = block_c3exh_info;
           D1 = F64[R1 + 7];
           call stg_doubleToWord64zh(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3exb_info" {
     block_c3exb_info:
         const _c3exb;
         const 0;
         const 30;
 },
 _c3exh() //  [R1]
         { []
         }
     {offset
       c3exh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3exr; else goto c3exq;
       c3exr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3exq: // global
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3exh_info" {
     block_c3exh_info:
         const _c3exh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.581713586 UTC

[section ""data" . GHC.Float.$fEnumFloat_$csucc_closure" {
     GHC.Float.$fEnumFloat_$csucc_closure:
         const GHC.Float.$fEnumFloat_$csucc_info;
 },
 GHC.Float.$fEnumFloat_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c3exQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3exX; else goto c3exY;
       c3exX: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3exY: // global
           I64[Sp - 8] = block_c3exN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ey2; else goto c3exO;
       u3ey2: // global
           call _c3exN(R1) args: 0, res: 0, upd: 0;
       c3exO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$csucc_info" {
     GHC.Float.$fEnumFloat_$csucc_info:
         const GHC.Float.$fEnumFloat_$csucc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3exN() //  [R1]
         { []
         }
     {offset
       c3exN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ey1; else goto c3ey0;
       c3ey1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ey0: // global
           _s3aYi::F32 = %MO_F_Add_W32(F32[R1 + 7], 1.0 :: W32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aYi::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3exN_info" {
     block_c3exN_info:
         const _c3exN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.588497871 UTC

[section ""data" . GHC.Float.$fEnumFloat_$cpred_closure" {
     GHC.Float.$fEnumFloat_$cpred_closure:
         const GHC.Float.$fEnumFloat_$cpred_info;
 },
 GHC.Float.$fEnumFloat_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c3eyo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eyv; else goto c3eyw;
       c3eyv: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eyw: // global
           I64[Sp - 8] = block_c3eyl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eyA; else goto c3eym;
       u3eyA: // global
           call _c3eyl(R1) args: 0, res: 0, upd: 0;
       c3eym: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$cpred_info" {
     GHC.Float.$fEnumFloat_$cpred_info:
         const GHC.Float.$fEnumFloat_$cpred_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eyl() //  [R1]
         { []
         }
     {offset
       c3eyl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eyz; else goto c3eyy;
       c3eyz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3eyy: // global
           _s3aYm::F32 = %MO_F_Sub_W32(F32[R1 + 7], 1.0 :: W32);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3aYm::F32;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eyl_info" {
     block_c3eyl_info:
         const _c3eyl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.594185761 UTC

[section ""data" . GHC.Float.$fRealFloat_closure" {
     GHC.Float.$fRealFloat_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Float.$fNumFloat_closure+1;
         const GHC.Classes.$fOrdFloat_closure;
         const GHC.Float.$fRealFloat_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.595958991 UTC

[section ""data" . GHC.Float.$fRealFracFloat_closure" {
     GHC.Float.$fRealFracFloat_closure:
         const GHC.Real.C:RealFrac_con_info;
         const GHC.Float.$fRealFloat_closure+1;
         const GHC.Float.$fFractionalFloat_closure+1;
         const GHC.Float.$fRealFracFloat_$cproperFraction_closure+2;
         const GHC.Float.$fRealFracFloat_$ctruncate_closure+2;
         const GHC.Float.$fRealFracFloat_$cround_closure+2;
         const GHC.Float.$fRealFracFloat_$cceiling_closure+2;
         const GHC.Float.$fRealFracFloat_$cfloor_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.599513578 UTC

[section ""data" . GHC.Float.$fEnumDouble_$csucc_closure" {
     GHC.Float.$fEnumDouble_$csucc_closure:
         const GHC.Float.$fEnumDouble_$csucc_info;
 },
 GHC.Float.$fEnumDouble_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c3eyY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ez5; else goto c3ez6;
       c3ez5: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ez6: // global
           I64[Sp - 8] = block_c3eyV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eza; else goto c3eyW;
       u3eza: // global
           call _c3eyV(R1) args: 0, res: 0, upd: 0;
       c3eyW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$csucc_info" {
     GHC.Float.$fEnumDouble_$csucc_info:
         const GHC.Float.$fEnumDouble_$csucc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eyV() //  [R1]
         { []
         }
     {offset
       c3eyV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ez9; else goto c3ez8;
       c3ez9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ez8: // global
           _s3aYq::F64 = %MO_F_Add_W64(F64[R1 + 7], 1.0 :: W64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aYq::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eyV_info" {
     block_c3eyV_info:
         const _c3eyV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.606892664 UTC

[section ""data" . GHC.Float.$fEnumDouble_$cpred_closure" {
     GHC.Float.$fEnumDouble_$cpred_closure:
         const GHC.Float.$fEnumDouble_$cpred_info;
 },
 GHC.Float.$fEnumDouble_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c3ezw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ezD; else goto c3ezE;
       c3ezD: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ezE: // global
           I64[Sp - 8] = block_c3ezt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ezI; else goto c3ezu;
       u3ezI: // global
           call _c3ezt(R1) args: 0, res: 0, upd: 0;
       c3ezu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$cpred_info" {
     GHC.Float.$fEnumDouble_$cpred_info:
         const GHC.Float.$fEnumDouble_$cpred_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ezt() //  [R1]
         { []
         }
     {offset
       c3ezt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ezH; else goto c3ezG;
       c3ezH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ezG: // global
           _s3aYu::F64 = %MO_F_Sub_W64(F64[R1 + 7], 1.0 :: W64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3aYu::F64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ezt_info" {
     block_c3ezt_info:
         const _c3ezt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.612488524 UTC

[section ""data" . GHC.Float.$fRealDouble_closure" {
     GHC.Float.$fRealDouble_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Float.$fNumDouble_closure+1;
         const GHC.Classes.$fOrdDouble_closure;
         const GHC.Float.$fRealDouble_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.614500841 UTC

[section ""data" . GHC.Float.$fRealFracDouble_closure" {
     GHC.Float.$fRealFracDouble_closure:
         const GHC.Real.C:RealFrac_con_info;
         const GHC.Float.$fRealDouble_closure+1;
         const GHC.Float.$fFractionalDouble_closure+1;
         const GHC.Float.$fRealFracDouble_$cproperFraction_closure+2;
         const GHC.Float.$fRealFracDouble_$ctruncate_closure+2;
         const GHC.Float.$fRealFracDouble_$cround_closure+2;
         const GHC.Float.$fRealFracDouble_$cceiling_closure+2;
         const GHC.Float.$fRealFracDouble_$cfloor_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.617596825 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisNaN_closure" {
     GHC.Float.$fRealFloatDouble_$cisNaN_closure:
         const GHC.Float.$fRealFloatDouble_$cisNaN_info;
 },
 GHC.Float.$fRealFloatDouble_$cisNaN_entry() //  [R2]
         { []
         }
     {offset
       c3eA6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eA7; else goto c3eA8;
       c3eA7: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cisNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eA8: // global
           I64[Sp - 8] = block_c3eA3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eAi; else goto c3eA4;
       u3eAi: // global
           call _c3eA3(R1) args: 0, res: 0, upd: 0;
       c3eA4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisNaN_info" {
     GHC.Float.$fRealFloatDouble_$cisNaN_info:
         const GHC.Float.$fRealFloatDouble_$cisNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eA3() //  [R1]
         { []
         }
     {offset
       c3eA3: // global
           (_s3aYB::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNaN(F64[R1 + 7]);
           if (_s3aYB::I64 == 0) goto c3eAh; else goto c3eAg;
       c3eAh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eAg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eA3_info" {
     block_c3eA3_info:
         const _c3eA3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.623887769 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisInfinite_closure" {
     GHC.Float.$fRealFloatDouble_$cisInfinite_closure:
         const GHC.Float.$fRealFloatDouble_$cisInfinite_info;
 },
 GHC.Float.$fRealFloatDouble_$cisInfinite_entry() //  [R2]
         { []
         }
     {offset
       c3eAE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eAF; else goto c3eAG;
       c3eAF: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cisInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eAG: // global
           I64[Sp - 8] = block_c3eAB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eAQ; else goto c3eAC;
       u3eAQ: // global
           call _c3eAB(R1) args: 0, res: 0, upd: 0;
       c3eAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisInfinite_info" {
     GHC.Float.$fRealFloatDouble_$cisInfinite_info:
         const GHC.Float.$fRealFloatDouble_$cisInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eAB() //  [R1]
         { []
         }
     {offset
       c3eAB: // global
           (_s3aYJ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(F64[R1 + 7]);
           if (_s3aYJ::I64 == 0) goto c3eAP; else goto c3eAO;
       c3eAP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eAO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eAB_info" {
     block_c3eAB_info:
         const _c3eAB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.630902905 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisDenormalized_closure" {
     GHC.Float.$fRealFloatDouble_$cisDenormalized_closure:
         const GHC.Float.$fRealFloatDouble_$cisDenormalized_info;
 },
 GHC.Float.$fRealFloatDouble_$cisDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c3eBc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eBd; else goto c3eBe;
       c3eBd: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cisDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eBe: // global
           I64[Sp - 8] = block_c3eB9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eBo; else goto c3eBa;
       u3eBo: // global
           call _c3eB9(R1) args: 0, res: 0, upd: 0;
       c3eBa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisDenormalized_info" {
     GHC.Float.$fRealFloatDouble_$cisDenormalized_info:
         const GHC.Float.$fRealFloatDouble_$cisDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eB9() //  [R1]
         { []
         }
     {offset
       c3eB9: // global
           (_s3aYR::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleDenormalized(F64[R1 + 7]);
           if (_s3aYR::I64 == 0) goto c3eBn; else goto c3eBm;
       c3eBn: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eBm: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eB9_info" {
     block_c3eB9_info:
         const _c3eB9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.637645835 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cisNegativeZero_closure" {
     GHC.Float.$fRealFloatDouble_$cisNegativeZero_closure:
         const GHC.Float.$fRealFloatDouble_$cisNegativeZero_info;
 },
 GHC.Float.$fRealFloatDouble_$cisNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c3eBK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eBL; else goto c3eBM;
       c3eBL: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$cisNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eBM: // global
           I64[Sp - 8] = block_c3eBH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eBW; else goto c3eBI;
       u3eBW: // global
           call _c3eBH(R1) args: 0, res: 0, upd: 0;
       c3eBI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cisNegativeZero_info" {
     GHC.Float.$fRealFloatDouble_$cisNegativeZero_info:
         const GHC.Float.$fRealFloatDouble_$cisNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eBH() //  [R1]
         { []
         }
     {offset
       c3eBH: // global
           (_s3aYZ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[R1 + 7]);
           if (_s3aYZ::I64 == 0) goto c3eBV; else goto c3eBU;
       c3eBV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eBU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eBH_info" {
     block_c3eBH_info:
         const _c3eBH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.644352471 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisNaN_closure" {
     GHC.Float.$fRealFloatFloat_$cisNaN_closure:
         const GHC.Float.$fRealFloatFloat_$cisNaN_info;
 },
 GHC.Float.$fRealFloatFloat_$cisNaN_entry() //  [R2]
         { []
         }
     {offset
       c3eCi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eCj; else goto c3eCk;
       c3eCj: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cisNaN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eCk: // global
           I64[Sp - 8] = block_c3eCf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eCu; else goto c3eCg;
       u3eCu: // global
           call _c3eCf(R1) args: 0, res: 0, upd: 0;
       c3eCg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisNaN_info" {
     GHC.Float.$fRealFloatFloat_$cisNaN_info:
         const GHC.Float.$fRealFloatFloat_$cisNaN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eCf() //  [R1]
         { []
         }
     {offset
       c3eCf: // global
           (_s3aZ7::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNaN(F32[R1 + 7]);
           if (_s3aZ7::I64 == 0) goto c3eCt; else goto c3eCs;
       c3eCt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eCs: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eCf_info" {
     block_c3eCf_info:
         const _c3eCf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.651933542 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisInfinite_closure" {
     GHC.Float.$fRealFloatFloat_$cisInfinite_closure:
         const GHC.Float.$fRealFloatFloat_$cisInfinite_info;
 },
 GHC.Float.$fRealFloatFloat_$cisInfinite_entry() //  [R2]
         { []
         }
     {offset
       c3eCQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eCR; else goto c3eCS;
       c3eCR: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cisInfinite_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eCS: // global
           I64[Sp - 8] = block_c3eCN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eD2; else goto c3eCO;
       u3eD2: // global
           call _c3eCN(R1) args: 0, res: 0, upd: 0;
       c3eCO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisInfinite_info" {
     GHC.Float.$fRealFloatFloat_$cisInfinite_info:
         const GHC.Float.$fRealFloatFloat_$cisInfinite_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eCN() //  [R1]
         { []
         }
     {offset
       c3eCN: // global
           (_s3aZf::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(F32[R1 + 7]);
           if (_s3aZf::I64 == 0) goto c3eD1; else goto c3eD0;
       c3eD1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eD0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eCN_info" {
     block_c3eCN_info:
         const _c3eCN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.658492052 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisDenormalized_closure" {
     GHC.Float.$fRealFloatFloat_$cisDenormalized_closure:
         const GHC.Float.$fRealFloatFloat_$cisDenormalized_info;
 },
 GHC.Float.$fRealFloatFloat_$cisDenormalized_entry() //  [R2]
         { []
         }
     {offset
       c3eDo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eDp; else goto c3eDq;
       c3eDp: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cisDenormalized_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eDq: // global
           I64[Sp - 8] = block_c3eDl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eDA; else goto c3eDm;
       u3eDA: // global
           call _c3eDl(R1) args: 0, res: 0, upd: 0;
       c3eDm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisDenormalized_info" {
     GHC.Float.$fRealFloatFloat_$cisDenormalized_info:
         const GHC.Float.$fRealFloatFloat_$cisDenormalized_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eDl() //  [R1]
         { []
         }
     {offset
       c3eDl: // global
           (_s3aZn::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatDenormalized(F32[R1 + 7]);
           if (_s3aZn::I64 == 0) goto c3eDz; else goto c3eDy;
       c3eDz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eDy: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eDl_info" {
     block_c3eDl_info:
         const _c3eDl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.664928393 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cisNegativeZero_closure" {
     GHC.Float.$fRealFloatFloat_$cisNegativeZero_closure:
         const GHC.Float.$fRealFloatFloat_$cisNegativeZero_info;
 },
 GHC.Float.$fRealFloatFloat_$cisNegativeZero_entry() //  [R2]
         { []
         }
     {offset
       c3eDW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eDX; else goto c3eDY;
       c3eDX: // global
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$cisNegativeZero_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eDY: // global
           I64[Sp - 8] = block_c3eDT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eE8; else goto c3eDU;
       u3eE8: // global
           call _c3eDT(R1) args: 0, res: 0, upd: 0;
       c3eDU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cisNegativeZero_info" {
     GHC.Float.$fRealFloatFloat_$cisNegativeZero_info:
         const GHC.Float.$fRealFloatFloat_$cisNegativeZero_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3eDT() //  [R1]
         { []
         }
     {offset
       c3eDT: // global
           (_s3aZv::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[R1 + 7]);
           if (_s3aZv::I64 == 0) goto c3eE7; else goto c3eE6;
       c3eE7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eE6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eDT_info" {
     block_c3eDT_info:
         const _c3eDT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.670153443 UTC

[section ""cstring" . lvl6_r2UqE_bytes" {
     lvl6_r2UqE_bytes:
         I8[] [73,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.672496593 UTC

[section ""data" . lvl7_r2UqF_closure" {
     lvl7_r2UqF_closure:
         const lvl7_r2UqF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2UqF_entry() //  [R1]
         { []
         }
     {offset
       c3eEu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eEv; else goto c3eEw;
       c3eEv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eEw: // global
           (_c3eEr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3eEr::I64 == 0) goto c3eEt; else goto c3eEs;
       c3eEt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3eEs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3eEr::I64;
           R2 = lvl6_r2UqE_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r2UqF_info" {
     lvl7_r2UqF_info:
         const lvl7_r2UqF_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.677346151 UTC

[section ""data" . GHC.Float.expts2_closure" {
     GHC.Float.expts2_closure:
         const GHC.Float.expts2_info;
         const 0;
 },
 GHC.Float.expts2_entry() //  [R2]
         { []
         }
     {offset
       c3eEK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eEO; else goto c3eEN;
       c3eEO: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Float.expts2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eEN: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R6 = lvl7_r2UqF_closure;
           R5 = Hp - 7;
           R4 = GHC.Float.maxExpt_closure+1;
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expts2_info" {
     GHC.Float.expts2_info:
         const GHC.Float.expts2_entry;
         const 0;
         const 30064771086;
         const 4294967300;
         const S3bQP_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.684160716 UTC

[section ""data" . GHC.Float.expts1_closure" {
     GHC.Float.expts1_closure:
         const GHC.Float.expts1_info;
         const 0;
 },
 sat_s3aZS_entry() //  [R1]
         { []
         }
     {offset
       c3eFo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eFp; else goto c3eFv;
       c3eFp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eFv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s3aZK::I64 = I64[R1 + 16];
           if (%MO_S_Ge_W64(_s3aZK::I64, 0)) goto c3eFm; else goto c3eFn;
       c3eFm: // global
           if (_s3aZK::I64 == 0) goto c3eFu; else goto c3eFt;
       c3eFu: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3eFt: // global
           R3 = _s3aZK::I64;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Real.$wf_entry(R3, R2) args: 24, res: 0, upd: 24;
       c3eFn: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3aZS_info" {
     sat_s3aZS_info:
         const sat_s3aZS_entry;
         const 4294967296;
         const 70398808948753;
         const S3bQP_srt+440;
 },
 section ""relreadonly" . u3eG3_srtd" {
     u3eG3_srtd:
         const S3bQP_srt+440;
         const 37;
         const 111669166087;
 },
 GHC.Float.expts1_entry() //  []
         { []
         }
     {offset
       c3eFw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eFx; else goto c3eFy;
       c3eFx: // global
           R1 = GHC.Float.expts1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c3eFy: // global
           I64[Sp - 8] = block_c3eEY_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = 1101;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expts1_info" {
     GHC.Float.expts1_info:
         const GHC.Float.expts1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967299;
         const u3eG3_srtd;
 },
 section ""relreadonly" . u3eG4_srtd" {
     u3eG4_srtd:
         const S3bQP_srt+440;
         const 34;
         const 8589950983;
 },
 _c3eEY() //  [R1]
         { []
         }
     {offset
       c3eEY: // global
           I64[Sp - 8] = 0;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3eF5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eEY_info" {
     block_c3eEY_info:
         const _c3eEY;
         const 0;
         const 18446744069414584350;
         const u3eG4_srtd;
 },
 _c3eF5() //  []
         { []
         }
     {offset
       c3eF5: // global
           Hp = Hp + 24;
           _s3aZK::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c3eFJ; else goto c3eFI;
       c3eFJ: // global
           HpAlloc = 24;
           I64[Sp] = block_c3eF4_info;
           R1 = _s3aZK::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3eFI: // global
           if (%MO_S_Gt_W64(0, _s3aZK::I64)) goto c3eFN; else goto c3eFT;
       c3eFT: // global
           if (%MO_S_Gt_W64(_s3aZK::I64, 1100)) goto c3eFN; else goto c3eFS;
       c3eFN: // global
           Hp = Hp - 24;
           R2 = _s3aZK::I64;
           Sp = Sp + 16;
           call GHC.Float.expts2_entry(R2) args: 8, res: 0, upd: 8;
       c3eFS: // global
           I64[Hp - 16] = sat_s3aZS_info;
           I64[Hp] = _s3aZK::I64;
           _s3aZC::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s3aZC::P64 + 24) + (_s3aZK::I64 << 3)] = Hp - 16;
           I64[_s3aZC::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s3aZC::P64 + 24) + ((I64[_s3aZC::P64 + 8] << 3) + (_s3aZK::I64 >> 7))] = 1 :: W8;
           if (_s3aZK::I64 == 1100) goto u3eG1; else goto c3eFQ;
       u3eG1: // global
           call _c3eFB() args: 0, res: 0, upd: 0;
       c3eFQ: // global
           I64[Sp] = _s3aZK::I64 + 1;
           call _c3eF5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . u3eG5_srtd" {
     u3eG5_srtd:
         const S3bQP_srt+440;
         const 34;
         const 8589950983;
 },
 _c3eF4() //  [R1]
         { []
         }
     {offset
       c3eF4: // global
           I64[Sp] = R1;
           call _c3eF5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eF4_info" {
     block_c3eF4_info:
         const _c3eF4;
         const 1;
         const 18446744069414584350;
         const u3eG5_srtd;
 },
 _c3eFB() //  []
         { []
         }
     {offset
       c3eFB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3eFG; else goto c3eFF;
       c3eFG: // global
           HpAlloc = 40;
           I64[Sp] = block_c3eFB_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3eFF: // global
           _s3aZC::P64 = P64[Sp + 8];
           I64[_s3aZC::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = GHC.Float.maxExpt_closure+1;
           P64[Hp - 8] = _s3aZC::P64;
           I64[Hp] = 1101;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eFB_info" {
     block_c3eFB_info:
         const _c3eFB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.700209971 UTC

[section ""data" . GHC.Float.expts_closure" {
     GHC.Float.expts_closure:
         const GHC.Float.expts_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.expts_entry() //  [R1]
         { []
         }
     {offset
       c3eGU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3eGV; else goto c3eGW;
       c3eGV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eGW: // global
           (_c3eGP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3eGP::I64 == 0) goto c3eGR; else goto c3eGQ;
       c3eGR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3eGQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3eGP::I64;
           I64[Sp - 24] = block_c3eGS_info;
           Sp = Sp - 24;
           call GHC.Float.expts1_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.expts_info" {
     GHC.Float.expts_info:
         const GHC.Float.expts_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+728;
 },
 _c3eGS() //  [R1]
         { []
         }
     {offset
       c3eGS: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3eGS_info" {
     block_c3eGS_info:
         const _c3eGS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.705469151 UTC

[section ""data" . sat_s3aZZ_closure" {
     sat_s3aZZ_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.707322455 UTC

[section ""data" . sat_s3b00_closure" {
     sat_s3b00_closure:
         const :_con_info;
         const sat_s3aZZ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.710005369 UTC

[section ""data" . GHC.Float.expts4_closure" {
     GHC.Float.expts4_closure:
         const GHC.Float.expts4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.expts4_entry() //  [R1]
         { []
         }
     {offset
       c3eHk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eHl; else goto c3eHm;
       c3eHl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eHm: // global
           (_c3eHh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3eHh::I64 == 0) goto c3eHj; else goto c3eHi;
       c3eHj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3eHi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3eHh::I64;
           R3 = sat_s3b00_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.expts4_info" {
     GHC.Float.expts4_info:
         const GHC.Float.expts4_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.714782935 UTC

[section ""data" . GHC.Float.expts5_closure" {
     GHC.Float.expts5_closure:
         const GHC.Float.expts5_info;
         const 0;
 },
 GHC.Float.expts5_entry() //  [R2]
         { []
         }
     {offset
       c3eHB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eHF; else goto c3eHE;
       c3eHF: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Float.expts5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3eHE: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R2;
           R6 = lvl7_r2UqF_closure;
           R5 = Hp - 7;
           R4 = GHC.Float.maxExpt10_closure+1;
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expts5_info" {
     GHC.Float.expts5_info:
         const GHC.Float.expts5_entry;
         const 0;
         const 296352743438;
         const 4294967300;
         const S3bQP_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.722024431 UTC

[section ""data" . GHC.Float.expts3_closure" {
     GHC.Float.expts3_closure:
         const GHC.Float.expts3_info;
         const 0;
 },
 sat_s3b0m_entry() //  [R1]
         { []
         }
     {offset
       c3eIf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eIg; else goto c3eIm;
       c3eIg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eIm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s3b0e::I64 = I64[R1 + 16];
           if (%MO_S_Ge_W64(_s3b0e::I64, 0)) goto c3eId; else goto c3eIe;
       c3eId: // global
           if (_s3b0e::I64 == 0) goto c3eIl; else goto c3eIk;
       c3eIl: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3eIk: // global
           R3 = _s3b0e::I64;
           R2 = GHC.Float.expts4_closure;
           Sp = Sp - 16;
           call GHC.Real.$wf_entry(R3, R2) args: 24, res: 0, upd: 24;
       c3eIe: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b0m_info" {
     sat_s3b0m_info:
         const sat_s3b0m_entry;
         const 4294967296;
         const 64424509457;
         const S3bQP_srt+752;
 },
 GHC.Float.expts3_entry() //  []
         { []
         }
     {offset
       c3eIn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eIo; else goto c3eIp;
       c3eIo: // global
           R1 = GHC.Float.expts3_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c3eIp: // global
           I64[Sp - 8] = block_c3eHP_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = 325;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expts3_info" {
     GHC.Float.expts3_info:
         const GHC.Float.expts3_entry;
         const 0;
         const 2168958484494;
         const 4294967299;
         const S3bQP_srt+720;
 },
 _c3eHP() //  [R1]
         { []
         }
     {offset
       c3eHP: // global
           I64[Sp - 8] = 0;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3eHW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eHP_info" {
     block_c3eHP_info:
         const _c3eHP;
         const 0;
         const 133143986206;
         const S3bQP_srt+744;
 },
 _c3eHW() //  []
         { []
         }
     {offset
       c3eHW: // global
           Hp = Hp + 24;
           _s3b0e::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c3eIA; else goto c3eIz;
       c3eIA: // global
           HpAlloc = 24;
           I64[Sp] = block_c3eHV_info;
           R1 = _s3b0e::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3eIz: // global
           if (%MO_S_Gt_W64(0, _s3b0e::I64)) goto c3eIE; else goto c3eIK;
       c3eIK: // global
           if (%MO_S_Gt_W64(_s3b0e::I64, 324)) goto c3eIE; else goto c3eIJ;
       c3eIE: // global
           Hp = Hp - 24;
           R2 = _s3b0e::I64;
           Sp = Sp + 16;
           call GHC.Float.expts5_entry(R2) args: 8, res: 0, upd: 8;
       c3eIJ: // global
           I64[Hp - 16] = sat_s3b0m_info;
           I64[Hp] = _s3b0e::I64;
           _s3b06::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s3b06::P64 + 24) + (_s3b0e::I64 << 3)] = Hp - 16;
           I64[_s3b06::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s3b06::P64 + 24) + ((I64[_s3b06::P64 + 8] << 3) + (_s3b0e::I64 >> 7))] = 1 :: W8;
           if (_s3b0e::I64 == 324) goto u3eIS; else goto c3eIH;
       u3eIS: // global
           call _c3eIs() args: 0, res: 0, upd: 0;
       c3eIH: // global
           I64[Sp] = _s3b0e::I64 + 1;
           call _c3eHW() args: 0, res: 0, upd: 0;
     }
 },
 _c3eHV() //  [R1]
         { []
         }
     {offset
       c3eHV: // global
           I64[Sp] = R1;
           call _c3eHW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eHV_info" {
     block_c3eHV_info:
         const _c3eHV;
         const 1;
         const 133143986206;
         const S3bQP_srt+744;
 },
 _c3eIs() //  []
         { []
         }
     {offset
       c3eIs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3eIx; else goto c3eIw;
       c3eIx: // global
           HpAlloc = 40;
           I64[Sp] = block_c3eIs_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3eIw: // global
           _s3b06::P64 = P64[Sp + 8];
           I64[_s3b06::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = GHC.Float.maxExpt10_closure+1;
           P64[Hp - 8] = _s3b06::P64;
           I64[Hp] = 325;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eIs_info" {
     block_c3eIs_info:
         const _c3eIs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.736183316 UTC

[section ""data" . GHC.Float.expts10_closure" {
     GHC.Float.expts10_closure:
         const GHC.Float.expts10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Float.expts10_entry() //  [R1]
         { []
         }
     {offset
       c3eJF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3eJG; else goto c3eJH;
       c3eJG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eJH: // global
           (_c3eJA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3eJA::I64 == 0) goto c3eJC; else goto c3eJB;
       c3eJC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3eJB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3eJA::I64;
           I64[Sp - 24] = block_c3eJD_info;
           Sp = Sp - 24;
           call GHC.Float.expts3_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Float.expts10_info" {
     GHC.Float.expts10_info:
         const GHC.Float.expts10_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+784;
 },
 _c3eJD() //  [R1]
         { []
         }
     {offset
       c3eJD: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3eJD_info" {
     block_c3eJD_info:
         const _c3eJD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.743699538 UTC

[section ""data" . GHC.Float.$wintegerLogBase_closure" {
     GHC.Float.$wintegerLogBase_closure:
         const GHC.Float.$wintegerLogBase_info;
         const 0;
 },
 section ""relreadonly" . u3eKE_srtd" {
     u3eKE_srtd:
         const S3bQP_srt+64;
         const 93;
         const 2305843009213693953;
         const 402653184;
 },
 GHC.Float.$wintegerLogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       c3eK6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3eK7; else goto c3eK8;
       c3eK7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$wintegerLogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3eK8: // global
           I64[Sp - 24] = block_c3eK1_info;
           _s3b0u::P64 = R3;
           R3 = R2;
           _s3b0t::P64 = R2;
           R2 = _s3b0u::P64;
           P64[Sp - 16] = _s3b0t::P64;
           P64[Sp - 8] = _s3b0u::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wintegerLogBase_info" {
     GHC.Float.$wintegerLogBase_info:
         const GHC.Float.$wintegerLogBase_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3eKE_srtd;
 },
 section ""relreadonly" . u3eKF_srtd" {
     u3eKF_srtd:
         const S3bQP_srt+64;
         const 92;
         const 2305843009213693953;
         const 134217728;
 },
 _c3eK1() //  [R1]
         { []
         }
     {offset
       c3eK1: // global
           if (R1 == 1) goto c3eK5; else goto c3eK4;
       c3eK5: // global
           R1 = 0;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eK4: // global
           I64[Sp] = block_c3eKb_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eK1_info" {
     block_c3eK1_info:
         const _c3eK1;
         const 2;
         const 18446744069414584350;
         const u3eKF_srtd;
 },
 section ""relreadonly" . u3eKG_srtd" {
     u3eKG_srtd:
         const S3bQP_srt+64;
         const 92;
         const 1;
         const 134217728;
 },
 _c3eKb() //  [R1]
         { []
         }
     {offset
       c3eKb: // global
           _s3b0u::P64 = P64[Sp + 16];
           if (R1 == 1) goto c3eKn; else goto c3eKi;
       c3eKn: // global
           I64[Sp + 16] = block_c3eKl_info;
           R1 = _s3b0u::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u3eKD; else goto c3eKo;
       u3eKD: // global
           call _c3eKl(R1) args: 0, res: 0, upd: 0;
       c3eKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3eKi: // global
           R3 = _s3b0u::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Logarithms.integerLogBase#_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eKb_info" {
     block_c3eKb_info:
         const _c3eKb;
         const 2;
         const 18446744069414584350;
         const u3eKG_srtd;
 },
 _c3eKl() //  [R1]
         { []
         }
     {offset
       c3eKl: // global
           if (R1 & 7 == 1) goto c3eKy; else goto c3eKu;
       c3eKy: // global
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 0, upd: 8;
       c3eKu: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eKl_info" {
     block_c3eKl_info:
         const _c3eKl;
         const 0;
         const 4294967326;
         const S3bQP_srt+808;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.755956181 UTC

[section ""data" . GHC.Float.integerLogBase_closure" {
     GHC.Float.integerLogBase_closure:
         const GHC.Float.integerLogBase_info;
         const 0;
 },
 GHC.Float.integerLogBase_entry() //  [R2, R3]
         { []
         }
     {offset
       c3eLc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3eLg; else goto c3eLh;
       c3eLg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.integerLogBase_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3eLh: // global
           I64[Sp - 8] = block_c3eLa_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Float.$wintegerLogBase_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.integerLogBase_info" {
     GHC.Float.integerLogBase_info:
         const GHC.Float.integerLogBase_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3bQP_srt+800;
 },
 _c3eLa() //  [R1]
         { []
         }
     {offset
       c3eLa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eLk; else goto c3eLj;
       c3eLk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3eLj: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eLa_info" {
     block_c3eLa_info:
         const _c3eLa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.763379648 UTC

[section ""data" . GHC.Float.$dmexponent_closure" {
     GHC.Float.$dmexponent_closure:
         const GHC.Float.$dmexponent_info;
         const 0;
 },
 GHC.Float.$dmexponent_entry() //  [R2, R3]
         { []
         }
     {offset
       c3eLC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3eLD; else goto c3eLE;
       c3eLD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$dmexponent_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3eLE: // global
           I64[Sp - 24] = block_c3eLA_info;
           _s3b0C::P64 = R2;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R3;
           P64[Sp - 16] = _s3b0C::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call GHC.Float.decodeFloat_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmexponent_info" {
     GHC.Float.$dmexponent_info:
         const GHC.Float.$dmexponent_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+824;
 },
 _c3eLA() //  [R1]
         { []
         }
     {offset
       c3eLA: // global
           I64[Sp - 8] = block_c3eLH_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eLA_info" {
     block_c3eLA_info:
         const _c3eLA;
         const 2;
         const 4294967326;
         const S3bQP_srt+832;
 },
 _c3eLH() //  [R1]
         { []
         }
     {offset
       c3eLH: // global
           if (R1 == 1) goto c3eM9; else goto c3eM1;
       c3eM9: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3eM1: // global
           _s3b0G::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3eLM_info;
           R1 = _s3b0G::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3eMa; else goto c3eLN;
       u3eMa: // global
           call _c3eLM(R1) args: 0, res: 0, upd: 0;
       c3eLN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eLH_info" {
     block_c3eLH_info:
         const _c3eLH;
         const 3;
         const 30;
 },
 _c3eLM() //  [R1]
         { []
         }
     {offset
       c3eLM: // global
           _s3b0C::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3eLR_info;
           R2 = _s3b0C::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eLM_info" {
     block_c3eLM_info:
         const _c3eLM;
         const 2;
         const 30;
 },
 _c3eLR() //  [R1]
         { []
         }
     {offset
       c3eLR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eM5; else goto c3eM4;
       c3eM5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3eM4: // global
           _s3b0M::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b0M::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eLR_info" {
     block_c3eLR_info:
         const _c3eLR;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.776459253 UTC

[section ""data" . GHC.Float.$dmsignificand_closure" {
     GHC.Float.$dmsignificand_closure:
         const GHC.Float.$dmsignificand_info;
 },
 sat_s3b0W_entry() //  [R1]
         { []
         }
     {offset
       c3eMR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3eMY; else goto c3eMZ;
       c3eMY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eMZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3eMP_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b0W_info" {
     sat_s3b0W_info:
         const sat_s3b0W_entry;
         const 2;
         const 18;
 },
 _c3eMP() //  [R1]
         { []
         }
     {offset
       c3eMP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eN2; else goto c3eN1;
       c3eN2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3eN1: // global
           _s3b0V::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b0V::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3eMP_info" {
     block_c3eMP_info:
         const _c3eMP;
         const 0;
         const 30;
 },
 sat_s3b0S_entry() //  [R1]
         { []
         }
     {offset
       c3eN9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3eNa; else goto c3eNb;
       c3eNa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eNb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3eN7_info;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.decodeFloat_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b0S_info" {
     sat_s3b0S_info:
         const sat_s3b0S_entry;
         const 2;
         const 18;
 },
 _c3eN7() //  [R1]
         { []
         }
     {offset
       c3eN7: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3eN7_info" {
     block_c3eN7_info:
         const _c3eN7;
         const 0;
         const 30;
 },
 GHC.Float.$dmsignificand_entry() //  [R2, R3]
         { []
         }
     {offset
       c3eNf: // global
           _s3b0O::P64 = R3;
           _s3b0N::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c3eNg; else goto c3eNh;
       c3eNh: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3eNj; else goto c3eNi;
       c3eNj: // global
           HpAlloc = 64;
           goto c3eNg;
       c3eNg: // global
           R3 = _s3b0O::P64;
           R2 = _s3b0N::P64;
           R1 = GHC.Float.$dmsignificand_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3eNi: // global
           I64[Hp - 56] = sat_s3b0W_info;
           P64[Hp - 40] = _s3b0N::P64;
           P64[Hp - 32] = _s3b0O::P64;
           I64[Hp - 24] = sat_s3b0S_info;
           P64[Hp - 8] = _s3b0N::P64;
           P64[Hp] = _s3b0O::P64;
           R2 = _s3b0N::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmsignificand_info" {
     GHC.Float.$dmsignificand_info:
         const GHC.Float.$dmsignificand_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.786950147 UTC

[section ""data" . GHC.Float.$fRealFloatDouble3_closure" {
     GHC.Float.$fRealFloatDouble3_closure:
         const GHC.Types.I#_con_info;
         const (-1021);
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.788682158 UTC

[section ""data" . GHC.Float.$fRealFloatDouble2_closure" {
     GHC.Float.$fRealFloatDouble2_closure:
         const GHC.Types.I#_con_info;
         const 1024;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.790485699 UTC

[section ""data" . GHC.Float.$fRealFloatDouble1_closure" {
     GHC.Float.$fRealFloatDouble1_closure:
         const (,)_con_info;
         const GHC.Float.$fRealFloatDouble3_closure+1;
         const GHC.Float.$fRealFloatDouble2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.792641214 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$cfloatRange_closure" {
     GHC.Float.$fRealFloatDouble_$cfloatRange_closure:
         const GHC.Float.$fRealFloatDouble_$cfloatRange_info;
 },
 GHC.Float.$fRealFloatDouble_$cfloatRange_entry() //  []
         { []
         }
     {offset
       c3eO1: // global
           R1 = GHC.Float.$fRealFloatDouble1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$cfloatRange_info" {
     GHC.Float.$fRealFloatDouble_$cfloatRange_info:
         const GHC.Float.$fRealFloatDouble_$cfloatRange_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.802374957 UTC

[section ""data" . GHC.Float.$w$catan2_closure" {
     GHC.Float.$w$catan2_closure:
         const GHC.Float.$w$catan2_info;
 },
 GHC.Float.$w$catan2_slow() //  [R1]
         { []
         }
     {offset
       c3eOa: // global
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$catan2_entry(D1, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3b14_entry() //  [R1]
         { []
         }
     {offset
       c3eOA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eOB; else goto c3eOC;
       c3eOB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eOC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.negateDouble_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b14_info" {
     sat_s3b14_info:
         const sat_s3b14_entry;
         const 1;
         const 16;
 },
 GHC.Float.$w$catan2_entry() //  [R2, D1]
         { []
         }
     {offset
       c3eOG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3eOH; else goto c3eOI;
       c3eOH: // global
           R1 = GHC.Float.$w$catan2_closure;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3eOI: // global
           if (%MO_F_Gt_W64(D1, 0.0 :: W64)) goto c3eOF; else goto c3eOE;
       c3eOF: // global
           I64[Sp - 16] = block_c3eRo_info;
           R1 = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3eRH; else goto c3eRp;
       u3eRH: // global
           call _c3eRo(R1) args: 0, res: 0, upd: 0;
       c3eRp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3eOE: // global
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto c3eRc; else goto u3eRz;
       c3eRc: // global
           I64[Sp - 24] = block_c3eRb_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3eRI; else goto c3eRd;
       u3eRI: // global
           call _c3eRb(R1) args: 0, res: 0, upd: 0;
       c3eRd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3eRz: // global
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call _s3b11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Float.$w$catan2_info" {
     GHC.Float.$w$catan2_info:
         const GHC.Float.$w$catan2_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 130;
         const GHC.Float.$w$catan2_slow;
 },
 _c3eRo() //  [R1]
         { []
         }
     {offset
       c3eRo: // global
           (_c3eRw::F64) = call MO_F64_Atan(%MO_F_Quot_W64(F64[R1 + 7],
                                                           F64[Sp + 8]));
           D1 = _c3eRw::F64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eRo_info" {
     block_c3eRo_info:
         const _c3eRo;
         const 65;
         const 30;
 },
 _c3eRb() //  [R1]
         { []
         }
     {offset
       c3eRb: // global
           if (%MO_F_Gt_W64(F64[R1 + 7],
                            0.0 :: W64)) goto c3eRm; else goto u3eRA;
       c3eRm: // global
           D1 = 1.5707963267948966 :: W64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       u3eRA: // global
           Sp = Sp + 8;
           call _s3b11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eRb_info" {
     block_c3eRb_info:
         const _c3eRb;
         const 130;
         const 30;
 },
 _s3b11() //  []
         { []
         }
     {offset
       s3b11: // global
           if (%MO_F_Lt_W64(F64[Sp + 8],
                            0.0 :: W64)) goto c3eQK; else goto u3eRT;
       c3eQK: // global
           I64[Sp - 8] = block_c3eQJ_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eRS; else goto c3eQL;
       u3eRS: // global
           call _c3eQJ(R1) args: 0, res: 0, upd: 0;
       c3eQL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3eRT: // global
           call _s3b12() args: 0, res: 0, upd: 0;
     }
 },
 _c3eQJ() //  [R1]
         { []
         }
     {offset
       c3eQJ: // global
           _s3b1F::F64 = F64[R1 + 7];
           if (%MO_F_Gt_W64(_s3b1F::F64,
                            0.0 :: W64)) goto c3eR4; else goto u3eRB;
       c3eR4: // global
           (_c3eQZ::F64) = call MO_F64_Atan(%MO_F_Quot_W64(_s3b1F::F64,
                                                           F64[Sp + 16]));
           D1 = %MO_F_Add_W64(_c3eQZ::F64, 3.141592653589793 :: W64);
           Sp = Sp + 24;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       u3eRB: // global
           Sp = Sp + 8;
           call _s3b12() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eQJ_info" {
     block_c3eQJ_info:
         const _c3eQJ;
         const 130;
         const 30;
 },
 _s3b12() //  []
         { []
         }
     {offset
       s3b12: // global
           if (%MO_F_Le_W64(F64[Sp + 8],
                            0.0 :: W64)) goto c3eQs; else goto u3eRV;
       c3eQs: // global
           I64[Sp - 8] = block_c3eQr_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eRU; else goto c3eQt;
       u3eRU: // global
           call _c3eQr(R1) args: 0, res: 0, upd: 0;
       c3eQt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3eRV: // global
           call _s3b16() args: 0, res: 0, upd: 0;
     }
 },
 _c3eQr() //  [R1]
         { []
         }
     {offset
       c3eQr: // global
           if (%MO_F_Lt_W64(F64[R1 + 7],
                            0.0 :: W64)) goto u3eRO; else goto u3eRC;
       u3eRO: // global
           call _c3eOu() args: 0, res: 0, upd: 0;
       u3eRC: // global
           Sp = Sp + 8;
           call _s3b16() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eQr_info" {
     block_c3eQr_info:
         const _c3eQr;
         const 130;
         const 30;
 },
 _s3b16() //  []
         { []
         }
     {offset
       s3b16: // global
           if (%MO_F_Lt_W64(F64[Sp + 8],
                            0.0 :: W64)) goto c3eQ9; else goto u3eRX;
       c3eQ9: // global
           I64[Sp - 8] = block_c3eQ8_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eRW; else goto c3eQa;
       u3eRW: // global
           call _c3eQ8(R1) args: 0, res: 0, upd: 0;
       c3eQa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3eRX: // global
           call _s3b17() args: 0, res: 0, upd: 0;
     }
 },
 _c3eQ8() //  [R1]
         { []
         }
     {offset
       c3eQ8: // global
           (_s3b1x::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[R1 + 7]);
           if (_s3b1x::I64 == 0) goto u3eRD; else goto u3eRM;
       u3eRD: // global
           Sp = Sp + 8;
           call _s3b17() args: 0, res: 0, upd: 0;
       u3eRM: // global
           call _c3eOu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eQ8_info" {
     block_c3eQ8_info:
         const _c3eQ8;
         const 130;
         const 30;
 },
 _s3b17() //  []
         { []
         }
     {offset
       s3b17: // global
           _s3b0Y::P64 = P64[Sp];
           (_s3b1b::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[Sp + 8]);
           if (_s3b1b::I64 == 0) goto u3eRE; else goto c3ePP;
       u3eRE: // global
           I64[Sp - 8] = _s3b1b::I64;
           Sp = Sp - 8;
           call _s3b1c() args: 0, res: 0, upd: 0;
       c3ePP: // global
           I64[Sp - 16] = block_c3ePN_info;
           R1 = _s3b0Y::P64;
           I64[Sp - 8] = _s3b1b::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3eRY; else goto c3ePQ;
       u3eRY: // global
           call _c3ePN(R1) args: 0, res: 0, upd: 0;
       c3ePQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ePN() //  [R1]
         { []
         }
     {offset
       c3ePN: // global
           (_s3b1p::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(F64[R1 + 7]);
           if (_s3b1p::I64 == 0) goto u3eRF; else goto u3eRG;
       u3eRF: // global
           Sp = Sp + 8;
           call _s3b1c() args: 0, res: 0, upd: 0;
       u3eRG: // global
           Sp = Sp + 8;
           call _c3eOu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3ePN_info" {
     block_c3ePN_info:
         const _c3ePN;
         const 323;
         const 30;
 },
 _s3b1c() //  []
         { []
         }
     {offset
       s3b1c: // global
           I64[Sp - 8] = block_c3ePd_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eS0; else goto c3ePf;
       u3eS0: // global
           call _c3ePd(R1) args: 0, res: 0, upd: 0;
       c3ePf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ePd() //  [R1]
         { []
         }
     {offset
       c3ePd: // global
           _s3b0Z::F64 = F64[Sp + 24];
           _s3b1e::F64 = F64[R1 + 7];
           if (%MO_F_Eq_W64(_s3b1e::F64,
                            0.0 :: W64)) goto c3ePK; else goto c3ePp;
       c3ePK: // global
           if (%MO_F_Lt_W64(_s3b0Z::F64,
                            0.0 :: W64)) goto c3ePJ; else goto c3ePI;
       c3ePI: // global
           if (I64[Sp + 8] != 0) goto c3ePJ; else goto c3ePG;
       c3ePJ: // global
           D1 = 3.141592653589793 :: W64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       c3ePG: // global
           if (%MO_F_Eq_W64(_s3b0Z::F64,
                            0.0 :: W64)) goto c3ePF; else goto c3ePE;
       c3ePF: // global
           D1 = _s3b1e::F64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       c3ePE: // global
           D1 = %MO_F_Add_W64(_s3b0Z::F64, _s3b1e::F64);
           Sp = Sp + 32;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
       c3ePp: // global
           D1 = %MO_F_Add_W64(_s3b0Z::F64, _s3b1e::F64);
           Sp = Sp + 32;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ePd_info" {
     block_c3ePd_info:
         const _c3ePd;
         const 451;
         const 30;
 },
 _c3eOu() //  []
         { []
         }
     {offset
       c3eOu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3eOS; else goto c3eOR;
       c3eOS: // global
           HpAlloc = 24;
           I64[Sp] = block_c3eOu_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3eOR: // global
           I64[Hp - 16] = sat_s3b14_info;
           P64[Hp] = P64[Sp + 8];
           _s3b0Z::F64 = F64[Sp + 16];
           I64[Sp + 16] = block_c3eOL_info;
           D1 = _s3b0Z::F64;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eOu_info" {
     block_c3eOu_info:
         const _c3eOu;
         const 130;
         const 30;
 },
 _c3eOL() //  [D1]
         { []
         }
     {offset
       c3eOL: // global
           D1 = %MO_F_Neg_W64(D1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(D1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eOL_info" {
     block_c3eOL_info:
         const _c3eOL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.839909088 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_$catan2_closure" {
     GHC.Float.$fRealFloatDouble_$catan2_closure:
         const GHC.Float.$fRealFloatDouble_$catan2_info;
 },
 GHC.Float.$fRealFloatDouble_$catan2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3eTW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eU4; else goto c3eU5;
       c3eU4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatDouble_$catan2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3eU5: // global
           I64[Sp - 16] = block_c3eTT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3eUa; else goto c3eTU;
       u3eUa: // global
           call _c3eTT(R1) args: 0, res: 0, upd: 0;
       c3eTU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatDouble_$catan2_info" {
     GHC.Float.$fRealFloatDouble_$catan2_info:
         const GHC.Float.$fRealFloatDouble_$catan2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3eTT() //  [R1]
         { []
         }
     {offset
       c3eTT: // global
           _s3b1Q::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3eTZ_info;
           D1 = F64[R1 + 7];
           R2 = _s3b1Q::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$catan2_entry(D1, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eTT_info" {
     block_c3eTT_info:
         const _c3eTT;
         const 1;
         const 30;
 },
 _c3eTZ() //  [D1]
         { []
         }
     {offset
       c3eTZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3eU9; else goto c3eU8;
       c3eU9: // global
           HpAlloc = 16;
           D1 = D1;
           call stg_gc_d1(D1) args: 8, res: 8, upd: 8;
       c3eU8: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = D1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eTZ_info" {
     block_c3eTZ_info:
         const _c3eTZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.847675574 UTC

[section ""data" . GHC.Float.$fRealFloatDouble_closure" {
     GHC.Float.$fRealFloatDouble_closure:
         const GHC.Float.C:RealFloat_con_info;
         const GHC.Float.$fRealFracDouble_closure+1;
         const GHC.Float.$fFloatingDouble_closure+1;
         const GHC.Float.$fRealFloatDouble_$cfloatRadix_closure+1;
         const GHC.Float.$fRealFloatDouble_$cfloatDigits_closure+1;
         const GHC.Float.$fRealFloatDouble_$cfloatRange_closure+1;
         const GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure+1;
         const GHC.Float.$fRealFloatDouble_$cencodeFloat_closure+2;
         const GHC.Float.$fRealFloatDouble_$cexponent_closure+1;
         const GHC.Float.$fRealFloatDouble_$csignificand_closure+1;
         const GHC.Float.$fRealFloatDouble_$cscaleFloat_closure+2;
         const GHC.Float.$fRealFloatDouble_$cisNaN_closure+1;
         const GHC.Float.$fRealFloatDouble_$cisInfinite_closure+1;
         const GHC.Float.$fRealFloatDouble_$cisDenormalized_closure+1;
         const GHC.Float.$fRealFloatDouble_$cisNegativeZero_closure+1;
         const GHC.Float.$fRealFloatDouble_$cisIEEE_closure+1;
         const GHC.Float.$fRealFloatDouble_$catan2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.849666831 UTC

[section ""data" . GHC.Float.$fRealFloatFloat3_closure" {
     GHC.Float.$fRealFloatFloat3_closure:
         const GHC.Types.I#_con_info;
         const (-125);
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.851452511 UTC

[section ""data" . GHC.Float.$fRealFloatFloat2_closure" {
     GHC.Float.$fRealFloatFloat2_closure:
         const GHC.Types.I#_con_info;
         const 128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.853229805 UTC

[section ""data" . GHC.Float.$fRealFloatFloat1_closure" {
     GHC.Float.$fRealFloatFloat1_closure:
         const (,)_con_info;
         const GHC.Float.$fRealFloatFloat3_closure+1;
         const GHC.Float.$fRealFloatFloat2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.856027637 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$cfloatRange_closure" {
     GHC.Float.$fRealFloatFloat_$cfloatRange_closure:
         const GHC.Float.$fRealFloatFloat_$cfloatRange_info;
 },
 GHC.Float.$fRealFloatFloat_$cfloatRange_entry() //  []
         { []
         }
     {offset
       c3eUz: // global
           R1 = GHC.Float.$fRealFloatFloat1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$cfloatRange_info" {
     GHC.Float.$fRealFloatFloat_$cfloatRange_info:
         const GHC.Float.$fRealFloatFloat_$cfloatRange_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.866562443 UTC

[section ""data" . GHC.Float.$w$catan1_closure" {
     GHC.Float.$w$catan1_closure:
         const GHC.Float.$w$catan1_info;
 },
 GHC.Float.$w$catan1_slow() //  [R1]
         { []
         }
     {offset
       c3eUI: // global
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$catan1_entry(F1, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3b22_entry() //  [R1]
         { []
         }
     {offset
       c3eV8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3eV9; else goto c3eVa;
       c3eV9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3eVa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.negateFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b22_info" {
     sat_s3b22_info:
         const sat_s3b22_entry;
         const 1;
         const 16;
 },
 GHC.Float.$w$catan1_entry() //  [R2, F1]
         { []
         }
     {offset
       c3eVe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3eVf; else goto c3eVg;
       c3eVf: // global
           R1 = GHC.Float.$w$catan1_closure;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3eVg: // global
           if (%MO_F_Gt_W32(F1, 0.0 :: W32)) goto c3eVd; else goto c3eVc;
       c3eVd: // global
           I64[Sp - 16] = block_c3eXW_info;
           R1 = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3eYf; else goto c3eXX;
       u3eYf: // global
           call _c3eXW(R1) args: 0, res: 0, upd: 0;
       c3eXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3eVc: // global
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto c3eXK; else goto u3eY7;
       c3eXK: // global
           I64[Sp - 24] = block_c3eXJ_info;
           R1 = R2;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3eYg; else goto c3eXL;
       u3eYg: // global
           call _c3eXJ(R1) args: 0, res: 0, upd: 0;
       c3eXL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3eY7: // global
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call _s3b1Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Float.$w$catan1_info" {
     GHC.Float.$w$catan1_info:
         const GHC.Float.$w$catan1_entry;
         const 0;
         const 14;
         const 8589934592;
         const 0;
         const 130;
         const GHC.Float.$w$catan1_slow;
 },
 _c3eXW() //  [R1]
         { []
         }
     {offset
       c3eXW: // global
           (_c3eY4::F32) = call MO_F32_Atan(%MO_F_Quot_W32(F32[R1 + 7],
                                                           F32[Sp + 8]));
           F1 = _c3eY4::F32;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eXW_info" {
     block_c3eXW_info:
         const _c3eXW;
         const 65;
         const 30;
 },
 _c3eXJ() //  [R1]
         { []
         }
     {offset
       c3eXJ: // global
           if (%MO_F_Gt_W32(F32[R1 + 7],
                            0.0 :: W32)) goto c3eXU; else goto u3eY8;
       c3eXU: // global
           F1 = 1.5707963705062866 :: W32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       u3eY8: // global
           Sp = Sp + 8;
           call _s3b1Z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eXJ_info" {
     block_c3eXJ_info:
         const _c3eXJ;
         const 130;
         const 30;
 },
 _s3b1Z() //  []
         { []
         }
     {offset
       s3b1Z: // global
           if (%MO_F_Lt_W32(F32[Sp + 8],
                            0.0 :: W32)) goto c3eXi; else goto u3eYr;
       c3eXi: // global
           I64[Sp - 8] = block_c3eXh_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eYq; else goto c3eXj;
       u3eYq: // global
           call _c3eXh(R1) args: 0, res: 0, upd: 0;
       c3eXj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3eYr: // global
           call _s3b20() args: 0, res: 0, upd: 0;
     }
 },
 _c3eXh() //  [R1]
         { []
         }
     {offset
       c3eXh: // global
           _s3b2D::F32 = F32[R1 + 7];
           if (%MO_F_Gt_W32(_s3b2D::F32,
                            0.0 :: W32)) goto c3eXC; else goto u3eY9;
       c3eXC: // global
           (_c3eXx::F32) = call MO_F32_Atan(%MO_F_Quot_W32(_s3b2D::F32,
                                                           F32[Sp + 16]));
           F1 = %MO_F_Add_W32(_c3eXx::F32, 3.141592653589793 :: W32);
           Sp = Sp + 24;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       u3eY9: // global
           Sp = Sp + 8;
           call _s3b20() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eXh_info" {
     block_c3eXh_info:
         const _c3eXh;
         const 130;
         const 30;
 },
 _s3b20() //  []
         { []
         }
     {offset
       s3b20: // global
           if (%MO_F_Le_W32(F32[Sp + 8],
                            0.0 :: W32)) goto c3eX0; else goto u3eYt;
       c3eX0: // global
           I64[Sp - 8] = block_c3eWZ_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eYs; else goto c3eX1;
       u3eYs: // global
           call _c3eWZ(R1) args: 0, res: 0, upd: 0;
       c3eX1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3eYt: // global
           call _s3b24() args: 0, res: 0, upd: 0;
     }
 },
 _c3eWZ() //  [R1]
         { []
         }
     {offset
       c3eWZ: // global
           if (%MO_F_Lt_W32(F32[R1 + 7],
                            0.0 :: W32)) goto u3eYm; else goto u3eYa;
       u3eYm: // global
           call _c3eV2() args: 0, res: 0, upd: 0;
       u3eYa: // global
           Sp = Sp + 8;
           call _s3b24() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eWZ_info" {
     block_c3eWZ_info:
         const _c3eWZ;
         const 130;
         const 30;
 },
 _s3b24() //  []
         { []
         }
     {offset
       s3b24: // global
           if (%MO_F_Lt_W32(F32[Sp + 8],
                            0.0 :: W32)) goto c3eWH; else goto u3eYv;
       c3eWH: // global
           I64[Sp - 8] = block_c3eWG_info;
           R1 = P64[Sp];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eYu; else goto c3eWI;
       u3eYu: // global
           call _c3eWG(R1) args: 0, res: 0, upd: 0;
       c3eWI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3eYv: // global
           call _s3b25() args: 0, res: 0, upd: 0;
     }
 },
 _c3eWG() //  [R1]
         { []
         }
     {offset
       c3eWG: // global
           (_s3b2v::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[R1 + 7]);
           if (_s3b2v::I64 == 0) goto u3eYb; else goto u3eYk;
       u3eYb: // global
           Sp = Sp + 8;
           call _s3b25() args: 0, res: 0, upd: 0;
       u3eYk: // global
           call _c3eV2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eWG_info" {
     block_c3eWG_info:
         const _c3eWG;
         const 130;
         const 30;
 },
 _s3b25() //  []
         { []
         }
     {offset
       s3b25: // global
           _s3b1W::P64 = P64[Sp];
           (_s3b29::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[Sp + 8]);
           if (_s3b29::I64 == 0) goto u3eYc; else goto c3eWn;
       u3eYc: // global
           I64[Sp - 8] = _s3b29::I64;
           Sp = Sp - 8;
           call _s3b2a() args: 0, res: 0, upd: 0;
       c3eWn: // global
           I64[Sp - 16] = block_c3eWl_info;
           R1 = _s3b1W::P64;
           I64[Sp - 8] = _s3b29::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3eYw; else goto c3eWo;
       u3eYw: // global
           call _c3eWl(R1) args: 0, res: 0, upd: 0;
       c3eWo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3eWl() //  [R1]
         { []
         }
     {offset
       c3eWl: // global
           (_s3b2n::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(F32[R1 + 7]);
           if (_s3b2n::I64 == 0) goto u3eYd; else goto u3eYe;
       u3eYd: // global
           Sp = Sp + 8;
           call _s3b2a() args: 0, res: 0, upd: 0;
       u3eYe: // global
           Sp = Sp + 8;
           call _c3eV2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3eWl_info" {
     block_c3eWl_info:
         const _c3eWl;
         const 323;
         const 30;
 },
 _s3b2a() //  []
         { []
         }
     {offset
       s3b2a: // global
           I64[Sp - 8] = block_c3eVL_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3eYy; else goto c3eVN;
       u3eYy: // global
           call _c3eVL(R1) args: 0, res: 0, upd: 0;
       c3eVN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3eVL() //  [R1]
         { []
         }
     {offset
       c3eVL: // global
           _s3b1X::F32 = F32[Sp + 24];
           _s3b2c::F32 = F32[R1 + 7];
           if (%MO_F_Eq_W32(_s3b2c::F32,
                            0.0 :: W32)) goto c3eWi; else goto c3eVX;
       c3eWi: // global
           if (%MO_F_Lt_W32(_s3b1X::F32,
                            0.0 :: W32)) goto c3eWh; else goto c3eWg;
       c3eWg: // global
           if (I64[Sp + 8] != 0) goto c3eWh; else goto c3eWe;
       c3eWh: // global
           F1 = 3.141592653589793 :: W32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       c3eWe: // global
           if (%MO_F_Eq_W32(_s3b1X::F32,
                            0.0 :: W32)) goto c3eWd; else goto c3eWc;
       c3eWd: // global
           F1 = _s3b2c::F32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       c3eWc: // global
           F1 = %MO_F_Add_W32(_s3b1X::F32, _s3b2c::F32);
           Sp = Sp + 32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
       c3eVX: // global
           F1 = %MO_F_Add_W32(_s3b1X::F32, _s3b2c::F32);
           Sp = Sp + 32;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eVL_info" {
     block_c3eVL_info:
         const _c3eVL;
         const 451;
         const 30;
 },
 _c3eV2() //  []
         { []
         }
     {offset
       c3eV2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3eVq; else goto c3eVp;
       c3eVq: // global
           HpAlloc = 24;
           I64[Sp] = block_c3eV2_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3eVp: // global
           I64[Hp - 16] = sat_s3b22_info;
           P64[Hp] = P64[Sp + 8];
           _s3b1X::F32 = F32[Sp + 16];
           I64[Sp + 16] = block_c3eVj_info;
           F1 = _s3b1X::F32;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eV2_info" {
     block_c3eV2_info:
         const _c3eV2;
         const 130;
         const 30;
 },
 _c3eVj() //  [F1]
         { []
         }
     {offset
       c3eVj: // global
           F1 = %MO_F_Neg_W32(F1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(F1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3eVj_info" {
     block_c3eVj_info:
         const _c3eVj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.894896794 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_$catan2_closure" {
     GHC.Float.$fRealFloatFloat_$catan2_closure:
         const GHC.Float.$fRealFloatFloat_$catan2_info;
 },
 GHC.Float.$fRealFloatFloat_$catan2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3f0u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3f0C; else goto c3f0D;
       c3f0C: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fRealFloatFloat_$catan2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3f0D: // global
           I64[Sp - 16] = block_c3f0r_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3f0I; else goto c3f0s;
       u3f0I: // global
           call _c3f0r(R1) args: 0, res: 0, upd: 0;
       c3f0s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fRealFloatFloat_$catan2_info" {
     GHC.Float.$fRealFloatFloat_$catan2_info:
         const GHC.Float.$fRealFloatFloat_$catan2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3f0r() //  [R1]
         { []
         }
     {offset
       c3f0r: // global
           _s3b2O::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3f0x_info;
           F1 = F32[R1 + 7];
           R2 = _s3b2O::P64;
           Sp = Sp + 8;
           call GHC.Float.$w$catan1_entry(F1, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f0r_info" {
     block_c3f0r_info:
         const _c3f0r;
         const 1;
         const 30;
 },
 _c3f0x() //  [F1]
         { []
         }
     {offset
       c3f0x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3f0H; else goto c3f0G;
       c3f0H: // global
           HpAlloc = 16;
           F1 = F1;
           call stg_gc_f1(F1) args: 8, res: 8, upd: 8;
       c3f0G: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = F1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f0x_info" {
     block_c3f0x_info:
         const _c3f0x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.902513004 UTC

[section ""data" . GHC.Float.$fRealFloatFloat_closure" {
     GHC.Float.$fRealFloatFloat_closure:
         const GHC.Float.C:RealFloat_con_info;
         const GHC.Float.$fRealFracFloat_closure+1;
         const GHC.Float.$fFloatingFloat_closure+1;
         const GHC.Float.$fRealFloatFloat_$cfloatRadix_closure+1;
         const GHC.Float.$fRealFloatFloat_$cfloatDigits_closure+1;
         const GHC.Float.$fRealFloatFloat_$cfloatRange_closure+1;
         const GHC.Float.$fRealFloatFloat_$cdecodeFloat_closure+1;
         const GHC.Float.$fRealFloatFloat_$cencodeFloat_closure+2;
         const GHC.Float.$fRealFloatFloat_$cexponent_closure+1;
         const GHC.Float.$fRealFloatFloat_$csignificand_closure+1;
         const GHC.Float.$fRealFloatFloat_$cscaleFloat_closure+2;
         const GHC.Float.$fRealFloatFloat_$cisNaN_closure+1;
         const GHC.Float.$fRealFloatFloat_$cisInfinite_closure+1;
         const GHC.Float.$fRealFloatFloat_$cisDenormalized_closure+1;
         const GHC.Float.$fRealFloatFloat_$cisNegativeZero_closure+1;
         const GHC.Float.$fRealFloatFloat_$cisIEEE_closure+1;
         const GHC.Float.$fRealFloatFloat_$catan2_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.904456556 UTC

[section ""data" . GHC.Float.$fShowDouble3_closure" {
     GHC.Float.$fShowDouble3_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.91060987 UTC

[section ""data" . GHC.Float.$w$sshowSignedFloat1_closure" {
     GHC.Float.$w$sshowSignedFloat1_closure:
         const GHC.Float.$w$sshowSignedFloat1_info;
 },
 GHC.Float.$w$sshowSignedFloat1_slow() //  [R1]
         { []
         }
     {offset
       c3f12: // global
           F1 = F32[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 24;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2,
                                                     R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s3b2Z_entry() //  [R1]
         { []
         }
     {offset
       c3f1m: // global
           _s3b2Z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3f1p; else goto c3f1q;
       c3f1q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3f1s; else goto c3f1r;
       c3f1s: // global
           HpAlloc = 16;
           goto c3f1p;
       c3f1p: // global
           R1 = _s3b2Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f1r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3b2Z::P64;
           _s3b2T::P64 = P64[_s3b2Z::P64 + 16];
           _s3b30::F32 = %MO_F_Neg_W32(F32[_s3b2Z::P64 + 24]);
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3b30::F32;
           R2 = Hp - 7;
           R1 = _s3b2T::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s3b2Z_info" {
     g_s3b2Z_info:
         const g_s3b2Z_entry;
         const 4294967297;
         const 19;
 },
 sat_s3b35_entry() //  [R1, R2]
         { []
         }
     {offset
       c3f1D: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3f1H; else goto c3f1G;
       c3f1H: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3f1G: // global
           _s3b2Z::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3b2Z::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3b35_info" {
     sat_s3b35_info:
         const sat_s3b35_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3b38_entry() //  [R1]
         { []
         }
     {offset
       c3f1T: // global
           _s3b38::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3f1U; else goto c3f1V;
       c3f1V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3f1X; else goto c3f1W;
       c3f1X: // global
           HpAlloc = 24;
           goto c3f1U;
       c3f1U: // global
           R1 = _s3b38::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f1W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3b38::P64;
           _s3b2Z::P64 = P64[_s3b38::P64 + 16];
           _s3b36::P64 = P64[_s3b38::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3b36::P64;
           R2 = Hp - 14;
           R1 = _s3b2Z::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b38_info" {
     sat_s3b38_info:
         const sat_s3b38_entry;
         const 2;
         const 18;
 },
 sat_s3b3a_entry() //  [R1, R2]
         { []
         }
     {offset
       c3f20: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3f24; else goto c3f23;
       c3f24: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3f23: // global
           _s3b2Z::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s3b38_info;
           P64[Hp - 56] = _s3b2Z::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3b3a_info" {
     sat_s3b3a_info:
         const sat_s3b3a_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Float.$w$sshowSignedFloat1_entry() //  [R2, R3, F1]
         { []
         }
     {offset
       c3f2a: // global
           _s3b2V::F32 = F1;
           _s3b2U::P64 = R3;
           _s3b2T::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c3f2b; else goto c3f2c;
       c3f2c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3f2e; else goto c3f2d;
       c3f2e: // global
           HpAlloc = 16;
           goto c3f2b;
       c3f2b: // global
           R1 = GHC.Float.$w$sshowSignedFloat1_closure;
           P64[Sp - 24] = _s3b2T::P64;
           P64[Sp - 16] = _s3b2U::P64;
           F32[Sp - 8] = _s3b2V::F32;
           Sp = Sp - 24;
           call (stg_gc_fun)(R1) args: 32, res: 0, upd: 8;
       c3f2d: // global
           if (%MO_F_Lt_W32(_s3b2V::F32,
                            0.0 :: W32)) goto c3f29; else goto c3f28;
       c3f28: // global
           (_s3b3f::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(_s3b2V::F32);
           if (_s3b3f::I64 != 0) goto c3f29; else goto c3f2v;
       c3f29: // global
           Hp = Hp - 16;
           I64[Sp - 24] = block_c3f1b_info;
           R1 = _s3b2U::P64;
           P64[Sp - 16] = _s3b2T::P64;
           F32[Sp - 8] = _s3b2V::F32;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3f2w; else goto c3f1c;
       u3f2w: // global
           call _c3f1b(R1) args: 0, res: 0, upd: 0;
       c3f1c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3f2v: // global
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s3b2V::F32;
           R2 = Hp - 7;
           R1 = _s3b2T::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sshowSignedFloat1_info" {
     GHC.Float.$w$sshowSignedFloat1_info:
         const GHC.Float.$w$sshowSignedFloat1_entry;
         const 0;
         const 14;
         const 12884901888;
         const 0;
         const 259;
         const GHC.Float.$w$sshowSignedFloat1_slow;
 },
 _c3f1b() //  [R1]
         { []
         }
     {offset
       c3f1b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3f2i; else goto c3f2h;
       c3f2i: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3f2h: // global
           _s3b2Y::I64 = I64[R1 + 7];
           I64[Hp - 40] = g_s3b2Z_info;
           P64[Hp - 24] = P64[Sp + 8];
           F32[Hp - 16] = F32[Sp + 16];
           _c3f1g::P64 = Hp - 40;
           if (%MO_S_Le_W64(_s3b2Y::I64, 6)) goto c3f2k; else goto c3f2l;
       c3f2k: // global
           I64[Hp - 8] = sat_s3b35_info;
           P64[Hp] = _c3f1g::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3f2l: // global
           I64[Hp - 8] = sat_s3b3a_info;
           P64[Hp] = _c3f1g::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f1b_info" {
     block_c3f1b_info:
         const _c3f1b;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.92703595 UTC

[section ""data" . GHC.Float.$fShowFloat_$sshowSignedFloat_closure" {
     GHC.Float.$fShowFloat_$sshowSignedFloat_closure:
         const GHC.Float.$fShowFloat_$sshowSignedFloat_info;
 },
 GHC.Float.$fShowFloat_$sshowSignedFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3f3z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3f3A; else goto c3f3B;
       c3f3A: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowFloat_$sshowSignedFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3f3B: // global
           I64[Sp - 24] = block_c3f3w_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3f3F; else goto c3f3x;
       u3f3F: // global
           call _c3f3w(R1) args: 0, res: 0, upd: 0;
       c3f3x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$sshowSignedFloat_info" {
     GHC.Float.$fShowFloat_$sshowSignedFloat_info:
         const GHC.Float.$fShowFloat_$sshowSignedFloat_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3f3w() //  [R1]
         { []
         }
     {offset
       c3f3w: // global
           F1 = F32[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f3w_info" {
     block_c3f3w_info:
         const _c3f3w;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.936302803 UTC

[section ""data" . GHC.Float.$w$sshowSignedFloat_closure" {
     GHC.Float.$w$sshowSignedFloat_closure:
         const GHC.Float.$w$sshowSignedFloat_info;
 },
 GHC.Float.$w$sshowSignedFloat_slow() //  [R1]
         { []
         }
     {offset
       c3f3R: // global
           D1 = F64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 24;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 g_s3b3t_entry() //  [R1]
         { []
         }
     {offset
       c3f4b: // global
           _s3b3t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3f4e; else goto c3f4f;
       c3f4f: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3f4h; else goto c3f4g;
       c3f4h: // global
           HpAlloc = 16;
           goto c3f4e;
       c3f4e: // global
           R1 = _s3b3t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f4g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3b3t::P64;
           _s3b3n::P64 = P64[_s3b3t::P64 + 16];
           _s3b3u::F64 = %MO_F_Neg_W64(F64[_s3b3t::P64 + 24]);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3b3u::F64;
           R2 = Hp - 7;
           R1 = _s3b3n::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s3b3t_info" {
     g_s3b3t_info:
         const g_s3b3t_entry;
         const 4294967297;
         const 19;
 },
 sat_s3b3z_entry() //  [R1, R2]
         { []
         }
     {offset
       c3f4s: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3f4w; else goto c3f4v;
       c3f4w: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3f4v: // global
           _s3b3t::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3b3t::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3b3z_info" {
     sat_s3b3z_info:
         const sat_s3b3z_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3b3C_entry() //  [R1]
         { []
         }
     {offset
       c3f4I: // global
           _s3b3C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3f4J; else goto c3f4K;
       c3f4K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3f4M; else goto c3f4L;
       c3f4M: // global
           HpAlloc = 24;
           goto c3f4J;
       c3f4J: // global
           R1 = _s3b3C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f4L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3b3C::P64;
           _s3b3t::P64 = P64[_s3b3C::P64 + 16];
           _s3b3A::P64 = P64[_s3b3C::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3b3A::P64;
           R2 = Hp - 14;
           R1 = _s3b3t::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b3C_info" {
     sat_s3b3C_info:
         const sat_s3b3C_entry;
         const 2;
         const 18;
 },
 sat_s3b3E_entry() //  [R1, R2]
         { []
         }
     {offset
       c3f4P: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3f4T; else goto c3f4S;
       c3f4T: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3f4S: // global
           _s3b3t::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s3b3C_info;
           P64[Hp - 56] = _s3b3t::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3b3E_info" {
     sat_s3b3E_info:
         const sat_s3b3E_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Float.$w$sshowSignedFloat_entry() //  [R2, R3, D1]
         { []
         }
     {offset
       c3f4Z: // global
           _s3b3p::F64 = D1;
           _s3b3o::P64 = R3;
           _s3b3n::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c3f50; else goto c3f51;
       c3f51: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3f53; else goto c3f52;
       c3f53: // global
           HpAlloc = 16;
           goto c3f50;
       c3f50: // global
           R1 = GHC.Float.$w$sshowSignedFloat_closure;
           P64[Sp - 24] = _s3b3n::P64;
           P64[Sp - 16] = _s3b3o::P64;
           F64[Sp - 8] = _s3b3p::F64;
           Sp = Sp - 24;
           call (stg_gc_fun)(R1) args: 32, res: 0, upd: 8;
       c3f52: // global
           if (%MO_F_Lt_W64(_s3b3p::F64,
                            0.0 :: W64)) goto c3f4Y; else goto c3f4X;
       c3f4X: // global
           (_s3b3J::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(_s3b3p::F64);
           if (_s3b3J::I64 != 0) goto c3f4Y; else goto c3f5k;
       c3f4Y: // global
           Hp = Hp - 16;
           I64[Sp - 24] = block_c3f40_info;
           R1 = _s3b3o::P64;
           P64[Sp - 16] = _s3b3n::P64;
           F64[Sp - 8] = _s3b3p::F64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3f5l; else goto c3f41;
       u3f5l: // global
           call _c3f40(R1) args: 0, res: 0, upd: 0;
       c3f41: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3f5k: // global
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s3b3p::F64;
           R2 = Hp - 7;
           R1 = _s3b3n::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sshowSignedFloat_info" {
     GHC.Float.$w$sshowSignedFloat_info:
         const GHC.Float.$w$sshowSignedFloat_entry;
         const 0;
         const 14;
         const 12884901888;
         const 0;
         const 259;
         const GHC.Float.$w$sshowSignedFloat_slow;
 },
 _c3f40() //  [R1]
         { []
         }
     {offset
       c3f40: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3f57; else goto c3f56;
       c3f57: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3f56: // global
           _s3b3s::I64 = I64[R1 + 7];
           I64[Hp - 40] = g_s3b3t_info;
           P64[Hp - 24] = P64[Sp + 8];
           F64[Hp - 16] = F64[Sp + 16];
           _c3f45::P64 = Hp - 40;
           if (%MO_S_Le_W64(_s3b3s::I64, 6)) goto c3f59; else goto c3f5a;
       c3f59: // global
           I64[Hp - 8] = sat_s3b3z_info;
           P64[Hp] = _c3f45::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3f5a: // global
           I64[Hp - 8] = sat_s3b3E_info;
           P64[Hp] = _c3f45::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f40_info" {
     block_c3f40_info:
         const _c3f40;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.952894469 UTC

[section ""data" . GHC.Float.$fShowDouble_$sshowSignedFloat_closure" {
     GHC.Float.$fShowDouble_$sshowSignedFloat_closure:
         const GHC.Float.$fShowDouble_$sshowSignedFloat_info;
 },
 GHC.Float.$fShowDouble_$sshowSignedFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3f6o: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3f6p; else goto c3f6q;
       c3f6p: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowDouble_$sshowSignedFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3f6q: // global
           I64[Sp - 24] = block_c3f6l_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3f6u; else goto c3f6m;
       u3f6u: // global
           call _c3f6l(R1) args: 0, res: 0, upd: 0;
       c3f6m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$sshowSignedFloat_info" {
     GHC.Float.$fShowDouble_$sshowSignedFloat_info:
         const GHC.Float.$fShowDouble_$sshowSignedFloat_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3f6l() //  [R1]
         { []
         }
     {offset
       c3f6l: // global
           D1 = F64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f6l_info" {
     block_c3f6l_info:
         const _c3f6l;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.964123217 UTC

[section ""data" . GHC.Float.showSignedFloat_closure" {
     GHC.Float.showSignedFloat_closure:
         const GHC.Float.showSignedFloat_info;
         const 0;
 },
 $dNum_s3b3X_entry() //  [R1]
         { []
         }
     {offset
       c3f6V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3f6W; else goto c3f6X;
       c3f6W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f6X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s3b3X_info" {
     $dNum_s3b3X_info:
         const $dNum_s3b3X_entry;
         const 1;
         const 16;
 },
 sat_s3b4d_entry() //  [R1]
         { []
         }
     {offset
       c3f72: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3f73; else goto c3f74;
       c3f73: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f74: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b4d_info" {
     sat_s3b4d_info:
         const sat_s3b4d_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+832;
 },
 sat_s3b42_entry() //  [R1]
         { []
         }
     {offset
       c3f7r: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3f7s; else goto c3f7t;
       c3f7s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f7t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b42_info" {
     sat_s3b42_info:
         const sat_s3b42_entry;
         const 2;
         const 18;
 },
 g_s3b41_entry() //  [R1]
         { []
         }
     {offset
       c3f7u: // global
           _s3b41::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3f7v; else goto c3f7w;
       c3f7w: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3f7y; else goto c3f7x;
       c3f7y: // global
           HpAlloc = 32;
           goto c3f7v;
       c3f7v: // global
           R1 = _s3b41::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f7x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3b41::P64;
           _s3b3S::P64 = P64[_s3b41::P64 + 16];
           _s3b3U::P64 = P64[_s3b41::P64 + 24];
           _s3b3X::P64 = P64[_s3b41::P64 + 32];
           I64[Hp - 24] = sat_s3b42_info;
           P64[Hp - 8] = _s3b3U::P64;
           P64[Hp] = _s3b3X::P64;
           R2 = Hp - 24;
           R1 = _s3b3S::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s3b41_info" {
     g_s3b41_info:
         const g_s3b41_entry;
         const 3;
         const 15;
 },
 sat_s3b46_entry() //  [R1, R2]
         { []
         }
     {offset
       c3f7J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3f7N; else goto c3f7M;
       c3f7N: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3f7M: // global
           _s3b41::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s3b41::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3b46_info" {
     sat_s3b46_info:
         const sat_s3b46_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3b49_entry() //  [R1]
         { []
         }
     {offset
       c3f7Z: // global
           _s3b49::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3f80; else goto c3f81;
       c3f81: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3f83; else goto c3f82;
       c3f83: // global
           HpAlloc = 24;
           goto c3f80;
       c3f80: // global
           R1 = _s3b49::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3f82: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3b49::P64;
           _s3b41::P64 = P64[_s3b49::P64 + 16];
           _s3b47::P64 = P64[_s3b49::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s3b47::P64;
           R2 = Hp - 14;
           R1 = _s3b41::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b49_info" {
     sat_s3b49_info:
         const sat_s3b49_entry;
         const 2;
         const 18;
 },
 sat_s3b4b_entry() //  [R1, R2]
         { []
         }
     {offset
       c3f86: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3f8a; else goto c3f89;
       c3f8a: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3f89: // global
           _s3b41::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s3b49_info;
           P64[Hp - 56] = _s3b41::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3b4b_info" {
     sat_s3b4b_info:
         const sat_s3b4b_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Float.showSignedFloat_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3f8b: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3f8c; else goto c3f8d;
       c3f8c: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.showSignedFloat_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3f8d: // global
           I64[Sp - 40] = block_c3f6J_info;
           _s3b3R::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s3b3R::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.showSignedFloat_info" {
     GHC.Float.showSignedFloat_info:
         const GHC.Float.showSignedFloat_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3bQP_srt+832;
 },
 _c3f6J() //  [R1]
         { []
         }
     {offset
       c3f6J: // global
           I64[Sp] = block_c3f6N_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f6J_info" {
     block_c3f6J_info:
         const _c3f6J;
         const 4;
         const 4294967326;
         const S3bQP_srt+832;
 },
 _c3f6N() //  [R1]
         { []
         }
     {offset
       c3f6N: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3f8h; else goto c3f8g;
       c3f8h: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3f8g: // global
           I64[Hp - 40] = $dNum_s3b3X_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s3b4d_info;
           _c3f6R::P64 = Hp - 40;
           P64[Hp] = _c3f6R::P64;
           I64[Sp - 16] = block_c3f75_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c3f6R::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f6N_info" {
     block_c3f6N_info:
         const _c3f6N;
         const 4;
         const 4294967326;
         const S3bQP_srt+832;
 },
 _c3f75() //  [R1]
         { []
         }
     {offset
       c3f75: // global
           _c3f6Y::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3f8i_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = _c3f6Y::P64;
           Sp = Sp - 16;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f75_info" {
     block_c3f75_info:
         const _c3f75;
         const 6;
         const 30;
 },
 _c3f8i() //  [R1]
         { []
         }
     {offset
       c3f8i: // global
           if (R1 & 7 == 1) goto c3f8x; else goto u3f8O;
       c3f8x: // global
           I64[Sp] = block_c3f8u_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
       u3f8O: // global
           Sp = Sp + 8;
           call _s3b3Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3f8i_info" {
     block_c3f8i_info:
         const _c3f8i;
         const 5;
         const 30;
 },
 _c3f8u() //  [R1]
         { []
         }
     {offset
       c3f8u: // global
           if (R1 & 7 == 1) goto c3f8D; else goto u3f8P;
       c3f8D: // global
           R2 = P64[Sp + 40];
           R1 = P64[Sp + 24];
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       u3f8P: // global
           Sp = Sp + 8;
           call _s3b3Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3f8u_info" {
     block_c3f8u_info:
         const _c3f8u;
         const 133;
         const 30;
 },
 _s3b3Y() //  []
         { []
         }
     {offset
       s3b3Y: // global
           I64[Sp - 8] = block_c3f7e_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3f8S; else goto c3f7f;
       u3f8S: // global
           call _c3f7e(R1) args: 0, res: 0, upd: 0;
       c3f7f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3f7e() //  [R1]
         { []
         }
     {offset
       c3f7e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3f8n; else goto c3f8m;
       c3f8n: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3f8m: // global
           _s3b40::I64 = I64[R1 + 7];
           I64[Hp - 48] = g_s3b41_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 8];
           _c3f7j::P64 = Hp - 48;
           if (%MO_S_Le_W64(_s3b40::I64, 6)) goto c3f8p; else goto c3f8q;
       c3f8p: // global
           I64[Hp - 8] = sat_s3b46_info;
           P64[Hp] = _c3f7j::P64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3f8q: // global
           I64[Hp - 8] = sat_s3b4b_info;
           P64[Hp] = _c3f7j::P64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3f7e_info" {
     block_c3f7e_info:
         const _c3f7e;
         const 645;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:53.993762636 UTC

[section ""data" . GHC.Float.clamp_closure" {
     GHC.Float.clamp_closure:
         const GHC.Float.clamp_info;
 },
 GHC.Float.clamp_entry() //  [R2, R3]
         { []
         }
     {offset
       c3faE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3faI; else goto c3faJ;
       c3faI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.clamp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3faJ: // global
           I64[Sp - 16] = block_c3faB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3fbh; else goto c3faC;
       u3fbh: // global
           call _c3faB(R1) args: 0, res: 0, upd: 0;
       c3faC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.clamp_info" {
     GHC.Float.clamp_info:
         const GHC.Float.clamp_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3faB() //  [R1]
         { []
         }
     {offset
       c3faB: // global
           I64[Sp - 8] = block_c3faH_info;
           _s3b4i::P64 = R1;
           _s3b4j::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s3b4j::I64;
           P64[Sp + 8] = _s3b4i::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3fbg; else goto c3faL;
       u3fbg: // global
           call _c3faH(R1) args: 0, res: 0, upd: 0;
       c3faL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3faB_info" {
     block_c3faB_info:
         const _c3faB;
         const 1;
         const 30;
 },
 _c3faH() //  [R1]
         { []
         }
     {offset
       c3faH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3faR; else goto c3faQ;
       c3faR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3faQ: // global
           _s3b4j::I64 = I64[Sp + 8];
           _s3b4l::I64 = I64[R1 + 7];
           _s3b4m::I64 = -_s3b4j::I64;
           if (%MO_S_Gt_W64(_s3b4j::I64,
                            _s3b4l::I64)) goto c3fb6; else goto c3fbf;
       c3fb6: // global
           if (%MO_S_Gt_W64(_s3b4m::I64,
                            _s3b4l::I64)) goto c3fb3; else goto c3fb4;
       c3fb3: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b4m::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3fb4: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3fbf: // global
           if (%MO_S_Gt_W64(_s3b4m::I64,
                            _s3b4j::I64)) goto c3fbd; else goto c3fbe;
       c3fbd: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b4m::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3fbe: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3faH_info" {
     block_c3faH_info:
         const _c3faH;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.008420874 UTC

[section ""data" . GHC.Float.$dmscaleFloat_closure" {
     GHC.Float.$dmscaleFloat_closure:
         const GHC.Float.$dmscaleFloat_info;
         const 0;
 },
 sat_s3b4B_entry() //  [R1]
         { []
         }
     {offset
       c3fc4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fc5; else goto c3fc6;
       c3fc5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fc6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fc2_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b4B_info" {
     sat_s3b4B_info:
         const sat_s3b4B_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+832;
 },
 _c3fc2() //  [R1]
         { []
         }
     {offset
       c3fc2: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fc2_info" {
     block_c3fc2_info:
         const _c3fc2;
         const 0;
         const 4294967326;
         const S3bQP_srt+832;
 },
 ds2_s3b4F_entry() //  [R1]
         { []
         }
     {offset
       c3fcy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fcz; else goto c3fcA;
       c3fcz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fcA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.decodeFloat_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s3b4F_info" {
     ds2_s3b4F_info:
         const ds2_s3b4F_entry;
         const 2;
         const 18;
 },
 sat_s3b59_entry() //  [R1]
         { []
         }
     {offset
       c3fcI: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3fd5; else goto c3fd6;
       c3fd5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fd6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c3fcF_info;
           _s3b4q::P64 = P64[R1 + 16];
           _s3b4s::P64 = P64[R1 + 24];
           _s3b4v::I64 = I64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s3b4q::P64;
           P64[Sp - 32] = _s3b4s::P64;
           I64[Sp - 24] = _s3b4v::I64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3fe6; else goto c3fcG;
       u3fe6: // global
           call _c3fcF(R1) args: 0, res: 0, upd: 0;
       c3fcG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b59_info" {
     sat_s3b59_info:
         const sat_s3b59_entry;
         const 4294967299;
         const 15;
 },
 _c3fcF() //  [R1]
         { []
         }
     {offset
       c3fcF: // global
           I64[Sp] = block_c3fcL_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3fe5; else goto c3fcM;
       u3fe5: // global
           call _c3fcL(R1) args: 0, res: 0, upd: 0;
       c3fcM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fcF_info" {
     block_c3fcF_info:
         const _c3fcF;
         const 259;
         const 30;
 },
 _c3fcL() //  [R1]
         { []
         }
     {offset
       c3fcL: // global
           I64[Sp - 8] = block_c3fcQ_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fcL_info" {
     block_c3fcL_info:
         const _c3fcL;
         const 259;
         const 30;
 },
 _c3fcQ() //  [R1]
         { []
         }
     {offset
       c3fcQ: // global
           I64[Sp - 8] = block_c3fcU_info;
           _s3b4Q::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s3b4Q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3fe7; else goto c3fcV;
       u3fe7: // global
           call _c3fcU(R1) args: 0, res: 0, upd: 0;
       c3fcV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fcQ_info" {
     block_c3fcQ_info:
         const _c3fcQ;
         const 580;
         const 30;
 },
 _c3fcU() //  [R1]
         { []
         }
     {offset
       c3fcU: // global
           I64[Sp] = block_c3fcZ_info;
           _s3b4T::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3b4T::I64;
           if (R1 & 7 != 0) goto u3fe8; else goto c3fd0;
       u3fe8: // global
           call _c3fcZ(R1) args: 0, res: 0, upd: 0;
       c3fd0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fcU_info" {
     block_c3fcU_info:
         const _c3fcU;
         const 1157;
         const 30;
 },
 _c3fcZ() //  [R1]
         { []
         }
     {offset
       c3fcZ: // global
           I64[Sp] = block_c3fd4_info;
           R2 = P64[Sp + 24];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fcZ_info" {
     block_c3fcZ_info:
         const _c3fcZ;
         const 1221;
         const 30;
 },
 _c3fd4() //  [R1]
         { []
         }
     {offset
       c3fd4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fdh; else goto c3fdg;
       c3fdh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3fdg: // global
           _s3b4v::I64 = I64[Sp + 40];
           _s3b4O::I64 = I64[Sp + 16];
           _s3b4Y::I64 = I64[Sp + 8] + ((I64[R1 + 7] << 2) - I64[Sp + 32]);
           _s3b51::I64 = -_s3b4Y::I64;
           if (%MO_S_Gt_W64(_s3b4Y::I64,
                            _s3b4v::I64)) goto c3fdN; else goto c3fe4;
       c3fdN: // global
           if (%MO_S_Gt_W64(_s3b51::I64,
                            _s3b4v::I64)) goto c3fdF; else goto c3fdL;
       c3fdF: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b4O::I64 + _s3b51::I64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fdL: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b4O::I64 + _s3b4v::I64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fe4: // global
           if (%MO_S_Gt_W64(_s3b51::I64,
                            _s3b4Y::I64)) goto c3fdX; else goto c3fe3;
       c3fdX: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b4O::I64 + _s3b51::I64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fe3: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b4O::I64 + _s3b4Y::I64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fd4_info" {
     block_c3fd4_info:
         const _c3fd4;
         const 1989;
         const 30;
 },
 GHC.Float.$dmscaleFloat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3fe9: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3fea; else goto c3feb;
       c3fea: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$dmscaleFloat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3feb: // global
           I64[Sp - 24] = block_c3fbJ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3feV; else goto c3fbK;
       u3feV: // global
           call _c3fbJ(R1) args: 0, res: 0, upd: 0;
       c3fbK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$dmscaleFloat_info" {
     GHC.Float.$dmscaleFloat_info:
         const GHC.Float.$dmscaleFloat_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3bQP_srt+832;
 },
 _c3fbJ() //  [R1]
         { []
         }
     {offset
       c3fbJ: // global
           _s3b4v::I64 = I64[R1 + 7];
           if (_s3b4v::I64 != 0) goto c3fee; else goto u3feN;
       c3fee: // global
           I64[Sp - 8] = block_c3fbQ_info;
           R2 = P64[Sp + 8];
           I64[Sp] = _s3b4v::I64;
           Sp = Sp - 8;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
       u3feN: // global
           Sp = Sp + 16;
           call _c3feI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fbJ_info" {
     block_c3fbJ_info:
         const _c3fbJ;
         const 2;
         const 4294967326;
         const S3bQP_srt+832;
 },
 _c3fbQ() //  [R1]
         { []
         }
     {offset
       c3fbQ: // global
           I64[Sp] = block_c3fbU_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fbQ_info" {
     block_c3fbQ_info:
         const _c3fbQ;
         const 67;
         const 4294967326;
         const S3bQP_srt+832;
 },
 _c3fbU() //  [R1]
         { []
         }
     {offset
       c3fbU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3fei; else goto c3feh;
       c3fei: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3feh: // global
           I64[Hp - 16] = sat_s3b4B_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c3fca_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fbU_info" {
     block_c3fbU_info:
         const _c3fbU;
         const 67;
         const 4294967326;
         const S3bQP_srt+832;
 },
 _c3fca() //  [R1]
         { []
         }
     {offset
       c3fca: // global
           I64[Sp] = block_c3fce_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fca_info" {
     block_c3fca_info:
         const _c3fca;
         const 132;
         const 30;
 },
 _c3fce() //  [R1]
         { []
         }
     {offset
       c3fce: // global
           _c3fbY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3fci_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c3fbY::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fce_info" {
     block_c3fce_info:
         const _c3fce;
         const 132;
         const 30;
 },
 _c3fci() //  [R1]
         { []
         }
     {offset
       c3fci: // global
           if (R1 & 7 == 1) goto c3fen; else goto u3feO;
       c3fen: // global
           I64[Sp] = block_c3fcm_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 16;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 8, upd: 8;
       u3feO: // global
           Sp = Sp + 24;
           call _c3feI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fci_info" {
     block_c3fci_info:
         const _c3fci;
         const 67;
         const 30;
 },
 _c3fcm() //  [R1]
         { []
         }
     {offset
       c3fcm: // global
           if (R1 & 7 == 1) goto c3feq; else goto u3feP;
       c3feq: // global
           I64[Sp] = block_c3fcq_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 16;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 8;
       u3feP: // global
           Sp = Sp + 24;
           call _c3feI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fcm_info" {
     block_c3fcm_info:
         const _c3fcm;
         const 67;
         const 30;
 },
 _c3fcq() //  [R1]
         { []
         }
     {offset
       c3fcq: // global
           if (R1 & 7 == 1) goto c3fes; else goto u3feQ;
       c3fes: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3fev; else goto c3feu;
       c3fev: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3feu: // global
           I64[Hp - 96] = ds2_s3b4F_info;
           _s3b4q::P64 = P64[Sp + 16];
           P64[Hp - 80] = _s3b4q::P64;
           _s3b4s::P64 = P64[Sp + 24];
           P64[Hp - 72] = _s3b4s::P64;
           I64[Hp - 64] = sat_s3b59_info;
           P64[Hp - 48] = _s3b4q::P64;
           P64[Hp - 40] = _s3b4s::P64;
           _c3fcu::P64 = Hp - 96;
           P64[Hp - 32] = _c3fcu::P64;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _c3fcu::P64;
           R2 = _s3b4q::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           P64[Sp + 24] = Hp - 64;
           Sp = Sp + 8;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       u3feQ: // global
           Sp = Sp + 24;
           call _c3feI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fcq_info" {
     block_c3fcq_info:
         const _c3fcq;
         const 67;
         const 30;
 },
 _c3feI() //  []
         { []
         }
     {offset
       c3feI: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.065347089 UTC

[section ""data" . GHC.Float.$wfromRat''_closure" {
     GHC.Float.$wfromRat''_closure:
         const GHC.Float.$wfromRat''_info;
         const 0;
 },
 GHC.Float.$wfromRat''_slow() //  [R1]
         { []
         }
     {offset
       c3fha: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Float.$wfromRat''_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3b5y_entry() //  [R1]
         { []
         }
     {offset
       c3fhS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fhT; else goto c3fhU;
       c3fhT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fhU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b5y_info" {
     sat_s3b5y_info:
         const sat_s3b5y_entry;
         const 1;
         const 16;
 },
 sat_s3b5G_entry() //  [R1]
         { []
         }
     {offset
       c3fi9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fia; else goto c3fib;
       c3fia: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fib: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b5G_info" {
     sat_s3b5G_info:
         const sat_s3b5G_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . u3fs2_srtd" {
     u3fs2_srtd:
         const S3bQP_srt+48;
         const 96;
         const 1;
         const 2147483648;
 },
 ds_s3b5j_entry() //  [R1]
         { []
         }
     {offset
       c3fij: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3fik; else goto c3fk5;
       c3fik: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fk5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c3fic_info;
           _s3b5d::P64 = P64[R1 + 16];
           _s3b5e::P64 = P64[R1 + 24];
           _s3b5b::I64 = I64[R1 + 32];
           _s3b5c::I64 = I64[R1 + 40];
           _s3b5g::I64 = I64[R1 + 48];
           R1 = _s3b5d::P64;
           I64[Sp - 56] = _s3b5b::I64;
           I64[Sp - 48] = _s3b5c::I64;
           P64[Sp - 40] = _s3b5d::P64;
           P64[Sp - 32] = _s3b5e::P64;
           I64[Sp - 24] = _s3b5g::I64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u3fkH; else goto c3fid;
       u3fkH: // global
           call _c3fic(R1) args: 0, res: 0, upd: 0;
       c3fid: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s3b5j_info" {
     ds_s3b5j_info:
         const ds_s3b5j_entry;
         const 12884901890;
         const 18446744069414584335;
         const u3fs2_srtd;
 },
 section ""relreadonly" . u3fs3_srtd" {
     u3fs3_srtd:
         const S3bQP_srt+48;
         const 96;
         const 1;
         const 2147483648;
 },
 _c3fic() //  [R1]
         { []
         }
     {offset
       c3fic: // global
           if (R1 & 7 == 1) goto c3fih; else goto c3fig;
       c3fih: // global
           I64[Sp] = block_c3fkj_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 24;
       c3fig: // global
           _s3b5S::I64 = (-1) - I64[Sp + 40];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s3b5S::I64)) goto u3fkx; else goto c3fkg;
       u3fkx: // global
           Sp = Sp + 8;
           call _c3fkv() args: 0, res: 0, upd: 0;
       c3fkg: // global
           I64[Sp + 40] = _s3b5S::I64;
           Sp = Sp + 16;
           call _s3b5k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fic_info" {
     block_c3fic_info:
         const _c3fic;
         const 1221;
         const 18446744069414584350;
         const u3fs3_srtd;
 },
 _c3fkj() //  [R1]
         { []
         }
     {offset
       c3fkj: // global
           _s3b5W::I64 = R1 - I64[Sp + 40];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s3b5W::I64)) goto u3fkz; else goto c3fkw;
       u3fkz: // global
           Sp = Sp + 8;
           call _c3fkv() args: 0, res: 0, upd: 0;
       c3fkw: // global
           I64[Sp + 40] = _s3b5W::I64;
           Sp = Sp + 16;
           call _s3b5k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fkj_info" {
     block_c3fkj_info:
         const _c3fkj;
         const 1221;
         const 4294967326;
         const S3bQP_srt+856;
 },
 _c3fkv() //  []
         { []
         }
     {offset
       c3fkv: // global
           I64[Sp + 32] = I64[Sp];
           Sp = Sp + 8;
           call _s3b5k() args: 0, res: 0, upd: 0;
     }
 },
 _s3b5k() //  []
         { []
         }
     {offset
       s3b5k: // global
           _s3b5c::I64 = I64[Sp];
           _s3b5d::P64 = P64[Sp + 8];
           _s3b5l::I64 = I64[Sp + 24];
           if (%MO_S_Ge_W64(_s3b5l::I64,
                            _s3b5c::I64)) goto c3fjH; else goto c3fjY;
       c3fjH: // global
           _s3b5e::P64 = P64[Sp + 16];
           if (_s3b5l::I64 == _s3b5c::I64) goto c3fjF; else goto c3fjy;
       c3fjF: // global
           P64[Sp + 16] = _s3b5d::P64;
           P64[Sp + 8] = _s3b5e::P64;
           call _s3b5m() args: 0, res: 0, upd: 0;
       c3fjy: // global
           _s3b5J::I64 = _s3b5l::I64 - _s3b5c::I64;
           if (%MO_S_Lt_W64(_s3b5J::I64, 0)) goto c3fjt; else goto c3fjw;
       c3fjt: // global
           I64[Sp - 8] = block_c3fjv_info;
           R3 = -_s3b5J::I64;
           R2 = _s3b5e::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c3fjw: // global
           I64[Sp - 8] = block_c3fjv_info;
           R3 = _s3b5J::I64;
           R2 = _s3b5e::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c3fjY: // global
           _s3b5N::I64 = _s3b5c::I64 - _s3b5l::I64;
           if (%MO_S_Lt_W64(_s3b5N::I64, 0)) goto c3fjU; else goto c3fjX;
       c3fjU: // global
           I64[Sp - 8] = block_c3fjW_info;
           R3 = -_s3b5N::I64;
           R2 = _s3b5d::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c3fjX: // global
           I64[Sp - 8] = block_c3fjW_info;
           R3 = _s3b5N::I64;
           R2 = _s3b5d::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3fjv() //  [R1]
         { []
         }
     {offset
       c3fjv: // global
           _s3b5n::P64 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           P64[Sp + 24] = _s3b5n::P64;
           Sp = Sp + 8;
           call _s3b5m() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fjv_info" {
     block_c3fjv_info:
         const _c3fjv;
         const 836;
         const 4294967326;
         const S3bQP_srt+856;
 },
 _c3fjW() //  [R1]
         { []
         }
     {offset
       c3fjW: // global
           _s3b5o::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp + 16] = _s3b5o::P64;
           Sp = Sp + 8;
           call _s3b5m() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fjW_info" {
     block_c3fjW_info:
         const _c3fjW;
         const 708;
         const 4294967326;
         const S3bQP_srt+856;
 },
 _s3b5m() //  []
         { []
         }
     {offset
       s3b5m: // global
           _s3b5c::I64 = I64[Sp];
           _s3b5o::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(_s3b5c::I64, 0)) goto c3fio; else goto c3fiN;
       c3fio: // global
           I64[Sp - 8] = block_c3fhF_info;
           R3 = -_s3b5c::I64;
           R2 = _s3b5o::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c3fiN: // global
           I64[Sp - 8] = block_c3fhW_info;
           R3 = _s3b5c::I64;
           R2 = _s3b5o::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3fhF() //  [R1]
         { []
         }
     {offset
       c3fhF: // global
           I64[Sp] = block_c3fhJ_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fhF_info" {
     block_c3fhF_info:
         const _c3fhF;
         const 580;
         const 30;
 },
 _c3fhJ() //  [R1]
         { []
         }
     {offset
       c3fhJ: // global
           _s3b5c::I64 = I64[Sp + 8];
           _s3b5l::I64 = I64[Sp + 32];
           _s3b5n::P64 = P64[Sp + 24];
           _s3b5o::P64 = P64[Sp + 16];
           if (R1 == 1) goto c3fiJ; else goto c3fix;
       c3fiJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3fiM; else goto c3fiL;
       c3fiM: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fiL: // global
           I64[Hp - 64] = sat_s3b5y_info;
           P64[Hp - 48] = _s3b5o::P64;
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _s3b5l::I64 - _s3b5c::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _s3b5n::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fix: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3fiA; else goto c3fiz;
       c3fiA: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fiz: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _s3b5l::I64 - _s3b5c::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _s3b5n::P64;
           P64[Hp] = _s3b5o::P64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fhJ_info" {
     block_c3fhJ_info:
         const _c3fhJ;
         const 580;
         const 30;
 },
 _c3fhW() //  [R1]
         { []
         }
     {offset
       c3fhW: // global
           I64[Sp] = block_c3fi0_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fhW_info" {
     block_c3fhW_info:
         const _c3fhW;
         const 580;
         const 30;
 },
 _c3fi0() //  [R1]
         { []
         }
     {offset
       c3fi0: // global
           _s3b5c::I64 = I64[Sp + 8];
           _s3b5l::I64 = I64[Sp + 32];
           _s3b5n::P64 = P64[Sp + 24];
           _s3b5o::P64 = P64[Sp + 16];
           if (R1 == 1) goto c3fj8; else goto c3fiW;
       c3fj8: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3fjb; else goto c3fja;
       c3fjb: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fja: // global
           I64[Hp - 64] = sat_s3b5G_info;
           P64[Hp - 48] = _s3b5o::P64;
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _s3b5l::I64 - _s3b5c::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _s3b5n::P64;
           P64[Hp] = Hp - 64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fiW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3fiZ; else goto c3fiY;
       c3fiZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fiY: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _s3b5l::I64 - _s3b5c::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _s3b5n::P64;
           P64[Hp] = _s3b5o::P64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fi0_info" {
     block_c3fi0_info:
         const _c3fi0;
         const 580;
         const 30;
 },
 section ""relreadonly" . u3fs4_srtd" {
     u3fs4_srtd:
         const S3bQP_srt+8;
         const 104;
         const 288230376151711745;
         const 549755814016;
 },
 sat_s3b6b_entry() //  [R1]
         { []
         }
     {offset
       c3fkW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3fkX; else goto c3fkY;
       c3fkX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fkY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fkT_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3fm0; else goto c3fkU;
       u3fm0: // global
           call _c3fkT(R1) args: 0, res: 0, upd: 0;
       c3fkU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b6b_info" {
     sat_s3b6b_info:
         const sat_s3b6b_entry;
         const 1;
         const 18446744069414584336;
         const u3fs4_srtd;
 },
 section ""relreadonly" . u3fs5_srtd" {
     u3fs5_srtd:
         const S3bQP_srt+8;
         const 104;
         const 288230376151711745;
         const 549755814016;
 },
 _c3fkT() //  [R1]
         { []
         }
     {offset
       c3fkT: // global
           I64[Sp - 16] = block_c3fl1_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           _s3b61::P64 = P64[R1 + 23];
           R2 = _s3b61::P64;
           P64[Sp - 8] = _s3b61::P64;
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fkT_info" {
     block_c3fkT_info:
         const _c3fkT;
         const 0;
         const 18446744069414584350;
         const u3fs5_srtd;
 },
 _c3fl1() //  [R1]
         { []
         }
     {offset
       c3fl1: // global
           if (R1 == 1) goto c3flT; else goto c3flb;
       c3flT: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3flb: // global
           I64[Sp] = block_c3fl6_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fl1_info" {
     block_c3fl1_info:
         const _c3fl1;
         const 2;
         const 30064771102;
         const S3bQP_srt+864;
 },
 _c3fl6() //  [R1, R2]
         { []
         }
     {offset
       c3fl6: // global
           I64[Sp] = block_c3fl8_info;
           R3 = 1;
           R2 = R2;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fl6_info" {
     block_c3fl6_info:
         const _c3fl6;
         const 130;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3fl8() //  [R1]
         { []
         }
     {offset
       c3fl8: // global
           _s3b61::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3flg_info;
           R3 = _s3b61::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fl8_info" {
     block_c3fl8_info:
         const _c3fl8;
         const 2;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3flg() //  [R1]
         { []
         }
     {offset
       c3flg: // global
           _c3flU::P64 = R1 & 7;
           if (_c3flU::P64 < 3) goto u3flV; else goto u3flW;
       u3flV: // global
           if (_c3flU::P64 < 2) goto u3flX; else goto c3fls;
       u3flX: // global
           Sp = Sp + 8;
           call _c3flI() args: 0, res: 0, upd: 0;
       c3fls: // global
           I64[Sp] = block_c3flq_info;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
       u3flW: // global
           Sp = Sp + 8;
           call _c3flP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3flg_info" {
     block_c3flg_info:
         const _c3flg;
         const 1;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3flq() //  [R1]
         { []
         }
     {offset
       c3flq: // global
           if (R1 & 1 == 0) goto u3flY; else goto u3flZ;
       u3flY: // global
           Sp = Sp + 8;
           call _c3flI() args: 0, res: 0, upd: 0;
       u3flZ: // global
           Sp = Sp + 8;
           call _c3flP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3flq_info" {
     block_c3flq_info:
         const _c3flq;
         const 1;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3flI() //  []
         { []
         }
     {offset
       c3flI: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _c3flP() //  []
         { []
         }
     {offset
       c3flP: // global
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp];
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 n'_s3b6C_entry() //  [R1]
         { []
         }
     {offset
       c3fmD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fmE; else goto c3fmL;
       c3fmE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fmL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s3b5d::P64 = P64[R1 + 16];
           _s3b6D::I64 = -I64[R1 + 24];
           if (%MO_S_Lt_W64(_s3b6D::I64, 0)) goto c3fmJ; else goto c3fmK;
       c3fmJ: // global
           R3 = -_s3b6D::I64;
           R2 = _s3b5d::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
       c3fmK: // global
           R3 = _s3b6D::I64;
           R2 = _s3b5d::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n'_s3b6C_info" {
     n'_s3b6C_info:
         const n'_s3b6C_entry;
         const 4294967297;
         const 4294967315;
         const S3bQP_srt+856;
 },
 sat_s3b6I_entry() //  [R1]
         { []
         }
     {offset
       c3fn3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fn4; else goto c3fn5;
       c3fn4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fn5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b6I_info" {
     sat_s3b6I_info:
         const sat_s3b6I_entry;
         const 1;
         const 21474836496;
         const S3bQP_srt+864;
 },
 sat_s3b6P_entry() //  [R1]
         { []
         }
     {offset
       c3fnr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fns; else goto c3fnt;
       c3fns: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fnt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b6P_info" {
     sat_s3b6P_info:
         const sat_s3b6P_entry;
         const 1;
         const 21474836496;
         const S3bQP_srt+864;
 },
 section ""relreadonly" . u3fs6_srtd" {
     u3fs6_srtd:
         const S3bQP_srt+56;
         const 104;
         const 1;
         const 755914244096;
 },
 sat_s3b7b_entry() //  [R1]
         { []
         }
     {offset
       c3fnO: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3fnP; else goto c3foZ;
       c3fnP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3foZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s3b5d::P64 = P64[R1 + 16];
           _s3b5c::I64 = I64[R1 + 24];
           _s3b6i::I64 = I64[R1 + 32];
           _s3b6Y::I64 = -((_s3b6i::I64 + 1) - _s3b5c::I64);
           if (%MO_S_Lt_W64(_s3b6Y::I64, 0)) goto c3foN; else goto c3foU;
       c3foN: // global
           I64[Sp - 48] = block_c3foL_info;
           R3 = -_s3b6Y::I64;
           R2 = _s3b5d::P64;
           I64[Sp - 40] = _s3b5c::I64;
           P64[Sp - 32] = _s3b5d::P64;
           I64[Sp - 24] = _s3b6i::I64;
           Sp = Sp - 48;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
       c3foU: // global
           I64[Sp - 48] = block_c3foT_info;
           R3 = _s3b6Y::I64;
           R2 = _s3b5d::P64;
           I64[Sp - 40] = _s3b5c::I64;
           P64[Sp - 32] = _s3b5d::P64;
           I64[Sp - 24] = _s3b6i::I64;
           Sp = Sp - 48;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b7b_info" {
     sat_s3b7b_info:
         const sat_s3b7b_entry;
         const 8589934593;
         const 18446744069414584335;
         const u3fs6_srtd;
 },
 section ""relreadonly" . u3fs7_srtd" {
     u3fs7_srtd:
         const S3bQP_srt+56;
         const 104;
         const 1;
         const 687194767360;
 },
 _c3foL() //  [R1]
         { []
         }
     {offset
       c3foL: // global
           P64[Sp] = R1;
           call _s3b71() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3foL_info" {
     block_c3foL_info:
         const _c3foL;
         const 323;
         const 18446744069414584350;
         const u3fs7_srtd;
 },
 section ""relreadonly" . u3fs8_srtd" {
     u3fs8_srtd:
         const S3bQP_srt+56;
         const 104;
         const 1;
         const 687194767360;
 },
 _c3foT() //  [R1]
         { []
         }
     {offset
       c3foT: // global
           P64[Sp] = R1;
           call _s3b71() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3foT_info" {
     block_c3foT_info:
         const _c3foT;
         const 323;
         const 18446744069414584350;
         const u3fs8_srtd;
 },
 _s3b71() //  []
         { []
         }
     {offset
       s3b71: // global
           _s3b73::I64 = I64[Sp + 24] - I64[Sp + 8];
           I64[Sp - 8] = block_c3fo6_info;
           R3 = _s3b73::I64;
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3fo6() //  [R1]
         { []
         }
     {offset
       c3fo6: // global
           if (R1 == 0) goto u3fp3; else goto u3fp0;
       u3fp3: // global
           Sp = Sp + 8;
           call _c3foA() args: 0, res: 0, upd: 0;
       u3fp0: // global
           if (R1 == 2) goto u3fp4; else goto c3fod;
       u3fp4: // global
           Sp = Sp + 8;
           call _c3foE() args: 0, res: 0, upd: 0;
       c3fod: // global
           I64[Sp] = block_c3foa_info;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fo6_info" {
     block_c3fo6_info:
         const _c3fo6;
         const 900;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3foa() //  [R1]
         { []
         }
     {offset
       c3foa: // global
           if (R1 & 1 == 0) goto u3fp5; else goto u3fp6;
       u3fp5: // global
           Sp = Sp + 8;
           call _c3foA() args: 0, res: 0, upd: 0;
       u3fp6: // global
           Sp = Sp + 8;
           call _c3foE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3foa_info" {
     block_c3foa_info:
         const _c3foa;
         const 900;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3foA() //  []
         { []
         }
     {offset
       c3foA: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _c3foE() //  []
         { []
         }
     {offset
       c3foE: // global
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp];
           Sp = Sp + 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . u3fs9_srtd" {
     u3fs9_srtd:
         const S3bQP_srt+56;
         const 105;
         const 5;
         const 2139967455232;
 },
 GHC.Float.$wfromRat''_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3fpk: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3fpl; else goto c3fpm;
       c3fpl: // global
           R1 = GHC.Float.$wfromRat''_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c3fpm: // global
           I64[Sp - 48] = block_c3fpd_info;
           R1 = R6;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3frW; else goto c3fpe;
       u3frW: // global
           call _c3fpd(R1) args: 0, res: 0, upd: 0;
       c3fpe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wfromRat''_info" {
     GHC.Float.$wfromRat''_info:
         const GHC.Float.$wfromRat''_entry;
         const 0;
         const 18446744069414584334;
         const 21474836480;
         const u3fs9_srtd;
         const 389;
         const GHC.Float.$wfromRat''_slow;
 },
 section ""relreadonly" . u3fsa_srtd" {
     u3fsa_srtd:
         const S3bQP_srt+56;
         const 104;
         const 5;
         const 1040455827456;
 },
 _c3fpd() //  [R1]
         { []
         }
     {offset
       c3fpd: // global
           if (R1 & 7 == 1) goto c3fpi; else goto c3fph;
       c3fpi: // global
           I64[Sp] = block_c3fr2_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c3fph: // global
           I64[Sp - 8] = 1;
           I64[Sp] = (-1);
           Sp = Sp - 16;
           call _c3fhg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fpd_info" {
     block_c3fpd_info:
         const _c3fpd;
         const 389;
         const 18446744069414584350;
         const u3fsa_srtd;
 },
 section ""relreadonly" . u3fsb_srtd" {
     u3fsb_srtd:
         const S3bQP_srt+56;
         const 104;
         const 5;
         const 1040455827456;
 },
 _c3fr2() //  [R1, R2]
         { []
         }
     {offset
       c3fr2: // global
           I64[Sp] = R1;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c3fhg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fr2_info" {
     block_c3fr2_info:
         const _c3fr2;
         const 389;
         const 18446744069414584350;
         const u3fsb_srtd;
 },
 section ""relreadonly" . u3fsc_srtd" {
     u3fsc_srtd:
         const S3bQP_srt+56;
         const 104;
         const 5;
         const 1040455827456;
 },
 _c3fhg() //  []
         { []
         }
     {offset
       c3fhg: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3fpp; else goto c3fpo;
       c3fpp: // global
           HpAlloc = 104;
           I64[Sp] = block_c3fhg_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3fpo: // global
           _s3b5d::P64 = P64[Sp + 48];
           if (I64[Sp + 8] == 0) goto c3fqG; else goto c3fpr;
       c3fqG: // global
           Hp = Hp - 104;
           I64[Sp + 8] = block_c3fps_info;
           R1 = _s3b5d::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3frP; else goto c3fqH;
       u3frP: // global
           call _c3fps(R1) args: 0, res: 0, upd: 0;
       c3fqH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3fpr: // global
           I64[Hp - 96] = ds_s3b5j_info;
           P64[Hp - 80] = _s3b5d::P64;
           P64[Hp - 72] = P64[Sp + 56];
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = stg_sel_0_upd_info;
           _c3fhl::P64 = Hp - 96;
           P64[Hp - 24] = _c3fhl::P64;
           I64[Hp - 16] = sat_s3b6b_info;
           P64[Hp] = _c3fhl::P64;
           R2 = P64[Sp + 24];
           I64[Sp + 40] = stg_ap_pp_info;
           P64[Sp + 48] = Hp - 16;
           P64[Sp + 56] = Hp - 40;
           Sp = Sp + 40;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fhg_info" {
     block_c3fhg_info:
         const _c3fhg;
         const 1735;
         const 18446744069414584350;
         const u3fsc_srtd;
 },
 section ""relreadonly" . u3fsd_srtd" {
     u3fsd_srtd:
         const S3bQP_srt+56;
         const 104;
         const 5;
         const 765577920512;
 },
 _c3fps() //  [R1]
         { []
         }
     {offset
       c3fps: // global
           if (R1 & 7 == 1) goto c3fqS; else goto c3fqN;
       c3fqS: // global
           I64[Sp] = block_c3fqQ_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2#_step_entry(R3,
                                                                         R2) args: 8, res: 8, upd: 8;
       c3fqN: // global
           I64[Sp + 48] = (-1);
           Sp = Sp + 8;
           call _c3fm9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fps_info" {
     block_c3fps_info:
         const _c3fps;
         const 2886;
         const 18446744069414584350;
         const u3fsd_srtd;
 },
 section ""relreadonly" . u3fse_srtd" {
     u3fse_srtd:
         const S3bQP_srt+56;
         const 104;
         const 5;
         const 764504178688;
 },
 _c3fqQ() //  [R1]
         { []
         }
     {offset
       c3fqQ: // global
           I64[Sp + 48] = R1;
           Sp = Sp + 8;
           call _c3fm9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fqQ_info" {
     block_c3fqQ_info:
         const _c3fqQ;
         const 2886;
         const 18446744069414584350;
         const u3fse_srtd;
 },
 _c3fm9() //  []
         { []
         }
     {offset
       c3fm9: // global
           Hp = Hp + 56;
           _s3b6i::I64 = I64[Sp + 40];
           if (Hp > HpLim) (likely: False) goto c3fpv; else goto c3fpu;
       c3fpv: // global
           HpAlloc = 56;
           I64[Sp - 8] = block_c3fm8_info;
           R1 = _s3b6i::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fpu: // global
           _s3b5a::P64 = P64[Sp + 8];
           _s3b5b::I64 = I64[Sp + 16];
           _s3b5c::I64 = I64[Sp + 24];
           _s3b5d::P64 = P64[Sp + 32];
           _s3b5g::I64 = I64[Sp];
           if (%MO_S_Lt_W64(_s3b6i::I64,
                            _s3b5g::I64 + _s3b5b::I64 - 1)) goto c3fqB; else goto c3fqF;
       c3fqB: // global
           _s3b6m::I64 = _s3b5g::I64 + (_s3b5b::I64 - _s3b5c::I64);
           if (%MO_S_Gt_W64(_s3b6m::I64, 0)) goto c3fqy; else goto c3fqz;
       c3fqy: // global
           if (%MO_S_Gt_W64(_s3b6m::I64,
                            _s3b6i::I64)) goto c3fq5; else goto c3fq6;
       c3fq5: // global
           if (%MO_S_Le_W64(_s3b6m::I64,
                            _s3b6i::I64 + 1)) goto c3fpE; else goto c3fq3;
       c3fpE: // global
           Hp = Hp - 56;
           I64[Sp] = block_c3fpC_info;
           R1 = _s3b5d::P64;
           if (R1 & 7 != 0) goto u3frR; else goto c3fpF;
       u3frR: // global
           call _c3fpC(R1) args: 0, res: 0, upd: 0;
       c3fpF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3fq3: // global
           Hp = Hp - 56;
           R2 = _s3b5a::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = GHC.Float.rationalToDouble5_closure;
           P64[Sp + 40] = GHC.Float.minExpt_closure+1;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       c3fq6: // global
           I64[Hp - 48] = n'_s3b6C_info;
           P64[Hp - 32] = _s3b5d::P64;
           I64[Hp - 24] = _s3b6m::I64;
           _c3fmx::P64 = Hp - 48;
           Hp = Hp - 24;
           I64[Sp] = block_c3fmR_info;
           R3 = _s3b6m::I64 - 1;
           R2 = _s3b5d::P64;
           P64[Sp + 40] = _c3fmx::P64;
           call GHC.Integer.Logarithms.Internals.roundingMode#_entry(R3,
                                                                     R2) args: 8, res: 8, upd: 8;
       c3fqz: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s3b5b::I64 - _s3b5c::I64 - _s3b6m::I64;
           _c3frl::P64 = Hp - 47;
           Hp = Hp - 40;
           R2 = _s3b5a::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 40] = _c3frl::P64;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       c3fqF: // global
           if (%MO_S_Ge_W64(_s3b6i::I64,
                            _s3b5c::I64)) goto c3fqD; else goto c3fqE;
       c3fqD: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s3b6i::I64 + (1 - _s3b5c::I64 - _s3b5g::I64);
           I64[Hp - 32] = sat_s3b7b_info;
           P64[Hp - 16] = _s3b5d::P64;
           I64[Hp - 8] = _s3b5c::I64;
           I64[Hp] = _s3b6i::I64;
           R2 = _s3b5a::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 32;
           P64[Sp + 40] = Hp - 47;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       c3fqE: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = -_s3b5g::I64;
           _c3frd::P64 = Hp - 47;
           Hp = Hp - 40;
           R2 = _s3b5a::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 40] = _c3frd::P64;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u3fsf_srtd" {
     u3fsf_srtd:
         const S3bQP_srt+56;
         const 104;
         const 5;
         const 764504178688;
 },
 _c3fm8() //  [R1]
         { []
         }
     {offset
       c3fm8: // global
           I64[Sp + 48] = R1;
           Sp = Sp + 8;
           call _c3fm9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fm8_info" {
     block_c3fm8_info:
         const _c3fm8;
         const 2886;
         const 18446744069414584350;
         const u3fsf_srtd;
 },
 section ""relreadonly" . u3fsg_srtd" {
     u3fsg_srtd:
         const S3bQP_srt+72;
         const 100;
         const 1;
         const 36507222016;
 },
 _c3fpC() //  [R1]
         { []
         }
     {offset
       c3fpC: // global
           if (R1 & 7 == 1) goto c3fpS; else goto c3fpI;
       c3fpS: // global
           I64[Sp] = block_c3fpQ_info;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry(R3,
                                                                                      R2) args: 8, res: 8, upd: 8;
       c3fpI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fpN; else goto c3fpM;
       c3fpN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3fpM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16] - I64[Sp + 24];
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 40] = Hp - 7;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fpC_info" {
     block_c3fpC_info:
         const _c3fpC;
         const 1925;
         const 18446744069414584350;
         const u3fsg_srtd;
 },
 _c3fpQ() //  [R2]
         { []
         }
     {offset
       c3fpQ: // global
           I64[Sp + 40] = R2;
           call _c3fpT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fpQ_info" {
     block_c3fpQ_info:
         const _c3fpQ;
         const 1925;
         const 73014444062;
         const S3bQP_srt+832;
 },
 _c3fpT() //  []
         { []
         }
     {offset
       c3fpT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fpY; else goto c3fpX;
       c3fpY: // global
           HpAlloc = 16;
           I64[Sp] = block_c3fpT_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3fpX: // global
           _s3b5a::P64 = P64[Sp + 8];
           if (I64[Sp + 40] == 0) goto c3fq2; else goto c3fq1;
       c3fq2: // global
           Hp = Hp - 16;
           R2 = _s3b5a::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = GHC.Float.rationalToDouble5_closure;
           P64[Sp + 40] = GHC.Float.minExpt_closure+1;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       c3fq1: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16] - I64[Sp + 24];
           R2 = _s3b5a::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = GHC.Float.$fRealDouble1_closure;
           P64[Sp + 40] = Hp - 7;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fpT_info" {
     block_c3fpT_info:
         const _c3fpT;
         const 1925;
         const 73014444062;
         const S3bQP_srt+832;
 },
 _c3fmR() //  [R1]
         { []
         }
     {offset
       c3fmR: // global
           _c3fmx::P64 = P64[Sp + 40];
           _s3b5a::P64 = P64[Sp + 8];
           _s3b5b::I64 = I64[Sp + 16];
           _s3b5c::I64 = I64[Sp + 24];
           if (R1 == 0) goto c3fqc; else goto u3frE;
       c3fqc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fqg; else goto c3fqf;
       c3fqg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fqf: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b5b::I64 - _s3b5c::I64;
           R2 = _s3b5a::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = _c3fmx::P64;
           P64[Sp + 40] = Hp - 7;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
       u3frE: // global
           if (R1 == 1) goto c3fqi; else goto c3fq8;
       c3fqi: // global
           I64[Sp] = block_c3fn9_info;
           R2 = _c3fmx::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
       c3fq8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3fqb; else goto c3fqa;
       c3fqb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fqa: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s3b5b::I64 - _s3b5c::I64;
           I64[Hp - 16] = sat_s3b6I_info;
           P64[Hp] = _c3fmx::P64;
           R2 = _s3b5a::P64;
           I64[Sp + 24] = stg_ap_pp_info;
           P64[Sp + 32] = Hp - 16;
           P64[Sp + 40] = Hp - 31;
           Sp = Sp + 24;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fmR_info" {
     block_c3fmR_info:
         const _c3fmR;
         const 901;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3fn9() //  [R1]
         { []
         }
     {offset
       c3fn9: // global
           _s3b6O::I64 = R1 & 1;
           if (_s3b6O::I64 != 0) goto u3frM; else goto u3frL;
       u3frM: // global
           I64[Sp + 32] = _s3b6O::I64;
           Sp = Sp + 8;
           call _c3fnh() args: 0, res: 0, upd: 0;
       u3frL: // global
           I64[Sp + 32] = _s3b6O::I64;
           Sp = Sp + 8;
           call _c3fqs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fn9_info" {
     block_c3fn9_info:
         const _c3fn9;
         const 901;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3fnh() //  []
         { []
         }
     {offset
       c3fnh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3fqo; else goto c3fqn;
       c3fqo: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c3fng_info;
           R1 = I64[Sp + 24];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fqn: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = I64[Sp + 8] - I64[Sp + 16];
           I64[Hp - 16] = sat_s3b6P_info;
           P64[Hp] = P64[Sp + 32];
           R2 = P64[Sp];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = Hp - 16;
           P64[Sp + 32] = Hp - 31;
           Sp = Sp + 16;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c3fng() //  [R1]
         { []
         }
     {offset
       c3fng: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3fnh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fng_info" {
     block_c3fng_info:
         const _c3fng;
         const 901;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3fqs() //  []
         { []
         }
     {offset
       c3fqs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fqw; else goto c3fqv;
       c3fqw: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c3fqq_info;
           R1 = I64[Sp + 24];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fqv: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] - I64[Sp + 16];
           R2 = P64[Sp];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = P64[Sp + 32];
           P64[Sp + 32] = Hp - 7;
           Sp = Sp + 16;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 _c3fqq() //  [R1]
         { []
         }
     {offset
       c3fqq: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3fqs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fqq_info" {
     block_c3fqq_info:
         const _c3fqq;
         const 901;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.163524645 UTC

[section ""data" . GHC.Float.fromRat''_closure" {
     GHC.Float.fromRat''_closure:
         const GHC.Float.fromRat''_info;
         const 0;
 },
 GHC.Float.fromRat''_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3fxZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3fy3; else goto c3fy4;
       c3fy3: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat''_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3fy4: // global
           I64[Sp - 40] = block_c3fxW_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3fyc; else goto c3fxX;
       u3fyc: // global
           call _c3fxW(R1) args: 0, res: 0, upd: 0;
       c3fxX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat''_info" {
     GHC.Float.fromRat''_info:
         const GHC.Float.fromRat''_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S3bQP_srt+888;
 },
 _c3fxW() //  [R1]
         { []
         }
     {offset
       c3fxW: // global
           I64[Sp] = block_c3fy2_info;
           _s3b7w::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3b7w::I64;
           if (R1 & 7 != 0) goto u3fyb; else goto c3fy6;
       u3fyb: // global
           call _c3fy2(R1) args: 0, res: 0, upd: 0;
       c3fy6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fxW_info" {
     block_c3fxW_info:
         const _c3fxW;
         const 4;
         const 4294967326;
         const S3bQP_srt+888;
 },
 _c3fy2() //  [R1]
         { []
         }
     {offset
       c3fy2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Float.$wfromRat''_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fy2_info" {
     block_c3fy2_info:
         const _c3fy2;
         const 132;
         const 4294967326;
         const S3bQP_srt+888;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.176368501 UTC

[section ""data" . GHC.Float.$w$cfromEnum_closure" {
     GHC.Float.$w$cfromEnum_closure:
         const GHC.Float.$w$cfromEnum_info;
         const 0;
 },
 section ""relreadonly" . u3fzu_srtd" {
     u3fzu_srtd:
         const S3bQP_srt+648;
         const 33;
         const 4303355905;
 },
 GHC.Float.$w$cfromEnum_entry() //  [D1]
         { []
         }
     {offset
       c3fyF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3fyG; else goto c3fyH;
       c3fyG: // global
           D1 = D1;
           R1 = GHC.Float.$w$cfromEnum_closure;
           call (stg_gc_fun)(D1, R1) args: 8, res: 0, upd: 8;
       c3fyH: // global
           I64[Sp - 8] = block_c3fyw_info;
           D1 = D1;
           Sp = Sp - 8;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cfromEnum_info" {
     GHC.Float.$w$cfromEnum_info:
         const GHC.Float.$w$cfromEnum_entry;
         const 0;
         const 18446744069414584334;
         const 4294967303;
         const u3fzu_srtd;
 },
 _c3fyw() //  [R1, R2]
         { []
         }
     {offset
       c3fyw: // global
           if (%MO_S_Ge_W64(R2, 0)) goto c3fyD; else goto c3fyE;
       c3fyD: // global
           I64[Sp] = block_c3fyK_info;
           R3 = R2;
           R2 = R1;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
       c3fyE: // global
           _s3b7F::I64 = -R2;
           if (%MO_S_Le_W64(_s3b7F::I64, 52)) goto c3fyY; else goto c3fzt;
       c3fyY: // global
           I64[Sp - 16] = block_c3fyW_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           I64[Sp - 8] = _s3b7F::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3fzt: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fyw_info" {
     block_c3fyw_info:
         const _c3fyw;
         const 0;
         const 4294967326;
         const S3bQP_srt+832;
 },
 _c3fyK() //  [R1]
         { []
         }
     {offset
       c3fyK: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fyK_info" {
     block_c3fyK_info:
         const _c3fyK;
         const 0;
         const 30;
 },
 _c3fyW() //  [R1]
         { []
         }
     {offset
       c3fyW: // global
           _s3b7B::P64 = P64[Sp + 16];
           if (R1 == 1) goto c3fzq; else goto c3fz9;
       c3fzq: // global
           I64[Sp] = block_c3fzd_info;
           R2 = _s3b7B::P64;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3fz9: // global
           I64[Sp] = block_c3fz2_info;
           R2 = _s3b7B::P64;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fyW_info" {
     block_c3fyW_info:
         const _c3fyW;
         const 66;
         const 30;
 },
 _c3fzd() //  [R1]
         { []
         }
     {offset
       c3fzd: // global
           I64[Sp] = block_c3fzh_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fzd_info" {
     block_c3fzd_info:
         const _c3fzd;
         const 194;
         const 30;
 },
 _c3fzh() //  [R1]
         { []
         }
     {offset
       c3fzh: // global
           R1 = -%MO_S_Shr_W64(R1, I64[Sp + 8]);
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fzh_info" {
     block_c3fzh_info:
         const _c3fzh;
         const 194;
         const 30;
 },
 _c3fz2() //  [R1]
         { []
         }
     {offset
       c3fz2: // global
           R1 = %MO_S_Shr_W64(R1, I64[Sp + 8]);
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fz2_info" {
     block_c3fz2_info:
         const _c3fz2;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.195251656 UTC

[section ""data" . GHC.Float.$fEnumDouble_$cfromEnum_closure" {
     GHC.Float.$fEnumDouble_$cfromEnum_closure:
         const GHC.Float.$fEnumDouble_$cfromEnum_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c3fAb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3fAj; else goto c3fAk;
       c3fAj: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumDouble_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3fAk: // global
           I64[Sp - 8] = block_c3fA8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3fAp; else goto c3fA9;
       u3fAp: // global
           call _c3fA8(R1) args: 0, res: 0, upd: 0;
       c3fA9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$cfromEnum_info" {
     GHC.Float.$fEnumDouble_$cfromEnum_info:
         const GHC.Float.$fEnumDouble_$cfromEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3bQP_srt+904;
 },
 _c3fA8() //  [R1]
         { []
         }
     {offset
       c3fA8: // global
           I64[Sp] = block_c3fAe_info;
           D1 = F64[R1 + 7];
           call GHC.Float.$w$cfromEnum_entry(D1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fA8_info" {
     block_c3fA8_info:
         const _c3fA8;
         const 0;
         const 4294967326;
         const S3bQP_srt+904;
 },
 _c3fAe() //  [R1]
         { []
         }
     {offset
       c3fAe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fAo; else goto c3fAn;
       c3fAo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fAn: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fAe_info" {
     block_c3fAe_info:
         const _c3fAe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.204159794 UTC

[section ""data" . GHC.Float.$fEnumDouble_$cenumFromTo_closure" {
     GHC.Float.$fEnumDouble_$cenumFromTo_closure:
         const GHC.Float.$fEnumDouble_$cenumFromTo_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c3fAK: // global
           R5 = R3;
           R4 = R2;
           R3 = GHC.Float.$fFractionalDouble_closure+1;
           R2 = GHC.Classes.$fOrdDouble_closure;
           call GHC.Real.numericEnumFromTo_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$cenumFromTo_info" {
     GHC.Float.$fEnumDouble_$cenumFromTo_info:
         const GHC.Float.$fEnumDouble_$cenumFromTo_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.208679578 UTC

[section ""data" . GHC.Float.$fEnumDouble_$cenumFromThenTo_closure" {
     GHC.Float.$fEnumDouble_$cenumFromThenTo_closure:
         const GHC.Float.$fEnumDouble_$cenumFromThenTo_info;
         const 0;
 },
 GHC.Float.$fEnumDouble_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3fAV: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = GHC.Float.$fFractionalDouble_closure+1;
           R2 = GHC.Classes.$fOrdDouble_closure;
           call GHC.Real.numericEnumFromThenTo_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumDouble_$cenumFromThenTo_info" {
     GHC.Float.$fEnumDouble_$cenumFromThenTo_info:
         const GHC.Float.$fEnumDouble_$cenumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3bQP_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.212580778 UTC

[section ""data" . GHC.Float.$fEnumDouble_closure" {
     GHC.Float.$fEnumDouble_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Float.$fEnumDouble_$csucc_closure+1;
         const GHC.Float.$fEnumDouble_$cpred_closure+1;
         const GHC.Float.RealFracMethods.int2Double_closure+1;
         const GHC.Float.$fEnumDouble_$cfromEnum_closure+1;
         const GHC.Float.$fEnumDouble_$snumericEnumFrom_closure+1;
         const GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure+2;
         const GHC.Float.$fEnumDouble_$cenumFromTo_closure+2;
         const GHC.Float.$fEnumDouble_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.215709615 UTC

[section ""data" . GHC.Float.$fEnumFloat_$cenumFromTo_closure" {
     GHC.Float.$fEnumFloat_$cenumFromTo_closure:
         const GHC.Float.$fEnumFloat_$cenumFromTo_info;
         const 0;
 },
 section ""relreadonly" . u3fBa_srtd" {
     u3fBa_srtd:
         const S3bQP_srt+232;
         const 87;
         const 1;
         const 4194304;
 },
 GHC.Float.$fEnumFloat_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c3fB7: // global
           R5 = R3;
           R4 = R2;
           R3 = GHC.Float.$fFractionalFloat_closure+1;
           R2 = GHC.Classes.$fOrdFloat_closure;
           call GHC.Real.numericEnumFromTo_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$cenumFromTo_info" {
     GHC.Float.$fEnumFloat_$cenumFromTo_info:
         const GHC.Float.$fEnumFloat_$cenumFromTo_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3fBa_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.220099561 UTC

[section ""data" . GHC.Float.$fEnumFloat_$cenumFromThenTo_closure" {
     GHC.Float.$fEnumFloat_$cenumFromThenTo_closure:
         const GHC.Float.$fEnumFloat_$cenumFromThenTo_info;
         const 0;
 },
 section ""relreadonly" . u3fBn_srtd" {
     u3fBn_srtd:
         const S3bQP_srt+232;
         const 89;
         const 1;
         const 16777216;
 },
 GHC.Float.$fEnumFloat_$cenumFromThenTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3fBk: // global
           R6 = R4;
           R5 = R3;
           R4 = R2;
           R3 = GHC.Float.$fFractionalFloat_closure+1;
           R2 = GHC.Classes.$fOrdFloat_closure;
           call GHC.Real.numericEnumFromThenTo_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$cenumFromThenTo_info" {
     GHC.Float.$fEnumFloat_$cenumFromThenTo_info:
         const GHC.Float.$fEnumFloat_$cenumFromThenTo_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3fBn_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.225892792 UTC

[section ""data" . GHC.Float.$w$cfromEnum1_closure" {
     GHC.Float.$w$cfromEnum1_closure:
         const GHC.Float.$w$cfromEnum1_info;
 },
 GHC.Float.$w$cfromEnum1_entry() //  [F1]
         { []
         }
     {offset
       c3fBG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fBH; else goto c3fBI;
       c3fBH: // global
           F1 = F1;
           R1 = GHC.Float.$w$cfromEnum1_closure;
           call (stg_gc_fun)(F1, R1) args: 8, res: 0, upd: 8;
       c3fBI: // global
           I64[Sp - 8] = block_c3fBx_info;
           F1 = F1;
           Sp = Sp - 8;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$cfromEnum1_info" {
     GHC.Float.$w$cfromEnum1_info:
         const GHC.Float.$w$cfromEnum1_entry;
         const 0;
         const 14;
         const 4294967302;
 },
 _c3fBx() //  [R1, R2]
         { []
         }
     {offset
       c3fBx: // global
           if (%MO_S_Ge_W64(R2, 0)) goto c3fBE; else goto c3fBF;
       c3fBE: // global
           I64[Sp - 8] = block_c3fBL_info;
           _s3b7T::I64 = R2;
           R2 = R1;
           I64[Sp] = _s3b7T::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
       c3fBF: // global
           _s3b7X::I64 = -R2;
           if (%MO_S_Le_W64(_s3b7X::I64, 23)) goto c3fCi; else goto c3fCj;
       c3fCi: // global
           if (%MO_S_Ge_W64(R1, 0)) goto c3fC7; else goto c3fCg;
       c3fC7: // global
           R1 = R1 >> _s3b7X::I64;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3fCg: // global
           R1 = -%MO_S_Shr_W64(-R1, _s3b7X::I64);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3fCj: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fBx_info" {
     block_c3fBx_info:
         const _c3fBx;
         const 0;
         const 30;
 },
 _c3fBL() //  [R1]
         { []
         }
     {offset
       c3fBL: // global
           _s3b7T::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3fBP_info;
           R3 = _s3b7T::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.shiftLInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fBL_info" {
     block_c3fBL_info:
         const _c3fBL;
         const 65;
         const 30;
 },
 _c3fBP() //  [R1]
         { []
         }
     {offset
       c3fBP: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fBP_info" {
     block_c3fBP_info:
         const _c3fBP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.234918153 UTC

[section ""data" . GHC.Float.$fEnumFloat_$cfromEnum_closure" {
     GHC.Float.$fEnumFloat_$cfromEnum_closure:
         const GHC.Float.$fEnumFloat_$cfromEnum_info;
 },
 GHC.Float.$fEnumFloat_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c3fCN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3fCV; else goto c3fCW;
       c3fCV: // global
           R2 = R2;
           R1 = GHC.Float.$fEnumFloat_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3fCW: // global
           I64[Sp - 8] = block_c3fCK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3fD1; else goto c3fCL;
       u3fD1: // global
           call _c3fCK(R1) args: 0, res: 0, upd: 0;
       c3fCL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fEnumFloat_$cfromEnum_info" {
     GHC.Float.$fEnumFloat_$cfromEnum_info:
         const GHC.Float.$fEnumFloat_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3fCK() //  [R1]
         { []
         }
     {offset
       c3fCK: // global
           I64[Sp] = block_c3fCQ_info;
           F1 = F32[R1 + 7];
           call GHC.Float.$w$cfromEnum1_entry(F1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fCK_info" {
     block_c3fCK_info:
         const _c3fCK;
         const 0;
         const 30;
 },
 _c3fCQ() //  [R1]
         { []
         }
     {offset
       c3fCQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fD0; else goto c3fCZ;
       c3fD0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fCZ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fCQ_info" {
     block_c3fCQ_info:
         const _c3fCQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.241594646 UTC

[section ""data" . GHC.Float.$fEnumFloat_closure" {
     GHC.Float.$fEnumFloat_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Float.$fEnumFloat_$csucc_closure+1;
         const GHC.Float.$fEnumFloat_$cpred_closure+1;
         const GHC.Float.RealFracMethods.int2Float_closure+1;
         const GHC.Float.$fEnumFloat_$cfromEnum_closure+1;
         const GHC.Float.$fEnumFloat_$snumericEnumFrom_closure+1;
         const GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure+2;
         const GHC.Float.$fEnumFloat_$cenumFromTo_closure+2;
         const GHC.Float.$fEnumFloat_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.243985502 UTC

[section ""data" . GHC.Float.expt1_closure" {
     GHC.Float.expt1_closure:
         const GHC.Float.expt1_info;
         const 0;
 },
 GHC.Float.expt1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3fDn: // global
           R6 = lvl7_r2UqF_closure;
           R5 = R4;
           R4 = R2;
           R3 = R3;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expt1_info" {
     GHC.Float.expt1_info:
         const GHC.Float.expt1_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3bQP_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.252303157 UTC

[section ""data" . GHC.Float.$wexpt_closure" {
     GHC.Float.$wexpt_closure:
         const GHC.Float.$wexpt_info;
         const 0;
 },
 section ""relreadonly" . u3fFV_srtd" {
     u3fFV_srtd:
         const S3bQP_srt+552;
         const 53;
         const 8444249804636161;
 },
 GHC.Float.$wexpt_entry() //  [R2, R3]
         { []
         }
     {offset
       c3fDA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3fDB; else goto c3fDC;
       c3fDB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$wexpt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3fDC: // global
           I64[Sp - 24] = block_c3fDy_info;
           _s3b8a::I64 = R3;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           _s3b89::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s3b89::P64;
           I64[Sp - 8] = _s3b8a::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wexpt_info" {
     GHC.Float.$wexpt_info:
         const GHC.Float.$wexpt_entry;
         const 0;
         const 18446744069414584334;
         const 8589934606;
         const u3fFV_srtd;
 },
 _c3fDy() //  [R1]
         { []
         }
     {offset
       c3fDy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fDH; else goto c3fDG;
       c3fDH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fDG: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s3b8a::I64 = I64[Sp + 16];
           I64[Hp] = _s3b8a::I64;
           _s3b89::P64 = P64[Sp + 8];
           _c3fDI::P64 = Hp - 7;
           if (R1 != 1) goto s3b8d; else goto c3fFI;
       c3fFI: // global
           if (%MO_S_Lt_W64(_s3b8a::I64, 0)) goto s3b8d; else goto c3fFH;
       c3fFH: // global
           if (%MO_S_Gt_W64(_s3b8a::I64, 1100)) goto s3b8d; else goto c3fFn;
       s3b8d: // global
           I64[Sp - 8] = block_c3fDO_info;
           R3 = GHC.Float.expts4_closure;
           R2 = _s3b89::P64;
           P64[Sp] = _c3fDI::P64;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3fFn: // global
           I64[Sp] = block_c3fFc_info;
           R1 = GHC.Float.expts_closure;
           P64[Sp + 8] = _c3fDI::P64;
           if (R1 & 7 != 0) goto u3fFP; else goto c3fFd;
       u3fFP: // global
           call _c3fFc(R1) args: 0, res: 0, upd: 0;
       c3fFd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fDy_info" {
     block_c3fDy_info:
         const _c3fDy;
         const 130;
         const 792633598841716766;
         const S3bQP_srt+752;
 },
 _c3fFc() //  [R1]
         { []
         }
     {offset
       c3fFc: // global
           I64[Sp - 16] = block_c3fFh_info;
           _s3b8F::P64 = P64[R1 + 15];
           _s3b8H::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s3b8H::P64;
           P64[Sp] = _s3b8F::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3fFT; else goto c3fFi;
       u3fFT: // global
           call _c3fFh(R1) args: 0, res: 0, upd: 0;
       c3fFi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fFc_info" {
     block_c3fFc_info:
         const _c3fFc;
         const 130;
         const 4294967326;
         const S3bQP_srt+968;
 },
 _c3fFh() //  [R1]
         { []
         }
     {offset
       c3fFh: // global
           I64[Sp - 8] = block_c3fFm_info;
           _s3b8I::P64 = R1;
           _s3b8J::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _s3b8J::I64;
           P64[Sp + 16] = _s3b8I::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3fFU; else goto c3fFq;
       u3fFU: // global
           call _c3fFm(R1) args: 0, res: 0, upd: 0;
       c3fFq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fFh_info" {
     block_c3fFh_info:
         const _c3fFh;
         const 516;
         const 4294967326;
         const S3bQP_srt+968;
 },
 _c3fFm() //  [R1]
         { []
         }
     {offset
       c3fFm: // global
           _c3fDI::P64 = P64[Sp + 32];
           _s3b8a::I64 = I64[Sp + 40];
           _s3b8I::P64 = P64[Sp + 24];
           _s3b8J::I64 = I64[Sp + 8];
           _s3b8K::P64 = R1;
           if (%MO_S_Gt_W64(_s3b8J::I64,
                            _s3b8a::I64)) goto c3fFE; else goto c3fFG;
       c3fFG: // global
           if (%MO_S_Gt_W64(_s3b8a::I64,
                            I64[R1 + 7])) goto c3fFE; else goto c3fFF;
       c3fFE: // global
           R4 = _c3fDI::P64;
           R3 = _s3b8I::P64;
           R2 = _s3b8K::P64;
           Sp = Sp + 48;
           call GHC.Float.expt1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3fFF: // global
           R1 = P64[P64[Sp + 16] + ((_s3b8a::I64 - _s3b8J::I64 << 3) + 24)] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fFm_info" {
     block_c3fFm_info:
         const _c3fFm;
         const 1093;
         const 4294967326;
         const S3bQP_srt+968;
 },
 _c3fDO() //  [R1]
         { []
         }
     {offset
       c3fDO: // global
           _s3b89::P64 = P64[Sp + 16];
           _s3b8a::I64 = I64[Sp + 24];
           if (R1 == 1) goto c3fEU; else goto c3fE5;
       c3fEU: // global
           if (%MO_S_Gt_W64(_s3b8a::I64, 324)) goto c3fEn; else goto c3fEA;
       c3fEn: // global
           if (%MO_S_Lt_W64(_s3b8a::I64, 0)) goto c3fEl; else goto c3fEk;
       c3fEk: // global
           if (_s3b8a::I64 == 0) goto c3fEi; else goto c3fEh;
       c3fEh: // global
           R3 = _s3b8a::I64;
           R2 = _s3b89::P64;
           Sp = Sp + 32;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3fEA: // global
           I64[Sp] = block_c3fEp_info;
           R1 = GHC.Float.expts10_closure;
           if (R1 & 7 != 0) goto u3fFQ; else goto c3fEq;
       u3fFQ: // global
           call _c3fEp(R1) args: 0, res: 0, upd: 0;
       c3fEq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3fE5: // global
           if (%MO_S_Lt_W64(_s3b8a::I64, 0)) goto c3fEl; else goto c3fE2;
       c3fEl: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3fE2: // global
           if (_s3b8a::I64 == 0) goto c3fEi; else goto c3fDZ;
       c3fEi: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3fDZ: // global
           R3 = _s3b8a::I64;
           R2 = _s3b89::P64;
           Sp = Sp + 32;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fDO_info" {
     block_c3fDO_info:
         const _c3fDO;
         const 259;
         const 360288000254410782;
         const S3bQP_srt+760;
 },
 _c3fEp() //  [R1]
         { []
         }
     {offset
       c3fEp: // global
           I64[Sp - 8] = block_c3fEu_info;
           _s3b8m::P64 = P64[R1 + 15];
           _s3b8o::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3b8o::P64;
           P64[Sp + 16] = _s3b8m::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3fFR; else goto c3fEv;
       u3fFR: // global
           call _c3fEu(R1) args: 0, res: 0, upd: 0;
       c3fEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fEp_info" {
     block_c3fEp_info:
         const _c3fEp;
         const 387;
         const 4294967326;
         const S3bQP_srt+968;
 },
 _c3fEu() //  [R1]
         { []
         }
     {offset
       c3fEu: // global
           I64[Sp - 8] = block_c3fEz_info;
           _s3b8p::P64 = R1;
           _s3b8q::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp] = _s3b8q::I64;
           P64[Sp + 24] = _s3b8p::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3fFS; else goto c3fED;
       u3fFS: // global
           call _c3fEz(R1) args: 0, res: 0, upd: 0;
       c3fED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fEu_info" {
     block_c3fEu_info:
         const _c3fEu;
         const 516;
         const 4294967326;
         const S3bQP_srt+968;
 },
 _c3fEz() //  [R1]
         { []
         }
     {offset
       c3fEz: // global
           _c3fDI::P64 = P64[Sp + 24];
           _s3b8a::I64 = I64[Sp + 40];
           _s3b8p::P64 = P64[Sp + 32];
           _s3b8q::I64 = I64[Sp + 8];
           _s3b8r::P64 = R1;
           if (%MO_S_Gt_W64(_s3b8q::I64,
                            _s3b8a::I64)) goto c3fER; else goto c3fET;
       c3fET: // global
           if (%MO_S_Gt_W64(_s3b8a::I64,
                            I64[R1 + 7])) goto c3fER; else goto c3fES;
       c3fER: // global
           R4 = _c3fDI::P64;
           R3 = _s3b8p::P64;
           R2 = _s3b8r::P64;
           Sp = Sp + 48;
           call GHC.Float.expt1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3fES: // global
           R1 = P64[P64[Sp + 16] + ((_s3b8a::I64 - _s3b8q::I64 << 3) + 24)] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fEz_info" {
     block_c3fEz_info:
         const _c3fEz;
         const 1093;
         const 4294967326;
         const S3bQP_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.273026177 UTC

[section ""data" . GHC.Float.expt_closure" {
     GHC.Float.expt_closure:
         const GHC.Float.expt_info;
         const 0;
 },
 GHC.Float.expt_entry() //  [R2, R3]
         { []
         }
     {offset
       c3fGY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fGZ; else goto c3fH0;
       c3fGZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.expt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3fH0: // global
           I64[Sp - 16] = block_c3fGV_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3fH4; else goto c3fGW;
       u3fH4: // global
           call _c3fGV(R1) args: 0, res: 0, upd: 0;
       c3fGW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.expt_info" {
     GHC.Float.expt_info:
         const GHC.Float.expt_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S3bQP_srt+960;
 },
 _c3fGV() //  [R1]
         { []
         }
     {offset
       c3fGV: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fGV_info" {
     block_c3fGV_info:
         const _c3fGV;
         const 1;
         const 4294967326;
         const S3bQP_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.291918161 UTC

[section ""data" . GHC.Float.fromRat'_closure" {
     GHC.Float.fromRat'_closure:
         const GHC.Float.fromRat'_info;
         const 0;
 },
 sat_s3b98_entry() //  [R1]
         { []
         }
     {offset
       c3fIm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3fIq; else goto c3fIr;
       c3fIq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fIr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fIj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3fIz; else goto c3fIk;
       u3fIz: // global
           call _c3fIj(R1) args: 0, res: 0, upd: 0;
       c3fIk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b98_info" {
     sat_s3b98_info:
         const sat_s3b98_entry;
         const 1;
         const 12884901904;
         const S3bQP_srt+984;
 },
 _c3fIj() //  [R1]
         { []
         }
     {offset
       c3fIj: // global
           I64[Sp] = block_c3fIp_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u3fIy; else goto c3fIt;
       u3fIy: // global
           call _c3fIp(R1) args: 0, res: 0, upd: 0;
       c3fIt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fIj_info" {
     block_c3fIj_info:
         const _c3fIj;
         const 0;
         const 12884901918;
         const S3bQP_srt+984;
 },
 _c3fIp() //  [R1]
         { []
         }
     {offset
       c3fIp: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fIp_info" {
     block_c3fIp_info:
         const _c3fIp;
         const 0;
         const 12884901918;
         const S3bQP_srt+984;
 },
 r_s3b8Z_entry() //  [R1]
         { []
         }
     {offset
       c3fIA: // global
           _s3b8Z::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3fIB; else goto c3fIC;
       c3fIC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3fIE; else goto c3fID;
       c3fIE: // global
           HpAlloc = 48;
           goto c3fIB;
       c3fIB: // global
           R1 = _s3b8Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fID: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3b8Z::P64;
           _s3b8X::P64 = P64[_s3b8Z::P64 + 16];
           _s3b91::P64 = P64[_s3b8Z::P64 + 24];
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _s3b91::P64;
           I64[Hp - 16] = sat_s3b98_info;
           P64[Hp] = _s3b91::P64;
           R2 = _s3b8X::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 40;
           call GHC.Float.encodeFloat_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . r_s3b8Z_info" {
     r_s3b8Z_info:
         const r_s3b8Z_entry;
         const 2;
         const 12884901906;
         const S3bQP_srt+984;
 },
 b_s3b90_entry() //  [R1]
         { []
         }
     {offset
       c3fIH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fII; else goto c3fIJ;
       c3fII: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fIJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.floatRadix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . b_s3b90_info" {
     b_s3b90_info:
         const b_s3b90_entry;
         const 2;
         const 18;
 },
 sat_s3b9E_entry() //  [R1]
         { []
         }
     {offset
       c3fJs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3fJt; else goto c3fJu;
       c3fJt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fJu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fJp_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = P64[R1 + 16];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3b9E_info" {
     sat_s3b9E_info:
         const sat_s3b9E_entry;
         const 3;
         const 1152921508901814287;
         const S3bQP_srt+776;
 },
 _c3fJp() //  [R1, R2]
         { []
         }
     {offset
       c3fJp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3fJx; else goto c3fJw;
       c3fJx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3fJw: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fJp_info" {
     block_c3fJp_info:
         const _c3fJp;
         const 0;
         const 30;
 },
 ds_s3b91_entry() //  [R1]
         { []
         }
     {offset
       c3fJy: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c3fJz; else goto c3fJA;
       c3fJz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fJA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c3fHr_info;
           _s3b8X::P64 = P64[R1 + 16];
           R2 = _s3b8X::P64;
           I64[Sp - 72] = stg_ap_p_info;
           _s3b8Z::P64 = P64[R1 + 32];
           P64[Sp - 64] = _s3b8Z::P64;
           P64[Sp - 48] = _s3b8X::P64;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = _s3b8Z::P64;
           P64[Sp - 24] = P64[R1 + 40];
           Sp = Sp - 72;
           call GHC.Float.floatDigits_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s3b91_info" {
     ds_s3b91_info:
         const ds_s3b91_entry;
         const 4;
         const 3494802145587232783;
         const S3bQP_srt+776;
 },
 _c3fHr() //  [R1]
         { []
         }
     {offset
       c3fHr: // global
           I64[Sp - 8] = block_c3fHv_info;
           _s3b9e::I64 = I64[R1 + 7];
           R3 = _s3b9e::I64;
           R2 = P64[Sp + 32];
           I64[Sp] = _s3b9e::I64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fHr_info" {
     block_c3fHr_info:
         const _c3fHr;
         const 4;
         const 3494802145587232798;
         const S3bQP_srt+776;
 },
 _c3fHv() //  [R1]
         { []
         }
     {offset
       c3fHv: // global
           I64[Sp] = block_c3fHz_info;
           _s3b9f::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3b9f::P64;
           if (R1 & 7 != 0) goto u3fKg; else goto c3fHA;
       u3fKg: // global
           call _c3fHz(R1) args: 0, res: 0, upd: 0;
       c3fHA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fHv_info" {
     block_c3fHv_info:
         const _c3fHv;
         const 69;
         const 3494802145587232798;
         const S3bQP_srt+776;
 },
 _c3fHz() //  [R1]
         { []
         }
     {offset
       c3fHz: // global
           I64[Sp - 16] = block_c3fHE_info;
           _s3b9h::P64 = P64[R1 + 7];
           R3 = _s3b9h::P64;
           R2 = P64[Sp + 40];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _s3b9h::P64;
           Sp = Sp - 16;
           call GHC.Float.$wintegerLogBase_entry(R3,
                                                 R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fHz_info" {
     block_c3fHz_info:
         const _c3fHz;
         const 69;
         const 3494802145587232798;
         const S3bQP_srt+776;
 },
 _c3fHE() //  [R1]
         { []
         }
     {offset
       c3fHE: // global
           I64[Sp - 8] = block_c3fHI_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           I64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Float.$wintegerLogBase_entry(R3,
                                                 R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fHE_info" {
     block_c3fHE_info:
         const _c3fHE;
         const 263;
         const 3494802145587232798;
         const S3bQP_srt+776;
 },
 _c3fHI() //  [R1]
         { []
         }
     {offset
       c3fHI: // global
           I64[Sp] = block_c3fHM_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 56];
           I64[Sp + 56] = R1;
           Sp = Sp - 16;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fHI_info" {
     block_c3fHI_info:
         const _c3fHI;
         const 584;
         const 3494802111227494430;
         const S3bQP_srt+776;
 },
 _c3fHM() //  [R1]
         { []
         }
     {offset
       c3fHM: // global
           I64[Sp] = block_c3fHQ_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u3fKh; else goto c3fHR;
       u3fKh: // global
           call _c3fHQ(R1) args: 0, res: 0, upd: 0;
       c3fHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fHM_info" {
     block_c3fHM_info:
         const _c3fHM;
         const 5704;
         const 3494802111227494430;
         const S3bQP_srt+776;
 },
 _c3fHQ() //  [R1]
         { []
         }
     {offset
       c3fHQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fJJ; else goto c3fJI;
       c3fJJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3fJI: // global
           _s3b90::P64 = P64[Sp + 64];
           _s3b9e::I64 = I64[Sp + 32];
           _s3b9q::I64 = I64[Sp + 8] - I64[Sp + 56] - _s3b9e::I64;
           _s3b9s::I64 = I64[R1 + 7] - _s3b9e::I64;
           if (%MO_S_Gt_W64(_s3b9q::I64,
                            _s3b9s::I64)) goto c3fKb; else goto c3fKc;
       c3fKb: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b9q::I64;
           _s3b9v::P64 = Hp - 7;
           _s3b9u::I64 = _s3b9q::I64;
           goto s3b9t;
       c3fKc: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3b9s::I64;
           _s3b9v::P64 = Hp - 7;
           _s3b9u::I64 = _s3b9s::I64;
           goto s3b9t;
       s3b9t: // global
           if (%MO_S_Ge_W64(_s3b9u::I64, 0)) goto c3fK0; else goto c3fK5;
       c3fK0: // global
           I64[Sp + 8] = block_c3fIS_info;
           R3 = _s3b9u::I64;
           R2 = _s3b90::P64;
           P64[Sp + 40] = _s3b9v::P64;
           I64[Sp + 56] = _s3b9u::I64;
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
       c3fK5: // global
           I64[Sp + 8] = block_c3fJ3_info;
           R3 = -_s3b9u::I64;
           R2 = _s3b90::P64;
           P64[Sp + 40] = _s3b9v::P64;
           I64[Sp + 56] = _s3b9u::I64;
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fHQ_info" {
     block_c3fHQ_info:
         const _c3fHQ;
         const 5704;
         const 3494802111227494430;
         const S3bQP_srt+776;
 },
 _c3fIS() //  [R1]
         { []
         }
     {offset
       c3fIS: // global
           I64[Sp + 24] = block_c3fIW_info;
           R5 = GHC.Float.$fRealDouble1_closure;
           R4 = R1;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fIS_info" {
     block_c3fIS_info:
         const _c3fIS;
         const 2311;
         const 3458773314208530462;
         const S3bQP_srt+776;
 },
 _c3fIW() //  [R1, R2]
         { []
         }
     {offset
       c3fIW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3fK4; else goto c3fK3;
       c3fK4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3fK3: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = Hp - 15;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _s3b9w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fIW_info" {
     block_c3fIW_info:
         const _c3fIW;
         const 260;
         const 3458764518115508254;
         const S3bQP_srt+776;
 },
 _c3fJ3() //  [R1]
         { []
         }
     {offset
       c3fJ3: // global
           I64[Sp + 24] = block_c3fJ7_info;
           R5 = R1;
           R4 = GHC.Float.$fRealDouble1_closure;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fJ3_info" {
     block_c3fJ3_info:
         const _c3fJ3;
         const 2311;
         const 3458773314208530462;
         const S3bQP_srt+776;
 },
 _c3fJ7() //  [R1, R2]
         { []
         }
     {offset
       c3fJ7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3fK9; else goto c3fK8;
       c3fK9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3fK8: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           P64[Sp] = R1;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call _s3b9w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fJ7_info" {
     block_c3fJ7_info:
         const _c3fJ7;
         const 260;
         const 3458764518115508254;
         const S3bQP_srt+776;
 },
 _s3b9w() //  []
         { []
         }
     {offset
       s3b9w: // global
           I64[Sp - 8] = block_c3fJd_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = P64[Sp + 32];
           R3 = P64[Sp];
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3fJd() //  [R1]
         { []
         }
     {offset
       c3fJd: // global
           if (R1 & 7 == 1) goto c3fJV; else goto c3fJO;
       c3fJV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3fJY; else goto c3fJX;
       c3fJY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3fJX: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 15;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fJO: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3fJR; else goto c3fJQ;
       c3fJR: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3fJQ: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = I64[Sp + 48] + 1;
           I64[Hp - 56] = sat_s3b9E_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fJd_info" {
     block_c3fJd_info:
         const _c3fJd;
         const 3079;
         const 1152921508901814302;
         const S3bQP_srt+776;
 },
 GHC.Float.fromRat'_entry() //  [R2, R3]
         { []
         }
     {offset
       c3fKk: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3fKo; else goto c3fKn;
       c3fKo: // global
           HpAlloc = 112;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3fKn: // global
           I64[Hp - 104] = r_s3b8Z_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = Hp - 40;
           I64[Hp - 72] = b_s3b90_info;
           P64[Hp - 56] = R2;
           _c3fHj::P64 = Hp - 104;
           P64[Hp - 48] = _c3fHj::P64;
           I64[Hp - 40] = ds_s3b91_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = _c3fHj::P64;
           P64[Hp] = Hp - 72;
           R1 = _c3fHj::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat'_info" {
     GHC.Float.fromRat'_info:
         const GHC.Float.fromRat'_entry;
         const 0;
         const 8971179292469755918;
         const 8589934607;
         const S3bQP_srt+776;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.343225056 UTC

[section ""data" . GHC.Float.$wfromRat_closure" {
     GHC.Float.$wfromRat_closure:
         const GHC.Float.$wfromRat_info;
         const 0;
 },
 $dRealFrac_s3b9Z_entry() //  [R1]
         { []
         }
     {offset
       c3fMP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fMQ; else goto c3fMR;
       c3fMQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fMR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$p1RealFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dRealFrac_s3b9Z_info" {
     $dRealFrac_s3b9Z_info:
         const $dRealFrac_s3b9Z_entry;
         const 1;
         const 16;
 },
 $dReal_s3ba0_entry() //  [R1]
         { []
         }
     {offset
       c3fMW: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s3ba0_info" {
     $dReal_s3ba0_info:
         const $dReal_s3ba0_entry;
         const 1;
         const 16;
 },
 $dNum_s3ba1_entry() //  [R1]
         { []
         }
     {offset
       c3fN3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fN4; else goto c3fN5;
       c3fN4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fN5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s3ba1_info" {
     $dNum_s3ba1_info:
         const $dNum_s3ba1_entry;
         const 1;
         const 16;
 },
 sat_s3ba6_entry() //  [R1]
         { []
         }
     {offset
       c3fNt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fNx; else goto c3fNy;
       c3fNx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fNy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3fNr_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ba6_info" {
     sat_s3ba6_info:
         const sat_s3ba6_entry;
         const 2;
         const 18;
 },
 _c3fNr() //  [R1]
         { []
         }
     {offset
       c3fNr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3fNB; else goto c3fNA;
       c3fNB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3fNA: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fNr_info" {
     block_c3fNr_info:
         const _c3fNr;
         const 1;
         const 30;
 },
 sat_s3ba7_entry() //  [R1]
         { []
         }
     {offset
       c3fNC: // global
           _s3ba7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3fND; else goto c3fNE;
       c3fNE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3fNG; else goto c3fNF;
       c3fNG: // global
           HpAlloc = 32;
           goto c3fND;
       c3fND: // global
           R1 = _s3ba7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fNF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3ba7::P64;
           _s3b9W::P64 = P64[_s3ba7::P64 + 16];
           _s3b9X::P64 = P64[_s3ba7::P64 + 24];
           _s3b9Y::P64 = P64[_s3ba7::P64 + 32];
           I64[Hp - 24] = sat_s3ba6_info;
           P64[Hp - 8] = _s3b9X::P64;
           P64[Hp] = _s3b9Y::P64;
           R3 = Hp - 24;
           R2 = _s3b9W::P64;
           Sp = Sp - 16;
           call GHC.Float.fromRat'_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ba7_info" {
     sat_s3ba7_info:
         const sat_s3ba7_entry;
         const 3;
         const 4294967311;
         const S3bQP_srt+1016;
 },
 sat_s3bad_entry() //  [R1]
         { []
         }
     {offset
       c3fNV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fNW; else goto c3fNX;
       c3fNW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fNX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bad_info" {
     sat_s3bad_info:
         const sat_s3bad_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+832;
 },
 sat_s3bac_entry() //  [R1]
         { []
         }
     {offset
       c3fO2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fO3; else goto c3fO4;
       c3fO3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fO4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bac_info" {
     sat_s3bac_info:
         const sat_s3bac_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+832;
 },
 sat_s3bag_entry() //  [R1]
         { []
         }
     {offset
       c3fOf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fOg; else goto c3fOh;
       c3fOg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fOh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bag_info" {
     sat_s3bag_info:
         const sat_s3bag_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+832;
 },
 sat_s3baf_entry() //  [R1]
         { []
         }
     {offset
       c3fOm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fOn; else goto c3fOo;
       c3fOn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fOo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3baf_info" {
     sat_s3baf_info:
         const sat_s3baf_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+864;
 },
 sat_s3bah_entry() //  [R1]
         { []
         }
     {offset
       c3fOr: // global
           _s3bah::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3fOs; else goto c3fOt;
       c3fOt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3fOv; else goto c3fOu;
       c3fOv: // global
           HpAlloc = 48;
           goto c3fOs;
       c3fOs: // global
           R1 = _s3bah::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fOu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bah::P64;
           _s3b9Z::P64 = P64[_s3bah::P64 + 16];
           _s3ba1::P64 = P64[_s3bah::P64 + 24];
           I64[Hp - 40] = sat_s3bag_info;
           P64[Hp - 24] = _s3ba1::P64;
           I64[Hp - 16] = sat_s3baf_info;
           P64[Hp] = _s3ba1::P64;
           I64[Sp - 40] = block_c3fOp_info;
           R2 = _s3b9Z::P64;
           P64[Sp - 32] = Hp - 40;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bah_info" {
     sat_s3bah_info:
         const sat_s3bah_entry;
         const 2;
         const 73014444050;
         const S3bQP_srt+832;
 },
 _c3fOp() //  [R1]
         { []
         }
     {offset
       c3fOp: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c3fOb::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c3fOb::P64;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fOp_info" {
     block_c3fOp_info:
         const _c3fOp;
         const 2;
         const 30;
 },
 sat_s3bak_entry() //  [R1]
         { []
         }
     {offset
       c3fOF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fOG; else goto c3fOH;
       c3fOG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fOH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bak_info" {
     sat_s3bak_info:
         const sat_s3bak_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+832;
 },
 sat_s3baj_entry() //  [R1]
         { []
         }
     {offset
       c3fOM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3fON; else goto c3fOO;
       c3fON: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fOO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.$fRealDouble1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3baj_info" {
     sat_s3baj_info:
         const sat_s3baj_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+864;
 },
 GHC.Float.$wfromRat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3fOS: // global
           _s3b9Y::P64 = R4;
           _s3b9X::P64 = R3;
           _s3b9W::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c3fOT; else goto c3fOU;
       c3fOU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3fOW; else goto c3fOV;
       c3fOW: // global
           HpAlloc = 72;
           goto c3fOT;
       c3fOT: // global
           R4 = _s3b9Y::P64;
           R3 = _s3b9X::P64;
           R2 = _s3b9W::P64;
           R1 = GHC.Float.$wfromRat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3fOV: // global
           I64[Hp - 64] = $dRealFrac_s3b9Z_info;
           P64[Hp - 48] = _s3b9W::P64;
           I64[Hp - 40] = $dReal_s3ba0_info;
           _c3fML::P64 = Hp - 64;
           P64[Hp - 24] = _c3fML::P64;
           I64[Hp - 16] = $dNum_s3ba1_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 48] = block_c3fN6_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s3b9Y::P64;
           P64[Sp - 40] = _c3fML::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _s3b9W::P64;
           P64[Sp - 16] = _s3b9X::P64;
           P64[Sp - 8] = _s3b9Y::P64;
           Sp = Sp - 48;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wfromRat_info" {
     GHC.Float.$wfromRat_info:
         const GHC.Float.$wfromRat_entry;
         const 0;
         const 108086464071335950;
         const 12884901911;
         const S3bQP_srt+832;
 },
 _c3fN6() //  [R1]
         { []
         }
     {offset
       c3fN6: // global
           _s3b9X::P64 = P64[Sp + 32];
           if (R1 == 1) goto c3fOR; else goto c3fOQ;
       c3fOR: // global
           I64[Sp] = block_c3fNJ_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s3b9X::P64;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c3fOQ: // global
           I64[Sp + 8] = block_c3fNa_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s3b9X::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fN6_info" {
     block_c3fN6_info:
         const _c3fN6;
         const 5;
         const 36028870033408030;
         const S3bQP_srt+832;
 },
 _c3fNJ() //  [R1]
         { []
         }
     {offset
       c3fNJ: // global
           if (R1 == 1) goto c3fPz; else goto c3fPj;
       c3fPz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3fPC; else goto c3fPB;
       c3fPC: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fPB: // global
           I64[Hp - 40] = sat_s3bak_info;
           _c3fMZ::P64 = P64[Sp + 16];
           P64[Hp - 24] = _c3fMZ::P64;
           I64[Hp - 16] = sat_s3baj_info;
           P64[Hp] = _c3fMZ::P64;
           I64[Sp + 24] = block_c3fPy_info;
           R2 = P64[Sp + 8];
           P64[Sp + 32] = Hp - 16;
           P64[Sp + 40] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
       c3fPj: // global
           I64[Sp] = block_c3fNN_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fNJ_info" {
     block_c3fNJ_info:
         const _c3fNJ;
         const 1285;
         const 73014444062;
         const S3bQP_srt+832;
 },
 _c3fPy() //  [R1]
         { []
         }
     {offset
       c3fPy: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fPy_info" {
     block_c3fPy_info:
         const _c3fPy;
         const 2;
         const 30;
 },
 _c3fNN() //  [R1]
         { []
         }
     {offset
       c3fNN: // global
           _c3fML::P64 = P64[Sp + 8];
           _c3fMZ::P64 = P64[Sp + 16];
           if (R1 == 1) goto c3fPu; else goto c3fPm;
       c3fPu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3fPx; else goto c3fPw;
       c3fPx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fPw: // global
           I64[Hp - 24] = sat_s3bah_info;
           P64[Hp - 8] = _c3fML::P64;
           P64[Hp] = _c3fMZ::P64;
           R2 = _c3fMZ::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 24;
           Sp = Sp + 32;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
       c3fPm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3fPp; else goto c3fPo;
       c3fPp: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fPo: // global
           I64[Hp - 40] = sat_s3bad_info;
           P64[Hp - 24] = _c3fMZ::P64;
           I64[Hp - 16] = sat_s3bac_info;
           P64[Hp] = _c3fMZ::P64;
           I64[Sp + 24] = block_c3fPk_info;
           R2 = _c3fML::P64;
           P64[Sp + 32] = Hp - 16;
           P64[Sp + 40] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fNN_info" {
     block_c3fNN_info:
         const _c3fNN;
         const 1797;
         const 73014444062;
         const S3bQP_srt+832;
 },
 _c3fPk() //  [R1]
         { []
         }
     {offset
       c3fPk: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fPk_info" {
     block_c3fPk_info:
         const _c3fPk;
         const 2;
         const 30;
 },
 _c3fNa() //  [R1]
         { []
         }
     {offset
       c3fNa: // global
           _s3b9X::P64 = P64[Sp + 24];
           if (R1 == 1) goto c3fPc; else goto c3fP0;
       c3fPc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3fPf; else goto c3fPe;
       c3fPf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fPe: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = _s3b9X::P64;
           P64[Hp] = P64[Sp + 32];
           R3 = Hp - 15;
           R2 = P64[Sp + 16];
           Sp = Sp + 40;
           call GHC.Float.fromRat'_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3fP0: // global
           I64[Sp] = block_c3fNe_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = _s3b9X::P64;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fNa_info" {
     block_c3fNa_info:
         const _c3fNa;
         const 4;
         const 36028801313931294;
         const S3bQP_srt+832;
 },
 _c3fNe() //  [R1]
         { []
         }
     {offset
       c3fNe: // global
           _s3b9W::P64 = P64[Sp + 16];
           if (R1 == 1) goto c3fP5; else goto c3fP4;
       c3fP5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3fP8; else goto c3fP7;
       c3fP8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fP7: // global
           I64[Hp - 32] = sat_s3ba7_info;
           P64[Hp - 16] = _s3b9W::P64;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R2 = P64[Sp + 8];
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp + 24;
           call GHC.Num.negate_entry(R2) args: 24, res: 0, upd: 8;
       c3fP4: // global
           R2 = _s3b9W::P64;
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 24] = GHC.Float.rationalToDouble5_closure;
           P64[Sp + 32] = GHC.Float.minExpt_closure+1;
           Sp = Sp + 16;
           call GHC.Float.encodeFloat_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fNe_info" {
     block_c3fNe_info:
         const _c3fNe;
         const 4;
         const 36028801313931294;
         const S3bQP_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.398032168 UTC

[section ""data" . GHC.Float.fromRat_closure" {
     GHC.Float.fromRat_closure:
         const GHC.Float.fromRat_info;
         const 0;
 },
 GHC.Float.fromRat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3fSe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fSf; else goto c3fSg;
       c3fSf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.fromRat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3fSg: // global
           I64[Sp - 16] = block_c3fSb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3fSk; else goto c3fSc;
       u3fSk: // global
           call _c3fSb(R1) args: 0, res: 0, upd: 0;
       c3fSc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.fromRat_info" {
     GHC.Float.fromRat_info:
         const GHC.Float.fromRat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+1024;
 },
 _c3fSb() //  [R1]
         { []
         }
     {offset
       c3fSb: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Float.$wfromRat_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fSb_info" {
     block_c3fSb_info:
         const _c3fSb;
         const 1;
         const 4294967326;
         const S3bQP_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.404998028 UTC

[section ""data" . lvl8_r2UqG_closure" {
     lvl8_r2UqG_closure:
         const lvl8_r2UqG_info;
 },
 lvl8_r2UqG_entry() //  [R2]
         { []
         }
     {offset
       c3fSB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3fSF; else goto c3fSG;
       c3fSF: // global
           R2 = R2;
           R1 = lvl8_r2UqG_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3fSG: // global
           I64[Sp - 8] = block_c3fSz_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_r2UqG_info" {
     lvl8_r2UqG_info:
         const lvl8_r2UqG_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3fSz() //  [R1]
         { []
         }
     {offset
       c3fSz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fSJ; else goto c3fSI;
       c3fSJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3fSI: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3fSz_info" {
     block_c3fSz_info:
         const _c3fSz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.415208942 UTC

[section ""data" . lvl9_r2UqH_closure" {
     lvl9_r2UqH_closure:
         const lvl9_r2UqH_info;
         const 0;
         const 0;
         const 0;
 },
 section ""relreadonly" . u3fT4_srtd" {
     u3fT4_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2251799813685249;
 },
 lvl9_r2UqH_entry() //  [R1]
         { []
         }
     {offset
       c3fT1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fT2; else goto c3fT3;
       c3fT2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fT3: // global
           (_c3fSY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3fSY::I64 == 0) goto c3fT0; else goto c3fSZ;
       c3fT0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3fSZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3fSY::I64;
           R3 = 23;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r2UqH_info" {
     lvl9_r2UqH_info:
         const lvl9_r2UqH_entry;
         const 0;
         const 18446744069414584341;
         const u3fT4_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.421554267 UTC

[section ""data" . sat_s3bas_closure" {
     sat_s3bas_closure:
         const GHC.Types.I#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.423249718 UTC

[section ""data" . sat_s3bat_closure" {
     sat_s3bat_closure:
         const :_con_info;
         const sat_s3bas_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.426046819 UTC

[section ""data" . lvl10_r2UqI_closure" {
     lvl10_r2UqI_closure:
         const lvl10_r2UqI_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r2UqI_entry() //  [R1]
         { []
         }
     {offset
       c3fTm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fTn; else goto c3fTo;
       c3fTn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fTo: // global
           (_c3fTj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3fTj::I64 == 0) goto c3fTl; else goto c3fTk;
       c3fTl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3fTk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3fTj::I64;
           R3 = sat_s3bat_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_r2UqI_info" {
     lvl10_r2UqI_info:
         const lvl10_r2UqI_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+1040;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.465565851 UTC

[section ""data" . GHC.Float.$w$sfloatToDigits1_closure" {
     GHC.Float.$w$sfloatToDigits1_closure:
         const GHC.Float.$w$sfloatToDigits1_info;
         const 0;
 },
 GHC.Float.$w$sfloatToDigits1_slow() //  [R1]
         { []
         }
     {offset
       c3fTz: // global
           F1 = F32[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$sfloatToDigits1_entry(F1,
                                                   R2,
                                                   R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3baB_entry() //  [R1]
         { []
         }
     {offset
       c3fTT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fTU; else goto c3fTV;
       c3fTU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fTV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3baB_info" {
     sat_s3baB_info:
         const sat_s3baB_entry;
         const 4294967296;
         const 17;
 },
 ds_s3bax_entry() //  [R1]
         { []
         }
     {offset
       c3fTX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3fTY; else goto c3fTZ;
       c3fTY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fTZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fTK_info;
           F1 = F32[R1 + 16];
           Sp = Sp - 24;
           call stg_decodeFloat_Int#(F1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s3bax_info" {
     ds_s3bax_info:
         const ds_s3bax_entry;
         const 4294967296;
         const 17;
 },
 _c3fTK() //  [R1, R2]
         { []
         }
     {offset
       c3fTK: // global
           I64[Sp - 8] = R2;
           I64[Sp] = R1;
           Sp = Sp - 16;
           call _c3fTL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fTK_info" {
     block_c3fTK_info:
         const _c3fTK;
         const 0;
         const 30;
 },
 _c3fTL() //  []
         { []
         }
     {offset
       c3fTL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3fU2; else goto c3fU1;
       c3fU2: // global
           HpAlloc = 64;
           I64[Sp] = block_c3fTL_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c3fU1: // global
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = sat_s3baB_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fTL_info" {
     block_c3fTL_info:
         const _c3fTL;
         const 194;
         const 30;
 },
 section ""relreadonly" . u3g4K_srtd" {
     u3g4K_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2252933685051393;
 },
 sat_s3baN_entry() //  [R1]
         { []
         }
     {offset
       c3fUA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3fUB; else goto c3fUC;
       c3fUB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fUC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3fUy_info;
           R3 = I64[R1 + 24];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3baN_info" {
     sat_s3baN_info:
         const sat_s3baN_entry;
         const 4294967297;
         const 18446744069414584339;
         const u3g4K_srtd;
 },
 _c3fUy() //  [R1]
         { []
         }
     {offset
       c3fUy: // global
           I64[Sp - 8] = block_c3fUF_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fUy_info" {
     block_c3fUy_info:
         const _c3fUy;
         const 1;
         const 141733920798;
         const S3bQP_srt+832;
 },
 _c3fUF() //  [R1]
         { []
         }
     {offset
       c3fUF: // global
           if (R1 == 1) goto c3fUQ; else goto c3fUM;
       c3fUQ: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3fUM: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fUF_info" {
     block_c3fUF_info:
         const _c3fUF;
         const 2;
         const 4294967326;
         const S3bQP_srt+872;
 },
 section ""relreadonly" . u3g4L_srtd" {
     u3g4L_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2252933685051393;
 },
 ds1_s3baD_entry() //  [R1]
         { []
         }
     {offset
       c3fUR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3fUS; else goto c3fUT;
       c3fUS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fUT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fU9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3fV3; else goto c3fUa;
       u3fV3: // global
           call _c3fU9(R1) args: 0, res: 0, upd: 0;
       c3fUa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3baD_info" {
     ds1_s3baD_info:
         const ds1_s3baD_entry;
         const 1;
         const 18446744069414584336;
         const u3g4L_srtd;
 },
 section ""relreadonly" . u3g4M_srtd" {
     u3g4M_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2252933685051393;
 },
 _c3fU9() //  [R1]
         { []
         }
     {offset
       c3fU9: // global
           I64[Sp - 16] = block_c3fUe_info;
           _s3baE::P64 = R1;
           _s3baF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3baF::P64;
           P64[Sp] = _s3baE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3fV2; else goto c3fUf;
       u3fV2: // global
           call _c3fUe(R1) args: 0, res: 0, upd: 0;
       c3fUf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fU9_info" {
     block_c3fU9_info:
         const _c3fU9;
         const 0;
         const 18446744069414584350;
         const u3g4M_srtd;
 },
 section ""relreadonly" . u3g4N_srtd" {
     u3g4N_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2252933685051393;
 },
 _c3fUe() //  [R1]
         { []
         }
     {offset
       c3fUe: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3fUX; else goto c3fUW;
       c3fUX: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3fUW: // global
           _s3baI::I64 = I64[R1 + 7];
           _s3baJ::I64 = (-149) - _s3baI::I64;
           if (%MO_S_Le_W64(_s3baJ::I64, 0)) goto c3fUZ; else goto c3fV1;
       c3fUZ: // global
           Hp = Hp - 72;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3fV1: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s3baI::I64 + _s3baJ::I64;
           I64[Hp - 48] = sat_s3baN_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s3baJ::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 63;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fUe_info" {
     block_c3fUe_info:
         const _c3fUe;
         const 2;
         const 18446744069414584350;
         const u3g4N_srtd;
 },
 section ""relreadonly" . u3g4O_srtd" {
     u3g4O_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s3bb5_entry() //  [R1]
         { []
         }
     {offset
       c3fVx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3fVA; else goto c3fVB;
       c3fVA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fVB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fVz_info;
           R3 = -I64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bb5_info" {
     sat_s3bb5_info:
         const sat_s3bb5_entry;
         const 4294967296;
         const 18446744069414584337;
         const u3g4O_srtd;
 },
 section ""relreadonly" . u3g4P_srtd" {
     u3g4P_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3fVz() //  [R1]
         { []
         }
     {offset
       c3fVz: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fVz_info" {
     block_c3fVz_info:
         const _c3fVz;
         const 0;
         const 18446744069414584350;
         const u3g4P_srtd;
 },
 section ""relreadonly" . u3g4Q_srtd" {
     u3g4Q_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bb2_entry() //  [R1]
         { []
         }
     {offset
       c3fVK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fVL; else goto c3fVM;
       c3fVL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fVM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bb2_info" {
     sat_s3bb2_info:
         const sat_s3bb2_entry;
         const 1;
         const 18446744069414584336;
         const u3g4Q_srtd;
 },
 section ""relreadonly" . u3g4R_srtd" {
     u3g4R_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s3bbd_entry() //  [R1]
         { []
         }
     {offset
       c3fW2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3fW8; else goto c3fW9;
       c3fW8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fW9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fW7_info;
           R3 = -I64[R1 + 16] + 1;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bbd_info" {
     sat_s3bbd_info:
         const sat_s3bbd_entry;
         const 4294967296;
         const 18446744069414584337;
         const u3g4R_srtd;
 },
 section ""relreadonly" . u3g4S_srtd" {
     u3g4S_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3fW7() //  [R1]
         { []
         }
     {offset
       c3fW7: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fW7_info" {
     block_c3fW7_info:
         const _c3fW7;
         const 0;
         const 18446744069414584350;
         const u3g4S_srtd;
 },
 section ""relreadonly" . u3g4T_srtd" {
     u3g4T_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bb9_entry() //  [R1]
         { []
         }
     {offset
       c3fWk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3fWl; else goto c3fWm;
       c3fWl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fWm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fWi_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bb9_info" {
     sat_s3bb9_info:
         const sat_s3bb9_entry;
         const 1;
         const 18446744069414584336;
         const u3g4T_srtd;
 },
 section ""relreadonly" . u3g4U_srtd" {
     u3g4U_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3fWi() //  [R1]
         { []
         }
     {offset
       c3fWi: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fWi_info" {
     block_c3fWi_info:
         const _c3fWi;
         const 0;
         const 18446744069414584350;
         const u3g4U_srtd;
 },
 section ""relreadonly" . u3g4V_srtd" {
     u3g4V_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2251799813685249;
 },
 be_s3bbe_entry() //  [R1]
         { []
         }
     {offset
       c3fWv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fWw; else goto c3fWx;
       c3fWw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fWx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . be_s3bbe_info" {
     be_s3bbe_info:
         const be_s3bbe_entry;
         const 4294967296;
         const 18446744069414584337;
         const u3g4V_srtd;
 },
 section ""relreadonly" . u3g4W_srtd" {
     u3g4W_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bbh_entry() //  [R1]
         { []
         }
     {offset
       c3fWI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3fWJ; else goto c3fWK;
       c3fWJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fWK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fWG_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bbh_info" {
     sat_s3bbh_info:
         const sat_s3bbh_entry;
         const 2;
         const 18446744069414584338;
         const u3g4W_srtd;
 },
 section ""relreadonly" . u3g4X_srtd" {
     u3g4X_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3fWG() //  [R1]
         { []
         }
     {offset
       c3fWG: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fWG_info" {
     block_c3fWG_info:
         const _c3fWG;
         const 0;
         const 18446744069414584350;
         const u3g4X_srtd;
 },
 section ""relreadonly" . u3g4Y_srtd" {
     u3g4Y_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bbl_entry() //  [R1]
         { []
         }
     {offset
       c3fWU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3fWV; else goto c3fWW;
       c3fWV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fWW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bbl_info" {
     sat_s3bbl_info:
         const sat_s3bbl_entry;
         const 1;
         const 18446744069414584336;
         const u3g4Y_srtd;
 },
 section ""relreadonly" . u3g4Z_srtd" {
     u3g4Z_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bbk_entry() //  [R1]
         { []
         }
     {offset
       c3fX3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3fX7; else goto c3fX8;
       c3fX7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fX8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3fX1_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bbk_info" {
     sat_s3bbk_info:
         const sat_s3bbk_entry;
         const 2;
         const 18446744069414584338;
         const u3g4Z_srtd;
 },
 section ""relreadonly" . u3g50_srtd" {
     u3g50_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3fX1() //  [R1]
         { []
         }
     {offset
       c3fX1: // global
           I64[Sp] = block_c3fX6_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fX1_info" {
     block_c3fX1_info:
         const _c3fX1;
         const 0;
         const 18446744069414584350;
         const u3g50_srtd;
 },
 section ""relreadonly" . u3g51_srtd" {
     u3g51_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3fX6() //  [R1]
         { []
         }
     {offset
       c3fX6: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fX6_info" {
     block_c3fX6_info:
         const _c3fX6;
         const 0;
         const 18446744069414584350;
         const u3g51_srtd;
 },
 section ""relreadonly" . u3g52_srtd" {
     u3g52_srtd:
         const S3bQP_srt+552;
         const 65;
         const 13837310404851662849;
         const 1;
 },
 ds2_s3baU_entry() //  [R1]
         { []
         }
     {offset
       c3fXe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3fXf; else goto c3fXg;
       c3fXf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fXg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3fV9_info;
           _s3baQ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3baQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3fXT; else goto c3fVa;
       u3fXT: // global
           call _c3fV9(R1) args: 0, res: 0, upd: 0;
       c3fVa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s3baU_info" {
     ds2_s3baU_info:
         const ds2_s3baU_entry;
         const 2;
         const 18446744069414584338;
         const u3g52_srtd;
 },
 section ""relreadonly" . u3g53_srtd" {
     u3g53_srtd:
         const S3bQP_srt+552;
         const 65;
         const 13837310404851662849;
         const 1;
 },
 _c3fV9() //  [R1]
         { []
         }
     {offset
       c3fV9: // global
           I64[Sp] = block_c3fVe_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3fXQ; else goto c3fVf;
       u3fXQ: // global
           call _c3fVe(R1) args: 0, res: 0, upd: 0;
       c3fVf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fV9_info" {
     block_c3fV9_info:
         const _c3fV9;
         const 1;
         const 18446744069414584350;
         const u3g53_srtd;
 },
 section ""relreadonly" . u3g54_srtd" {
     u3g54_srtd:
         const S3bQP_srt+552;
         const 65;
         const 13837310404851662849;
         const 1;
 },
 _c3fVe() //  [R1]
         { []
         }
     {offset
       c3fVe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3fXk; else goto c3fXj;
       c3fXk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3fXj: // global
           _s3baQ::P64 = P64[Sp + 8];
           _s3baZ::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3baZ::I64, 0)) goto c3fXC; else goto c3fXD;
       c3fXC: // global
           if (%MO_S_Le_W64(_s3baZ::I64, (-149))) goto c3fXq; else goto c3fXr;
       c3fXq: // global
           Hp = Hp - 24;
           I64[Sp] = _s3baZ::I64;
           Sp = Sp - 8;
           call _c3fVp() args: 0, res: 0, upd: 0;
       c3fXr: // global
           Hp = Hp - 24;
           I64[Sp - 8] = block_c3fVR_info;
           R3 = lvl9_r2UqH_closure;
           R2 = _s3baQ::P64;
           I64[Sp] = _s3baZ::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
       c3fXD: // global
           I64[Hp - 16] = be_s3bbe_info;
           I64[Hp] = _s3baZ::I64;
           I64[Sp - 8] = block_c3fWy_info;
           R3 = lvl9_r2UqH_closure;
           R2 = _s3baQ::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fVe_info" {
     block_c3fVe_info:
         const _c3fVe;
         const 1;
         const 18446744069414584350;
         const u3g54_srtd;
 },
 section ""relreadonly" . u3g55_srtd" {
     u3g55_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3fVR() //  [R1]
         { []
         }
     {offset
       c3fVR: // global
           if (R1 == 1) goto c3fXx; else goto u3fXS;
       c3fXx: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3fXA; else goto c3fXz;
       c3fXA: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fXz: // global
           I64[Hp - 80] = sat_s3bbd_info;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = sat_s3bb9_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u3fXS: // global
           call _c3fVp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fVR_info" {
     block_c3fVR_info:
         const _c3fVR;
         const 66;
         const 18446744069414584350;
         const u3g55_srtd;
 },
 section ""relreadonly" . u3g56_srtd" {
     u3g56_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3fVp() //  []
         { []
         }
     {offset
       c3fVp: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3fXo; else goto c3fXn;
       c3fXo: // global
           HpAlloc = 88;
           I64[Sp] = block_c3fVp_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c3fXn: // global
           I64[Hp - 80] = sat_s3bb5_info;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = sat_s3bb2_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Float.$fRealDouble1_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fVp_info" {
     block_c3fVp_info:
         const _c3fVp;
         const 66;
         const 18446744069414584350;
         const u3g56_srtd;
 },
 section ""relreadonly" . u3g57_srtd" {
     u3g57_srtd:
         const S3bQP_srt+552;
         const 65;
         const 4611686018427387905;
         const 1;
 },
 _c3fWy() //  [R1]
         { []
         }
     {offset
       c3fWy: // global
           _c3fWr::P64 = P64[Sp + 8];
           _s3baQ::P64 = P64[Sp + 16];
           if (R1 == 1) goto c3fXL; else goto c3fXG;
       c3fXL: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3fXO; else goto c3fXN;
       c3fXO: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fXN: // global
           I64[Hp - 88] = sat_s3bbl_info;
           P64[Hp - 72] = _c3fWr::P64;
           I64[Hp - 64] = sat_s3bbk_info;
           P64[Hp - 48] = _s3baQ::P64;
           P64[Hp - 40] = _c3fWr::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = lvl10_r2UqI_closure;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = _c3fWr::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fXG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3fXJ; else goto c3fXI;
       c3fXJ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fXI: // global
           I64[Hp - 64] = sat_s3bbh_info;
           P64[Hp - 48] = _s3baQ::P64;
           P64[Hp - 40] = _c3fWr::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp - 8] = _c3fWr::P64;
           P64[Hp] = _c3fWr::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fWy_info" {
     block_c3fWy_info:
         const _c3fWy;
         const 2;
         const 18446744069414584350;
         const u3g57_srtd;
 },
 section ""relreadonly" . u3g58_srtd" {
     u3g58_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201572929793;
 },
 k_s3bbE_entry() //  [R1]
         { []
         }
     {offset
       c3fY3: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3fY4; else goto c3fY5;
       c3fY4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3fY5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c3fY1_info;
           R3 = P64[R1 + 64];
           R2 = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 64;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_s3bbE_info" {
     k_s3bbE_info:
         const k_s3bbE_entry;
         const 7;
         const 18446744069414584335;
         const u3g58_srtd;
 },
 section ""relreadonly" . u3g59_srtd" {
     u3g59_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201572929793;
 },
 _c3fY1() //  [R1]
         { []
         }
     {offset
       c3fY1: // global
           I64[Sp - 8] = block_c3fYa_info;
           R3 = GHC.Float.expts4_closure;
           R2 = P64[Sp + 8];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fY1_info" {
     block_c3fY1_info:
         const _c3fY1;
         const 5;
         const 18446744069414584350;
         const u3g59_srtd;
 },
 section ""relreadonly" . u3g5a_srtd" {
     u3g5a_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201572929537;
 },
 _c3fYa() //  [R1]
         { []
         }
     {offset
       c3fYa: // global
           if (R1 == 1) goto c3g0t; else goto c3fZJ;
       c3g0t: // global
           I64[Sp] = block_c3g0m_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3g16; else goto c3g0n;
       u3g16: // global
           call _c3g0m(R1) args: 0, res: 0, upd: 0;
       c3g0n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3fZJ: // global
           I64[Sp] = block_c3fZf_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 40];
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fYa_info" {
     block_c3fYa_info:
         const _c3fYa;
         const 6;
         const 18446744069414584350;
         const u3g5a_srtd;
 },
 _c3g0m() //  [R1]
         { []
         }
     {offset
       c3g0m: // global
           I64[Sp] = block_c3g0r_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3g1e; else goto c3g0v;
       u3g1e: // global
           call _c3g0r(R1) args: 0, res: 0, upd: 0;
       c3g0v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g0m_info" {
     block_c3g0m_info:
         const _c3g0m;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3g0r() //  [R1]
         { []
         }
     {offset
       c3g0r: // global
           _s3bci::I64 = I64[R1 + 7] + 23;
           if (%MO_S_Lt_W64(_s3bci::I64, 0)) goto c3g0G; else goto c3g0H;
       c3g0G: // global
           I64[Sp + 40] = %MO_S_Quot_W64(_s3bci::I64 * 8651, 28738);
           Sp = Sp + 8;
           goto u3g1g;
       c3g0H: // global
           I64[Sp + 40] = %MO_S_Quot_W64(_s3bci::I64 * 8651, 28738) + 1;
           Sp = Sp + 8;
           goto u3g1g;
       u3g1g: // global
           call _c3fYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3g0r_info" {
     block_c3g0r_info:
         const _c3g0r;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 section ""relreadonly" . u3g5b_srtd" {
     u3g5b_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3fZf() //  [R1]
         { []
         }
     {offset
       c3fZf: // global
           I64[Sp] = block_c3fZj_info;
           R2 = R1;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fZf_info" {
     block_c3fZf_info:
         const _c3fZf;
         const 1286;
         const 18446744069414584350;
         const u3g5b_srtd;
 },
 section ""relreadonly" . u3g5c_srtd" {
     u3g5c_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3fZj() //  [F1]
         { []
         }
     {offset
       c3fZj: // global
           _s3baD::P64 = P64[Sp + 32];
           _c3fZo::F32 = F1;
           (_c3fZn::F32) = call MO_F32_Log(_c3fZo::F32);
           I64[Sp] = block_c3fZr_info;
           R1 = _s3baD::P64;
           F32[Sp + 40] = _c3fZn::F32;
           if (R1 & 7 != 0) goto u3g19; else goto c3fZs;
       u3g19: // global
           call _c3fZr(R1) args: 0, res: 0, upd: 0;
       c3fZs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fZj_info" {
     block_c3fZj_info:
         const _c3fZj;
         const 1286;
         const 18446744069414584350;
         const u3g5c_srtd;
 },
 section ""relreadonly" . u3g5d_srtd" {
     u3g5d_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3fZr() //  [R1]
         { []
         }
     {offset
       c3fZr: // global
           I64[Sp] = block_c3fZw_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3g1a; else goto c3fZx;
       u3g1a: // global
           call _c3fZw(R1) args: 0, res: 0, upd: 0;
       c3fZx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fZr_info" {
     block_c3fZr_info:
         const _c3fZr;
         const 1798;
         const 18446744069414584350;
         const u3g5d_srtd;
 },
 section ""relreadonly" . u3g5e_srtd" {
     u3g5e_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3fZw() //  [R1]
         { []
         }
     {offset
       c3fZw: // global
           I64[Sp] = block_c3fZB_info;
           _s3bc0::I64 = I64[R1 + 7];
           R1 = lvl5_r2UqD_closure;
           I64[Sp + 32] = _s3bc0::I64;
           if (R1 & 7 != 0) goto u3g1b; else goto c3fZC;
       u3g1b: // global
           call _c3fZB(R1) args: 0, res: 0, upd: 0;
       c3fZC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fZw_info" {
     block_c3fZw_info:
         const _c3fZw;
         const 1798;
         const 18446744069414584350;
         const u3g5e_srtd;
 },
 _c3fZB() //  [R1]
         { []
         }
     {offset
       c3fZB: // global
           I64[Sp] = block_c3fZG_info;
           R2 = P64[Sp + 16];
           F32[Sp + 24] = F32[R1 + 7];
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fZB_info" {
     block_c3fZB_info:
         const _c3fZB;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3fZG() //  [F1]
         { []
         }
     {offset
       c3fZG: // global
           _s3bbV::F32 = F32[Sp + 40];
           _s3bc0::I64 = I64[Sp + 32];
           _s3bc2::F32 = F32[Sp + 24];
           _c3fZU::F32 = F1;
           (_c3fZT::F32) = call MO_F32_Log(_c3fZU::F32);
           _s3bc8::F32 = %MO_F_Quot_W32(%MO_F_Add_W32(_s3bbV::F32,
                                                      %MO_F_Mul_W32(%MO_SF_Conv_W64_W32(_s3bc0::I64),
                                                                    _s3bc2::F32)),
                                        _c3fZT::F32);
           _s3bc9::I64 = %MO_FS_Conv_W32_W64(_s3bc8::F32);
           if (%MO_F_Lt_W32(%MO_SF_Conv_W64_W32(_s3bc9::I64),
                            _s3bc8::F32)) goto c3g0j; else goto c3g0i;
       c3g0j: // global
           I64[Sp + 40] = _s3bc9::I64 + 1;
           Sp = Sp + 8;
           goto u3g1d;
       c3g0i: // global
           I64[Sp + 40] = _s3bc9::I64;
           Sp = Sp + 8;
           goto u3g1d;
       u3g1d: // global
           call _c3fYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fZG_info" {
     block_c3fZG_info:
         const _c3fZG;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3fYd() //  []
         { []
         }
     {offset
       c3fYd: // global
           _s3bau::P64 = P64[Sp + 8];
           _s3bbH::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_s3bbH::I64, 0)) goto c3fYs; else goto c3fYS;
       c3fYs: // global
           I64[Sp - 8] = block_c3fYm_info;
           R3 = -_s3bbH::I64;
           R2 = _s3bau::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
       c3fYS: // global
           I64[Sp - 8] = block_c3fYN_info;
           R3 = _s3bbH::I64;
           R2 = _s3bau::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3fYm() //  [R1]
         { []
         }
     {offset
       c3fYm: // global
           I64[Sp] = block_c3fYq_info;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fYm_info" {
     block_c3fYm_info:
         const _c3fYm;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3fYq() //  [R1]
         { []
         }
     {offset
       c3fYq: // global
           I64[Sp] = block_c3fYx_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fYq_info" {
     block_c3fYq_info:
         const _c3fYq;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3fYx() //  [R1]
         { []
         }
     {offset
       c3fYx: // global
           _s3bbH::I64 = I64[Sp + 40];
           if (R1 == 1) goto c3fYI; else goto c3fYE;
       c3fYI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fYL; else goto c3fYK;
       c3fYL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fYK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bbH::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fYE: // global
           I64[Sp + 40] = _s3bbH::I64 + 1;
           Sp = Sp + 8;
           call _c3fYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fYx_info" {
     block_c3fYx_info:
         const _c3fYx;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3fYN() //  [R1]
         { []
         }
     {offset
       c3fYN: // global
           I64[Sp] = block_c3fYR_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fYN_info" {
     block_c3fYN_info:
         const _c3fYN;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3fYR() //  [R1]
         { []
         }
     {offset
       c3fYR: // global
           I64[Sp] = block_c3fYX_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3fYR_info" {
     block_c3fYR_info:
         const _c3fYR;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3fYX() //  [R1]
         { []
         }
     {offset
       c3fYX: // global
           _s3bbH::I64 = I64[Sp + 40];
           if (R1 == 1) goto c3fZ8; else goto c3fZ4;
       c3fZ8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3fZb; else goto c3fZa;
       c3fZb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3fZa: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bbH::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3fZ4: // global
           I64[Sp + 40] = _s3bbH::I64 + 1;
           Sp = Sp + 8;
           call _c3fYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3fYX_info" {
     block_c3fYX_info:
         const _c3fYX;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 sat_s3bcJ_entry() //  [R1]
         { []
         }
     {offset
       c3g27: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3g28; else goto c3g29;
       c3g28: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3g29: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bcJ_info" {
     sat_s3bcJ_info:
         const sat_s3bcJ_entry;
         const 1;
         const 21474836496;
         const S3bQP_srt+864;
 },
 sat_s3bcN_entry() //  [R1]
         { []
         }
     {offset
       c3g2r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3g2s; else goto c3g2t;
       c3g2s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3g2t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bcN_info" {
     sat_s3bcN_info:
         const sat_s3bcN_entry;
         const 1;
         const 21474836496;
         const S3bQP_srt+864;
 },
 section ""relreadonly" . u3g5f_srtd" {
     u3g5f_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 gen_s3bcr_entry() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3g2x: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3g2y; else goto u3g3f;
       c3g2y: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3g3f: // global
           P64[Sp - 48] = R1;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call _c3g1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . gen_s3bcr_info" {
     gen_s3bcr_info:
         const gen_s3bcr_entry;
         const 1;
         const 18446744069414584329;
         const 21474836505;
         const u3g5f_srtd;
 },
 _c3g1s() //  []
         { []
         }
     {offset
       c3g1s: // global
           _s3bau::P64 = P64[P64[Sp] + 3];
           I64[Sp - 16] = block_c3g1v_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 24];
           P64[Sp - 8] = _s3bau::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3g5g_srtd" {
     u3g5g_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g1v() //  [R1]
         { []
         }
     {offset
       c3g1v: // global
           if (R1 == 1) goto c3g2w; else goto c3g2v;
       c3g2w: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3g2v: // global
           I64[Sp] = block_c3g1z_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g1v_info" {
     block_c3g1v_info:
         const _c3g1v;
         const 7;
         const 18446744069414584350;
         const u3g5g_srtd;
 },
 section ""relreadonly" . u3g5h_srtd" {
     u3g5h_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g1z() //  [R1]
         { []
         }
     {offset
       c3g1z: // global
           I64[Sp] = block_c3g1D_info;
           R3 = P64[Sp + 40];
           R2 = R1;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g1z_info" {
     block_c3g1z_info:
         const _c3g1z;
         const 519;
         const 18446744069414584350;
         const u3g5h_srtd;
 },
 section ""relreadonly" . u3g5i_srtd" {
     u3g5i_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g1D() //  [R1, R2]
         { []
         }
     {offset
       c3g1D: // global
           I64[Sp] = block_c3g1F_info;
           R3 = P64[Sp + 8];
           _s3bcB::P64 = R2;
           R2 = P64[Sp + 48];
           P64[Sp + 32] = _s3bcB::P64;
           P64[Sp + 48] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g1D_info" {
     block_c3g1D_info:
         const _c3g1D;
         const 519;
         const 18446744069414584350;
         const u3g5i_srtd;
 },
 section ""relreadonly" . u3g5j_srtd" {
     u3g5j_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g1F() //  [R1]
         { []
         }
     {offset
       c3g1F: // global
           I64[Sp - 8] = block_c3g1J_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g1F_info" {
     block_c3g1F_info:
         const _c3g1F;
         const 7;
         const 18446744069414584350;
         const u3g5j_srtd;
 },
 section ""relreadonly" . u3g5k_srtd" {
     u3g5k_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g1J() //  [R1]
         { []
         }
     {offset
       c3g1J: // global
           I64[Sp] = block_c3g1N_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g1J_info" {
     block_c3g1J_info:
         const _c3g1J;
         const 8;
         const 18446744069414584350;
         const u3g5k_srtd;
 },
 section ""relreadonly" . u3g5l_srtd" {
     u3g5l_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g1N() //  [R1]
         { []
         }
     {offset
       c3g1N: // global
           I64[Sp] = block_c3g1R_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 64];
           I64[Sp + 64] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g1N_info" {
     block_c3g1N_info:
         const _c3g1N;
         const 8;
         const 18446744069414584350;
         const u3g5l_srtd;
 },
 section ""relreadonly" . u3g5m_srtd" {
     u3g5m_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g1R() //  [R1]
         { []
         }
     {offset
       c3g1R: // global
           I64[Sp] = block_c3g1V_info;
           R3 = R1;
           R2 = P64[Sp + 40];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g1R_info" {
     block_c3g1R_info:
         const _c3g1R;
         const 8328;
         const 18446744069414584350;
         const u3g5m_srtd;
 },
 section ""relreadonly" . u3g5n_srtd" {
     u3g5n_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g1V() //  [R1]
         { []
         }
     {offset
       c3g1V: // global
           _s3bcs::P64 = P64[Sp + 32];
           _s3bcA::P64 = P64[Sp + 56];
           _s3bcB::P64 = P64[Sp + 40];
           _s3bcE::I64 = I64[Sp + 64];
           if (R1 == 1) goto c3g2Q; else goto c3g2I;
       c3g2Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3g2T; else goto c3g2S;
       c3g2T: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3g2S: // global
           if (_s3bcE::I64 == 1) goto c3g2X; else goto c3g2W;
       c3g2X: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_c3g2f_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = _s3bcB::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c3g2W: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bcA::P64;
           P64[Hp] = _s3bcs::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3g2I: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3g2L; else goto c3g2K;
       c3g2L: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3g2K: // global
           if (_s3bcE::I64 == 1) goto c3g2P; else goto c3g2N;
       c3g2P: // global
           I64[Hp - 40] = sat_s3bcJ_info;
           P64[Hp - 24] = _s3bcA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s3bcs::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3g2N: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s3bcA::P64;
           P64[Hp - 24] = _s3bcs::P64;
           _c3g21::P64 = Hp - 38;
           Hp = Hp - 24;
           P64[Sp + 32] = _c3g21::P64;
           P64[Sp + 40] = _s3bcB::P64;
           P64[Sp + 48] = P64[Sp + 48];
           P64[Sp + 56] = P64[Sp + 8];
           P64[Sp + 64] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c3g1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3g1V_info" {
     block_c3g1V_info:
         const _c3g1V;
         const 8200;
         const 18446744069414584350;
         const u3g5n_srtd;
 },
 _c3g2f() //  [R1]
         { []
         }
     {offset
       c3g2f: // global
           I64[Sp] = block_c3g2j_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g2f_info" {
     block_c3g2f_info:
         const _c3g2f;
         const 1157;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3g2j() //  [R1]
         { []
         }
     {offset
       c3g2j: // global
           _s3bcs::P64 = P64[Sp + 8];
           _s3bcA::P64 = P64[Sp + 32];
           if (R1 == 1) goto c3g38; else goto c3g31;
       c3g38: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3g3b; else goto c3g3a;
       c3g3b: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3g3a: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bcA::P64;
           P64[Hp] = _s3bcs::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3g31: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3g34; else goto c3g33;
       c3g34: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3g33: // global
           I64[Hp - 40] = sat_s3bcN_info;
           P64[Hp - 24] = _s3bcA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s3bcs::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3g2j_info" {
     block_c3g2j_info:
         const _c3g2j;
         const 1413;
         const 21474836510;
         const S3bQP_srt+864;
 },
 section ""relreadonly" . u3g5o_srtd" {
     u3g5o_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613941700891508737;
 },
 sat_s3bdb_entry() //  [R1]
         { []
         }
     {offset
       c3g3j: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3g3k; else goto c3g3l;
       c3g3k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3g3l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c3g1l_info;
           _s3bau::P64 = P64[R1 + 16];
           _s3baU::P64 = P64[R1 + 24];
           _s3bbm::P64 = P64[R1 + 32];
           _s3bbs::P64 = P64[R1 + 40];
           _s3bby::P64 = P64[R1 + 48];
           R1 = P64[R1 + 56];
           P64[Sp - 56] = _s3bau::P64;
           P64[Sp - 48] = _s3baU::P64;
           P64[Sp - 40] = _s3bbm::P64;
           P64[Sp - 32] = _s3bbs::P64;
           P64[Sp - 24] = _s3bby::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u3g4B; else goto c3g1m;
       u3g4B: // global
           call _c3g1l(R1) args: 0, res: 0, upd: 0;
       c3g1m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bdb_info" {
     sat_s3bdb_info:
         const sat_s3bdb_entry;
         const 6;
         const 18446744069414584335;
         const u3g5o_srtd;
 },
 section ""relreadonly" . u3g5p_srtd" {
     u3g5p_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c3g1l() //  [R1]
         { []
         }
     {offset
       c3g1l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3g3o; else goto c3g3n;
       c3g3o: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3g3n: // global
           _s3bcq::I64 = I64[R1 + 7];
           I64[Hp - 8] = gen_s3bcr_info;
           P64[Hp] = P64[Sp + 8];
           _s3baU::P64 = P64[Sp + 16];
           _c3g1q::P64 = Hp - 3;
           if (%MO_S_Lt_W64(_s3bcq::I64, 0)) goto c3g3W; else goto c3g4q;
       c3g3W: // global
           I64[Sp - 8] = block_c3g3s_info;
           R1 = _s3baU::P64;
           I64[Sp] = _s3bcq::I64;
           P64[Sp + 16] = _c3g1q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3g4z; else goto c3g3t;
       u3g4z: // global
           call _c3g3s(R1) args: 0, res: 0, upd: 0;
       c3g3t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3g4q: // global
           I64[Sp - 8] = block_c3g48_info;
           R1 = _s3baU::P64;
           I64[Sp] = _s3bcq::I64;
           P64[Sp + 16] = _c3g1q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3g4A; else goto c3g49;
       u3g4A: // global
           call _c3g48(R1) args: 0, res: 0, upd: 0;
       c3g49: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g1l_info" {
     block_c3g1l_info:
         const _c3g1l;
         const 5;
         const 18446744069414584350;
         const u3g5p_srtd;
 },
 section ""relreadonly" . u3g5q_srtd" {
     u3g5q_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c3g3s() //  [R1]
         { []
         }
     {offset
       c3g3s: // global
           _s3bcW::I64 = -I64[Sp + 8];
           I64[Sp + 8] = block_c3g3A_info;
           R3 = _s3bcW::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g3s_info" {
     block_c3g3s_info:
         const _c3g3s;
         const 70;
         const 18446744069414584350;
         const u3g5q_srtd;
 },
 section ""relreadonly" . u3g5r_srtd" {
     u3g5r_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g3A() //  [R1]
         { []
         }
     {offset
       c3g3A: // global
           I64[Sp] = block_c3g3E_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g3A_info" {
     block_c3g3A_info:
         const _c3g3A;
         const 5;
         const 18446744069414584350;
         const u3g5r_srtd;
 },
 section ""relreadonly" . u3g5s_srtd" {
     u3g5s_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g3E() //  [R1]
         { []
         }
     {offset
       c3g3E: // global
           I64[Sp] = block_c3g3I_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g3E_info" {
     block_c3g3E_info:
         const _c3g3E;
         const 5;
         const 18446744069414584350;
         const u3g5s_srtd;
 },
 section ""relreadonly" . u3g5t_srtd" {
     u3g5t_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g3I() //  [R1]
         { []
         }
     {offset
       c3g3I: // global
           _s3bcV::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3g3M_info;
           R3 = _s3bcV::P64;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g3I_info" {
     block_c3g3I_info:
         const _c3g3I;
         const 5;
         const 18446744069414584350;
         const u3g5t_srtd;
 },
 section ""relreadonly" . u3g5u_srtd" {
     u3g5u_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g3M() //  [R1]
         { []
         }
     {offset
       c3g3M: // global
           _s3bcZ::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c3g3Q_info;
           R6 = _s3bcZ::P64;
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call gen_s3bcr_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g3M_info" {
     block_c3g3M_info:
         const _c3g3M;
         const 4;
         const 18446744069414584350;
         const u3g5u_srtd;
 },
 _c3g3Q() //  [R1]
         { []
         }
     {offset
       c3g3Q: // global
           I64[Sp] = block_c3g3U_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g3Q_info" {
     block_c3g3Q_info:
         const _c3g3Q;
         const 0;
         const 30;
 },
 _c3g3U() //  [R1]
         { []
         }
     {offset
       c3g3U: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g3U_info" {
     block_c3g3U_info:
         const _c3g3U;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3g5v_srtd" {
     u3g5v_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c3g48() //  [R1]
         { []
         }
     {offset
       c3g48: // global
           _s3bcq::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3g4d_info;
           R3 = _s3bcq::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g48_info" {
     block_c3g48_info:
         const _c3g48;
         const 70;
         const 18446744069414584350;
         const u3g5v_srtd;
 },
 section ""relreadonly" . u3g5w_srtd" {
     u3g5w_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g4d() //  [R1]
         { []
         }
     {offset
       c3g4d: // global
           I64[Sp] = block_c3g4h_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g4d_info" {
     block_c3g4d_info:
         const _c3g4d;
         const 5;
         const 18446744069414584350;
         const u3g5w_srtd;
 },
 section ""relreadonly" . u3g5x_srtd" {
     u3g5x_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3g4h() //  [R1]
         { []
         }
     {offset
       c3g4h: // global
           _s3bby::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c3g4l_info;
           R6 = P64[Sp + 8];
           R5 = _s3bby::P64;
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call gen_s3bcr_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g4h_info" {
     block_c3g4h_info:
         const _c3g4h;
         const 261;
         const 18446744069414584350;
         const u3g5x_srtd;
 },
 _c3g4l() //  [R1]
         { []
         }
     {offset
       c3g4l: // global
           I64[Sp] = block_c3g4p_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g4l_info" {
     block_c3g4l_info:
         const _c3g4l;
         const 0;
         const 30;
 },
 _c3g4p() //  [R1]
         { []
         }
     {offset
       c3g4p: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3g4p_info" {
     block_c3g4p_info:
         const _c3g4p;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3g5y_srtd" {
     u3g5y_srtd:
         const S3bQP_srt+552;
         const 66;
         const 13837313737779970049;
         const 3;
 },
 GHC.Float.$w$sfloatToDigits1_entry() //  [R2, F1]
         { []
         }
     {offset
       c3g4F: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c3g4J; else goto c3g4I;
       c3g4J: // global
           HpAlloc = 312;
           R1 = GHC.Float.$w$sfloatToDigits1_closure;
           P64[Sp - 16] = R2;
           F32[Sp - 8] = F1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3g4I: // global
           if (%MO_F_Eq_W32(F1, 0.0 :: W32)) goto c3g4E; else goto c3g4D;
       c3g4E: // global
           Hp = Hp - 312;
           R2 = GHC.Float.minExpt_closure+1;
           R1 = lvl3_r2UpB_closure+2;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3g4D: // global
           I64[Hp - 304] = ds_s3bax_info;
           F32[Hp - 288] = F1;
           I64[Hp - 280] = ds1_s3baD_info;
           _c3fTG::P64 = Hp - 304;
           P64[Hp - 264] = _c3fTG::P64;
           I64[Hp - 256] = stg_sel_0_upd_info;
           _c3fU5::P64 = Hp - 280;
           P64[Hp - 240] = _c3fU5::P64;
           I64[Hp - 232] = ds2_s3baU_info;
           P64[Hp - 216] = _c3fU5::P64;
           _c3fV4::P64 = Hp - 256;
           P64[Hp - 208] = _c3fV4::P64;
           I64[Hp - 200] = stg_sel_1_upd_info;
           _c3fV5::P64 = Hp - 232;
           P64[Hp - 184] = _c3fV5::P64;
           I64[Hp - 176] = stg_sel_0_upd_info;
           P64[Hp - 160] = _c3fV5::P64;
           I64[Hp - 152] = stg_sel_2_upd_info;
           P64[Hp - 136] = _c3fV5::P64;
           I64[Hp - 128] = k_s3bbE_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = _c3fTG::P64;
           P64[Hp - 96] = _c3fU5::P64;
           P64[Hp - 88] = _c3fV4::P64;
           _c3fXU::P64 = Hp - 200;
           P64[Hp - 80] = _c3fXU::P64;
           _c3fXV::P64 = Hp - 176;
           P64[Hp - 72] = _c3fXV::P64;
           _c3fXW::P64 = Hp - 152;
           P64[Hp - 64] = _c3fXW::P64;
           I64[Hp - 56] = sat_s3bdb_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _c3fV5::P64;
           P64[Hp - 24] = _c3fXU::P64;
           P64[Hp - 16] = _c3fXV::P64;
           P64[Hp - 8] = _c3fXW::P64;
           _c3fXX::P64 = Hp - 128;
           P64[Hp] = _c3fXX::P64;
           R2 = _c3fXX::P64;
           R1 = Hp - 56;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sfloatToDigits1_info" {
     GHC.Float.$w$sfloatToDigits1_info:
         const GHC.Float.$w$sfloatToDigits1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const u3g5y_srtd;
         const 130;
         const GHC.Float.$w$sfloatToDigits1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.631420658 UTC

[section ""data" . lvl11_r2UqJ_closure" {
     lvl11_r2UqJ_closure:
         const lvl11_r2UqJ_info;
         const 0;
         const 0;
         const 0;
 },
 section ""relreadonly" . u3gdS_srtd" {
     u3gdS_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2251799813685249;
 },
 lvl11_r2UqJ_entry() //  [R1]
         { []
         }
     {offset
       c3gdP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gdQ; else goto c3gdR;
       c3gdQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gdR: // global
           (_c3gdM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3gdM::I64 == 0) goto c3gdO; else goto c3gdN;
       c3gdO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3gdN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3gdM::I64;
           R3 = 52;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_r2UqJ_info" {
     lvl11_r2UqJ_info:
         const lvl11_r2UqJ_entry;
         const 0;
         const 18446744069414584341;
         const u3gdS_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.665703632 UTC

[section ""data" . GHC.Float.$w$sfloatToDigits_closure" {
     GHC.Float.$w$sfloatToDigits_closure:
         const GHC.Float.$w$sfloatToDigits_info;
         const 0;
 },
 GHC.Float.$w$sfloatToDigits_slow() //  [R1]
         { []
         }
     {offset
       c3ge3: // global
           D1 = F64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 16;
           call GHC.Float.$w$sfloatToDigits_entry(D1,
                                                  R2,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 ds_s3bdf_entry() //  [R1]
         { []
         }
     {offset
       c3gek: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3gel; else goto c3gem;
       c3gel: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gem: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gee_info;
           D1 = F64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.decodeDoubleInteger_entry(D1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s3bdf_info" {
     ds_s3bdf_info:
         const ds_s3bdf_entry;
         const 4294967296;
         const 4294967313;
         const S3bQP_srt+1080;
 },
 _c3gee() //  [R1, R2]
         { []
         }
     {offset
       c3gee: // global
           I64[Sp - 8] = R2;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _c3gef() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gee_info" {
     block_c3gee_info:
         const _c3gee;
         const 0;
         const 30;
 },
 _c3gef() //  []
         { []
         }
     {offset
       c3gef: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3gep; else goto c3geo;
       c3gep: // global
           HpAlloc = 40;
           I64[Sp] = block_c3gef_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c3geo: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 31;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gef_info" {
     block_c3gef_info:
         const _c3gef;
         const 66;
         const 30;
 },
 section ""relreadonly" . u3gp7_srtd" {
     u3gp7_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2252933685051393;
 },
 sat_s3bdu_entry() //  [R1]
         { []
         }
     {offset
       c3geX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3geY; else goto c3geZ;
       c3geY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3geZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3geV_info;
           R3 = I64[R1 + 24];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bdu_info" {
     sat_s3bdu_info:
         const sat_s3bdu_entry;
         const 4294967297;
         const 18446744069414584339;
         const u3gp7_srtd;
 },
 _c3geV() //  [R1]
         { []
         }
     {offset
       c3geV: // global
           I64[Sp - 8] = block_c3gf2_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3geV_info" {
     block_c3geV_info:
         const _c3geV;
         const 1;
         const 141733920798;
         const S3bQP_srt+832;
 },
 _c3gf2() //  [R1]
         { []
         }
     {offset
       c3gf2: // global
           if (R1 == 1) goto c3gfd; else goto c3gf9;
       c3gfd: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3gf9: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gf2_info" {
     block_c3gf2_info:
         const _c3gf2;
         const 2;
         const 4294967326;
         const S3bQP_srt+872;
 },
 section ""relreadonly" . u3gp8_srtd" {
     u3gp8_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2252933685051393;
 },
 ds1_s3bdk_entry() //  [R1]
         { []
         }
     {offset
       c3gfe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3gff; else goto c3gfg;
       c3gff: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gfg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gew_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3gfq; else goto c3gex;
       u3gfq: // global
           call _c3gew(R1) args: 0, res: 0, upd: 0;
       c3gex: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3bdk_info" {
     ds1_s3bdk_info:
         const ds1_s3bdk_entry;
         const 1;
         const 18446744069414584336;
         const u3gp8_srtd;
 },
 section ""relreadonly" . u3gp9_srtd" {
     u3gp9_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2252933685051393;
 },
 _c3gew() //  [R1]
         { []
         }
     {offset
       c3gew: // global
           I64[Sp - 16] = block_c3geB_info;
           _s3bdl::P64 = R1;
           _s3bdm::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3bdm::P64;
           P64[Sp] = _s3bdl::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3gfp; else goto c3geC;
       u3gfp: // global
           call _c3geB(R1) args: 0, res: 0, upd: 0;
       c3geC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gew_info" {
     block_c3gew_info:
         const _c3gew;
         const 0;
         const 18446744069414584350;
         const u3gp9_srtd;
 },
 section ""relreadonly" . u3gpa_srtd" {
     u3gpa_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2252933685051393;
 },
 _c3geB() //  [R1]
         { []
         }
     {offset
       c3geB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3gfk; else goto c3gfj;
       c3gfk: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3gfj: // global
           _s3bdp::I64 = I64[R1 + 7];
           _s3bdq::I64 = (-1074) - _s3bdp::I64;
           if (%MO_S_Le_W64(_s3bdq::I64, 0)) goto c3gfm; else goto c3gfo;
       c3gfm: // global
           Hp = Hp - 72;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3gfo: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s3bdp::I64 + _s3bdq::I64;
           I64[Hp - 48] = sat_s3bdu_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s3bdq::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 63;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3geB_info" {
     block_c3geB_info:
         const _c3geB;
         const 2;
         const 18446744069414584350;
         const u3gpa_srtd;
 },
 section ""relreadonly" . u3gpb_srtd" {
     u3gpb_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s3bdM_entry() //  [R1]
         { []
         }
     {offset
       c3gfU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gfX; else goto c3gfY;
       c3gfX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gfY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gfW_info;
           R3 = -I64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bdM_info" {
     sat_s3bdM_info:
         const sat_s3bdM_entry;
         const 4294967296;
         const 18446744069414584337;
         const u3gpb_srtd;
 },
 section ""relreadonly" . u3gpc_srtd" {
     u3gpc_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gfW() //  [R1]
         { []
         }
     {offset
       c3gfW: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gfW_info" {
     block_c3gfW_info:
         const _c3gfW;
         const 0;
         const 18446744069414584350;
         const u3gpc_srtd;
 },
 section ""relreadonly" . u3gpd_srtd" {
     u3gpd_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bdJ_entry() //  [R1]
         { []
         }
     {offset
       c3gg7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gg8; else goto c3gg9;
       c3gg8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gg9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bdJ_info" {
     sat_s3bdJ_info:
         const sat_s3bdJ_entry;
         const 1;
         const 18446744069414584336;
         const u3gpd_srtd;
 },
 section ""relreadonly" . u3gpe_srtd" {
     u3gpe_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s3bdU_entry() //  [R1]
         { []
         }
     {offset
       c3ggp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ggv; else goto c3ggw;
       c3ggv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ggw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3ggu_info;
           R3 = -I64[R1 + 16] + 1;
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bdU_info" {
     sat_s3bdU_info:
         const sat_s3bdU_entry;
         const 4294967296;
         const 18446744069414584337;
         const u3gpe_srtd;
 },
 section ""relreadonly" . u3gpf_srtd" {
     u3gpf_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3ggu() //  [R1]
         { []
         }
     {offset
       c3ggu: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3ggu_info" {
     block_c3ggu_info:
         const _c3ggu;
         const 0;
         const 18446744069414584350;
         const u3gpf_srtd;
 },
 section ""relreadonly" . u3gpg_srtd" {
     u3gpg_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bdQ_entry() //  [R1]
         { []
         }
     {offset
       c3ggH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ggI; else goto c3ggJ;
       c3ggI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ggJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3ggF_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bdQ_info" {
     sat_s3bdQ_info:
         const sat_s3bdQ_entry;
         const 1;
         const 18446744069414584336;
         const u3gpg_srtd;
 },
 section ""relreadonly" . u3gph_srtd" {
     u3gph_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3ggF() //  [R1]
         { []
         }
     {offset
       c3ggF: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3ggF_info" {
     block_c3ggF_info:
         const _c3ggF;
         const 0;
         const 18446744069414584350;
         const u3gph_srtd;
 },
 section ""relreadonly" . u3gpi_srtd" {
     u3gpi_srtd:
         const S3bQP_srt+552;
         const 52;
         const 2251799813685249;
 },
 be_s3bdV_entry() //  [R1]
         { []
         }
     {offset
       c3ggS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ggT; else goto c3ggU;
       c3ggT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ggU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . be_s3bdV_info" {
     be_s3bdV_info:
         const be_s3bdV_entry;
         const 4294967296;
         const 18446744069414584337;
         const u3gpi_srtd;
 },
 section ""relreadonly" . u3gpj_srtd" {
     u3gpj_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bdY_entry() //  [R1]
         { []
         }
     {offset
       c3gh5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gh6; else goto c3gh7;
       c3gh6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gh7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gh3_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bdY_info" {
     sat_s3bdY_info:
         const sat_s3bdY_entry;
         const 2;
         const 18446744069414584338;
         const u3gpj_srtd;
 },
 section ""relreadonly" . u3gpk_srtd" {
     u3gpk_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gh3() //  [R1]
         { []
         }
     {offset
       c3gh3: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gh3_info" {
     block_c3gh3_info:
         const _c3gh3;
         const 0;
         const 18446744069414584350;
         const u3gpk_srtd;
 },
 section ""relreadonly" . u3gpl_srtd" {
     u3gpl_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3be2_entry() //  [R1]
         { []
         }
     {offset
       c3ghh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ghi; else goto c3ghj;
       c3ghi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ghj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3be2_info" {
     sat_s3be2_info:
         const sat_s3be2_entry;
         const 1;
         const 18446744069414584336;
         const u3gpl_srtd;
 },
 section ""relreadonly" . u3gpm_srtd" {
     u3gpm_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3be1_entry() //  [R1]
         { []
         }
     {offset
       c3ghq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ghu; else goto c3ghv;
       c3ghu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ghv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gho_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3be1_info" {
     sat_s3be1_info:
         const sat_s3be1_entry;
         const 2;
         const 18446744069414584338;
         const u3gpm_srtd;
 },
 section ""relreadonly" . u3gpn_srtd" {
     u3gpn_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gho() //  [R1]
         { []
         }
     {offset
       c3gho: // global
           I64[Sp] = block_c3ght_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gho_info" {
     block_c3gho_info:
         const _c3gho;
         const 0;
         const 18446744069414584350;
         const u3gpn_srtd;
 },
 section ""relreadonly" . u3gpo_srtd" {
     u3gpo_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3ght() //  [R1]
         { []
         }
     {offset
       c3ght: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3ght_info" {
     block_c3ght_info:
         const _c3ght;
         const 0;
         const 18446744069414584350;
         const u3gpo_srtd;
 },
 section ""relreadonly" . u3gpp_srtd" {
     u3gpp_srtd:
         const S3bQP_srt+552;
         const 68;
         const 4613938367996887041;
         const 9;
 },
 ds2_s3bdB_entry() //  [R1]
         { []
         }
     {offset
       c3ghB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ghC; else goto c3ghD;
       c3ghC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ghD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3gfw_info;
           _s3bdx::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3bdx::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3gig; else goto c3gfx;
       u3gig: // global
           call _c3gfw(R1) args: 0, res: 0, upd: 0;
       c3gfx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s3bdB_info" {
     ds2_s3bdB_info:
         const ds2_s3bdB_entry;
         const 2;
         const 18446744069414584338;
         const u3gpp_srtd;
 },
 section ""relreadonly" . u3gpq_srtd" {
     u3gpq_srtd:
         const S3bQP_srt+552;
         const 68;
         const 4613938367996887041;
         const 9;
 },
 _c3gfw() //  [R1]
         { []
         }
     {offset
       c3gfw: // global
           I64[Sp] = block_c3gfB_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3gid; else goto c3gfC;
       u3gid: // global
           call _c3gfB(R1) args: 0, res: 0, upd: 0;
       c3gfC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gfw_info" {
     block_c3gfw_info:
         const _c3gfw;
         const 1;
         const 18446744069414584350;
         const u3gpq_srtd;
 },
 section ""relreadonly" . u3gpr_srtd" {
     u3gpr_srtd:
         const S3bQP_srt+552;
         const 68;
         const 4613938367996887041;
         const 9;
 },
 _c3gfB() //  [R1]
         { []
         }
     {offset
       c3gfB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ghH; else goto c3ghG;
       c3ghH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3ghG: // global
           _s3bdx::P64 = P64[Sp + 8];
           _s3bdG::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3bdG::I64, 0)) goto c3ghZ; else goto c3gi0;
       c3ghZ: // global
           if (%MO_S_Le_W64(_s3bdG::I64,
                            (-1074))) goto c3ghN; else goto c3ghO;
       c3ghN: // global
           Hp = Hp - 24;
           I64[Sp] = _s3bdG::I64;
           Sp = Sp - 8;
           call _c3gfM() args: 0, res: 0, upd: 0;
       c3ghO: // global
           Hp = Hp - 24;
           I64[Sp - 8] = block_c3gge_info;
           R3 = lvl11_r2UqJ_closure;
           R2 = _s3bdx::P64;
           I64[Sp] = _s3bdG::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
       c3gi0: // global
           I64[Hp - 16] = be_s3bdV_info;
           I64[Hp] = _s3bdG::I64;
           I64[Sp - 8] = block_c3ggV_info;
           R3 = lvl11_r2UqJ_closure;
           R2 = _s3bdx::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gfB_info" {
     block_c3gfB_info:
         const _c3gfB;
         const 1;
         const 18446744069414584350;
         const u3gpr_srtd;
 },
 section ""relreadonly" . u3gps_srtd" {
     u3gps_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gge() //  [R1]
         { []
         }
     {offset
       c3gge: // global
           if (R1 == 1) goto c3ghU; else goto u3gif;
       c3ghU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ghX; else goto c3ghW;
       c3ghX: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3ghW: // global
           I64[Hp - 80] = sat_s3bdU_info;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = sat_s3bdQ_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u3gif: // global
           call _c3gfM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gge_info" {
     block_c3gge_info:
         const _c3gge;
         const 66;
         const 18446744069414584350;
         const u3gps_srtd;
 },
 section ""relreadonly" . u3gpt_srtd" {
     u3gpt_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gfM() //  []
         { []
         }
     {offset
       c3gfM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ghL; else goto c3ghK;
       c3ghL: // global
           HpAlloc = 88;
           I64[Sp] = block_c3gfM_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c3ghK: // global
           I64[Hp - 80] = sat_s3bdM_info;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = sat_s3bdJ_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = GHC.Float.$fRealDouble1_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gfM_info" {
     block_c3gfM_info:
         const _c3gfM;
         const 66;
         const 18446744069414584350;
         const u3gpt_srtd;
 },
 section ""relreadonly" . u3gpu_srtd" {
     u3gpu_srtd:
         const S3bQP_srt+552;
         const 65;
         const 4611686018427387905;
         const 1;
 },
 _c3ggV() //  [R1]
         { []
         }
     {offset
       c3ggV: // global
           _c3ggO::P64 = P64[Sp + 8];
           _s3bdx::P64 = P64[Sp + 16];
           if (R1 == 1) goto c3gi8; else goto c3gi3;
       c3gi8: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3gib; else goto c3gia;
       c3gib: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gia: // global
           I64[Hp - 88] = sat_s3be2_info;
           P64[Hp - 72] = _c3ggO::P64;
           I64[Hp - 64] = sat_s3be1_info;
           P64[Hp - 48] = _s3bdx::P64;
           P64[Hp - 40] = _c3ggO::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = lvl10_r2UqI_closure;
           P64[Hp - 8] = Hp - 88;
           P64[Hp] = _c3ggO::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3gi3: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3gi6; else goto c3gi5;
       c3gi6: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gi5: // global
           I64[Hp - 64] = sat_s3bdY_info;
           P64[Hp - 48] = _s3bdx::P64;
           P64[Hp - 40] = _c3ggO::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp - 8] = _c3ggO::P64;
           P64[Hp] = _c3ggO::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3ggV_info" {
     block_c3ggV_info:
         const _c3ggV;
         const 2;
         const 18446744069414584350;
         const u3gpu_srtd;
 },
 section ""relreadonly" . u3gpv_srtd" {
     u3gpv_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201572929793;
 },
 k_s3bel_entry() //  [R1]
         { []
         }
     {offset
       c3giq: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3gir; else goto c3gis;
       c3gir: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gis: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c3gio_info;
           R3 = P64[R1 + 64];
           R2 = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 24];
           P64[Sp - 40] = P64[R1 + 32];
           P64[Sp - 32] = P64[R1 + 40];
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 64;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_s3bel_info" {
     k_s3bel_info:
         const k_s3bel_entry;
         const 7;
         const 18446744069414584335;
         const u3gpv_srtd;
 },
 section ""relreadonly" . u3gpw_srtd" {
     u3gpw_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201572929793;
 },
 _c3gio() //  [R1]
         { []
         }
     {offset
       c3gio: // global
           I64[Sp - 8] = block_c3gix_info;
           R3 = GHC.Float.expts4_closure;
           R2 = P64[Sp + 8];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gio_info" {
     block_c3gio_info:
         const _c3gio;
         const 5;
         const 18446744069414584350;
         const u3gpw_srtd;
 },
 section ""relreadonly" . u3gpx_srtd" {
     u3gpx_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201572929537;
 },
 _c3gix() //  [R1]
         { []
         }
     {offset
       c3gix: // global
           if (R1 == 1) goto c3gkQ; else goto c3gk6;
       c3gkQ: // global
           I64[Sp] = block_c3gkJ_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3glt; else goto c3gkK;
       u3glt: // global
           call _c3gkJ(R1) args: 0, res: 0, upd: 0;
       c3gkK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3gk6: // global
           I64[Sp] = block_c3gjC_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 40];
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gix_info" {
     block_c3gix_info:
         const _c3gix;
         const 6;
         const 18446744069414584350;
         const u3gpx_srtd;
 },
 _c3gkJ() //  [R1]
         { []
         }
     {offset
       c3gkJ: // global
           I64[Sp] = block_c3gkO_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3glB; else goto c3gkS;
       u3glB: // global
           call _c3gkO(R1) args: 0, res: 0, upd: 0;
       c3gkS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gkJ_info" {
     block_c3gkJ_info:
         const _c3gkJ;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gkO() //  [R1]
         { []
         }
     {offset
       c3gkO: // global
           _s3beZ::I64 = I64[R1 + 7] + 52;
           if (%MO_S_Lt_W64(_s3beZ::I64, 0)) goto c3gl3; else goto c3gl4;
       c3gl3: // global
           I64[Sp + 40] = %MO_S_Quot_W64(_s3beZ::I64 * 8651, 28738);
           Sp = Sp + 8;
           goto u3glD;
       c3gl4: // global
           I64[Sp + 40] = %MO_S_Quot_W64(_s3beZ::I64 * 8651, 28738) + 1;
           Sp = Sp + 8;
           goto u3glD;
       u3glD: // global
           call _c3giA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gkO_info" {
     block_c3gkO_info:
         const _c3gkO;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 section ""relreadonly" . u3gpy_srtd" {
     u3gpy_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3gjC() //  [R1]
         { []
         }
     {offset
       c3gjC: // global
           I64[Sp] = block_c3gjG_info;
           R2 = R1;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gjC_info" {
     block_c3gjC_info:
         const _c3gjC;
         const 1286;
         const 18446744069414584350;
         const u3gpy_srtd;
 },
 section ""relreadonly" . u3gpz_srtd" {
     u3gpz_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3gjG() //  [F1]
         { []
         }
     {offset
       c3gjG: // global
           _s3bdk::P64 = P64[Sp + 32];
           _c3gjL::F32 = F1;
           (_c3gjK::F32) = call MO_F32_Log(_c3gjL::F32);
           I64[Sp] = block_c3gjO_info;
           R1 = _s3bdk::P64;
           F32[Sp + 40] = _c3gjK::F32;
           if (R1 & 7 != 0) goto u3glw; else goto c3gjP;
       u3glw: // global
           call _c3gjO(R1) args: 0, res: 0, upd: 0;
       c3gjP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gjG_info" {
     block_c3gjG_info:
         const _c3gjG;
         const 1286;
         const 18446744069414584350;
         const u3gpz_srtd;
 },
 section ""relreadonly" . u3gpA_srtd" {
     u3gpA_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3gjO() //  [R1]
         { []
         }
     {offset
       c3gjO: // global
           I64[Sp] = block_c3gjT_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3glx; else goto c3gjU;
       u3glx: // global
           call _c3gjT(R1) args: 0, res: 0, upd: 0;
       c3gjU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gjO_info" {
     block_c3gjO_info:
         const _c3gjO;
         const 1798;
         const 18446744069414584350;
         const u3gpA_srtd;
 },
 section ""relreadonly" . u3gpB_srtd" {
     u3gpB_srtd:
         const S3bQP_srt+688;
         const 46;
         const 35201551958017;
 },
 _c3gjT() //  [R1]
         { []
         }
     {offset
       c3gjT: // global
           I64[Sp] = block_c3gjY_info;
           _s3beH::I64 = I64[R1 + 7];
           R1 = lvl5_r2UqD_closure;
           I64[Sp + 32] = _s3beH::I64;
           if (R1 & 7 != 0) goto u3gly; else goto c3gjZ;
       u3gly: // global
           call _c3gjY(R1) args: 0, res: 0, upd: 0;
       c3gjZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gjT_info" {
     block_c3gjT_info:
         const _c3gjT;
         const 1798;
         const 18446744069414584350;
         const u3gpB_srtd;
 },
 _c3gjY() //  [R1]
         { []
         }
     {offset
       c3gjY: // global
           I64[Sp] = block_c3gk3_info;
           R2 = P64[Sp + 16];
           F32[Sp + 24] = F32[R1 + 7];
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gjY_info" {
     block_c3gjY_info:
         const _c3gjY;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gk3() //  [F1]
         { []
         }
     {offset
       c3gk3: // global
           _s3beC::F32 = F32[Sp + 40];
           _s3beH::I64 = I64[Sp + 32];
           _s3beJ::F32 = F32[Sp + 24];
           _c3gkh::F32 = F1;
           (_c3gkg::F32) = call MO_F32_Log(_c3gkh::F32);
           _s3beP::F32 = %MO_F_Quot_W32(%MO_F_Add_W32(_s3beC::F32,
                                                      %MO_F_Mul_W32(%MO_SF_Conv_W64_W32(_s3beH::I64),
                                                                    _s3beJ::F32)),
                                        _c3gkg::F32);
           _s3beQ::I64 = %MO_FS_Conv_W32_W64(_s3beP::F32);
           if (%MO_F_Lt_W32(%MO_SF_Conv_W64_W32(_s3beQ::I64),
                            _s3beP::F32)) goto c3gkG; else goto c3gkF;
       c3gkG: // global
           I64[Sp + 40] = _s3beQ::I64 + 1;
           Sp = Sp + 8;
           goto u3glA;
       c3gkF: // global
           I64[Sp + 40] = _s3beQ::I64;
           Sp = Sp + 8;
           goto u3glA;
       u3glA: // global
           call _c3giA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gk3_info" {
     block_c3gk3_info:
         const _c3gk3;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3giA() //  []
         { []
         }
     {offset
       c3giA: // global
           _s3bdc::P64 = P64[Sp + 8];
           _s3beo::I64 = I64[Sp + 32];
           if (%MO_S_Lt_W64(_s3beo::I64, 0)) goto c3giP; else goto c3gjf;
       c3giP: // global
           I64[Sp - 8] = block_c3giJ_info;
           R3 = -_s3beo::I64;
           R2 = _s3bdc::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
       c3gjf: // global
           I64[Sp - 8] = block_c3gja_info;
           R3 = _s3beo::I64;
           R2 = _s3bdc::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3giJ() //  [R1]
         { []
         }
     {offset
       c3giJ: // global
           I64[Sp] = block_c3giN_info;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3giJ_info" {
     block_c3giJ_info:
         const _c3giJ;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3giN() //  [R1]
         { []
         }
     {offset
       c3giN: // global
           I64[Sp] = block_c3giU_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3giN_info" {
     block_c3giN_info:
         const _c3giN;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3giU() //  [R1]
         { []
         }
     {offset
       c3giU: // global
           _s3beo::I64 = I64[Sp + 40];
           if (R1 == 1) goto c3gj5; else goto c3gj1;
       c3gj5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3gj8; else goto c3gj7;
       c3gj8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gj7: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3beo::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3gj1: // global
           I64[Sp + 40] = _s3beo::I64 + 1;
           Sp = Sp + 8;
           call _c3giA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3giU_info" {
     block_c3giU_info:
         const _c3giU;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gja() //  [R1]
         { []
         }
     {offset
       c3gja: // global
           I64[Sp] = block_c3gje_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gja_info" {
     block_c3gja_info:
         const _c3gja;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gje() //  [R1]
         { []
         }
     {offset
       c3gje: // global
           I64[Sp] = block_c3gjk_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gje_info" {
     block_c3gje_info:
         const _c3gje;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gjk() //  [R1]
         { []
         }
     {offset
       c3gjk: // global
           _s3beo::I64 = I64[Sp + 40];
           if (R1 == 1) goto c3gjv; else goto c3gjr;
       c3gjv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3gjy; else goto c3gjx;
       c3gjy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gjx: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3beo::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3gjr: // global
           I64[Sp + 40] = _s3beo::I64 + 1;
           Sp = Sp + 8;
           call _c3giA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gjk_info" {
     block_c3gjk_info:
         const _c3gjk;
         const 1798;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 sat_s3bfq_entry() //  [R1]
         { []
         }
     {offset
       c3gmu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gmv; else goto c3gmw;
       c3gmv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gmw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bfq_info" {
     sat_s3bfq_info:
         const sat_s3bfq_entry;
         const 1;
         const 21474836496;
         const S3bQP_srt+864;
 },
 sat_s3bfu_entry() //  [R1]
         { []
         }
     {offset
       c3gmO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gmP; else goto c3gmQ;
       c3gmP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gmQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bfu_info" {
     sat_s3bfu_info:
         const sat_s3bfu_entry;
         const 1;
         const 21474836496;
         const S3bQP_srt+864;
 },
 section ""relreadonly" . u3gpC_srtd" {
     u3gpC_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 gen_s3bf8_entry() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3gmU: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3gmV; else goto u3gnC;
       c3gmV: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3gnC: // global
           P64[Sp - 48] = R1;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call _c3glP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . gen_s3bf8_info" {
     gen_s3bf8_info:
         const gen_s3bf8_entry;
         const 1;
         const 18446744069414584329;
         const 21474836505;
         const u3gpC_srtd;
 },
 _c3glP() //  []
         { []
         }
     {offset
       c3glP: // global
           _s3bdc::P64 = P64[P64[Sp] + 3];
           I64[Sp - 16] = block_c3glS_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 24];
           P64[Sp - 8] = _s3bdc::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3gpD_srtd" {
     u3gpD_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3glS() //  [R1]
         { []
         }
     {offset
       c3glS: // global
           if (R1 == 1) goto c3gmT; else goto c3gmS;
       c3gmT: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3gmS: // global
           I64[Sp] = block_c3glW_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3glS_info" {
     block_c3glS_info:
         const _c3glS;
         const 7;
         const 18446744069414584350;
         const u3gpD_srtd;
 },
 section ""relreadonly" . u3gpE_srtd" {
     u3gpE_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3glW() //  [R1]
         { []
         }
     {offset
       c3glW: // global
           I64[Sp] = block_c3gm0_info;
           R3 = P64[Sp + 40];
           R2 = R1;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3glW_info" {
     block_c3glW_info:
         const _c3glW;
         const 519;
         const 18446744069414584350;
         const u3gpE_srtd;
 },
 section ""relreadonly" . u3gpF_srtd" {
     u3gpF_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3gm0() //  [R1, R2]
         { []
         }
     {offset
       c3gm0: // global
           I64[Sp] = block_c3gm2_info;
           R3 = P64[Sp + 8];
           _s3bfi::P64 = R2;
           R2 = P64[Sp + 48];
           P64[Sp + 32] = _s3bfi::P64;
           P64[Sp + 48] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gm0_info" {
     block_c3gm0_info:
         const _c3gm0;
         const 519;
         const 18446744069414584350;
         const u3gpF_srtd;
 },
 section ""relreadonly" . u3gpG_srtd" {
     u3gpG_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3gm2() //  [R1]
         { []
         }
     {offset
       c3gm2: // global
           I64[Sp - 8] = block_c3gm6_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gm2_info" {
     block_c3gm2_info:
         const _c3gm2;
         const 7;
         const 18446744069414584350;
         const u3gpG_srtd;
 },
 section ""relreadonly" . u3gpH_srtd" {
     u3gpH_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3gm6() //  [R1]
         { []
         }
     {offset
       c3gm6: // global
           I64[Sp] = block_c3gma_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gm6_info" {
     block_c3gm6_info:
         const _c3gm6;
         const 8;
         const 18446744069414584350;
         const u3gpH_srtd;
 },
 section ""relreadonly" . u3gpI_srtd" {
     u3gpI_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3gma() //  [R1]
         { []
         }
     {offset
       c3gma: // global
           I64[Sp] = block_c3gme_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 64];
           I64[Sp + 64] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gma_info" {
     block_c3gma_info:
         const _c3gma;
         const 8;
         const 18446744069414584350;
         const u3gpI_srtd;
 },
 section ""relreadonly" . u3gpJ_srtd" {
     u3gpJ_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3gme() //  [R1]
         { []
         }
     {offset
       c3gme: // global
           I64[Sp] = block_c3gmi_info;
           R3 = R1;
           R2 = P64[Sp + 40];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gme_info" {
     block_c3gme_info:
         const _c3gme;
         const 8328;
         const 18446744069414584350;
         const u3gpJ_srtd;
 },
 section ""relreadonly" . u3gpK_srtd" {
     u3gpK_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3gmi() //  [R1]
         { []
         }
     {offset
       c3gmi: // global
           _s3bf9::P64 = P64[Sp + 32];
           _s3bfh::P64 = P64[Sp + 56];
           _s3bfi::P64 = P64[Sp + 40];
           _s3bfl::I64 = I64[Sp + 64];
           if (R1 == 1) goto c3gnd; else goto c3gn5;
       c3gnd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3gng; else goto c3gnf;
       c3gng: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3gnf: // global
           if (_s3bfl::I64 == 1) goto c3gnk; else goto c3gnj;
       c3gnk: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_c3gmC_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = _s3bfi::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c3gnj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bfh::P64;
           P64[Hp] = _s3bf9::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3gn5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3gn8; else goto c3gn7;
       c3gn8: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3gn7: // global
           if (_s3bfl::I64 == 1) goto c3gnc; else goto c3gna;
       c3gnc: // global
           I64[Hp - 40] = sat_s3bfq_info;
           P64[Hp - 24] = _s3bfh::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s3bf9::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3gna: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s3bfh::P64;
           P64[Hp - 24] = _s3bf9::P64;
           _c3gmo::P64 = Hp - 38;
           Hp = Hp - 24;
           P64[Sp + 32] = _c3gmo::P64;
           P64[Sp + 40] = _s3bfi::P64;
           P64[Sp + 48] = P64[Sp + 48];
           P64[Sp + 56] = P64[Sp + 8];
           P64[Sp + 64] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c3glP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gmi_info" {
     block_c3gmi_info:
         const _c3gmi;
         const 8200;
         const 18446744069414584350;
         const u3gpK_srtd;
 },
 _c3gmC() //  [R1]
         { []
         }
     {offset
       c3gmC: // global
           I64[Sp] = block_c3gmG_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gmC_info" {
     block_c3gmC_info:
         const _c3gmC;
         const 1157;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3gmG() //  [R1]
         { []
         }
     {offset
       c3gmG: // global
           _s3bf9::P64 = P64[Sp + 8];
           _s3bfh::P64 = P64[Sp + 32];
           if (R1 == 1) goto c3gnv; else goto c3gno;
       c3gnv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3gny; else goto c3gnx;
       c3gny: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3gnx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bfh::P64;
           P64[Hp] = _s3bf9::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3gno: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3gnr; else goto c3gnq;
       c3gnr: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3gnq: // global
           I64[Hp - 40] = sat_s3bfu_info;
           P64[Hp - 24] = _s3bfh::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s3bf9::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gmG_info" {
     block_c3gmG_info:
         const _c3gmG;
         const 1413;
         const 21474836510;
         const S3bQP_srt+864;
 },
 section ""relreadonly" . u3gpL_srtd" {
     u3gpL_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613941700891508737;
 },
 sat_s3bfS_entry() //  [R1]
         { []
         }
     {offset
       c3gnG: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3gnH; else goto c3gnI;
       c3gnH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gnI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c3glI_info;
           _s3bdc::P64 = P64[R1 + 16];
           _s3bdB::P64 = P64[R1 + 24];
           _s3be3::P64 = P64[R1 + 32];
           _s3be9::P64 = P64[R1 + 40];
           _s3bef::P64 = P64[R1 + 48];
           R1 = P64[R1 + 56];
           P64[Sp - 56] = _s3bdc::P64;
           P64[Sp - 48] = _s3bdB::P64;
           P64[Sp - 40] = _s3be3::P64;
           P64[Sp - 32] = _s3be9::P64;
           P64[Sp - 24] = _s3bef::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u3goY; else goto c3glJ;
       u3goY: // global
           call _c3glI(R1) args: 0, res: 0, upd: 0;
       c3glJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bfS_info" {
     sat_s3bfS_info:
         const sat_s3bfS_entry;
         const 6;
         const 18446744069414584335;
         const u3gpL_srtd;
 },
 section ""relreadonly" . u3gpM_srtd" {
     u3gpM_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c3glI() //  [R1]
         { []
         }
     {offset
       c3glI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3gnL; else goto c3gnK;
       c3gnL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3gnK: // global
           _s3bf7::I64 = I64[R1 + 7];
           I64[Hp - 8] = gen_s3bf8_info;
           P64[Hp] = P64[Sp + 8];
           _s3bdB::P64 = P64[Sp + 16];
           _c3glN::P64 = Hp - 3;
           if (%MO_S_Lt_W64(_s3bf7::I64, 0)) goto c3goj; else goto c3goN;
       c3goj: // global
           I64[Sp - 8] = block_c3gnP_info;
           R1 = _s3bdB::P64;
           I64[Sp] = _s3bf7::I64;
           P64[Sp + 16] = _c3glN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3goW; else goto c3gnQ;
       u3goW: // global
           call _c3gnP(R1) args: 0, res: 0, upd: 0;
       c3gnQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3goN: // global
           I64[Sp - 8] = block_c3gov_info;
           R1 = _s3bdB::P64;
           I64[Sp] = _s3bf7::I64;
           P64[Sp + 16] = _c3glN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3goX; else goto c3gow;
       u3goX: // global
           call _c3gov(R1) args: 0, res: 0, upd: 0;
       c3gow: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3glI_info" {
     block_c3glI_info:
         const _c3glI;
         const 5;
         const 18446744069414584350;
         const u3gpM_srtd;
 },
 section ""relreadonly" . u3gpN_srtd" {
     u3gpN_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c3gnP() //  [R1]
         { []
         }
     {offset
       c3gnP: // global
           _s3bfD::I64 = -I64[Sp + 8];
           I64[Sp + 8] = block_c3gnX_info;
           R3 = _s3bfD::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gnP_info" {
     block_c3gnP_info:
         const _c3gnP;
         const 70;
         const 18446744069414584350;
         const u3gpN_srtd;
 },
 section ""relreadonly" . u3gpO_srtd" {
     u3gpO_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3gnX() //  [R1]
         { []
         }
     {offset
       c3gnX: // global
           I64[Sp] = block_c3go1_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gnX_info" {
     block_c3gnX_info:
         const _c3gnX;
         const 5;
         const 18446744069414584350;
         const u3gpO_srtd;
 },
 section ""relreadonly" . u3gpP_srtd" {
     u3gpP_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3go1() //  [R1]
         { []
         }
     {offset
       c3go1: // global
           I64[Sp] = block_c3go5_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3go1_info" {
     block_c3go1_info:
         const _c3go1;
         const 5;
         const 18446744069414584350;
         const u3gpP_srtd;
 },
 section ""relreadonly" . u3gpQ_srtd" {
     u3gpQ_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3go5() //  [R1]
         { []
         }
     {offset
       c3go5: // global
           _s3bfC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3go9_info;
           R3 = _s3bfC::P64;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3go5_info" {
     block_c3go5_info:
         const _c3go5;
         const 5;
         const 18446744069414584350;
         const u3gpQ_srtd;
 },
 section ""relreadonly" . u3gpR_srtd" {
     u3gpR_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3go9() //  [R1]
         { []
         }
     {offset
       c3go9: // global
           _s3bfG::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c3god_info;
           R6 = _s3bfG::P64;
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call gen_s3bf8_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3go9_info" {
     block_c3go9_info:
         const _c3go9;
         const 4;
         const 18446744069414584350;
         const u3gpR_srtd;
 },
 _c3god() //  [R1]
         { []
         }
     {offset
       c3god: // global
           I64[Sp] = block_c3goh_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3god_info" {
     block_c3god_info:
         const _c3god;
         const 0;
         const 30;
 },
 _c3goh() //  [R1]
         { []
         }
     {offset
       c3goh: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3goh_info" {
     block_c3goh_info:
         const _c3goh;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3gpS_srtd" {
     u3gpS_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613941700891508737;
 },
 _c3gov() //  [R1]
         { []
         }
     {offset
       c3gov: // global
           _s3bf7::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3goA_info;
           R3 = _s3bf7::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gov_info" {
     block_c3gov_info:
         const _c3gov;
         const 70;
         const 18446744069414584350;
         const u3gpS_srtd;
 },
 section ""relreadonly" . u3gpT_srtd" {
     u3gpT_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3goA() //  [R1]
         { []
         }
     {offset
       c3goA: // global
           I64[Sp] = block_c3goE_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3goA_info" {
     block_c3goA_info:
         const _c3goA;
         const 5;
         const 18446744069414584350;
         const u3gpT_srtd;
 },
 section ""relreadonly" . u3gpU_srtd" {
     u3gpU_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611689901077823489;
 },
 _c3goE() //  [R1]
         { []
         }
     {offset
       c3goE: // global
           _s3bef::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c3goI_info;
           R6 = P64[Sp + 8];
           R5 = _s3bef::P64;
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call gen_s3bf8_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3goE_info" {
     block_c3goE_info:
         const _c3goE;
         const 261;
         const 18446744069414584350;
         const u3gpU_srtd;
 },
 _c3goI() //  [R1]
         { []
         }
     {offset
       c3goI: // global
           I64[Sp] = block_c3goM_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3goI_info" {
     block_c3goI_info:
         const _c3goI;
         const 0;
         const 30;
 },
 _c3goM() //  [R1]
         { []
         }
     {offset
       c3goM: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3goM_info" {
     block_c3goM_info:
         const _c3goM;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3gpV_srtd" {
     u3gpV_srtd:
         const S3bQP_srt+552;
         const 69;
         const 4613941700925194241;
         const 29;
 },
 GHC.Float.$w$sfloatToDigits_entry() //  [R2, D1]
         { []
         }
     {offset
       c3gp2: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c3gp6; else goto c3gp5;
       c3gp6: // global
           HpAlloc = 312;
           R1 = GHC.Float.$w$sfloatToDigits_closure;
           P64[Sp - 16] = R2;
           F64[Sp - 8] = D1;
           Sp = Sp - 16;
           call (stg_gc_fun)(R1) args: 24, res: 0, upd: 8;
       c3gp5: // global
           if (%MO_F_Eq_W64(D1, 0.0 :: W64)) goto c3gp1; else goto c3gp0;
       c3gp1: // global
           Hp = Hp - 312;
           R2 = GHC.Float.minExpt_closure+1;
           R1 = lvl3_r2UpB_closure+2;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3gp0: // global
           I64[Hp - 304] = ds_s3bdf_info;
           F64[Hp - 288] = D1;
           I64[Hp - 280] = ds1_s3bdk_info;
           _c3gea::P64 = Hp - 304;
           P64[Hp - 264] = _c3gea::P64;
           I64[Hp - 256] = stg_sel_0_upd_info;
           _c3ges::P64 = Hp - 280;
           P64[Hp - 240] = _c3ges::P64;
           I64[Hp - 232] = ds2_s3bdB_info;
           P64[Hp - 216] = _c3ges::P64;
           _c3gfr::P64 = Hp - 256;
           P64[Hp - 208] = _c3gfr::P64;
           I64[Hp - 200] = stg_sel_1_upd_info;
           _c3gfs::P64 = Hp - 232;
           P64[Hp - 184] = _c3gfs::P64;
           I64[Hp - 176] = stg_sel_0_upd_info;
           P64[Hp - 160] = _c3gfs::P64;
           I64[Hp - 152] = stg_sel_2_upd_info;
           P64[Hp - 136] = _c3gfs::P64;
           I64[Hp - 128] = k_s3bel_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = _c3gea::P64;
           P64[Hp - 96] = _c3ges::P64;
           P64[Hp - 88] = _c3gfr::P64;
           _c3gih::P64 = Hp - 200;
           P64[Hp - 80] = _c3gih::P64;
           _c3gii::P64 = Hp - 176;
           P64[Hp - 72] = _c3gii::P64;
           _c3gij::P64 = Hp - 152;
           P64[Hp - 64] = _c3gij::P64;
           I64[Hp - 56] = sat_s3bfS_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = _c3gfs::P64;
           P64[Hp - 24] = _c3gih::P64;
           P64[Hp - 16] = _c3gii::P64;
           P64[Hp - 8] = _c3gij::P64;
           _c3gik::P64 = Hp - 128;
           P64[Hp] = _c3gik::P64;
           R2 = _c3gik::P64;
           R1 = Hp - 56;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sfloatToDigits_info" {
     GHC.Float.$w$sfloatToDigits_info:
         const GHC.Float.$w$sfloatToDigits_entry;
         const 0;
         const 18446744069414584334;
         const 8589934592;
         const u3gpV_srtd;
         const 130;
         const GHC.Float.$w$sfloatToDigits_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:54.865846597 UTC

[section ""data" . GHC.Float.$wfloatToDigits_closure" {
     GHC.Float.$wfloatToDigits_closure:
         const GHC.Float.$wfloatToDigits_info;
         const 0;
 },
 sat_s3bg1_entry() //  [R1]
         { []
         }
     {offset
       c3gyh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3gyi; else goto c3gyj;
       c3gyi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gyj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gyf_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bg1_info" {
     sat_s3bg1_info:
         const sat_s3bg1_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1104;
 },
 _c3gyf() //  [R1]
         { []
         }
     {offset
       c3gyf: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gyf_info" {
     block_c3gyf_info:
         const _c3gyf;
         const 0;
         const 4294967326;
         const S3bQP_srt+1104;
 },
 b_s3bg3_entry() //  [R1]
         { []
         }
     {offset
       c3gyD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3gyE; else goto c3gyF;
       c3gyE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gyF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.floatRadix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . b_s3bg3_info" {
     b_s3bg3_info:
         const b_s3bg3_entry;
         const 2;
         const 18;
 },
 p_s3bg4_entry() //  [R1]
         { []
         }
     {offset
       c3gyK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3gyL; else goto c3gyM;
       c3gyL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gyM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.floatDigits_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . p_s3bg4_info" {
     p_s3bg4_info:
         const p_s3bg4_entry;
         const 2;
         const 18;
 },
 minExp_s3bg5_entry() //  [R1]
         { []
         }
     {offset
       c3gyT: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3gza; else goto c3gzb;
       c3gza: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gzb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3gyR_info;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Float.floatRange_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . minExp_s3bg5_info" {
     minExp_s3bg5_info:
         const minExp_s3bg5_entry;
         const 3;
         const 15;
 },
 _c3gyR() //  [R1]
         { []
         }
     {offset
       c3gyR: // global
           I64[Sp] = block_c3gyW_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u3gzh; else goto c3gyX;
       u3gzh: // global
           call _c3gyW(R1) args: 0, res: 0, upd: 0;
       c3gyX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gyR_info" {
     block_c3gyR_info:
         const _c3gyR;
         const 1;
         const 30;
 },
 _c3gyW() //  [R1]
         { []
         }
     {offset
       c3gyW: // global
           I64[Sp] = block_c3gz1_info;
           _s3bga::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3bga::I64;
           if (R1 & 7 != 0) goto u3gzi; else goto c3gz2;
       u3gzi: // global
           call _c3gz1(R1) args: 0, res: 0, upd: 0;
       c3gz2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gyW_info" {
     block_c3gyW_info:
         const _c3gyW;
         const 1;
         const 30;
 },
 _c3gz1() //  [R1]
         { []
         }
     {offset
       c3gz1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3gzg; else goto c3gzf;
       c3gzg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3gzf: // global
           _s3bgd::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bgd::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gz1_info" {
     block_c3gz1_info:
         const _c3gz1;
         const 65;
         const 30;
 },
 ds_s3bge_entry() //  [R1]
         { []
         }
     {offset
       c3gzn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3gzo; else goto c3gzp;
       c3gzo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gzp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.decodeFloat_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s3bge_info" {
     ds_s3bge_info:
         const ds_s3bge_entry;
         const 2;
         const 18;
 },
 sat_s3bgr_entry() //  [R1]
         { []
         }
     {offset
       c3gA0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3gA1; else goto c3gA2;
       c3gA1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gA2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3gzY_info;
           R3 = I64[R1 + 32];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bgr_info" {
     sat_s3bgr_info:
         const sat_s3bgr_entry;
         const 4294967298;
         const 2305851809601683471;
         const S3bQP_srt+872;
 },
 _c3gzY() //  [R1]
         { []
         }
     {offset
       c3gzY: // global
           I64[Sp - 8] = block_c3gA5_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gzY_info" {
     block_c3gzY_info:
         const _c3gzY;
         const 1;
         const 2305843013508661278;
         const S3bQP_srt+872;
 },
 _c3gA5() //  [R1]
         { []
         }
     {offset
       c3gA5: // global
           if (R1 == 1) goto c3gAg; else goto c3gAc;
       c3gAg: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c3gAc: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gA5_info" {
     block_c3gA5_info:
         const _c3gA5;
         const 2;
         const 4294967326;
         const S3bQP_srt+872;
 },
 ds1_s3bgf_entry() //  [R1]
         { []
         }
     {offset
       c3gAh: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3gAi; else goto c3gAj;
       c3gAi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gAj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3gzu_info;
           _s3bg3::P64 = P64[R1 + 16];
           _s3bge::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3bg3::P64;
           P64[Sp - 24] = _s3bge::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3gAv; else goto c3gzv;
       u3gAv: // global
           call _c3gzu(R1) args: 0, res: 0, upd: 0;
       c3gzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3bgf_info" {
     ds1_s3bgf_info:
         const ds1_s3bgf_entry;
         const 3;
         const 2305851809601683471;
         const S3bQP_srt+872;
 },
 _c3gzu() //  [R1]
         { []
         }
     {offset
       c3gzu: // global
           I64[Sp] = block_c3gzz_info;
           _s3bgh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3bgh::I64;
           if (R1 & 7 != 0) goto u3gAt; else goto c3gzA;
       u3gAt: // global
           call _c3gzz(R1) args: 0, res: 0, upd: 0;
       c3gzA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gzu_info" {
     block_c3gzu_info:
         const _c3gzu;
         const 2;
         const 2305851809601683486;
         const S3bQP_srt+872;
 },
 _c3gzz() //  [R1]
         { []
         }
     {offset
       c3gzz: // global
           I64[Sp - 16] = block_c3gzE_info;
           _s3bgi::P64 = R1;
           _s3bgj::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s3bgj::P64;
           P64[Sp] = _s3bgi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3gAu; else goto c3gzF;
       u3gAu: // global
           call _c3gzE(R1) args: 0, res: 0, upd: 0;
       c3gzF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gzz_info" {
     block_c3gzz_info:
         const _c3gzz;
         const 130;
         const 2305851809601683486;
         const S3bQP_srt+872;
 },
 _c3gzE() //  [R1]
         { []
         }
     {offset
       c3gzE: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3gAo; else goto c3gAn;
       c3gAo: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3gAn: // global
           _s3bgm::I64 = I64[R1 + 7];
           _s3bgn::I64 = I64[Sp + 32] - _s3bgm::I64;
           if (%MO_S_Le_W64(_s3bgn::I64, 0)) goto c3gAq; else goto c3gAs;
       c3gAq: // global
           Hp = Hp - 80;
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3gAs: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = _s3bgm::I64 + _s3bgn::I64;
           I64[Hp - 56] = sat_s3bgr_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = _s3bgn::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gzE_info" {
     block_c3gzE_info:
         const _c3gzE;
         const 516;
         const 2305851809601683486;
         const S3bQP_srt+872;
 },
 section ""relreadonly" . u3gLB_srtd" {
     u3gLB_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s3bgL_entry() //  [R1]
         { []
         }
     {offset
       c3gB4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gB7; else goto c3gB8;
       c3gB7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gB8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gB6_info;
           R3 = -I64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bgL_info" {
     sat_s3bgL_info:
         const sat_s3bgL_entry;
         const 4294967297;
         const 18446744069414584339;
         const u3gLB_srtd;
 },
 section ""relreadonly" . u3gLC_srtd" {
     u3gLC_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gB6() //  [R1]
         { []
         }
     {offset
       c3gB6: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gB6_info" {
     block_c3gB6_info:
         const _c3gB6;
         const 0;
         const 18446744069414584350;
         const u3gLC_srtd;
 },
 section ""relreadonly" . u3gLD_srtd" {
     u3gLD_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bgI_entry() //  [R1]
         { []
         }
     {offset
       c3gBh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gBi; else goto c3gBj;
       c3gBi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gBj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bgI_info" {
     sat_s3bgI_info:
         const sat_s3bgI_entry;
         const 1;
         const 18446744069414584336;
         const u3gLD_srtd;
 },
 section ""relreadonly" . u3gLE_srtd" {
     u3gLE_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613937818241073153;
 },
 sat_s3bgX_entry() //  [R1]
         { []
         }
     {offset
       c3gBL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gBR; else goto c3gBS;
       c3gBR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gBS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gBQ_info;
           R3 = -I64[R1 + 24] + 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bgX_info" {
     sat_s3bgX_info:
         const sat_s3bgX_entry;
         const 4294967297;
         const 18446744069414584339;
         const u3gLE_srtd;
 },
 section ""relreadonly" . u3gLF_srtd" {
     u3gLF_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gBQ() //  [R1]
         { []
         }
     {offset
       c3gBQ: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gBQ_info" {
     block_c3gBQ_info:
         const _c3gBQ;
         const 0;
         const 18446744069414584350;
         const u3gLF_srtd;
 },
 section ""relreadonly" . u3gLG_srtd" {
     u3gLG_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bgT_entry() //  [R1]
         { []
         }
     {offset
       c3gC3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gC4; else goto c3gC5;
       c3gC4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gC5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gC1_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bgT_info" {
     sat_s3bgT_info:
         const sat_s3bgT_entry;
         const 2;
         const 18446744069414584338;
         const u3gLG_srtd;
 },
 section ""relreadonly" . u3gLH_srtd" {
     u3gLH_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gC1() //  [R1]
         { []
         }
     {offset
       c3gC1: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gC1_info" {
     block_c3gC1_info:
         const _c3gC1;
         const 0;
         const 18446744069414584350;
         const u3gLH_srtd;
 },
 be_s3bh0_entry() //  [R1]
         { []
         }
     {offset
       c3gCj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gCk; else goto c3gCl;
       c3gCk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gCl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.$wexpt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . be_s3bh0_info" {
     be_s3bh0_info:
         const be_s3bh0_entry;
         const 4294967297;
         const 4294967315;
         const S3bQP_srt+960;
 },
 section ""relreadonly" . u3gLI_srtd" {
     u3gLI_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bh5_entry() //  [R1]
         { []
         }
     {offset
       c3gCD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gCE; else goto c3gCF;
       c3gCE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gCF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gCB_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bh5_info" {
     sat_s3bh5_info:
         const sat_s3bh5_entry;
         const 2;
         const 18446744069414584338;
         const u3gLI_srtd;
 },
 section ""relreadonly" . u3gLJ_srtd" {
     u3gLJ_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gCB() //  [R1]
         { []
         }
     {offset
       c3gCB: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gCB_info" {
     block_c3gCB_info:
         const _c3gCB;
         const 0;
         const 18446744069414584350;
         const u3gLJ_srtd;
 },
 sat_s3bha_entry() //  [R1]
         { []
         }
     {offset
       c3gCP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gCQ; else goto c3gCR;
       c3gCQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gCR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bha_info" {
     sat_s3bha_info:
         const sat_s3bha_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+1048;
 },
 section ""relreadonly" . u3gLK_srtd" {
     u3gLK_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bh9_entry() //  [R1]
         { []
         }
     {offset
       c3gCW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gCX; else goto c3gCY;
       c3gCX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gCY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Float.$fRealFloatDouble5_closure;
           Sp = Sp - 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bh9_info" {
     sat_s3bh9_info:
         const sat_s3bh9_entry;
         const 1;
         const 18446744069414584336;
         const u3gLK_srtd;
 },
 section ""relreadonly" . u3gLL_srtd" {
     u3gLL_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 sat_s3bh8_entry() //  [R1]
         { []
         }
     {offset
       c3gD5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3gD9; else goto c3gDa;
       c3gD9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gDa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3gD3_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bh8_info" {
     sat_s3bh8_info:
         const sat_s3bh8_entry;
         const 3;
         const 18446744069414584335;
         const u3gLL_srtd;
 },
 section ""relreadonly" . u3gLM_srtd" {
     u3gLM_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gD3() //  [R1]
         { []
         }
     {offset
       c3gD3: // global
           _s3bg3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3gD8_info;
           R3 = _s3bg3::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gD3_info" {
     block_c3gD3_info:
         const _c3gD3;
         const 1;
         const 18446744069414584350;
         const u3gLM_srtd;
 },
 section ""relreadonly" . u3gLN_srtd" {
     u3gLN_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gD8() //  [R1]
         { []
         }
     {offset
       c3gD8: // global
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gD8_info" {
     block_c3gD8_info:
         const _c3gD8;
         const 0;
         const 18446744069414584350;
         const u3gLN_srtd;
 },
 section ""relreadonly" . u3gLO_srtd" {
     u3gLO_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 ds2_s3bgy_entry() //  [R1]
         { []
         }
     {offset
       c3gDg: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3gDh; else goto c3gDi;
       c3gDh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gDi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c3gAB_info;
           _s3bg3::P64 = P64[R1 + 16];
           _s3bg4::P64 = P64[R1 + 24];
           _s3bg5::P64 = P64[R1 + 32];
           _s3bgu::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _s3bg3::P64;
           P64[Sp - 40] = _s3bg4::P64;
           P64[Sp - 32] = _s3bg5::P64;
           P64[Sp - 24] = _s3bgu::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u3gE2; else goto c3gAC;
       u3gE2: // global
           call _c3gAB(R1) args: 0, res: 0, upd: 0;
       c3gAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s3bgy_info" {
     ds2_s3bgy_info:
         const ds2_s3bgy_entry;
         const 5;
         const 18446744069414584335;
         const u3gLO_srtd;
 },
 section ""relreadonly" . u3gLP_srtd" {
     u3gLP_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gAB() //  [R1]
         { []
         }
     {offset
       c3gAB: // global
           I64[Sp] = block_c3gAG_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3gDW; else goto c3gAH;
       u3gDW: // global
           call _c3gAG(R1) args: 0, res: 0, upd: 0;
       c3gAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gAB_info" {
     block_c3gAB_info:
         const _c3gAB;
         const 4;
         const 18446744069414584350;
         const u3gLP_srtd;
 },
 section ""relreadonly" . u3gLQ_srtd" {
     u3gLQ_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gAG() //  [R1]
         { []
         }
     {offset
       c3gAG: // global
           _s3bgD::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3bgD::I64, 0)) goto c3gDm; else goto c3gDG;
       c3gDm: // global
           I64[Sp] = block_c3gAO_info;
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s3bgD::I64;
           if (R1 & 7 != 0) goto u3gDX; else goto c3gAP;
       u3gDX: // global
           call _c3gAO(R1) args: 0, res: 0, upd: 0;
       c3gAP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3gDG: // global
           I64[Sp] = block_c3gCa_info;
           R1 = P64[Sp + 16];
           I64[Sp + 24] = _s3bgD::I64;
           if (R1 & 7 != 0) goto u3gDY; else goto c3gCb;
       u3gDY: // global
           call _c3gCa(R1) args: 0, res: 0, upd: 0;
       c3gCb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gAG_info" {
     block_c3gAG_info:
         const _c3gAG;
         const 4;
         const 18446744069414584350;
         const u3gLQ_srtd;
 },
 section ""relreadonly" . u3gLR_srtd" {
     u3gLR_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gAO() //  [R1]
         { []
         }
     {offset
       c3gAO: // global
           if (%MO_S_Le_W64(I64[Sp + 24],
                            I64[R1 + 7])) goto u3gDZ; else goto c3gDu;
       u3gDZ: // global
           call _c3gAW() args: 0, res: 0, upd: 0;
       c3gDu: // global
           I64[Sp] = block_c3gBo_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u3gE0; else goto c3gBp;
       u3gE0: // global
           call _c3gBo(R1) args: 0, res: 0, upd: 0;
       c3gBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gAO_info" {
     block_c3gAO_info:
         const _c3gAO;
         const 260;
         const 18446744069414584350;
         const u3gLR_srtd;
 },
 section ""relreadonly" . u3gLS_srtd" {
     u3gLS_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gBo() //  [R1]
         { []
         }
     {offset
       c3gBo: // global
           I64[Sp] = block_c3gBw_info;
           R3 = I64[R1 + 7] - 1;
           R2 = P64[Sp + 8];
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gBo_info" {
     block_c3gBo_info:
         const _c3gBo;
         const 388;
         const 18446744069414584350;
         const u3gLS_srtd;
 },
 section ""relreadonly" . u3gLT_srtd" {
     u3gLT_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gBw() //  [R1]
         { []
         }
     {offset
       c3gBw: // global
           I64[Sp] = block_c3gBA_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gBw_info" {
     block_c3gBw_info:
         const _c3gBw;
         const 388;
         const 18446744069414584350;
         const u3gLT_srtd;
 },
 section ""relreadonly" . u3gLU_srtd" {
     u3gLU_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gBA() //  [R1]
         { []
         }
     {offset
       c3gBA: // global
           if (R1 == 1) goto c3gDC; else goto u3gE1;
       c3gDC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3gDF; else goto c3gDE;
       c3gDF: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gDE: // global
           I64[Hp - 96] = sat_s3bgX_info;
           _s3bg3::P64 = P64[Sp + 8];
           P64[Hp - 80] = _s3bg3::P64;
           I64[Hp - 72] = I64[Sp + 24];
           I64[Hp - 64] = sat_s3bgT_info;
           P64[Hp - 48] = _s3bg3::P64;
           P64[Hp - 40] = P64[Sp + 32];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = Hp - 96;
           P64[Hp - 8] = _s3bg3::P64;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       u3gE1: // global
           call _c3gAW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gBA_info" {
     block_c3gBA_info:
         const _c3gBA;
         const 388;
         const 18446744069414584350;
         const u3gLU_srtd;
 },
 section ""relreadonly" . u3gLV_srtd" {
     u3gLV_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613938367996887041;
 },
 _c3gAW() //  []
         { []
         }
     {offset
       c3gAW: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3gDr; else goto c3gDq;
       c3gDr: // global
           HpAlloc = 96;
           I64[Sp] = block_c3gAW_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c3gDq: // global
           I64[Hp - 88] = sat_s3bgL_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = I64[Sp + 24];
           I64[Hp - 56] = sat_s3bgI_info;
           P64[Hp - 40] = P64[Sp + 32];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = GHC.Float.$fRealDouble1_closure;
           P64[Hp] = GHC.Float.$fRealDouble1_closure;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gAW_info" {
     block_c3gAW_info:
         const _c3gAW;
         const 388;
         const 18446744069414584350;
         const u3gLV_srtd;
 },
 section ""relreadonly" . u3gLW_srtd" {
     u3gLW_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613937818241073153;
 },
 _c3gCa() //  [R1]
         { []
         }
     {offset
       c3gCa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3gDJ; else goto c3gDI;
       c3gDJ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3gDI: // global
           _s3bgZ::I64 = I64[R1 + 7];
           I64[Hp - 24] = be_s3bh0_info;
           _s3bg3::P64 = P64[Sp + 8];
           P64[Hp - 8] = _s3bg3::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3gCp_info;
           R3 = _s3bgZ::I64 - 1;
           R2 = _s3bg3::P64;
           P64[Sp + 24] = Hp - 24;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gCa_info" {
     block_c3gCa_info:
         const _c3gCa;
         const 388;
         const 18446744069414584350;
         const u3gLW_srtd;
 },
 section ""relreadonly" . u3gLX_srtd" {
     u3gLX_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gCp() //  [R1]
         { []
         }
     {offset
       c3gCp: // global
           I64[Sp] = block_c3gCt_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gCp_info" {
     block_c3gCp_info:
         const _c3gCp;
         const 132;
         const 18446744069414584350;
         const u3gLX_srtd;
 },
 section ""relreadonly" . u3gLY_srtd" {
     u3gLY_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4611686018427387905;
 },
 _c3gCt() //  [R1]
         { []
         }
     {offset
       c3gCt: // global
           _c3gCf::P64 = P64[Sp + 24];
           _s3bgu::P64 = P64[Sp + 32];
           if (R1 == 1) goto c3gDS; else goto c3gDN;
       c3gDS: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3gDV; else goto c3gDU;
       c3gDV: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gDU: // global
           I64[Hp - 128] = sat_s3bha_info;
           _s3bg3::P64 = P64[Sp + 8];
           P64[Hp - 112] = _s3bg3::P64;
           P64[Hp - 104] = _c3gCf::P64;
           I64[Hp - 96] = sat_s3bh9_info;
           P64[Hp - 80] = _s3bg3::P64;
           I64[Hp - 72] = sat_s3bh8_info;
           P64[Hp - 56] = _s3bg3::P64;
           P64[Hp - 48] = _s3bgu::P64;
           P64[Hp - 40] = _c3gCf::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 72;
           P64[Hp - 16] = Hp - 96;
           P64[Hp - 8] = Hp - 128;
           P64[Hp] = _c3gCf::P64;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3gDN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3gDQ; else goto c3gDP;
       c3gDQ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gDP: // global
           I64[Hp - 64] = sat_s3bh5_info;
           P64[Hp - 48] = _s3bgu::P64;
           P64[Hp - 40] = _c3gCf::P64;
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = Hp - 64;
           P64[Hp - 16] = GHC.Float.$fRealFloatDouble5_closure;
           P64[Hp - 8] = _c3gCf::P64;
           P64[Hp] = _c3gCf::P64;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gCt_info" {
     block_c3gCt_info:
         const _c3gCt;
         const 132;
         const 18446744069414584350;
         const u3gLY_srtd;
 },
 section ""relreadonly" . u3gLZ_srtd" {
     u3gLZ_srtd:
         const S3bQP_srt+552;
         const 63;
         const 4613940567053697025;
 },
 k_s3bht_entry() //  [R1]
         { []
         }
     {offset
       c3gEc: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3gEg; else goto c3gEh;
       c3gEg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gEh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 96] = block_c3gEa_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           _s3bg3::P64 = P64[R1 + 24];
           R2 = _s3bg3::P64;
           P64[Sp - 88] = P64[R1 + 16];
           P64[Sp - 80] = _s3bg3::P64;
           P64[Sp - 72] = P64[R1 + 32];
           P64[Sp - 64] = P64[R1 + 40];
           P64[Sp - 56] = P64[R1 + 48];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 96;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . k_s3bht_info" {
     k_s3bht_info:
         const k_s3bht_entry;
         const 9;
         const 18446744069414584335;
         const u3gLZ_srtd;
 },
 section ""relreadonly" . u3gM0_srtd" {
     u3gM0_srtd:
         const S3bQP_srt+752;
         const 38;
         const 137506144257;
 },
 _c3gEa() //  [R1]
         { []
         }
     {offset
       c3gEa: // global
           I64[Sp] = block_c3gEf_info;
           R3 = P64[Sp + 72];
           R2 = P64[Sp + 64];
           I64[Sp + 72] = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gEa_info" {
     block_c3gEa_info:
         const _c3gEa;
         const 9;
         const 18446744069414584350;
         const u3gM0_srtd;
 },
 section ""relreadonly" . u3gM1_srtd" {
     u3gM1_srtd:
         const S3bQP_srt+752;
         const 38;
         const 137506144257;
 },
 _c3gEf() //  [R1]
         { []
         }
     {offset
       c3gEf: // global
           if (I64[Sp + 72] == 1) goto c3gGG; else goto u3gHC;
       c3gGG: // global
           I64[Sp] = block_c3gGF_info;
           R3 = GHC.Float.expts4_closure;
           R2 = P64[Sp + 8];
           P64[Sp + 72] = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
       u3gHC: // global
           P64[Sp + 72] = R1;
           Sp = Sp + 8;
           call _s3bhI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gEf_info" {
     block_c3gEf_info:
         const _c3gEf;
         const 24585;
         const 18446744069414584350;
         const u3gM1_srtd;
 },
 _c3gGF() //  [R1]
         { []
         }
     {offset
       c3gGF: // global
           if (R1 == 1) goto c3gH1; else goto u3gHD;
       c3gH1: // global
           I64[Sp] = block_c3gGP_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u3gHR; else goto c3gGQ;
       u3gHR: // global
           call _c3gGP(R1) args: 0, res: 0, upd: 0;
       c3gGQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       u3gHD: // global
           Sp = Sp + 8;
           call _s3bhI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gGF_info" {
     block_c3gGF_info:
         const _c3gGF;
         const 8201;
         const 36046410679844894;
         const S3bQP_srt+864;
 },
 _c3gGP() //  [R1]
         { []
         }
     {offset
       c3gGP: // global
           I64[Sp] = block_c3gGU_info;
           _s3bi6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 64] = _s3bi6::I64;
           if (R1 & 7 != 0) goto u3gHT; else goto c3gGV;
       u3gHT: // global
           call _c3gGU(R1) args: 0, res: 0, upd: 0;
       c3gGV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gGP_info" {
     block_c3gGP_info:
         const _c3gGP;
         const 11657;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gGU() //  [R1]
         { []
         }
     {offset
       c3gGU: // global
           I64[Sp] = block_c3gGZ_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3gHU; else goto c3gH4;
       u3gHU: // global
           call _c3gGZ(R1) args: 0, res: 0, upd: 0;
       c3gH4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gGU_info" {
     block_c3gGU_info:
         const _c3gGU;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gGZ() //  [R1]
         { []
         }
     {offset
       c3gGZ: // global
           _s3bic::I64 = I64[Sp + 64] + (I64[R1 + 7] - 1);
           if (%MO_S_Lt_W64(_s3bic::I64, 0)) goto c3gHi; else goto c3gHj;
       c3gHi: // global
           I64[Sp + 64] = %MO_S_Quot_W64(_s3bic::I64 * 8651, 28738);
           Sp = Sp + 8;
           goto u3gHW;
       c3gHj: // global
           I64[Sp + 64] = %MO_S_Quot_W64(_s3bic::I64 * 8651, 28738) + 1;
           Sp = Sp + 8;
           goto u3gHW;
       u3gHW: // global
           call _c3gEq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gGZ_info" {
     block_c3gGZ_info:
         const _c3gGZ;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _s3bhI() //  []
         { []
         }
     {offset
       s3bhI: // global
           I64[Sp - 8] = block_c3gFu_info;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3gFu() //  [R1]
         { []
         }
     {offset
       c3gFu: // global
           I64[Sp] = block_c3gFy_info;
           R2 = R1;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gFu_info" {
     block_c3gFu_info:
         const _c3gFu;
         const 11017;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gFy() //  [F1]
         { []
         }
     {offset
       c3gFy: // global
           _s3bgf::P64 = P64[Sp + 40];
           _c3gFD::F32 = F1;
           (_c3gFC::F32) = call MO_F32_Log(_c3gFD::F32);
           I64[Sp] = block_c3gFG_info;
           R1 = _s3bgf::P64;
           F32[Sp + 64] = _c3gFC::F32;
           if (R1 & 7 != 0) goto u3gHN; else goto c3gFH;
       u3gHN: // global
           call _c3gFG(R1) args: 0, res: 0, upd: 0;
       c3gFH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gFy_info" {
     block_c3gFy_info:
         const _c3gFy;
         const 11017;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gFG() //  [R1]
         { []
         }
     {offset
       c3gFG: // global
           I64[Sp] = block_c3gFL_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3gHO; else goto c3gFM;
       u3gHO: // global
           call _c3gFL(R1) args: 0, res: 0, upd: 0;
       c3gFM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gFG_info" {
     block_c3gFG_info:
         const _c3gFG;
         const 12041;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gFL() //  [R1]
         { []
         }
     {offset
       c3gFL: // global
           I64[Sp] = block_c3gFQ_info;
           R2 = P64[Sp + 16];
           I64[Sp + 48] = I64[R1 + 7];
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gFL_info" {
     block_c3gFL_info:
         const _c3gFL;
         const 12041;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gFQ() //  [F1]
         { []
         }
     {offset
       c3gFQ: // global
           _s3bfU::P64 = P64[Sp + 8];
           _c3gFV::F32 = F1;
           (_c3gFU::F32) = call MO_F32_Log(_c3gFV::F32);
           I64[Sp] = block_c3gFY_info;
           R2 = _s3bfU::P64;
           F32[Sp + 40] = _c3gFU::F32;
           call GHC.Integer.Type.floatFromInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gFQ_info" {
     block_c3gFQ_info:
         const _c3gFQ;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gFY() //  [F1]
         { []
         }
     {offset
       c3gFY: // global
           _s3bhL::F32 = F32[Sp + 64];
           _s3bhQ::I64 = I64[Sp + 48];
           _s3bhS::F32 = F32[Sp + 40];
           _c3gGa::F32 = F1;
           (_c3gG9::F32) = call MO_F32_Log(_c3gGa::F32);
           _s3bhY::F32 = %MO_F_Quot_W32(%MO_F_Add_W32(_s3bhL::F32,
                                                      %MO_F_Mul_W32(%MO_SF_Conv_W64_W32(_s3bhQ::I64),
                                                                    _s3bhS::F32)),
                                        _c3gG9::F32);
           _s3bhZ::I64 = %MO_FS_Conv_W32_W64(_s3bhY::F32);
           if (%MO_F_Lt_W32(%MO_SF_Conv_W64_W32(_s3bhZ::I64),
                            _s3bhY::F32)) goto c3gGz; else goto c3gGy;
       c3gGz: // global
           I64[Sp + 64] = _s3bhZ::I64 + 1;
           Sp = Sp + 8;
           goto u3gHQ;
       c3gGy: // global
           I64[Sp + 64] = _s3bhZ::I64;
           Sp = Sp + 8;
           goto u3gHQ;
       u3gHQ: // global
           call _c3gEq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gFY_info" {
     block_c3gFY_info:
         const _c3gFY;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gEq() //  []
         { []
         }
     {offset
       c3gEq: // global
           _s3bfU::P64 = P64[Sp];
           _s3bhx::I64 = I64[Sp + 56];
           if (%MO_S_Lt_W64(_s3bhx::I64, 0)) goto c3gEF; else goto c3gF5;
       c3gEF: // global
           I64[Sp - 8] = block_c3gEz_info;
           R3 = -_s3bhx::I64;
           R2 = _s3bfU::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
       c3gF5: // global
           I64[Sp - 8] = block_c3gF0_info;
           R3 = _s3bhx::I64;
           R2 = _s3bfU::P64;
           Sp = Sp - 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c3gEz() //  [R1]
         { []
         }
     {offset
       c3gEz: // global
           I64[Sp] = block_c3gED_info;
           R3 = P64[Sp + 72];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gEz_info" {
     block_c3gEz_info:
         const _c3gEz;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gED() //  [R1]
         { []
         }
     {offset
       c3gED: // global
           I64[Sp] = block_c3gEK_info;
           R3 = P64[Sp + 56];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gED_info" {
     block_c3gED_info:
         const _c3gED;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gEK() //  [R1]
         { []
         }
     {offset
       c3gEK: // global
           _s3bhx::I64 = I64[Sp + 64];
           if (R1 == 1) goto c3gEV; else goto c3gER;
       c3gEV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3gEY; else goto c3gEX;
       c3gEY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gEX: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bhx::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3gER: // global
           I64[Sp + 64] = _s3bhx::I64 + 1;
           Sp = Sp + 8;
           call _c3gEq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gEK_info" {
     block_c3gEK_info:
         const _c3gEK;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gF0() //  [R1]
         { []
         }
     {offset
       c3gF0: // global
           I64[Sp] = block_c3gF4_info;
           R3 = P64[Sp + 56];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gF0_info" {
     block_c3gF0_info:
         const _c3gF0;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gF4() //  [R1]
         { []
         }
     {offset
       c3gF4: // global
           I64[Sp] = block_c3gFa_info;
           R3 = R1;
           R2 = P64[Sp + 72];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gF4_info" {
     block_c3gF4_info:
         const _c3gF4;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 _c3gFa() //  [R1]
         { []
         }
     {offset
       c3gFa: // global
           _s3bhx::I64 = I64[Sp + 64];
           if (R1 == 1) goto c3gFl; else goto c3gFh;
       c3gFl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3gFo; else goto c3gFn;
       c3gFo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3gFn: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bhx::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3gFh: // global
           I64[Sp + 64] = _s3bhx::I64 + 1;
           Sp = Sp + 8;
           call _c3gEq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gFa_info" {
     block_c3gFa_info:
         const _c3gFa;
         const 12169;
         const 8800387989534;
         const S3bQP_srt+960;
 },
 sat_s3biE_entry() //  [R1]
         { []
         }
     {offset
       c3gIN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gIO; else goto c3gIP;
       c3gIO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gIP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3biE_info" {
     sat_s3biE_info:
         const sat_s3biE_entry;
         const 1;
         const 21474836496;
         const S3bQP_srt+864;
 },
 sat_s3biI_entry() //  [R1]
         { []
         }
     {offset
       c3gJ7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gJ8; else goto c3gJ9;
       c3gJ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gJ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Float.$fRealDouble1_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3biI_info" {
     sat_s3biI_info:
         const sat_s3biI_entry;
         const 1;
         const 21474836496;
         const S3bQP_srt+864;
 },
 section ""relreadonly" . u3gM2_srtd" {
     u3gM2_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 gen_s3bim_entry() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3gJd: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3gJe; else goto u3gJV;
       c3gJe: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3gJV: // global
           P64[Sp - 48] = R1;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call _c3gI8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . gen_s3bim_info" {
     gen_s3bim_info:
         const gen_s3bim_entry;
         const 1;
         const 18446744069414584329;
         const 21474836505;
         const u3gM2_srtd;
 },
 _c3gI8() //  []
         { []
         }
     {offset
       c3gI8: // global
           _s3bfU::P64 = P64[P64[Sp] + 3];
           I64[Sp - 16] = block_c3gIb_info;
           R3 = GHC.Float.rationalToDouble5_closure;
           R2 = P64[Sp + 24];
           P64[Sp - 8] = _s3bfU::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u3gM3_srtd" {
     u3gM3_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gIb() //  [R1]
         { []
         }
     {offset
       c3gIb: // global
           if (R1 == 1) goto c3gJc; else goto c3gJb;
       c3gJc: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c3gJb: // global
           I64[Sp] = block_c3gIf_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIb_info" {
     block_c3gIb_info:
         const _c3gIb;
         const 7;
         const 18446744069414584350;
         const u3gM3_srtd;
 },
 section ""relreadonly" . u3gM4_srtd" {
     u3gM4_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gIf() //  [R1]
         { []
         }
     {offset
       c3gIf: // global
           I64[Sp] = block_c3gIj_info;
           R3 = P64[Sp + 40];
           R2 = R1;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIf_info" {
     block_c3gIf_info:
         const _c3gIf;
         const 519;
         const 18446744069414584350;
         const u3gM4_srtd;
 },
 section ""relreadonly" . u3gM5_srtd" {
     u3gM5_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gIj() //  [R1, R2]
         { []
         }
     {offset
       c3gIj: // global
           I64[Sp] = block_c3gIl_info;
           R3 = P64[Sp + 8];
           _s3biw::P64 = R2;
           R2 = P64[Sp + 48];
           P64[Sp + 32] = _s3biw::P64;
           P64[Sp + 48] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIj_info" {
     block_c3gIj_info:
         const _c3gIj;
         const 519;
         const 18446744069414584350;
         const u3gM5_srtd;
 },
 section ""relreadonly" . u3gM6_srtd" {
     u3gM6_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gIl() //  [R1]
         { []
         }
     {offset
       c3gIl: // global
           I64[Sp - 8] = block_c3gIp_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIl_info" {
     block_c3gIl_info:
         const _c3gIl;
         const 7;
         const 18446744069414584350;
         const u3gM6_srtd;
 },
 section ""relreadonly" . u3gM7_srtd" {
     u3gM7_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gIp() //  [R1]
         { []
         }
     {offset
       c3gIp: // global
           I64[Sp] = block_c3gIt_info;
           R3 = P64[Sp + 48];
           R2 = R1;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIp_info" {
     block_c3gIp_info:
         const _c3gIp;
         const 8;
         const 18446744069414584350;
         const u3gM7_srtd;
 },
 section ""relreadonly" . u3gM8_srtd" {
     u3gM8_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gIt() //  [R1]
         { []
         }
     {offset
       c3gIt: // global
           I64[Sp] = block_c3gIx_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 64];
           I64[Sp + 64] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIt_info" {
     block_c3gIt_info:
         const _c3gIt;
         const 8;
         const 18446744069414584350;
         const u3gM8_srtd;
 },
 section ""relreadonly" . u3gM9_srtd" {
     u3gM9_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gIx() //  [R1]
         { []
         }
     {offset
       c3gIx: // global
           I64[Sp] = block_c3gIB_info;
           R3 = R1;
           R2 = P64[Sp + 40];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIx_info" {
     block_c3gIx_info:
         const _c3gIx;
         const 8328;
         const 18446744069414584350;
         const u3gM9_srtd;
 },
 section ""relreadonly" . u3gMa_srtd" {
     u3gMa_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gIB() //  [R1]
         { []
         }
     {offset
       c3gIB: // global
           _s3bin::P64 = P64[Sp + 32];
           _s3biv::P64 = P64[Sp + 56];
           _s3biw::P64 = P64[Sp + 40];
           _s3biz::I64 = I64[Sp + 64];
           if (R1 == 1) goto c3gJw; else goto c3gJo;
       c3gJw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3gJz; else goto c3gJy;
       c3gJz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3gJy: // global
           if (_s3biz::I64 == 1) goto c3gJD; else goto c3gJC;
       c3gJD: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_c3gIV_info;
           R3 = GHC.Float.$fRealFloatDouble5_closure;
           R2 = _s3biw::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c3gJC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3biv::P64;
           P64[Hp] = _s3bin::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3gJo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3gJr; else goto c3gJq;
       c3gJr: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3gJq: // global
           if (_s3biz::I64 == 1) goto c3gJv; else goto c3gJt;
       c3gJv: // global
           I64[Hp - 40] = sat_s3biE_info;
           P64[Hp - 24] = _s3biv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s3bin::P64;
           R1 = Hp - 14;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3gJt: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s3biv::P64;
           P64[Hp - 24] = _s3bin::P64;
           _c3gIH::P64 = Hp - 38;
           Hp = Hp - 24;
           P64[Sp + 32] = _c3gIH::P64;
           P64[Sp + 40] = _s3biw::P64;
           P64[Sp + 48] = P64[Sp + 48];
           P64[Sp + 56] = P64[Sp + 8];
           P64[Sp + 64] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c3gI8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gIB_info" {
     block_c3gIB_info:
         const _c3gIB;
         const 8200;
         const 18446744069414584350;
         const u3gMa_srtd;
 },
 _c3gIV() //  [R1]
         { []
         }
     {offset
       c3gIV: // global
           I64[Sp] = block_c3gIZ_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIV_info" {
     block_c3gIV_info:
         const _c3gIV;
         const 1157;
         const 21474836510;
         const S3bQP_srt+864;
 },
 _c3gIZ() //  [R1]
         { []
         }
     {offset
       c3gIZ: // global
           _s3bin::P64 = P64[Sp + 8];
           _s3biv::P64 = P64[Sp + 32];
           if (R1 == 1) goto c3gJO; else goto c3gJH;
       c3gJO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3gJR; else goto c3gJQ;
       c3gJR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3gJQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3biv::P64;
           P64[Hp] = _s3bin::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3gJH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3gJK; else goto c3gJJ;
       c3gJK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3gJJ: // global
           I64[Hp - 40] = sat_s3biI_info;
           P64[Hp - 24] = _s3biv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = _s3bin::P64;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gIZ_info" {
     block_c3gIZ_info:
         const _c3gIZ;
         const 1413;
         const 21474836510;
         const S3bQP_srt+864;
 },
 section ""relreadonly" . u3gMb_srtd" {
     u3gMb_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666531770369;
         const 32;
 },
 sat_s3bj6_entry() //  [R1]
         { []
         }
     {offset
       c3gJZ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3gK0; else goto c3gK1;
       c3gK0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gK1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c3gI1_info;
           _s3bfU::P64 = P64[R1 + 16];
           _s3bgy::P64 = P64[R1 + 24];
           _s3bhb::P64 = P64[R1 + 32];
           _s3bhh::P64 = P64[R1 + 40];
           _s3bhn::P64 = P64[R1 + 48];
           R1 = P64[R1 + 56];
           P64[Sp - 56] = _s3bfU::P64;
           P64[Sp - 48] = _s3bgy::P64;
           P64[Sp - 40] = _s3bhb::P64;
           P64[Sp - 32] = _s3bhh::P64;
           P64[Sp - 24] = _s3bhn::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u3gLh; else goto c3gI2;
       u3gLh: // global
           call _c3gI1(R1) args: 0, res: 0, upd: 0;
       c3gI2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bj6_info" {
     sat_s3bj6_info:
         const sat_s3bj6_entry;
         const 6;
         const 18446744069414584335;
         const u3gMb_srtd;
 },
 section ""relreadonly" . u3gMc_srtd" {
     u3gMc_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666531770369;
         const 32;
 },
 _c3gI1() //  [R1]
         { []
         }
     {offset
       c3gI1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3gK4; else goto c3gK3;
       c3gK4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3gK3: // global
           _s3bil::I64 = I64[R1 + 7];
           I64[Hp - 8] = gen_s3bim_info;
           P64[Hp] = P64[Sp + 8];
           _s3bgy::P64 = P64[Sp + 16];
           _c3gI6::P64 = Hp - 3;
           if (%MO_S_Lt_W64(_s3bil::I64, 0)) goto c3gKC; else goto c3gL6;
       c3gKC: // global
           I64[Sp - 8] = block_c3gK8_info;
           R1 = _s3bgy::P64;
           I64[Sp] = _s3bil::I64;
           P64[Sp + 16] = _c3gI6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3gLf; else goto c3gK9;
       u3gLf: // global
           call _c3gK8(R1) args: 0, res: 0, upd: 0;
       c3gK9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3gL6: // global
           I64[Sp - 8] = block_c3gKO_info;
           R1 = _s3bgy::P64;
           I64[Sp] = _s3bil::I64;
           P64[Sp + 16] = _c3gI6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3gLg; else goto c3gKP;
       u3gLg: // global
           call _c3gKO(R1) args: 0, res: 0, upd: 0;
       c3gKP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gI1_info" {
     block_c3gI1_info:
         const _c3gI1;
         const 5;
         const 18446744069414584350;
         const u3gMc_srtd;
 },
 section ""relreadonly" . u3gMd_srtd" {
     u3gMd_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666531770369;
         const 32;
 },
 _c3gK8() //  [R1]
         { []
         }
     {offset
       c3gK8: // global
           _s3biR::I64 = -I64[Sp + 8];
           I64[Sp + 8] = block_c3gKg_info;
           R3 = _s3biR::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gK8_info" {
     block_c3gK8_info:
         const _c3gK8;
         const 70;
         const 18446744069414584350;
         const u3gMd_srtd;
 },
 section ""relreadonly" . u3gMe_srtd" {
     u3gMe_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gKg() //  [R1]
         { []
         }
     {offset
       c3gKg: // global
           I64[Sp] = block_c3gKk_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKg_info" {
     block_c3gKg_info:
         const _c3gKg;
         const 5;
         const 18446744069414584350;
         const u3gMe_srtd;
 },
 section ""relreadonly" . u3gMf_srtd" {
     u3gMf_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gKk() //  [R1]
         { []
         }
     {offset
       c3gKk: // global
           I64[Sp] = block_c3gKo_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKk_info" {
     block_c3gKk_info:
         const _c3gKk;
         const 5;
         const 18446744069414584350;
         const u3gMf_srtd;
 },
 section ""relreadonly" . u3gMg_srtd" {
     u3gMg_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gKo() //  [R1]
         { []
         }
     {offset
       c3gKo: // global
           _s3biQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3gKs_info;
           R3 = _s3biQ::P64;
           R2 = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKo_info" {
     block_c3gKo_info:
         const _c3gKo;
         const 5;
         const 18446744069414584350;
         const u3gMg_srtd;
 },
 section ""relreadonly" . u3gMh_srtd" {
     u3gMh_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gKs() //  [R1]
         { []
         }
     {offset
       c3gKs: // global
           _s3biU::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c3gKw_info;
           R6 = _s3biU::P64;
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call gen_s3bim_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKs_info" {
     block_c3gKs_info:
         const _c3gKs;
         const 4;
         const 18446744069414584350;
         const u3gMh_srtd;
 },
 _c3gKw() //  [R1]
         { []
         }
     {offset
       c3gKw: // global
           I64[Sp] = block_c3gKA_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKw_info" {
     block_c3gKw_info:
         const _c3gKw;
         const 0;
         const 30;
 },
 _c3gKA() //  [R1]
         { []
         }
     {offset
       c3gKA: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKA_info" {
     block_c3gKA_info:
         const _c3gKA;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3gMi_srtd" {
     u3gMi_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666531770369;
         const 32;
 },
 _c3gKO() //  [R1]
         { []
         }
     {offset
       c3gKO: // global
           _s3bil::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c3gKT_info;
           R3 = _s3bil::I64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Float.$wexpt_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKO_info" {
     block_c3gKO_info:
         const _c3gKO;
         const 70;
         const 18446744069414584350;
         const u3gMi_srtd;
 },
 section ""relreadonly" . u3gMj_srtd" {
     u3gMj_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gKT() //  [R1]
         { []
         }
     {offset
       c3gKT: // global
           I64[Sp] = block_c3gKX_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKT_info" {
     block_c3gKT_info:
         const _c3gKT;
         const 5;
         const 18446744069414584350;
         const u3gMj_srtd;
 },
 section ""relreadonly" . u3gMk_srtd" {
     u3gMk_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4611689866718085121;
         const 32;
 },
 _c3gKX() //  [R1]
         { []
         }
     {offset
       c3gKX: // global
           _s3bhn::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c3gL1_info;
           R6 = P64[Sp + 8];
           R5 = _s3bhn::P64;
           R4 = R1;
           R3 = P64[Sp + 32];
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call gen_s3bim_entry(R6,
                                R5,
                                R4,
                                R3,
                                R2,
                                R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gKX_info" {
     block_c3gKX_info:
         const _c3gKX;
         const 261;
         const 18446744069414584350;
         const u3gMk_srtd;
 },
 _c3gL1() //  [R1]
         { []
         }
     {offset
       c3gL1: // global
           I64[Sp] = block_c3gL5_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gL1_info" {
     block_c3gL1_info:
         const _c3gL1;
         const 0;
         const 30;
 },
 _c3gL5() //  [R1]
         { []
         }
     {offset
       c3gL5: // global
           R3 = R1;
           R2 = lvl8_r2UqG_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gL5_info" {
     block_c3gL5_info:
         const _c3gL5;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3gMl_srtd" {
     u3gMl_srtd:
         const S3bQP_srt+552;
         const 71;
         const 4613941666565324801;
         const 96;
 },
 GHC.Float.$wfloatToDigits_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3gLi: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3gLj; else goto c3gLk;
       c3gLj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$wfloatToDigits_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3gLk: // global
           I64[Sp - 32] = block_c3gy3_info;
           _s3bfT::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s3bfT::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$wfloatToDigits_info" {
     GHC.Float.$wfloatToDigits_info:
         const GHC.Float.$wfloatToDigits_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3gMl_srtd;
 },
 section ""relreadonly" . u3gMm_srtd" {
     u3gMm_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c3gy3() //  [R1]
         { []
         }
     {offset
       c3gy3: // global
           I64[Sp] = block_c3gy7_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gy3_info" {
     block_c3gy3_info:
         const _c3gy3;
         const 3;
         const 18446744069414584350;
         const u3gMm_srtd;
 },
 section ""relreadonly" . u3gMn_srtd" {
     u3gMn_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c3gy7() //  [R1]
         { []
         }
     {offset
       c3gy7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3gLo; else goto c3gLn;
       c3gLo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3gLn: // global
           I64[Hp - 16] = sat_s3bg1_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c3gyn_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gy7_info" {
     block_c3gy7_info:
         const _c3gy7;
         const 3;
         const 18446744069414584350;
         const u3gMn_srtd;
 },
 section ""relreadonly" . u3gMo_srtd" {
     u3gMo_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c3gyn() //  [R1]
         { []
         }
     {offset
       c3gyn: // global
           I64[Sp] = block_c3gyr_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gyn_info" {
     block_c3gyn_info:
         const _c3gyn;
         const 4;
         const 18446744069414584350;
         const u3gMo_srtd;
 },
 section ""relreadonly" . u3gMp_srtd" {
     u3gMp_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c3gyr() //  [R1]
         { []
         }
     {offset
       c3gyr: // global
           _c3gyb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3gyv_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c3gyb::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gyr_info" {
     block_c3gyr_info:
         const _c3gyr;
         const 4;
         const 18446744069414584350;
         const u3gMp_srtd;
 },
 section ""relreadonly" . u3gMq_srtd" {
     u3gMq_srtd:
         const S3bQP_srt+552;
         const 70;
         const 4613941666565324801;
         const 32;
 },
 _c3gyv() //  [R1]
         { []
         }
     {offset
       c3gyv: // global
           if (R1 & 7 == 1) goto c3gLs; else goto c3gLz;
       c3gLs: // global
           Hp = Hp + 480;
           if (Hp > HpLim) (likely: False) goto c3gLv; else goto c3gLu;
       c3gLv: // global
           HpAlloc = 480;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3gLu: // global
           I64[Hp - 472] = b_s3bg3_info;
           _s3bfT::P64 = P64[Sp + 8];
           P64[Hp - 456] = _s3bfT::P64;
           _s3bfV::P64 = P64[Sp + 24];
           P64[Hp - 448] = _s3bfV::P64;
           I64[Hp - 440] = p_s3bg4_info;
           P64[Hp - 424] = _s3bfT::P64;
           P64[Hp - 416] = _s3bfV::P64;
           I64[Hp - 408] = minExp_s3bg5_info;
           P64[Hp - 392] = _s3bfT::P64;
           P64[Hp - 384] = _s3bfV::P64;
           _c3gyG::P64 = Hp - 440;
           P64[Hp - 376] = _c3gyG::P64;
           I64[Hp - 368] = ds_s3bge_info;
           P64[Hp - 352] = _s3bfT::P64;
           P64[Hp - 344] = _s3bfV::P64;
           I64[Hp - 336] = ds1_s3bgf_info;
           _c3gyz::P64 = Hp - 472;
           P64[Hp - 320] = _c3gyz::P64;
           _c3gyN::P64 = Hp - 408;
           P64[Hp - 312] = _c3gyN::P64;
           _c3gzj::P64 = Hp - 368;
           P64[Hp - 304] = _c3gzj::P64;
           I64[Hp - 296] = stg_sel_0_upd_info;
           _c3gzq::P64 = Hp - 336;
           P64[Hp - 280] = _c3gzq::P64;
           I64[Hp - 272] = ds2_s3bgy_info;
           P64[Hp - 256] = _c3gyz::P64;
           P64[Hp - 248] = _c3gyG::P64;
           P64[Hp - 240] = _c3gyN::P64;
           P64[Hp - 232] = _c3gzq::P64;
           _c3gAw::P64 = Hp - 296;
           P64[Hp - 224] = _c3gAw::P64;
           I64[Hp - 216] = stg_sel_1_upd_info;
           _c3gAx::P64 = Hp - 272;
           P64[Hp - 200] = _c3gAx::P64;
           I64[Hp - 192] = stg_sel_0_upd_info;
           P64[Hp - 176] = _c3gAx::P64;
           I64[Hp - 168] = stg_sel_2_upd_info;
           P64[Hp - 152] = _c3gAx::P64;
           I64[Hp - 144] = k_s3bht_info;
           _s3bfU::P64 = P64[Sp + 16];
           P64[Hp - 128] = _s3bfU::P64;
           P64[Hp - 120] = _c3gyz::P64;
           P64[Hp - 112] = _c3gyG::P64;
           P64[Hp - 104] = _c3gzj::P64;
           P64[Hp - 96] = _c3gzq::P64;
           P64[Hp - 88] = _c3gAw::P64;
           _c3gE3::P64 = Hp - 216;
           P64[Hp - 80] = _c3gE3::P64;
           _c3gE4::P64 = Hp - 192;
           P64[Hp - 72] = _c3gE4::P64;
           _c3gE5::P64 = Hp - 168;
           P64[Hp - 64] = _c3gE5::P64;
           I64[Hp - 56] = sat_s3bj6_info;
           P64[Hp - 40] = _s3bfU::P64;
           P64[Hp - 32] = _c3gAx::P64;
           P64[Hp - 24] = _c3gE3::P64;
           P64[Hp - 16] = _c3gE4::P64;
           P64[Hp - 8] = _c3gE5::P64;
           _c3gE6::P64 = Hp - 144;
           P64[Hp] = _c3gE6::P64;
           R2 = _c3gE6::P64;
           R1 = Hp - 56;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3gLz: // global
           R2 = GHC.Float.minExpt_closure+1;
           R1 = lvl3_r2UpB_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gyv_info" {
     block_c3gyv_info:
         const _c3gyv;
         const 3;
         const 18446744069414584350;
         const u3gMq_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.078018767 UTC

[section ""data" . GHC.Float.floatToDigits_closure" {
     GHC.Float.floatToDigits_closure:
         const GHC.Float.floatToDigits_info;
         const 0;
 },
 GHC.Float.floatToDigits_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3gWx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3gWy; else goto c3gWz;
       c3gWy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.floatToDigits_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3gWz: // global
           I64[Sp - 8] = block_c3gWu_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Float.$wfloatToDigits_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.floatToDigits_info" {
     GHC.Float.floatToDigits_info:
         const GHC.Float.floatToDigits_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3bQP_srt+1112;
 },
 _c3gWu() //  [R1, R2]
         { []
         }
     {offset
       c3gWu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3gWC; else goto c3gWB;
       c3gWC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3gWB: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gWu_info" {
     block_c3gWu_info:
         const _c3gWu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.082879054 UTC

[section ""data" . base_r2UqK_closure" {
     base_r2UqK_closure:
         const GHC.Types.I#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.08443801 UTC

[section ""cstring" . lvl12_r2UqL_bytes" {
     lvl12_r2UqL_bytes:
         I8[] [102,111,114,109,97,116,82,101,97,108,70,108,111,97,116,47,100,111,70,109,116,47,70,70,69,120,112,111,110,101,110,116,58,32,91,93]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.087726194 UTC

[section ""data" . lvl13_r2UqM_closure" {
     lvl13_r2UqM_closure:
         const lvl13_r2UqM_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r2UqM_entry() //  [R1]
         { []
         }
     {offset
       c3gWY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gWZ; else goto c3gX0;
       c3gWZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gX0: // global
           (_c3gWT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3gWT::I64 == 0) goto c3gWV; else goto c3gWU;
       c3gWV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3gWU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3gWT::I64;
           I64[Sp - 24] = block_c3gWW_info;
           R2 = lvl12_r2UqL_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_r2UqM_info" {
     lvl13_r2UqM_info:
         const lvl13_r2UqM_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+1128;
 },
 _c3gWW() //  [R1]
         { []
         }
     {offset
       c3gWW: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gWW_info" {
     block_c3gWW_info:
         const _c3gWW;
         const 0;
         const 4294967326;
         const S3bQP_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.092665653 UTC

[section ""data" . lvl14_r2UqN_closure" {
     lvl14_r2UqN_closure:
         const GHC.Types.C#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.094390936 UTC

[section ""cstring" . lvl15_r2UqO_bytes" {
     lvl15_r2UqO_bytes:
         I8[] [48,46,48,101,48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.096639677 UTC

[section ""data" . lvl16_r2UqP_closure" {
     lvl16_r2UqP_closure:
         const lvl16_r2UqP_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_r2UqP_entry() //  [R1]
         { []
         }
     {offset
       c3gXo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gXp; else goto c3gXq;
       c3gXp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gXq: // global
           (_c3gXl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3gXl::I64 == 0) goto c3gXn; else goto c3gXm;
       c3gXn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3gXm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3gXl::I64;
           R2 = lvl15_r2UqO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_r2UqP_info" {
     lvl16_r2UqP_info:
         const lvl16_r2UqP_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.100143331 UTC

[section ""cstring" . lvl17_r2UqQ_bytes" {
     lvl17_r2UqQ_bytes:
         I8[] [71,72,67,47,70,108,111,97,116,46,104,115,58,54,57,50,58,49,50,45,55,48,124,100,32,58,32,100,115,39]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.102969202 UTC

[section ""data" . lvl18_r2UqR_closure" {
     lvl18_r2UqR_closure:
         const lvl18_r2UqR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r2UqR_entry() //  [R1]
         { []
         }
     {offset
       c3gXG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gXH; else goto c3gXI;
       c3gXH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gXI: // global
           (_c3gXD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3gXD::I64 == 0) goto c3gXF; else goto c3gXE;
       c3gXF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3gXE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3gXD::I64;
           R2 = lvl17_r2UqQ_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_r2UqR_info" {
     lvl18_r2UqR_info:
         const lvl18_r2UqR_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.106516197 UTC

[section ""data" . lvl19_r2UqS_closure" {
     lvl19_r2UqS_closure:
         const GHC.Types.C#_con_info;
         const 101;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.108194593 UTC

[section ""data" . lvl20_r2UqT_closure" {
     lvl20_r2UqT_closure:
         const GHC.Types.C#_con_info;
         const 48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.109871836 UTC

[section ""cstring" . lvl21_r2UqU_bytes" {
     lvl21_r2UqU_bytes:
         I8[] [101,48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.111500617 UTC

[section ""cstring" . lvl22_r2UqV_bytes" {
     lvl22_r2UqV_bytes:
         I8[] [48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.114735846 UTC

[section ""data" . lvl23_r2UqW_closure" {
     lvl23_r2UqW_closure:
         const lvl23_r2UqW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r2UqW_entry() //  [R1]
         { []
         }
     {offset
       c3gY1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3gY2; else goto c3gY3;
       c3gY2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gY3: // global
           (_c3gXY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3gXY::I64 == 0) goto c3gY0; else goto c3gXZ;
       c3gY0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3gXZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3gXY::I64;
           R2 = lvl22_r2UqV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_r2UqW_info" {
     lvl23_r2UqW_info:
         const lvl23_r2UqW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.123379637 UTC

[section ""data" . $wf_r2UqX_closure" {
     $wf_r2UqX_closure:
         const $wf_r2UqX_info;
         const 0;
 },
 sat_s3bjt_entry() //  [R1]
         { []
         }
     {offset
       c3gYH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gYI; else goto c3gYJ;
       c3gYI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gYJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gYA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3gYQ; else goto c3gYB;
       u3gYQ: // global
           call _c3gYA(R1) args: 0, res: 0, upd: 0;
       c3gYB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bjt_info" {
     sat_s3bjt_info:
         const sat_s3bjt_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1144;
 },
 _c3gYA() //  [R1]
         { []
         }
     {offset
       c3gYA: // global
           if (R1 & 7 == 1) goto c3gYE; else goto c3gYF;
       c3gYE: // global
           R1 = lvl23_r2UqW_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3gYF: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gYA_info" {
     block_c3gYA_info:
         const _c3gYA;
         const 0;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 sat_s3bjA_entry() //  [R1]
         { []
         }
     {offset
       c3gZ4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gZ5; else goto c3gZ6;
       c3gZ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3gZ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3gYX_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3gZd; else goto c3gYY;
       u3gZd: // global
           call _c3gYX(R1) args: 0, res: 0, upd: 0;
       c3gYY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bjA_info" {
     sat_s3bjA_info:
         const sat_s3bjA_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1144;
 },
 _c3gYX() //  [R1]
         { []
         }
     {offset
       c3gYX: // global
           if (R1 & 7 == 1) goto c3gZ1; else goto c3gZ2;
       c3gZ1: // global
           R1 = lvl23_r2UqW_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3gZ2: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3gYX_info" {
     block_c3gYX_info:
         const _c3gYX;
         const 0;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 $wf_r2UqX_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3gZh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3gZi; else goto u3gZI;
       c3gZi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wf_r2UqX_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3gZI: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c3gYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wf_r2UqX_info" {
     $wf_r2UqX_info:
         const $wf_r2UqX_entry;
         const 0;
         const 12884901902;
         const 12884901907;
         const S3bQP_srt+1144;
 },
 _c3gYd() //  []
         { []
         }
     {offset
       c3gYd: // global
           _s3bjh::I64 = I64[Sp];
           if (_s3bjh::I64 != 0) goto c3gZf; else goto c3gZg;
       c3gZf: // global
           I64[Sp] = block_c3gYi_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3bjh::I64;
           if (R1 & 7 != 0) goto u3gZL; else goto c3gYj;
       u3gZL: // global
           call _c3gYi(R1) args: 0, res: 0, upd: 0;
       c3gYj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3gZg: // global
           _s3bjf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3gYs_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s3bjf::P64;
           Sp = Sp + 8;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3gYi() //  [R1]
         { []
         }
     {offset
       c3gYi: // global
           _s3bjf::P64 = P64[Sp + 8];
           _s3bjh::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c3gZl; else goto c3gZp;
       c3gZl: // global
           Hp = Hp + 24;
           _s3bji::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3gZs; else goto c3gZn;
       c3gZn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = _s3bjf::P64;
           I64[Sp] = _s3bjh::I64 - 1;
           P64[Sp + 8] = Hp - 14;
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           goto u3gZN;
       c3gZp: // global
           Hp = Hp + 24;
           _s3bji::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3gZs; else goto c3gZr;
       c3gZs: // global
           HpAlloc = 24;
           R1 = _s3bji::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3gZr: // global
           _s3bjl::P64 = P64[_s3bji::P64 + 6];
           _s3bjm::P64 = P64[_s3bji::P64 + 14];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bjl::P64;
           P64[Hp] = _s3bjf::P64;
           I64[Sp] = _s3bjh::I64 - 1;
           P64[Sp + 8] = Hp - 14;
           P64[Sp + 16] = _s3bjm::P64;
           goto u3gZN;
       u3gZN: // global
           call _c3gYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3gYi_info" {
     block_c3gYi_info:
         const _c3gYi;
         const 130;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3gYs() //  [R1]
         { []
         }
     {offset
       c3gYs: // global
           _s3bjg::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3gZv; else goto c3gZA;
       c3gZv: // global
           Hp = Hp + 48;
           _s3bjp::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3gZD; else goto c3gZx;
       c3gZx: // global
           I64[Hp - 40] = sat_s3bjt_info;
           P64[Hp - 24] = _s3bjg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3gZA: // global
           Hp = Hp + 48;
           _s3bjp::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3gZD; else goto c3gZC;
       c3gZD: // global
           HpAlloc = 48;
           R1 = _s3bjp::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3gZC: // global
           I64[Hp - 40] = sat_s3bjA_info;
           P64[Hp - 24] = _s3bjg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = _s3bjp::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3gYs_info" {
     block_c3gYs_info:
         const _c3gYs;
         const 1;
         const 4294967326;
         const S3bQP_srt+1144;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.139223881 UTC

[section ""cstring" . lvl24_r2UqY_bytes" {
     lvl24_r2UqY_bytes:
         I8[] [71,72,67,47,70,108,111,97,116,46,104,115,58,55,50,48,58,49,49,45,54,52,124,100,32,58,32,100,115,39]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.141968987 UTC

[section ""data" . lvl25_r2UqZ_closure" {
     lvl25_r2UqZ_closure:
         const lvl25_r2UqZ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r2UqZ_entry() //  [R1]
         { []
         }
     {offset
       c3h12: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3h13; else goto c3h14;
       c3h13: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h14: // global
           (_c3h0Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3h0Z::I64 == 0) goto c3h11; else goto c3h10;
       c3h11: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3h10: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3h0Z::I64;
           R2 = lvl24_r2UqY_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_r2UqZ_info" {
     lvl25_r2UqZ_info:
         const lvl25_r2UqZ_entry;
         const 0;
         const 4294967317;
         const S3bQP_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.14559405 UTC

[section ""cstring" . lvl26_r2Ur0_bytes" {
     lvl26_r2Ur0_bytes:
         I8[] [73,110,102,105,110,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.147883043 UTC

[section ""data" . lvl27_r2Ur1_closure" {
     lvl27_r2Ur1_closure:
         const lvl27_r2Ur1_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r2Ur1_entry() //  [R1]
         { []
         }
     {offset
       c3h1k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3h1l; else goto c3h1m;
       c3h1l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h1m: // global
           (_c3h1h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3h1h::I64 == 0) goto c3h1j; else goto c3h1i;
       c3h1j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3h1i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3h1h::I64;
           R2 = lvl26_r2Ur0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_r2Ur1_info" {
     lvl27_r2Ur1_info:
         const lvl27_r2Ur1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.152349022 UTC

[section ""cstring" . lvl28_r2Ur2_bytes" {
     lvl28_r2Ur2_bytes:
         I8[] [45,73,110,102,105,110,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.155481299 UTC

[section ""data" . lvl29_r2Ur3_closure" {
     lvl29_r2Ur3_closure:
         const lvl29_r2Ur3_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r2Ur3_entry() //  [R1]
         { []
         }
     {offset
       c3h1C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3h1D; else goto c3h1E;
       c3h1D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h1E: // global
           (_c3h1z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3h1z::I64 == 0) goto c3h1B; else goto c3h1A;
       c3h1B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3h1A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3h1z::I64;
           R2 = lvl28_r2Ur2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl29_r2Ur3_info" {
     lvl29_r2Ur3_info:
         const lvl29_r2Ur3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.161118492 UTC

[section ""cstring" . lvl30_r2Ur4_bytes" {
     lvl30_r2Ur4_bytes:
         I8[] [78,97,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.163473275 UTC

[section ""data" . lvl31_r2Ur5_closure" {
     lvl31_r2Ur5_closure:
         const lvl31_r2Ur5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r2Ur5_entry() //  [R1]
         { []
         }
     {offset
       c3h1U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3h1V; else goto c3h1W;
       c3h1V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h1W: // global
           (_c3h1R::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3h1R::I64 == 0) goto c3h1T; else goto c3h1S;
       c3h1T: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3h1S: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3h1R::I64;
           R2 = lvl30_r2Ur4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_r2Ur5_info" {
     lvl31_r2Ur5_info:
         const lvl31_r2Ur5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.167007453 UTC

[section ""cstring" . lvl32_r2Ur6_bytes" {
     lvl32_r2Ur6_bytes:
         I8[] [46,48,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.168670522 UTC

[section ""cstring" . lvl33_r2Ur7_bytes" {
     lvl33_r2Ur7_bytes:
         I8[] [101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.171107587 UTC

[section ""data" . lvl34_r2Ur8_closure" {
     lvl34_r2Ur8_closure:
         const lvl34_r2Ur8_info;
         const 0;
         const 0;
         const 0;
 },
 lvl34_r2Ur8_entry() //  [R1]
         { []
         }
     {offset
       c3h2d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3h2e; else goto c3h2f;
       c3h2e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h2f: // global
           (_c3h2a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3h2a::I64 == 0) goto c3h2c; else goto c3h2b;
       c3h2c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3h2b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3h2a::I64;
           R2 = lvl21_r2UqU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl34_r2Ur8_info" {
     lvl34_r2Ur8_info:
         const lvl34_r2Ur8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.174742725 UTC

[section ""data" . lvl35_r2Ur9_closure" {
     lvl35_r2Ur9_closure:
         const :_con_info;
         const lvl20_r2UqT_closure+1;
         const lvl34_r2Ur8_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.177692359 UTC

[section ""data" . $wxs1_r2Ura_closure" {
     $wxs1_r2Ura_closure:
         const $wxs1_r2Ura_info;
         const 0;
 },
 sat_s3bjF_entry() //  [R1]
         { []
         }
     {offset
       c3h2B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3h2C; else goto c3h2D;
       c3h2C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h2D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs1_r2Ura_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bjF_info" {
     sat_s3bjF_info:
         const sat_s3bjF_entry;
         const 4294967296;
         const 4294967313;
         const S3bQP_srt+1160;
 },
 $wxs1_r2Ura_entry() //  [R2]
         { []
         }
     {offset
       c3h2H: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3h2L; else goto c3h2K;
       c3h2L: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs1_r2Ura_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3h2K: // global
           if (R2 == 1) goto c3h2G; else goto c3h2F;
       c3h2G: // global
           Hp = Hp - 48;
           R1 = lvl35_r2Ur9_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3h2F: // global
           I64[Hp - 40] = sat_s3bjF_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs1_r2Ura_info" {
     $wxs1_r2Ura_info:
         const $wxs1_r2Ura_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S3bQP_srt+1160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.182884624 UTC

[section ""cstring" . lvl36_r2Urb_bytes" {
     lvl36_r2Urb_bytes:
         I8[] [48,46]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.186952021 UTC

[section ""data" . $j_r2Urc_closure" {
     $j_r2Urc_closure:
         const $j_r2Urc_info;
         const 0;
 },
 $j_r2Urc_entry() //  [R2, R3]
         { []
         }
     {offset
       c3h3b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3h3c; else goto c3h3d;
       c3h3c: // global
           R3 = R3;
           R2 = R2;
           R1 = $j_r2Urc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3h3d: // global
           I64[Sp - 16] = block_c3h38_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3h3X; else goto c3h39;
       u3h3X: // global
           call _c3h38(R1) args: 0, res: 0, upd: 0;
       c3h39: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $j_r2Urc_info" {
     $j_r2Urc_info:
         const $j_r2Urc_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S3bQP_srt+1176;
 },
 _c3h38() //  [R1]
         { []
         }
     {offset
       c3h38: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h3i; else goto c3h3h;
       c3h3i: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3h3h: // global
           _s3bjH::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(I64[R1 + 7], 0)) goto c3h3p; else goto c3h3F;
       c3h3p: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = _s3bjH::P64;
           I64[Sp + 8] = block_c3h3n_info;
           R3 = Hp - 14;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3h3F: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_c3h3E_info;
           R3 = _s3bjH::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h38_info" {
     block_c3h38_info:
         const _c3h38;
         const 1;
         const 12884901918;
         const S3bQP_srt+1176;
 },
 _c3h3n() //  [R1]
         { []
         }
     {offset
       c3h3n: // global
           if (R1 & 7 == 1) goto u3h3V; else goto c3h3z;
       u3h3V: // global
           Sp = Sp + 8;
           call _c3h3L() args: 0, res: 0, upd: 0;
       c3h3z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h3C; else goto c3h3B;
       c3h3C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3h3B: // global
           _s3bjN::P64 = P64[R1 + 6];
           _s3bjO::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3bjN::P64;
           P64[Hp] = _s3bjO::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h3n_info" {
     block_c3h3n_info:
         const _c3h3n;
         const 0;
         const 4294967326;
         const S3bQP_srt+1184;
 },
 _c3h3E() //  [R1]
         { []
         }
     {offset
       c3h3E: // global
           if (R1 & 7 == 1) goto u3h3W; else goto c3h3P;
       u3h3W: // global
           Sp = Sp + 8;
           call _c3h3L() args: 0, res: 0, upd: 0;
       c3h3P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h3S; else goto c3h3R;
       c3h3S: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3h3R: // global
           _s3bjQ::P64 = P64[R1 + 6];
           _s3bjR::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3bjQ::P64;
           P64[Hp] = _s3bjR::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h3E_info" {
     block_c3h3E_info:
         const _c3h3E;
         const 0;
         const 4294967326;
         const S3bQP_srt+1184;
 },
 _c3h3L() //  []
         { []
         }
     {offset
       c3h3L: // global
           R1 = lvl25_r2UqZ_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.197896741 UTC

[section ""data" . lvl37_r2Urd_closure" {
     lvl37_r2Urd_closure:
         const :_con_info;
         const lvl14_r2UqN_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.238646233 UTC

[section ""data" . GHC.Float.$w$sformatRealFloatAlt1_closure" {
     GHC.Float.$w$sformatRealFloatAlt1_closure:
         const GHC.Float.$w$sformatRealFloatAlt1_info;
         const 0;
 },
 GHC.Float.$w$sformatRealFloatAlt1_slow() //  [R1]
         { []
         }
     {offset
       c3h4z: // global
           F1 = F32[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 8, res: 0, upd: 8;
     }
 },
 show_e'_s3bkk_entry() //  [R1]
         { []
         }
     {offset
       c3h5o: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3h5x; else goto c3h5y;
       c3h5x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h5y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3h5l_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3h5D; else goto c3h5m;
       u3h5D: // global
           call _c3h5l(R1) args: 0, res: 0, upd: 0;
       c3h5m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . show_e'_s3bkk_info" {
     show_e'_s3bkk_info:
         const show_e'_s3bkk_entry;
         const 1;
         const 16;
 },
 _c3h5l() //  [R1]
         { []
         }
     {offset
       c3h5l: // global
           I64[Sp] = block_c3h5u_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7] - 1;
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h5l_info" {
     block_c3h5l_info:
         const _c3h5l;
         const 0;
         const 30;
 },
 _c3h5u() //  [R1, R2]
         { []
         }
     {offset
       c3h5u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h5C; else goto c3h5B;
       c3h5C: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3h5B: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h5u_info" {
     block_c3h5u_info:
         const _c3h5u;
         const 0;
         const 30;
 },
 sat_s3bks_entry() //  [R1]
         { []
         }
     {offset
       c3h5N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3h5O; else goto c3h5P;
       c3h5O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h5P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl32_r2Ur6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bks_info" {
     sat_s3bks_info:
         const sat_s3bks_entry;
         const 1;
         const 16;
 },
 sat_s3bkv_entry() //  [R1]
         { []
         }
     {offset
       c3h60: // global
           R3 = P64[R1 + 16];
           R2 = lvl33_r2Ur7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bkv_info" {
     sat_s3bkv_info:
         const sat_s3bkv_entry;
         const 1;
         const 16;
 },
 sat_s3bkw_entry() //  [R1]
         { []
         }
     {offset
       c3h63: // global
           _s3bkw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3h64; else goto c3h65;
       c3h65: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h67; else goto c3h66;
       c3h67: // global
           HpAlloc = 24;
           goto c3h64;
       c3h64: // global
           R1 = _s3bkw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h66: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bkw::P64;
           _s3bkk::P64 = P64[_s3bkw::P64 + 16];
           _s3bkr::P64 = P64[_s3bkw::P64 + 24];
           I64[Hp - 16] = sat_s3bkv_info;
           P64[Hp] = _s3bkk::P64;
           R3 = Hp - 16;
           R2 = _s3bkr::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bkw_info" {
     sat_s3bkw_info:
         const sat_s3bkw_entry;
         const 2;
         const 18;
 },
 dec'_s3bkD_entry() //  [R1]
         { []
         }
     {offset
       c3h6h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3h6i; else goto c3h6j;
       c3h6i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h6j: // global
           I64[Sp - 8] = block_c3h6e_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3h6s; else goto c3h6f;
       u3h6s: // global
           call _c3h6e(R1) args: 0, res: 0, upd: 0;
       c3h6f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dec'_s3bkD_info" {
     dec'_s3bkD_info:
         const dec'_s3bkD_entry;
         const 1;
         const 16;
 },
 _c3h6e() //  [R1]
         { []
         }
     {offset
       c3h6e: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 1)) goto c3h6q; else goto c3h6r;
       c3h6q: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3h6r: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h6e_info" {
     block_c3h6e_info:
         const _c3h6e;
         const 0;
         const 30;
 },
 sat_s3bkN_entry() //  [R1]
         { []
         }
     {offset
       c3h6I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3h6P; else goto c3h6Q;
       c3h6P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h6Q: // global
           I64[Sp - 8] = block_c3h6G_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           call dec'_s3bkD_entry(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bkN_info" {
     sat_s3bkN_info:
         const sat_s3bkN_entry;
         const 1;
         const 16;
 },
 _c3h6G() //  [R1]
         { []
         }
     {offset
       c3h6G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3h6T; else goto c3h6S;
       c3h6T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3h6S: // global
           _s3bkM::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bkM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h6G_info" {
     block_c3h6G_info:
         const _c3h6G;
         const 0;
         const 30;
 },
 ds5_s3bkJ_entry() //  [R1]
         { []
         }
     {offset
       c3h6X: // global
           _s3bkJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3h6Y; else goto c3h6Z;
       c3h6Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h71; else goto c3h70;
       c3h71: // global
           HpAlloc = 24;
           goto c3h6Y;
       c3h6Y: // global
           R1 = _s3bkJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h70: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bkJ::P64;
           _s3bk9::P64 = P64[_s3bkJ::P64 + 16];
           _s3bkD::P64 = P64[_s3bkJ::P64 + 24];
           I64[Hp - 16] = sat_s3bkN_info;
           P64[Hp] = _s3bkD::P64;
           I64[Sp - 24] = block_c3h6U_info;
           R4 = _s3bk9::P64;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds5_s3bkJ_info" {
     ds5_s3bkJ_info:
         const ds5_s3bkJ_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+1200;
 },
 _c3h6U() //  [R1, R2]
         { []
         }
     {offset
       c3h6U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h74; else goto c3h73;
       c3h74: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3h73: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h6U_info" {
     block_c3h6U_info:
         const _c3h6U;
         const 0;
         const 30;
 },
 ds6_s3bkR_entry() //  [R1]
         { []
         }
     {offset
       c3h7c: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3h7g; else goto c3h7h;
       c3h7g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h7h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3h79_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3h8k; else goto c3h7a;
       u3h8k: // global
           call _c3h79(R1) args: 0, res: 0, upd: 0;
       c3h7a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds6_s3bkR_info" {
     ds6_s3bkR_info:
         const ds6_s3bkR_entry;
         const 1;
         const 210453397520;
         const S3bQP_srt+1176;
 },
 _c3h79() //  [R1]
         { []
         }
     {offset
       c3h79: // global
           I64[Sp - 8] = block_c3h7f_info;
           _s3bkU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3bkU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3h8j; else goto c3h7j;
       u3h8j: // global
           call _c3h7f(R1) args: 0, res: 0, upd: 0;
       c3h7j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h79_info" {
     block_c3h79_info:
         const _c3h79;
         const 0;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3h7f() //  [R1]
         { []
         }
     {offset
       c3h7f: // global
           _s3bkU::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(I64[R1 + 7], 0)) goto c3h7t; else goto c3h7J;
       c3h7t: // global
           I64[Sp + 8] = block_c3h7r_info;
           R3 = _s3bkU::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
       c3h7J: // global
           I64[Sp + 8] = block_c3h7I_info;
           R1 = _s3bkU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3h8l; else goto c3h7K;
       u3h8l: // global
           call _c3h7I(R1) args: 0, res: 0, upd: 0;
       c3h7K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h7f_info" {
     block_c3h7f_info:
         const _c3h7f;
         const 1;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3h7r() //  [R1]
         { []
         }
     {offset
       c3h7r: // global
           if (R1 & 7 == 1) goto u3h8h; else goto c3h7D;
       u3h8h: // global
           Sp = Sp + 8;
           call _c3h86() args: 0, res: 0, upd: 0;
       c3h7D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h7G; else goto c3h7F;
       c3h7G: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3h7F: // global
           _s3bkZ::P64 = P64[R1 + 6];
           _s3bl0::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3bkZ::P64;
           P64[Hp] = _s3bl0::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h7r_info" {
     block_c3h7r_info:
         const _c3h7r;
         const 0;
         const 4294967326;
         const S3bQP_srt+1216;
 },
 _c3h7I() //  [R1]
         { []
         }
     {offset
       c3h7I: // global
           if (R1 & 7 == 1) goto c3h7Q; else goto c3h7V;
       c3h7Q: // global
           R1 = GHC.List.init2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3h7V: // global
           I64[Sp] = block_c3h7T_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.List.init1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h7I_info" {
     block_c3h7I_info:
         const _c3h7I;
         const 0;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3h7T() //  [R1]
         { []
         }
     {offset
       c3h7T: // global
           I64[Sp] = block_c3h7Z_info;
           R3 = R1;
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h7T_info" {
     block_c3h7T_info:
         const _c3h7T;
         const 0;
         const 141733920798;
         const S3bQP_srt+1176;
 },
 _c3h7Z() //  [R1]
         { []
         }
     {offset
       c3h7Z: // global
           if (R1 & 7 == 1) goto u3h8i; else goto c3h8a;
       u3h8i: // global
           Sp = Sp + 8;
           call _c3h86() args: 0, res: 0, upd: 0;
       c3h8a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h8d; else goto c3h8c;
       c3h8d: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3h8c: // global
           _s3bl7::P64 = P64[R1 + 6];
           _s3bl8::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3bl7::P64;
           P64[Hp] = _s3bl8::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h7Z_info" {
     block_c3h7Z_info:
         const _c3h7Z;
         const 0;
         const 4294967326;
         const S3bQP_srt+1216;
 },
 _c3h86() //  []
         { []
         }
     {offset
       c3h86: // global
           R1 = lvl18_r2UqR_closure;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3bls_entry() //  [R1]
         { []
         }
     {offset
       c3h8E: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3h90; else goto c3h91;
       c3h90: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h91: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3h8B_info;
           _s3bkJ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3bkJ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3h99; else goto c3h8C;
       u3h99: // global
           call _c3h8B(R1) args: 0, res: 0, upd: 0;
       c3h8C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bls_info" {
     sat_s3bls_info:
         const sat_s3bls_entry;
         const 2;
         const 18;
 },
 _c3h8B() //  [R1]
         { []
         }
     {offset
       c3h8B: // global
           I64[Sp] = block_c3h8H_info;
           _s3blh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3blh::I64;
           if (R1 & 7 != 0) goto u3h98; else goto c3h8I;
       u3h98: // global
           call _c3h8H(R1) args: 0, res: 0, upd: 0;
       c3h8I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h8B_info" {
     block_c3h8B_info:
         const _c3h8B;
         const 1;
         const 30;
 },
 _c3h8H() //  [R1]
         { []
         }
     {offset
       c3h8H: // global
           I64[Sp] = block_c3h8M_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u3h9a; else goto c3h8N;
       u3h9a: // global
           call _c3h8M(R1) args: 0, res: 0, upd: 0;
       c3h8N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h8H_info" {
     block_c3h8H_info:
         const _c3h8H;
         const 65;
         const 30;
 },
 _c3h8M() //  [R1]
         { []
         }
     {offset
       c3h8M: // global
           _s3blo::I64 = I64[Sp + 8] + (I64[R1 + 7] - 1);
           I64[Sp + 8] = block_c3h8X_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = _s3blo::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h8M_info" {
     block_c3h8M_info:
         const _c3h8M;
         const 65;
         const 30;
 },
 _c3h8X() //  [R1, R2]
         { []
         }
     {offset
       c3h8X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3h97; else goto c3h96;
       c3h97: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3h96: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h8X_info" {
     block_c3h8X_info:
         const _c3h8X;
         const 0;
         const 30;
 },
 sat_s3blu_entry() //  [R1]
         { []
         }
     {offset
       c3h9b: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3h9d; else goto c3h9e;
       c3h9d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h9e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3h8s_info;
           _s3bka::P64 = P64[R1 + 16];
           _s3bkJ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s3bka::P64;
           P64[Sp - 24] = _s3bkJ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3h9i; else goto c3h8t;
       u3h9i: // global
           call _c3h8s(R1) args: 0, res: 0, upd: 0;
       c3h8t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3blu_info" {
     sat_s3blu_info:
         const sat_s3blu_entry;
         const 3;
         const 15;
 },
 _c3h8s() //  [R1]
         { []
         }
     {offset
       c3h8s: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3h9h; else goto c3h9g;
       c3h9h: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3h9g: // global
           _s3blf::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3bls_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl19_r2UqS_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s3blf::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h8s_info" {
     block_c3h8s_info:
         const _c3h8s;
         const 2;
         const 30;
 },
 sat_s3blG_entry() //  [R1]
         { []
         }
     {offset
       c3h9I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3h9J; else goto c3h9K;
       c3h9J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3h9K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3h9G_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call dec'_s3bkD_entry(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3blG_info" {
     sat_s3blG_info:
         const sat_s3blG_entry;
         const 1;
         const 1103806595088;
         const S3bQP_srt+1160;
 },
 _c3h9G() //  [R1]
         { []
         }
     {offset
       c3h9G: // global
           _s3blE::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _s3blE::I64)) goto c3h9R; else goto c3h9S;
       c3h9R: // global
           R1 = lvl34_r2Ur8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3h9S: // global
           R2 = _s3blE::I64;
           Sp = Sp + 8;
           call $wxs1_r2Ura_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3h9G_info" {
     block_c3h9G_info:
         const _c3h9G;
         const 0;
         const 1103806595102;
         const S3bQP_srt+1160;
 },
 sat_s3blO_entry() //  [R1]
         { []
         }
     {offset
       c3hac: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3blO_info" {
     sat_s3blO_info:
         const sat_s3blO_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1176;
 },
 n1_s3blR_entry() //  [R1]
         { []
         }
     {offset
       c3hav: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3haw; else goto c3hax;
       c3haw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hax: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n1_s3blR_info" {
     n1_s3blR_info:
         const n1_s3blR_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1176;
 },
 sat_s3blX_entry() //  [R1]
         { []
         }
     {offset
       c3haM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3haN; else goto c3haO;
       c3haN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3haO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s3blT_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3blX_info" {
     sat_s3blX_info:
         const sat_s3blX_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s3blT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3haS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3haW; else goto c3haV;
       c3haW: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3haV: // global
           if (R2 == 1) goto c3haR; else goto c3haQ;
       c3haR: // global
           _s3blS::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s3blS::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3haQ: // global
           I64[Hp - 48] = sat_s3blX_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s3blT_info" {
     $wxs4_s3blT_info:
         const $wxs4_s3blT_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s3blY_entry() //  [R1]
         { []
         }
     {offset
       c3haY: // global
           _s3blY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3haZ; else goto c3hb0;
       c3hb0: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3hb2; else goto c3hb1;
       c3hb2: // global
           HpAlloc = 64;
           goto c3haZ;
       c3haZ: // global
           R1 = _s3blY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hb1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3blY::P64;
           _s3bk9::P64 = P64[_s3blY::P64 + 16];
           _s3blP::I64 = -I64[_s3blY::P64 + 24];
           if (%MO_S_Ge_W64(0, _s3blP::I64)) goto c3hb4; else goto c3hb5;
       c3hb4: // global
           Hp = Hp - 64;
           R3 = _s3bk9::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
       c3hb5: // global
           I64[Hp - 56] = n1_s3blR_info;
           P64[Hp - 40] = _s3bk9::P64;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = lvl20_r2UqT_closure+1;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = $wxs4_s3blT_info;
           P64[Hp] = Hp - 30;
           R2 = _s3blP::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call $wxs4_s3blT_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3blY_info" {
     sat_s3blY_info:
         const sat_s3blY_entry;
         const 4294967297;
         const 4294967315;
         const S3bQP_srt+1176;
 },
 sat_s3bm9_entry() //  [R1]
         { []
         }
     {offset
       c3hbx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3hby; else goto c3hbz;
       c3hby: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hbz: // global
           I64[Sp - 8] = block_c3hbu_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hbI; else goto c3hbv;
       u3hbI: // global
           call _c3hbu(R1) args: 0, res: 0, upd: 0;
       c3hbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bm9_info" {
     sat_s3bm9_info:
         const sat_s3bm9_entry;
         const 1;
         const 16;
 },
 _c3hbu() //  [R1]
         { []
         }
     {offset
       c3hbu: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c3hbG; else goto c3hbH;
       c3hbG: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hbH: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hbu_info" {
     block_c3hbu_info:
         const _c3hbu;
         const 0;
         const 30;
 },
 sat_s3bmi_entry() //  [R1]
         { []
         }
     {offset
       c3hbY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hbZ; else goto c3hc0;
       c3hbZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hc0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s3bme_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bmi_info" {
     sat_s3bmi_info:
         const sat_s3bmi_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s3bme_entry() //  [R1, R2]
         { []
         }
     {offset
       c3hc4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3hc8; else goto c3hc7;
       c3hc8: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3hc7: // global
           if (R2 == 1) goto c3hc3; else goto c3hc2;
       c3hc3: // global
           _s3bmd::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s3bmd::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hc2: // global
           I64[Hp - 48] = sat_s3bmi_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s3bme_info" {
     $wxs4_s3bme_info:
         const $wxs4_s3bme_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s3bmm_entry() //  [R1]
         { []
         }
     {offset
       c3hcl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3hcm; else goto c3hcn;
       c3hcm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hcn: // global
           I64[Sp - 8] = block_c3hci_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hcw; else goto c3hcj;
       u3hcw: // global
           call _c3hci(R1) args: 0, res: 0, upd: 0;
       c3hcj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bmm_info" {
     sat_s3bmm_info:
         const sat_s3bmm_entry;
         const 1;
         const 16;
 },
 _c3hci() //  [R1]
         { []
         }
     {offset
       c3hci: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c3hcu; else goto c3hcv;
       c3hcu: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hcv: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hci_info" {
     block_c3hci_info:
         const _c3hci;
         const 0;
         const 30;
 },
 ds4_s3bm3_entry() //  [R1]
         { []
         }
     {offset
       c3hcx: // global
           _s3bm3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3hcy; else goto c3hcz;
       c3hcz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3hcB; else goto c3hcA;
       c3hcB: // global
           HpAlloc = 40;
           goto c3hcy;
       c3hcy: // global
           R1 = _s3bm3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hcA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bm3::P64;
           _s3bk9::P64 = P64[_s3bm3::P64 + 16];
           _s3blZ::P64 = P64[_s3bm3::P64 + 24];
           _s3bm4::I64 = -I64[_s3bm3::P64 + 32];
           if (%MO_S_Ge_W64(0, _s3bm4::I64)) goto c3hcE; else goto c3hcI;
       c3hcE: // global
           I64[Hp - 32] = sat_s3bm9_info;
           P64[Hp - 16] = _s3blZ::P64;
           _c3hbq::P64 = Hp - 32;
           Hp = Hp - 16;
           I64[Sp - 24] = block_c3hcC_info;
           R4 = _s3bk9::P64;
           R3 = _c3hbq::P64;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
       c3hcI: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = _s3bk9::P64;
           I64[Hp - 8] = $wxs4_s3bme_info;
           P64[Hp] = Hp - 30;
           I64[Sp - 32] = block_c3hca_info;
           R2 = _s3bm4::I64;
           R1 = Hp - 7;
           P64[Sp - 24] = _s3blZ::P64;
           Sp = Sp - 32;
           call $wxs4_s3bme_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_s3bm3_info" {
     ds4_s3bm3_info:
         const ds4_s3bm3_entry;
         const 4294967298;
         const 12884901903;
         const S3bQP_srt+1192;
 },
 _c3hcC() //  [R1, R2]
         { []
         }
     {offset
       c3hcC: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hcC_info" {
     block_c3hcC_info:
         const _c3hcC;
         const 0;
         const 4294967326;
         const S3bQP_srt+1192;
 },
 _c3hca() //  [R1]
         { []
         }
     {offset
       c3hca: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hcL; else goto c3hcK;
       c3hcL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hcK: // global
           I64[Hp - 16] = sat_s3bmm_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3hcH_info;
           R4 = R1;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hca_info" {
     block_c3hca_info:
         const _c3hca;
         const 1;
         const 12884901918;
         const S3bQP_srt+1192;
 },
 _c3hcH() //  [R1, R2]
         { []
         }
     {offset
       c3hcH: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hcH_info" {
     block_c3hcH_info:
         const _c3hcH;
         const 0;
         const 4294967326;
         const S3bQP_srt+1192;
 },
 sat_s3bmC_entry() //  [R1]
         { []
         }
     {offset
       c3hcV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3hcW; else goto c3hcX;
       c3hcW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hcX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3hcS_info;
           _s3bjU::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3bjU::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3hdv; else goto c3hcT;
       u3hdv: // global
           call _c3hcS(R1) args: 0, res: 0, upd: 0;
       c3hcT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bmC_info" {
     sat_s3bmC_info:
         const sat_s3bmC_entry;
         const 2;
         const 18;
 },
 _c3hcS() //  [R1]
         { []
         }
     {offset
       c3hcS: // global
           I64[Sp] = block_c3hd0_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3hdu; else goto c3hd2;
       u3hdu: // global
           call _c3hd0(R1) args: 0, res: 0, upd: 0;
       c3hd2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hcS_info" {
     block_c3hcS_info:
         const _c3hcS;
         const 1;
         const 30;
 },
 _c3hd0() //  [R1]
         { []
         }
     {offset
       c3hd0: // global
           if (R1 & 7 == 1) goto c3hd9; else goto c3hdo;
       c3hd9: // global
           _s3bjU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3hd6_info;
           R1 = _s3bjU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hdw; else goto c3hda;
       u3hdw: // global
           call _c3hd6(R1) args: 0, res: 0, upd: 0;
       c3hda: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3hdo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hdr; else goto c3hdq;
       c3hdr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hdq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hd0_info" {
     block_c3hd0_info:
         const _c3hd0;
         const 1;
         const 30;
 },
 _c3hd6() //  [R1]
         { []
         }
     {offset
       c3hd6: // global
           if (R1 & 7 == 1) goto c3hdg; else goto c3hdk;
       c3hdg: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3hdk: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hd6_info" {
     block_c3hd6_info:
         const _c3hd6;
         const 0;
         const 30;
 },
 sat_s3bmH_entry() //  [R1]
         { []
         }
     {offset
       c3hdF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3hdG; else goto c3hdH;
       c3hdG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hdH: // global
           I64[Sp - 24] = block_c3hdC_info;
           _s3bm0::P64 = P64[R1 + 24];
           _s3bm1::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _s3bm0::P64;
           I64[Sp - 8] = _s3bm1::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3hdX; else goto c3hdD;
       u3hdX: // global
           call _c3hdC(R1) args: 0, res: 0, upd: 0;
       c3hdD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bmH_info" {
     sat_s3bmH_info:
         const sat_s3bmH_entry;
         const 4294967298;
         const 15;
 },
 _c3hdC() //  [R1]
         { []
         }
     {offset
       c3hdC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3hdM; else goto c3hdL;
       c3hdM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hdL: // global
           _s3bmE::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3bmE::I64, 0)) goto c3hdV; else goto c3hdW;
       c3hdV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bmE::I64 + I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hdW: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hdC_info" {
     block_c3hdC_info:
         const _c3hdC;
         const 130;
         const 30;
 },
 sat_s3bmZ_entry() //  [R1]
         { []
         }
     {offset
       c3hey: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hez; else goto c3heA;
       c3hez: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3heA: // global
           I64[Sp - 16] = block_c3her_info;
           _s3bjU::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s3bjU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3heY; else goto c3hes;
       u3heY: // global
           call _c3her(R1) args: 0, res: 0, upd: 0;
       c3hes: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bmZ_info" {
     sat_s3bmZ_info:
         const sat_s3bmZ_entry;
         const 2;
         const 18;
 },
 _c3her() //  [R1]
         { []
         }
     {offset
       c3her: // global
           if (R1 & 7 == 1) goto c3hev; else goto c3hew;
       c3hev: // global
           _s3bjU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3heD_info;
           R1 = _s3bjU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3heX; else goto c3heF;
       u3heX: // global
           call _c3heD(R1) args: 0, res: 0, upd: 0;
       c3heF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hew: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3heV; else goto c3heU;
       c3heV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3heU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3her_info" {
     block_c3her_info:
         const _c3her;
         const 1;
         const 30;
 },
 _c3heD() //  [R1]
         { []
         }
     {offset
       c3heD: // global
           if (R1 & 7 == 1) goto c3heL; else goto c3heP;
       c3heL: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3heP: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3heD_info" {
     block_c3heD_info:
         const _c3heD;
         const 0;
         const 30;
 },
 sat_s3bn6_entry() //  [R1]
         { []
         }
     {offset
       c3hfc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hfd; else goto c3hfe;
       c3hfd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hfe: // global
           I64[Sp - 16] = block_c3hf5_info;
           _s3bjU::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s3bjU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3hfC; else goto c3hf6;
       u3hfC: // global
           call _c3hf5(R1) args: 0, res: 0, upd: 0;
       c3hf6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bn6_info" {
     sat_s3bn6_info:
         const sat_s3bn6_entry;
         const 2;
         const 18;
 },
 _c3hf5() //  [R1]
         { []
         }
     {offset
       c3hf5: // global
           if (R1 & 7 == 1) goto c3hf9; else goto c3hfa;
       c3hf9: // global
           _s3bjU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3hfh_info;
           R1 = _s3bjU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hfB; else goto c3hfj;
       u3hfB: // global
           call _c3hfh(R1) args: 0, res: 0, upd: 0;
       c3hfj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hfa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hfz; else goto c3hfy;
       c3hfz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hfy: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hf5_info" {
     block_c3hf5_info:
         const _c3hf5;
         const 1;
         const 30;
 },
 _c3hfh() //  [R1]
         { []
         }
     {offset
       c3hfh: // global
           if (R1 & 7 == 1) goto c3hfp; else goto c3hft;
       c3hfp: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hft: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hfh_info" {
     block_c3hfh_info:
         const _c3hfh;
         const 0;
         const 30;
 },
 sat_s3bnb_entry() //  [R1]
         { []
         }
     {offset
       c3hfO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hfP; else goto c3hfQ;
       c3hfP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hfQ: // global
           I64[Sp - 16] = block_c3hfI_info;
           R3 = P64[R1 + 24];
           R2 = GHC.Show.intToDigit_closure+1;
           P64[Sp - 8] = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bnb_info" {
     sat_s3bnb_info:
         const sat_s3bnb_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+1176;
 },
 _c3hfI() //  [R1]
         { []
         }
     {offset
       c3hfI: // global
           if (R1 & 7 == 1) goto c3hfL; else goto c3hfM;
       c3hfL: // global
           _s3bjU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3hfT_info;
           R1 = _s3bjU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hgd; else goto c3hfV;
       u3hgd: // global
           call _c3hfT(R1) args: 0, res: 0, upd: 0;
       c3hfV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hfM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hgb; else goto c3hga;
       c3hgb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hga: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hfI_info" {
     block_c3hfI_info:
         const _c3hfI;
         const 1;
         const 30;
 },
 _c3hfT() //  [R1]
         { []
         }
     {offset
       c3hfT: // global
           if (R1 & 7 == 1) goto c3hg1; else goto c3hg5;
       c3hg1: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hg5: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hfT_info" {
     block_c3hfT_info:
         const _c3hfT;
         const 0;
         const 30;
 },
 $wdoFmt_s3bk7_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3hgj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3hgk; else goto u3hiG;
       c3hgk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3hiG: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c3h4P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wdoFmt_s3bk7_info" {
     $wdoFmt_s3bk7_info:
         const $wdoFmt_s3bk7_entry;
         const 2;
         const 35008278429707;
         const 12884901911;
         const S3bQP_srt+1144;
 },
 _c3h4P() //  []
         { []
         }
     {offset
       c3h4P: // global
           I64[Sp - 16] = block_c3h4S_info;
           R1 = P64[Sp + 8];
           _s3bk7::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s3bk7::P64 + 13];
           P64[Sp + 8] = P64[_s3bk7::P64 + 5];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3hiL; else goto c3h4T;
       u3hiL: // global
           call _c3h4S(R1) args: 0, res: 0, upd: 0;
       c3h4T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3h4S() //  [R1]
         { []
         }
     {offset
       c3h4S: // global
           _c3hgi::P64 = R1 & 7;
           if (_c3hgi::P64 < 3) goto u3hiF; else goto c3hgh;
       u3hiF: // global
           _s3bjT::P64 = P64[Sp + 24];
           if (_c3hgi::P64 < 2) goto c3hgf; else goto c3hgg;
       c3hgf: // global
           I64[Sp + 24] = block_c3h4X_info;
           R1 = _s3bjT::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3hiM; else goto c3h4Y;
       u3hiM: // global
           call _c3h4X(R1) args: 0, res: 0, upd: 0;
       c3h4Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hgg: // global
           I64[Sp] = block_c3h9V_info;
           R1 = _s3bjT::P64;
           if (R1 & 7 != 0) goto u3hiN; else goto c3h9W;
       u3hiN: // global
           call _c3h9V(R1) args: 0, res: 0, upd: 0;
       c3h9W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hgh: // global
           I64[Sp + 8] = block_c3hif_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hiO; else goto c3hih;
       u3hiO: // global
           call _c3hif(R1) args: 0, res: 0, upd: 0;
       c3hih: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h4S_info" {
     block_c3h4S_info:
         const _c3h4S;
         const 5;
         const 35008278429726;
         const S3bQP_srt+1144;
 },
 _c3h4X() //  [R1]
         { []
         }
     {offset
       c3h4X: // global
           _s3bk9::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3hgp; else goto c3hh4;
       c3hgp: // global
           I64[Sp + 8] = block_c3h52_info;
           R3 = _s3bk9::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3hh4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hh7; else goto c3hh6;
       c3hh7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hh6: // global
           _s3bkC::P64 = P64[R1 + 6];
           I64[Hp - 16] = dec'_s3bkD_info;
           P64[Hp] = _s3bkC::P64;
           I64[Sp - 8] = block_c3h9j_info;
           R1 = _s3bk9::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hiP; else goto c3h9k;
       u3hiP: // global
           call _c3h9j(R1) args: 0, res: 0, upd: 0;
       c3h9k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h4X_info" {
     block_c3h4X_info:
         const _c3h4X;
         const 2;
         const 8680128905246;
         const S3bQP_srt+1160;
 },
 _c3h52() //  [R1]
         { []
         }
     {offset
       c3h52: // global
           if (R1 & 7 == 1) goto c3hgt; else goto c3hgv;
       c3hgt: // global
           R1 = lvl13_r2UqM_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hgv: // global
           I64[Sp - 8] = block_c3h57_info;
           _s3bkf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3bkf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hiQ; else goto c3h58;
       u3hiQ: // global
           call _c3h57(R1) args: 0, res: 0, upd: 0;
       c3h58: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h52_info" {
     block_c3h52_info:
         const _c3h52;
         const 1;
         const 12884901918;
         const S3bQP_srt+1232;
 },
 _c3h57() //  [R1]
         { []
         }
     {offset
       c3h57: // global
           if (I64[R1 + 7] == 48) goto c3hgS; else goto u3hiI;
       c3hgS: // global
           I64[Sp - 8] = block_c3hgR_info;
           _s3bkg::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s3bkg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hiR; else goto c3hgT;
       u3hiR: // global
           call _c3hgR(R1) args: 0, res: 0, upd: 0;
       c3hgT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3hiI: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3h5f() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3h57_info" {
     block_c3h57_info:
         const _c3h57;
         const 2;
         const 4294967326;
         const S3bQP_srt+1240;
 },
 _c3hgR() //  [R1]
         { []
         }
     {offset
       c3hgR: // global
           if (R1 & 7 == 1) goto c3hgZ; else goto u3hj4;
       c3hgZ: // global
           R1 = lvl16_r2UqP_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3hj4: // global
           call _c3h5f() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3hgR_info" {
     block_c3hgR_info:
         const _c3hgR;
         const 3;
         const 4294967326;
         const S3bQP_srt+1240;
 },
 _c3h5f() //  []
         { []
         }
     {offset
       c3h5f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hgz; else goto c3hgy;
       c3hgz: // global
           HpAlloc = 24;
           I64[Sp] = block_c3h5f_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3hgy: // global
           I64[Hp - 16] = show_e'_s3bkk_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c3h5E_info;
           R1 = P64[Sp + 16];
           P64[Sp + 24] = Hp - 16;
           if (R1 & 7 != 0) goto u3hiT; else goto c3h5F;
       u3hiT: // global
           call _c3h5E(R1) args: 0, res: 0, upd: 0;
       c3h5F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h5f_info" {
     block_c3h5f_info:
         const _c3h5f;
         const 3;
         const 30;
 },
 _c3h5E() //  [R1]
         { []
         }
     {offset
       c3h5E: // global
           _c3h5h::P64 = P64[Sp + 24];
           _s3bkg::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3hgC; else goto c3hgI;
       c3hgC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3hgF; else goto c3hgE;
       c3hgF: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hgE: // global
           I64[Hp - 40] = sat_s3bks_info;
           P64[Hp - 24] = _c3h5h::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bkg::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hgI: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3hgL; else goto c3hgK;
       c3hgL: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hgK: // global
           I64[Hp - 72] = sat_s3bkw_info;
           P64[Hp - 56] = _c3h5h::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bkg::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h5E_info" {
     block_c3h5E_info:
         const _c3h5E;
         const 131;
         const 30;
 },
 _c3h9j() //  [R1]
         { []
         }
     {offset
       c3h9j: // global
           if (R1 & 7 == 1) goto u3hiU; else goto c3hhj;
       u3hiU: // global
           call _c3h6w() args: 0, res: 0, upd: 0;
       c3hhj: // global
           I64[Sp - 8] = block_c3h9p_info;
           _s3bly::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3bly::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hiV; else goto c3h9q;
       u3hiV: // global
           call _c3h9p(R1) args: 0, res: 0, upd: 0;
       c3h9q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h9j_info" {
     block_c3h9j_info:
         const _c3h9j;
         const 3;
         const 2083059138590;
         const S3bQP_srt+1160;
 },
 _c3h9p() //  [R1]
         { []
         }
     {offset
       c3h9p: // global
           if (I64[R1 + 7] == 0) goto c3hhn; else goto u3hiH;
       c3hhn: // global
           _s3bly::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3h9x_info;
           R1 = _s3bly::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hiW; else goto c3h9y;
       u3hiW: // global
           call _c3h9x(R1) args: 0, res: 0, upd: 0;
       c3h9y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3hiH: // global
           Sp = Sp + 8;
           call _c3h6w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3h9p_info" {
     block_c3h9p_info:
         const _c3h9p;
         const 4;
         const 2083059138590;
         const S3bQP_srt+1160;
 },
 _c3h9x() //  [R1]
         { []
         }
     {offset
       c3h9x: // global
           if (R1 & 7 == 1) goto c3hhr; else goto u3hiY;
       c3hhr: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3hhu; else goto c3hht;
       c3hhu: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hht: // global
           I64[Hp - 64] = sat_s3blG_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3hiY: // global
           call _c3h6w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3h9x_info" {
     block_c3h9x_info:
         const _c3h9x;
         const 3;
         const 2083059138590;
         const S3bQP_srt+1160;
 },
 _c3h6w() //  []
         { []
         }
     {offset
       c3h6w: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c3hhd; else goto c3hhc;
       c3hhd: // global
           HpAlloc = 168;
           I64[Sp] = block_c3h6w_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3hhc: // global
           I64[Hp - 160] = ds5_s3bkJ_info;
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 8];
           I64[Hp - 128] = ds6_s3bkR_info;
           _c3h6y::P64 = Hp - 160;
           P64[Hp - 112] = _c3h6y::P64;
           I64[Hp - 104] = sat_s3blu_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = _c3h6y::P64;
           _c3h75::P64 = Hp - 128;
           P64[Hp - 72] = _c3h75::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = lvl14_r2UqN_closure+1;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c3h75::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h6w_info" {
     block_c3h6w_info:
         const _c3h6w;
         const 3;
         const 244813135902;
         const S3bQP_srt+1176;
 },
 _c3h9V() //  [R1]
         { []
         }
     {offset
       c3h9V: // global
           _s3bka::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c3hhC; else goto c3hhK;
       c3hhC: // global
           I64[Sp + 24] = block_c3ha0_info;
           R1 = _s3bka::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3hiZ; else goto c3ha1;
       u3hiZ: // global
           call _c3ha0(R1) args: 0, res: 0, upd: 0;
       c3ha1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hhK: // global
           I64[Sp] = block_c3hb8_info;
           _s3blZ::P64 = P64[R1 + 6];
           R1 = _s3bka::P64;
           P64[Sp + 40] = _s3blZ::P64;
           if (R1 & 7 != 0) goto u3hj0; else goto c3hb9;
       u3hj0: // global
           call _c3hb8(R1) args: 0, res: 0, upd: 0;
       c3hb9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3h9V_info" {
     block_c3h9V_info:
         const _c3h9V;
         const 389;
         const 906238099486;
         const S3bQP_srt+1144;
 },
 _c3ha0() //  [R1]
         { []
         }
     {offset
       c3ha0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3hhF; else goto c3hhE;
       c3hhF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hhE: // global
           _s3bk9::P64 = P64[Sp + 8];
           _s3blM::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3blM::I64, 0)) goto c3hhH; else goto c3hhI;
       c3hhH: // global
           I64[Hp - 24] = sat_s3blO_info;
           P64[Hp - 8] = _s3bk9::P64;
           _c3ha8::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _c3ha8::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s3blM::I64;
           Sp = Sp + 24;
           call $wf_r2UqX_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3hhI: // global
           I64[Hp - 24] = sat_s3blY_info;
           P64[Hp - 8] = _s3bk9::P64;
           I64[Hp] = _s3blM::I64;
           R3 = Hp - 24;
           R2 = lvl36_r2Urb_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ha0_info" {
     block_c3ha0_info:
         const _c3ha0;
         const 130;
         const 38654705694;
         const S3bQP_srt+1152;
 },
 _c3hb8() //  [R1]
         { []
         }
     {offset
       c3hb8: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3hhN; else goto c3hhM;
       c3hhN: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hhM: // global
           _s3bk9::P64 = P64[Sp + 32];
           _s3blZ::P64 = P64[Sp + 40];
           _s3bm1::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3bm1::I64, 0)) goto c3hhR; else goto c3hhS;
       c3hhR: // global
           I64[Hp - 112] = ds4_s3bm3_info;
           P64[Hp - 96] = _s3bk9::P64;
           P64[Hp - 88] = _s3blZ::P64;
           I64[Hp - 80] = _s3bm1::I64;
           I64[Hp - 72] = sat_s3bmC_info;
           P64[Hp - 56] = P64[Sp + 8];
           _c3hbg::P64 = Hp - 112;
           P64[Hp - 48] = _c3hbg::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c3hbg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hhS: // global
           I64[Hp - 112] = sat_s3bmH_info;
           P64[Hp - 96] = _s3blZ::P64;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = _s3bm1::I64;
           _c3hdy::P64 = Hp - 112;
           Hp = Hp - 80;
           I64[Sp] = block_c3hdY_info;
           R4 = _s3bk9::P64;
           R3 = _c3hdy::P64;
           R2 = base_r2UqK_closure+1;
           I64[Sp + 40] = _s3bm1::I64;
           call GHC.Float.$wroundTo_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hb8_info" {
     block_c3hb8_info:
         const _c3hb8;
         const 389;
         const 897648164894;
         const S3bQP_srt+1144;
 },
 _c3hdY() //  [R1, R2]
         { []
         }
     {offset
       c3hdY: // global
           I64[Sp] = block_c3he0_info;
           R1 = R1;
           P64[Sp + 32] = R2;
           if (R1 & 7 != 0) goto u3hj1; else goto c3he1;
       u3hj1: // global
           call _c3he0(R1) args: 0, res: 0, upd: 0;
       c3he1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hdY_info" {
     block_c3hdY_info:
         const _c3hdY;
         const 1925;
         const 73014444062;
         const S3bQP_srt+1144;
 },
 _c3he0() //  [R1]
         { []
         }
     {offset
       c3he0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3hhW; else goto c3hhV;
       c3hhW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hhV: // global
           _s3bmK::P64 = P64[Sp + 32];
           _s3bmN::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3bmN::I64, 0)) goto c3hhY; else goto c3hic;
       c3hhY: // global
           Hp = Hp - 32;
           I64[Sp] = block_c3heb_info;
           R3 = _s3bmK::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           I64[Sp + 40] = _s3bmN::I64;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3hic: // global
           I64[Hp - 24] = sat_s3bnb_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3bmK::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3he0_info" {
     block_c3he0_info:
         const _c3he0;
         const 1413;
         const 73014444062;
         const S3bQP_srt+1144;
 },
 _c3heb() //  [R1]
         { []
         }
     {offset
       c3heb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3hi1; else goto c3hi0;
       c3hi1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hi0: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40];
           I64[Sp] = block_c3heg_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.List.$wsplitAt'_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3heb_info" {
     block_c3heb_info:
         const _c3heb;
         const 1925;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3heg() //  [R1, R2]
         { []
         }
     {offset
       c3heg: // global
           I64[Sp] = block_c3hei_info;
           R1 = R1;
           P64[Sp + 40] = R2;
           if (R1 & 7 != 0) goto u3hj2; else goto c3hej;
       u3hj2: // global
           call _c3hei(R1) args: 0, res: 0, upd: 0;
       c3hej: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3heg_info" {
     block_c3heg_info:
         const _c3heg;
         const 1925;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3hei() //  [R1]
         { []
         }
     {offset
       c3hei: // global
           _s3bjU::P64 = P64[Sp + 8];
           _s3bmT::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c3hi4; else goto c3hi8;
       c3hi4: // global
           Hp = Hp + 32;
           _s3bmU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3hib; else goto c3hi6;
       c3hi6: // global
           I64[Hp - 24] = sat_s3bmZ_info;
           P64[Hp - 8] = _s3bjU::P64;
           P64[Hp] = _s3bmT::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3hi8: // global
           Hp = Hp + 32;
           _s3bmU::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3hib; else goto c3hia;
       c3hib: // global
           HpAlloc = 32;
           R1 = _s3bmU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hia: // global
           I64[Hp - 24] = sat_s3bn6_info;
           P64[Hp - 8] = _s3bjU::P64;
           P64[Hp] = _s3bmT::P64;
           R3 = Hp - 24;
           R2 = _s3bmU::P64;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hei_info" {
     block_c3hei_info:
         const _c3hei;
         const 901;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3hif() //  [R1]
         { []
         }
     {offset
       c3hif: // global
           _s3bk9::P64 = P64[Sp + 24];
           _s3bnc::P64 = R1;
           _s3bnd::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3bnd::I64, 0)) goto c3hiw; else goto c3hiv;
       c3hiv: // global
           if (%MO_S_Gt_W64(_s3bnd::I64, 7)) goto c3hiw; else goto c3his;
       c3hiw: // global
           P64[Sp + 16] = GHC.Float.FFExponent_closure+1;
           P64[Sp + 24] = _s3bk9::P64;
           P64[Sp + 32] = _s3bnc::P64;
           Sp = Sp + 8;
           goto u3hj6;
       c3his: // global
           P64[Sp + 16] = GHC.Float.FFFixed_closure+2;
           P64[Sp + 24] = _s3bk9::P64;
           P64[Sp + 32] = _s3bnc::P64;
           Sp = Sp + 8;
           goto u3hj6;
       u3hj6: // global
           call _c3h4P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3hif_info" {
     block_c3hif_info:
         const _c3hif;
         const 644;
         const 35008278429726;
         const S3bQP_srt+1144;
 },
 section ""relreadonly" . u3hk4_srtd" {
     u3hk4_srtd:
         const S3bQP_srt+752;
         const 62;
         const 4588606169848741889;
 },
 sat_s3bnl_entry() //  [R1]
         { []
         }
     {offset
       c3hji: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3hjl; else goto c3hjm;
       c3hjl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hjm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3hjk_info;
           F1 = %MO_F_Neg_W32(F32[R1 + 32]);
           R2 = GHC.Float.expts4_closure;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.$w$sfloatToDigits1_entry(F1,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bnl_info" {
     sat_s3bnl_info:
         const sat_s3bnl_entry;
         const 4294967298;
         const 18446744069414584335;
         const u3hk4_srtd;
 },
 _c3hjk() //  [R1, R2]
         { []
         }
     {offset
       c3hjk: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wdoFmt_s3bk7_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hjk_info" {
     block_c3hjk_info:
         const _c3hjk;
         const 2;
         const 35008278429726;
         const S3bQP_srt+1144;
 },
 section ""relreadonly" . u3hk5_srtd" {
     u3hk5_srtd:
         const S3bQP_srt+752;
         const 66;
         const 18423664225130905601;
         const 3;
 },
 GHC.Float.$w$sformatRealFloatAlt1_entry() //  [R2, R3, R4, F1]
         { []
         }
     {offset
       c3hjs: // global
           _s3bjV::F32 = F1;
           _s3bjU::P64 = R4;
           _s3bjT::P64 = R3;
           _s3bjS::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c3hjt; else goto c3hju;
       c3hju: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hjw; else goto c3hjv;
       c3hjw: // global
           HpAlloc = 24;
           goto c3hjt;
       c3hjt: // global
           R1 = GHC.Float.$w$sformatRealFloatAlt1_closure;
           P64[Sp - 32] = _s3bjS::P64;
           P64[Sp - 24] = _s3bjT::P64;
           P64[Sp - 16] = _s3bjU::P64;
           F32[Sp - 8] = _s3bjV::F32;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3hjv: // global
           (_s3bjZ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNaN(_s3bjV::F32);
           if (_s3bjZ::I64 == 0) goto c3hjr; else goto c3hjq;
       c3hjr: // global
           (_s3bk4::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatInfinite(_s3bjV::F32);
           if (_s3bk4::I64 == 0) goto c3hjZ; else goto c3hjD;
       c3hjZ: // global
           I64[Hp - 16] = $wdoFmt_s3bk7_info;
           P64[Hp - 8] = _s3bjT::P64;
           P64[Hp] = _s3bjU::P64;
           _c3h4N::P64 = Hp - 13;
           if (%MO_F_Lt_W32(_s3bjV::F32,
                            0.0 :: W32)) goto u3hk0; else goto c3hjX;
       u3hk0: // global
           P64[Sp - 24] = _c3h4N::P64;
           P64[Sp - 16] = _s3bjS::P64;
           F32[Sp - 8] = _s3bjV::F32;
           Sp = Sp - 32;
           goto u3hk3;
       c3hjX: // global
           (_s3bnq::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isFloatNegativeZero(_s3bjV::F32);
           if (_s3bnq::I64 == 0) goto c3hjT; else goto u3hk1;
       c3hjT: // global
           I64[Sp - 24] = block_c3hjS_info;
           F1 = _s3bjV::F32;
           R2 = GHC.Float.expts4_closure;
           P64[Sp - 16] = _c3h4N::P64;
           P64[Sp - 8] = _s3bjS::P64;
           Sp = Sp - 24;
           call GHC.Float.$w$sfloatToDigits1_entry(F1,
                                                   R2) args: 8, res: 8, upd: 8;
       u3hk1: // global
           P64[Sp - 24] = _c3h4N::P64;
           P64[Sp - 16] = _s3bjS::P64;
           F32[Sp - 8] = _s3bjV::F32;
           Sp = Sp - 32;
           goto u3hk3;
       u3hk3: // global
           call _c3hja() args: 0, res: 0, upd: 0;
       c3hjD: // global
           if (%MO_F_Lt_W32(_s3bjV::F32,
                            0.0 :: W32)) goto c3hjB; else goto c3hjA;
       c3hjB: // global
           Hp = Hp - 24;
           R1 = lvl29_r2Ur3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hjA: // global
           Hp = Hp - 24;
           R1 = lvl27_r2Ur1_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hjq: // global
           Hp = Hp - 24;
           R1 = lvl31_r2Ur5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sformatRealFloatAlt1_info" {
     GHC.Float.$w$sformatRealFloatAlt1_info:
         const GHC.Float.$w$sformatRealFloatAlt1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869184;
         const u3hk5_srtd;
         const 516;
         const GHC.Float.$w$sformatRealFloatAlt1_slow;
 },
 _c3hjS() //  [R1, R2]
         { []
         }
     {offset
       c3hjS: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wdoFmt_s3bk7_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hjS_info" {
     block_c3hjS_info:
         const _c3hjS;
         const 2;
         const 35008278429726;
         const S3bQP_srt+1144;
 },
 section ""relreadonly" . u3hk6_srtd" {
     u3hk6_srtd:
         const S3bQP_srt+752;
         const 62;
         const 4588606169848741889;
 },
 _c3hja() //  []
         { []
         }
     {offset
       c3hja: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3hjH; else goto c3hjG;
       c3hjH: // global
           HpAlloc = 64;
           I64[Sp] = block_c3hja_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3hjG: // global
           I64[Hp - 56] = sat_s3bnl_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           F32[Hp - 24] = F32[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hja_info" {
     block_c3hja_info:
         const _c3hja;
         const 259;
         const 18446744069414584350;
         const u3hk6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.40672652 UTC

[section ""data" . GHC.Float.$fShowFloat_$sformatRealFloatAlt_closure" {
     GHC.Float.$fShowFloat_$sformatRealFloatAlt_closure:
         const GHC.Float.$fShowFloat_$sformatRealFloatAlt_info;
         const 0;
 },
 GHC.Float.$fShowFloat_$sformatRealFloatAlt_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       c3hue: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3huf; else goto c3hug;
       c3huf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowFloat_$sformatRealFloatAlt_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3hug: // global
           I64[Sp - 32] = block_c3hub_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3huk; else goto c3huc;
       u3huk: // global
           call _c3hub(R1) args: 0, res: 0, upd: 0;
       c3huc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$sformatRealFloatAlt_info" {
     GHC.Float.$fShowFloat_$sformatRealFloatAlt_info:
         const GHC.Float.$fShowFloat_$sformatRealFloatAlt_entry;
         const 0;
         const 73014444046;
         const 17179869208;
         const S3bQP_srt+1248;
 },
 _c3hub() //  [R1]
         { []
         }
     {offset
       c3hub: // global
           F1 = F32[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hub_info" {
     block_c3hub_info:
         const _c3hub;
         const 3;
         const 4294967326;
         const S3bQP_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.41291308 UTC

[section ""data" . $wxs2_r2Ure_closure" {
     $wxs2_r2Ure_closure:
         const $wxs2_r2Ure_info;
         const 0;
 },
 sat_s3bnE_entry() //  [R1]
         { []
         }
     {offset
       c3huH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3huI; else goto c3huJ;
       c3huI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3huJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs2_r2Ure_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bnE_info" {
     sat_s3bnE_info:
         const sat_s3bnE_entry;
         const 4294967296;
         const 4294967313;
         const S3bQP_srt+1288;
 },
 $wxs2_r2Ure_entry() //  [R2]
         { []
         }
     {offset
       c3huN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3huR; else goto c3huQ;
       c3huR: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs2_r2Ure_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3huQ: // global
           if (R2 == 1) goto c3huM; else goto c3huL;
       c3huM: // global
           Hp = Hp - 48;
           R1 = lvl35_r2Ur9_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3huL: // global
           I64[Hp - 40] = sat_s3bnE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs2_r2Ure_info" {
     $wxs2_r2Ure_info:
         const $wxs2_r2Ure_entry;
         const 0;
         const 140741783322638;
         const 4294967300;
         const S3bQP_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.457524704 UTC

[section ""data" . GHC.Float.$w$sformatRealFloatAlt_closure" {
     GHC.Float.$w$sformatRealFloatAlt_closure:
         const GHC.Float.$w$sformatRealFloatAlt_info;
         const 0;
 },
 GHC.Float.$w$sformatRealFloatAlt_slow() //  [R1]
         { []
         }
     {offset
       c3hva: // global
           D1 = F64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 8, res: 0, upd: 8;
     }
 },
 show_e'_s3bo7_entry() //  [R1]
         { []
         }
     {offset
       c3hvZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3hw8; else goto c3hw9;
       c3hw8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hw9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3hvW_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3hwe; else goto c3hvX;
       u3hwe: // global
           call _c3hvW(R1) args: 0, res: 0, upd: 0;
       c3hvX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . show_e'_s3bo7_info" {
     show_e'_s3bo7_info:
         const show_e'_s3bo7_entry;
         const 1;
         const 16;
 },
 _c3hvW() //  [R1]
         { []
         }
     {offset
       c3hvW: // global
           I64[Sp] = block_c3hw5_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7] - 1;
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hvW_info" {
     block_c3hvW_info:
         const _c3hvW;
         const 0;
         const 30;
 },
 _c3hw5() //  [R1, R2]
         { []
         }
     {offset
       c3hw5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hwd; else goto c3hwc;
       c3hwd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3hwc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hw5_info" {
     block_c3hw5_info:
         const _c3hw5;
         const 0;
         const 30;
 },
 sat_s3bof_entry() //  [R1]
         { []
         }
     {offset
       c3hwo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hwp; else goto c3hwq;
       c3hwp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hwq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl32_r2Ur6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bof_info" {
     sat_s3bof_info:
         const sat_s3bof_entry;
         const 1;
         const 16;
 },
 sat_s3boi_entry() //  [R1]
         { []
         }
     {offset
       c3hwB: // global
           R3 = P64[R1 + 16];
           R2 = lvl33_r2Ur7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3boi_info" {
     sat_s3boi_info:
         const sat_s3boi_entry;
         const 1;
         const 16;
 },
 sat_s3boj_entry() //  [R1]
         { []
         }
     {offset
       c3hwE: // global
           _s3boj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3hwF; else goto c3hwG;
       c3hwG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hwI; else goto c3hwH;
       c3hwI: // global
           HpAlloc = 24;
           goto c3hwF;
       c3hwF: // global
           R1 = _s3boj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hwH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3boj::P64;
           _s3bo7::P64 = P64[_s3boj::P64 + 16];
           _s3boe::P64 = P64[_s3boj::P64 + 24];
           I64[Hp - 16] = sat_s3boi_info;
           P64[Hp] = _s3bo7::P64;
           R3 = Hp - 16;
           R2 = _s3boe::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3boj_info" {
     sat_s3boj_info:
         const sat_s3boj_entry;
         const 2;
         const 18;
 },
 dec'_s3boq_entry() //  [R1]
         { []
         }
     {offset
       c3hwS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3hwT; else goto c3hwU;
       c3hwT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hwU: // global
           I64[Sp - 8] = block_c3hwP_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hx3; else goto c3hwQ;
       u3hx3: // global
           call _c3hwP(R1) args: 0, res: 0, upd: 0;
       c3hwQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dec'_s3boq_info" {
     dec'_s3boq_info:
         const dec'_s3boq_entry;
         const 1;
         const 16;
 },
 _c3hwP() //  [R1]
         { []
         }
     {offset
       c3hwP: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 1)) goto c3hx1; else goto c3hx2;
       c3hx1: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hx2: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hwP_info" {
     block_c3hwP_info:
         const _c3hwP;
         const 0;
         const 30;
 },
 sat_s3boA_entry() //  [R1]
         { []
         }
     {offset
       c3hxj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3hxq; else goto c3hxr;
       c3hxq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hxr: // global
           I64[Sp - 8] = block_c3hxh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           call dec'_s3boq_entry(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3boA_info" {
     sat_s3boA_info:
         const sat_s3boA_entry;
         const 1;
         const 16;
 },
 _c3hxh() //  [R1]
         { []
         }
     {offset
       c3hxh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3hxu; else goto c3hxt;
       c3hxu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hxt: // global
           _s3boz::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3boz::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hxh_info" {
     block_c3hxh_info:
         const _c3hxh;
         const 0;
         const 30;
 },
 ds5_s3bow_entry() //  [R1]
         { []
         }
     {offset
       c3hxy: // global
           _s3bow::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3hxz; else goto c3hxA;
       c3hxA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hxC; else goto c3hxB;
       c3hxC: // global
           HpAlloc = 24;
           goto c3hxz;
       c3hxz: // global
           R1 = _s3bow::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hxB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bow::P64;
           _s3bnW::P64 = P64[_s3bow::P64 + 16];
           _s3boq::P64 = P64[_s3bow::P64 + 24];
           I64[Hp - 16] = sat_s3boA_info;
           P64[Hp] = _s3boq::P64;
           I64[Sp - 24] = block_c3hxv_info;
           R4 = _s3bnW::P64;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds5_s3bow_info" {
     ds5_s3bow_info:
         const ds5_s3bow_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+1200;
 },
 _c3hxv() //  [R1, R2]
         { []
         }
     {offset
       c3hxv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hxF; else goto c3hxE;
       c3hxF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3hxE: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hxv_info" {
     block_c3hxv_info:
         const _c3hxv;
         const 0;
         const 30;
 },
 ds6_s3boE_entry() //  [R1]
         { []
         }
     {offset
       c3hxN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3hxR; else goto c3hxS;
       c3hxR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hxS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3hxK_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3hyV; else goto c3hxL;
       u3hyV: // global
           call _c3hxK(R1) args: 0, res: 0, upd: 0;
       c3hxL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds6_s3boE_info" {
     ds6_s3boE_info:
         const ds6_s3boE_entry;
         const 1;
         const 210453397520;
         const S3bQP_srt+1176;
 },
 _c3hxK() //  [R1]
         { []
         }
     {offset
       c3hxK: // global
           I64[Sp - 8] = block_c3hxQ_info;
           _s3boH::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3boH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hyU; else goto c3hxU;
       u3hyU: // global
           call _c3hxQ(R1) args: 0, res: 0, upd: 0;
       c3hxU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hxK_info" {
     block_c3hxK_info:
         const _c3hxK;
         const 0;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3hxQ() //  [R1]
         { []
         }
     {offset
       c3hxQ: // global
           _s3boH::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(I64[R1 + 7], 0)) goto c3hy4; else goto c3hyk;
       c3hy4: // global
           I64[Sp + 8] = block_c3hy2_info;
           R3 = _s3boH::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
       c3hyk: // global
           I64[Sp + 8] = block_c3hyj_info;
           R1 = _s3boH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hyW; else goto c3hyl;
       u3hyW: // global
           call _c3hyj(R1) args: 0, res: 0, upd: 0;
       c3hyl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hxQ_info" {
     block_c3hxQ_info:
         const _c3hxQ;
         const 1;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3hy2() //  [R1]
         { []
         }
     {offset
       c3hy2: // global
           if (R1 & 7 == 1) goto u3hyS; else goto c3hye;
       u3hyS: // global
           Sp = Sp + 8;
           call _c3hyH() args: 0, res: 0, upd: 0;
       c3hye: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hyh; else goto c3hyg;
       c3hyh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hyg: // global
           _s3boM::P64 = P64[R1 + 6];
           _s3boN::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3boM::P64;
           P64[Hp] = _s3boN::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hy2_info" {
     block_c3hy2_info:
         const _c3hy2;
         const 0;
         const 4294967326;
         const S3bQP_srt+1216;
 },
 _c3hyj() //  [R1]
         { []
         }
     {offset
       c3hyj: // global
           if (R1 & 7 == 1) goto c3hyr; else goto c3hyw;
       c3hyr: // global
           R1 = GHC.List.init2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3hyw: // global
           I64[Sp] = block_c3hyu_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.List.init1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hyj_info" {
     block_c3hyj_info:
         const _c3hyj;
         const 0;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3hyu() //  [R1]
         { []
         }
     {offset
       c3hyu: // global
           I64[Sp] = block_c3hyA_info;
           R3 = R1;
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hyu_info" {
     block_c3hyu_info:
         const _c3hyu;
         const 0;
         const 141733920798;
         const S3bQP_srt+1176;
 },
 _c3hyA() //  [R1]
         { []
         }
     {offset
       c3hyA: // global
           if (R1 & 7 == 1) goto u3hyT; else goto c3hyL;
       u3hyT: // global
           Sp = Sp + 8;
           call _c3hyH() args: 0, res: 0, upd: 0;
       c3hyL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hyO; else goto c3hyN;
       c3hyO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hyN: // global
           _s3boU::P64 = P64[R1 + 6];
           _s3boV::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3boU::P64;
           P64[Hp] = _s3boV::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hyA_info" {
     block_c3hyA_info:
         const _c3hyA;
         const 0;
         const 4294967326;
         const S3bQP_srt+1216;
 },
 _c3hyH() //  []
         { []
         }
     {offset
       c3hyH: // global
           R1 = lvl18_r2UqR_closure;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3bpf_entry() //  [R1]
         { []
         }
     {offset
       c3hzf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3hzB; else goto c3hzC;
       c3hzB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hzC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3hzc_info;
           _s3bow::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3bow::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3hzK; else goto c3hzd;
       u3hzK: // global
           call _c3hzc(R1) args: 0, res: 0, upd: 0;
       c3hzd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bpf_info" {
     sat_s3bpf_info:
         const sat_s3bpf_entry;
         const 2;
         const 18;
 },
 _c3hzc() //  [R1]
         { []
         }
     {offset
       c3hzc: // global
           I64[Sp] = block_c3hzi_info;
           _s3bp4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3bp4::I64;
           if (R1 & 7 != 0) goto u3hzJ; else goto c3hzj;
       u3hzJ: // global
           call _c3hzi(R1) args: 0, res: 0, upd: 0;
       c3hzj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hzc_info" {
     block_c3hzc_info:
         const _c3hzc;
         const 1;
         const 30;
 },
 _c3hzi() //  [R1]
         { []
         }
     {offset
       c3hzi: // global
           I64[Sp] = block_c3hzn_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u3hzL; else goto c3hzo;
       u3hzL: // global
           call _c3hzn(R1) args: 0, res: 0, upd: 0;
       c3hzo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hzi_info" {
     block_c3hzi_info:
         const _c3hzi;
         const 65;
         const 30;
 },
 _c3hzn() //  [R1]
         { []
         }
     {offset
       c3hzn: // global
           _s3bpb::I64 = I64[Sp + 8] + (I64[R1 + 7] - 1);
           I64[Sp + 8] = block_c3hzy_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = _s3bpb::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hzn_info" {
     block_c3hzn_info:
         const _c3hzn;
         const 65;
         const 30;
 },
 _c3hzy() //  [R1, R2]
         { []
         }
     {offset
       c3hzy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hzI; else goto c3hzH;
       c3hzI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3hzH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hzy_info" {
     block_c3hzy_info:
         const _c3hzy;
         const 0;
         const 30;
 },
 sat_s3bph_entry() //  [R1]
         { []
         }
     {offset
       c3hzM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3hzO; else goto c3hzP;
       c3hzO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hzP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3hz3_info;
           _s3bnX::P64 = P64[R1 + 16];
           _s3bow::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s3bnX::P64;
           P64[Sp - 24] = _s3bow::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3hzT; else goto c3hz4;
       u3hzT: // global
           call _c3hz3(R1) args: 0, res: 0, upd: 0;
       c3hz4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bph_info" {
     sat_s3bph_info:
         const sat_s3bph_entry;
         const 3;
         const 15;
 },
 _c3hz3() //  [R1]
         { []
         }
     {offset
       c3hz3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3hzS; else goto c3hzR;
       c3hzS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hzR: // global
           _s3bp2::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3bpf_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl19_r2UqS_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s3bp2::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hz3_info" {
     block_c3hz3_info:
         const _c3hz3;
         const 2;
         const 30;
 },
 sat_s3bpt_entry() //  [R1]
         { []
         }
     {offset
       c3hAj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3hAk; else goto c3hAl;
       c3hAk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hAl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3hAh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call dec'_s3boq_entry(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bpt_info" {
     sat_s3bpt_info:
         const sat_s3bpt_entry;
         const 1;
         const 1103806595088;
         const S3bQP_srt+1224;
 },
 _c3hAh() //  [R1]
         { []
         }
     {offset
       c3hAh: // global
           _s3bpr::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _s3bpr::I64)) goto c3hAs; else goto c3hAt;
       c3hAs: // global
           R1 = lvl34_r2Ur8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3hAt: // global
           R2 = _s3bpr::I64;
           Sp = Sp + 8;
           call $wxs2_r2Ure_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hAh_info" {
     block_c3hAh_info:
         const _c3hAh;
         const 0;
         const 1103806595102;
         const S3bQP_srt+1224;
 },
 sat_s3bpB_entry() //  [R1]
         { []
         }
     {offset
       c3hAN: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bpB_info" {
     sat_s3bpB_info:
         const sat_s3bpB_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1176;
 },
 n1_s3bpE_entry() //  [R1]
         { []
         }
     {offset
       c3hB6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hB7; else goto c3hB8;
       c3hB7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hB8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n1_s3bpE_info" {
     n1_s3bpE_info:
         const n1_s3bpE_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1176;
 },
 sat_s3bpK_entry() //  [R1]
         { []
         }
     {offset
       c3hBn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hBo; else goto c3hBp;
       c3hBo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hBp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s3bpG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bpK_info" {
     sat_s3bpK_info:
         const sat_s3bpK_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s3bpG_entry() //  [R1, R2]
         { []
         }
     {offset
       c3hBt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3hBx; else goto c3hBw;
       c3hBx: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3hBw: // global
           if (R2 == 1) goto c3hBs; else goto c3hBr;
       c3hBs: // global
           _s3bpF::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s3bpF::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hBr: // global
           I64[Hp - 48] = sat_s3bpK_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s3bpG_info" {
     $wxs4_s3bpG_info:
         const $wxs4_s3bpG_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s3bpL_entry() //  [R1]
         { []
         }
     {offset
       c3hBz: // global
           _s3bpL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3hBA; else goto c3hBB;
       c3hBB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3hBD; else goto c3hBC;
       c3hBD: // global
           HpAlloc = 64;
           goto c3hBA;
       c3hBA: // global
           R1 = _s3bpL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hBC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bpL::P64;
           _s3bnW::P64 = P64[_s3bpL::P64 + 16];
           _s3bpC::I64 = -I64[_s3bpL::P64 + 24];
           if (%MO_S_Ge_W64(0, _s3bpC::I64)) goto c3hBF; else goto c3hBG;
       c3hBF: // global
           Hp = Hp - 64;
           R3 = _s3bnW::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
       c3hBG: // global
           I64[Hp - 56] = n1_s3bpE_info;
           P64[Hp - 40] = _s3bnW::P64;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = lvl20_r2UqT_closure+1;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = $wxs4_s3bpG_info;
           P64[Hp] = Hp - 30;
           R2 = _s3bpC::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call $wxs4_s3bpG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bpL_info" {
     sat_s3bpL_info:
         const sat_s3bpL_entry;
         const 4294967297;
         const 4294967315;
         const S3bQP_srt+1176;
 },
 sat_s3bpW_entry() //  [R1]
         { []
         }
     {offset
       c3hC8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3hC9; else goto c3hCa;
       c3hC9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hCa: // global
           I64[Sp - 8] = block_c3hC5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hCj; else goto c3hC6;
       u3hCj: // global
           call _c3hC5(R1) args: 0, res: 0, upd: 0;
       c3hC6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bpW_info" {
     sat_s3bpW_info:
         const sat_s3bpW_entry;
         const 1;
         const 16;
 },
 _c3hC5() //  [R1]
         { []
         }
     {offset
       c3hC5: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c3hCh; else goto c3hCi;
       c3hCh: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hCi: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hC5_info" {
     block_c3hC5_info:
         const _c3hC5;
         const 0;
         const 30;
 },
 sat_s3bq5_entry() //  [R1]
         { []
         }
     {offset
       c3hCz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hCA; else goto c3hCB;
       c3hCA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hCB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s3bq1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bq5_info" {
     sat_s3bq5_info:
         const sat_s3bq5_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s3bq1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3hCF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3hCJ; else goto c3hCI;
       c3hCJ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3hCI: // global
           if (R2 == 1) goto c3hCE; else goto c3hCD;
       c3hCE: // global
           _s3bq0::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s3bq0::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hCD: // global
           I64[Hp - 48] = sat_s3bq5_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s3bq1_info" {
     $wxs4_s3bq1_info:
         const $wxs4_s3bq1_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s3bq9_entry() //  [R1]
         { []
         }
     {offset
       c3hCW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3hCX; else goto c3hCY;
       c3hCX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hCY: // global
           I64[Sp - 8] = block_c3hCT_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hD7; else goto c3hCU;
       u3hD7: // global
           call _c3hCT(R1) args: 0, res: 0, upd: 0;
       c3hCU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bq9_info" {
     sat_s3bq9_info:
         const sat_s3bq9_entry;
         const 1;
         const 16;
 },
 _c3hCT() //  [R1]
         { []
         }
     {offset
       c3hCT: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c3hD5; else goto c3hD6;
       c3hD5: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hD6: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hCT_info" {
     block_c3hCT_info:
         const _c3hCT;
         const 0;
         const 30;
 },
 ds4_s3bpQ_entry() //  [R1]
         { []
         }
     {offset
       c3hD8: // global
           _s3bpQ::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3hD9; else goto c3hDa;
       c3hDa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3hDc; else goto c3hDb;
       c3hDc: // global
           HpAlloc = 40;
           goto c3hD9;
       c3hD9: // global
           R1 = _s3bpQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hDb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bpQ::P64;
           _s3bnW::P64 = P64[_s3bpQ::P64 + 16];
           _s3bpM::P64 = P64[_s3bpQ::P64 + 24];
           _s3bpR::I64 = -I64[_s3bpQ::P64 + 32];
           if (%MO_S_Ge_W64(0, _s3bpR::I64)) goto c3hDf; else goto c3hDj;
       c3hDf: // global
           I64[Hp - 32] = sat_s3bpW_info;
           P64[Hp - 16] = _s3bpM::P64;
           _c3hC1::P64 = Hp - 32;
           Hp = Hp - 16;
           I64[Sp - 24] = block_c3hDd_info;
           R4 = _s3bnW::P64;
           R3 = _c3hC1::P64;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
       c3hDj: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = _s3bnW::P64;
           I64[Hp - 8] = $wxs4_s3bq1_info;
           P64[Hp] = Hp - 30;
           I64[Sp - 32] = block_c3hCL_info;
           R2 = _s3bpR::I64;
           R1 = Hp - 7;
           P64[Sp - 24] = _s3bpM::P64;
           Sp = Sp - 32;
           call $wxs4_s3bq1_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_s3bpQ_info" {
     ds4_s3bpQ_info:
         const ds4_s3bpQ_entry;
         const 4294967298;
         const 12884901903;
         const S3bQP_srt+1192;
 },
 _c3hDd() //  [R1, R2]
         { []
         }
     {offset
       c3hDd: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hDd_info" {
     block_c3hDd_info:
         const _c3hDd;
         const 0;
         const 4294967326;
         const S3bQP_srt+1192;
 },
 _c3hCL() //  [R1]
         { []
         }
     {offset
       c3hCL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hDm; else goto c3hDl;
       c3hDm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hDl: // global
           I64[Hp - 16] = sat_s3bq9_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3hDi_info;
           R4 = R1;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hCL_info" {
     block_c3hCL_info:
         const _c3hCL;
         const 1;
         const 12884901918;
         const S3bQP_srt+1192;
 },
 _c3hDi() //  [R1, R2]
         { []
         }
     {offset
       c3hDi: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hDi_info" {
     block_c3hDi_info:
         const _c3hDi;
         const 0;
         const 4294967326;
         const S3bQP_srt+1192;
 },
 sat_s3bqp_entry() //  [R1]
         { []
         }
     {offset
       c3hDw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3hDx; else goto c3hDy;
       c3hDx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hDy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3hDt_info;
           _s3bnH::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3bnH::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3hE6; else goto c3hDu;
       u3hE6: // global
           call _c3hDt(R1) args: 0, res: 0, upd: 0;
       c3hDu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bqp_info" {
     sat_s3bqp_info:
         const sat_s3bqp_entry;
         const 2;
         const 18;
 },
 _c3hDt() //  [R1]
         { []
         }
     {offset
       c3hDt: // global
           I64[Sp] = block_c3hDB_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3hE5; else goto c3hDD;
       u3hE5: // global
           call _c3hDB(R1) args: 0, res: 0, upd: 0;
       c3hDD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hDt_info" {
     block_c3hDt_info:
         const _c3hDt;
         const 1;
         const 30;
 },
 _c3hDB() //  [R1]
         { []
         }
     {offset
       c3hDB: // global
           if (R1 & 7 == 1) goto c3hDK; else goto c3hDZ;
       c3hDK: // global
           _s3bnH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3hDH_info;
           R1 = _s3bnH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hE7; else goto c3hDL;
       u3hE7: // global
           call _c3hDH(R1) args: 0, res: 0, upd: 0;
       c3hDL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3hDZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hE2; else goto c3hE1;
       c3hE2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hE1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hDB_info" {
     block_c3hDB_info:
         const _c3hDB;
         const 1;
         const 30;
 },
 _c3hDH() //  [R1]
         { []
         }
     {offset
       c3hDH: // global
           if (R1 & 7 == 1) goto c3hDR; else goto c3hDV;
       c3hDR: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3hDV: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hDH_info" {
     block_c3hDH_info:
         const _c3hDH;
         const 0;
         const 30;
 },
 sat_s3bqu_entry() //  [R1]
         { []
         }
     {offset
       c3hEg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3hEh; else goto c3hEi;
       c3hEh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hEi: // global
           I64[Sp - 24] = block_c3hEd_info;
           _s3bpN::P64 = P64[R1 + 24];
           _s3bpO::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _s3bpN::P64;
           I64[Sp - 8] = _s3bpO::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3hEy; else goto c3hEe;
       u3hEy: // global
           call _c3hEd(R1) args: 0, res: 0, upd: 0;
       c3hEe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bqu_info" {
     sat_s3bqu_info:
         const sat_s3bqu_entry;
         const 4294967298;
         const 15;
 },
 _c3hEd() //  [R1]
         { []
         }
     {offset
       c3hEd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3hEn; else goto c3hEm;
       c3hEn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hEm: // global
           _s3bqr::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3bqr::I64, 0)) goto c3hEw; else goto c3hEx;
       c3hEw: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bqr::I64 + I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hEx: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hEd_info" {
     block_c3hEd_info:
         const _c3hEd;
         const 130;
         const 30;
 },
 sat_s3bqM_entry() //  [R1]
         { []
         }
     {offset
       c3hF9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hFa; else goto c3hFb;
       c3hFa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hFb: // global
           I64[Sp - 16] = block_c3hF2_info;
           _s3bnH::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s3bnH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3hFz; else goto c3hF3;
       u3hFz: // global
           call _c3hF2(R1) args: 0, res: 0, upd: 0;
       c3hF3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bqM_info" {
     sat_s3bqM_info:
         const sat_s3bqM_entry;
         const 2;
         const 18;
 },
 _c3hF2() //  [R1]
         { []
         }
     {offset
       c3hF2: // global
           if (R1 & 7 == 1) goto c3hF6; else goto c3hF7;
       c3hF6: // global
           _s3bnH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3hFe_info;
           R1 = _s3bnH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hFy; else goto c3hFg;
       u3hFy: // global
           call _c3hFe(R1) args: 0, res: 0, upd: 0;
       c3hFg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hF7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hFw; else goto c3hFv;
       c3hFw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hFv: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hF2_info" {
     block_c3hF2_info:
         const _c3hF2;
         const 1;
         const 30;
 },
 _c3hFe() //  [R1]
         { []
         }
     {offset
       c3hFe: // global
           if (R1 & 7 == 1) goto c3hFm; else goto c3hFq;
       c3hFm: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hFq: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hFe_info" {
     block_c3hFe_info:
         const _c3hFe;
         const 0;
         const 30;
 },
 sat_s3bqT_entry() //  [R1]
         { []
         }
     {offset
       c3hFN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hFO; else goto c3hFP;
       c3hFO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hFP: // global
           I64[Sp - 16] = block_c3hFG_info;
           _s3bnH::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s3bnH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3hGd; else goto c3hFH;
       u3hGd: // global
           call _c3hFG(R1) args: 0, res: 0, upd: 0;
       c3hFH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bqT_info" {
     sat_s3bqT_info:
         const sat_s3bqT_entry;
         const 2;
         const 18;
 },
 _c3hFG() //  [R1]
         { []
         }
     {offset
       c3hFG: // global
           if (R1 & 7 == 1) goto c3hFK; else goto c3hFL;
       c3hFK: // global
           _s3bnH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3hFS_info;
           R1 = _s3bnH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hGc; else goto c3hFU;
       u3hGc: // global
           call _c3hFS(R1) args: 0, res: 0, upd: 0;
       c3hFU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hFL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hGa; else goto c3hG9;
       c3hGa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hG9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hFG_info" {
     block_c3hFG_info:
         const _c3hFG;
         const 1;
         const 30;
 },
 _c3hFS() //  [R1]
         { []
         }
     {offset
       c3hFS: // global
           if (R1 & 7 == 1) goto c3hG0; else goto c3hG4;
       c3hG0: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hG4: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hFS_info" {
     block_c3hFS_info:
         const _c3hFS;
         const 0;
         const 30;
 },
 sat_s3bqY_entry() //  [R1]
         { []
         }
     {offset
       c3hGp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hGq; else goto c3hGr;
       c3hGq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hGr: // global
           I64[Sp - 16] = block_c3hGj_info;
           R3 = P64[R1 + 24];
           R2 = GHC.Show.intToDigit_closure+1;
           P64[Sp - 8] = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bqY_info" {
     sat_s3bqY_info:
         const sat_s3bqY_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+1176;
 },
 _c3hGj() //  [R1]
         { []
         }
     {offset
       c3hGj: // global
           if (R1 & 7 == 1) goto c3hGm; else goto c3hGn;
       c3hGm: // global
           _s3bnH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3hGu_info;
           R1 = _s3bnH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hGO; else goto c3hGw;
       u3hGO: // global
           call _c3hGu(R1) args: 0, res: 0, upd: 0;
       c3hGw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hGn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hGM; else goto c3hGL;
       c3hGM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hGL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hGj_info" {
     block_c3hGj_info:
         const _c3hGj;
         const 1;
         const 30;
 },
 _c3hGu() //  [R1]
         { []
         }
     {offset
       c3hGu: // global
           if (R1 & 7 == 1) goto c3hGC; else goto c3hGG;
       c3hGC: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hGG: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hGu_info" {
     block_c3hGu_info:
         const _c3hGu;
         const 0;
         const 30;
 },
 $wdoFmt_s3bnU_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3hGU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3hGV; else goto u3hJh;
       c3hGV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3hJh: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c3hvq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wdoFmt_s3bnU_info" {
     $wdoFmt_s3bnU_info:
         const $wdoFmt_s3bnU_entry;
         const 2;
         const 1160891005403147;
         const 12884901911;
         const S3bQP_srt+1144;
 },
 _c3hvq() //  []
         { []
         }
     {offset
       c3hvq: // global
           I64[Sp - 16] = block_c3hvt_info;
           R1 = P64[Sp + 8];
           _s3bnU::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s3bnU::P64 + 13];
           P64[Sp + 8] = P64[_s3bnU::P64 + 5];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3hJm; else goto c3hvu;
       u3hJm: // global
           call _c3hvt(R1) args: 0, res: 0, upd: 0;
       c3hvu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3hvt() //  [R1]
         { []
         }
     {offset
       c3hvt: // global
           _c3hGT::P64 = R1 & 7;
           if (_c3hGT::P64 < 3) goto u3hJg; else goto c3hGS;
       u3hJg: // global
           _s3bnG::P64 = P64[Sp + 24];
           if (_c3hGT::P64 < 2) goto c3hGQ; else goto c3hGR;
       c3hGQ: // global
           I64[Sp + 24] = block_c3hvy_info;
           R1 = _s3bnG::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3hJn; else goto c3hvz;
       u3hJn: // global
           call _c3hvy(R1) args: 0, res: 0, upd: 0;
       c3hvz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hGR: // global
           I64[Sp] = block_c3hAw_info;
           R1 = _s3bnG::P64;
           if (R1 & 7 != 0) goto u3hJo; else goto c3hAx;
       u3hJo: // global
           call _c3hAw(R1) args: 0, res: 0, upd: 0;
       c3hAx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hGS: // global
           I64[Sp + 8] = block_c3hIQ_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hJp; else goto c3hIS;
       u3hJp: // global
           call _c3hIQ(R1) args: 0, res: 0, upd: 0;
       c3hIS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hvt_info" {
     block_c3hvt_info:
         const _c3hvt;
         const 5;
         const 1160891005403166;
         const S3bQP_srt+1144;
 },
 _c3hvy() //  [R1]
         { []
         }
     {offset
       c3hvy: // global
           _s3bnW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3hH0; else goto c3hHF;
       c3hH0: // global
           I64[Sp + 8] = block_c3hvD_info;
           R3 = _s3bnW::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3hHF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hHI; else goto c3hHH;
       c3hHI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hHH: // global
           _s3bop::P64 = P64[R1 + 6];
           I64[Hp - 16] = dec'_s3boq_info;
           P64[Hp] = _s3bop::P64;
           I64[Sp - 8] = block_c3hzU_info;
           R1 = _s3bnW::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hJq; else goto c3hzV;
       u3hJq: // global
           call _c3hzU(R1) args: 0, res: 0, upd: 0;
       c3hzV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hvy_info" {
     block_c3hvy_info:
         const _c3hvy;
         const 2;
         const 72537702662174;
         const S3bQP_srt+1176;
 },
 _c3hvD() //  [R1]
         { []
         }
     {offset
       c3hvD: // global
           if (R1 & 7 == 1) goto c3hH4; else goto c3hH6;
       c3hH4: // global
           R1 = lvl13_r2UqM_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hH6: // global
           I64[Sp - 8] = block_c3hvI_info;
           _s3bo2::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3bo2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hJr; else goto c3hvJ;
       u3hJr: // global
           call _c3hvI(R1) args: 0, res: 0, upd: 0;
       c3hvJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hvD_info" {
     block_c3hvD_info:
         const _c3hvD;
         const 1;
         const 12884901918;
         const S3bQP_srt+1232;
 },
 _c3hvI() //  [R1]
         { []
         }
     {offset
       c3hvI: // global
           if (I64[R1 + 7] == 48) goto c3hHt; else goto u3hJj;
       c3hHt: // global
           I64[Sp - 8] = block_c3hHs_info;
           _s3bo3::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s3bo3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hJs; else goto c3hHu;
       u3hJs: // global
           call _c3hHs(R1) args: 0, res: 0, upd: 0;
       c3hHu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3hJj: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3hvQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3hvI_info" {
     block_c3hvI_info:
         const _c3hvI;
         const 2;
         const 4294967326;
         const S3bQP_srt+1240;
 },
 _c3hHs() //  [R1]
         { []
         }
     {offset
       c3hHs: // global
           if (R1 & 7 == 1) goto c3hHA; else goto u3hJF;
       c3hHA: // global
           R1 = lvl16_r2UqP_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3hJF: // global
           call _c3hvQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3hHs_info" {
     block_c3hHs_info:
         const _c3hHs;
         const 3;
         const 4294967326;
         const S3bQP_srt+1240;
 },
 _c3hvQ() //  []
         { []
         }
     {offset
       c3hvQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hHa; else goto c3hH9;
       c3hHa: // global
           HpAlloc = 24;
           I64[Sp] = block_c3hvQ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3hH9: // global
           I64[Hp - 16] = show_e'_s3bo7_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c3hwf_info;
           R1 = P64[Sp + 16];
           P64[Sp + 24] = Hp - 16;
           if (R1 & 7 != 0) goto u3hJu; else goto c3hwg;
       u3hJu: // global
           call _c3hwf(R1) args: 0, res: 0, upd: 0;
       c3hwg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hvQ_info" {
     block_c3hvQ_info:
         const _c3hvQ;
         const 3;
         const 30;
 },
 _c3hwf() //  [R1]
         { []
         }
     {offset
       c3hwf: // global
           _c3hvS::P64 = P64[Sp + 24];
           _s3bo3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3hHd; else goto c3hHj;
       c3hHd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3hHg; else goto c3hHf;
       c3hHg: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hHf: // global
           I64[Hp - 40] = sat_s3bof_info;
           P64[Hp - 24] = _c3hvS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bo3::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hHj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3hHm; else goto c3hHl;
       c3hHm: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hHl: // global
           I64[Hp - 72] = sat_s3boj_info;
           P64[Hp - 56] = _c3hvS::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3bo3::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hwf_info" {
     block_c3hwf_info:
         const _c3hwf;
         const 131;
         const 30;
 },
 _c3hzU() //  [R1]
         { []
         }
     {offset
       c3hzU: // global
           if (R1 & 7 == 1) goto u3hJv; else goto c3hHU;
       u3hJv: // global
           call _c3hx7() args: 0, res: 0, upd: 0;
       c3hHU: // global
           I64[Sp - 8] = block_c3hA0_info;
           _s3bpl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3bpl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hJw; else goto c3hA1;
       u3hJw: // global
           call _c3hA0(R1) args: 0, res: 0, upd: 0;
       c3hA1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hzU_info" {
     block_c3hzU_info:
         const _c3hzU;
         const 3;
         const 70888435220510;
         const S3bQP_srt+1176;
 },
 _c3hA0() //  [R1]
         { []
         }
     {offset
       c3hA0: // global
           if (I64[R1 + 7] == 0) goto c3hHY; else goto u3hJi;
       c3hHY: // global
           _s3bpl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3hA8_info;
           R1 = _s3bpl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hJx; else goto c3hA9;
       u3hJx: // global
           call _c3hA8(R1) args: 0, res: 0, upd: 0;
       c3hA9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3hJi: // global
           Sp = Sp + 8;
           call _c3hx7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3hA0_info" {
     block_c3hA0_info:
         const _c3hA0;
         const 4;
         const 70888435220510;
         const S3bQP_srt+1176;
 },
 _c3hA8() //  [R1]
         { []
         }
     {offset
       c3hA8: // global
           if (R1 & 7 == 1) goto c3hI2; else goto u3hJz;
       c3hI2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3hI5; else goto c3hI4;
       c3hI5: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hI4: // global
           I64[Hp - 64] = sat_s3bpt_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3hJz: // global
           call _c3hx7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3hA8_info" {
     block_c3hA8_info:
         const _c3hA8;
         const 3;
         const 70888435220510;
         const S3bQP_srt+1176;
 },
 _c3hx7() //  []
         { []
         }
     {offset
       c3hx7: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c3hHO; else goto c3hHN;
       c3hHO: // global
           HpAlloc = 168;
           I64[Sp] = block_c3hx7_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3hHN: // global
           I64[Hp - 160] = ds5_s3bow_info;
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 8];
           I64[Hp - 128] = ds6_s3boE_info;
           _c3hx9::P64 = Hp - 160;
           P64[Hp - 112] = _c3hx9::P64;
           I64[Hp - 104] = sat_s3bph_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = _c3hx9::P64;
           _c3hxG::P64 = Hp - 128;
           P64[Hp - 72] = _c3hxG::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = lvl14_r2UqN_closure+1;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c3hxG::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hx7_info" {
     block_c3hx7_info:
         const _c3hx7;
         const 3;
         const 244813135902;
         const S3bQP_srt+1176;
 },
 _c3hAw() //  [R1]
         { []
         }
     {offset
       c3hAw: // global
           _s3bnX::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c3hId; else goto c3hIl;
       c3hId: // global
           I64[Sp + 24] = block_c3hAB_info;
           R1 = _s3bnX::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3hJA; else goto c3hAC;
       u3hJA: // global
           call _c3hAB(R1) args: 0, res: 0, upd: 0;
       c3hAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3hIl: // global
           I64[Sp] = block_c3hBJ_info;
           _s3bpM::P64 = P64[R1 + 6];
           R1 = _s3bnX::P64;
           P64[Sp + 40] = _s3bpM::P64;
           if (R1 & 7 != 0) goto u3hJB; else goto c3hBK;
       u3hJB: // global
           call _c3hBJ(R1) args: 0, res: 0, upd: 0;
       c3hBK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hAw_info" {
     block_c3hAw_info:
         const _c3hAw;
         const 389;
         const 906238099486;
         const S3bQP_srt+1144;
 },
 _c3hAB() //  [R1]
         { []
         }
     {offset
       c3hAB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3hIg; else goto c3hIf;
       c3hIg: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hIf: // global
           _s3bnW::P64 = P64[Sp + 8];
           _s3bpz::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3bpz::I64, 0)) goto c3hIi; else goto c3hIj;
       c3hIi: // global
           I64[Hp - 24] = sat_s3bpB_info;
           P64[Hp - 8] = _s3bnW::P64;
           _c3hAJ::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _c3hAJ::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s3bpz::I64;
           Sp = Sp + 24;
           call $wf_r2UqX_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3hIj: // global
           I64[Hp - 24] = sat_s3bpL_info;
           P64[Hp - 8] = _s3bnW::P64;
           I64[Hp] = _s3bpz::I64;
           R3 = Hp - 24;
           R2 = lvl36_r2Urb_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hAB_info" {
     block_c3hAB_info:
         const _c3hAB;
         const 130;
         const 38654705694;
         const S3bQP_srt+1152;
 },
 _c3hBJ() //  [R1]
         { []
         }
     {offset
       c3hBJ: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3hIo; else goto c3hIn;
       c3hIo: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hIn: // global
           _s3bnW::P64 = P64[Sp + 32];
           _s3bpM::P64 = P64[Sp + 40];
           _s3bpO::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3bpO::I64, 0)) goto c3hIs; else goto c3hIt;
       c3hIs: // global
           I64[Hp - 112] = ds4_s3bpQ_info;
           P64[Hp - 96] = _s3bnW::P64;
           P64[Hp - 88] = _s3bpM::P64;
           I64[Hp - 80] = _s3bpO::I64;
           I64[Hp - 72] = sat_s3bqp_info;
           P64[Hp - 56] = P64[Sp + 8];
           _c3hBR::P64 = Hp - 112;
           P64[Hp - 48] = _c3hBR::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c3hBR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hIt: // global
           I64[Hp - 112] = sat_s3bqu_info;
           P64[Hp - 96] = _s3bpM::P64;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = _s3bpO::I64;
           _c3hE9::P64 = Hp - 112;
           Hp = Hp - 80;
           I64[Sp] = block_c3hEz_info;
           R4 = _s3bnW::P64;
           R3 = _c3hE9::P64;
           R2 = base_r2UqK_closure+1;
           I64[Sp + 40] = _s3bpO::I64;
           call GHC.Float.$wroundTo_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hBJ_info" {
     block_c3hBJ_info:
         const _c3hBJ;
         const 389;
         const 897648164894;
         const S3bQP_srt+1144;
 },
 _c3hEz() //  [R1, R2]
         { []
         }
     {offset
       c3hEz: // global
           I64[Sp] = block_c3hEB_info;
           R1 = R1;
           P64[Sp + 32] = R2;
           if (R1 & 7 != 0) goto u3hJC; else goto c3hEC;
       u3hJC: // global
           call _c3hEB(R1) args: 0, res: 0, upd: 0;
       c3hEC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hEz_info" {
     block_c3hEz_info:
         const _c3hEz;
         const 1925;
         const 73014444062;
         const S3bQP_srt+1144;
 },
 _c3hEB() //  [R1]
         { []
         }
     {offset
       c3hEB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3hIx; else goto c3hIw;
       c3hIx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hIw: // global
           _s3bqx::P64 = P64[Sp + 32];
           _s3bqA::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3bqA::I64, 0)) goto c3hIz; else goto c3hIN;
       c3hIz: // global
           Hp = Hp - 32;
           I64[Sp] = block_c3hEM_info;
           R3 = _s3bqx::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           I64[Sp + 40] = _s3bqA::I64;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3hIN: // global
           I64[Hp - 24] = sat_s3bqY_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3bqx::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hEB_info" {
     block_c3hEB_info:
         const _c3hEB;
         const 1413;
         const 73014444062;
         const S3bQP_srt+1144;
 },
 _c3hEM() //  [R1]
         { []
         }
     {offset
       c3hEM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3hIC; else goto c3hIB;
       c3hIC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hIB: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40];
           I64[Sp] = block_c3hER_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.List.$wsplitAt'_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hEM_info" {
     block_c3hEM_info:
         const _c3hEM;
         const 1925;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3hER() //  [R1, R2]
         { []
         }
     {offset
       c3hER: // global
           I64[Sp] = block_c3hET_info;
           R1 = R1;
           P64[Sp + 40] = R2;
           if (R1 & 7 != 0) goto u3hJD; else goto c3hEU;
       u3hJD: // global
           call _c3hET(R1) args: 0, res: 0, upd: 0;
       c3hEU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hER_info" {
     block_c3hER_info:
         const _c3hER;
         const 1925;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3hET() //  [R1]
         { []
         }
     {offset
       c3hET: // global
           _s3bnH::P64 = P64[Sp + 8];
           _s3bqG::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c3hIF; else goto c3hIJ;
       c3hIF: // global
           Hp = Hp + 32;
           _s3bqH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3hIM; else goto c3hIH;
       c3hIH: // global
           I64[Hp - 24] = sat_s3bqM_info;
           P64[Hp - 8] = _s3bnH::P64;
           P64[Hp] = _s3bqG::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3hIJ: // global
           Hp = Hp + 32;
           _s3bqH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3hIM; else goto c3hIL;
       c3hIM: // global
           HpAlloc = 32;
           R1 = _s3bqH::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hIL: // global
           I64[Hp - 24] = sat_s3bqT_info;
           P64[Hp - 8] = _s3bnH::P64;
           P64[Hp] = _s3bqG::P64;
           R3 = Hp - 24;
           R2 = _s3bqH::P64;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hET_info" {
     block_c3hET_info:
         const _c3hET;
         const 901;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3hIQ() //  [R1]
         { []
         }
     {offset
       c3hIQ: // global
           _s3bnW::P64 = P64[Sp + 24];
           _s3bqZ::P64 = R1;
           _s3br0::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3br0::I64, 0)) goto c3hJ7; else goto c3hJ6;
       c3hJ6: // global
           if (%MO_S_Gt_W64(_s3br0::I64, 7)) goto c3hJ7; else goto c3hJ3;
       c3hJ7: // global
           P64[Sp + 16] = GHC.Float.FFExponent_closure+1;
           P64[Sp + 24] = _s3bnW::P64;
           P64[Sp + 32] = _s3bqZ::P64;
           Sp = Sp + 8;
           goto u3hJH;
       c3hJ3: // global
           P64[Sp + 16] = GHC.Float.FFFixed_closure+2;
           P64[Sp + 24] = _s3bnW::P64;
           P64[Sp + 32] = _s3bqZ::P64;
           Sp = Sp + 8;
           goto u3hJH;
       u3hJH: // global
           call _c3hvq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3hIQ_info" {
     block_c3hIQ_info:
         const _c3hIQ;
         const 644;
         const 1160891005403166;
         const S3bQP_srt+1144;
 },
 section ""relreadonly" . u3hKF_srtd" {
     u3hKF_srtd:
         const S3bQP_srt+752;
         const 68;
         const 4586362066616451073;
         const 8;
 },
 sat_s3br8_entry() //  [R1]
         { []
         }
     {offset
       c3hJT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3hJW; else goto c3hJX;
       c3hJW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hJX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3hJV_info;
           D1 = %MO_F_Neg_W64(F64[R1 + 32]);
           R2 = GHC.Float.expts4_closure;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Float.$w$sfloatToDigits_entry(D1,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3br8_info" {
     sat_s3br8_info:
         const sat_s3br8_entry;
         const 4294967298;
         const 18446744069414584335;
         const u3hKF_srtd;
 },
 _c3hJV() //  [R1, R2]
         { []
         }
     {offset
       c3hJV: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wdoFmt_s3bnU_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hJV_info" {
     block_c3hJV_info:
         const _c3hJV;
         const 2;
         const 1160891005403166;
         const S3bQP_srt+1144;
 },
 section ""relreadonly" . u3hKG_srtd" {
     u3hKG_srtd:
         const S3bQP_srt+752;
         const 69;
         const 13809734103471226881;
         const 27;
 },
 GHC.Float.$w$sformatRealFloatAlt_entry() //  [R2, R3, R4, D1]
         { []
         }
     {offset
       c3hK3: // global
           _s3bnI::F64 = D1;
           _s3bnH::P64 = R4;
           _s3bnG::P64 = R3;
           _s3bnF::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c3hK4; else goto c3hK5;
       c3hK5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hK7; else goto c3hK6;
       c3hK7: // global
           HpAlloc = 24;
           goto c3hK4;
       c3hK4: // global
           R1 = GHC.Float.$w$sformatRealFloatAlt_closure;
           P64[Sp - 32] = _s3bnF::P64;
           P64[Sp - 24] = _s3bnG::P64;
           P64[Sp - 16] = _s3bnH::P64;
           F64[Sp - 8] = _s3bnI::F64;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3hK6: // global
           (_s3bnM::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNaN(_s3bnI::F64);
           if (_s3bnM::I64 == 0) goto c3hK2; else goto c3hK1;
       c3hK2: // global
           (_s3bnR::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleInfinite(_s3bnI::F64);
           if (_s3bnR::I64 == 0) goto c3hKA; else goto c3hKe;
       c3hKA: // global
           I64[Hp - 16] = $wdoFmt_s3bnU_info;
           P64[Hp - 8] = _s3bnG::P64;
           P64[Hp] = _s3bnH::P64;
           _c3hvo::P64 = Hp - 13;
           if (%MO_F_Lt_W64(_s3bnI::F64,
                            0.0 :: W64)) goto u3hKB; else goto c3hKy;
       u3hKB: // global
           P64[Sp - 24] = _c3hvo::P64;
           P64[Sp - 16] = _s3bnF::P64;
           F64[Sp - 8] = _s3bnI::F64;
           Sp = Sp - 32;
           goto u3hKE;
       c3hKy: // global
           (_s3brd::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] isDoubleNegativeZero(_s3bnI::F64);
           if (_s3brd::I64 == 0) goto c3hKu; else goto u3hKC;
       c3hKu: // global
           I64[Sp - 24] = block_c3hKt_info;
           D1 = _s3bnI::F64;
           R2 = GHC.Float.expts4_closure;
           P64[Sp - 16] = _c3hvo::P64;
           P64[Sp - 8] = _s3bnF::P64;
           Sp = Sp - 24;
           call GHC.Float.$w$sfloatToDigits_entry(D1,
                                                  R2) args: 8, res: 8, upd: 8;
       u3hKC: // global
           P64[Sp - 24] = _c3hvo::P64;
           P64[Sp - 16] = _s3bnF::P64;
           F64[Sp - 8] = _s3bnI::F64;
           Sp = Sp - 32;
           goto u3hKE;
       u3hKE: // global
           call _c3hJL() args: 0, res: 0, upd: 0;
       c3hKe: // global
           if (%MO_F_Lt_W64(_s3bnI::F64,
                            0.0 :: W64)) goto c3hKc; else goto c3hKb;
       c3hKc: // global
           Hp = Hp - 24;
           R1 = lvl29_r2Ur3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hKb: // global
           Hp = Hp - 24;
           R1 = lvl27_r2Ur1_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hK1: // global
           Hp = Hp - 24;
           R1 = lvl31_r2Ur5_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$w$sformatRealFloatAlt_info" {
     GHC.Float.$w$sformatRealFloatAlt_info:
         const GHC.Float.$w$sformatRealFloatAlt_entry;
         const 0;
         const 18446744069414584334;
         const 17179869184;
         const u3hKG_srtd;
         const 516;
         const GHC.Float.$w$sformatRealFloatAlt_slow;
 },
 _c3hKt() //  [R1, R2]
         { []
         }
     {offset
       c3hKt: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wdoFmt_s3bnU_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hKt_info" {
     block_c3hKt_info:
         const _c3hKt;
         const 2;
         const 1160891005403166;
         const S3bQP_srt+1144;
 },
 section ""relreadonly" . u3hKH_srtd" {
     u3hKH_srtd:
         const S3bQP_srt+752;
         const 68;
         const 4586362066616451073;
         const 8;
 },
 _c3hJL() //  []
         { []
         }
     {offset
       c3hJL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3hKi; else goto c3hKh;
       c3hKi: // global
           HpAlloc = 64;
           I64[Sp] = block_c3hJL_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3hKh: // global
           I64[Hp - 56] = sat_s3br8_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           F64[Hp - 24] = F64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hJL_info" {
     block_c3hJL_info:
         const _c3hJL;
         const 259;
         const 18446744069414584350;
         const u3hKH_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.623978052 UTC

[section ""data" . GHC.Float.$fShowDouble_$sformatRealFloatAlt_closure" {
     GHC.Float.$fShowDouble_$sformatRealFloatAlt_closure:
         const GHC.Float.$fShowDouble_$sformatRealFloatAlt_info;
         const 0;
 },
 GHC.Float.$fShowDouble_$sformatRealFloatAlt_entry() //  [R2, R3,
                                                          R4, R5]
         { []
         }
     {offset
       c3hUP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3hUQ; else goto c3hUR;
       c3hUQ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowDouble_$sformatRealFloatAlt_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3hUR: // global
           I64[Sp - 32] = block_c3hUM_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3hUV; else goto c3hUN;
       u3hUV: // global
           call _c3hUM(R1) args: 0, res: 0, upd: 0;
       c3hUN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$sformatRealFloatAlt_info" {
     GHC.Float.$fShowDouble_$sformatRealFloatAlt_info:
         const GHC.Float.$fShowDouble_$sformatRealFloatAlt_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3bQP_srt+1296;
 },
 _c3hUM() //  [R1]
         { []
         }
     {offset
       c3hUM: // global
           D1 = F64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hUM_info" {
     block_c3hUM_info:
         const _c3hUM;
         const 3;
         const 4294967326;
         const S3bQP_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.631105841 UTC

[section ""data" . $wxs3_r2Urf_closure" {
     $wxs3_r2Urf_closure:
         const $wxs3_r2Urf_info;
         const 0;
 },
 sat_s3brr_entry() //  [R1]
         { []
         }
     {offset
       c3hVi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hVj; else goto c3hVk;
       c3hVj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hVk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs3_r2Urf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3brr_info" {
     sat_s3brr_info:
         const sat_s3brr_entry;
         const 4294967296;
         const 4294967313;
         const S3bQP_srt+1312;
 },
 $wxs3_r2Urf_entry() //  [R2]
         { []
         }
     {offset
       c3hVo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3hVs; else goto c3hVr;
       c3hVs: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs3_r2Urf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3hVr: // global
           if (R2 == 1) goto c3hVn; else goto c3hVm;
       c3hVn: // global
           Hp = Hp - 48;
           R1 = lvl35_r2Ur9_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3hVm: // global
           I64[Hp - 40] = sat_s3brr_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs3_r2Urf_info" {
     $wxs3_r2Urf_info:
         const $wxs3_r2Urf_entry;
         const 0;
         const 1125904201809934;
         const 4294967300;
         const S3bQP_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.699692673 UTC

[section ""data" . GHC.Float.formatRealFloatAlt_closure" {
     GHC.Float.formatRealFloatAlt_closure:
         const GHC.Float.formatRealFloatAlt_info;
         const 0;
 },
 $dNum_s3brA_entry() //  [R1]
         { []
         }
     {offset
       c3hW4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hW5; else goto c3hW6;
       c3hW5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hW6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s3brA_info" {
     $dNum_s3brA_info:
         const $dNum_s3brA_entry;
         const 1;
         const 16;
 },
 show_e'_s3brP_entry() //  [R1]
         { []
         }
     {offset
       c3hWM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3hWV; else goto c3hWW;
       c3hWV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hWW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3hWJ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3hX1; else goto c3hWK;
       u3hX1: // global
           call _c3hWJ(R1) args: 0, res: 0, upd: 0;
       c3hWK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . show_e'_s3brP_info" {
     show_e'_s3brP_info:
         const show_e'_s3brP_entry;
         const 1;
         const 16;
 },
 _c3hWJ() //  [R1]
         { []
         }
     {offset
       c3hWJ: // global
           I64[Sp] = block_c3hWS_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7] - 1;
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hWJ_info" {
     block_c3hWJ_info:
         const _c3hWJ;
         const 0;
         const 30;
 },
 _c3hWS() //  [R1, R2]
         { []
         }
     {offset
       c3hWS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hX0; else goto c3hWZ;
       c3hX0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3hWZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hWS_info" {
     block_c3hWS_info:
         const _c3hWS;
         const 0;
         const 30;
 },
 sat_s3brX_entry() //  [R1]
         { []
         }
     {offset
       c3hXb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3hXc; else goto c3hXd;
       c3hXc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hXd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl32_r2Ur6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3brX_info" {
     sat_s3brX_info:
         const sat_s3brX_entry;
         const 1;
         const 16;
 },
 sat_s3bs0_entry() //  [R1]
         { []
         }
     {offset
       c3hXo: // global
           R3 = P64[R1 + 16];
           R2 = lvl33_r2Ur7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bs0_info" {
     sat_s3bs0_info:
         const sat_s3bs0_entry;
         const 1;
         const 16;
 },
 sat_s3bs1_entry() //  [R1]
         { []
         }
     {offset
       c3hXr: // global
           _s3bs1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3hXs; else goto c3hXt;
       c3hXt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hXv; else goto c3hXu;
       c3hXv: // global
           HpAlloc = 24;
           goto c3hXs;
       c3hXs: // global
           R1 = _s3bs1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hXu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bs1::P64;
           _s3brP::P64 = P64[_s3bs1::P64 + 16];
           _s3brW::P64 = P64[_s3bs1::P64 + 24];
           I64[Hp - 16] = sat_s3bs0_info;
           P64[Hp] = _s3brP::P64;
           R3 = Hp - 16;
           R2 = _s3brW::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bs1_info" {
     sat_s3bs1_info:
         const sat_s3bs1_entry;
         const 2;
         const 18;
 },
 dec'_s3bs8_entry() //  [R1]
         { []
         }
     {offset
       c3hXF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3hXG; else goto c3hXH;
       c3hXG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hXH: // global
           I64[Sp - 8] = block_c3hXC_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hXQ; else goto c3hXD;
       u3hXQ: // global
           call _c3hXC(R1) args: 0, res: 0, upd: 0;
       c3hXD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dec'_s3bs8_info" {
     dec'_s3bs8_info:
         const dec'_s3bs8_entry;
         const 1;
         const 16;
 },
 _c3hXC() //  [R1]
         { []
         }
     {offset
       c3hXC: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 1)) goto c3hXO; else goto c3hXP;
       c3hXO: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3hXP: // global
           R1 = GHC.Float.$fRealFracFloat2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hXC_info" {
     block_c3hXC_info:
         const _c3hXC;
         const 0;
         const 30;
 },
 sat_s3bsi_entry() //  [R1]
         { []
         }
     {offset
       c3hY6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3hYd; else goto c3hYe;
       c3hYd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hYe: // global
           I64[Sp - 8] = block_c3hY4_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           call dec'_s3bs8_entry(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3bsi_info" {
     sat_s3bsi_info:
         const sat_s3bsi_entry;
         const 1;
         const 16;
 },
 _c3hY4() //  [R1]
         { []
         }
     {offset
       c3hY4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3hYh; else goto c3hYg;
       c3hYh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3hYg: // global
           _s3bsh::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bsh::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hY4_info" {
     block_c3hY4_info:
         const _c3hY4;
         const 0;
         const 30;
 },
 ds1_s3bse_entry() //  [R1]
         { []
         }
     {offset
       c3hYl: // global
           _s3bse::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3hYm; else goto c3hYn;
       c3hYn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hYp; else goto c3hYo;
       c3hYp: // global
           HpAlloc = 24;
           goto c3hYm;
       c3hYm: // global
           R1 = _s3bse::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hYo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bse::P64;
           _s3brE::P64 = P64[_s3bse::P64 + 16];
           _s3bs8::P64 = P64[_s3bse::P64 + 24];
           I64[Hp - 16] = sat_s3bsi_info;
           P64[Hp] = _s3bs8::P64;
           I64[Sp - 24] = block_c3hYi_info;
           R4 = _s3brE::P64;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3bse_info" {
     ds1_s3bse_info:
         const ds1_s3bse_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+1200;
 },
 _c3hYi() //  [R1, R2]
         { []
         }
     {offset
       c3hYi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hYs; else goto c3hYr;
       c3hYs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3hYr: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hYi_info" {
     block_c3hYi_info:
         const _c3hYi;
         const 0;
         const 30;
 },
 ds2_s3bsm_entry() //  [R1]
         { []
         }
     {offset
       c3hYA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3hYE; else goto c3hYF;
       c3hYE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3hYF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3hYx_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3hZI; else goto c3hYy;
       u3hZI: // global
           call _c3hYx(R1) args: 0, res: 0, upd: 0;
       c3hYy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s3bsm_info" {
     ds2_s3bsm_info:
         const ds2_s3bsm_entry;
         const 1;
         const 210453397520;
         const S3bQP_srt+1176;
 },
 _c3hYx() //  [R1]
         { []
         }
     {offset
       c3hYx: // global
           I64[Sp - 8] = block_c3hYD_info;
           _s3bsp::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3bsp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3hZH; else goto c3hYH;
       u3hZH: // global
           call _c3hYD(R1) args: 0, res: 0, upd: 0;
       c3hYH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hYx_info" {
     block_c3hYx_info:
         const _c3hYx;
         const 0;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3hYD() //  [R1]
         { []
         }
     {offset
       c3hYD: // global
           _s3bsp::P64 = P64[Sp + 8];
           if (%MO_S_Le_W64(I64[R1 + 7], 0)) goto c3hYR; else goto c3hZ7;
       c3hYR: // global
           I64[Sp + 8] = block_c3hYP_info;
           R3 = _s3bsp::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
       c3hZ7: // global
           I64[Sp + 8] = block_c3hZ6_info;
           R1 = _s3bsp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3hZJ; else goto c3hZ8;
       u3hZJ: // global
           call _c3hZ6(R1) args: 0, res: 0, upd: 0;
       c3hZ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hYD_info" {
     block_c3hYD_info:
         const _c3hYD;
         const 1;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3hYP() //  [R1]
         { []
         }
     {offset
       c3hYP: // global
           if (R1 & 7 == 1) goto u3hZF; else goto c3hZ1;
       u3hZF: // global
           Sp = Sp + 8;
           call _c3hZu() args: 0, res: 0, upd: 0;
       c3hZ1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hZ4; else goto c3hZ3;
       c3hZ4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hZ3: // global
           _s3bsu::P64 = P64[R1 + 6];
           _s3bsv::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3bsu::P64;
           P64[Hp] = _s3bsv::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hYP_info" {
     block_c3hYP_info:
         const _c3hYP;
         const 0;
         const 4294967326;
         const S3bQP_srt+1216;
 },
 _c3hZ6() //  [R1]
         { []
         }
     {offset
       c3hZ6: // global
           if (R1 & 7 == 1) goto c3hZe; else goto c3hZj;
       c3hZe: // global
           R1 = GHC.List.init2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3hZj: // global
           I64[Sp] = block_c3hZh_info;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.List.init1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hZ6_info" {
     block_c3hZ6_info:
         const _c3hZ6;
         const 0;
         const 210453397534;
         const S3bQP_srt+1176;
 },
 _c3hZh() //  [R1]
         { []
         }
     {offset
       c3hZh: // global
           I64[Sp] = block_c3hZn_info;
           R3 = R1;
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hZh_info" {
     block_c3hZh_info:
         const _c3hZh;
         const 0;
         const 141733920798;
         const S3bQP_srt+1176;
 },
 _c3hZn() //  [R1]
         { []
         }
     {offset
       c3hZn: // global
           if (R1 & 7 == 1) goto u3hZG; else goto c3hZy;
       u3hZG: // global
           Sp = Sp + 8;
           call _c3hZu() args: 0, res: 0, upd: 0;
       c3hZy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3hZB; else goto c3hZA;
       c3hZB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3hZA: // global
           _s3bsC::P64 = P64[R1 + 6];
           _s3bsD::P64 = P64[R1 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3bsC::P64;
           P64[Hp] = _s3bsD::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hZn_info" {
     block_c3hZn_info:
         const _c3hZn;
         const 0;
         const 4294967326;
         const S3bQP_srt+1216;
 },
 _c3hZu() //  []
         { []
         }
     {offset
       c3hZu: // global
           R1 = lvl18_r2UqR_closure;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3bsX_entry() //  [R1]
         { []
         }
     {offset
       c3i02: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3i0o; else goto c3i0p;
       c3i0o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i0p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3hZZ_info;
           _s3bse::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s3bse::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3i0x; else goto c3i00;
       u3i0x: // global
           call _c3hZZ(R1) args: 0, res: 0, upd: 0;
       c3i00: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bsX_info" {
     sat_s3bsX_info:
         const sat_s3bsX_entry;
         const 2;
         const 18;
 },
 _c3hZZ() //  [R1]
         { []
         }
     {offset
       c3hZZ: // global
           I64[Sp] = block_c3i05_info;
           _s3bsM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3bsM::I64;
           if (R1 & 7 != 0) goto u3i0w; else goto c3i06;
       u3i0w: // global
           call _c3i05(R1) args: 0, res: 0, upd: 0;
       c3i06: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hZZ_info" {
     block_c3hZZ_info:
         const _c3hZZ;
         const 1;
         const 30;
 },
 _c3i05() //  [R1]
         { []
         }
     {offset
       c3i05: // global
           I64[Sp] = block_c3i0a_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u3i0y; else goto c3i0b;
       u3i0y: // global
           call _c3i0a(R1) args: 0, res: 0, upd: 0;
       c3i0b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i05_info" {
     block_c3i05_info:
         const _c3i05;
         const 65;
         const 30;
 },
 _c3i0a() //  [R1]
         { []
         }
     {offset
       c3i0a: // global
           _s3bsT::I64 = I64[Sp + 8] + (I64[R1 + 7] - 1);
           I64[Sp + 8] = block_c3i0l_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = _s3bsT::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i0a_info" {
     block_c3i0a_info:
         const _c3i0a;
         const 65;
         const 30;
 },
 _c3i0l() //  [R1, R2]
         { []
         }
     {offset
       c3i0l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3i0v; else goto c3i0u;
       c3i0v: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3i0u: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i0l_info" {
     block_c3i0l_info:
         const _c3i0l;
         const 0;
         const 30;
 },
 sat_s3bsZ_entry() //  [R1]
         { []
         }
     {offset
       c3i0z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3i0B; else goto c3i0C;
       c3i0B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i0C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3hZQ_info;
           _s3brF::P64 = P64[R1 + 16];
           _s3bse::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s3brF::P64;
           P64[Sp - 24] = _s3bse::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3i0G; else goto c3hZR;
       u3i0G: // global
           call _c3hZQ(R1) args: 0, res: 0, upd: 0;
       c3hZR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bsZ_info" {
     sat_s3bsZ_info:
         const sat_s3bsZ_entry;
         const 3;
         const 15;
 },
 _c3hZQ() //  [R1]
         { []
         }
     {offset
       c3hZQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3i0F; else goto c3i0E;
       c3i0F: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3i0E: // global
           _s3bsK::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3bsX_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl19_r2UqS_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s3bsK::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3hZQ_info" {
     block_c3hZQ_info:
         const _c3hZQ;
         const 2;
         const 30;
 },
 sat_s3btb_entry() //  [R1]
         { []
         }
     {offset
       c3i16: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3i17; else goto c3i18;
       c3i17: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i18: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3i14_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call dec'_s3bs8_entry(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3btb_info" {
     sat_s3btb_info:
         const sat_s3btb_entry;
         const 1;
         const 8800387989520;
         const S3bQP_srt+1224;
 },
 _c3i14() //  [R1]
         { []
         }
     {offset
       c3i14: // global
           _s3bt9::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(0, _s3bt9::I64)) goto c3i1f; else goto c3i1g;
       c3i1f: // global
           R1 = lvl34_r2Ur8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c3i1g: // global
           R2 = _s3bt9::I64;
           Sp = Sp + 8;
           call $wxs3_r2Urf_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i14_info" {
     block_c3i14_info:
         const _c3i14;
         const 0;
         const 8800387989534;
         const S3bQP_srt+1224;
 },
 sat_s3btj_entry() //  [R1]
         { []
         }
     {offset
       c3i1A: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3btj_info" {
     sat_s3btj_info:
         const sat_s3btj_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1176;
 },
 n1_s3btm_entry() //  [R1]
         { []
         }
     {offset
       c3i1T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3i1U; else goto c3i1V;
       c3i1U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i1V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n1_s3btm_info" {
     n1_s3btm_info:
         const n1_s3btm_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1176;
 },
 sat_s3bts_entry() //  [R1]
         { []
         }
     {offset
       c3i2a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3i2b; else goto c3i2c;
       c3i2b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i2c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s3bto_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bts_info" {
     sat_s3bts_info:
         const sat_s3bts_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s3bto_entry() //  [R1, R2]
         { []
         }
     {offset
       c3i2g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3i2k; else goto c3i2j;
       c3i2k: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3i2j: // global
           if (R2 == 1) goto c3i2f; else goto c3i2e;
       c3i2f: // global
           _s3btn::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s3btn::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3i2e: // global
           I64[Hp - 48] = sat_s3bts_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s3bto_info" {
     $wxs4_s3bto_info:
         const $wxs4_s3bto_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s3btt_entry() //  [R1]
         { []
         }
     {offset
       c3i2m: // global
           _s3btt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3i2n; else goto c3i2o;
       c3i2o: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3i2q; else goto c3i2p;
       c3i2q: // global
           HpAlloc = 64;
           goto c3i2n;
       c3i2n: // global
           R1 = _s3btt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i2p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3btt::P64;
           _s3brE::P64 = P64[_s3btt::P64 + 16];
           _s3btk::I64 = -I64[_s3btt::P64 + 24];
           if (%MO_S_Ge_W64(0, _s3btk::I64)) goto c3i2s; else goto c3i2t;
       c3i2s: // global
           Hp = Hp - 64;
           R3 = _s3brE::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
       c3i2t: // global
           I64[Hp - 56] = n1_s3btm_info;
           P64[Hp - 40] = _s3brE::P64;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = lvl20_r2UqT_closure+1;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = $wxs4_s3bto_info;
           P64[Hp] = Hp - 30;
           R2 = _s3btk::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call $wxs4_s3bto_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3btt_info" {
     sat_s3btt_info:
         const sat_s3btt_entry;
         const 4294967297;
         const 4294967315;
         const S3bQP_srt+1176;
 },
 sat_s3btE_entry() //  [R1]
         { []
         }
     {offset
       c3i2V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3i2W; else goto c3i2X;
       c3i2W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i2X: // global
           I64[Sp - 8] = block_c3i2S_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3i36; else goto c3i2T;
       u3i36: // global
           call _c3i2S(R1) args: 0, res: 0, upd: 0;
       c3i2T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3btE_info" {
     sat_s3btE_info:
         const sat_s3btE_entry;
         const 1;
         const 16;
 },
 _c3i2S() //  [R1]
         { []
         }
     {offset
       c3i2S: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c3i34; else goto c3i35;
       c3i34: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3i35: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i2S_info" {
     block_c3i2S_info:
         const _c3i2S;
         const 0;
         const 30;
 },
 sat_s3btN_entry() //  [R1]
         { []
         }
     {offset
       c3i3m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3i3n; else goto c3i3o;
       c3i3n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i3o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs4_s3btJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3btN_info" {
     sat_s3btN_info:
         const sat_s3btN_entry;
         const 4294967297;
         const 19;
 },
 $wxs4_s3btJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3i3s: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3i3w; else goto c3i3v;
       c3i3w: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3i3v: // global
           if (R2 == 1) goto c3i3r; else goto c3i3q;
       c3i3r: // global
           _s3btI::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s3btI::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3i3q: // global
           I64[Hp - 48] = sat_s3btN_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.minExpt_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs4_s3btJ_info" {
     $wxs4_s3btJ_info:
         const $wxs4_s3btJ_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 sat_s3btR_entry() //  [R1]
         { []
         }
     {offset
       c3i3J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3i3K; else goto c3i3L;
       c3i3K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i3L: // global
           I64[Sp - 8] = block_c3i3G_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3i3U; else goto c3i3H;
       u3i3U: // global
           call _c3i3G(R1) args: 0, res: 0, upd: 0;
       c3i3H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3btR_info" {
     sat_s3btR_info:
         const sat_s3btR_entry;
         const 1;
         const 16;
 },
 _c3i3G() //  [R1]
         { []
         }
     {offset
       c3i3G: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto c3i3S; else goto c3i3T;
       c3i3S: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3i3T: // global
           R1 = GHC.Float.minExpt_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i3G_info" {
     block_c3i3G_info:
         const _c3i3G;
         const 0;
         const 30;
 },
 ds_s3bty_entry() //  [R1]
         { []
         }
     {offset
       c3i3V: // global
           _s3bty::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3i3W; else goto c3i3X;
       c3i3X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3i3Z; else goto c3i3Y;
       c3i3Z: // global
           HpAlloc = 40;
           goto c3i3W;
       c3i3W: // global
           R1 = _s3bty::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i3Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3bty::P64;
           _s3brE::P64 = P64[_s3bty::P64 + 16];
           _s3btu::P64 = P64[_s3bty::P64 + 24];
           _s3btz::I64 = -I64[_s3bty::P64 + 32];
           if (%MO_S_Ge_W64(0, _s3btz::I64)) goto c3i42; else goto c3i46;
       c3i42: // global
           I64[Hp - 32] = sat_s3btE_info;
           P64[Hp - 16] = _s3btu::P64;
           _c3i2O::P64 = Hp - 32;
           Hp = Hp - 16;
           I64[Sp - 24] = block_c3i40_info;
           R4 = _s3brE::P64;
           R3 = _c3i2O::P64;
           R2 = base_r2UqK_closure+1;
           Sp = Sp - 24;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
       c3i46: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Float.minExpt_closure+1;
           P64[Hp - 16] = _s3brE::P64;
           I64[Hp - 8] = $wxs4_s3btJ_info;
           P64[Hp] = Hp - 30;
           I64[Sp - 32] = block_c3i3y_info;
           R2 = _s3btz::I64;
           R1 = Hp - 7;
           P64[Sp - 24] = _s3btu::P64;
           Sp = Sp - 32;
           call $wxs4_s3btJ_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s3bty_info" {
     ds_s3bty_info:
         const ds_s3bty_entry;
         const 4294967298;
         const 12884901903;
         const S3bQP_srt+1192;
 },
 _c3i40() //  [R1, R2]
         { []
         }
     {offset
       c3i40: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i40_info" {
     block_c3i40_info:
         const _c3i40;
         const 0;
         const 4294967326;
         const S3bQP_srt+1192;
 },
 _c3i3y() //  [R1]
         { []
         }
     {offset
       c3i3y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3i49; else goto c3i48;
       c3i49: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3i48: // global
           I64[Hp - 16] = sat_s3btR_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c3i45_info;
           R4 = R1;
           R3 = Hp - 16;
           R2 = base_r2UqK_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$wroundTo_entry(R4,
                                          R3,
                                          R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i3y_info" {
     block_c3i3y_info:
         const _c3i3y;
         const 1;
         const 12884901918;
         const S3bQP_srt+1192;
 },
 _c3i45() //  [R1, R2]
         { []
         }
     {offset
       c3i45: // global
           R3 = R2;
           R2 = R1;
           Sp = Sp + 8;
           call $j_r2Urc_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i45_info" {
     block_c3i45_info:
         const _c3i45;
         const 0;
         const 4294967326;
         const S3bQP_srt+1192;
 },
 sat_s3bu7_entry() //  [R1]
         { []
         }
     {offset
       c3i4j: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3i4k; else goto c3i4l;
       c3i4k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i4l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c3i4g_info;
           _s3brv::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s3brv::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3i4T; else goto c3i4h;
       u3i4T: // global
           call _c3i4g(R1) args: 0, res: 0, upd: 0;
       c3i4h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bu7_info" {
     sat_s3bu7_info:
         const sat_s3bu7_entry;
         const 2;
         const 18;
 },
 _c3i4g() //  [R1]
         { []
         }
     {offset
       c3i4g: // global
           I64[Sp] = block_c3i4o_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u3i4S; else goto c3i4q;
       u3i4S: // global
           call _c3i4o(R1) args: 0, res: 0, upd: 0;
       c3i4q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i4g_info" {
     block_c3i4g_info:
         const _c3i4g;
         const 1;
         const 30;
 },
 _c3i4o() //  [R1]
         { []
         }
     {offset
       c3i4o: // global
           if (R1 & 7 == 1) goto c3i4x; else goto c3i4M;
       c3i4x: // global
           _s3brv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3i4u_info;
           R1 = _s3brv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3i4U; else goto c3i4y;
       u3i4U: // global
           call _c3i4u(R1) args: 0, res: 0, upd: 0;
       c3i4y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c3i4M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3i4P; else goto c3i4O;
       c3i4P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3i4O: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i4o_info" {
     block_c3i4o_info:
         const _c3i4o;
         const 1;
         const 30;
 },
 _c3i4u() //  [R1]
         { []
         }
     {offset
       c3i4u: // global
           if (R1 & 7 == 1) goto c3i4E; else goto c3i4I;
       c3i4E: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3i4I: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3i4u_info" {
     block_c3i4u_info:
         const _c3i4u;
         const 0;
         const 30;
 },
 sat_s3buc_entry() //  [R1]
         { []
         }
     {offset
       c3i53: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3i54; else goto c3i55;
       c3i54: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i55: // global
           I64[Sp - 24] = block_c3i50_info;
           _s3btv::P64 = P64[R1 + 24];
           _s3btw::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 16] = _s3btv::P64;
           I64[Sp - 8] = _s3btw::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3i5l; else goto c3i51;
       u3i5l: // global
           call _c3i50(R1) args: 0, res: 0, upd: 0;
       c3i51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3buc_info" {
     sat_s3buc_info:
         const sat_s3buc_entry;
         const 4294967298;
         const 15;
 },
 _c3i50() //  [R1]
         { []
         }
     {offset
       c3i50: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3i5a; else goto c3i59;
       c3i5a: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i59: // global
           _s3bu9::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3bu9::I64, 0)) goto c3i5j; else goto c3i5k;
       c3i5j: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3bu9::I64 + I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3i5k: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i50_info" {
     block_c3i50_info:
         const _c3i50;
         const 130;
         const 30;
 },
 sat_s3buu_entry() //  [R1]
         { []
         }
     {offset
       c3i5W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3i5X; else goto c3i5Y;
       c3i5X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i5Y: // global
           I64[Sp - 16] = block_c3i5P_info;
           _s3brv::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s3brv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3i6m; else goto c3i5Q;
       u3i6m: // global
           call _c3i5P(R1) args: 0, res: 0, upd: 0;
       c3i5Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3buu_info" {
     sat_s3buu_info:
         const sat_s3buu_entry;
         const 2;
         const 18;
 },
 _c3i5P() //  [R1]
         { []
         }
     {offset
       c3i5P: // global
           if (R1 & 7 == 1) goto c3i5T; else goto c3i5U;
       c3i5T: // global
           _s3brv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3i61_info;
           R1 = _s3brv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3i6l; else goto c3i63;
       u3i6l: // global
           call _c3i61(R1) args: 0, res: 0, upd: 0;
       c3i63: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3i5U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3i6j; else goto c3i6i;
       c3i6j: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i6i: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i5P_info" {
     block_c3i5P_info:
         const _c3i5P;
         const 1;
         const 30;
 },
 _c3i61() //  [R1]
         { []
         }
     {offset
       c3i61: // global
           if (R1 & 7 == 1) goto c3i69; else goto c3i6d;
       c3i69: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3i6d: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i61_info" {
     block_c3i61_info:
         const _c3i61;
         const 0;
         const 30;
 },
 sat_s3buB_entry() //  [R1]
         { []
         }
     {offset
       c3i6A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3i6B; else goto c3i6C;
       c3i6B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i6C: // global
           I64[Sp - 16] = block_c3i6t_info;
           _s3brv::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 8] = _s3brv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3i70; else goto c3i6u;
       u3i70: // global
           call _c3i6t(R1) args: 0, res: 0, upd: 0;
       c3i6u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3buB_info" {
     sat_s3buB_info:
         const sat_s3buB_entry;
         const 2;
         const 18;
 },
 _c3i6t() //  [R1]
         { []
         }
     {offset
       c3i6t: // global
           if (R1 & 7 == 1) goto c3i6x; else goto c3i6y;
       c3i6x: // global
           _s3brv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3i6F_info;
           R1 = _s3brv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3i6Z; else goto c3i6H;
       u3i6Z: // global
           call _c3i6F(R1) args: 0, res: 0, upd: 0;
       c3i6H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3i6y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3i6X; else goto c3i6W;
       c3i6X: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i6W: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i6t_info" {
     block_c3i6t_info:
         const _c3i6t;
         const 1;
         const 30;
 },
 _c3i6F() //  [R1]
         { []
         }
     {offset
       c3i6F: // global
           if (R1 & 7 == 1) goto c3i6N; else goto c3i6R;
       c3i6N: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3i6R: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i6F_info" {
     block_c3i6F_info:
         const _c3i6F;
         const 0;
         const 30;
 },
 sat_s3buG_entry() //  [R1]
         { []
         }
     {offset
       c3i7c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3i7d; else goto c3i7e;
       c3i7d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3i7e: // global
           I64[Sp - 16] = block_c3i76_info;
           R3 = P64[R1 + 24];
           R2 = GHC.Show.intToDigit_closure+1;
           P64[Sp - 8] = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3buG_info" {
     sat_s3buG_info:
         const sat_s3buG_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+1176;
 },
 _c3i76() //  [R1]
         { []
         }
     {offset
       c3i76: // global
           if (R1 & 7 == 1) goto c3i79; else goto c3i7a;
       c3i79: // global
           _s3brv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3i7h_info;
           R1 = _s3brv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3i7B; else goto c3i7j;
       u3i7B: // global
           call _c3i7h(R1) args: 0, res: 0, upd: 0;
       c3i7j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3i7a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3i7z; else goto c3i7y;
       c3i7z: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i7y: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl14_r2UqN_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i76_info" {
     block_c3i76_info:
         const _c3i76;
         const 1;
         const 30;
 },
 _c3i7h() //  [R1]
         { []
         }
     {offset
       c3i7h: // global
           if (R1 & 7 == 1) goto c3i7p; else goto c3i7t;
       c3i7p: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3i7t: // global
           R1 = lvl37_r2Urd_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i7h_info" {
     block_c3i7h_info:
         const _c3i7h;
         const 0;
         const 30;
 },
 $wdoFmt_s3brC_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3i7H: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3i7I; else goto u3ia4;
       c3i7I: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u3ia4: // global
           P64[Sp - 32] = R1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call _c3hWd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wdoFmt_s3brC_info" {
     $wdoFmt_s3brC_info:
         const $wdoFmt_s3brC_entry;
         const 2;
         const 9042190353301515;
         const 12884901911;
         const S3bQP_srt+1144;
 },
 _c3hWd() //  []
         { []
         }
     {offset
       c3hWd: // global
           I64[Sp - 16] = block_c3hWg_info;
           R1 = P64[Sp + 8];
           _s3brC::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s3brC::P64 + 13];
           P64[Sp + 8] = P64[_s3brC::P64 + 5];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ia9; else goto c3hWh;
       u3ia9: // global
           call _c3hWg(R1) args: 0, res: 0, upd: 0;
       c3hWh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3hWg() //  [R1]
         { []
         }
     {offset
       c3hWg: // global
           _c3i7G::P64 = R1 & 7;
           if (_c3i7G::P64 < 3) goto u3ia3; else goto c3i7F;
       u3ia3: // global
           _s3bru::P64 = P64[Sp + 24];
           if (_c3i7G::P64 < 2) goto c3i7D; else goto c3i7E;
       c3i7D: // global
           I64[Sp + 24] = block_c3hWl_info;
           R1 = _s3bru::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3iaa; else goto c3hWm;
       u3iaa: // global
           call _c3hWl(R1) args: 0, res: 0, upd: 0;
       c3hWm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3i7E: // global
           I64[Sp] = block_c3i1j_info;
           R1 = _s3bru::P64;
           if (R1 & 7 != 0) goto u3iab; else goto c3i1k;
       u3iab: // global
           call _c3i1j(R1) args: 0, res: 0, upd: 0;
       c3i1k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3i7F: // global
           I64[Sp + 8] = block_c3i9D_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3iac; else goto c3i9F;
       u3iac: // global
           call _c3i9D(R1) args: 0, res: 0, upd: 0;
       c3i9F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hWg_info" {
     block_c3hWg_info:
         const _c3hWg;
         const 5;
         const 9042190353301534;
         const S3bQP_srt+1144;
 },
 _c3hWl() //  [R1]
         { []
         }
     {offset
       c3hWl: // global
           _s3brE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3i7N; else goto c3i8s;
       c3i7N: // global
           I64[Sp + 8] = block_c3hWq_info;
           R3 = _s3brE::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3i8s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3i8v; else goto c3i8u;
       c3i8v: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i8u: // global
           _s3bs7::P64 = P64[R1 + 6];
           I64[Hp - 16] = dec'_s3bs8_info;
           P64[Hp] = _s3bs7::P64;
           I64[Sp - 8] = block_c3i0H_info;
           R1 = _s3brE::P64;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3iad; else goto c3i0I;
       u3iad: // global
           call _c3i0H(R1) args: 0, res: 0, upd: 0;
       c3i0I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hWl_info" {
     block_c3hWl_info:
         const _c3hWl;
         const 2;
         const 565118911905822;
         const S3bQP_srt+1176;
 },
 _c3hWq() //  [R1]
         { []
         }
     {offset
       c3hWq: // global
           if (R1 & 7 == 1) goto c3i7R; else goto c3i7T;
       c3i7R: // global
           R1 = lvl13_r2UqM_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3i7T: // global
           I64[Sp - 8] = block_c3hWv_info;
           _s3brK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3brK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3iae; else goto c3hWw;
       u3iae: // global
           call _c3hWv(R1) args: 0, res: 0, upd: 0;
       c3hWw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hWq_info" {
     block_c3hWq_info:
         const _c3hWq;
         const 1;
         const 12884901918;
         const S3bQP_srt+1232;
 },
 _c3hWv() //  [R1]
         { []
         }
     {offset
       c3hWv: // global
           if (I64[R1 + 7] == 48) goto c3i8g; else goto u3ia6;
       c3i8g: // global
           I64[Sp - 8] = block_c3i8f_info;
           _s3brL::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s3brL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3iaf; else goto c3i8h;
       u3iaf: // global
           call _c3i8f(R1) args: 0, res: 0, upd: 0;
       c3i8h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3ia6: // global
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c3hWD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3hWv_info" {
     block_c3hWv_info:
         const _c3hWv;
         const 2;
         const 4294967326;
         const S3bQP_srt+1240;
 },
 _c3i8f() //  [R1]
         { []
         }
     {offset
       c3i8f: // global
           if (R1 & 7 == 1) goto c3i8n; else goto u3ias;
       c3i8n: // global
           R1 = lvl16_r2UqP_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3ias: // global
           call _c3hWD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3i8f_info" {
     block_c3i8f_info:
         const _c3i8f;
         const 3;
         const 4294967326;
         const S3bQP_srt+1240;
 },
 _c3hWD() //  []
         { []
         }
     {offset
       c3hWD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3i7X; else goto c3i7W;
       c3i7X: // global
           HpAlloc = 24;
           I64[Sp] = block_c3hWD_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3i7W: // global
           I64[Hp - 16] = show_e'_s3brP_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c3hX2_info;
           R1 = P64[Sp + 16];
           P64[Sp + 24] = Hp - 16;
           if (R1 & 7 != 0) goto u3iah; else goto c3hX3;
       u3iah: // global
           call _c3hX2(R1) args: 0, res: 0, upd: 0;
       c3hX3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hWD_info" {
     block_c3hWD_info:
         const _c3hWD;
         const 3;
         const 30;
 },
 _c3hX2() //  [R1]
         { []
         }
     {offset
       c3hX2: // global
           _c3hWF::P64 = P64[Sp + 24];
           _s3brL::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3i80; else goto c3i86;
       c3i80: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3i83; else goto c3i82;
       c3i83: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i82: // global
           I64[Hp - 40] = sat_s3brX_info;
           P64[Hp - 24] = _c3hWF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3brL::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3i86: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3i89; else goto c3i88;
       c3i89: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i88: // global
           I64[Hp - 72] = sat_s3bs1_info;
           P64[Hp - 56] = _c3hWF::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3brL::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hX2_info" {
     block_c3hX2_info:
         const _c3hX2;
         const 131;
         const 30;
 },
 _c3i0H() //  [R1]
         { []
         }
     {offset
       c3i0H: // global
           if (R1 & 7 == 1) goto u3iai; else goto c3i8H;
       u3iai: // global
           call _c3hXU() args: 0, res: 0, upd: 0;
       c3i8H: // global
           I64[Sp - 8] = block_c3i0N_info;
           _s3bt3::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3bt3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3iaj; else goto c3i0O;
       u3iaj: // global
           call _c3i0N(R1) args: 0, res: 0, upd: 0;
       c3i0O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i0H_info" {
     block_c3i0H_info:
         const _c3i0H;
         const 3;
         const 563469644464158;
         const S3bQP_srt+1176;
 },
 _c3i0N() //  [R1]
         { []
         }
     {offset
       c3i0N: // global
           if (I64[R1 + 7] == 0) goto c3i8L; else goto u3ia5;
       c3i8L: // global
           _s3bt3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3i0V_info;
           R1 = _s3bt3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3iak; else goto c3i0W;
       u3iak: // global
           call _c3i0V(R1) args: 0, res: 0, upd: 0;
       c3i0W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3ia5: // global
           Sp = Sp + 8;
           call _c3hXU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3i0N_info" {
     block_c3i0N_info:
         const _c3i0N;
         const 4;
         const 563469644464158;
         const S3bQP_srt+1176;
 },
 _c3i0V() //  [R1]
         { []
         }
     {offset
       c3i0V: // global
           if (R1 & 7 == 1) goto c3i8P; else goto u3iam;
       c3i8P: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3i8S; else goto c3i8R;
       c3i8S: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i8R: // global
           I64[Hp - 64] = sat_s3btb_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl14_r2UqN_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl20_r2UqT_closure+1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3iam: // global
           call _c3hXU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3i0V_info" {
     block_c3i0V_info:
         const _c3i0V;
         const 3;
         const 563469644464158;
         const S3bQP_srt+1176;
 },
 _c3hXU() //  []
         { []
         }
     {offset
       c3hXU: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c3i8B; else goto c3i8A;
       c3i8B: // global
           HpAlloc = 168;
           I64[Sp] = block_c3hXU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3i8A: // global
           I64[Hp - 160] = ds1_s3bse_info;
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 8];
           I64[Hp - 128] = ds2_s3bsm_info;
           _c3hXW::P64 = Hp - 160;
           P64[Hp - 112] = _c3hXW::P64;
           I64[Hp - 104] = sat_s3bsZ_info;
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = _c3hXW::P64;
           _c3hYt::P64 = Hp - 128;
           P64[Hp - 72] = _c3hYt::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = lvl14_r2UqN_closure+1;
           P64[Hp - 48] = Hp - 104;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c3hYt::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hXU_info" {
     block_c3hXU_info:
         const _c3hXU;
         const 3;
         const 244813135902;
         const S3bQP_srt+1176;
 },
 _c3i1j() //  [R1]
         { []
         }
     {offset
       c3i1j: // global
           _s3brF::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c3i90; else goto c3i98;
       c3i90: // global
           I64[Sp + 24] = block_c3i1o_info;
           R1 = _s3brF::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u3ian; else goto c3i1p;
       u3ian: // global
           call _c3i1o(R1) args: 0, res: 0, upd: 0;
       c3i1p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3i98: // global
           I64[Sp] = block_c3i2w_info;
           _s3btu::P64 = P64[R1 + 6];
           R1 = _s3brF::P64;
           P64[Sp + 40] = _s3btu::P64;
           if (R1 & 7 != 0) goto u3iao; else goto c3i2x;
       u3iao: // global
           call _c3i2w(R1) args: 0, res: 0, upd: 0;
       c3i2x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i1j_info" {
     block_c3i1j_info:
         const _c3i1j;
         const 389;
         const 906238099486;
         const S3bQP_srt+1144;
 },
 _c3i1o() //  [R1]
         { []
         }
     {offset
       c3i1o: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3i93; else goto c3i92;
       c3i93: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i92: // global
           _s3brE::P64 = P64[Sp + 8];
           _s3bth::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3bth::I64, 0)) goto c3i95; else goto c3i96;
       c3i95: // global
           I64[Hp - 24] = sat_s3btj_info;
           P64[Hp - 8] = _s3brE::P64;
           _c3i1w::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _c3i1w::P64;
           R3 = GHC.Types.[]_closure+1;
           R2 = _s3bth::I64;
           Sp = Sp + 24;
           call $wf_r2UqX_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3i96: // global
           I64[Hp - 24] = sat_s3btt_info;
           P64[Hp - 8] = _s3brE::P64;
           I64[Hp] = _s3bth::I64;
           R3 = Hp - 24;
           R2 = lvl36_r2Urb_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i1o_info" {
     block_c3i1o_info:
         const _c3i1o;
         const 130;
         const 38654705694;
         const S3bQP_srt+1152;
 },
 _c3i2w() //  [R1]
         { []
         }
     {offset
       c3i2w: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3i9b; else goto c3i9a;
       c3i9b: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i9a: // global
           _s3brE::P64 = P64[Sp + 32];
           _s3btu::P64 = P64[Sp + 40];
           _s3btw::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3btw::I64, 0)) goto c3i9f; else goto c3i9g;
       c3i9f: // global
           I64[Hp - 112] = ds_s3bty_info;
           P64[Hp - 96] = _s3brE::P64;
           P64[Hp - 88] = _s3btu::P64;
           I64[Hp - 80] = _s3btw::I64;
           I64[Hp - 72] = sat_s3bu7_info;
           P64[Hp - 56] = P64[Sp + 8];
           _c3i2E::P64 = Hp - 112;
           P64[Hp - 48] = _c3i2E::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c3i2E::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3i9g: // global
           I64[Hp - 112] = sat_s3buc_info;
           P64[Hp - 96] = _s3btu::P64;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = _s3btw::I64;
           _c3i4W::P64 = Hp - 112;
           Hp = Hp - 80;
           I64[Sp] = block_c3i5m_info;
           R4 = _s3brE::P64;
           R3 = _c3i4W::P64;
           R2 = base_r2UqK_closure+1;
           I64[Sp + 40] = _s3btw::I64;
           call GHC.Float.$wroundTo_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i2w_info" {
     block_c3i2w_info:
         const _c3i2w;
         const 389;
         const 897648164894;
         const S3bQP_srt+1144;
 },
 _c3i5m() //  [R1, R2]
         { []
         }
     {offset
       c3i5m: // global
           I64[Sp] = block_c3i5o_info;
           R1 = R1;
           P64[Sp + 32] = R2;
           if (R1 & 7 != 0) goto u3iap; else goto c3i5p;
       u3iap: // global
           call _c3i5o(R1) args: 0, res: 0, upd: 0;
       c3i5p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i5m_info" {
     block_c3i5m_info:
         const _c3i5m;
         const 1925;
         const 73014444062;
         const S3bQP_srt+1144;
 },
 _c3i5o() //  [R1]
         { []
         }
     {offset
       c3i5o: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3i9k; else goto c3i9j;
       c3i9k: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i9j: // global
           _s3buf::P64 = P64[Sp + 32];
           _s3bui::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (%MO_S_Gt_W64(_s3bui::I64, 0)) goto c3i9m; else goto c3i9A;
       c3i9m: // global
           Hp = Hp - 32;
           I64[Sp] = block_c3i5z_info;
           R3 = _s3buf::P64;
           R2 = GHC.Show.intToDigit_closure+1;
           I64[Sp + 40] = _s3bui::I64;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3i9A: // global
           I64[Hp - 24] = sat_s3buG_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s3buf::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i5o_info" {
     block_c3i5o_info:
         const _c3i5o;
         const 1413;
         const 73014444062;
         const S3bQP_srt+1144;
 },
 _c3i5z() //  [R1]
         { []
         }
     {offset
       c3i5z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3i9p; else goto c3i9o;
       c3i9p: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i9o: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40];
           I64[Sp] = block_c3i5E_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.List.$wsplitAt'_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i5z_info" {
     block_c3i5z_info:
         const _c3i5z;
         const 1925;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3i5E() //  [R1, R2]
         { []
         }
     {offset
       c3i5E: // global
           I64[Sp] = block_c3i5G_info;
           R1 = R1;
           P64[Sp + 40] = R2;
           if (R1 & 7 != 0) goto u3iaq; else goto c3i5H;
       u3iaq: // global
           call _c3i5G(R1) args: 0, res: 0, upd: 0;
       c3i5H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i5E_info" {
     block_c3i5E_info:
         const _c3i5E;
         const 1925;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3i5G() //  [R1]
         { []
         }
     {offset
       c3i5G: // global
           _s3brv::P64 = P64[Sp + 8];
           _s3buo::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c3i9s; else goto c3i9w;
       c3i9s: // global
           Hp = Hp + 32;
           _s3bup::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3i9z; else goto c3i9u;
       c3i9u: // global
           I64[Hp - 24] = sat_s3buu_info;
           P64[Hp - 8] = _s3brv::P64;
           P64[Hp] = _s3buo::P64;
           R3 = Hp - 24;
           R2 = lvl23_r2UqW_closure;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c3i9w: // global
           Hp = Hp + 32;
           _s3bup::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3i9z; else goto c3i9y;
       c3i9z: // global
           HpAlloc = 32;
           R1 = _s3bup::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3i9y: // global
           I64[Hp - 24] = sat_s3buB_info;
           P64[Hp - 8] = _s3brv::P64;
           P64[Hp] = _s3buo::P64;
           R3 = Hp - 24;
           R2 = _s3bup::P64;
           Sp = Sp + 48;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3i5G_info" {
     block_c3i5G_info:
         const _c3i5G;
         const 901;
         const 4294967326;
         const S3bQP_srt+1144;
 },
 _c3i9D() //  [R1]
         { []
         }
     {offset
       c3i9D: // global
           _s3brE::P64 = P64[Sp + 24];
           _s3buH::P64 = R1;
           _s3buI::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s3buI::I64, 0)) goto c3i9U; else goto c3i9T;
       c3i9T: // global
           if (%MO_S_Gt_W64(_s3buI::I64, 7)) goto c3i9U; else goto c3i9Q;
       c3i9U: // global
           P64[Sp + 16] = GHC.Float.FFExponent_closure+1;
           P64[Sp + 24] = _s3brE::P64;
           P64[Sp + 32] = _s3buH::P64;
           Sp = Sp + 8;
           goto u3iau;
       c3i9Q: // global
           P64[Sp + 16] = GHC.Float.FFFixed_closure+2;
           P64[Sp + 24] = _s3brE::P64;
           P64[Sp + 32] = _s3buH::P64;
           Sp = Sp + 8;
           goto u3iau;
       u3iau: // global
           call _c3hWd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3i9D_info" {
     block_c3i9D_info:
         const _c3i9D;
         const 644;
         const 9042190353301534;
         const S3bQP_srt+1144;
 },
 sat_s3buS_entry() //  [R1]
         { []
         }
     {offset
       c3iaz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3iaA; else goto c3iaB;
       c3iaA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3iaB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3buS_info" {
     sat_s3buS_info:
         const sat_s3buS_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1104;
 },
 sat_s3buM_entry() //  [R1]
         { []
         }
     {offset
       c3iaT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3iaU; else goto c3iaV;
       c3iaU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3iaV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3buM_info" {
     sat_s3buM_info:
         const sat_s3buM_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . u3icr_srtd" {
     u3icr_srtd:
         const S3bQP_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 sat_s3buQ_entry() //  [R1]
         { []
         }
     {offset
       c3iaY: // global
           _s3buQ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3iaZ; else goto c3ib0;
       c3ib0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ib2; else goto c3ib1;
       c3ib2: // global
           HpAlloc = 32;
           goto c3iaZ;
       c3iaZ: // global
           R1 = _s3buQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ib1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3buQ::P64;
           _s3brs::P64 = P64[_s3buQ::P64 + 16];
           _s3brt::P64 = P64[_s3buQ::P64 + 24];
           _s3brw::P64 = P64[_s3buQ::P64 + 32];
           _s3brA::P64 = P64[_s3buQ::P64 + 40];
           _s3brC::P64 = P64[_s3buQ::P64 + 48];
           I64[Hp - 24] = sat_s3buM_info;
           P64[Hp - 8] = _s3brw::P64;
           P64[Hp] = _s3brA::P64;
           I64[Sp - 40] = block_c3iaW_info;
           R4 = Hp - 24;
           R3 = GHC.Float.expts4_closure;
           R2 = _s3brs::P64;
           P64[Sp - 32] = _s3brt::P64;
           P64[Sp - 24] = _s3brC::P64;
           Sp = Sp - 40;
           call GHC.Float.$wfloatToDigits_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3buQ_info" {
     sat_s3buQ_info:
         const sat_s3buQ_entry;
         const 5;
         const 18446744069414584335;
         const u3icr_srtd;
 },
 _c3iaW() //  [R1, R2]
         { []
         }
     {offset
       c3iaW: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call $wdoFmt_s3brC_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3iaW_info" {
     block_c3iaW_info:
         const _c3iaW;
         const 2;
         const 9042190353301534;
         const S3bQP_srt+1144;
 },
 sat_s3buZ_entry() //  [R1]
         { []
         }
     {offset
       c3iba: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3ibb; else goto c3ibc;
       c3ibb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ibc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Float.rationalToDouble5_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3buZ_info" {
     sat_s3buZ_info:
         const sat_s3buZ_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1104;
 },
 section ""relreadonly" . u3ics_srtd" {
     u3ics_srtd:
         const S3bQP_srt+752;
         const 72;
         const 13809778083936337921;
         const 195;
 },
 GHC.Float.formatRealFloatAlt_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ibh: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3ibi; else goto c3ibj;
       c3ibi: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.formatRealFloatAlt_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ibj: // global
           I64[Sp - 48] = block_c3hVO_info;
           _s3brs::P64 = R2;
           R2 = R2;
           I64[Sp - 64] = stg_ap_p_info;
           P64[Sp - 56] = R6;
           P64[Sp - 40] = _s3brs::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 64;
           call GHC.Float.isNaN_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.formatRealFloatAlt_info" {
     GHC.Float.formatRealFloatAlt_info:
         const GHC.Float.formatRealFloatAlt_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u3ics_srtd;
 },
 section ""relreadonly" . u3ict_srtd" {
     u3ict_srtd:
         const S3bQP_srt+752;
         const 71;
         const 13809778083936337921;
         const 67;
 },
 _c3hVO() //  [R1]
         { []
         }
     {offset
       c3hVO: // global
           if (R1 & 7 == 1) goto c3ibe; else goto c3ibf;
       c3ibe: // global
           I64[Sp] = block_c3hVS_info;
           R2 = P64[Sp + 8];
           call GHC.Float.$p1RealFloat_entry(R2) args: 8, res: 8, upd: 8;
       c3ibf: // global
           R1 = lvl31_r2Ur5_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hVO_info" {
     block_c3hVO_info:
         const _c3hVO;
         const 5;
         const 18446744069414584350;
         const u3ict_srtd;
 },
 section ""relreadonly" . u3icu_srtd" {
     u3icu_srtd:
         const S3bQP_srt+752;
         const 71;
         const 13809778083936337921;
         const 65;
 },
 _c3hVS() //  [R1]
         { []
         }
     {offset
       c3hVS: // global
           I64[Sp] = block_c3hVW_info;
           R2 = R1;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hVS_info" {
     block_c3hVS_info:
         const _c3hVS;
         const 5;
         const 18446744069414584350;
         const u3icu_srtd;
 },
 section ""relreadonly" . u3icv_srtd" {
     u3icv_srtd:
         const S3bQP_srt+752;
         const 71;
         const 13809778083936337921;
         const 65;
 },
 _c3hVW() //  [R1]
         { []
         }
     {offset
       c3hVW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ibo; else goto c3ibn;
       c3ibo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ibn: // global
           I64[Hp - 16] = $dNum_s3brA_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c3hW7_info;
           R2 = P64[Sp + 8];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Float.isInfinite_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hVW_info" {
     block_c3hVW_info:
         const _c3hVW;
         const 5;
         const 18446744069414584350;
         const u3icv_srtd;
 },
 section ""relreadonly" . u3icw_srtd" {
     u3icw_srtd:
         const S3bQP_srt+752;
         const 71;
         const 13809778083936337921;
         const 65;
 },
 _c3hW7() //  [R1]
         { []
         }
     {offset
       c3hW7: // global
           _c3hW0::P64 = P64[Sp + 16];
           _s3brz::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c3ibq; else goto c3ibZ;
       c3ibq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3ibt; else goto c3ibs;
       c3ibt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ibs: // global
           I64[Hp - 40] = $wdoFmt_s3brC_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           I64[Hp - 16] = sat_s3buS_info;
           P64[Hp] = _c3hW0::P64;
           I64[Sp + 8] = block_c3iaC_info;
           R2 = _s3brz::P64;
           P64[Sp + 40] = Hp - 16;
           P64[Sp + 48] = Hp - 37;
           Sp = Sp + 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
       c3ibZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ic2; else goto c3ic1;
       c3ic2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ic1: // global
           I64[Hp - 16] = sat_s3buZ_info;
           P64[Hp] = _c3hW0::P64;
           I64[Sp + 40] = block_c3ibY_info;
           R2 = _s3brz::P64;
           P64[Sp + 48] = Hp - 16;
           Sp = Sp + 40;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3hW7_info" {
     block_c3hW7_info:
         const _c3hW7;
         const 7;
         const 18446744069414584350;
         const u3icw_srtd;
 },
 section ""relreadonly" . u3icx_srtd" {
     u3icx_srtd:
         const S3bQP_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 _c3iaC() //  [R1]
         { []
         }
     {offset
       c3iaC: // global
           I64[Sp] = block_c3ibu_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 48];
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3iaC_info" {
     block_c3iaC_info:
         const _c3iaC;
         const 6;
         const 18446744069414584350;
         const u3icx_srtd;
 },
 section ""relreadonly" . u3icy_srtd" {
     u3icy_srtd:
         const S3bQP_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 _c3ibu() //  [R1]
         { []
         }
     {offset
       c3ibu: // global
           if (R1 & 7 == 1) goto c3ibG; else goto u3icp;
       c3ibG: // global
           I64[Sp] = block_c3ibD_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 48];
           Sp = Sp - 16;
           call GHC.Float.isNegativeZero_entry(R2) args: 24, res: 8, upd: 8;
       u3icp: // global
           call _c3iaJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3ibu_info" {
     block_c3ibu_info:
         const _c3ibu;
         const 518;
         const 18446744069414584350;
         const u3icy_srtd;
 },
 section ""relreadonly" . u3icz_srtd" {
     u3icz_srtd:
         const S3bQP_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 _c3ibD() //  [R1]
         { []
         }
     {offset
       c3ibD: // global
           if (R1 & 7 == 1) goto c3ibN; else goto u3icq;
       c3ibN: // global
           _s3brs::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3ibK_info;
           R4 = P64[Sp + 48];
           R3 = GHC.Float.expts4_closure;
           R2 = _s3brs::P64;
           Sp = Sp + 16;
           call GHC.Float.$wfloatToDigits_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
       u3icq: // global
           call _c3iaJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3ibD_info" {
     block_c3ibD_info:
         const _c3ibD;
         const 518;
         const 18446744069414584350;
         const u3icz_srtd;
 },
 _c3ibK() //  [R1, R2]
         { []
         }
     {offset
       c3ibK: // global
           R4 = R2;
           R3 = R1;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call $wdoFmt_s3brC_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ibK_info" {
     block_c3ibK_info:
         const _c3ibK;
         const 644;
         const 9042190353301534;
         const S3bQP_srt+1144;
 },
 section ""relreadonly" . u3icA_srtd" {
     u3icA_srtd:
         const S3bQP_srt+752;
         const 71;
         const 4586388454895517697;
         const 64;
 },
 _c3iaJ() //  []
         { []
         }
     {offset
       c3iaJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3ibz; else goto c3iby;
       c3ibz: // global
           HpAlloc = 80;
           I64[Sp] = block_c3iaJ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3iby: // global
           I64[Hp - 72] = sat_s3buQ_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Float.$fShowDouble3_closure+1;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3iaJ_info" {
     block_c3iaJ_info:
         const _c3iaJ;
         const 518;
         const 18446744069414584350;
         const u3icA_srtd;
 },
 _c3ibY() //  [R1]
         { []
         }
     {offset
       c3ibY: // global
           _s3brw::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3ic6_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s3brw::P64;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ibY_info" {
     block_c3ibY_info:
         const _c3ibY;
         const 2;
         const 12884901918;
         const S3bQP_srt+1256;
 },
 _c3ic6() //  [R1]
         { []
         }
     {offset
       c3ic6: // global
           if (R1 & 7 == 1) goto c3icd; else goto c3ich;
       c3icd: // global
           R1 = lvl27_r2Ur1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3ich: // global
           R1 = lvl29_r2Ur3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ic6_info" {
     block_c3ic6_info:
         const _c3ic6;
         const 0;
         const 12884901918;
         const S3bQP_srt+1256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.891377262 UTC

[section ""data" . GHC.Float.formatRealFloat_closure" {
     GHC.Float.formatRealFloat_closure:
         const GHC.Float.formatRealFloat_info;
         const 0;
 },
 GHC.Float.formatRealFloat_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3io7: // global
           R6 = R5;
           R5 = GHC.Types.False_closure+1;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.formatRealFloat_info" {
     GHC.Float.formatRealFloat_info:
         const GHC.Float.formatRealFloat_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3bQP_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.896064404 UTC

[section ""data" . GHC.Float.showFloat_closure" {
     GHC.Float.showFloat_closure:
         const GHC.Float.showFloat_info;
         const 0;
 },
 sat_s3bv7_entry() //  [R1]
         { []
         }
     {offset
       c3ion: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ioo; else goto c3iop;
       c3ioo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3iop: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 24];
           R5 = GHC.Types.False_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = GHC.Float.FFGeneric_closure+3;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.formatRealFloatAlt_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bv7_info" {
     sat_s3bv7_info:
         const sat_s3bv7_entry;
         const 2;
         const 4294967314;
         const S3bQP_srt+1320;
 },
 GHC.Float.showFloat_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ioq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3iou; else goto c3iot;
       c3iou: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.showFloat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3iot: // global
           I64[Hp - 24] = sat_s3bv7_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.showFloat_info" {
     GHC.Float.showFloat_info:
         const GHC.Float.showFloat_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.90293024 UTC

[section ""data" . GHC.Float.$fShowDouble2_closure" {
     GHC.Float.$fShowDouble2_closure:
         const GHC.Float.$fShowDouble2_info;
         const 0;
 },
 sat_s3bvb_entry() //  [R1]
         { []
         }
     {offset
       c3ioT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3ioU; else goto c3ioV;
       c3ioU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ioV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3ioQ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3ioZ; else goto c3ioR;
       u3ioZ: // global
           call _c3ioQ(R1) args: 0, res: 0, upd: 0;
       c3ioR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bvb_info" {
     sat_s3bvb_info:
         const sat_s3bvb_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1296;
 },
 _c3ioQ() //  [R1]
         { []
         }
     {offset
       c3ioQ: // global
           D1 = F64[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 8;
           call GHC.Float.$w$sformatRealFloatAlt_entry(D1,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3ioQ_info" {
     block_c3ioQ_info:
         const _c3ioQ;
         const 0;
         const 4294967326;
         const S3bQP_srt+1296;
 },
 GHC.Float.$fShowDouble2_entry() //  [R2]
         { []
         }
     {offset
       c3ip0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ip4; else goto c3ip3;
       c3ip4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Float.$fShowDouble2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ip3: // global
           I64[Hp - 16] = sat_s3bvb_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble2_info" {
     GHC.Float.$fShowDouble2_info:
         const GHC.Float.$fShowDouble2_entry;
         const 0;
         const 141733920782;
         const 4294967301;
         const S3bQP_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.910223197 UTC

[section ""data" . GHC.Float.$fShowDouble_$cshowsPrec_closure" {
     GHC.Float.$fShowDouble_$cshowsPrec_closure:
         const GHC.Float.$fShowDouble_$cshowsPrec_info;
         const 0;
 },
 GHC.Float.$fShowDouble_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3ipu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ipv; else goto c3ipw;
       c3ipv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowDouble_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ipw: // global
           I64[Sp - 16] = block_c3ipr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3ipA; else goto c3ips;
       u3ipA: // global
           call _c3ipr(R1) args: 0, res: 0, upd: 0;
       c3ips: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$cshowsPrec_info" {
     GHC.Float.$fShowDouble_$cshowsPrec_info:
         const GHC.Float.$fShowDouble_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+1336;
 },
 _c3ipr() //  [R1]
         { []
         }
     {offset
       c3ipr: // global
           D1 = F64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 16;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ipr_info" {
     block_c3ipr_info:
         const _c3ipr;
         const 1;
         const 4294967326;
         const S3bQP_srt+1336;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.91588719 UTC

[section ""data" . GHC.Float.$fShowDouble_$cshow_closure" {
     GHC.Float.$fShowDouble_$cshow_closure:
         const GHC.Float.$fShowDouble_$cshow_info;
         const 0;
 },
 GHC.Float.$fShowDouble_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c3ipS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ipT; else goto c3ipU;
       c3ipT: // global
           R2 = R2;
           R1 = GHC.Float.$fShowDouble_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ipU: // global
           I64[Sp - 8] = block_c3ipP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ipY; else goto c3ipQ;
       u3ipY: // global
           call _c3ipP(R1) args: 0, res: 0, upd: 0;
       c3ipQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$cshow_info" {
     GHC.Float.$fShowDouble_$cshow_info:
         const GHC.Float.$fShowDouble_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S3bQP_srt+1336;
 },
 _c3ipP() //  [R1]
         { []
         }
     {offset
       c3ipP: // global
           D1 = F64[R1 + 7];
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ipP_info" {
     block_c3ipP_info:
         const _c3ipP;
         const 0;
         const 4294967326;
         const S3bQP_srt+1336;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.922227608 UTC

[section ""data" . GHC.Float.$fShowDouble1_closure" {
     GHC.Float.$fShowDouble1_closure:
         const GHC.Float.$fShowDouble1_info;
         const 0;
 },
 GHC.Float.$fShowDouble1_entry() //  [R2]
         { []
         }
     {offset
       c3iqj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3iqk; else goto c3iql;
       c3iqk: // global
           R2 = R2;
           R1 = GHC.Float.$fShowDouble1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3iql: // global
           I64[Sp - 8] = block_c3iqg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3iqp; else goto c3iqh;
       u3iqp: // global
           call _c3iqg(R1) args: 0, res: 0, upd: 0;
       c3iqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble1_info" {
     GHC.Float.$fShowDouble1_info:
         const GHC.Float.$fShowDouble1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S3bQP_srt+1336;
 },
 _c3iqg() //  [R1]
         { []
         }
     {offset
       c3iqg: // global
           D1 = F64[R1 + 7];
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3iqg_info" {
     block_c3iqg_info:
         const _c3iqg;
         const 0;
         const 4294967326;
         const S3bQP_srt+1336;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.927484745 UTC

[section ""data" . GHC.Float.$fShowDouble_$cshowList_closure" {
     GHC.Float.$fShowDouble_$cshowList_closure:
         const GHC.Float.$fShowDouble_$cshowList_info;
         const 0;
 },
 GHC.Float.$fShowDouble_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3iqE: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Float.$fShowDouble1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowDouble_$cshowList_info" {
     GHC.Float.$fShowDouble_$cshowList_info:
         const GHC.Float.$fShowDouble_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3bQP_srt+1360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.930992573 UTC

[section ""data" . GHC.Float.$fShowDouble_closure" {
     GHC.Float.$fShowDouble_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Float.$fShowDouble_$cshowsPrec_closure+2;
         const GHC.Float.$fShowDouble_$cshow_closure+1;
         const GHC.Float.$fShowDouble_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.934703564 UTC

[section ""data" . GHC.Float.$fShowFloat2_closure" {
     GHC.Float.$fShowFloat2_closure:
         const GHC.Float.$fShowFloat2_info;
         const 0;
 },
 sat_s3bvp_entry() //  [R1]
         { []
         }
     {offset
       c3iqX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3iqY; else goto c3iqZ;
       c3iqY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3iqZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3iqU_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3ir3; else goto c3iqV;
       u3ir3: // global
           call _c3iqU(R1) args: 0, res: 0, upd: 0;
       c3iqV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3bvp_info" {
     sat_s3bvp_info:
         const sat_s3bvp_entry;
         const 1;
         const 4294967312;
         const S3bQP_srt+1248;
 },
 _c3iqU() //  [R1]
         { []
         }
     {offset
       c3iqU: // global
           F1 = F32[R1 + 7];
           R4 = GHC.Types.False_closure+1;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = GHC.Float.FFGeneric_closure+3;
           Sp = Sp + 8;
           call GHC.Float.$w$sformatRealFloatAlt1_entry(F1,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3iqU_info" {
     block_c3iqU_info:
         const _c3iqU;
         const 0;
         const 4294967326;
         const S3bQP_srt+1248;
 },
 GHC.Float.$fShowFloat2_entry() //  [R2]
         { []
         }
     {offset
       c3ir4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ir8; else goto c3ir7;
       c3ir8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Float.$fShowFloat2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ir7: // global
           I64[Hp - 16] = sat_s3bvp_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = GHC.Base.++_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat2_info" {
     GHC.Float.$fShowFloat2_info:
         const GHC.Float.$fShowFloat2_entry;
         const 0;
         const 140741783322638;
         const 4294967301;
         const S3bQP_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.942958637 UTC

[section ""data" . GHC.Float.$fShowFloat_$cshowsPrec_closure" {
     GHC.Float.$fShowFloat_$cshowsPrec_closure:
         const GHC.Float.$fShowFloat_$cshowsPrec_info;
         const 0;
 },
 GHC.Float.$fShowFloat_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3iry: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3irz; else goto c3irA;
       c3irz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Float.$fShowFloat_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3irA: // global
           I64[Sp - 16] = block_c3irv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3irE; else goto c3irw;
       u3irE: // global
           call _c3irv(R1) args: 0, res: 0, upd: 0;
       c3irw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$cshowsPrec_info" {
     GHC.Float.$fShowFloat_$cshowsPrec_info:
         const GHC.Float.$fShowFloat_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3bQP_srt+1368;
 },
 _c3irv() //  [R1]
         { []
         }
     {offset
       c3irv: // global
           F1 = F32[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = GHC.Float.$fShowFloat2_closure+1;
           Sp = Sp + 16;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3irv_info" {
     block_c3irv_info:
         const _c3irv;
         const 1;
         const 4294967326;
         const S3bQP_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.948614552 UTC

[section ""data" . GHC.Float.$fShowFloat_$cshow_closure" {
     GHC.Float.$fShowFloat_$cshow_closure:
         const GHC.Float.$fShowFloat_$cshow_info;
         const 0;
 },
 GHC.Float.$fShowFloat_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c3irW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3irX; else goto c3irY;
       c3irX: // global
           R2 = R2;
           R1 = GHC.Float.$fShowFloat_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3irY: // global
           I64[Sp - 8] = block_c3irT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3is2; else goto c3irU;
       u3is2: // global
           call _c3irT(R1) args: 0, res: 0, upd: 0;
       c3irU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$cshow_info" {
     GHC.Float.$fShowFloat_$cshow_info:
         const GHC.Float.$fShowFloat_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S3bQP_srt+1368;
 },
 _c3irT() //  [R1]
         { []
         }
     {offset
       c3irT: // global
           F1 = F32[R1 + 7];
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Float.$fShowFloat2_closure+1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3irT_info" {
     block_c3irT_info:
         const _c3irT;
         const 0;
         const 4294967326;
         const S3bQP_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.954233644 UTC

[section ""data" . GHC.Float.$fShowFloat1_closure" {
     GHC.Float.$fShowFloat1_closure:
         const GHC.Float.$fShowFloat1_info;
         const 0;
 },
 GHC.Float.$fShowFloat1_entry() //  [R2]
         { []
         }
     {offset
       c3isn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3iso; else goto c3isp;
       c3iso: // global
           R2 = R2;
           R1 = GHC.Float.$fShowFloat1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3isp: // global
           I64[Sp - 8] = block_c3isk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ist; else goto c3isl;
       u3ist: // global
           call _c3isk(R1) args: 0, res: 0, upd: 0;
       c3isl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat1_info" {
     GHC.Float.$fShowFloat1_info:
         const GHC.Float.$fShowFloat1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S3bQP_srt+1368;
 },
 _c3isk() //  [R1]
         { []
         }
     {offset
       c3isk: // global
           F1 = F32[R1 + 7];
           R3 = GHC.Float.minExpt_closure+1;
           R2 = GHC.Float.$fShowFloat2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat1_entry(F1,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3isk_info" {
     block_c3isk_info:
         const _c3isk;
         const 0;
         const 4294967326;
         const S3bQP_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.959224172 UTC

[section ""data" . GHC.Float.$fShowFloat_$cshowList_closure" {
     GHC.Float.$fShowFloat_$cshowList_closure:
         const GHC.Float.$fShowFloat_$cshowList_info;
         const 0;
 },
 GHC.Float.$fShowFloat_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3isI: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Float.$fShowFloat1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.$fShowFloat_$cshowList_info" {
     GHC.Float.$fShowFloat_$cshowList_info:
         const GHC.Float.$fShowFloat_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3bQP_srt+1392;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.962400619 UTC

[section ""data" . GHC.Float.$fShowFloat_closure" {
     GHC.Float.$fShowFloat_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Float.$fShowFloat_$cshowsPrec_closure+2;
         const GHC.Float.$fShowFloat_$cshow_closure+1;
         const GHC.Float.$fShowFloat_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.965656679 UTC

[section ""data" . GHC.Float.C:Floating_closure" {
     GHC.Float.C:Floating_closure:
         const GHC.Float.C:Floating_info;
 },
 GHC.Float.C:Floating_slow() //  [R1]
         { []
         }
     {offset
       c3isR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Float.C:Floating_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 152, res: 0, upd: 8;
     }
 },
 GHC.Float.C:Floating_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3isW: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c3it0; else goto c3isZ;
       c3it0: // global
           HpAlloc = 192;
           R1 = GHC.Float.C:Floating_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 192, res: 0, upd: 8;
       c3isZ: // global
           I64[Hp - 184] = GHC.Float.C:Floating_con_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           P64[Hp - 136] = P64[Sp];
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = P64[Sp + 128];
           P64[Hp] = P64[Sp + 136];
           R1 = Hp - 183;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.C:Floating_info" {
     GHC.Float.C:Floating_info:
         const GHC.Float.C:Floating_entry;
         const 0;
         const 14;
         const 98784247808;
         const 0;
         const 23;
         const GHC.Float.C:Floating_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.972977408 UTC

[section ""data" . GHC.Float.C:RealFloat_closure" {
     GHC.Float.C:RealFloat_closure:
         const GHC.Float.C:RealFloat_info;
 },
 GHC.Float.C:RealFloat_slow() //  [R1]
         { []
         }
     {offset
       c3its: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Float.C:RealFloat_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 96, res: 0, upd: 8;
     }
 },
 GHC.Float.C:RealFloat_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3itx: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3itB; else goto c3itA;
       c3itB: // global
           HpAlloc = 136;
           R1 = GHC.Float.C:RealFloat_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c3itA: // global
           I64[Hp - 128] = GHC.Float.C:RealFloat_con_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           R1 = Hp - 127;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.C:RealFloat_info" {
     GHC.Float.C:RealFloat_info:
         const GHC.Float.C:RealFloat_entry;
         const 0;
         const 14;
         const 68719476736;
         const 0;
         const 16;
         const GHC.Float.C:RealFloat_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.977744824 UTC

[section ""data" . GHC.Float.FFExponent_closure" {
     GHC.Float.FFExponent_closure:
         const GHC.Float.FFExponent_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.979317781 UTC

[section ""data" . GHC.Float.FFFixed_closure" {
     GHC.Float.FFFixed_closure:
         const GHC.Float.FFFixed_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.980923711 UTC

[section ""data" . GHC.Float.FFGeneric_closure" {
     GHC.Float.FFGeneric_closure:
         const GHC.Float.FFGeneric_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.983142456 UTC

[section ""cstring" . i3itZ_str" {
     i3itZ_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,67,58,70,108,111,97,116,105,110,103]
 },
 GHC.Float.C:Floating_con_entry() //  [R1]
         { []
         }
     {offset
       c3itY: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.C:Floating_con_info" {
     GHC.Float.C:Floating_con_info:
         const GHC.Float.C:Floating_con_entry;
         const 23;
         const 1;
         const i3itZ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.987122352 UTC

[section ""cstring" . i3iu6_str" {
     i3iu6_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,67,58,82,101,97,108,70,108,111,97,116]
 },
 GHC.Float.C:RealFloat_con_entry() //  [R1]
         { []
         }
     {offset
       c3iu5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.C:RealFloat_con_info" {
     GHC.Float.C:RealFloat_con_info:
         const GHC.Float.C:RealFloat_con_entry;
         const 16;
         const 1;
         const i3iu6_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.990161736 UTC

[section ""relreadonly" . GHC.Float.FFFormat_closure_tbl" {
     GHC.Float.FFFormat_closure_tbl:
         const GHC.Float.FFExponent_closure+1;
         const GHC.Float.FFFixed_closure+2;
         const GHC.Float.FFGeneric_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.99203073 UTC

[section ""cstring" . i3iue_str" {
     i3iue_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,70,70,69,120,112,111,110,101,110,116]
 },
 GHC.Float.FFExponent_con_entry() //  [R1]
         { []
         }
     {offset
       c3iud: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.FFExponent_con_info" {
     GHC.Float.FFExponent_con_info:
         const GHC.Float.FFExponent_con_entry;
         const 4294967296;
         const 3;
         const i3iue_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.995234353 UTC

[section ""cstring" . i3iul_str" {
     i3iul_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,70,70,70,105,120,101,100]
 },
 GHC.Float.FFFixed_con_entry() //  [R1]
         { []
         }
     {offset
       c3iuk: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.FFFixed_con_info" {
     GHC.Float.FFFixed_con_info:
         const GHC.Float.FFFixed_con_entry;
         const 4294967296;
         const 4294967299;
         const i3iul_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:55.998287804 UTC

[section ""cstring" . i3ius_str" {
     i3ius_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,108,111,97,116,46,70,70,71,101,110,101,114,105,99]
 },
 GHC.Float.FFGeneric_con_entry() //  [R1]
         { []
         }
     {offset
       c3iur: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Float.FFGeneric_con_info" {
     GHC.Float.FFGeneric_con_info:
         const GHC.Float.FFGeneric_con_entry;
         const 4294967296;
         const 8589934595;
         const i3ius_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:56.002747594 UTC

[section ""relreadonly" . S3bQP_srt" {
     S3bQP_srt:
         const sat_s3aC6_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Float.rationalToDouble5_closure;
         const GHC.Float.$fRealDouble1_closure;
         const $w$j_r2Upx_closure;
         const GHC.Integer.Type.shiftRInteger_closure;
         const GHC.Integer.Logarithms.Internals.roundingMode#_closure;
         const GHC.Integer.Logarithms.Internals.integerLog2#_step_closure;
         const GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure;
         const GHC.Float.$w$sfromRat''_closure;
         const GHC.Float.fromRat''_$sfromRat''1_closure;
         const GHC.Float.rationalToDouble_closure;
         const GHC.Float.rationalToDouble1_closure;
         const GHC.Float.rationalToDouble2_closure;
         const GHC.Float.rationalToDouble3_closure;
         const GHC.Float.$fFractionalDouble_$cfromRational_closure;
         const GHC.Float.$fFractionalDouble_closure;
         const GHC.Float.$fEnumDouble_$snumericEnumFromThen_closure;
         const GHC.Real.$wnumericEnumFrom_closure;
         const GHC.Float.$fEnumDouble_$snumericEnumFrom_closure;
         const $w$j1_r2Upy_closure;
         const GHC.Float.$w$sfromRat''1_closure;
         const GHC.Float.fromRat''_$sfromRat''_closure;
         const GHC.Float.rationalToFloat_closure;
         const GHC.Float.rationalToFloat1_closure;
         const GHC.Float.rationalToFloat2_closure;
         const GHC.Float.rationalToFloat3_closure;
         const GHC.Float.$fFractionalFloat_$cfromRational_closure;
         const GHC.Float.$fFractionalFloat_closure;
         const GHC.Float.$fEnumFloat_$snumericEnumFromThen_closure;
         const GHC.Float.$fEnumFloat_$snumericEnumFrom_closure;
         const sat_s3aJb_closure;
         const GHC.Float.$fRealFloatDouble5_closure;
         const GHC.Real.^_closure;
         const GHC.Real.$fIntegralInt_closure;
         const GHC.Float.$w$cproperFraction1_closure;
         const GHC.Float.$fRealFracFloat_$cproperFraction_closure;
         const GHC.Float.$fRealFracFloat_$ctruncate_closure;
         const GHC.Float.$fRealDouble1_closure;
         const GHC.Float.$fRealFracFloat_$cceiling_closure;
         const GHC.Float.$fRealFracFloat_$cfloor_closure;
         const GHC.Real.even_closure;
         const GHC.Float.$w$cround1_closure;
         const GHC.Float.$fRealFracFloat_$cround_closure;
         const GHC.Float.ConversionUtils.elimZerosInt#_closure;
         const GHC.Float.$w$ctoRational1_closure;
         const GHC.Float.$fRealFloat_$ctoRational_closure;
         const GHC.Integer.Type.decodeDoubleInteger_closure;
         const GHC.Float.$w$ctoRational_closure;
         const GHC.Float.$fRealDouble_$ctoRational_closure;
         const GHC.Float.$w$cexponent1_closure;
         const GHC.Float.rationalToDouble5_closure;
         const GHC.Float.$fRealFloatFloat_$cexponent_closure;
         const GHC.Float.$fRealFloatDouble_$cdecodeFloat_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.^1_closure;
         const GHC.Real.$wf_closure;
         const GHC.Float.$w$cproperFraction_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Float.$fRealFracDouble_$cproperFraction_closure;
         const GHC.Float.$fRealFracDouble_$ctruncate_closure;
         const GHC.Float.$fRealFracDouble_$cceiling_closure;
         const GHC.Float.$fRealFracDouble_$cfloor_closure;
         const GHC.Float.$w$cexponent_closure;
         const GHC.Float.$fRealFloatDouble_$cexponent_closure;
         const GHC.Float.$fRealFloatDouble_$csignificand_closure;
         const GHC.Float.$w$cround_closure;
         const GHC.Float.$fRealFracDouble_$cround_closure;
         const GHC.Float.$fRealFloatDouble5_closure;
         const GHC.Float.$dmatan2_closure;
         const GHC.Float.$dmexpm1_closure;
         const GHC.Float.$fRealDouble1_closure;
         const GHC.Float.$dmlog1p_closure;
         const lvl1_r2Upz_closure;
         const GHC.Float.$dmsqrt_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Float.$wroundTo_closure;
         const GHC.Float.roundTo1_closure;
         const GHC.Float.roundTo_closure;
         const GHC.Float.$w$cscaleFloat_closure;
         const GHC.Integer.Type.decodeDoubleInteger_closure;
         const GHC.Float.$fRealFloatDouble_$cscaleFloat_closure;
         const GHC.Float.$fFloatingDouble_$clog1mexp_closure;
         const lvl4_r2UqC_closure;
         const GHC.Float.$fFloatingFloat_$clog1mexp_closure;
         const lvl5_r2UqD_closure;
         const GHC.Arr.$windexError_closure;
         const GHC.Float.expts2_closure;
         const lvl7_r2UqF_closure;
         const GHC.Arr.arrEleBottom_closure;
         const GHC.Float.expts1_closure;
         const sat_s3b00_closure;
         const GHC.Float.expts5_closure;
         const GHC.Float.expts4_closure;
         const GHC.Real.$wf_closure;
         const GHC.Real.^1_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Float.expts3_closure;
         const GHC.Integer.Logarithms.integerLogBase#_closure;
         const GHC.Float.$wintegerLogBase_closure;
         const GHC.Integer.Logarithms.Internals.integerLog2#_step_closure;
         const GHC.Float.integerLogBase_closure;
         const GHC.Float.$dmexponent_closure;
         const GHC.Float.rationalToDouble5_closure;
         const GHC.Float.showSignedFloat_closure;
         const GHC.Float.$dmscaleFloat_closure;
         const GHC.Integer.Type.shiftRInteger_closure;
         const GHC.Float.$fRealDouble1_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Float.$wfromRat''_closure;
         const GHC.Float.fromRat''_closure;
         const GHC.Float.$w$cfromEnum_closure;
         const GHC.Float.$fEnumDouble_$cfromEnum_closure;
         const GHC.Real.numericEnumFromTo_closure;
         const GHC.Float.$fFractionalDouble_closure;
         const GHC.Real.numericEnumFromThenTo_closure;
         const GHC.Float.expts_closure;
         const GHC.Float.expts10_closure;
         const GHC.Float.$wexpt_closure;
         const GHC.Float.expt1_closure;
         const GHC.Float.expt_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$s$cround_closure;
         const GHC.Real.$w$s$c/_closure;
         const GHC.Real.$w$s$ccompare_closure;
         const GHC.Float.fromRat'_closure;
         const GHC.Float.$wfromRat_closure;
         const GHC.Float.fromRat_closure;
         const sat_s3bat_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const lvl9_r2UqH_closure;
         const lvl10_r2UqI_closure;
         const GHC.Float.$w$sfloatToDigits1_closure;
         const GHC.Integer.Type.decodeDoubleInteger_closure;
         const lvl11_r2UqJ_closure;
         const GHC.Float.$w$sfloatToDigits_closure;
         const GHC.Float.rationalToDouble5_closure;
         const GHC.Float.$wfloatToDigits_closure;
         const GHC.Float.floatToDigits_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Exception.Base.patError_closure;
         const lvl23_r2UqW_closure;
         const $wf_r2UqX_closure;
         const $wxs1_r2Ura_closure;
         const lvl35_r2Ur9_closure;
         const GHC.Show.intToDigit_closure;
         const lvl25_r2UqZ_closure;
         const $j_r2Urc_closure;
         const GHC.Float.$wroundTo_closure;
         const GHC.List.init2_closure;
         const lvl18_r2UqR_closure;
         const lvl34_r2Ur8_closure;
         const lvl13_r2UqM_closure;
         const lvl16_r2UqP_closure;
         const GHC.Float.$w$sformatRealFloatAlt1_closure;
         const lvl27_r2Ur1_closure;
         const lvl29_r2Ur3_closure;
         const lvl31_r2Ur5_closure;
         const GHC.Float.$fShowFloat_$sformatRealFloatAlt_closure;
         const $wxs2_r2Ure_closure;
         const GHC.Float.$w$sformatRealFloatAlt_closure;
         const GHC.Float.$fShowDouble_$sformatRealFloatAlt_closure;
         const $wxs3_r2Urf_closure;
         const GHC.Float.formatRealFloatAlt_closure;
         const GHC.Float.showFloat_closure;
         const GHC.Float.$fShowDouble2_closure;
         const GHC.Float.$fShowDouble_$cshowsPrec_closure;
         const GHC.Float.$fShowDouble_$cshow_closure;
         const GHC.Float.$fShowDouble1_closure;
         const GHC.Float.$fShowFloat2_closure;
         const GHC.Float.$fShowFloat_$cshowsPrec_closure;
         const GHC.Float.$fShowFloat_$cshow_closure;
         const GHC.Float.$fShowFloat1_closure;
 }]

