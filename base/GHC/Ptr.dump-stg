
==================== Pre unarise: ====================
2018-03-16 15:59:00.191054989 UTC

GHC.Ptr.$fShowFunPtr4 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

GHC.Ptr.$fShowFunPtr3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['x'#];

GHC.Ptr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<L,U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_s47xQ w_s47xR]
        let {
          ls_s47xS :: [GHC.Types.Char]
          [LclId] =
              [ww_s47xQ] \u []
                  let {
                    sat_s47xV [Occ=Once] :: GHC.Integer.Type.Integer
                    [LclId] =
                        [ww_s47xQ] \u []
                            case addr2Int# [ww_s47xQ] of sat_s47xT {
                              __DEFAULT ->
                                  case int2Word# [sat_s47xT] of sat_s47xU {
                                    __DEFAULT -> GHC.Integer.Type.wordToInteger sat_s47xU;
                                  };
                            };
                  } in 
                    Numeric.showIntAtBase
                        GHC.Real.$fIntegralInteger
                        GHC.Show.$fShowInteger
                        Numeric.showHex1
                        GHC.Show.intToDigit
                        sat_s47xV
                        GHC.Types.[]; } in
        let {
          sat_s47y6 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_s47xR ls_s47xS] \u []
                  case GHC.List.$wlenAcc ls_s47xS 0# of ww2_s47xW {
                    __DEFAULT ->
                        case -# [16# ww2_s47xW] of y_s47xX [Dmd=<S,U>] {
                          __DEFAULT ->
                              case <# [0# y_s47xX] of {
                                __DEFAULT -> GHC.Base.++ ls_s47xS w_s47xR;
                                1# ->
                                    let {
                                      n_s47xZ [Occ=OnceL] :: [GHC.Types.Char]
                                      [LclId] =
                                          [w_s47xR ls_s47xS] \u []
                                              GHC.Base.++ ls_s47xS w_s47xR; } in
                                    let {
                                      lvl_s47y0 [Occ=OnceL] :: [GHC.Types.Char]
                                      [LclId, Unf=OtherCon []] =
                                          CCCS :! [GHC.Ptr.$fShowFunPtr4 n_s47xZ]; } in
                                    let {
                                      $wxs_s47y1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                        :: GHC.Prim.Int# -> [GHC.Types.Char]
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                          sat-only [lvl_s47y0 $wxs_s47y1] \r [ww1_s47y2]
                                              case ww1_s47y2 of ds1_s47y3 {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s47y5 [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [$wxs_s47y1 ds1_s47y3] \u []
                                                              case -# [ds1_s47y3 1#] of sat_s47y4 {
                                                                __DEFAULT -> $wxs_s47y1 sat_s47y4;
                                                              };
                                                    } in  : [GHC.Ptr.$fShowFunPtr4 sat_s47y5];
                                                1# -> lvl_s47y0;
                                              };
                                    } in  $wxs_s47y1 y_s47xX;
                              };
                        };
                  }; } in
        let {
          sat_s47y7 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              CCCS :! [GHC.Ptr.$fShowFunPtr3 sat_s47y6];
        } in  (#,#) [GHC.Ptr.$fShowFunPtr4 sat_s47y7];

GHC.Ptr.$fShowFunPtr_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Types.Int -> GHC.Ptr.Ptr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(U)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s47y8 w1_s47y9 w2_s47ya]
        case w1_s47y9 of {
          GHC.Ptr.Ptr ww1_s47yc [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s47yc w2_s47ya of {
                (#,#) ww3_s47ye [Occ=Once] ww4_s47yf [Occ=Once] ->
                    : [ww3_s47ye ww4_s47yf];
              };
        };

GHC.Ptr.$fShowFunPtr2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Ptr.$fShowPtr_$cshow
  :: forall a. GHC.Ptr.Ptr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [x_s47yg]
        case x_s47yg of {
          GHC.Ptr.Ptr ww1_s47yi [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s47yi GHC.Types.[] of {
                (#,#) ww3_s47yk [Occ=Once] ww4_s47yl [Occ=Once] ->
                    : [ww3_s47yk ww4_s47yl];
              };
        };

GHC.Ptr.$fShowPtr1 :: forall a. GHC.Ptr.Ptr a -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [w_s47ym w1_s47yn]
        case w_s47ym of {
          GHC.Ptr.Ptr ww1_s47yp [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s47yp w1_s47yn of {
                (#,#) ww3_s47yr [Occ=Once] ww4_s47ys [Occ=Once] ->
                    : [ww3_s47yr ww4_s47ys];
              };
        };

GHC.Ptr.$fShowPtr_$cshowList
  :: forall a. [GHC.Ptr.Ptr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s47yt s_s47yu]
        GHC.Show.showList__ GHC.Ptr.$fShowPtr1 ls_s47yt s_s47yu;

GHC.Ptr.$fShowPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.Ptr.Ptr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Ptr.$fShowFunPtr_$cshowsPrec
                                    GHC.Ptr.$fShowPtr_$cshow
                                    GHC.Ptr.$fShowPtr_$cshowList];

GHC.Ptr.$fOrdFunPtr_$c<
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47yv b_s47yw]
        case a1_s47yv of {
          GHC.Ptr.FunPtr a2_s47yy [Occ=Once] ->
              case b_s47yw of {
                GHC.Ptr.FunPtr b1_s47yA [Occ=Once] ->
                    case ltAddr# [a2_s47yy b1_s47yA] of sat_s47yB {
                      __DEFAULT -> tagToEnum# [sat_s47yB];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$ccompare
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47yC b_s47yD]
        case a1_s47yC of {
          GHC.Ptr.FunPtr a2_s47yF ->
              case b_s47yD of {
                GHC.Ptr.FunPtr b1_s47yH ->
                    case ltAddr# [a2_s47yF b1_s47yH] of {
                      __DEFAULT ->
                          case eqAddr# [a2_s47yF b1_s47yH] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr_$c==
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s47yK ds1_s47yL]
        case ds_s47yK of {
          GHC.Ptr.FunPtr a1_s47yN [Occ=Once] ->
              case ds1_s47yL of {
                GHC.Ptr.FunPtr b1_s47yP [Occ=Once] ->
                    case eqAddr# [a1_s47yN b1_s47yP] of sat_s47yQ {
                      __DEFAULT -> tagToEnum# [sat_s47yQ];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s47yR eta1_s47yS]
        case eta_s47yR of {
          GHC.Ptr.FunPtr a1_s47yU [Occ=Once] ->
              case eta1_s47yS of {
                GHC.Ptr.FunPtr b1_s47yW [Occ=Once] ->
                    case eqAddr# [a1_s47yU b1_s47yW] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Ptr.FunPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Ptr.$fEqFunPtr_$c==
                                     GHC.Ptr.$fEqFunPtr_$c/=];

GHC.Ptr.$fOrdFunPtr_$c<=
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47yY b_s47yZ]
        case b_s47yZ of {
          GHC.Ptr.FunPtr a2_s47z1 [Occ=Once] ->
              case a1_s47yY of {
                GHC.Ptr.FunPtr b1_s47z3 [Occ=Once] ->
                    case ltAddr# [a2_s47z1 b1_s47z3] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$cmax
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s47z5 y_s47z6]
        case y_s47z6 of wild_s47z7 {
          GHC.Ptr.FunPtr a1_s47z8 [Occ=Once] ->
              case x_s47z5 of wild1_s47z9 {
                GHC.Ptr.FunPtr b1_s47za [Occ=Once] ->
                    case ltAddr# [a1_s47z8 b1_s47za] of {
                      __DEFAULT -> wild_s47z7;
                      1# -> wild1_s47z9;
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$c>=
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47zc b_s47zd]
        case a1_s47zc of {
          GHC.Ptr.FunPtr a2_s47zf [Occ=Once] ->
              case b_s47zd of {
                GHC.Ptr.FunPtr b1_s47zh [Occ=Once] ->
                    case ltAddr# [a2_s47zf b1_s47zh] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$c>
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47zj b_s47zk]
        case b_s47zk of {
          GHC.Ptr.FunPtr a2_s47zm [Occ=Once] ->
              case a1_s47zj of {
                GHC.Ptr.FunPtr b1_s47zo [Occ=Once] ->
                    case ltAddr# [a2_s47zm b1_s47zo] of sat_s47zp {
                      __DEFAULT -> tagToEnum# [sat_s47zp];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$cmin
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s47zq y_s47zr]
        case y_s47zr of wild_s47zs {
          GHC.Ptr.FunPtr a1_s47zt [Occ=Once] ->
              case x_s47zq of wild1_s47zu {
                GHC.Ptr.FunPtr b1_s47zv [Occ=Once] ->
                    case ltAddr# [a1_s47zt b1_s47zv] of {
                      __DEFAULT -> wild1_s47zu;
                      1# -> wild_s47zs;
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.Ptr.FunPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Ptr.$fEqFunPtr
                                      GHC.Ptr.$fOrdFunPtr_$ccompare
                                      GHC.Ptr.$fOrdFunPtr_$c<
                                      GHC.Ptr.$fOrdFunPtr_$c<=
                                      GHC.Ptr.$fOrdFunPtr_$c>
                                      GHC.Ptr.$fOrdFunPtr_$c>=
                                      GHC.Ptr.$fOrdFunPtr_$cmax
                                      GHC.Ptr.$fOrdFunPtr_$cmin];

GHC.Ptr.$fOrdPtr_$c<
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47zx b_s47zy]
        case a1_s47zx of {
          GHC.Ptr.Ptr a2_s47zA [Occ=Once] ->
              case b_s47zy of {
                GHC.Ptr.Ptr b1_s47zC [Occ=Once] ->
                    case ltAddr# [a2_s47zA b1_s47zC] of sat_s47zD {
                      __DEFAULT -> tagToEnum# [sat_s47zD];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$ccompare
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47zE b_s47zF]
        case a1_s47zE of {
          GHC.Ptr.Ptr a2_s47zH ->
              case b_s47zF of {
                GHC.Ptr.Ptr b1_s47zJ ->
                    case ltAddr# [a2_s47zH b1_s47zJ] of {
                      __DEFAULT ->
                          case eqAddr# [a2_s47zH b1_s47zJ] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.Ptr.$fEqPtr_$c==
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s47zM ds1_s47zN]
        case ds_s47zM of {
          GHC.Ptr.Ptr a1_s47zP [Occ=Once] ->
              case ds1_s47zN of {
                GHC.Ptr.Ptr b1_s47zR [Occ=Once] ->
                    case eqAddr# [a1_s47zP b1_s47zR] of sat_s47zS {
                      __DEFAULT -> tagToEnum# [sat_s47zS];
                    };
              };
        };

GHC.Ptr.$fEqPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s47zT eta1_s47zU]
        case eta_s47zT of {
          GHC.Ptr.Ptr a1_s47zW [Occ=Once] ->
              case eta1_s47zU of {
                GHC.Ptr.Ptr b1_s47zY [Occ=Once] ->
                    case eqAddr# [a1_s47zW b1_s47zY] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fEqPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Ptr.Ptr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Ptr.$fEqPtr_$c==
                                     GHC.Ptr.$fEqPtr_$c/=];

GHC.Ptr.$fOrdPtr_$c<=
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47A0 b_s47A1]
        case b_s47A1 of {
          GHC.Ptr.Ptr a2_s47A3 [Occ=Once] ->
              case a1_s47A0 of {
                GHC.Ptr.Ptr b1_s47A5 [Occ=Once] ->
                    case ltAddr# [a2_s47A3 b1_s47A5] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$cmax
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s47A7 y_s47A8]
        case y_s47A8 of wild_s47A9 {
          GHC.Ptr.Ptr a1_s47Aa [Occ=Once] ->
              case x_s47A7 of wild1_s47Ab {
                GHC.Ptr.Ptr b1_s47Ac [Occ=Once] ->
                    case ltAddr# [a1_s47Aa b1_s47Ac] of {
                      __DEFAULT -> wild_s47A9;
                      1# -> wild1_s47Ab;
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$c>=
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47Ae b_s47Af]
        case a1_s47Ae of {
          GHC.Ptr.Ptr a2_s47Ah [Occ=Once] ->
              case b_s47Af of {
                GHC.Ptr.Ptr b1_s47Aj [Occ=Once] ->
                    case ltAddr# [a2_s47Ah b1_s47Aj] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$c>
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47Al b_s47Am]
        case b_s47Am of {
          GHC.Ptr.Ptr a2_s47Ao [Occ=Once] ->
              case a1_s47Al of {
                GHC.Ptr.Ptr b1_s47Aq [Occ=Once] ->
                    case ltAddr# [a2_s47Ao b1_s47Aq] of sat_s47Ar {
                      __DEFAULT -> tagToEnum# [sat_s47Ar];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$cmin
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s47As y_s47At]
        case y_s47At of wild_s47Au {
          GHC.Ptr.Ptr a1_s47Av [Occ=Once] ->
              case x_s47As of wild1_s47Aw {
                GHC.Ptr.Ptr b1_s47Ax [Occ=Once] ->
                    case ltAddr# [a1_s47Av b1_s47Ax] of {
                      __DEFAULT -> wild1_s47Aw;
                      1# -> wild_s47Au;
                    };
              };
        };

GHC.Ptr.$fOrdPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.Ptr.Ptr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Ptr.$fEqPtr
                                      GHC.Ptr.$fOrdPtr_$ccompare
                                      GHC.Ptr.$fOrdPtr_$c<
                                      GHC.Ptr.$fOrdPtr_$c<=
                                      GHC.Ptr.$fOrdPtr_$c>
                                      GHC.Ptr.$fOrdPtr_$c>=
                                      GHC.Ptr.$fOrdPtr_$cmax
                                      GHC.Ptr.$fOrdPtr_$cmin];

GHC.Ptr.nullPtr :: forall a. GHC.Ptr.Ptr a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Ptr.Ptr! [__NULL];

GHC.Ptr.castPtr1 :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [v_s47Az] v_s47Az;

GHC.Ptr.castPtr :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.castPtr1 eta_B1;

GHC.Ptr.plusPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Ptr.Ptr b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s47AA ds1_s47AB]
        case ds_s47AA of {
          GHC.Ptr.Ptr addr_s47AD [Occ=Once] ->
              case ds1_s47AB of {
                GHC.Types.I# d_s47AF [Occ=Once] ->
                    case plusAddr# [addr_s47AD d_s47AF] of sat_s47AG {
                      __DEFAULT -> GHC.Ptr.Ptr [sat_s47AG];
                    };
              };
        };

GHC.Ptr.alignPtr
  :: forall a. GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [addr_s47AH ds_s47AI]
        case addr_s47AH of wild_s47AJ {
          GHC.Ptr.Ptr a1_s47AK ->
              case ds_s47AI of {
                GHC.Types.I# i_s47AM ->
                    case remAddr# [a1_s47AK i_s47AM] of ds1_s47AN {
                      __DEFAULT ->
                          case -# [i_s47AM ds1_s47AN] of sat_s47AO {
                            __DEFAULT ->
                                case plusAddr# [a1_s47AK sat_s47AO] of sat_s47AP {
                                  __DEFAULT -> GHC.Ptr.Ptr [sat_s47AP];
                                };
                          };
                      0# -> wild_s47AJ;
                    };
              };
        };

GHC.Ptr.minusPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr b -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s47AQ ds1_s47AR]
        case ds_s47AQ of {
          GHC.Ptr.Ptr a1_s47AT [Occ=Once] ->
              case ds1_s47AR of {
                GHC.Ptr.Ptr a2_s47AV [Occ=Once] ->
                    case minusAddr# [a1_s47AT a2_s47AV] of sat_s47AW {
                      __DEFAULT -> GHC.Types.I# [sat_s47AW];
                    };
              };
        };

GHC.Ptr.nullFunPtr :: forall a. GHC.Ptr.FunPtr a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Ptr.FunPtr! [__NULL];

GHC.Ptr.castFunPtr1
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [v_s47AX] v_s47AX;

GHC.Ptr.castFunPtr
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.castFunPtr1 eta_B1;

GHC.Ptr.castFunPtrToPtr
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.Ptr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s47AY]
        case ds_s47AY of {
          GHC.Ptr.FunPtr addr_s47B0 [Occ=Once] -> GHC.Ptr.Ptr [addr_s47B0];
        };

GHC.Ptr.$fShowFunPtr_$cshowsPrec1
  :: forall a. GHC.Types.Int -> GHC.Ptr.FunPtr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(U)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [p_s47B1 x_s47B2 eta_s47B3]
        case x_s47B2 of {
          GHC.Ptr.FunPtr addr_s47B5 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s47B5 eta_s47B3 of {
                (#,#) ww1_s47B7 [Occ=Once] ww2_s47B8 [Occ=Once] ->
                    : [ww1_s47B7 ww2_s47B8];
              };
        };

GHC.Ptr.$fShowFunPtr_$cshow
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [x_s47B9]
        case x_s47B9 of {
          GHC.Ptr.FunPtr addr_s47Bb [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s47Bb GHC.Types.[] of {
                (#,#) ww1_s47Bd [Occ=Once] ww2_s47Be [Occ=Once] ->
                    : [ww1_s47Bd ww2_s47Be];
              };
        };

GHC.Ptr.$fShowFunPtr1
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S(S),1*U(U)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [x_s47Bf eta_s47Bg]
        case x_s47Bf of {
          GHC.Ptr.FunPtr addr_s47Bi [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s47Bi eta_s47Bg of {
                (#,#) ww1_s47Bk [Occ=Once] ww2_s47Bl [Occ=Once] ->
                    : [ww1_s47Bk ww2_s47Bl];
              };
        };

GHC.Ptr.$fShowFunPtr_$cshowList
  :: forall a. [GHC.Ptr.FunPtr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s47Bm s_s47Bn]
        GHC.Show.showList__ GHC.Ptr.$fShowFunPtr1 ls_s47Bm s_s47Bn;

GHC.Ptr.$fShowFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.Ptr.FunPtr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Ptr.$fShowFunPtr_$cshowsPrec1
                                    GHC.Ptr.$fShowFunPtr_$cshow
                                    GHC.Ptr.$fShowFunPtr_$cshowList];

GHC.Ptr.castPtrToFunPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.FunPtr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s47Bo]
        case ds_s47Bo of {
          GHC.Ptr.Ptr addr_s47Bq [Occ=Once] -> GHC.Ptr.FunPtr [addr_s47Bq];
        };

GHC.Ptr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Ptr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$trModule4];

GHC.Ptr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Ptr"#;

GHC.Ptr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$trModule2];

GHC.Ptr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Ptr.$trModule3
                                     GHC.Ptr.$trModule1];

$krep_r47xK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r47xL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcAddr#
                                              GHC.Types.[]];

GHC.Ptr.$tcPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Ptr"#;

GHC.Ptr.$tcPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tcPtr2];

GHC.Ptr.$tcPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13939499724423561315##
                                    16316673677148652216##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tcPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep2_r47xM :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r47xK GHC.Types.[]];

$krep3_r47xN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep2_r47xM];

GHC.Ptr.$tc'Ptr1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r47xL $krep3_r47xN];

GHC.Ptr.$tc'Ptr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Ptr"#;

GHC.Ptr.$tc'Ptr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tc'Ptr3];

GHC.Ptr.$tc'Ptr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2332306090346040376##
                                    13491728187967991297##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tc'Ptr2
                                    1#
                                    GHC.Ptr.$tc'Ptr1];

GHC.Ptr.$tcFunPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FunPtr"#;

GHC.Ptr.$tcFunPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tcFunPtr2];

GHC.Ptr.$tcFunPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [38956960673620606##
                                    4307950889093819770##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tcFunPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r47xO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcFunPtr
                                              $krep2_r47xM];

GHC.Ptr.$tc'FunPtr1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r47xL $krep4_r47xO];

GHC.Ptr.$tc'FunPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FunPtr"#;

GHC.Ptr.$tc'FunPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tc'FunPtr3];

GHC.Ptr.$tc'FunPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15722333564603238588##
                                    12100865307857439187##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tc'FunPtr2
                                    1#
                                    GHC.Ptr.$tc'FunPtr1];

GHC.Ptr.Ptr :: forall a. GHC.Prim.Addr# -> GHC.Ptr.Ptr a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.Ptr [eta_B1];

GHC.Ptr.FunPtr :: forall a. GHC.Prim.Addr# -> GHC.Ptr.FunPtr a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.FunPtr [eta_B1];


==================== STG syntax: ====================
2018-03-16 15:59:00.204178902 UTC

GHC.Ptr.$fShowFunPtr4 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

GHC.Ptr.$fShowFunPtr3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['x'#];

GHC.Ptr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<L,U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_s47xQ w_s47xR]
        let {
          ls_s47xS :: [GHC.Types.Char]
          [LclId] =
              [ww_s47xQ] \u []
                  let {
                    sat_s47xV [Occ=Once] :: GHC.Integer.Type.Integer
                    [LclId] =
                        [ww_s47xQ] \u []
                            case addr2Int# [ww_s47xQ] of sat_s47xT {
                              __DEFAULT ->
                                  case int2Word# [sat_s47xT] of sat_s47xU {
                                    __DEFAULT -> GHC.Integer.Type.wordToInteger sat_s47xU;
                                  };
                            };
                  } in 
                    Numeric.showIntAtBase
                        GHC.Real.$fIntegralInteger
                        GHC.Show.$fShowInteger
                        Numeric.showHex1
                        GHC.Show.intToDigit
                        sat_s47xV
                        GHC.Types.[]; } in
        let {
          sat_s47y6 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_s47xR ls_s47xS] \u []
                  case GHC.List.$wlenAcc ls_s47xS 0# of ww2_s47xW {
                    __DEFAULT ->
                        case -# [16# ww2_s47xW] of y_s47xX [Dmd=<S,U>] {
                          __DEFAULT ->
                              case <# [0# y_s47xX] of {
                                __DEFAULT -> GHC.Base.++ ls_s47xS w_s47xR;
                                1# ->
                                    let {
                                      n_s47xZ [Occ=OnceL] :: [GHC.Types.Char]
                                      [LclId] =
                                          [w_s47xR ls_s47xS] \u []
                                              GHC.Base.++ ls_s47xS w_s47xR; } in
                                    let {
                                      lvl_s47y0 [Occ=OnceL] :: [GHC.Types.Char]
                                      [LclId, Unf=OtherCon []] =
                                          CCCS :! [GHC.Ptr.$fShowFunPtr4 n_s47xZ]; } in
                                    let {
                                      $wxs_s47y1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                        :: GHC.Prim.Int# -> [GHC.Types.Char]
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                          sat-only [lvl_s47y0 $wxs_s47y1] \r [ww1_s47y2]
                                              case ww1_s47y2 of ds1_s47y3 {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s47y5 [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [$wxs_s47y1 ds1_s47y3] \u []
                                                              case -# [ds1_s47y3 1#] of sat_s47y4 {
                                                                __DEFAULT -> $wxs_s47y1 sat_s47y4;
                                                              };
                                                    } in  : [GHC.Ptr.$fShowFunPtr4 sat_s47y5];
                                                1# -> lvl_s47y0;
                                              };
                                    } in  $wxs_s47y1 y_s47xX;
                              };
                        };
                  }; } in
        let {
          sat_s47y7 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              CCCS :! [GHC.Ptr.$fShowFunPtr3 sat_s47y6];
        } in  (#,#) [GHC.Ptr.$fShowFunPtr4 sat_s47y7];

GHC.Ptr.$fShowFunPtr_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Types.Int -> GHC.Ptr.Ptr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(U)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s47y8 w1_s47y9 w2_s47ya]
        case w1_s47y9 of {
          GHC.Ptr.Ptr ww1_s47yc [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s47yc w2_s47ya of {
                (#,#) ww3_s47ye [Occ=Once] ww4_s47yf [Occ=Once] ->
                    : [ww3_s47ye ww4_s47yf];
              };
        };

GHC.Ptr.$fShowFunPtr2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Ptr.$fShowPtr_$cshow
  :: forall a. GHC.Ptr.Ptr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [x_s47yg]
        case x_s47yg of {
          GHC.Ptr.Ptr ww1_s47yi [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s47yi GHC.Types.[] of {
                (#,#) ww3_s47yk [Occ=Once] ww4_s47yl [Occ=Once] ->
                    : [ww3_s47yk ww4_s47yl];
              };
        };

GHC.Ptr.$fShowPtr1 :: forall a. GHC.Ptr.Ptr a -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [w_s47ym w1_s47yn]
        case w_s47ym of {
          GHC.Ptr.Ptr ww1_s47yp [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s47yp w1_s47yn of {
                (#,#) ww3_s47yr [Occ=Once] ww4_s47ys [Occ=Once] ->
                    : [ww3_s47yr ww4_s47ys];
              };
        };

GHC.Ptr.$fShowPtr_$cshowList
  :: forall a. [GHC.Ptr.Ptr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s47yt s_s47yu]
        GHC.Show.showList__ GHC.Ptr.$fShowPtr1 ls_s47yt s_s47yu;

GHC.Ptr.$fShowPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.Ptr.Ptr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Ptr.$fShowFunPtr_$cshowsPrec
                                    GHC.Ptr.$fShowPtr_$cshow
                                    GHC.Ptr.$fShowPtr_$cshowList];

GHC.Ptr.$fOrdFunPtr_$c<
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47yv b_s47yw]
        case a1_s47yv of {
          GHC.Ptr.FunPtr a2_s47yy [Occ=Once] ->
              case b_s47yw of {
                GHC.Ptr.FunPtr b1_s47yA [Occ=Once] ->
                    case ltAddr# [a2_s47yy b1_s47yA] of sat_s47yB {
                      __DEFAULT -> tagToEnum# [sat_s47yB];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$ccompare
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47yC b_s47yD]
        case a1_s47yC of {
          GHC.Ptr.FunPtr a2_s47yF ->
              case b_s47yD of {
                GHC.Ptr.FunPtr b1_s47yH ->
                    case ltAddr# [a2_s47yF b1_s47yH] of {
                      __DEFAULT ->
                          case eqAddr# [a2_s47yF b1_s47yH] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr_$c==
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s47yK ds1_s47yL]
        case ds_s47yK of {
          GHC.Ptr.FunPtr a1_s47yN [Occ=Once] ->
              case ds1_s47yL of {
                GHC.Ptr.FunPtr b1_s47yP [Occ=Once] ->
                    case eqAddr# [a1_s47yN b1_s47yP] of sat_s47yQ {
                      __DEFAULT -> tagToEnum# [sat_s47yQ];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s47yR eta1_s47yS]
        case eta_s47yR of {
          GHC.Ptr.FunPtr a1_s47yU [Occ=Once] ->
              case eta1_s47yS of {
                GHC.Ptr.FunPtr b1_s47yW [Occ=Once] ->
                    case eqAddr# [a1_s47yU b1_s47yW] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Ptr.FunPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Ptr.$fEqFunPtr_$c==
                                     GHC.Ptr.$fEqFunPtr_$c/=];

GHC.Ptr.$fOrdFunPtr_$c<=
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47yY b_s47yZ]
        case b_s47yZ of {
          GHC.Ptr.FunPtr a2_s47z1 [Occ=Once] ->
              case a1_s47yY of {
                GHC.Ptr.FunPtr b1_s47z3 [Occ=Once] ->
                    case ltAddr# [a2_s47z1 b1_s47z3] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$cmax
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s47z5 y_s47z6]
        case y_s47z6 of wild_s47z7 {
          GHC.Ptr.FunPtr a1_s47z8 [Occ=Once] ->
              case x_s47z5 of wild1_s47z9 {
                GHC.Ptr.FunPtr b1_s47za [Occ=Once] ->
                    case ltAddr# [a1_s47z8 b1_s47za] of {
                      __DEFAULT -> wild_s47z7;
                      1# -> wild1_s47z9;
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$c>=
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47zc b_s47zd]
        case a1_s47zc of {
          GHC.Ptr.FunPtr a2_s47zf [Occ=Once] ->
              case b_s47zd of {
                GHC.Ptr.FunPtr b1_s47zh [Occ=Once] ->
                    case ltAddr# [a2_s47zf b1_s47zh] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$c>
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47zj b_s47zk]
        case b_s47zk of {
          GHC.Ptr.FunPtr a2_s47zm [Occ=Once] ->
              case a1_s47zj of {
                GHC.Ptr.FunPtr b1_s47zo [Occ=Once] ->
                    case ltAddr# [a2_s47zm b1_s47zo] of sat_s47zp {
                      __DEFAULT -> tagToEnum# [sat_s47zp];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$cmin
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s47zq y_s47zr]
        case y_s47zr of wild_s47zs {
          GHC.Ptr.FunPtr a1_s47zt [Occ=Once] ->
              case x_s47zq of wild1_s47zu {
                GHC.Ptr.FunPtr b1_s47zv [Occ=Once] ->
                    case ltAddr# [a1_s47zt b1_s47zv] of {
                      __DEFAULT -> wild1_s47zu;
                      1# -> wild_s47zs;
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.Ptr.FunPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Ptr.$fEqFunPtr
                                      GHC.Ptr.$fOrdFunPtr_$ccompare
                                      GHC.Ptr.$fOrdFunPtr_$c<
                                      GHC.Ptr.$fOrdFunPtr_$c<=
                                      GHC.Ptr.$fOrdFunPtr_$c>
                                      GHC.Ptr.$fOrdFunPtr_$c>=
                                      GHC.Ptr.$fOrdFunPtr_$cmax
                                      GHC.Ptr.$fOrdFunPtr_$cmin];

GHC.Ptr.$fOrdPtr_$c<
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47zx b_s47zy]
        case a1_s47zx of {
          GHC.Ptr.Ptr a2_s47zA [Occ=Once] ->
              case b_s47zy of {
                GHC.Ptr.Ptr b1_s47zC [Occ=Once] ->
                    case ltAddr# [a2_s47zA b1_s47zC] of sat_s47zD {
                      __DEFAULT -> tagToEnum# [sat_s47zD];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$ccompare
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47zE b_s47zF]
        case a1_s47zE of {
          GHC.Ptr.Ptr a2_s47zH ->
              case b_s47zF of {
                GHC.Ptr.Ptr b1_s47zJ ->
                    case ltAddr# [a2_s47zH b1_s47zJ] of {
                      __DEFAULT ->
                          case eqAddr# [a2_s47zH b1_s47zJ] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.Ptr.$fEqPtr_$c==
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s47zM ds1_s47zN]
        case ds_s47zM of {
          GHC.Ptr.Ptr a1_s47zP [Occ=Once] ->
              case ds1_s47zN of {
                GHC.Ptr.Ptr b1_s47zR [Occ=Once] ->
                    case eqAddr# [a1_s47zP b1_s47zR] of sat_s47zS {
                      __DEFAULT -> tagToEnum# [sat_s47zS];
                    };
              };
        };

GHC.Ptr.$fEqPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s47zT eta1_s47zU]
        case eta_s47zT of {
          GHC.Ptr.Ptr a1_s47zW [Occ=Once] ->
              case eta1_s47zU of {
                GHC.Ptr.Ptr b1_s47zY [Occ=Once] ->
                    case eqAddr# [a1_s47zW b1_s47zY] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fEqPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Ptr.Ptr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Ptr.$fEqPtr_$c==
                                     GHC.Ptr.$fEqPtr_$c/=];

GHC.Ptr.$fOrdPtr_$c<=
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47A0 b_s47A1]
        case b_s47A1 of {
          GHC.Ptr.Ptr a2_s47A3 [Occ=Once] ->
              case a1_s47A0 of {
                GHC.Ptr.Ptr b1_s47A5 [Occ=Once] ->
                    case ltAddr# [a2_s47A3 b1_s47A5] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$cmax
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s47A7 y_s47A8]
        case y_s47A8 of wild_s47A9 {
          GHC.Ptr.Ptr a1_s47Aa [Occ=Once] ->
              case x_s47A7 of wild1_s47Ab {
                GHC.Ptr.Ptr b1_s47Ac [Occ=Once] ->
                    case ltAddr# [a1_s47Aa b1_s47Ac] of {
                      __DEFAULT -> wild_s47A9;
                      1# -> wild1_s47Ab;
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$c>=
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47Ae b_s47Af]
        case a1_s47Ae of {
          GHC.Ptr.Ptr a2_s47Ah [Occ=Once] ->
              case b_s47Af of {
                GHC.Ptr.Ptr b1_s47Aj [Occ=Once] ->
                    case ltAddr# [a2_s47Ah b1_s47Aj] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$c>
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s47Al b_s47Am]
        case b_s47Am of {
          GHC.Ptr.Ptr a2_s47Ao [Occ=Once] ->
              case a1_s47Al of {
                GHC.Ptr.Ptr b1_s47Aq [Occ=Once] ->
                    case ltAddr# [a2_s47Ao b1_s47Aq] of sat_s47Ar {
                      __DEFAULT -> tagToEnum# [sat_s47Ar];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$cmin
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s47As y_s47At]
        case y_s47At of wild_s47Au {
          GHC.Ptr.Ptr a1_s47Av [Occ=Once] ->
              case x_s47As of wild1_s47Aw {
                GHC.Ptr.Ptr b1_s47Ax [Occ=Once] ->
                    case ltAddr# [a1_s47Av b1_s47Ax] of {
                      __DEFAULT -> wild1_s47Aw;
                      1# -> wild_s47Au;
                    };
              };
        };

GHC.Ptr.$fOrdPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.Ptr.Ptr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Ptr.$fEqPtr
                                      GHC.Ptr.$fOrdPtr_$ccompare
                                      GHC.Ptr.$fOrdPtr_$c<
                                      GHC.Ptr.$fOrdPtr_$c<=
                                      GHC.Ptr.$fOrdPtr_$c>
                                      GHC.Ptr.$fOrdPtr_$c>=
                                      GHC.Ptr.$fOrdPtr_$cmax
                                      GHC.Ptr.$fOrdPtr_$cmin];

GHC.Ptr.nullPtr :: forall a. GHC.Ptr.Ptr a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Ptr.Ptr! [__NULL];

GHC.Ptr.castPtr1 :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [v_s47Az] v_s47Az;

GHC.Ptr.castPtr :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.castPtr1 eta_B1;

GHC.Ptr.plusPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Ptr.Ptr b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s47AA ds1_s47AB]
        case ds_s47AA of {
          GHC.Ptr.Ptr addr_s47AD [Occ=Once] ->
              case ds1_s47AB of {
                GHC.Types.I# d_s47AF [Occ=Once] ->
                    case plusAddr# [addr_s47AD d_s47AF] of sat_s47AG {
                      __DEFAULT -> GHC.Ptr.Ptr [sat_s47AG];
                    };
              };
        };

GHC.Ptr.alignPtr
  :: forall a. GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [addr_s47AH ds_s47AI]
        case addr_s47AH of wild_s47AJ {
          GHC.Ptr.Ptr a1_s47AK ->
              case ds_s47AI of {
                GHC.Types.I# i_s47AM ->
                    case remAddr# [a1_s47AK i_s47AM] of ds1_s47AN {
                      __DEFAULT ->
                          case -# [i_s47AM ds1_s47AN] of sat_s47AO {
                            __DEFAULT ->
                                case plusAddr# [a1_s47AK sat_s47AO] of sat_s47AP {
                                  __DEFAULT -> GHC.Ptr.Ptr [sat_s47AP];
                                };
                          };
                      0# -> wild_s47AJ;
                    };
              };
        };

GHC.Ptr.minusPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr b -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s47AQ ds1_s47AR]
        case ds_s47AQ of {
          GHC.Ptr.Ptr a1_s47AT [Occ=Once] ->
              case ds1_s47AR of {
                GHC.Ptr.Ptr a2_s47AV [Occ=Once] ->
                    case minusAddr# [a1_s47AT a2_s47AV] of sat_s47AW {
                      __DEFAULT -> GHC.Types.I# [sat_s47AW];
                    };
              };
        };

GHC.Ptr.nullFunPtr :: forall a. GHC.Ptr.FunPtr a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Ptr.FunPtr! [__NULL];

GHC.Ptr.castFunPtr1
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [v_s47AX] v_s47AX;

GHC.Ptr.castFunPtr
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.castFunPtr1 eta_B1;

GHC.Ptr.castFunPtrToPtr
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.Ptr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s47AY]
        case ds_s47AY of {
          GHC.Ptr.FunPtr addr_s47B0 [Occ=Once] -> GHC.Ptr.Ptr [addr_s47B0];
        };

GHC.Ptr.$fShowFunPtr_$cshowsPrec1
  :: forall a. GHC.Types.Int -> GHC.Ptr.FunPtr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(U)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [p_s47B1 x_s47B2 eta_s47B3]
        case x_s47B2 of {
          GHC.Ptr.FunPtr addr_s47B5 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s47B5 eta_s47B3 of {
                (#,#) ww1_s47B7 [Occ=Once] ww2_s47B8 [Occ=Once] ->
                    : [ww1_s47B7 ww2_s47B8];
              };
        };

GHC.Ptr.$fShowFunPtr_$cshow
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [x_s47B9]
        case x_s47B9 of {
          GHC.Ptr.FunPtr addr_s47Bb [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s47Bb GHC.Types.[] of {
                (#,#) ww1_s47Bd [Occ=Once] ww2_s47Be [Occ=Once] ->
                    : [ww1_s47Bd ww2_s47Be];
              };
        };

GHC.Ptr.$fShowFunPtr1
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S(S),1*U(U)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [x_s47Bf eta_s47Bg]
        case x_s47Bf of {
          GHC.Ptr.FunPtr addr_s47Bi [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s47Bi eta_s47Bg of {
                (#,#) ww1_s47Bk [Occ=Once] ww2_s47Bl [Occ=Once] ->
                    : [ww1_s47Bk ww2_s47Bl];
              };
        };

GHC.Ptr.$fShowFunPtr_$cshowList
  :: forall a. [GHC.Ptr.FunPtr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s47Bm s_s47Bn]
        GHC.Show.showList__ GHC.Ptr.$fShowFunPtr1 ls_s47Bm s_s47Bn;

GHC.Ptr.$fShowFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.Ptr.FunPtr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Ptr.$fShowFunPtr_$cshowsPrec1
                                    GHC.Ptr.$fShowFunPtr_$cshow
                                    GHC.Ptr.$fShowFunPtr_$cshowList];

GHC.Ptr.castPtrToFunPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.FunPtr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s47Bo]
        case ds_s47Bo of {
          GHC.Ptr.Ptr addr_s47Bq [Occ=Once] -> GHC.Ptr.FunPtr [addr_s47Bq];
        };

GHC.Ptr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Ptr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$trModule4];

GHC.Ptr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Ptr"#;

GHC.Ptr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$trModule2];

GHC.Ptr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Ptr.$trModule3
                                     GHC.Ptr.$trModule1];

$krep_r47xK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r47xL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcAddr#
                                              GHC.Types.[]];

GHC.Ptr.$tcPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Ptr"#;

GHC.Ptr.$tcPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tcPtr2];

GHC.Ptr.$tcPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13939499724423561315##
                                    16316673677148652216##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tcPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep2_r47xM :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r47xK GHC.Types.[]];

$krep3_r47xN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep2_r47xM];

GHC.Ptr.$tc'Ptr1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r47xL $krep3_r47xN];

GHC.Ptr.$tc'Ptr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Ptr"#;

GHC.Ptr.$tc'Ptr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tc'Ptr3];

GHC.Ptr.$tc'Ptr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2332306090346040376##
                                    13491728187967991297##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tc'Ptr2
                                    1#
                                    GHC.Ptr.$tc'Ptr1];

GHC.Ptr.$tcFunPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FunPtr"#;

GHC.Ptr.$tcFunPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tcFunPtr2];

GHC.Ptr.$tcFunPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [38956960673620606##
                                    4307950889093819770##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tcFunPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r47xO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcFunPtr
                                              $krep2_r47xM];

GHC.Ptr.$tc'FunPtr1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r47xL $krep4_r47xO];

GHC.Ptr.$tc'FunPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FunPtr"#;

GHC.Ptr.$tc'FunPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tc'FunPtr3];

GHC.Ptr.$tc'FunPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15722333564603238588##
                                    12100865307857439187##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tc'FunPtr2
                                    1#
                                    GHC.Ptr.$tc'FunPtr1];

GHC.Ptr.Ptr :: forall a. GHC.Prim.Addr# -> GHC.Ptr.Ptr a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.Ptr [eta_B1];

GHC.Ptr.FunPtr :: forall a. GHC.Prim.Addr# -> GHC.Ptr.FunPtr a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.FunPtr [eta_B1];


==================== Pre unarise: ====================
2018-03-16 15:59:01.341059518 UTC

GHC.Ptr.$fShowFunPtr4 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

GHC.Ptr.$fShowFunPtr3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['x'#];

GHC.Ptr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<L,U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_s48qG w_s48qH]
        let {
          ls_s48qI :: [GHC.Types.Char]
          [LclId] =
              [ww_s48qG] \u []
                  let {
                    sat_s48qL [Occ=Once] :: GHC.Integer.Type.Integer
                    [LclId] =
                        [ww_s48qG] \u []
                            case addr2Int# [ww_s48qG] of sat_s48qJ {
                              __DEFAULT ->
                                  case int2Word# [sat_s48qJ] of sat_s48qK {
                                    __DEFAULT -> GHC.Integer.Type.wordToInteger sat_s48qK;
                                  };
                            };
                  } in 
                    Numeric.showIntAtBase
                        GHC.Real.$fIntegralInteger
                        GHC.Show.$fShowInteger
                        Numeric.showHex1
                        GHC.Show.intToDigit
                        sat_s48qL
                        GHC.Types.[]; } in
        let {
          sat_s48qW [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_s48qH ls_s48qI] \u []
                  case GHC.List.$wlenAcc ls_s48qI 0# of ww2_s48qM {
                    __DEFAULT ->
                        case -# [16# ww2_s48qM] of y_s48qN [Dmd=<S,U>] {
                          __DEFAULT ->
                              case <# [0# y_s48qN] of {
                                __DEFAULT -> GHC.Base.++ ls_s48qI w_s48qH;
                                1# ->
                                    let {
                                      n_s48qP [Occ=OnceL] :: [GHC.Types.Char]
                                      [LclId] =
                                          [w_s48qH ls_s48qI] \u []
                                              GHC.Base.++ ls_s48qI w_s48qH; } in
                                    let {
                                      lvl_s48qQ [Occ=OnceL] :: [GHC.Types.Char]
                                      [LclId, Unf=OtherCon []] =
                                          CCCS :! [GHC.Ptr.$fShowFunPtr4 n_s48qP]; } in
                                    let {
                                      $wxs_s48qR [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                        :: GHC.Prim.Int# -> [GHC.Types.Char]
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                          sat-only [lvl_s48qQ $wxs_s48qR] \r [ww1_s48qS]
                                              case ww1_s48qS of ds1_s48qT {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s48qV [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [$wxs_s48qR ds1_s48qT] \u []
                                                              case -# [ds1_s48qT 1#] of sat_s48qU {
                                                                __DEFAULT -> $wxs_s48qR sat_s48qU;
                                                              };
                                                    } in  : [GHC.Ptr.$fShowFunPtr4 sat_s48qV];
                                                1# -> lvl_s48qQ;
                                              };
                                    } in  $wxs_s48qR y_s48qN;
                              };
                        };
                  }; } in
        let {
          sat_s48qX [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              CCCS :! [GHC.Ptr.$fShowFunPtr3 sat_s48qW];
        } in  (#,#) [GHC.Ptr.$fShowFunPtr4 sat_s48qX];

GHC.Ptr.$fShowFunPtr_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Types.Int -> GHC.Ptr.Ptr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(U)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s48qY w1_s48qZ w2_s48r0]
        case w1_s48qZ of {
          GHC.Ptr.Ptr ww1_s48r2 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s48r2 w2_s48r0 of {
                (#,#) ww3_s48r4 [Occ=Once] ww4_s48r5 [Occ=Once] ->
                    : [ww3_s48r4 ww4_s48r5];
              };
        };

GHC.Ptr.$fShowFunPtr2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Ptr.$fShowPtr_$cshow
  :: forall a. GHC.Ptr.Ptr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [x_s48r6]
        case x_s48r6 of {
          GHC.Ptr.Ptr ww1_s48r8 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s48r8 GHC.Types.[] of {
                (#,#) ww3_s48ra [Occ=Once] ww4_s48rb [Occ=Once] ->
                    : [ww3_s48ra ww4_s48rb];
              };
        };

GHC.Ptr.$fShowPtr1 :: forall a. GHC.Ptr.Ptr a -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [w_s48rc w1_s48rd]
        case w_s48rc of {
          GHC.Ptr.Ptr ww1_s48rf [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s48rf w1_s48rd of {
                (#,#) ww3_s48rh [Occ=Once] ww4_s48ri [Occ=Once] ->
                    : [ww3_s48rh ww4_s48ri];
              };
        };

GHC.Ptr.$fShowPtr_$cshowList
  :: forall a. [GHC.Ptr.Ptr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s48rj s_s48rk]
        GHC.Show.showList__ GHC.Ptr.$fShowPtr1 ls_s48rj s_s48rk;

GHC.Ptr.$fShowPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.Ptr.Ptr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Ptr.$fShowFunPtr_$cshowsPrec
                                    GHC.Ptr.$fShowPtr_$cshow
                                    GHC.Ptr.$fShowPtr_$cshowList];

GHC.Ptr.$fOrdFunPtr_$c<
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48rl b_s48rm]
        case a1_s48rl of {
          GHC.Ptr.FunPtr a2_s48ro [Occ=Once] ->
              case b_s48rm of {
                GHC.Ptr.FunPtr b1_s48rq [Occ=Once] ->
                    case ltAddr# [a2_s48ro b1_s48rq] of sat_s48rr {
                      __DEFAULT -> tagToEnum# [sat_s48rr];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$ccompare
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48rs b_s48rt]
        case a1_s48rs of {
          GHC.Ptr.FunPtr a2_s48rv ->
              case b_s48rt of {
                GHC.Ptr.FunPtr b1_s48rx ->
                    case ltAddr# [a2_s48rv b1_s48rx] of {
                      __DEFAULT ->
                          case eqAddr# [a2_s48rv b1_s48rx] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr_$c==
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s48rA ds1_s48rB]
        case ds_s48rA of {
          GHC.Ptr.FunPtr a1_s48rD [Occ=Once] ->
              case ds1_s48rB of {
                GHC.Ptr.FunPtr b1_s48rF [Occ=Once] ->
                    case eqAddr# [a1_s48rD b1_s48rF] of sat_s48rG {
                      __DEFAULT -> tagToEnum# [sat_s48rG];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s48rH eta1_s48rI]
        case eta_s48rH of {
          GHC.Ptr.FunPtr a1_s48rK [Occ=Once] ->
              case eta1_s48rI of {
                GHC.Ptr.FunPtr b1_s48rM [Occ=Once] ->
                    case eqAddr# [a1_s48rK b1_s48rM] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Ptr.FunPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Ptr.$fEqFunPtr_$c==
                                     GHC.Ptr.$fEqFunPtr_$c/=];

GHC.Ptr.$fOrdFunPtr_$c<=
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48rO b_s48rP]
        case b_s48rP of {
          GHC.Ptr.FunPtr a2_s48rR [Occ=Once] ->
              case a1_s48rO of {
                GHC.Ptr.FunPtr b1_s48rT [Occ=Once] ->
                    case ltAddr# [a2_s48rR b1_s48rT] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$cmax
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s48rV y_s48rW]
        case y_s48rW of wild_s48rX {
          GHC.Ptr.FunPtr a1_s48rY [Occ=Once] ->
              case x_s48rV of wild1_s48rZ {
                GHC.Ptr.FunPtr b1_s48s0 [Occ=Once] ->
                    case ltAddr# [a1_s48rY b1_s48s0] of {
                      __DEFAULT -> wild_s48rX;
                      1# -> wild1_s48rZ;
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$c>=
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48s2 b_s48s3]
        case a1_s48s2 of {
          GHC.Ptr.FunPtr a2_s48s5 [Occ=Once] ->
              case b_s48s3 of {
                GHC.Ptr.FunPtr b1_s48s7 [Occ=Once] ->
                    case ltAddr# [a2_s48s5 b1_s48s7] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$c>
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48s9 b_s48sa]
        case b_s48sa of {
          GHC.Ptr.FunPtr a2_s48sc [Occ=Once] ->
              case a1_s48s9 of {
                GHC.Ptr.FunPtr b1_s48se [Occ=Once] ->
                    case ltAddr# [a2_s48sc b1_s48se] of sat_s48sf {
                      __DEFAULT -> tagToEnum# [sat_s48sf];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$cmin
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s48sg y_s48sh]
        case y_s48sh of wild_s48si {
          GHC.Ptr.FunPtr a1_s48sj [Occ=Once] ->
              case x_s48sg of wild1_s48sk {
                GHC.Ptr.FunPtr b1_s48sl [Occ=Once] ->
                    case ltAddr# [a1_s48sj b1_s48sl] of {
                      __DEFAULT -> wild1_s48sk;
                      1# -> wild_s48si;
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.Ptr.FunPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Ptr.$fEqFunPtr
                                      GHC.Ptr.$fOrdFunPtr_$ccompare
                                      GHC.Ptr.$fOrdFunPtr_$c<
                                      GHC.Ptr.$fOrdFunPtr_$c<=
                                      GHC.Ptr.$fOrdFunPtr_$c>
                                      GHC.Ptr.$fOrdFunPtr_$c>=
                                      GHC.Ptr.$fOrdFunPtr_$cmax
                                      GHC.Ptr.$fOrdFunPtr_$cmin];

GHC.Ptr.$fOrdPtr_$c<
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48sn b_s48so]
        case a1_s48sn of {
          GHC.Ptr.Ptr a2_s48sq [Occ=Once] ->
              case b_s48so of {
                GHC.Ptr.Ptr b1_s48ss [Occ=Once] ->
                    case ltAddr# [a2_s48sq b1_s48ss] of sat_s48st {
                      __DEFAULT -> tagToEnum# [sat_s48st];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$ccompare
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48su b_s48sv]
        case a1_s48su of {
          GHC.Ptr.Ptr a2_s48sx ->
              case b_s48sv of {
                GHC.Ptr.Ptr b1_s48sz ->
                    case ltAddr# [a2_s48sx b1_s48sz] of {
                      __DEFAULT ->
                          case eqAddr# [a2_s48sx b1_s48sz] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.Ptr.$fEqPtr_$c==
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s48sC ds1_s48sD]
        case ds_s48sC of {
          GHC.Ptr.Ptr a1_s48sF [Occ=Once] ->
              case ds1_s48sD of {
                GHC.Ptr.Ptr b1_s48sH [Occ=Once] ->
                    case eqAddr# [a1_s48sF b1_s48sH] of sat_s48sI {
                      __DEFAULT -> tagToEnum# [sat_s48sI];
                    };
              };
        };

GHC.Ptr.$fEqPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s48sJ eta1_s48sK]
        case eta_s48sJ of {
          GHC.Ptr.Ptr a1_s48sM [Occ=Once] ->
              case eta1_s48sK of {
                GHC.Ptr.Ptr b1_s48sO [Occ=Once] ->
                    case eqAddr# [a1_s48sM b1_s48sO] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fEqPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Ptr.Ptr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Ptr.$fEqPtr_$c==
                                     GHC.Ptr.$fEqPtr_$c/=];

GHC.Ptr.$fOrdPtr_$c<=
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48sQ b_s48sR]
        case b_s48sR of {
          GHC.Ptr.Ptr a2_s48sT [Occ=Once] ->
              case a1_s48sQ of {
                GHC.Ptr.Ptr b1_s48sV [Occ=Once] ->
                    case ltAddr# [a2_s48sT b1_s48sV] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$cmax
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s48sX y_s48sY]
        case y_s48sY of wild_s48sZ {
          GHC.Ptr.Ptr a1_s48t0 [Occ=Once] ->
              case x_s48sX of wild1_s48t1 {
                GHC.Ptr.Ptr b1_s48t2 [Occ=Once] ->
                    case ltAddr# [a1_s48t0 b1_s48t2] of {
                      __DEFAULT -> wild_s48sZ;
                      1# -> wild1_s48t1;
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$c>=
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48t4 b_s48t5]
        case a1_s48t4 of {
          GHC.Ptr.Ptr a2_s48t7 [Occ=Once] ->
              case b_s48t5 of {
                GHC.Ptr.Ptr b1_s48t9 [Occ=Once] ->
                    case ltAddr# [a2_s48t7 b1_s48t9] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$c>
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48tb b_s48tc]
        case b_s48tc of {
          GHC.Ptr.Ptr a2_s48te [Occ=Once] ->
              case a1_s48tb of {
                GHC.Ptr.Ptr b1_s48tg [Occ=Once] ->
                    case ltAddr# [a2_s48te b1_s48tg] of sat_s48th {
                      __DEFAULT -> tagToEnum# [sat_s48th];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$cmin
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s48ti y_s48tj]
        case y_s48tj of wild_s48tk {
          GHC.Ptr.Ptr a1_s48tl [Occ=Once] ->
              case x_s48ti of wild1_s48tm {
                GHC.Ptr.Ptr b1_s48tn [Occ=Once] ->
                    case ltAddr# [a1_s48tl b1_s48tn] of {
                      __DEFAULT -> wild1_s48tm;
                      1# -> wild_s48tk;
                    };
              };
        };

GHC.Ptr.$fOrdPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.Ptr.Ptr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Ptr.$fEqPtr
                                      GHC.Ptr.$fOrdPtr_$ccompare
                                      GHC.Ptr.$fOrdPtr_$c<
                                      GHC.Ptr.$fOrdPtr_$c<=
                                      GHC.Ptr.$fOrdPtr_$c>
                                      GHC.Ptr.$fOrdPtr_$c>=
                                      GHC.Ptr.$fOrdPtr_$cmax
                                      GHC.Ptr.$fOrdPtr_$cmin];

GHC.Ptr.nullPtr :: forall a. GHC.Ptr.Ptr a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Ptr.Ptr! [__NULL];

GHC.Ptr.castPtr1 :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [v_s48tp] v_s48tp;

GHC.Ptr.castPtr :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.castPtr1 eta_B1;

GHC.Ptr.plusPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Ptr.Ptr b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s48tq ds1_s48tr]
        case ds_s48tq of {
          GHC.Ptr.Ptr addr_s48tt [Occ=Once] ->
              case ds1_s48tr of {
                GHC.Types.I# d_s48tv [Occ=Once] ->
                    case plusAddr# [addr_s48tt d_s48tv] of sat_s48tw {
                      __DEFAULT -> GHC.Ptr.Ptr [sat_s48tw];
                    };
              };
        };

GHC.Ptr.alignPtr
  :: forall a. GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [addr_s48tx ds_s48ty]
        case addr_s48tx of wild_s48tz {
          GHC.Ptr.Ptr a1_s48tA ->
              case ds_s48ty of {
                GHC.Types.I# i_s48tC ->
                    case remAddr# [a1_s48tA i_s48tC] of ds1_s48tD {
                      __DEFAULT ->
                          case -# [i_s48tC ds1_s48tD] of sat_s48tE {
                            __DEFAULT ->
                                case plusAddr# [a1_s48tA sat_s48tE] of sat_s48tF {
                                  __DEFAULT -> GHC.Ptr.Ptr [sat_s48tF];
                                };
                          };
                      0# -> wild_s48tz;
                    };
              };
        };

GHC.Ptr.minusPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr b -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s48tG ds1_s48tH]
        case ds_s48tG of {
          GHC.Ptr.Ptr a1_s48tJ [Occ=Once] ->
              case ds1_s48tH of {
                GHC.Ptr.Ptr a2_s48tL [Occ=Once] ->
                    case minusAddr# [a1_s48tJ a2_s48tL] of sat_s48tM {
                      __DEFAULT -> GHC.Types.I# [sat_s48tM];
                    };
              };
        };

GHC.Ptr.nullFunPtr :: forall a. GHC.Ptr.FunPtr a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Ptr.FunPtr! [__NULL];

GHC.Ptr.castFunPtr1
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [v_s48tN] v_s48tN;

GHC.Ptr.castFunPtr
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.castFunPtr1 eta_B1;

GHC.Ptr.castFunPtrToPtr
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.Ptr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s48tO]
        case ds_s48tO of {
          GHC.Ptr.FunPtr addr_s48tQ [Occ=Once] -> GHC.Ptr.Ptr [addr_s48tQ];
        };

GHC.Ptr.$fShowFunPtr_$cshowsPrec1
  :: forall a. GHC.Types.Int -> GHC.Ptr.FunPtr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(U)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [p_s48tR x_s48tS eta_s48tT]
        case x_s48tS of {
          GHC.Ptr.FunPtr addr_s48tV [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s48tV eta_s48tT of {
                (#,#) ww1_s48tX [Occ=Once] ww2_s48tY [Occ=Once] ->
                    : [ww1_s48tX ww2_s48tY];
              };
        };

GHC.Ptr.$fShowFunPtr_$cshow
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [x_s48tZ]
        case x_s48tZ of {
          GHC.Ptr.FunPtr addr_s48u1 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s48u1 GHC.Types.[] of {
                (#,#) ww1_s48u3 [Occ=Once] ww2_s48u4 [Occ=Once] ->
                    : [ww1_s48u3 ww2_s48u4];
              };
        };

GHC.Ptr.$fShowFunPtr1
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S(S),1*U(U)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [x_s48u5 eta_s48u6]
        case x_s48u5 of {
          GHC.Ptr.FunPtr addr_s48u8 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s48u8 eta_s48u6 of {
                (#,#) ww1_s48ua [Occ=Once] ww2_s48ub [Occ=Once] ->
                    : [ww1_s48ua ww2_s48ub];
              };
        };

GHC.Ptr.$fShowFunPtr_$cshowList
  :: forall a. [GHC.Ptr.FunPtr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s48uc s_s48ud]
        GHC.Show.showList__ GHC.Ptr.$fShowFunPtr1 ls_s48uc s_s48ud;

GHC.Ptr.$fShowFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.Ptr.FunPtr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Ptr.$fShowFunPtr_$cshowsPrec1
                                    GHC.Ptr.$fShowFunPtr_$cshow
                                    GHC.Ptr.$fShowFunPtr_$cshowList];

GHC.Ptr.castPtrToFunPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.FunPtr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s48ue]
        case ds_s48ue of {
          GHC.Ptr.Ptr addr_s48ug [Occ=Once] -> GHC.Ptr.FunPtr [addr_s48ug];
        };

GHC.Ptr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Ptr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$trModule4];

GHC.Ptr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Ptr"#;

GHC.Ptr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$trModule2];

GHC.Ptr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Ptr.$trModule3
                                     GHC.Ptr.$trModule1];

$krep_r47xK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r47xL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcAddr#
                                              GHC.Types.[]];

GHC.Ptr.$tcPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Ptr"#;

GHC.Ptr.$tcPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tcPtr2];

GHC.Ptr.$tcPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13939499724423561315##
                                    16316673677148652216##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tcPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep2_r47xM :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r47xK GHC.Types.[]];

$krep3_r47xN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep2_r47xM];

GHC.Ptr.$tc'Ptr1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r47xL $krep3_r47xN];

GHC.Ptr.$tc'Ptr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Ptr"#;

GHC.Ptr.$tc'Ptr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tc'Ptr3];

GHC.Ptr.$tc'Ptr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2332306090346040376##
                                    13491728187967991297##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tc'Ptr2
                                    1#
                                    GHC.Ptr.$tc'Ptr1];

GHC.Ptr.$tcFunPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FunPtr"#;

GHC.Ptr.$tcFunPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tcFunPtr2];

GHC.Ptr.$tcFunPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [38956960673620606##
                                    4307950889093819770##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tcFunPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r47xO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcFunPtr
                                              $krep2_r47xM];

GHC.Ptr.$tc'FunPtr1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r47xL $krep4_r47xO];

GHC.Ptr.$tc'FunPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FunPtr"#;

GHC.Ptr.$tc'FunPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tc'FunPtr3];

GHC.Ptr.$tc'FunPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15722333564603238588##
                                    12100865307857439187##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tc'FunPtr2
                                    1#
                                    GHC.Ptr.$tc'FunPtr1];

GHC.Ptr.Ptr :: forall a. GHC.Prim.Addr# -> GHC.Ptr.Ptr a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.Ptr [eta_B1];

GHC.Ptr.FunPtr :: forall a. GHC.Prim.Addr# -> GHC.Ptr.FunPtr a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.FunPtr [eta_B1];


==================== STG syntax: ====================
2018-03-16 15:59:01.359465982 UTC

GHC.Ptr.$fShowFunPtr4 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

GHC.Ptr.$fShowFunPtr3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['x'#];

GHC.Ptr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Addr#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<L,U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_s48qG w_s48qH]
        let {
          ls_s48qI :: [GHC.Types.Char]
          [LclId] =
              [ww_s48qG] \u []
                  let {
                    sat_s48qL [Occ=Once] :: GHC.Integer.Type.Integer
                    [LclId] =
                        [ww_s48qG] \u []
                            case addr2Int# [ww_s48qG] of sat_s48qJ {
                              __DEFAULT ->
                                  case int2Word# [sat_s48qJ] of sat_s48qK {
                                    __DEFAULT -> GHC.Integer.Type.wordToInteger sat_s48qK;
                                  };
                            };
                  } in 
                    Numeric.showIntAtBase
                        GHC.Real.$fIntegralInteger
                        GHC.Show.$fShowInteger
                        Numeric.showHex1
                        GHC.Show.intToDigit
                        sat_s48qL
                        GHC.Types.[]; } in
        let {
          sat_s48qW [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_s48qH ls_s48qI] \u []
                  case GHC.List.$wlenAcc ls_s48qI 0# of ww2_s48qM {
                    __DEFAULT ->
                        case -# [16# ww2_s48qM] of y_s48qN [Dmd=<S,U>] {
                          __DEFAULT ->
                              case <# [0# y_s48qN] of {
                                __DEFAULT -> GHC.Base.++ ls_s48qI w_s48qH;
                                1# ->
                                    let {
                                      n_s48qP [Occ=OnceL] :: [GHC.Types.Char]
                                      [LclId] =
                                          [w_s48qH ls_s48qI] \u []
                                              GHC.Base.++ ls_s48qI w_s48qH; } in
                                    let {
                                      lvl_s48qQ [Occ=OnceL] :: [GHC.Types.Char]
                                      [LclId, Unf=OtherCon []] =
                                          CCCS :! [GHC.Ptr.$fShowFunPtr4 n_s48qP]; } in
                                    let {
                                      $wxs_s48qR [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                        :: GHC.Prim.Int# -> [GHC.Types.Char]
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                          sat-only [lvl_s48qQ $wxs_s48qR] \r [ww1_s48qS]
                                              case ww1_s48qS of ds1_s48qT {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s48qV [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [$wxs_s48qR ds1_s48qT] \u []
                                                              case -# [ds1_s48qT 1#] of sat_s48qU {
                                                                __DEFAULT -> $wxs_s48qR sat_s48qU;
                                                              };
                                                    } in  : [GHC.Ptr.$fShowFunPtr4 sat_s48qV];
                                                1# -> lvl_s48qQ;
                                              };
                                    } in  $wxs_s48qR y_s48qN;
                              };
                        };
                  }; } in
        let {
          sat_s48qX [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              CCCS :! [GHC.Ptr.$fShowFunPtr3 sat_s48qW];
        } in  (#,#) [GHC.Ptr.$fShowFunPtr4 sat_s48qX];

GHC.Ptr.$fShowFunPtr_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Types.Int -> GHC.Ptr.Ptr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(U)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s48qY w1_s48qZ w2_s48r0]
        case w1_s48qZ of {
          GHC.Ptr.Ptr ww1_s48r2 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s48r2 w2_s48r0 of {
                (#,#) ww3_s48r4 [Occ=Once] ww4_s48r5 [Occ=Once] ->
                    : [ww3_s48r4 ww4_s48r5];
              };
        };

GHC.Ptr.$fShowFunPtr2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Ptr.$fShowPtr_$cshow
  :: forall a. GHC.Ptr.Ptr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [x_s48r6]
        case x_s48r6 of {
          GHC.Ptr.Ptr ww1_s48r8 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s48r8 GHC.Types.[] of {
                (#,#) ww3_s48ra [Occ=Once] ww4_s48rb [Occ=Once] ->
                    : [ww3_s48ra ww4_s48rb];
              };
        };

GHC.Ptr.$fShowPtr1 :: forall a. GHC.Ptr.Ptr a -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [w_s48rc w1_s48rd]
        case w_s48rc of {
          GHC.Ptr.Ptr ww1_s48rf [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec ww1_s48rf w1_s48rd of {
                (#,#) ww3_s48rh [Occ=Once] ww4_s48ri [Occ=Once] ->
                    : [ww3_s48rh ww4_s48ri];
              };
        };

GHC.Ptr.$fShowPtr_$cshowList
  :: forall a. [GHC.Ptr.Ptr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s48rj s_s48rk]
        GHC.Show.showList__ GHC.Ptr.$fShowPtr1 ls_s48rj s_s48rk;

GHC.Ptr.$fShowPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.Ptr.Ptr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Ptr.$fShowFunPtr_$cshowsPrec
                                    GHC.Ptr.$fShowPtr_$cshow
                                    GHC.Ptr.$fShowPtr_$cshowList];

GHC.Ptr.$fOrdFunPtr_$c<
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48rl b_s48rm]
        case a1_s48rl of {
          GHC.Ptr.FunPtr a2_s48ro [Occ=Once] ->
              case b_s48rm of {
                GHC.Ptr.FunPtr b1_s48rq [Occ=Once] ->
                    case ltAddr# [a2_s48ro b1_s48rq] of sat_s48rr {
                      __DEFAULT -> tagToEnum# [sat_s48rr];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$ccompare
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48rs b_s48rt]
        case a1_s48rs of {
          GHC.Ptr.FunPtr a2_s48rv ->
              case b_s48rt of {
                GHC.Ptr.FunPtr b1_s48rx ->
                    case ltAddr# [a2_s48rv b1_s48rx] of {
                      __DEFAULT ->
                          case eqAddr# [a2_s48rv b1_s48rx] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr_$c==
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s48rA ds1_s48rB]
        case ds_s48rA of {
          GHC.Ptr.FunPtr a1_s48rD [Occ=Once] ->
              case ds1_s48rB of {
                GHC.Ptr.FunPtr b1_s48rF [Occ=Once] ->
                    case eqAddr# [a1_s48rD b1_s48rF] of sat_s48rG {
                      __DEFAULT -> tagToEnum# [sat_s48rG];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s48rH eta1_s48rI]
        case eta_s48rH of {
          GHC.Ptr.FunPtr a1_s48rK [Occ=Once] ->
              case eta1_s48rI of {
                GHC.Ptr.FunPtr b1_s48rM [Occ=Once] ->
                    case eqAddr# [a1_s48rK b1_s48rM] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fEqFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Ptr.FunPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Ptr.$fEqFunPtr_$c==
                                     GHC.Ptr.$fEqFunPtr_$c/=];

GHC.Ptr.$fOrdFunPtr_$c<=
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48rO b_s48rP]
        case b_s48rP of {
          GHC.Ptr.FunPtr a2_s48rR [Occ=Once] ->
              case a1_s48rO of {
                GHC.Ptr.FunPtr b1_s48rT [Occ=Once] ->
                    case ltAddr# [a2_s48rR b1_s48rT] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$cmax
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s48rV y_s48rW]
        case y_s48rW of wild_s48rX {
          GHC.Ptr.FunPtr a1_s48rY [Occ=Once] ->
              case x_s48rV of wild1_s48rZ {
                GHC.Ptr.FunPtr b1_s48s0 [Occ=Once] ->
                    case ltAddr# [a1_s48rY b1_s48s0] of {
                      __DEFAULT -> wild_s48rX;
                      1# -> wild1_s48rZ;
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$c>=
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48s2 b_s48s3]
        case a1_s48s2 of {
          GHC.Ptr.FunPtr a2_s48s5 [Occ=Once] ->
              case b_s48s3 of {
                GHC.Ptr.FunPtr b1_s48s7 [Occ=Once] ->
                    case ltAddr# [a2_s48s5 b1_s48s7] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$c>
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48s9 b_s48sa]
        case b_s48sa of {
          GHC.Ptr.FunPtr a2_s48sc [Occ=Once] ->
              case a1_s48s9 of {
                GHC.Ptr.FunPtr b1_s48se [Occ=Once] ->
                    case ltAddr# [a2_s48sc b1_s48se] of sat_s48sf {
                      __DEFAULT -> tagToEnum# [sat_s48sf];
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr_$cmin
  :: forall a.
     GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s48sg y_s48sh]
        case y_s48sh of wild_s48si {
          GHC.Ptr.FunPtr a1_s48sj [Occ=Once] ->
              case x_s48sg of wild1_s48sk {
                GHC.Ptr.FunPtr b1_s48sl [Occ=Once] ->
                    case ltAddr# [a1_s48sj b1_s48sl] of {
                      __DEFAULT -> wild1_s48sk;
                      1# -> wild_s48si;
                    };
              };
        };

GHC.Ptr.$fOrdFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.Ptr.FunPtr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Ptr.$fEqFunPtr
                                      GHC.Ptr.$fOrdFunPtr_$ccompare
                                      GHC.Ptr.$fOrdFunPtr_$c<
                                      GHC.Ptr.$fOrdFunPtr_$c<=
                                      GHC.Ptr.$fOrdFunPtr_$c>
                                      GHC.Ptr.$fOrdFunPtr_$c>=
                                      GHC.Ptr.$fOrdFunPtr_$cmax
                                      GHC.Ptr.$fOrdFunPtr_$cmin];

GHC.Ptr.$fOrdPtr_$c<
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48sn b_s48so]
        case a1_s48sn of {
          GHC.Ptr.Ptr a2_s48sq [Occ=Once] ->
              case b_s48so of {
                GHC.Ptr.Ptr b1_s48ss [Occ=Once] ->
                    case ltAddr# [a2_s48sq b1_s48ss] of sat_s48st {
                      __DEFAULT -> tagToEnum# [sat_s48st];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$ccompare
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48su b_s48sv]
        case a1_s48su of {
          GHC.Ptr.Ptr a2_s48sx ->
              case b_s48sv of {
                GHC.Ptr.Ptr b1_s48sz ->
                    case ltAddr# [a2_s48sx b1_s48sz] of {
                      __DEFAULT ->
                          case eqAddr# [a2_s48sx b1_s48sz] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.EQ [];
                          };
                      1# -> GHC.Types.LT [];
                    };
              };
        };

GHC.Ptr.$fEqPtr_$c==
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s48sC ds1_s48sD]
        case ds_s48sC of {
          GHC.Ptr.Ptr a1_s48sF [Occ=Once] ->
              case ds1_s48sD of {
                GHC.Ptr.Ptr b1_s48sH [Occ=Once] ->
                    case eqAddr# [a1_s48sF b1_s48sH] of sat_s48sI {
                      __DEFAULT -> tagToEnum# [sat_s48sI];
                    };
              };
        };

GHC.Ptr.$fEqPtr_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s48sJ eta1_s48sK]
        case eta_s48sJ of {
          GHC.Ptr.Ptr a1_s48sM [Occ=Once] ->
              case eta1_s48sK of {
                GHC.Ptr.Ptr b1_s48sO [Occ=Once] ->
                    case eqAddr# [a1_s48sM b1_s48sO] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fEqPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Ptr.Ptr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Ptr.$fEqPtr_$c==
                                     GHC.Ptr.$fEqPtr_$c/=];

GHC.Ptr.$fOrdPtr_$c<=
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48sQ b_s48sR]
        case b_s48sR of {
          GHC.Ptr.Ptr a2_s48sT [Occ=Once] ->
              case a1_s48sQ of {
                GHC.Ptr.Ptr b1_s48sV [Occ=Once] ->
                    case ltAddr# [a2_s48sT b1_s48sV] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$cmax
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s48sX y_s48sY]
        case y_s48sY of wild_s48sZ {
          GHC.Ptr.Ptr a1_s48t0 [Occ=Once] ->
              case x_s48sX of wild1_s48t1 {
                GHC.Ptr.Ptr b1_s48t2 [Occ=Once] ->
                    case ltAddr# [a1_s48t0 b1_s48t2] of {
                      __DEFAULT -> wild_s48sZ;
                      1# -> wild1_s48t1;
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$c>=
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48t4 b_s48t5]
        case a1_s48t4 of {
          GHC.Ptr.Ptr a2_s48t7 [Occ=Once] ->
              case b_s48t5 of {
                GHC.Ptr.Ptr b1_s48t9 [Occ=Once] ->
                    case ltAddr# [a2_s48t7 b1_s48t9] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$c>
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [a1_s48tb b_s48tc]
        case b_s48tc of {
          GHC.Ptr.Ptr a2_s48te [Occ=Once] ->
              case a1_s48tb of {
                GHC.Ptr.Ptr b1_s48tg [Occ=Once] ->
                    case ltAddr# [a2_s48te b1_s48tg] of sat_s48th {
                      __DEFAULT -> tagToEnum# [sat_s48th];
                    };
              };
        };

GHC.Ptr.$fOrdPtr_$cmin
  :: forall a. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s48ti y_s48tj]
        case y_s48tj of wild_s48tk {
          GHC.Ptr.Ptr a1_s48tl [Occ=Once] ->
              case x_s48ti of wild1_s48tm {
                GHC.Ptr.Ptr b1_s48tn [Occ=Once] ->
                    case ltAddr# [a1_s48tl b1_s48tn] of {
                      __DEFAULT -> wild1_s48tm;
                      1# -> wild_s48tk;
                    };
              };
        };

GHC.Ptr.$fOrdPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Ord (GHC.Ptr.Ptr a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Ptr.$fEqPtr
                                      GHC.Ptr.$fOrdPtr_$ccompare
                                      GHC.Ptr.$fOrdPtr_$c<
                                      GHC.Ptr.$fOrdPtr_$c<=
                                      GHC.Ptr.$fOrdPtr_$c>
                                      GHC.Ptr.$fOrdPtr_$c>=
                                      GHC.Ptr.$fOrdPtr_$cmax
                                      GHC.Ptr.$fOrdPtr_$cmin];

GHC.Ptr.nullPtr :: forall a. GHC.Ptr.Ptr a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Ptr.Ptr! [__NULL];

GHC.Ptr.castPtr1 :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [v_s48tp] v_s48tp;

GHC.Ptr.castPtr :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.castPtr1 eta_B1;

GHC.Ptr.plusPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Ptr.Ptr b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s48tq ds1_s48tr]
        case ds_s48tq of {
          GHC.Ptr.Ptr addr_s48tt [Occ=Once] ->
              case ds1_s48tr of {
                GHC.Types.I# d_s48tv [Occ=Once] ->
                    case plusAddr# [addr_s48tt d_s48tv] of sat_s48tw {
                      __DEFAULT -> GHC.Ptr.Ptr [sat_s48tw];
                    };
              };
        };

GHC.Ptr.alignPtr
  :: forall a. GHC.Ptr.Ptr a -> GHC.Types.Int -> GHC.Ptr.Ptr a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [addr_s48tx ds_s48ty]
        case addr_s48tx of wild_s48tz {
          GHC.Ptr.Ptr a1_s48tA ->
              case ds_s48ty of {
                GHC.Types.I# i_s48tC ->
                    case remAddr# [a1_s48tA i_s48tC] of ds1_s48tD {
                      __DEFAULT ->
                          case -# [i_s48tC ds1_s48tD] of sat_s48tE {
                            __DEFAULT ->
                                case plusAddr# [a1_s48tA sat_s48tE] of sat_s48tF {
                                  __DEFAULT -> GHC.Ptr.Ptr [sat_s48tF];
                                };
                          };
                      0# -> wild_s48tz;
                    };
              };
        };

GHC.Ptr.minusPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.Ptr b -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s48tG ds1_s48tH]
        case ds_s48tG of {
          GHC.Ptr.Ptr a1_s48tJ [Occ=Once] ->
              case ds1_s48tH of {
                GHC.Ptr.Ptr a2_s48tL [Occ=Once] ->
                    case minusAddr# [a1_s48tJ a2_s48tL] of sat_s48tM {
                      __DEFAULT -> GHC.Types.I# [sat_s48tM];
                    };
              };
        };

GHC.Ptr.nullFunPtr :: forall a. GHC.Ptr.FunPtr a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Ptr.FunPtr! [__NULL];

GHC.Ptr.castFunPtr1
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [v_s48tN] v_s48tN;

GHC.Ptr.castFunPtr
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.FunPtr b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.castFunPtr1 eta_B1;

GHC.Ptr.castFunPtrToPtr
  :: forall a b. GHC.Ptr.FunPtr a -> GHC.Ptr.Ptr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s48tO]
        case ds_s48tO of {
          GHC.Ptr.FunPtr addr_s48tQ [Occ=Once] -> GHC.Ptr.Ptr [addr_s48tQ];
        };

GHC.Ptr.$fShowFunPtr_$cshowsPrec1
  :: forall a. GHC.Types.Int -> GHC.Ptr.FunPtr a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(U)><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [p_s48tR x_s48tS eta_s48tT]
        case x_s48tS of {
          GHC.Ptr.FunPtr addr_s48tV [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s48tV eta_s48tT of {
                (#,#) ww1_s48tX [Occ=Once] ww2_s48tY [Occ=Once] ->
                    : [ww1_s48tX ww2_s48tY];
              };
        };

GHC.Ptr.$fShowFunPtr_$cshow
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [x_s48tZ]
        case x_s48tZ of {
          GHC.Ptr.FunPtr addr_s48u1 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s48u1 GHC.Types.[] of {
                (#,#) ww1_s48u3 [Occ=Once] ww2_s48u4 [Occ=Once] ->
                    : [ww1_s48u3 ww2_s48u4];
              };
        };

GHC.Ptr.$fShowFunPtr1
  :: forall a. GHC.Ptr.FunPtr a -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S(S),1*U(U)><L,1*U>m2, Unf=OtherCon []] =
    [] \r [x_s48u5 eta_s48u6]
        case x_s48u5 of {
          GHC.Ptr.FunPtr addr_s48u8 [Occ=Once] ->
              case GHC.Ptr.$w$cshowsPrec addr_s48u8 eta_s48u6 of {
                (#,#) ww1_s48ua [Occ=Once] ww2_s48ub [Occ=Once] ->
                    : [ww1_s48ua ww2_s48ub];
              };
        };

GHC.Ptr.$fShowFunPtr_$cshowList
  :: forall a. [GHC.Ptr.FunPtr a] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s48uc s_s48ud]
        GHC.Show.showList__ GHC.Ptr.$fShowFunPtr1 ls_s48uc s_s48ud;

GHC.Ptr.$fShowFunPtr [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show (GHC.Ptr.FunPtr a)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Ptr.$fShowFunPtr_$cshowsPrec1
                                    GHC.Ptr.$fShowFunPtr_$cshow
                                    GHC.Ptr.$fShowFunPtr_$cshowList];

GHC.Ptr.castPtrToFunPtr
  :: forall a b. GHC.Ptr.Ptr a -> GHC.Ptr.FunPtr b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s48ue]
        case ds_s48ue of {
          GHC.Ptr.Ptr addr_s48ug [Occ=Once] -> GHC.Ptr.FunPtr [addr_s48ug];
        };

GHC.Ptr.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Ptr.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$trModule4];

GHC.Ptr.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Ptr"#;

GHC.Ptr.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$trModule2];

GHC.Ptr.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Ptr.$trModule3
                                     GHC.Ptr.$trModule1];

$krep_r47xK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r47xL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcAddr#
                                              GHC.Types.[]];

GHC.Ptr.$tcPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Ptr"#;

GHC.Ptr.$tcPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tcPtr2];

GHC.Ptr.$tcPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13939499724423561315##
                                    16316673677148652216##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tcPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep2_r47xM :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r47xK GHC.Types.[]];

$krep3_r47xN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep2_r47xM];

GHC.Ptr.$tc'Ptr1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r47xL $krep3_r47xN];

GHC.Ptr.$tc'Ptr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Ptr"#;

GHC.Ptr.$tc'Ptr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tc'Ptr3];

GHC.Ptr.$tc'Ptr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2332306090346040376##
                                    13491728187967991297##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tc'Ptr2
                                    1#
                                    GHC.Ptr.$tc'Ptr1];

GHC.Ptr.$tcFunPtr2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FunPtr"#;

GHC.Ptr.$tcFunPtr1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tcFunPtr2];

GHC.Ptr.$tcFunPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [38956960673620606##
                                    4307950889093819770##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tcFunPtr1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r47xO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcFunPtr
                                              $krep2_r47xM];

GHC.Ptr.$tc'FunPtr1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r47xL $krep4_r47xO];

GHC.Ptr.$tc'FunPtr3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FunPtr"#;

GHC.Ptr.$tc'FunPtr2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Ptr.$tc'FunPtr3];

GHC.Ptr.$tc'FunPtr :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15722333564603238588##
                                    12100865307857439187##
                                    GHC.Ptr.$trModule
                                    GHC.Ptr.$tc'FunPtr2
                                    1#
                                    GHC.Ptr.$tc'FunPtr1];

GHC.Ptr.Ptr :: forall a. GHC.Prim.Addr# -> GHC.Ptr.Ptr a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.Ptr [eta_B1];

GHC.Ptr.FunPtr :: forall a. GHC.Prim.Addr# -> GHC.Ptr.FunPtr a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Ptr.FunPtr [eta_B1];

