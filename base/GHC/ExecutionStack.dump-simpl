
==================== Tidy Core ====================
2018-03-16 16:08:34.651852963 UTC

Result size of Tidy Core
  = {terms: 58, types: 99, coercions: 9, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.ExecutionStack.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.ExecutionStack.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.ExecutionStack.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.ExecutionStack.$trModule3
  = GHC.Types.TrNameS GHC.ExecutionStack.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.ExecutionStack.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.ExecutionStack.$trModule2 = "GHC.ExecutionStack"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.ExecutionStack.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.ExecutionStack.$trModule1
  = GHC.Types.TrNameS GHC.ExecutionStack.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.ExecutionStack.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.ExecutionStack.$trModule
  = GHC.Types.Module
      GHC.ExecutionStack.$trModule3 GHC.ExecutionStack.$trModule1

-- RHS size: {terms: 14, types: 29, coercions: 0, joins: 0/0}
GHC.ExecutionStack.getStackTrace1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe [Location] #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7Vb0 [Occ=Once]
                    :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.ExecutionStack.Internal.collectStackTrace1 s_i7Vb0 of
                 { (# ipv_i7Vb3 [Occ=Once], ipv1_i7Vb4 [Occ=Once!] #) ->
                 (# ipv_i7Vb3,
                    case ipv1_i7Vb4 of {
                      Nothing -> GHC.Base.Nothing @ [Location];
                      Just a1_iaIvW [Occ=Once] -> stackFrames a1_iaIvW
                    } #)
                 }}]
GHC.ExecutionStack.getStackTrace1
  = \ (s_i7Vb0 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.ExecutionStack.Internal.collectStackTrace1 s_i7Vb0 of
      { (# ipv_i7Vb3, ipv1_i7Vb4 #) ->
      (# ipv_i7Vb3,
         case ipv1_i7Vb4 of {
           Nothing -> GHC.Base.Nothing @ [Location];
           Just a1_iaIvW -> stackFrames a1_iaIvW
         } #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
getStackTrace :: IO (Maybe [Location])
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.ExecutionStack.getStackTrace1
               `cast` (Sym (GHC.Types.N:IO[0] <Maybe [Location]>_R)
                       :: (GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe [Location] #) :: *)
                          ~R# (IO (Maybe [Location]) :: *))}]
getStackTrace
  = GHC.ExecutionStack.getStackTrace1
    `cast` (Sym (GHC.Types.N:IO[0] <Maybe [Location]>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe [Location] #) :: *)
               ~R# (IO (Maybe [Location]) :: *))

-- RHS size: {terms: 24, types: 35, coercions: 0, joins: 0/0}
GHC.ExecutionStack.showStackTrace1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe String #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 150 30}]
GHC.ExecutionStack.showStackTrace1
  = \ (s_X7Vbc :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.ExecutionStack.Internal.collectStackTrace1 s_X7Vbc of
      { (# ipv_i7Vb3, ipv1_i7Vb4 #) ->
      (# ipv_i7Vb3,
         case ipv1_i7Vb4 of {
           Nothing -> GHC.Base.Nothing @ String;
           Just a1_iaIvW ->
             case stackFrames a1_iaIvW of {
               Nothing -> GHC.Base.Nothing @ String;
               Just a2_XaIws ->
                 GHC.Base.Just
                   @ String
                   (GHC.CString.unpackAppendCString#
                      GHC.ExecutionStack.Internal.showStackFrames1
                      (GHC.ExecutionStack.Internal.showStackFrames_go
                         a2_XaIws (GHC.Types.[] @ Char)))
             }
         } #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
showStackTrace :: IO (Maybe String)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.ExecutionStack.showStackTrace1
               `cast` (Sym (GHC.Types.N:IO[0] <Maybe String>_R)
                       :: (GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe String #) :: *)
                          ~R# (IO (Maybe String) :: *))}]
showStackTrace
  = GHC.ExecutionStack.showStackTrace1
    `cast` (Sym (GHC.Types.N:IO[0] <Maybe String>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe String #) :: *)
               ~R# (IO (Maybe String) :: *))


