
==================== Raw Cmm ====================
2018-03-16 15:55:35.70700423 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:35.716595762 UTC

[section ""cstring" . lvl_rQ8I_bytes" {
     lvl_rQ8I_bytes:
         I8[] [80,114,101,108,117,100,101,46,99,104,114,58,32,98,97,100,32,97,114,103,117,109,101,110,116,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.720221207 UTC

[section ""data" . GHC.Char.$wlvl_closure" {
     GHC.Char.$wlvl_closure:
         const GHC.Char.$wlvl_info;
         const 0;
 },
 sat_sQ8O_entry() //  [R1]
         { []
         }
     {offset
       cQbu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cQbv; else goto cQbw;
       cQbv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cQbw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cQbr_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 9;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sQ8O_info" {
     sat_sQ8O_info:
         const sat_sQ8O_entry;
         const 4294967296;
         const 17;
 },
 _cQbr() //  [R1, R2]
         { []
         }
     {offset
       cQbr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cQbz; else goto cQby;
       cQbz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cQby: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cQbr_info" {
     block_cQbr_info:
         const _cQbr;
         const 0;
         const 30;
 },
 GHC.Char.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       cQbC: // global
           _sQ8K::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cQbD; else goto cQbE;
       cQbE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cQbG; else goto cQbF;
       cQbG: // global
           HpAlloc = 24;
           goto cQbD;
       cQbD: // global
           R2 = _sQ8K::I64;
           R1 = GHC.Char.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQbF: // global
           I64[Hp - 16] = sat_sQ8O_info;
           I64[Hp] = _sQ8K::I64;
           I64[Sp - 8] = block_cQbA_info;
           R3 = Hp - 16;
           R2 = lvl_rQ8I_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Char.$wlvl_info" {
     GHC.Char.$wlvl_info:
         const GHC.Char.$wlvl_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SQ9q_srt;
 },
 _cQbA() //  [R1]
         { []
         }
     {offset
       cQbA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cQbA_info" {
     block_cQbA_info:
         const _cQbA;
         const 0;
         const 4294967326;
         const SQ9q_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.730532988 UTC

[section ""data" . GHC.Char.chr1_closure" {
     GHC.Char.chr1_closure:
         const GHC.Char.chr1_info;
         const 0;
 },
 GHC.Char.chr1_entry() //  [R2]
         { []
         }
     {offset
       cQc7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cQc8; else goto cQc9;
       cQc8: // global
           R2 = R2;
           R1 = GHC.Char.chr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQc9: // global
           I64[Sp - 8] = block_cQc4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uQcd; else goto cQc5;
       uQcd: // global
           call _cQc4(R1) args: 0, res: 0, upd: 0;
       cQc5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Char.chr1_info" {
     GHC.Char.chr1_info:
         const GHC.Char.chr1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SQ9q_srt+8;
 },
 _cQc4() //  [R1]
         { []
         }
     {offset
       cQc4: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cQc4_info" {
     block_cQc4_info:
         const _cQc4;
         const 0;
         const 4294967326;
         const SQ9q_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.736788002 UTC

[section ""data" . GHC.Char.chr_closure" {
     GHC.Char.chr_closure:
         const GHC.Char.chr_info;
         const 0;
 },
 GHC.Char.chr_entry() //  [R2]
         { []
         }
     {offset
       cQcu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cQcv; else goto cQcw;
       cQcv: // global
           R2 = R2;
           R1 = GHC.Char.chr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQcw: // global
           I64[Sp - 8] = block_cQcr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uQcQ; else goto cQcs;
       uQcQ: // global
           call _cQcr(R1) args: 0, res: 0, upd: 0;
       cQcs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Char.chr_info" {
     GHC.Char.chr_info:
         const GHC.Char.chr_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SQ9q_srt+8;
 },
 _cQcr() //  [R1]
         { []
         }
     {offset
       cQcr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cQcB; else goto cQcA;
       cQcB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cQcA: // global
           _sQ8V::I64 = I64[R1 + 7];
           if (_sQ8V::I64 > 1114111) goto cQcI; else goto cQcP;
       cQcI: // global
           Hp = Hp - 16;
           R2 = _sQ8V::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       cQcP: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sQ8V::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cQcr_info" {
     block_cQcr_info:
         const _cQcr;
         const 0;
         const 4294967326;
         const SQ9q_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.742190646 UTC

[section ""cstring" . GHC.Char.$trModule4_bytes" {
     GHC.Char.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.743830544 UTC

[section ""data" . GHC.Char.$trModule3_closure" {
     GHC.Char.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Char.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.745552995 UTC

[section ""cstring" . GHC.Char.$trModule2_bytes" {
     GHC.Char.$trModule2_bytes:
         I8[] [71,72,67,46,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.747176259 UTC

[section ""data" . GHC.Char.$trModule1_closure" {
     GHC.Char.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Char.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.749388546 UTC

[section ""data" . GHC.Char.$trModule_closure" {
     GHC.Char.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Char.$trModule3_closure+1;
         const GHC.Char.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.751340023 UTC

[section ""relreadonly" . SQ9q_srt" {
     SQ9q_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Char.chr1_closure;
         const GHC.Char.chr_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.803845839 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:35.805323868 UTC

[section ""cstring" . lvl_rQ8I_bytes" {
     lvl_rQ8I_bytes:
         I8[] [80,114,101,108,117,100,101,46,99,104,114,58,32,98,97,100,32,97,114,103,117,109,101,110,116,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.808957323 UTC

[section ""data" . GHC.Char.$wlvl_closure" {
     GHC.Char.$wlvl_closure:
         const GHC.Char.$wlvl_info;
         const 0;
 },
 sat_sQdb_entry() //  [R1]
         { []
         }
     {offset
       cQdy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cQdz; else goto cQdA;
       cQdz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cQdA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cQdv_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 9;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sQdb_info" {
     sat_sQdb_info:
         const sat_sQdb_entry;
         const 4294967296;
         const 17;
 },
 _cQdv() //  [R1, R2]
         { []
         }
     {offset
       cQdv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cQdD; else goto cQdC;
       cQdD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cQdC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cQdv_info" {
     block_cQdv_info:
         const _cQdv;
         const 0;
         const 30;
 },
 GHC.Char.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       cQdG: // global
           _sQd7::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cQdH; else goto cQdI;
       cQdI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cQdK; else goto cQdJ;
       cQdK: // global
           HpAlloc = 24;
           goto cQdH;
       cQdH: // global
           R2 = _sQd7::I64;
           R1 = GHC.Char.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQdJ: // global
           I64[Hp - 16] = sat_sQdb_info;
           I64[Hp] = _sQd7::I64;
           I64[Sp - 8] = block_cQdE_info;
           R3 = Hp - 16;
           R2 = lvl_rQ8I_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Char.$wlvl_info" {
     GHC.Char.$wlvl_info:
         const GHC.Char.$wlvl_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SQdO_srt;
 },
 _cQdE() //  [R1]
         { []
         }
     {offset
       cQdE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cQdE_info" {
     block_cQdE_info:
         const _cQdE;
         const 0;
         const 4294967326;
         const SQdO_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.8184339 UTC

[section ""data" . GHC.Char.chr1_closure" {
     GHC.Char.chr1_closure:
         const GHC.Char.chr1_info;
         const 0;
 },
 GHC.Char.chr1_entry() //  [R2]
         { []
         }
     {offset
       cQei: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cQej; else goto cQek;
       cQej: // global
           R2 = R2;
           R1 = GHC.Char.chr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQek: // global
           I64[Sp - 8] = block_cQef_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uQeo; else goto cQeg;
       uQeo: // global
           call _cQef(R1) args: 0, res: 0, upd: 0;
       cQeg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Char.chr1_info" {
     GHC.Char.chr1_info:
         const GHC.Char.chr1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SQdO_srt+8;
 },
 _cQef() //  [R1]
         { []
         }
     {offset
       cQef: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cQef_info" {
     block_cQef_info:
         const _cQef;
         const 0;
         const 4294967326;
         const SQdO_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.824458209 UTC

[section ""data" . GHC.Char.chr_closure" {
     GHC.Char.chr_closure:
         const GHC.Char.chr_info;
         const 0;
 },
 GHC.Char.chr_entry() //  [R2]
         { []
         }
     {offset
       cQeG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cQeH; else goto cQeI;
       cQeH: // global
           R2 = R2;
           R1 = GHC.Char.chr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQeI: // global
           I64[Sp - 8] = block_cQeD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uQf2; else goto cQeE;
       uQf2: // global
           call _cQeD(R1) args: 0, res: 0, upd: 0;
       cQeE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Char.chr_info" {
     GHC.Char.chr_info:
         const GHC.Char.chr_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SQdO_srt+8;
 },
 _cQeD() //  [R1]
         { []
         }
     {offset
       cQeD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cQeN; else goto cQeM;
       cQeN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cQeM: // global
           _sQdi::I64 = I64[R1 + 7];
           if (_sQdi::I64 > 1114111) goto cQeU; else goto cQf1;
       cQeU: // global
           Hp = Hp - 16;
           R2 = _sQdi::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       cQf1: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _sQdi::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cQeD_info" {
     block_cQeD_info:
         const _cQeD;
         const 0;
         const 4294967326;
         const SQdO_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.830342156 UTC

[section ""cstring" . GHC.Char.$trModule4_bytes" {
     GHC.Char.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.832136042 UTC

[section ""data" . GHC.Char.$trModule3_closure" {
     GHC.Char.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Char.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.834593397 UTC

[section ""cstring" . GHC.Char.$trModule2_bytes" {
     GHC.Char.$trModule2_bytes:
         I8[] [71,72,67,46,67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.836220169 UTC

[section ""data" . GHC.Char.$trModule1_closure" {
     GHC.Char.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Char.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.838134331 UTC

[section ""data" . GHC.Char.$trModule_closure" {
     GHC.Char.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Char.$trModule3_closure+1;
         const GHC.Char.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:35.839946928 UTC

[section ""relreadonly" . SQdO_srt" {
     SQdO_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Char.chr1_closure;
         const GHC.Char.chr_closure;
 }]

