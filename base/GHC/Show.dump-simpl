
==================== Tidy Core ====================
2018-03-16 15:55:13.236324394 UTC

Result size of Tidy Core
  = {terms: 6,603, types: 9,721, coercions: 0, joins: 1/30}

-- RHS size: {terms: 6, types: 14, coercions: 0, joins: 0/0}
showsPrec :: forall a. Show a => Int -> a -> ShowS
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),U(U,A,A)>,
 RULES: Built in rule for showsPrec: "Class op showsPrec"]
showsPrec
  = \ (@ a_az3k) (v_B1 :: Show a_az3k) ->
      case v_B1 of v_B1 { GHC.Show.C:Show v_B2 v_B3 v_B4 -> v_B2 }

-- RHS size: {terms: 6, types: 14, coercions: 0, joins: 0/0}
show :: forall a. Show a => a -> String
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),U(A,U,A)>,
 RULES: Built in rule for show: "Class op show"]
show
  = \ (@ a_az3k) (v_B1 :: Show a_az3k) ->
      case v_B1 of v_B1 { GHC.Show.C:Show v_B2 v_B3 v_B4 -> v_B3 }

-- RHS size: {terms: 6, types: 14, coercions: 0, joins: 0/0}
showList :: forall a. Show a => [a] -> ShowS
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),U(A,A,U)>,
 RULES: Built in rule for showList: "Class op showList"]
showList
  = \ (@ a_az3k) (v_B1 :: Show a_az3k) ->
      case v_B1 of v_B1 { GHC.Show.C:Show v_B2 v_B3 v_B4 -> v_B4 }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showCommaSpace2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showCommaSpace2 = ", "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showCommaSpace1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showCommaSpace1 = unpackCString# GHC.Show.showCommaSpace2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar13 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.showLitChar13 = GHC.Types.C# '\\'#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab98 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab98 = "NUL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab97 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab97 = unpackCString# GHC.Show.asciiTab98

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab96 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab96 = "SOH"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab95 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab95 = unpackCString# GHC.Show.asciiTab96

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab94 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab94 = "STX"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab93 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab93 = unpackCString# GHC.Show.asciiTab94

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab92 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab92 = "ETX"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab91 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab91 = unpackCString# GHC.Show.asciiTab92

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab90 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab90 = "EOT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab89 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab89 = unpackCString# GHC.Show.asciiTab90

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab88 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab88 = "ENQ"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab87 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab87 = unpackCString# GHC.Show.asciiTab88

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab86 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab86 = "ACK"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab85 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab85 = unpackCString# GHC.Show.asciiTab86

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab84 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab84 = "BEL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab83 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab83 = unpackCString# GHC.Show.asciiTab84

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab82 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab82 = "BS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab81 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab81 = unpackCString# GHC.Show.asciiTab82

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab80 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab80 = "HT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab79 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab79 = unpackCString# GHC.Show.asciiTab80

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab78 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab78 = "LF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab77 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab77 = unpackCString# GHC.Show.asciiTab78

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab76 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab76 = "VT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab75 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab75 = unpackCString# GHC.Show.asciiTab76

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab74 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab74 = "FF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab73 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab73 = unpackCString# GHC.Show.asciiTab74

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab72 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab72 = "CR"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab71 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab71 = unpackCString# GHC.Show.asciiTab72

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab70 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab70 = "SO"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab69 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab69 = unpackCString# GHC.Show.asciiTab70

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab68 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab68 = "SI"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab67 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab67 = unpackCString# GHC.Show.asciiTab68

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab66 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab66 = "DLE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab65 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab65 = unpackCString# GHC.Show.asciiTab66

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab64 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab64 = "DC1"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab63 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab63 = unpackCString# GHC.Show.asciiTab64

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab62 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab62 = "DC2"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab61 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab61 = unpackCString# GHC.Show.asciiTab62

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab60 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab60 = "DC3"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab59 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab59 = unpackCString# GHC.Show.asciiTab60

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab58 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab58 = "DC4"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab57 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab57 = unpackCString# GHC.Show.asciiTab58

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab56 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab56 = "NAK"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab55 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab55 = unpackCString# GHC.Show.asciiTab56

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab54 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab54 = "SYN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab53 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab53 = unpackCString# GHC.Show.asciiTab54

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab52 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab52 = "ETB"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab51 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab51 = unpackCString# GHC.Show.asciiTab52

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab50 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab50 = "CAN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab49 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab49 = unpackCString# GHC.Show.asciiTab50

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab48 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab48 = "EM"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab47 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab47 = unpackCString# GHC.Show.asciiTab48

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab46 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab46 = "SUB"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab45 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab45 = unpackCString# GHC.Show.asciiTab46

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab44 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab44 = "ESC"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab43 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab43 = unpackCString# GHC.Show.asciiTab44

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab42 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab42 = "FS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab41 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab41 = unpackCString# GHC.Show.asciiTab42

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab40 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab40 = "GS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab39 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab39 = unpackCString# GHC.Show.asciiTab40

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab38 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab38 = "RS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab37 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab37 = unpackCString# GHC.Show.asciiTab38

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab36 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab36 = "US"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab35 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab35 = unpackCString# GHC.Show.asciiTab36

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab34 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab34 = "SP"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.asciiTab33 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.asciiTab33 = unpackCString# GHC.Show.asciiTab34

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.Show.asciiTab32 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab32
  = GHC.Types.: @ String GHC.Show.asciiTab33 (GHC.Types.[] @ String)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab31 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab31
  = GHC.Types.: @ String GHC.Show.asciiTab35 GHC.Show.asciiTab32

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab30 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab30
  = GHC.Types.: @ String GHC.Show.asciiTab37 GHC.Show.asciiTab31

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab29 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab29
  = GHC.Types.: @ String GHC.Show.asciiTab39 GHC.Show.asciiTab30

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab28 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab28
  = GHC.Types.: @ String GHC.Show.asciiTab41 GHC.Show.asciiTab29

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab27 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab27
  = GHC.Types.: @ String GHC.Show.asciiTab43 GHC.Show.asciiTab28

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab26 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab26
  = GHC.Types.: @ String GHC.Show.asciiTab45 GHC.Show.asciiTab27

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab25 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab25
  = GHC.Types.: @ String GHC.Show.asciiTab47 GHC.Show.asciiTab26

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab24 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab24
  = GHC.Types.: @ String GHC.Show.asciiTab49 GHC.Show.asciiTab25

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab23 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab23
  = GHC.Types.: @ String GHC.Show.asciiTab51 GHC.Show.asciiTab24

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab22 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab22
  = GHC.Types.: @ String GHC.Show.asciiTab53 GHC.Show.asciiTab23

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab21 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab21
  = GHC.Types.: @ String GHC.Show.asciiTab55 GHC.Show.asciiTab22

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab20 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab20
  = GHC.Types.: @ String GHC.Show.asciiTab57 GHC.Show.asciiTab21

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab19 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab19
  = GHC.Types.: @ String GHC.Show.asciiTab59 GHC.Show.asciiTab20

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab18 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab18
  = GHC.Types.: @ String GHC.Show.asciiTab61 GHC.Show.asciiTab19

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab17 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab17
  = GHC.Types.: @ String GHC.Show.asciiTab63 GHC.Show.asciiTab18

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab16 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab16
  = GHC.Types.: @ String GHC.Show.asciiTab65 GHC.Show.asciiTab17

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab15 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab15
  = GHC.Types.: @ String GHC.Show.asciiTab67 GHC.Show.asciiTab16

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab14 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab14
  = GHC.Types.: @ String GHC.Show.asciiTab69 GHC.Show.asciiTab15

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab13 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab13
  = GHC.Types.: @ String GHC.Show.asciiTab71 GHC.Show.asciiTab14

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab12 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab12
  = GHC.Types.: @ String GHC.Show.asciiTab73 GHC.Show.asciiTab13

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab11 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab11
  = GHC.Types.: @ String GHC.Show.asciiTab75 GHC.Show.asciiTab12

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab10 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab10
  = GHC.Types.: @ String GHC.Show.asciiTab77 GHC.Show.asciiTab11

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab9 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab9
  = GHC.Types.: @ String GHC.Show.asciiTab79 GHC.Show.asciiTab10

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab8 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab8
  = GHC.Types.: @ String GHC.Show.asciiTab81 GHC.Show.asciiTab9

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab7 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab7
  = GHC.Types.: @ String GHC.Show.asciiTab83 GHC.Show.asciiTab8

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab6 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab6
  = GHC.Types.: @ String GHC.Show.asciiTab85 GHC.Show.asciiTab7

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab5 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab5
  = GHC.Types.: @ String GHC.Show.asciiTab87 GHC.Show.asciiTab6

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab4 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab4
  = GHC.Types.: @ String GHC.Show.asciiTab89 GHC.Show.asciiTab5

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab3 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab3
  = GHC.Types.: @ String GHC.Show.asciiTab91 GHC.Show.asciiTab4

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab2 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab2
  = GHC.Types.: @ String GHC.Show.asciiTab93 GHC.Show.asciiTab3

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Show.asciiTab1 :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.asciiTab1
  = GHC.Types.: @ String GHC.Show.asciiTab95 GHC.Show.asciiTab2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
asciiTab :: [String]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
asciiTab
  = GHC.Types.: @ String GHC.Show.asciiTab97 GHC.Show.asciiTab1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)2 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$fShow(,)2 = GHC.Types.C# ')'#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)4 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$fShow(,)4 = GHC.Types.C# '('#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar1 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.showLitChar1 = GHC.Types.C# '-'#

Rec {
-- RHS size: {terms: 29, types: 16, coercions: 0, joins: 0/0}
GHC.Show.$witos' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Int# -> String -> (# Char, [Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []]
GHC.Show.$witos'
  = \ (w_sB4H :: Int#) (w1_sB4I :: String) ->
      case <# w_sB4H 10# of {
        __DEFAULT ->
          case quotRemInt# w_sB4H 10# of { (# ipv_szZf, ipv1_szZg #) ->
          GHC.Show.$witos'
            ipv_szZf
            (GHC.Types.:
               @ Char (GHC.Types.C# (chr# (+# 48# ipv1_szZg))) w1_sB4I)
          };
        1# -> (# GHC.Types.C# (chr# (+# 48# w_sB4H)), w1_sB4I #)
      }
end Rec }

-- RHS size: {terms: 50, types: 51, coercions: 0, joins: 0/0}
GHC.Show.$witos [InlPrag=NOUSERINLINE[0]]
  :: Int# -> String -> (# Char, [Char] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [81 0] 225 60}]
GHC.Show.$witos
  = \ (w_sB4N :: Int#) (w1_sB4O :: String) ->
      case <# w_sB4N 0# of {
        __DEFAULT -> GHC.Show.$witos' w_sB4N w1_sB4O;
        1# ->
          case w_sB4N of wild_X65 {
            __DEFAULT ->
              (# GHC.Show.showLitChar1,
                 case GHC.Show.$witos' (negateInt# wild_X65) w1_sB4O of
                 { (# ww1_sBh0, ww2_sBh1 #) ->
                 GHC.Types.: @ Char ww1_sBh0 ww2_sBh1
                 } #);
            -9223372036854775808# ->
              (# GHC.Show.showLitChar1,
                 case quotRemInt# -9223372036854775808# 10# of
                 { (# ipv_szZn, ipv1_szZo #) ->
                 case GHC.Show.$witos'
                        (negateInt# ipv_szZn)
                        (case GHC.Show.$witos' (negateInt# ipv1_szZo) w1_sB4O of
                         { (# ww1_sBh0, ww2_sBh1 #) ->
                         GHC.Types.: @ Char ww1_sBh0 ww2_sBh1
                         })
                 of
                 { (# ww1_sBh0, ww2_sBh1 #) ->
                 GHC.Types.: @ Char ww1_sBh0 ww2_sBh1
                 }
                 } #)
          }
      }

-- RHS size: {terms: 33, types: 21, coercions: 0, joins: 0/0}
GHC.Show.$wshowSignedInt [InlPrag=NOUSERINLINE[0]]
  :: Int# -> Int# -> String -> (# Char, [Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 162 30}]
GHC.Show.$wshowSignedInt
  = \ (ww_sB4Y :: Int#) (ww1_sB52 :: Int#) (w_sB4V :: String) ->
      case <# ww1_sB52 0# of {
        __DEFAULT -> GHC.Show.$witos ww1_sB52 w_sB4V;
        1# ->
          case ># ww_sB4Y 6# of {
            __DEFAULT -> GHC.Show.$witos ww1_sB52 w_sB4V;
            1# ->
              (# GHC.Show.$fShow(,)4,
                 case GHC.Show.$witos
                        ww1_sB52 (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_sB4V)
                 of
                 { (# ww3_sBh3, ww4_sBh4 #) ->
                 GHC.Types.: @ Char ww3_sBh3 ww4_sBh4
                 } #)
          }
      }

-- RHS size: {terms: 18, types: 17, coercions: 0, joins: 0/0}
showSignedInt [InlPrag=NOUSERINLINE[0]] :: Int -> Int -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sB4T [Occ=Once!] :: Int)
                 (w1_sB4U [Occ=Once!] :: Int)
                 (w2_sB4V [Occ=Once] :: String) ->
                 case w_sB4T of { I# ww1_sB4Y [Occ=Once] ->
                 case w1_sB4U of { I# ww3_sB52 [Occ=Once] ->
                 case GHC.Show.$wshowSignedInt ww1_sB4Y ww3_sB52 w2_sB4V of
                 { (# ww5_sBh6 [Occ=Once], ww6_sBh7 [Occ=Once] #) ->
                 GHC.Types.: @ Char ww5_sBh6 ww6_sBh7
                 }
                 }
                 }}]
showSignedInt
  = \ (w_sB4T :: Int) (w1_sB4U :: Int) (w2_sB4V :: String) ->
      case w_sB4T of { I# ww1_sB4Y ->
      case w1_sB4U of { I# ww3_sB52 ->
      case GHC.Show.$wshowSignedInt ww1_sB4Y ww3_sB52 w2_sB4V of
      { (# ww5_sBh6, ww6_sBh7 #) ->
      GHC.Types.: @ Char ww5_sBh6 ww6_sBh7
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar12 = "\\a"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar11 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar11 = "\\b"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar10 = "\\t"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar9 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar9 = "\\n"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar8 = "\\v"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar7 = "\\f"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar6 = "\\r"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar5 = "\\SO"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar4 = "\\&"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar3 = "\\\\"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showLitChar2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showLitChar2 = "\\DEL"#

-- RHS size: {terms: 122, types: 40, coercions: 0, joins: 0/0}
GHC.Show.$wshowLitChar [InlPrag=NOUSERINLINE[0]]
  :: Char# -> String -> String
[GblId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 60] 794 60}]
GHC.Show.$wshowLitChar
  = \ (ww_sB5c :: Char#) (w_sB59 :: String) ->
      case gtChar# ww_sB5c '\DEL'# of {
        __DEFAULT ->
          case ww_sB5c of ds_XzSj {
            __DEFAULT ->
              case geChar# ds_XzSj ' '# of {
                __DEFAULT ->
                  case ds_XzSj of ds1_XzSo {
                    __DEFAULT ->
                      ++
                        @ Char
                        (GHC.Types.:
                           @ Char
                           GHC.Show.showLitChar13
                           (GHC.List.$w!! @ String asciiTab (ord# ds1_XzSo)))
                        w_sB59;
                    '\a'# -> unpackAppendCString# GHC.Show.showLitChar12 w_sB59;
                    '\b'# -> unpackAppendCString# GHC.Show.showLitChar11 w_sB59;
                    '\t'# -> unpackAppendCString# GHC.Show.showLitChar10 w_sB59;
                    '\n'# -> unpackAppendCString# GHC.Show.showLitChar9 w_sB59;
                    '\v'# -> unpackAppendCString# GHC.Show.showLitChar8 w_sB59;
                    '\f'# -> unpackAppendCString# GHC.Show.showLitChar7 w_sB59;
                    '\r'# -> unpackAppendCString# GHC.Show.showLitChar6 w_sB59;
                    '\SO'# ->
                      unpackAppendCString#
                        GHC.Show.showLitChar5
                        (case w_sB59 of wild_X50 {
                           [] -> GHC.Types.[] @ Char;
                           : c_az8S ds2_dzPL ->
                             case c_az8S of { C# x_a5ih ->
                             case x_a5ih of {
                               __DEFAULT -> wild_X50;
                               'H'# -> unpackAppendCString# GHC.Show.showLitChar4 wild_X50
                             }
                             }
                         })
                  };
                1# -> GHC.Types.: @ Char (GHC.Types.C# ds_XzSj) w_sB59
              };
            '\\'# -> unpackAppendCString# GHC.Show.showLitChar3 w_sB59;
            '\DEL'# -> unpackAppendCString# GHC.Show.showLitChar2 w_sB59
          };
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.showLitChar13
            (case GHC.Show.$witos
                    (ord# ww_sB5c)
                    (case w_sB59 of wild_X50 {
                       [] -> GHC.Types.[] @ Char;
                       : c_az8S ds_dzPL ->
                         case c_az8S of { C# c1_azZT ->
                         case geChar# c1_azZT '0'# of {
                           __DEFAULT -> wild_X50;
                           1# ->
                             case leChar# c1_azZT '9'# of {
                               __DEFAULT -> wild_X50;
                               1# -> unpackAppendCString# GHC.Show.showLitChar4 wild_X50
                             }
                         }
                         }
                     })
             of
             { (# ww2_sBh3, ww3_sBh4 #) ->
             GHC.Types.: @ Char ww2_sBh3 ww3_sBh4
             })
      }

-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
showLitChar [InlPrag=NOUSERINLINE[0]] :: Char -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sB58 [Occ=Once!] :: Char)
                 (w1_sB59 [Occ=Once] :: String) ->
                 case w_sB58 of { C# ww1_sB5c [Occ=Once] ->
                 GHC.Show.$wshowLitChar ww1_sB5c w1_sB59
                 }}]
showLitChar
  = \ (w_sB58 :: Char) (w1_sB59 :: String) ->
      case w_sB58 of { C# ww1_sB5c ->
      GHC.Show.$wshowLitChar ww1_sB5c w1_sB59
      }

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
GHC.Show.$dmshowsPrec :: forall a. Show a => Int -> a -> ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(S)L),1*U(A,1*C1(U),A)><L,A><L,U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_az3k)
                 ($dShow_azqE [Occ=Once] :: Show a_az3k)
                 _ [Occ=Dead]
                 (x_az3l [Occ=Once] :: a_az3k)
                 (s_az3m [Occ=Once] :: String) ->
                 augment
                   @ Char
                   (\ (@ b_it1L)
                      (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                      (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                      foldr
                        @ Char @ b_it1L c_it1M n_it1N (show @ a_az3k $dShow_azqE x_az3l))
                   s_az3m}]
GHC.Show.$dmshowsPrec
  = \ (@ a_az3k)
      ($dShow_azqE :: Show a_az3k)
      _ [Occ=Dead]
      (x_az3l :: a_az3k)
      (s_az3m :: String) ->
      ++ @ Char (show @ a_az3k $dShow_azqE x_az3l) s_az3m

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showList__3 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.showList__3 = GHC.Types.C# '['#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showList__2 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.showList__2 = GHC.Types.C# ']'#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showList__1 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.showList__1 = GHC.Types.C# ','#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showList__4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.showList__4 = "[]"#

-- RHS size: {terms: 34, types: 27, coercions: 0, joins: 0/2}
showList__ :: forall a. (a -> ShowS) -> [a] -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 0] 230 30}]
showList__
  = \ (@ a_azqi)
      (ds_dzR8 :: a_azqi -> ShowS)
      (ds1_dzR9 :: [a_azqi])
      (s_az82 :: String) ->
      case ds1_dzR9 of {
        [] -> unpackAppendCString# GHC.Show.showList__4 s_az82;
        : x_az84 xs_az85 ->
          GHC.Types.:
            @ Char
            GHC.Show.showList__3
            (ds_dzR8
               x_az84
               (let {
                  lvl45_sAgl :: [Char]
                  [LclId, Unf=OtherCon []]
                  lvl45_sAgl = GHC.Types.: @ Char GHC.Show.showList__2 s_az82 } in
                letrec {
                  showl_sAeB [Occ=LoopBreaker] :: [a_azqi] -> String
                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                  showl_sAeB
                    = \ (ds2_dzRg :: [a_azqi]) ->
                        case ds2_dzRg of {
                          [] -> lvl45_sAgl;
                          : y_az88 ys_az89 ->
                            GHC.Types.:
                              @ Char GHC.Show.showList__1 (ds_dzR8 y_az88 (showl_sAeB ys_az89))
                        }; } in
                showl_sAeB xs_az85))
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rC0c :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rC0c = "\\\""#

Rec {
-- RHS size: {terms: 24, types: 11, coercions: 0, joins: 0/0}
showLitString [Occ=LoopBreaker] :: String -> ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []]
showLitString
  = \ (ds_dzQ9 :: [Char]) (s_az8z :: String) ->
      case ds_dzQ9 of {
        [] -> s_az8z;
        : ds1_dzQf cs_az8A ->
          case ds1_dzQf of { C# ds2_dzQg ->
          case ds2_dzQg of ds3_XzSE {
            __DEFAULT ->
              GHC.Show.$wshowLitChar ds3_XzSE (showLitString cs_az8A s_az8z);
            '"'# ->
              unpackAppendCString# lvl_rC0c (showLitString cs_az8A s_az8z)
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)3 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$fShow(,)3 = GHC.Types.C# '"'#

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)_$cshowList1 :: [Char] -> ShowS
[GblId,
 Arity=2,
 Str=<L,1*U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (cs_az7Y [Occ=Once] :: [Char])
                 (eta_B1 [Occ=Once] :: String) ->
                 GHC.Types.:
                   @ Char
                   GHC.Show.$fShow(,)3
                   (showLitString
                      cs_az7Y (GHC.Types.: @ Char GHC.Show.$fShow(,)3 eta_B1))}]
GHC.Show.$fShow(,)_$cshowList1
  = \ (cs_az7Y :: [Char]) (eta_B1 :: String) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)3
        (showLitString
           cs_az7Y (GHC.Types.: @ Char GHC.Show.$fShow(,)3 eta_B1))

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$s$fShow[]_rC0d :: Int -> [Char] -> String -> String
[GblId, Arity=3, Str=<L,A><L,1*U><L,U>m2, Unf=OtherCon []]
$s$fShow[]_rC0d
  = \ _ [Occ=Dead] (eta_B2 :: [Char]) (eta1_B1 :: String) ->
      GHC.Show.$fShow(,)_$cshowList1 eta_B2 eta1_B1

-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$cshowList1 :: [[Char]] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [[Char]])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ [Char] GHC.Show.$fShow(,)_$cshowList1 ls_az3o s_az3p}]
GHC.Show.$fShow[]_$s$cshowList1
  = \ (ls_az3o :: [[Char]]) (s_az3p :: String) ->
      showList__ @ [Char] GHC.Show.$fShow(,)_$cshowList1 ls_az3o s_az3p

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]1 :: [Char]
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.$fShow[]1
  = GHC.Types.: @ Char GHC.Show.$fShow(,)3 (GHC.Types.[] @ Char)

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$cshow1 :: [Char] -> String
[GblId,
 Arity=1,
 Str=<L,1*U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: [Char]) ->
                 GHC.Types.:
                   @ Char
                   GHC.Show.$fShow(,)3
                   (showLitString x_az3n GHC.Show.$fShow[]1)}]
GHC.Show.$fShow[]_$s$cshow1
  = \ (x_az3n :: [Char]) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)3
        (showLitString x_az3n GHC.Show.$fShow[]1)

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$fShow[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: Show [Char]
[GblId,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: [Char]
                       \ _ [Occ=Dead] -> GHC.Show.$fShow(,)_$cshowList1
                       GHC.Show.$fShow[]_$s$cshow1
                       GHC.Show.$fShow[]_$s$cshowList1]
GHC.Show.$fShow[]_$s$fShow[]1
  = GHC.Show.C:Show
      @ [Char]
      $s$fShow[]_rC0d
      GHC.Show.$fShow[]_$s$cshow1
      GHC.Show.$fShow[]_$s$cshowList1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$fShow(,)1 = GHC.Types.I# 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rC0e :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl1_rC0e = "SrcLoc {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_rC0f :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_rC0f = "srcLocPackage = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_rC0g :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl3_rC0g = "srcLocModule = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_rC0h :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_rC0h = "srcLocFile = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_rC0i :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl5_rC0i = "srcLocStartLine = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_rC0j :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl6_rC0j = "srcLocStartCol = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_rC0k :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl7_rC0k = "srcLocEndLine = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl8_rC0l :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl8_rC0l = "srcLocEndCol = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl9_rC0m :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl9_rC0m = "}"#

-- RHS size: {terms: 114, types: 77, coercions: 0, joins: 0/1}
GHC.Show.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int#
     -> [Char]
     -> [Char]
     -> [Char]
     -> Int
     -> Int
     -> Int
     -> Int
     -> String
     -> String
[GblId,
 Arity=9,
 Str=<S,U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
 Unf=OtherCon []]
GHC.Show.$w$cshowsPrec
  = \ (ww_sB5s :: Int#)
      (ww1_sB5w :: [Char])
      (ww2_sB5x :: [Char])
      (ww3_sB5y :: [Char])
      (ww4_sB5z :: Int)
      (ww5_sB5A :: Int)
      (ww6_sB5B :: Int)
      (ww7_sB5C :: Int)
      (w_sB5p :: String) ->
      let {
        p_sAdp [Dmd=<L,1*C1(U)>] :: ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_sAdp
          = \ (x_XnUB [OS=OneShot] :: String) ->
              unpackAppendCString#
                lvl1_rC0e
                (unpackAppendCString#
                   lvl2_rC0f
                   (GHC.Types.:
                      @ Char
                      GHC.Show.$fShow(,)3
                      (showLitString
                         ww1_sB5w
                         (GHC.Types.:
                            @ Char
                            GHC.Show.$fShow(,)3
                            (++
                               @ Char
                               GHC.Show.showCommaSpace1
                               (unpackAppendCString#
                                  lvl3_rC0g
                                  (GHC.Types.:
                                     @ Char
                                     GHC.Show.$fShow(,)3
                                     (showLitString
                                        ww2_sB5x
                                        (GHC.Types.:
                                           @ Char
                                           GHC.Show.$fShow(,)3
                                           (++
                                              @ Char
                                              GHC.Show.showCommaSpace1
                                              (unpackAppendCString#
                                                 lvl4_rC0h
                                                 (GHC.Types.:
                                                    @ Char
                                                    GHC.Show.$fShow(,)3
                                                    (showLitString
                                                       ww3_sB5y
                                                       (GHC.Types.:
                                                          @ Char
                                                          GHC.Show.$fShow(,)3
                                                          (++
                                                             @ Char
                                                             GHC.Show.showCommaSpace1
                                                             (unpackAppendCString#
                                                                lvl5_rC0i
                                                                (case ww4_sB5z of { I# n_az8W ->
                                                                 case GHC.Show.$witos
                                                                        n_az8W
                                                                        (++
                                                                           @ Char
                                                                           GHC.Show.showCommaSpace1
                                                                           (unpackAppendCString#
                                                                              lvl6_rC0j
                                                                              (case ww5_sB5A of
                                                                               { I# n1_XzhO ->
                                                                               case GHC.Show.$witos
                                                                                      n1_XzhO
                                                                                      (++
                                                                                         @ Char
                                                                                         GHC.Show.showCommaSpace1
                                                                                         (unpackAppendCString#
                                                                                            lvl7_rC0k
                                                                                            (case ww6_sB5B
                                                                                             of
                                                                                             { I# n2_XzhT ->
                                                                                             case GHC.Show.$witos
                                                                                                    n2_XzhT
                                                                                                    (++
                                                                                                       @ Char
                                                                                                       GHC.Show.showCommaSpace1
                                                                                                       (unpackAppendCString#
                                                                                                          lvl8_rC0l
                                                                                                          (case ww7_sB5C
                                                                                                           of
                                                                                                           { I# n3_XzhY ->
                                                                                                           case GHC.Show.$witos
                                                                                                                  n3_XzhY
                                                                                                                  (unpackAppendCString#
                                                                                                                     lvl9_rC0m
                                                                                                                     x_XnUB)
                                                                                                           of
                                                                                                           { (# ww9_sBh3,
                                                                                                                ww10_sBh4 #) ->
                                                                                                           GHC.Types.:
                                                                                                             @ Char
                                                                                                             ww9_sBh3
                                                                                                             ww10_sBh4
                                                                                                           }
                                                                                                           })))
                                                                                             of
                                                                                             { (# ww9_sBh3,
                                                                                                  ww10_sBh4 #) ->
                                                                                             GHC.Types.:
                                                                                               @ Char
                                                                                               ww9_sBh3
                                                                                               ww10_sBh4
                                                                                             }
                                                                                             })))
                                                                               of
                                                                               { (# ww9_sBh3,
                                                                                    ww10_sBh4 #) ->
                                                                               GHC.Types.:
                                                                                 @ Char
                                                                                 ww9_sBh3
                                                                                 ww10_sBh4
                                                                               }
                                                                               })))
                                                                 of
                                                                 { (# ww9_sBh3, ww10_sBh4 #) ->
                                                                 GHC.Types.:
                                                                   @ Char ww9_sBh3 ww10_sBh4
                                                                 }
                                                                 }))))))))))))))))) } in
      case >=# ww_sB5s 11# of {
        __DEFAULT -> p_sAdp w_sB5p;
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (p_sAdp (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_sB5p))
      }

-- RHS size: {terms: 19, types: 16, coercions: 0, joins: 0/0}
GHC.Show.$fShowSrcLoc_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> SrcLoc -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sB5n [Occ=Once!] :: Int)
                 (w1_sB5o [Occ=Once!] :: SrcLoc)
                 (w2_sB5p [Occ=Once] :: String) ->
                 case w_sB5n of { I# ww1_sB5s [Occ=Once] ->
                 case w1_sB5o of
                 { SrcLoc ww3_sB5w [Occ=Once] ww4_sB5x [Occ=Once]
                          ww5_sB5y [Occ=Once] ww6_sB5z [Occ=Once] ww7_sB5A [Occ=Once]
                          ww8_sB5B [Occ=Once] ww9_sB5C [Occ=Once] ->
                 GHC.Show.$w$cshowsPrec
                   ww1_sB5s
                   ww3_sB5w
                   ww4_sB5x
                   ww5_sB5y
                   ww6_sB5z
                   ww7_sB5A
                   ww8_sB5B
                   ww9_sB5C
                   w2_sB5p
                 }
                 }}]
GHC.Show.$fShowSrcLoc_$cshowsPrec
  = \ (w_sB5n :: Int) (w1_sB5o :: SrcLoc) (w2_sB5p :: String) ->
      case w_sB5n of { I# ww1_sB5s ->
      case w1_sB5o of
      { SrcLoc ww3_sB5w ww4_sB5x ww5_sB5y ww6_sB5z ww7_sB5A ww8_sB5B
               ww9_sB5C ->
      GHC.Show.$w$cshowsPrec
        ww1_sB5s
        ww3_sB5w
        ww4_sB5x
        ww5_sB5y
        ww6_sB5z
        ww7_sB5A
        ww8_sB5B
        ww9_sB5C
        w2_sB5p
      }
      }

-- RHS size: {terms: 15, types: 13, coercions: 0, joins: 0/0}
GHC.Show.$fShowSrcLoc1 :: SrcLoc -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 110 0}]
GHC.Show.$fShowSrcLoc1
  = \ (w_sB5o :: SrcLoc) (w1_sB5p :: String) ->
      case w_sB5o of
      { SrcLoc ww1_sB5w ww2_sB5x ww3_sB5y ww4_sB5z ww5_sB5A ww6_sB5B
               ww7_sB5C ->
      GHC.Show.$w$cshowsPrec
        0#
        ww1_sB5w
        ww2_sB5x
        ww3_sB5y
        ww4_sB5z
        ww5_sB5A
        ww6_sB5B
        ww7_sB5C
        w1_sB5p
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowSrcLoc_$cshowList :: [SrcLoc] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [SrcLoc])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ SrcLoc GHC.Show.$fShowSrcLoc1 ls_az3o s_az3p}]
GHC.Show.$fShowSrcLoc_$cshowList
  = \ (ls_az3o :: [SrcLoc]) (s_az3p :: String) ->
      showList__ @ SrcLoc GHC.Show.$fShowSrcLoc1 ls_az3o s_az3p

-- RHS size: {terms: 14, types: 13, coercions: 0, joins: 0/0}
GHC.Show.$fShowSrcLoc_$cshow :: SrcLoc -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: SrcLoc) ->
                 GHC.Show.$fShowSrcLoc_$cshowsPrec
                   GHC.Show.$fShow(,)1 x_az3n (GHC.Types.[] @ Char)}]
GHC.Show.$fShowSrcLoc_$cshow
  = \ (x_az3n :: SrcLoc) ->
      case x_az3n of
      { SrcLoc ww1_sB5w ww2_sB5x ww3_sB5y ww4_sB5z ww5_sB5A ww6_sB5B
               ww7_sB5C ->
      GHC.Show.$w$cshowsPrec
        0#
        ww1_sB5w
        ww2_sB5x
        ww3_sB5y
        ww4_sB5z
        ww5_sB5A
        ww6_sB5B
        ww7_sB5C
        (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowSrcLoc [InlPrag=NOUSERINLINE CONLIKE] :: Show SrcLoc
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: SrcLoc
                       GHC.Show.$fShowSrcLoc_$cshowsPrec
                       GHC.Show.$fShowSrcLoc_$cshow
                       GHC.Show.$fShowSrcLoc_$cshowList]
GHC.Show.$fShowSrcLoc
  = GHC.Show.C:Show
      @ SrcLoc
      GHC.Show.$fShowSrcLoc_$cshowsPrec
      GHC.Show.$fShowSrcLoc_$cshow
      GHC.Show.$fShowSrcLoc_$cshowList

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
appPrec :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
appPrec = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
appPrec1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
appPrec1 = GHC.Types.I# 11#

Rec {
-- RHS size: {terms: 30, types: 9, coercions: 0, joins: 0/0}
GHC.Show.$wshowWord [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Word# -> String -> (# Char, [Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []]
GHC.Show.$wshowWord
  = \ (w_sB5F :: Word#) (w1_sB5G :: String) ->
      case ltWord# w_sB5F 10## of {
        __DEFAULT ->
          GHC.Show.$wshowWord
            (quotWord# w_sB5F 10##)
            (GHC.Types.:
               @ Char
               (GHC.Types.C# (chr# (+# 48# (word2Int# (remWord# w_sB5F 10##)))))
               w1_sB5G);
        1# ->
          (# GHC.Types.C# (chr# (+# 48# (word2Int# w_sB5F))), w1_sB5G #)
      }
end Rec }

-- RHS size: {terms: 10, types: 12, coercions: 0, joins: 0/0}
showWord [InlPrag=NOUSERINLINE[0]] :: Word# -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sB5F [Occ=Once] :: Word#)
                 (w1_sB5G [Occ=Once] :: String) ->
                 case GHC.Show.$wshowWord w_sB5F w1_sB5G of
                 { (# ww1_sBh9 [Occ=Once], ww2_sBha [Occ=Once] #) ->
                 GHC.Types.: @ Char ww1_sBh9 ww2_sBha
                 }}]
showWord
  = \ (w_sB5F :: Word#) (w1_sB5G :: String) ->
      case GHC.Show.$wshowWord w_sB5F w1_sB5G of
      { (# ww1_sBh9, ww2_sBha #) ->
      GHC.Types.: @ Char ww1_sBh9 ww2_sBha
      }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShowWord_$cshowsPrec :: Int -> Word -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S(S),1*U(U)><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_dzWJ [Occ=Once!] :: Word)
                 (eta_B1 [Occ=Once] :: String) ->
                 case ds1_dzWJ of { W# w_az7W [Occ=Once] ->
                 showWord w_az7W eta_B1
                 }}]
GHC.Show.$fShowWord_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_dzWJ :: Word) (eta_B1 :: String) ->
      case ds1_dzWJ of { W# w_az7W -> showWord w_az7W eta_B1 }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
shows :: forall a. Show a => a -> ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(C(S)LL),1*U(1*C1(U),A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azp8) ($dShow_azpa [Occ=Once] :: Show a_azp8) ->
                 showsPrec @ a_azp8 $dShow_azpa GHC.Show.$fShow(,)1}]
shows
  = \ (@ a_azp8) ($dShow_azpa :: Show a_azp8) ->
      showsPrec @ a_azp8 $dShow_azpa GHC.Show.$fShow(,)1

-- RHS size: {terms: 8, types: 7, coercions: 0, joins: 0/0}
GHC.Show.$dmshow :: forall a. Show a => a -> String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_az3k)
                 ($dShow_azqE [Occ=Once] :: Show a_az3k)
                 (x_az3n [Occ=Once] :: a_az3k) ->
                 showsPrec
                   @ a_az3k
                   $dShow_azqE
                   (GHC.Types.I# 0#)
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$dmshow
  = \ (@ a_az3k) ($dShow_azqE :: Show a_az3k) (x_az3n :: a_az3k) ->
      showsPrec
        @ a_az3k
        $dShow_azqE
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
GHC.Show.$dmshowList :: forall a. Show a => [a] -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(C1(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_az3k)
                 ($dShow_azqE [Occ=Once] :: Show a_az3k)
                 (ls_az3o [Occ=Once] :: [a_az3k])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ a_az3k
                   (showsPrec @ a_az3k $dShow_azqE (GHC.Types.I# 0#))
                   ls_az3o
                   s_az3p}]
GHC.Show.$dmshowList
  = \ (@ a_az3k)
      ($dShow_azqE :: Show a_az3k)
      (ls_az3o :: [a_az3k])
      (s_az3p :: String) ->
      showList__
        @ a_az3k
        (showsPrec @ a_az3k $dShow_azqE GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowWord1 :: Word -> String -> String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dzWJ [Occ=Once!] :: Word)
                 (eta_B1 [Occ=Once] :: String) ->
                 case ds_dzWJ of { W# w_az7W [Occ=Once] ->
                 showWord w_az7W eta_B1
                 }}]
GHC.Show.$fShowWord1
  = \ (ds_dzWJ :: Word) (eta_B1 :: String) ->
      case ds_dzWJ of { W# w_az7W -> showWord w_az7W eta_B1 }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowWord_$cshowList :: [Word] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [Word])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ Word GHC.Show.$fShowWord1 ls_az3o s_az3p}]
GHC.Show.$fShowWord_$cshowList
  = \ (ls_az3o :: [Word]) (s_az3p :: String) ->
      showList__ @ Word GHC.Show.$fShowWord1 ls_az3o s_az3p

-- RHS size: {terms: 12, types: 14, coercions: 0, joins: 0/0}
GHC.Show.$fShowWord_$cshow :: Word -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: Word) ->
                 case x_az3n of { W# w_az7W [Occ=Once] ->
                 showWord w_az7W (GHC.Types.[] @ Char)
                 }}]
GHC.Show.$fShowWord_$cshow
  = \ (x_az3n :: Word) ->
      case x_az3n of { W# w_az7W ->
      case GHC.Show.$wshowWord w_az7W (GHC.Types.[] @ Char) of
      { (# ww1_sBh9, ww2_sBha #) ->
      GHC.Types.: @ Char ww1_sBh9 ww2_sBha
      }
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowWord [InlPrag=NOUSERINLINE CONLIKE] :: Show Word
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Word
                       GHC.Show.$fShowWord_$cshowsPrec
                       GHC.Show.$fShowWord_$cshow
                       GHC.Show.$fShowWord_$cshowList]
GHC.Show.$fShowWord
  = GHC.Show.C:Show
      @ Word
      GHC.Show.$fShowWord_$cshowsPrec
      GHC.Show.$fShowWord_$cshow
      GHC.Show.$fShowWord_$cshowList

-- RHS size: {terms: 1, types: 1, coercions: 0, joins: 0/0}
showChar :: Char -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Types.: @ Char}]
showChar = GHC.Types.: @ Char

-- RHS size: {terms: 14, types: 6, coercions: 0, joins: 0/0}
showParen :: Bool -> ShowS -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (b_az8g [Occ=Once!] :: Bool)
                 (p_az8h [Occ=OnceL*] :: ShowS) ->
                 case b_az8g of {
                   False -> p_az8h;
                   True ->
                     \ (x_XnPe [Occ=Once] :: String) ->
                       GHC.Types.:
                         @ Char
                         GHC.Show.$fShow(,)4
                         (p_az8h (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe))
                 }}]
showParen
  = \ (b_az8g :: Bool) (p_az8h :: ShowS) ->
      case b_az8g of {
        False -> p_az8h;
        True ->
          \ (x_XnPe :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (p_az8h (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe))
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl10_rC0n :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl10_rC0n = "foldr1"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl11_rC0o :: String -> String
[GblId, Str=x]
lvl11_rC0o
  = GHC.List.errorEmptyList
      @ (String -> String) (unpackCString# lvl10_rC0n)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
go2_rC0p :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
go2_rC0p
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char GHC.Show.showList__1 (go2_rC0p wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 118, types: 142, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n o.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m, Show n, Show o) =>
     Int -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> ShowS
[GblId,
 Arity=18,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
  = \ (@ a_azye)
      (@ b_azyf)
      (@ c_azyg)
      (@ d_azyh)
      (@ e_azyi)
      (@ f12_azyj)
      (@ g_azyk)
      (@ h_azyl)
      (@ i_azym)
      (@ j_azyn)
      (@ k_azyo)
      (@ l_azyp)
      (@ m_azyq)
      (@ n_azyr)
      (@ o_azys)
      ($dShow_azyt :: Show a_azye)
      ($dShow1_azyu :: Show b_azyf)
      ($dShow2_azyv :: Show c_azyg)
      ($dShow3_azyw :: Show d_azyh)
      ($dShow4_azyx :: Show e_azyi)
      ($dShow5_azyy :: Show f12_azyj)
      ($dShow6_azyz :: Show g_azyk)
      ($dShow7_azyA :: Show h_azyl)
      ($dShow8_azyB :: Show i_azym)
      ($dShow9_azyC :: Show j_azyn)
      ($dShow10_azyD :: Show k_azyo)
      ($dShow11_azyE :: Show l_azyp)
      ($dShow12_azyF :: Show m_azyq)
      ($dShow13_azyG :: Show n_azyr)
      ($dShow14_azyH :: Show o_azys)
      _ [Occ=Dead]
      (ds1_dzSa
         :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
             h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys))
      (s_az4g :: String) ->
      case ds1_dzSa of
      { (a1_az41, b1_az42, c1_az43, d1_az44, e1_az45, f13_az46, g1_az47,
         h1_az48, i1_az49, j1_az4a, k1_az4b, l1_az4c, m1_az4d, n1_az4e,
         o1_az4f) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (go2_rC0p
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azye $dShow_azyt GHC.Show.$fShow(,)1 a1_az41)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azyf $dShow1_azyu GHC.Show.$fShow(,)1 b1_az42)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azyg $dShow2_azyv GHC.Show.$fShow(,)1 c1_az43)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azyh $dShow3_azyw GHC.Show.$fShow(,)1 d1_az44)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azyi $dShow4_azyx GHC.Show.$fShow(,)1 e1_az45)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azyj $dShow5_azyy GHC.Show.$fShow(,)1 f13_az46)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azyk $dShow6_azyz GHC.Show.$fShow(,)1 g1_az47)
                                (GHC.Types.:
                                   @ ShowS
                                   (showsPrec @ h_azyl $dShow7_azyA GHC.Show.$fShow(,)1 h1_az48)
                                   (GHC.Types.:
                                      @ ShowS
                                      (showsPrec @ i_azym $dShow8_azyB GHC.Show.$fShow(,)1 i1_az49)
                                      (GHC.Types.:
                                         @ ShowS
                                         (showsPrec
                                            @ j_azyn $dShow9_azyC GHC.Show.$fShow(,)1 j1_az4a)
                                         (GHC.Types.:
                                            @ ShowS
                                            (showsPrec
                                               @ k_azyo $dShow10_azyD GHC.Show.$fShow(,)1 k1_az4b)
                                            (GHC.Types.:
                                               @ ShowS
                                               (showsPrec
                                                  @ l_azyp
                                                  $dShow11_azyE
                                                  GHC.Show.$fShow(,)1
                                                  l1_az4c)
                                               (GHC.Types.:
                                                  @ ShowS
                                                  (showsPrec
                                                     @ m_azyq
                                                     $dShow12_azyF
                                                     GHC.Show.$fShow(,)1
                                                     m1_az4d)
                                                  (GHC.Types.:
                                                     @ ShowS
                                                     (showsPrec
                                                        @ n_azyr
                                                        $dShow13_azyG
                                                        GHC.Show.$fShow(,)1
                                                        n1_az4e)
                                                     (GHC.Types.:
                                                        @ ShowS
                                                        (showsPrec
                                                           @ o_azys
                                                           $dShow14_azyH
                                                           GHC.Show.$fShow(,)1
                                                           o1_az4f)
                                                        (GHC.Types.[] @ ShowS))))))))))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az4g))
      }

-- RHS size: {terms: 50, types: 92, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n o.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m, Show n, Show o) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> String
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=16,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azye)
                 (@ b_azyf)
                 (@ c_azyg)
                 (@ d_azyh)
                 (@ e_azyi)
                 (@ f12_azyj)
                 (@ g_azyk)
                 (@ h_azyl)
                 (@ i_azym)
                 (@ j_azyn)
                 (@ k_azyo)
                 (@ l_azyp)
                 (@ m_azyq)
                 (@ n_azyr)
                 (@ o_azys)
                 ($dShow_azyt [Occ=Once] :: Show a_azye)
                 ($dShow1_azyu [Occ=Once] :: Show b_azyf)
                 ($dShow2_azyv [Occ=Once] :: Show c_azyg)
                 ($dShow3_azyw [Occ=Once] :: Show d_azyh)
                 ($dShow4_azyx [Occ=Once] :: Show e_azyi)
                 ($dShow5_azyy [Occ=Once] :: Show f12_azyj)
                 ($dShow6_azyz [Occ=Once] :: Show g_azyk)
                 ($dShow7_azyA [Occ=Once] :: Show h_azyl)
                 ($dShow8_azyB [Occ=Once] :: Show i_azym)
                 ($dShow9_azyC [Occ=Once] :: Show j_azyn)
                 ($dShow10_azyD [Occ=Once] :: Show k_azyo)
                 ($dShow11_azyE [Occ=Once] :: Show l_azyp)
                 ($dShow12_azyF [Occ=Once] :: Show m_azyq)
                 ($dShow13_azyG [Occ=Once] :: Show n_azyr)
                 ($dShow14_azyH [Occ=Once] :: Show o_azys)
                 (x_az3n [Occ=Once]
                    :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                        h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)) ->
                 GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                   @ a_azye
                   @ b_azyf
                   @ c_azyg
                   @ d_azyh
                   @ e_azyi
                   @ f12_azyj
                   @ g_azyk
                   @ h_azyl
                   @ i_azym
                   @ j_azyn
                   @ k_azyo
                   @ l_azyp
                   @ m_azyq
                   @ n_azyr
                   @ o_azys
                   $dShow_azyt
                   $dShow1_azyu
                   $dShow2_azyv
                   $dShow3_azyw
                   $dShow4_azyx
                   $dShow5_azyy
                   $dShow6_azyz
                   $dShow7_azyA
                   $dShow8_azyB
                   $dShow9_azyC
                   $dShow10_azyD
                   $dShow11_azyE
                   $dShow12_azyF
                   $dShow13_azyG
                   $dShow14_azyH
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
  = \ (@ a_azye)
      (@ b_azyf)
      (@ c_azyg)
      (@ d_azyh)
      (@ e_azyi)
      (@ f12_azyj)
      (@ g_azyk)
      (@ h_azyl)
      (@ i_azym)
      (@ j_azyn)
      (@ k_azyo)
      (@ l_azyp)
      (@ m_azyq)
      (@ n_azyr)
      (@ o_azys)
      ($dShow_azyt :: Show a_azye)
      ($dShow1_azyu :: Show b_azyf)
      ($dShow2_azyv :: Show c_azyg)
      ($dShow3_azyw :: Show d_azyh)
      ($dShow4_azyx :: Show e_azyi)
      ($dShow5_azyy :: Show f12_azyj)
      ($dShow6_azyz :: Show g_azyk)
      ($dShow7_azyA :: Show h_azyl)
      ($dShow8_azyB :: Show i_azym)
      ($dShow9_azyC :: Show j_azyn)
      ($dShow10_azyD :: Show k_azyo)
      ($dShow11_azyE :: Show l_azyp)
      ($dShow12_azyF :: Show m_azyq)
      ($dShow13_azyG :: Show n_azyr)
      ($dShow14_azyH :: Show o_azys)
      (x_az3n
         :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
             h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)) ->
      GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
        @ a_azye
        @ b_azyf
        @ c_azyg
        @ d_azyh
        @ e_azyi
        @ f12_azyj
        @ g_azyk
        @ h_azyl
        @ i_azym
        @ j_azyn
        @ k_azyo
        @ l_azyp
        @ m_azyq
        @ n_azyr
        @ o_azys
        $dShow_azyt
        $dShow1_azyu
        $dShow2_azyv
        $dShow3_azyw
        $dShow4_azyx
        $dShow5_azyy
        $dShow6_azyz
        $dShow7_azyA
        $dShow8_azyB
        $dShow9_azyC
        $dShow10_azyD
        $dShow11_azyE
        $dShow12_azyF
        $dShow13_azyG
        $dShow14_azyH
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 52, types: 109, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n o.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m, Show n, Show o) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)] -> ShowS
[GblId,
 Arity=17,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=17,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azye)
                 (@ b_azyf)
                 (@ c_azyg)
                 (@ d_azyh)
                 (@ e_azyi)
                 (@ f12_azyj)
                 (@ g_azyk)
                 (@ h_azyl)
                 (@ i_azym)
                 (@ j_azyn)
                 (@ k_azyo)
                 (@ l_azyp)
                 (@ m_azyq)
                 (@ n_azyr)
                 (@ o_azys)
                 ($dShow_azyt [Occ=Once] :: Show a_azye)
                 ($dShow1_azyu [Occ=Once] :: Show b_azyf)
                 ($dShow2_azyv [Occ=Once] :: Show c_azyg)
                 ($dShow3_azyw [Occ=Once] :: Show d_azyh)
                 ($dShow4_azyx [Occ=Once] :: Show e_azyi)
                 ($dShow5_azyy [Occ=Once] :: Show f12_azyj)
                 ($dShow6_azyz [Occ=Once] :: Show g_azyk)
                 ($dShow7_azyA [Occ=Once] :: Show h_azyl)
                 ($dShow8_azyB [Occ=Once] :: Show i_azym)
                 ($dShow9_azyC [Occ=Once] :: Show j_azyn)
                 ($dShow10_azyD [Occ=Once] :: Show k_azyo)
                 ($dShow11_azyE [Occ=Once] :: Show l_azyp)
                 ($dShow12_azyF [Occ=Once] :: Show m_azyq)
                 ($dShow13_azyG [Occ=Once] :: Show n_azyr)
                 ($dShow14_azyH [Occ=Once] :: Show o_azys)
                 (ls_az3o [Occ=Once]
                    :: [(a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                         h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                      h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
                   (GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      @ a_azye
                      @ b_azyf
                      @ c_azyg
                      @ d_azyh
                      @ e_azyi
                      @ f12_azyj
                      @ g_azyk
                      @ h_azyl
                      @ i_azym
                      @ j_azyn
                      @ k_azyo
                      @ l_azyp
                      @ m_azyq
                      @ n_azyr
                      @ o_azys
                      $dShow_azyt
                      $dShow1_azyu
                      $dShow2_azyv
                      $dShow3_azyw
                      $dShow4_azyx
                      $dShow5_azyy
                      $dShow6_azyz
                      $dShow7_azyA
                      $dShow8_azyB
                      $dShow9_azyC
                      $dShow10_azyD
                      $dShow11_azyE
                      $dShow12_azyF
                      $dShow13_azyG
                      $dShow14_azyH
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
  = \ (@ a_azye)
      (@ b_azyf)
      (@ c_azyg)
      (@ d_azyh)
      (@ e_azyi)
      (@ f12_azyj)
      (@ g_azyk)
      (@ h_azyl)
      (@ i_azym)
      (@ j_azyn)
      (@ k_azyo)
      (@ l_azyp)
      (@ m_azyq)
      (@ n_azyr)
      (@ o_azys)
      ($dShow_azyt :: Show a_azye)
      ($dShow1_azyu :: Show b_azyf)
      ($dShow2_azyv :: Show c_azyg)
      ($dShow3_azyw :: Show d_azyh)
      ($dShow4_azyx :: Show e_azyi)
      ($dShow5_azyy :: Show f12_azyj)
      ($dShow6_azyz :: Show g_azyk)
      ($dShow7_azyA :: Show h_azyl)
      ($dShow8_azyB :: Show i_azym)
      ($dShow9_azyC :: Show j_azyn)
      ($dShow10_azyD :: Show k_azyo)
      ($dShow11_azyE :: Show l_azyp)
      ($dShow12_azyF :: Show m_azyq)
      ($dShow13_azyG :: Show n_azyr)
      ($dShow14_azyH :: Show o_azys)
      (ls_az3o
         :: [(a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
              h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)])
      (s_az3p :: String) ->
      showList__
        @ (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
           h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
        (GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
           @ a_azye
           @ b_azyf
           @ c_azyg
           @ d_azyh
           @ e_azyi
           @ f12_azyj
           @ g_azyk
           @ h_azyl
           @ i_azym
           @ j_azyn
           @ k_azyo
           @ l_azyp
           @ m_azyq
           @ n_azyr
           @ o_azys
           $dShow_azyt
           $dShow1_azyu
           $dShow2_azyv
           $dShow3_azyw
           $dShow4_azyx
           $dShow5_azyy
           $dShow6_azyz
           $dShow7_azyA
           $dShow8_azyB
           $dShow9_azyC
           $dShow10_azyD
           $dShow11_azyE
           $dShow12_azyF
           $dShow13_azyG
           $dShow14_azyH
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 79, types: 121, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m, Show n, Show o) =>
     Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az3M)
             (@ b_az3N)
             (@ c_az3O)
             (@ d_az3P)
             (@ e_az3Q)
             (@ f12_az3R)
             (@ g_az3S)
             (@ h_az3T)
             (@ i_az3U)
             (@ j_az3V)
             (@ k_az3W)
             (@ l_az3X)
             (@ m_az3Y)
             (@ n_az3Z)
             (@ o_az40)
             (v_B1 :: Show a_az3M)
             (v1_B2 :: Show b_az3N)
             (v2_B3 :: Show c_az3O)
             (v3_B4 :: Show d_az3P)
             (v4_B5 :: Show e_az3Q)
             (v5_B6 :: Show f12_az3R)
             (v6_B7 :: Show g_az3S)
             (v7_B8 :: Show h_az3T)
             (v8_B9 :: Show i_az3U)
             (v9_Ba :: Show j_az3V)
             (v10_Bb :: Show k_az3W)
             (v11_Bc :: Show l_az3X)
             (v12_Bd :: Show m_az3Y)
             (v13_Be :: Show n_az3Z)
             (v14_Bf :: Show o_az40) ->
       GHC.Show.C:Show TYPE: (a_az3M, b_az3N, c_az3O, d_az3P, e_az3Q,
                              f12_az3R, g_az3S, h_az3T, i_az3U, j_az3V, k_az3W, l_az3X, m_az3Y,
                              n_az3Z, o_az40)
                       GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                         @ a_az3M
                         @ b_az3N
                         @ c_az3O
                         @ d_az3P
                         @ e_az3Q
                         @ f12_az3R
                         @ g_az3S
                         @ h_az3T
                         @ i_az3U
                         @ j_az3V
                         @ k_az3W
                         @ l_az3X
                         @ m_az3Y
                         @ n_az3Z
                         @ o_az40
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                         v14_Bf
                       GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
                         @ a_az3M
                         @ b_az3N
                         @ c_az3O
                         @ d_az3P
                         @ e_az3Q
                         @ f12_az3R
                         @ g_az3S
                         @ h_az3T
                         @ i_az3U
                         @ j_az3V
                         @ k_az3W
                         @ l_az3X
                         @ m_az3Y
                         @ n_az3Z
                         @ o_az40
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                         v14_Bf
                       GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
                         @ a_az3M
                         @ b_az3N
                         @ c_az3O
                         @ d_az3P
                         @ e_az3Q
                         @ f12_az3R
                         @ g_az3S
                         @ h_az3T
                         @ i_az3U
                         @ j_az3V
                         @ k_az3W
                         @ l_az3X
                         @ m_az3Y
                         @ n_az3Z
                         @ o_az40
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                         v14_Bf]
GHC.Show.$fShow(,,,,,,,,,,,,,,)
  = \ (@ a_azye)
      (@ b_azyf)
      (@ c_azyg)
      (@ d_azyh)
      (@ e_azyi)
      (@ f12_azyj)
      (@ g_azyk)
      (@ h_azyl)
      (@ i_azym)
      (@ j_azyn)
      (@ k_azyo)
      (@ l_azyp)
      (@ m_azyq)
      (@ n_azyr)
      (@ o_azys)
      ($dShow_azyt :: Show a_azye)
      ($dShow1_azyu :: Show b_azyf)
      ($dShow2_azyv :: Show c_azyg)
      ($dShow3_azyw :: Show d_azyh)
      ($dShow4_azyx :: Show e_azyi)
      ($dShow5_azyy :: Show f12_azyj)
      ($dShow6_azyz :: Show g_azyk)
      ($dShow7_azyA :: Show h_azyl)
      ($dShow8_azyB :: Show i_azym)
      ($dShow9_azyC :: Show j_azyn)
      ($dShow10_azyD :: Show k_azyo)
      ($dShow11_azyE :: Show l_azyp)
      ($dShow12_azyF :: Show m_azyq)
      ($dShow13_azyG :: Show n_azyr)
      ($dShow14_azyH :: Show o_azys) ->
      GHC.Show.C:Show
        @ (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
           h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
        (GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
           @ a_azye
           @ b_azyf
           @ c_azyg
           @ d_azyh
           @ e_azyi
           @ f12_azyj
           @ g_azyk
           @ h_azyl
           @ i_azym
           @ j_azyn
           @ k_azyo
           @ l_azyp
           @ m_azyq
           @ n_azyr
           @ o_azys
           $dShow_azyt
           $dShow1_azyu
           $dShow2_azyv
           $dShow3_azyw
           $dShow4_azyx
           $dShow5_azyy
           $dShow6_azyz
           $dShow7_azyA
           $dShow8_azyB
           $dShow9_azyC
           $dShow10_azyD
           $dShow11_azyE
           $dShow12_azyF
           $dShow13_azyG
           $dShow14_azyH)
        (GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
           @ a_azye
           @ b_azyf
           @ c_azyg
           @ d_azyh
           @ e_azyi
           @ f12_azyj
           @ g_azyk
           @ h_azyl
           @ i_azym
           @ j_azyn
           @ k_azyo
           @ l_azyp
           @ m_azyq
           @ n_azyr
           @ o_azys
           $dShow_azyt
           $dShow1_azyu
           $dShow2_azyv
           $dShow3_azyw
           $dShow4_azyx
           $dShow5_azyy
           $dShow6_azyz
           $dShow7_azyA
           $dShow8_azyB
           $dShow9_azyC
           $dShow10_azyD
           $dShow11_azyE
           $dShow12_azyF
           $dShow13_azyG
           $dShow14_azyH)
        (GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
           @ a_azye
           @ b_azyf
           @ c_azyg
           @ d_azyh
           @ e_azyi
           @ f12_azyj
           @ g_azyk
           @ h_azyl
           @ i_azym
           @ j_azyn
           @ k_azyo
           @ l_azyp
           @ m_azyq
           @ n_azyr
           @ o_azys
           $dShow_azyt
           $dShow1_azyu
           $dShow2_azyv
           $dShow3_azyw
           $dShow4_azyx
           $dShow5_azyy
           $dShow6_azyz
           $dShow7_azyA
           $dShow8_azyB
           $dShow9_azyC
           $dShow10_azyD
           $dShow11_azyE
           $dShow12_azyF
           $dShow13_azyG
           $dShow14_azyH)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,,,,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 111, types: 133, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m, Show n) =>
     Int -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> ShowS
[GblId,
 Arity=17,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 30 30 30 30 30 30 30 30 0 20 0] 760 30}]
GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
  = \ (@ a_azzs)
      (@ b_azzt)
      (@ c_azzu)
      (@ d_azzv)
      (@ e_azzw)
      (@ f12_azzx)
      (@ g_azzy)
      (@ h_azzz)
      (@ i_azzA)
      (@ j_azzB)
      (@ k_azzC)
      (@ l_azzD)
      (@ m_azzE)
      (@ n_azzF)
      ($dShow_azzG :: Show a_azzs)
      ($dShow1_azzH :: Show b_azzt)
      ($dShow2_azzI :: Show c_azzu)
      ($dShow3_azzJ :: Show d_azzv)
      ($dShow4_azzK :: Show e_azzw)
      ($dShow5_azzL :: Show f12_azzx)
      ($dShow6_azzM :: Show g_azzy)
      ($dShow7_azzN :: Show h_azzz)
      ($dShow8_azzO :: Show i_azzA)
      ($dShow9_azzP :: Show j_azzB)
      ($dShow10_azzQ :: Show k_azzC)
      ($dShow11_azzR :: Show l_azzD)
      ($dShow12_azzS :: Show m_azzE)
      ($dShow13_azzT :: Show n_azzF)
      _ [Occ=Dead]
      (ds1_dzSy
         :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
             h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF))
      (s_az4J :: String) ->
      case ds1_dzSy of
      { (a1_az4v, b1_az4w, c1_az4x, d1_az4y, e1_az4z, f13_az4A, g1_az4B,
         h1_az4C, i1_az4D, j1_az4E, k1_az4F, l1_az4G, m1_az4H, n1_az4I) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,,,,,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azzs $dShow_azzG GHC.Show.$fShow(,)1 a1_az4v)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azzt $dShow1_azzH GHC.Show.$fShow(,)1 b1_az4w)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azzu $dShow2_azzI GHC.Show.$fShow(,)1 c1_az4x)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azzv $dShow3_azzJ GHC.Show.$fShow(,)1 d1_az4y)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azzw $dShow4_azzK GHC.Show.$fShow(,)1 e1_az4z)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azzx $dShow5_azzL GHC.Show.$fShow(,)1 f13_az4A)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azzy $dShow6_azzM GHC.Show.$fShow(,)1 g1_az4B)
                                (GHC.Types.:
                                   @ ShowS
                                   (showsPrec @ h_azzz $dShow7_azzN GHC.Show.$fShow(,)1 h1_az4C)
                                   (GHC.Types.:
                                      @ ShowS
                                      (showsPrec @ i_azzA $dShow8_azzO GHC.Show.$fShow(,)1 i1_az4D)
                                      (GHC.Types.:
                                         @ ShowS
                                         (showsPrec
                                            @ j_azzB $dShow9_azzP GHC.Show.$fShow(,)1 j1_az4E)
                                         (GHC.Types.:
                                            @ ShowS
                                            (showsPrec
                                               @ k_azzC $dShow10_azzQ GHC.Show.$fShow(,)1 k1_az4F)
                                            (GHC.Types.:
                                               @ ShowS
                                               (showsPrec
                                                  @ l_azzD
                                                  $dShow11_azzR
                                                  GHC.Show.$fShow(,)1
                                                  l1_az4G)
                                               (GHC.Types.:
                                                  @ ShowS
                                                  (showsPrec
                                                     @ m_azzE
                                                     $dShow12_azzS
                                                     GHC.Show.$fShow(,)1
                                                     m1_az4H)
                                                  (GHC.Types.:
                                                     @ ShowS
                                                     (showsPrec
                                                        @ n_azzF
                                                        $dShow13_azzT
                                                        GHC.Show.$fShow(,)1
                                                        n1_az4I)
                                                     (GHC.Types.[] @ ShowS)))))))))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az4J))
      }

-- RHS size: {terms: 47, types: 86, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m, Show n) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> String
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=15,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azzs)
                 (@ b_azzt)
                 (@ c_azzu)
                 (@ d_azzv)
                 (@ e_azzw)
                 (@ f12_azzx)
                 (@ g_azzy)
                 (@ h_azzz)
                 (@ i_azzA)
                 (@ j_azzB)
                 (@ k_azzC)
                 (@ l_azzD)
                 (@ m_azzE)
                 (@ n_azzF)
                 ($dShow_azzG [Occ=Once] :: Show a_azzs)
                 ($dShow1_azzH [Occ=Once] :: Show b_azzt)
                 ($dShow2_azzI [Occ=Once] :: Show c_azzu)
                 ($dShow3_azzJ [Occ=Once] :: Show d_azzv)
                 ($dShow4_azzK [Occ=Once] :: Show e_azzw)
                 ($dShow5_azzL [Occ=Once] :: Show f12_azzx)
                 ($dShow6_azzM [Occ=Once] :: Show g_azzy)
                 ($dShow7_azzN [Occ=Once] :: Show h_azzz)
                 ($dShow8_azzO [Occ=Once] :: Show i_azzA)
                 ($dShow9_azzP [Occ=Once] :: Show j_azzB)
                 ($dShow10_azzQ [Occ=Once] :: Show k_azzC)
                 ($dShow11_azzR [Occ=Once] :: Show l_azzD)
                 ($dShow12_azzS [Occ=Once] :: Show m_azzE)
                 ($dShow13_azzT [Occ=Once] :: Show n_azzF)
                 (x_az3n [Occ=Once]
                    :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                        h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)) ->
                 GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                   @ a_azzs
                   @ b_azzt
                   @ c_azzu
                   @ d_azzv
                   @ e_azzw
                   @ f12_azzx
                   @ g_azzy
                   @ h_azzz
                   @ i_azzA
                   @ j_azzB
                   @ k_azzC
                   @ l_azzD
                   @ m_azzE
                   @ n_azzF
                   $dShow_azzG
                   $dShow1_azzH
                   $dShow2_azzI
                   $dShow3_azzJ
                   $dShow4_azzK
                   $dShow5_azzL
                   $dShow6_azzM
                   $dShow7_azzN
                   $dShow8_azzO
                   $dShow9_azzP
                   $dShow10_azzQ
                   $dShow11_azzR
                   $dShow12_azzS
                   $dShow13_azzT
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
  = \ (@ a_azzs)
      (@ b_azzt)
      (@ c_azzu)
      (@ d_azzv)
      (@ e_azzw)
      (@ f12_azzx)
      (@ g_azzy)
      (@ h_azzz)
      (@ i_azzA)
      (@ j_azzB)
      (@ k_azzC)
      (@ l_azzD)
      (@ m_azzE)
      (@ n_azzF)
      ($dShow_azzG :: Show a_azzs)
      ($dShow1_azzH :: Show b_azzt)
      ($dShow2_azzI :: Show c_azzu)
      ($dShow3_azzJ :: Show d_azzv)
      ($dShow4_azzK :: Show e_azzw)
      ($dShow5_azzL :: Show f12_azzx)
      ($dShow6_azzM :: Show g_azzy)
      ($dShow7_azzN :: Show h_azzz)
      ($dShow8_azzO :: Show i_azzA)
      ($dShow9_azzP :: Show j_azzB)
      ($dShow10_azzQ :: Show k_azzC)
      ($dShow11_azzR :: Show l_azzD)
      ($dShow12_azzS :: Show m_azzE)
      ($dShow13_azzT :: Show n_azzF)
      (x_az3n
         :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
             h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)) ->
      GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
        @ a_azzs
        @ b_azzt
        @ c_azzu
        @ d_azzv
        @ e_azzw
        @ f12_azzx
        @ g_azzy
        @ h_azzz
        @ i_azzA
        @ j_azzB
        @ k_azzC
        @ l_azzD
        @ m_azzE
        @ n_azzF
        $dShow_azzG
        $dShow1_azzH
        $dShow2_azzI
        $dShow3_azzJ
        $dShow4_azzK
        $dShow5_azzL
        $dShow6_azzM
        $dShow7_azzN
        $dShow8_azzO
        $dShow9_azzP
        $dShow10_azzQ
        $dShow11_azzR
        $dShow12_azzS
        $dShow13_azzT
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 49, types: 102, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m, Show n) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)] -> ShowS
[GblId,
 Arity=16,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=16,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azzs)
                 (@ b_azzt)
                 (@ c_azzu)
                 (@ d_azzv)
                 (@ e_azzw)
                 (@ f12_azzx)
                 (@ g_azzy)
                 (@ h_azzz)
                 (@ i_azzA)
                 (@ j_azzB)
                 (@ k_azzC)
                 (@ l_azzD)
                 (@ m_azzE)
                 (@ n_azzF)
                 ($dShow_azzG [Occ=Once] :: Show a_azzs)
                 ($dShow1_azzH [Occ=Once] :: Show b_azzt)
                 ($dShow2_azzI [Occ=Once] :: Show c_azzu)
                 ($dShow3_azzJ [Occ=Once] :: Show d_azzv)
                 ($dShow4_azzK [Occ=Once] :: Show e_azzw)
                 ($dShow5_azzL [Occ=Once] :: Show f12_azzx)
                 ($dShow6_azzM [Occ=Once] :: Show g_azzy)
                 ($dShow7_azzN [Occ=Once] :: Show h_azzz)
                 ($dShow8_azzO [Occ=Once] :: Show i_azzA)
                 ($dShow9_azzP [Occ=Once] :: Show j_azzB)
                 ($dShow10_azzQ [Occ=Once] :: Show k_azzC)
                 ($dShow11_azzR [Occ=Once] :: Show l_azzD)
                 ($dShow12_azzS [Occ=Once] :: Show m_azzE)
                 ($dShow13_azzT [Occ=Once] :: Show n_azzF)
                 (ls_az3o [Occ=Once]
                    :: [(a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                         h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                      h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
                   (GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      @ a_azzs
                      @ b_azzt
                      @ c_azzu
                      @ d_azzv
                      @ e_azzw
                      @ f12_azzx
                      @ g_azzy
                      @ h_azzz
                      @ i_azzA
                      @ j_azzB
                      @ k_azzC
                      @ l_azzD
                      @ m_azzE
                      @ n_azzF
                      $dShow_azzG
                      $dShow1_azzH
                      $dShow2_azzI
                      $dShow3_azzJ
                      $dShow4_azzK
                      $dShow5_azzL
                      $dShow6_azzM
                      $dShow7_azzN
                      $dShow8_azzO
                      $dShow9_azzP
                      $dShow10_azzQ
                      $dShow11_azzR
                      $dShow12_azzS
                      $dShow13_azzT
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
  = \ (@ a_azzs)
      (@ b_azzt)
      (@ c_azzu)
      (@ d_azzv)
      (@ e_azzw)
      (@ f12_azzx)
      (@ g_azzy)
      (@ h_azzz)
      (@ i_azzA)
      (@ j_azzB)
      (@ k_azzC)
      (@ l_azzD)
      (@ m_azzE)
      (@ n_azzF)
      ($dShow_azzG :: Show a_azzs)
      ($dShow1_azzH :: Show b_azzt)
      ($dShow2_azzI :: Show c_azzu)
      ($dShow3_azzJ :: Show d_azzv)
      ($dShow4_azzK :: Show e_azzw)
      ($dShow5_azzL :: Show f12_azzx)
      ($dShow6_azzM :: Show g_azzy)
      ($dShow7_azzN :: Show h_azzz)
      ($dShow8_azzO :: Show i_azzA)
      ($dShow9_azzP :: Show j_azzB)
      ($dShow10_azzQ :: Show k_azzC)
      ($dShow11_azzR :: Show l_azzD)
      ($dShow12_azzS :: Show m_azzE)
      ($dShow13_azzT :: Show n_azzF)
      (ls_az3o
         :: [(a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
              h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)])
      (s_az3p :: String) ->
      showList__
        @ (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
           h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
        (GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
           @ a_azzs
           @ b_azzt
           @ c_azzu
           @ d_azzv
           @ e_azzw
           @ f12_azzx
           @ g_azzy
           @ h_azzz
           @ i_azzA
           @ j_azzB
           @ k_azzC
           @ l_azzD
           @ m_azzE
           @ n_azzF
           $dShow_azzG
           $dShow1_azzH
           $dShow2_azzI
           $dShow3_azzJ
           $dShow4_azzK
           $dShow5_azzL
           $dShow6_azzM
           $dShow7_azzN
           $dShow8_azzO
           $dShow9_azzP
           $dShow10_azzQ
           $dShow11_azzR
           $dShow12_azzS
           $dShow13_azzT
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 74, types: 113, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m, Show n) =>
     Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az4h)
             (@ b_az4i)
             (@ c_az4j)
             (@ d_az4k)
             (@ e_az4l)
             (@ f12_az4m)
             (@ g_az4n)
             (@ h_az4o)
             (@ i_az4p)
             (@ j_az4q)
             (@ k_az4r)
             (@ l_az4s)
             (@ m_az4t)
             (@ n_az4u)
             (v_B1 :: Show a_az4h)
             (v1_B2 :: Show b_az4i)
             (v2_B3 :: Show c_az4j)
             (v3_B4 :: Show d_az4k)
             (v4_B5 :: Show e_az4l)
             (v5_B6 :: Show f12_az4m)
             (v6_B7 :: Show g_az4n)
             (v7_B8 :: Show h_az4o)
             (v8_B9 :: Show i_az4p)
             (v9_Ba :: Show j_az4q)
             (v10_Bb :: Show k_az4r)
             (v11_Bc :: Show l_az4s)
             (v12_Bd :: Show m_az4t)
             (v13_Be :: Show n_az4u) ->
       GHC.Show.C:Show TYPE: (a_az4h, b_az4i, c_az4j, d_az4k, e_az4l,
                              f12_az4m, g_az4n, h_az4o, i_az4p, j_az4q, k_az4r, l_az4s, m_az4t,
                              n_az4u)
                       GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                         @ a_az4h
                         @ b_az4i
                         @ c_az4j
                         @ d_az4k
                         @ e_az4l
                         @ f12_az4m
                         @ g_az4n
                         @ h_az4o
                         @ i_az4p
                         @ j_az4q
                         @ k_az4r
                         @ l_az4s
                         @ m_az4t
                         @ n_az4u
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                       GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
                         @ a_az4h
                         @ b_az4i
                         @ c_az4j
                         @ d_az4k
                         @ e_az4l
                         @ f12_az4m
                         @ g_az4n
                         @ h_az4o
                         @ i_az4p
                         @ j_az4q
                         @ k_az4r
                         @ l_az4s
                         @ m_az4t
                         @ n_az4u
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                       GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
                         @ a_az4h
                         @ b_az4i
                         @ c_az4j
                         @ d_az4k
                         @ e_az4l
                         @ f12_az4m
                         @ g_az4n
                         @ h_az4o
                         @ i_az4p
                         @ j_az4q
                         @ k_az4r
                         @ l_az4s
                         @ m_az4t
                         @ n_az4u
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be]
GHC.Show.$fShow(,,,,,,,,,,,,,)
  = \ (@ a_azzs)
      (@ b_azzt)
      (@ c_azzu)
      (@ d_azzv)
      (@ e_azzw)
      (@ f12_azzx)
      (@ g_azzy)
      (@ h_azzz)
      (@ i_azzA)
      (@ j_azzB)
      (@ k_azzC)
      (@ l_azzD)
      (@ m_azzE)
      (@ n_azzF)
      ($dShow_azzG :: Show a_azzs)
      ($dShow1_azzH :: Show b_azzt)
      ($dShow2_azzI :: Show c_azzu)
      ($dShow3_azzJ :: Show d_azzv)
      ($dShow4_azzK :: Show e_azzw)
      ($dShow5_azzL :: Show f12_azzx)
      ($dShow6_azzM :: Show g_azzy)
      ($dShow7_azzN :: Show h_azzz)
      ($dShow8_azzO :: Show i_azzA)
      ($dShow9_azzP :: Show j_azzB)
      ($dShow10_azzQ :: Show k_azzC)
      ($dShow11_azzR :: Show l_azzD)
      ($dShow12_azzS :: Show m_azzE)
      ($dShow13_azzT :: Show n_azzF) ->
      GHC.Show.C:Show
        @ (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
           h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
        (GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
           @ a_azzs
           @ b_azzt
           @ c_azzu
           @ d_azzv
           @ e_azzw
           @ f12_azzx
           @ g_azzy
           @ h_azzz
           @ i_azzA
           @ j_azzB
           @ k_azzC
           @ l_azzD
           @ m_azzE
           @ n_azzF
           $dShow_azzG
           $dShow1_azzH
           $dShow2_azzI
           $dShow3_azzJ
           $dShow4_azzK
           $dShow5_azzL
           $dShow6_azzM
           $dShow7_azzN
           $dShow8_azzO
           $dShow9_azzP
           $dShow10_azzQ
           $dShow11_azzR
           $dShow12_azzS
           $dShow13_azzT)
        (GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
           @ a_azzs
           @ b_azzt
           @ c_azzu
           @ d_azzv
           @ e_azzw
           @ f12_azzx
           @ g_azzy
           @ h_azzz
           @ i_azzA
           @ j_azzB
           @ k_azzC
           @ l_azzD
           @ m_azzE
           @ n_azzF
           $dShow_azzG
           $dShow1_azzH
           $dShow2_azzI
           $dShow3_azzJ
           $dShow4_azzK
           $dShow5_azzL
           $dShow6_azzM
           $dShow7_azzN
           $dShow8_azzO
           $dShow9_azzP
           $dShow10_azzQ
           $dShow11_azzR
           $dShow12_azzS
           $dShow13_azzT)
        (GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
           @ a_azzs
           @ b_azzt
           @ c_azzu
           @ d_azzv
           @ e_azzw
           @ f12_azzx
           @ g_azzy
           @ h_azzz
           @ i_azzA
           @ j_azzB
           @ k_azzC
           @ l_azzD
           @ m_azzE
           @ n_azzF
           $dShow_azzG
           $dShow1_azzH
           $dShow2_azzI
           $dShow3_azzJ
           $dShow4_azzK
           $dShow5_azzL
           $dShow6_azzM
           $dShow7_azzN
           $dShow8_azzO
           $dShow9_azzP
           $dShow10_azzQ
           $dShow11_azzR
           $dShow12_azzS
           $dShow13_azzT)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,,,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,,,,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 104, types: 124, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m) =>
     Int -> (a, b, c, d, e, f, g, h, i, j, k, l, m) -> ShowS
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 30 30 30 30 30 30 30 0 20 0] 710 30}]
GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
  = \ (@ a_azAC)
      (@ b_azAD)
      (@ c_azAE)
      (@ d_azAF)
      (@ e_azAG)
      (@ f12_azAH)
      (@ g_azAI)
      (@ h_azAJ)
      (@ i_azAK)
      (@ j_azAL)
      (@ k_azAM)
      (@ l_azAN)
      (@ m_azAO)
      ($dShow_azAP :: Show a_azAC)
      ($dShow1_azAQ :: Show b_azAD)
      ($dShow2_azAR :: Show c_azAE)
      ($dShow3_azAS :: Show d_azAF)
      ($dShow4_azAT :: Show e_azAG)
      ($dShow5_azAU :: Show f12_azAH)
      ($dShow6_azAV :: Show g_azAI)
      ($dShow7_azAW :: Show h_azAJ)
      ($dShow8_azAX :: Show i_azAK)
      ($dShow9_azAY :: Show j_azAL)
      ($dShow10_azAZ :: Show k_azAM)
      ($dShow11_azB0 :: Show l_azAN)
      ($dShow12_azB1 :: Show m_azAO)
      _ [Occ=Dead]
      (ds1_dzSV
         :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
             h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO))
      (s_az5a :: String) ->
      case ds1_dzSV of
      { (a1_az4X, b1_az4Y, c1_az4Z, d1_az50, e1_az51, f13_az52, g1_az53,
         h1_az54, i1_az55, j1_az56, k1_az57, l1_az58, m1_az59) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,,,,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azAC $dShow_azAP GHC.Show.$fShow(,)1 a1_az4X)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azAD $dShow1_azAQ GHC.Show.$fShow(,)1 b1_az4Y)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azAE $dShow2_azAR GHC.Show.$fShow(,)1 c1_az4Z)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azAF $dShow3_azAS GHC.Show.$fShow(,)1 d1_az50)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azAG $dShow4_azAT GHC.Show.$fShow(,)1 e1_az51)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azAH $dShow5_azAU GHC.Show.$fShow(,)1 f13_az52)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azAI $dShow6_azAV GHC.Show.$fShow(,)1 g1_az53)
                                (GHC.Types.:
                                   @ ShowS
                                   (showsPrec @ h_azAJ $dShow7_azAW GHC.Show.$fShow(,)1 h1_az54)
                                   (GHC.Types.:
                                      @ ShowS
                                      (showsPrec @ i_azAK $dShow8_azAX GHC.Show.$fShow(,)1 i1_az55)
                                      (GHC.Types.:
                                         @ ShowS
                                         (showsPrec
                                            @ j_azAL $dShow9_azAY GHC.Show.$fShow(,)1 j1_az56)
                                         (GHC.Types.:
                                            @ ShowS
                                            (showsPrec
                                               @ k_azAM $dShow10_azAZ GHC.Show.$fShow(,)1 k1_az57)
                                            (GHC.Types.:
                                               @ ShowS
                                               (showsPrec
                                                  @ l_azAN
                                                  $dShow11_azB0
                                                  GHC.Show.$fShow(,)1
                                                  l1_az58)
                                               (GHC.Types.:
                                                  @ ShowS
                                                  (showsPrec
                                                     @ m_azAO
                                                     $dShow12_azB1
                                                     GHC.Show.$fShow(,)1
                                                     m1_az59)
                                                  (GHC.Types.[] @ ShowS))))))))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az5a))
      }

-- RHS size: {terms: 44, types: 80, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m) -> String
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=14,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azAC)
                 (@ b_azAD)
                 (@ c_azAE)
                 (@ d_azAF)
                 (@ e_azAG)
                 (@ f12_azAH)
                 (@ g_azAI)
                 (@ h_azAJ)
                 (@ i_azAK)
                 (@ j_azAL)
                 (@ k_azAM)
                 (@ l_azAN)
                 (@ m_azAO)
                 ($dShow_azAP [Occ=Once] :: Show a_azAC)
                 ($dShow1_azAQ [Occ=Once] :: Show b_azAD)
                 ($dShow2_azAR [Occ=Once] :: Show c_azAE)
                 ($dShow3_azAS [Occ=Once] :: Show d_azAF)
                 ($dShow4_azAT [Occ=Once] :: Show e_azAG)
                 ($dShow5_azAU [Occ=Once] :: Show f12_azAH)
                 ($dShow6_azAV [Occ=Once] :: Show g_azAI)
                 ($dShow7_azAW [Occ=Once] :: Show h_azAJ)
                 ($dShow8_azAX [Occ=Once] :: Show i_azAK)
                 ($dShow9_azAY [Occ=Once] :: Show j_azAL)
                 ($dShow10_azAZ [Occ=Once] :: Show k_azAM)
                 ($dShow11_azB0 [Occ=Once] :: Show l_azAN)
                 ($dShow12_azB1 [Occ=Once] :: Show m_azAO)
                 (x_az3n [Occ=Once]
                    :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                        h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)) ->
                 GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                   @ a_azAC
                   @ b_azAD
                   @ c_azAE
                   @ d_azAF
                   @ e_azAG
                   @ f12_azAH
                   @ g_azAI
                   @ h_azAJ
                   @ i_azAK
                   @ j_azAL
                   @ k_azAM
                   @ l_azAN
                   @ m_azAO
                   $dShow_azAP
                   $dShow1_azAQ
                   $dShow2_azAR
                   $dShow3_azAS
                   $dShow4_azAT
                   $dShow5_azAU
                   $dShow6_azAV
                   $dShow7_azAW
                   $dShow8_azAX
                   $dShow9_azAY
                   $dShow10_azAZ
                   $dShow11_azB0
                   $dShow12_azB1
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
  = \ (@ a_azAC)
      (@ b_azAD)
      (@ c_azAE)
      (@ d_azAF)
      (@ e_azAG)
      (@ f12_azAH)
      (@ g_azAI)
      (@ h_azAJ)
      (@ i_azAK)
      (@ j_azAL)
      (@ k_azAM)
      (@ l_azAN)
      (@ m_azAO)
      ($dShow_azAP :: Show a_azAC)
      ($dShow1_azAQ :: Show b_azAD)
      ($dShow2_azAR :: Show c_azAE)
      ($dShow3_azAS :: Show d_azAF)
      ($dShow4_azAT :: Show e_azAG)
      ($dShow5_azAU :: Show f12_azAH)
      ($dShow6_azAV :: Show g_azAI)
      ($dShow7_azAW :: Show h_azAJ)
      ($dShow8_azAX :: Show i_azAK)
      ($dShow9_azAY :: Show j_azAL)
      ($dShow10_azAZ :: Show k_azAM)
      ($dShow11_azB0 :: Show l_azAN)
      ($dShow12_azB1 :: Show m_azAO)
      (x_az3n
         :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
             h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)) ->
      GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
        @ a_azAC
        @ b_azAD
        @ c_azAE
        @ d_azAF
        @ e_azAG
        @ f12_azAH
        @ g_azAI
        @ h_azAJ
        @ i_azAK
        @ j_azAL
        @ k_azAM
        @ l_azAN
        @ m_azAO
        $dShow_azAP
        $dShow1_azAQ
        $dShow2_azAR
        $dShow3_azAS
        $dShow4_azAT
        $dShow5_azAU
        $dShow6_azAV
        $dShow7_azAW
        $dShow8_azAX
        $dShow9_azAY
        $dShow10_azAZ
        $dShow11_azB0
        $dShow12_azB1
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 46, types: 95, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m)] -> ShowS
[GblId,
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=15,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azAC)
                 (@ b_azAD)
                 (@ c_azAE)
                 (@ d_azAF)
                 (@ e_azAG)
                 (@ f12_azAH)
                 (@ g_azAI)
                 (@ h_azAJ)
                 (@ i_azAK)
                 (@ j_azAL)
                 (@ k_azAM)
                 (@ l_azAN)
                 (@ m_azAO)
                 ($dShow_azAP [Occ=Once] :: Show a_azAC)
                 ($dShow1_azAQ [Occ=Once] :: Show b_azAD)
                 ($dShow2_azAR [Occ=Once] :: Show c_azAE)
                 ($dShow3_azAS [Occ=Once] :: Show d_azAF)
                 ($dShow4_azAT [Occ=Once] :: Show e_azAG)
                 ($dShow5_azAU [Occ=Once] :: Show f12_azAH)
                 ($dShow6_azAV [Occ=Once] :: Show g_azAI)
                 ($dShow7_azAW [Occ=Once] :: Show h_azAJ)
                 ($dShow8_azAX [Occ=Once] :: Show i_azAK)
                 ($dShow9_azAY [Occ=Once] :: Show j_azAL)
                 ($dShow10_azAZ [Occ=Once] :: Show k_azAM)
                 ($dShow11_azB0 [Occ=Once] :: Show l_azAN)
                 ($dShow12_azB1 [Occ=Once] :: Show m_azAO)
                 (ls_az3o [Occ=Once]
                    :: [(a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                         h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                      h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
                   (GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      @ a_azAC
                      @ b_azAD
                      @ c_azAE
                      @ d_azAF
                      @ e_azAG
                      @ f12_azAH
                      @ g_azAI
                      @ h_azAJ
                      @ i_azAK
                      @ j_azAL
                      @ k_azAM
                      @ l_azAN
                      @ m_azAO
                      $dShow_azAP
                      $dShow1_azAQ
                      $dShow2_azAR
                      $dShow3_azAS
                      $dShow4_azAT
                      $dShow5_azAU
                      $dShow6_azAV
                      $dShow7_azAW
                      $dShow8_azAX
                      $dShow9_azAY
                      $dShow10_azAZ
                      $dShow11_azB0
                      $dShow12_azB1
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
  = \ (@ a_azAC)
      (@ b_azAD)
      (@ c_azAE)
      (@ d_azAF)
      (@ e_azAG)
      (@ f12_azAH)
      (@ g_azAI)
      (@ h_azAJ)
      (@ i_azAK)
      (@ j_azAL)
      (@ k_azAM)
      (@ l_azAN)
      (@ m_azAO)
      ($dShow_azAP :: Show a_azAC)
      ($dShow1_azAQ :: Show b_azAD)
      ($dShow2_azAR :: Show c_azAE)
      ($dShow3_azAS :: Show d_azAF)
      ($dShow4_azAT :: Show e_azAG)
      ($dShow5_azAU :: Show f12_azAH)
      ($dShow6_azAV :: Show g_azAI)
      ($dShow7_azAW :: Show h_azAJ)
      ($dShow8_azAX :: Show i_azAK)
      ($dShow9_azAY :: Show j_azAL)
      ($dShow10_azAZ :: Show k_azAM)
      ($dShow11_azB0 :: Show l_azAN)
      ($dShow12_azB1 :: Show m_azAO)
      (ls_az3o
         :: [(a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
              h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)])
      (s_az3p :: String) ->
      showList__
        @ (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
           h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
        (GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
           @ a_azAC
           @ b_azAD
           @ c_azAE
           @ d_azAF
           @ e_azAG
           @ f12_azAH
           @ g_azAI
           @ h_azAJ
           @ i_azAK
           @ j_azAL
           @ k_azAM
           @ l_azAN
           @ m_azAO
           $dShow_azAP
           $dShow1_azAQ
           $dShow2_azAR
           $dShow3_azAS
           $dShow4_azAT
           $dShow5_azAU
           $dShow6_azAV
           $dShow7_azAW
           $dShow8_azAX
           $dShow9_azAY
           $dShow10_azAZ
           $dShow11_azB0
           $dShow12_azB1
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 69, types: 105, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l, Show m) =>
     Show (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az4K)
             (@ b_az4L)
             (@ c_az4M)
             (@ d_az4N)
             (@ e_az4O)
             (@ f12_az4P)
             (@ g_az4Q)
             (@ h_az4R)
             (@ i_az4S)
             (@ j_az4T)
             (@ k_az4U)
             (@ l_az4V)
             (@ m_az4W)
             (v_B1 :: Show a_az4K)
             (v1_B2 :: Show b_az4L)
             (v2_B3 :: Show c_az4M)
             (v3_B4 :: Show d_az4N)
             (v4_B5 :: Show e_az4O)
             (v5_B6 :: Show f12_az4P)
             (v6_B7 :: Show g_az4Q)
             (v7_B8 :: Show h_az4R)
             (v8_B9 :: Show i_az4S)
             (v9_Ba :: Show j_az4T)
             (v10_Bb :: Show k_az4U)
             (v11_Bc :: Show l_az4V)
             (v12_Bd :: Show m_az4W) ->
       GHC.Show.C:Show TYPE: (a_az4K, b_az4L, c_az4M, d_az4N, e_az4O,
                              f12_az4P, g_az4Q, h_az4R, i_az4S, j_az4T, k_az4U, l_az4V, m_az4W)
                       GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                         @ a_az4K
                         @ b_az4L
                         @ c_az4M
                         @ d_az4N
                         @ e_az4O
                         @ f12_az4P
                         @ g_az4Q
                         @ h_az4R
                         @ i_az4S
                         @ j_az4T
                         @ k_az4U
                         @ l_az4V
                         @ m_az4W
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                       GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
                         @ a_az4K
                         @ b_az4L
                         @ c_az4M
                         @ d_az4N
                         @ e_az4O
                         @ f12_az4P
                         @ g_az4Q
                         @ h_az4R
                         @ i_az4S
                         @ j_az4T
                         @ k_az4U
                         @ l_az4V
                         @ m_az4W
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                       GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
                         @ a_az4K
                         @ b_az4L
                         @ c_az4M
                         @ d_az4N
                         @ e_az4O
                         @ f12_az4P
                         @ g_az4Q
                         @ h_az4R
                         @ i_az4S
                         @ j_az4T
                         @ k_az4U
                         @ l_az4V
                         @ m_az4W
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd]
GHC.Show.$fShow(,,,,,,,,,,,,)
  = \ (@ a_azAC)
      (@ b_azAD)
      (@ c_azAE)
      (@ d_azAF)
      (@ e_azAG)
      (@ f12_azAH)
      (@ g_azAI)
      (@ h_azAJ)
      (@ i_azAK)
      (@ j_azAL)
      (@ k_azAM)
      (@ l_azAN)
      (@ m_azAO)
      ($dShow_azAP :: Show a_azAC)
      ($dShow1_azAQ :: Show b_azAD)
      ($dShow2_azAR :: Show c_azAE)
      ($dShow3_azAS :: Show d_azAF)
      ($dShow4_azAT :: Show e_azAG)
      ($dShow5_azAU :: Show f12_azAH)
      ($dShow6_azAV :: Show g_azAI)
      ($dShow7_azAW :: Show h_azAJ)
      ($dShow8_azAX :: Show i_azAK)
      ($dShow9_azAY :: Show j_azAL)
      ($dShow10_azAZ :: Show k_azAM)
      ($dShow11_azB0 :: Show l_azAN)
      ($dShow12_azB1 :: Show m_azAO) ->
      GHC.Show.C:Show
        @ (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
           h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
        (GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
           @ a_azAC
           @ b_azAD
           @ c_azAE
           @ d_azAF
           @ e_azAG
           @ f12_azAH
           @ g_azAI
           @ h_azAJ
           @ i_azAK
           @ j_azAL
           @ k_azAM
           @ l_azAN
           @ m_azAO
           $dShow_azAP
           $dShow1_azAQ
           $dShow2_azAR
           $dShow3_azAS
           $dShow4_azAT
           $dShow5_azAU
           $dShow6_azAV
           $dShow7_azAW
           $dShow8_azAX
           $dShow9_azAY
           $dShow10_azAZ
           $dShow11_azB0
           $dShow12_azB1)
        (GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
           @ a_azAC
           @ b_azAD
           @ c_azAE
           @ d_azAF
           @ e_azAG
           @ f12_azAH
           @ g_azAI
           @ h_azAJ
           @ i_azAK
           @ j_azAL
           @ k_azAM
           @ l_azAN
           @ m_azAO
           $dShow_azAP
           $dShow1_azAQ
           $dShow2_azAR
           $dShow3_azAS
           $dShow4_azAT
           $dShow5_azAU
           $dShow6_azAV
           $dShow7_azAW
           $dShow8_azAX
           $dShow9_azAY
           $dShow10_azAZ
           $dShow11_azB0
           $dShow12_azB1)
        (GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
           @ a_azAC
           @ b_azAD
           @ c_azAE
           @ d_azAF
           @ e_azAG
           @ f12_azAH
           @ g_azAI
           @ h_azAJ
           @ i_azAK
           @ j_azAL
           @ k_azAM
           @ l_azAN
           @ m_azAO
           $dShow_azAP
           $dShow1_azAQ
           $dShow2_azAR
           $dShow3_azAS
           $dShow4_azAT
           $dShow5_azAU
           $dShow6_azAV
           $dShow7_azAW
           $dShow8_azAX
           $dShow9_azAY
           $dShow10_azAZ
           $dShow11_azB0
           $dShow12_azB1)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,,,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 97, types: 115, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l) =>
     Int -> (a, b, c, d, e, f, g, h, i, j, k, l) -> ShowS
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 30 30 30 30 30 30 0 20 0] 660 30}]
GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
  = \ (@ a_azBI)
      (@ b_azBJ)
      (@ c_azBK)
      (@ d_azBL)
      (@ e_azBM)
      (@ f12_azBN)
      (@ g_azBO)
      (@ h_azBP)
      (@ i_azBQ)
      (@ j_azBR)
      (@ k_azBS)
      (@ l_azBT)
      ($dShow_azBU :: Show a_azBI)
      ($dShow1_azBV :: Show b_azBJ)
      ($dShow2_azBW :: Show c_azBK)
      ($dShow3_azBX :: Show d_azBL)
      ($dShow4_azBY :: Show e_azBM)
      ($dShow5_azBZ :: Show f12_azBN)
      ($dShow6_azC0 :: Show g_azBO)
      ($dShow7_azC1 :: Show h_azBP)
      ($dShow8_azC2 :: Show i_azBQ)
      ($dShow9_azC3 :: Show j_azBR)
      ($dShow10_azC4 :: Show k_azBS)
      ($dShow11_azC5 :: Show l_azBT)
      _ [Occ=Dead]
      (ds1_dzTh
         :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
             h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT))
      (s_az5z :: String) ->
      case ds1_dzTh of
      { (a1_az5n, b1_az5o, c1_az5p, d1_az5q, e1_az5r, f13_az5s, g1_az5t,
         h1_az5u, i1_az5v, j1_az5w, k1_az5x, l1_az5y) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,,,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azBI $dShow_azBU GHC.Show.$fShow(,)1 a1_az5n)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azBJ $dShow1_azBV GHC.Show.$fShow(,)1 b1_az5o)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azBK $dShow2_azBW GHC.Show.$fShow(,)1 c1_az5p)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azBL $dShow3_azBX GHC.Show.$fShow(,)1 d1_az5q)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azBM $dShow4_azBY GHC.Show.$fShow(,)1 e1_az5r)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azBN $dShow5_azBZ GHC.Show.$fShow(,)1 f13_az5s)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azBO $dShow6_azC0 GHC.Show.$fShow(,)1 g1_az5t)
                                (GHC.Types.:
                                   @ ShowS
                                   (showsPrec @ h_azBP $dShow7_azC1 GHC.Show.$fShow(,)1 h1_az5u)
                                   (GHC.Types.:
                                      @ ShowS
                                      (showsPrec @ i_azBQ $dShow8_azC2 GHC.Show.$fShow(,)1 i1_az5v)
                                      (GHC.Types.:
                                         @ ShowS
                                         (showsPrec
                                            @ j_azBR $dShow9_azC3 GHC.Show.$fShow(,)1 j1_az5w)
                                         (GHC.Types.:
                                            @ ShowS
                                            (showsPrec
                                               @ k_azBS $dShow10_azC4 GHC.Show.$fShow(,)1 k1_az5x)
                                            (GHC.Types.:
                                               @ ShowS
                                               (showsPrec
                                                  @ l_azBT
                                                  $dShow11_azC5
                                                  GHC.Show.$fShow(,)1
                                                  l1_az5y)
                                               (GHC.Types.[] @ ShowS)))))))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az5z))
      }

-- RHS size: {terms: 41, types: 74, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l) =>
     (a, b, c, d, e, f, g, h, i, j, k, l) -> String
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=13,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azBI)
                 (@ b_azBJ)
                 (@ c_azBK)
                 (@ d_azBL)
                 (@ e_azBM)
                 (@ f12_azBN)
                 (@ g_azBO)
                 (@ h_azBP)
                 (@ i_azBQ)
                 (@ j_azBR)
                 (@ k_azBS)
                 (@ l_azBT)
                 ($dShow_azBU [Occ=Once] :: Show a_azBI)
                 ($dShow1_azBV [Occ=Once] :: Show b_azBJ)
                 ($dShow2_azBW [Occ=Once] :: Show c_azBK)
                 ($dShow3_azBX [Occ=Once] :: Show d_azBL)
                 ($dShow4_azBY [Occ=Once] :: Show e_azBM)
                 ($dShow5_azBZ [Occ=Once] :: Show f12_azBN)
                 ($dShow6_azC0 [Occ=Once] :: Show g_azBO)
                 ($dShow7_azC1 [Occ=Once] :: Show h_azBP)
                 ($dShow8_azC2 [Occ=Once] :: Show i_azBQ)
                 ($dShow9_azC3 [Occ=Once] :: Show j_azBR)
                 ($dShow10_azC4 [Occ=Once] :: Show k_azBS)
                 ($dShow11_azC5 [Occ=Once] :: Show l_azBT)
                 (x_az3n [Occ=Once]
                    :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                        h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)) ->
                 GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                   @ a_azBI
                   @ b_azBJ
                   @ c_azBK
                   @ d_azBL
                   @ e_azBM
                   @ f12_azBN
                   @ g_azBO
                   @ h_azBP
                   @ i_azBQ
                   @ j_azBR
                   @ k_azBS
                   @ l_azBT
                   $dShow_azBU
                   $dShow1_azBV
                   $dShow2_azBW
                   $dShow3_azBX
                   $dShow4_azBY
                   $dShow5_azBZ
                   $dShow6_azC0
                   $dShow7_azC1
                   $dShow8_azC2
                   $dShow9_azC3
                   $dShow10_azC4
                   $dShow11_azC5
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
  = \ (@ a_azBI)
      (@ b_azBJ)
      (@ c_azBK)
      (@ d_azBL)
      (@ e_azBM)
      (@ f12_azBN)
      (@ g_azBO)
      (@ h_azBP)
      (@ i_azBQ)
      (@ j_azBR)
      (@ k_azBS)
      (@ l_azBT)
      ($dShow_azBU :: Show a_azBI)
      ($dShow1_azBV :: Show b_azBJ)
      ($dShow2_azBW :: Show c_azBK)
      ($dShow3_azBX :: Show d_azBL)
      ($dShow4_azBY :: Show e_azBM)
      ($dShow5_azBZ :: Show f12_azBN)
      ($dShow6_azC0 :: Show g_azBO)
      ($dShow7_azC1 :: Show h_azBP)
      ($dShow8_azC2 :: Show i_azBQ)
      ($dShow9_azC3 :: Show j_azBR)
      ($dShow10_azC4 :: Show k_azBS)
      ($dShow11_azC5 :: Show l_azBT)
      (x_az3n
         :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
             h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)) ->
      GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
        @ a_azBI
        @ b_azBJ
        @ c_azBK
        @ d_azBL
        @ e_azBM
        @ f12_azBN
        @ g_azBO
        @ h_azBP
        @ i_azBQ
        @ j_azBR
        @ k_azBS
        @ l_azBT
        $dShow_azBU
        $dShow1_azBV
        $dShow2_azBW
        $dShow3_azBX
        $dShow4_azBY
        $dShow5_azBZ
        $dShow6_azC0
        $dShow7_azC1
        $dShow8_azC2
        $dShow9_azC3
        $dShow10_azC4
        $dShow11_azC5
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 43, types: 88, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l)] -> ShowS
[GblId,
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=14,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azBI)
                 (@ b_azBJ)
                 (@ c_azBK)
                 (@ d_azBL)
                 (@ e_azBM)
                 (@ f12_azBN)
                 (@ g_azBO)
                 (@ h_azBP)
                 (@ i_azBQ)
                 (@ j_azBR)
                 (@ k_azBS)
                 (@ l_azBT)
                 ($dShow_azBU [Occ=Once] :: Show a_azBI)
                 ($dShow1_azBV [Occ=Once] :: Show b_azBJ)
                 ($dShow2_azBW [Occ=Once] :: Show c_azBK)
                 ($dShow3_azBX [Occ=Once] :: Show d_azBL)
                 ($dShow4_azBY [Occ=Once] :: Show e_azBM)
                 ($dShow5_azBZ [Occ=Once] :: Show f12_azBN)
                 ($dShow6_azC0 [Occ=Once] :: Show g_azBO)
                 ($dShow7_azC1 [Occ=Once] :: Show h_azBP)
                 ($dShow8_azC2 [Occ=Once] :: Show i_azBQ)
                 ($dShow9_azC3 [Occ=Once] :: Show j_azBR)
                 ($dShow10_azC4 [Occ=Once] :: Show k_azBS)
                 ($dShow11_azC5 [Occ=Once] :: Show l_azBT)
                 (ls_az3o [Occ=Once]
                    :: [(a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                         h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                      h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
                   (GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      @ a_azBI
                      @ b_azBJ
                      @ c_azBK
                      @ d_azBL
                      @ e_azBM
                      @ f12_azBN
                      @ g_azBO
                      @ h_azBP
                      @ i_azBQ
                      @ j_azBR
                      @ k_azBS
                      @ l_azBT
                      $dShow_azBU
                      $dShow1_azBV
                      $dShow2_azBW
                      $dShow3_azBX
                      $dShow4_azBY
                      $dShow5_azBZ
                      $dShow6_azC0
                      $dShow7_azC1
                      $dShow8_azC2
                      $dShow9_azC3
                      $dShow10_azC4
                      $dShow11_azC5
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
  = \ (@ a_azBI)
      (@ b_azBJ)
      (@ c_azBK)
      (@ d_azBL)
      (@ e_azBM)
      (@ f12_azBN)
      (@ g_azBO)
      (@ h_azBP)
      (@ i_azBQ)
      (@ j_azBR)
      (@ k_azBS)
      (@ l_azBT)
      ($dShow_azBU :: Show a_azBI)
      ($dShow1_azBV :: Show b_azBJ)
      ($dShow2_azBW :: Show c_azBK)
      ($dShow3_azBX :: Show d_azBL)
      ($dShow4_azBY :: Show e_azBM)
      ($dShow5_azBZ :: Show f12_azBN)
      ($dShow6_azC0 :: Show g_azBO)
      ($dShow7_azC1 :: Show h_azBP)
      ($dShow8_azC2 :: Show i_azBQ)
      ($dShow9_azC3 :: Show j_azBR)
      ($dShow10_azC4 :: Show k_azBS)
      ($dShow11_azC5 :: Show l_azBT)
      (ls_az3o
         :: [(a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
              h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)])
      (s_az3p :: String) ->
      showList__
        @ (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
           h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
        (GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
           @ a_azBI
           @ b_azBJ
           @ c_azBK
           @ d_azBL
           @ e_azBM
           @ f12_azBN
           @ g_azBO
           @ h_azBP
           @ i_azBQ
           @ j_azBR
           @ k_azBS
           @ l_azBT
           $dShow_azBU
           $dShow1_azBV
           $dShow2_azBW
           $dShow3_azBX
           $dShow4_azBY
           $dShow5_azBZ
           $dShow6_azC0
           $dShow7_azC1
           $dShow8_azC2
           $dShow9_azC3
           $dShow10_azC4
           $dShow11_azC5
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 64, types: 97, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k, Show l) =>
     Show (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az5b)
             (@ b_az5c)
             (@ c_az5d)
             (@ d_az5e)
             (@ e_az5f)
             (@ f12_az5g)
             (@ g_az5h)
             (@ h_az5i)
             (@ i_az5j)
             (@ j_az5k)
             (@ k_az5l)
             (@ l_az5m)
             (v_B1 :: Show a_az5b)
             (v1_B2 :: Show b_az5c)
             (v2_B3 :: Show c_az5d)
             (v3_B4 :: Show d_az5e)
             (v4_B5 :: Show e_az5f)
             (v5_B6 :: Show f12_az5g)
             (v6_B7 :: Show g_az5h)
             (v7_B8 :: Show h_az5i)
             (v8_B9 :: Show i_az5j)
             (v9_Ba :: Show j_az5k)
             (v10_Bb :: Show k_az5l)
             (v11_Bc :: Show l_az5m) ->
       GHC.Show.C:Show TYPE: (a_az5b, b_az5c, c_az5d, d_az5e, e_az5f,
                              f12_az5g, g_az5h, h_az5i, i_az5j, j_az5k, k_az5l, l_az5m)
                       GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                         @ a_az5b
                         @ b_az5c
                         @ c_az5d
                         @ d_az5e
                         @ e_az5f
                         @ f12_az5g
                         @ g_az5h
                         @ h_az5i
                         @ i_az5j
                         @ j_az5k
                         @ k_az5l
                         @ l_az5m
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                       GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
                         @ a_az5b
                         @ b_az5c
                         @ c_az5d
                         @ d_az5e
                         @ e_az5f
                         @ f12_az5g
                         @ g_az5h
                         @ h_az5i
                         @ i_az5j
                         @ j_az5k
                         @ k_az5l
                         @ l_az5m
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                       GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
                         @ a_az5b
                         @ b_az5c
                         @ c_az5d
                         @ d_az5e
                         @ e_az5f
                         @ f12_az5g
                         @ g_az5h
                         @ h_az5i
                         @ i_az5j
                         @ j_az5k
                         @ k_az5l
                         @ l_az5m
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc]
GHC.Show.$fShow(,,,,,,,,,,,)
  = \ (@ a_azBI)
      (@ b_azBJ)
      (@ c_azBK)
      (@ d_azBL)
      (@ e_azBM)
      (@ f12_azBN)
      (@ g_azBO)
      (@ h_azBP)
      (@ i_azBQ)
      (@ j_azBR)
      (@ k_azBS)
      (@ l_azBT)
      ($dShow_azBU :: Show a_azBI)
      ($dShow1_azBV :: Show b_azBJ)
      ($dShow2_azBW :: Show c_azBK)
      ($dShow3_azBX :: Show d_azBL)
      ($dShow4_azBY :: Show e_azBM)
      ($dShow5_azBZ :: Show f12_azBN)
      ($dShow6_azC0 :: Show g_azBO)
      ($dShow7_azC1 :: Show h_azBP)
      ($dShow8_azC2 :: Show i_azBQ)
      ($dShow9_azC3 :: Show j_azBR)
      ($dShow10_azC4 :: Show k_azBS)
      ($dShow11_azC5 :: Show l_azBT) ->
      GHC.Show.C:Show
        @ (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
           h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
        (GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
           @ a_azBI
           @ b_azBJ
           @ c_azBK
           @ d_azBL
           @ e_azBM
           @ f12_azBN
           @ g_azBO
           @ h_azBP
           @ i_azBQ
           @ j_azBR
           @ k_azBS
           @ l_azBT
           $dShow_azBU
           $dShow1_azBV
           $dShow2_azBW
           $dShow3_azBX
           $dShow4_azBY
           $dShow5_azBZ
           $dShow6_azC0
           $dShow7_azC1
           $dShow8_azC2
           $dShow9_azC3
           $dShow10_azC4
           $dShow11_azC5)
        (GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
           @ a_azBI
           @ b_azBJ
           @ c_azBK
           @ d_azBL
           @ e_azBM
           @ f12_azBN
           @ g_azBO
           @ h_azBP
           @ i_azBQ
           @ j_azBR
           @ k_azBS
           @ l_azBT
           $dShow_azBU
           $dShow1_azBV
           $dShow2_azBW
           $dShow3_azBX
           $dShow4_azBY
           $dShow5_azBZ
           $dShow6_azC0
           $dShow7_azC1
           $dShow8_azC2
           $dShow9_azC3
           $dShow10_azC4
           $dShow11_azC5)
        (GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
           @ a_azBI
           @ b_azBJ
           @ c_azBK
           @ d_azBL
           @ e_azBM
           @ f12_azBN
           @ g_azBO
           @ h_azBP
           @ i_azBQ
           @ j_azBR
           @ k_azBS
           @ l_azBT
           $dShow_azBU
           $dShow1_azBV
           $dShow2_azBW
           $dShow3_azBX
           $dShow4_azBY
           $dShow5_azBZ
           $dShow6_azC0
           $dShow7_azC1
           $dShow8_azC2
           $dShow9_azC3
           $dShow10_azC4
           $dShow11_azC5)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 90, types: 106, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k) =>
     Int -> (a, b, c, d, e, f, g, h, i, j, k) -> ShowS
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 30 30 30 30 30 0 20 0] 610 30}]
GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
  = \ (@ a_azCK)
      (@ b_azCL)
      (@ c_azCM)
      (@ d_azCN)
      (@ e_azCO)
      (@ f12_azCP)
      (@ g_azCQ)
      (@ h_azCR)
      (@ i_azCS)
      (@ j_azCT)
      (@ k_azCU)
      ($dShow_azCV :: Show a_azCK)
      ($dShow1_azCW :: Show b_azCL)
      ($dShow2_azCX :: Show c_azCM)
      ($dShow3_azCY :: Show d_azCN)
      ($dShow4_azCZ :: Show e_azCO)
      ($dShow5_azD0 :: Show f12_azCP)
      ($dShow6_azD1 :: Show g_azCQ)
      ($dShow7_azD2 :: Show h_azCR)
      ($dShow8_azD3 :: Show i_azCS)
      ($dShow9_azD4 :: Show j_azCT)
      ($dShow10_azD5 :: Show k_azCU)
      _ [Occ=Dead]
      (ds1_dzTC
         :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
             h_azCR, i_azCS, j_azCT, k_azCU))
      (s_az5W :: String) ->
      case ds1_dzTC of
      { (a1_az5L, b1_az5M, c1_az5N, d1_az5O, e1_az5P, f13_az5Q, g1_az5R,
         h1_az5S, i1_az5T, j1_az5U, k1_az5V) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azCK $dShow_azCV GHC.Show.$fShow(,)1 a1_az5L)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azCL $dShow1_azCW GHC.Show.$fShow(,)1 b1_az5M)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azCM $dShow2_azCX GHC.Show.$fShow(,)1 c1_az5N)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azCN $dShow3_azCY GHC.Show.$fShow(,)1 d1_az5O)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azCO $dShow4_azCZ GHC.Show.$fShow(,)1 e1_az5P)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azCP $dShow5_azD0 GHC.Show.$fShow(,)1 f13_az5Q)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azCQ $dShow6_azD1 GHC.Show.$fShow(,)1 g1_az5R)
                                (GHC.Types.:
                                   @ ShowS
                                   (showsPrec @ h_azCR $dShow7_azD2 GHC.Show.$fShow(,)1 h1_az5S)
                                   (GHC.Types.:
                                      @ ShowS
                                      (showsPrec @ i_azCS $dShow8_azD3 GHC.Show.$fShow(,)1 i1_az5T)
                                      (GHC.Types.:
                                         @ ShowS
                                         (showsPrec
                                            @ j_azCT $dShow9_azD4 GHC.Show.$fShow(,)1 j1_az5U)
                                         (GHC.Types.:
                                            @ ShowS
                                            (showsPrec
                                               @ k_azCU $dShow10_azD5 GHC.Show.$fShow(,)1 k1_az5V)
                                            (GHC.Types.[] @ ShowS))))))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az5W))
      }

-- RHS size: {terms: 38, types: 68, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k) =>
     (a, b, c, d, e, f, g, h, i, j, k) -> String
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=12,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azCK)
                 (@ b_azCL)
                 (@ c_azCM)
                 (@ d_azCN)
                 (@ e_azCO)
                 (@ f12_azCP)
                 (@ g_azCQ)
                 (@ h_azCR)
                 (@ i_azCS)
                 (@ j_azCT)
                 (@ k_azCU)
                 ($dShow_azCV [Occ=Once] :: Show a_azCK)
                 ($dShow1_azCW [Occ=Once] :: Show b_azCL)
                 ($dShow2_azCX [Occ=Once] :: Show c_azCM)
                 ($dShow3_azCY [Occ=Once] :: Show d_azCN)
                 ($dShow4_azCZ [Occ=Once] :: Show e_azCO)
                 ($dShow5_azD0 [Occ=Once] :: Show f12_azCP)
                 ($dShow6_azD1 [Occ=Once] :: Show g_azCQ)
                 ($dShow7_azD2 [Occ=Once] :: Show h_azCR)
                 ($dShow8_azD3 [Occ=Once] :: Show i_azCS)
                 ($dShow9_azD4 [Occ=Once] :: Show j_azCT)
                 ($dShow10_azD5 [Occ=Once] :: Show k_azCU)
                 (x_az3n [Occ=Once]
                    :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                        h_azCR, i_azCS, j_azCT, k_azCU)) ->
                 GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                   @ a_azCK
                   @ b_azCL
                   @ c_azCM
                   @ d_azCN
                   @ e_azCO
                   @ f12_azCP
                   @ g_azCQ
                   @ h_azCR
                   @ i_azCS
                   @ j_azCT
                   @ k_azCU
                   $dShow_azCV
                   $dShow1_azCW
                   $dShow2_azCX
                   $dShow3_azCY
                   $dShow4_azCZ
                   $dShow5_azD0
                   $dShow6_azD1
                   $dShow7_azD2
                   $dShow8_azD3
                   $dShow9_azD4
                   $dShow10_azD5
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,,,,,)_$cshow
  = \ (@ a_azCK)
      (@ b_azCL)
      (@ c_azCM)
      (@ d_azCN)
      (@ e_azCO)
      (@ f12_azCP)
      (@ g_azCQ)
      (@ h_azCR)
      (@ i_azCS)
      (@ j_azCT)
      (@ k_azCU)
      ($dShow_azCV :: Show a_azCK)
      ($dShow1_azCW :: Show b_azCL)
      ($dShow2_azCX :: Show c_azCM)
      ($dShow3_azCY :: Show d_azCN)
      ($dShow4_azCZ :: Show e_azCO)
      ($dShow5_azD0 :: Show f12_azCP)
      ($dShow6_azD1 :: Show g_azCQ)
      ($dShow7_azD2 :: Show h_azCR)
      ($dShow8_azD3 :: Show i_azCS)
      ($dShow9_azD4 :: Show j_azCT)
      ($dShow10_azD5 :: Show k_azCU)
      (x_az3n
         :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
             h_azCR, i_azCS, j_azCT, k_azCU)) ->
      GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
        @ a_azCK
        @ b_azCL
        @ c_azCM
        @ d_azCN
        @ e_azCO
        @ f12_azCP
        @ g_azCQ
        @ h_azCR
        @ i_azCS
        @ j_azCT
        @ k_azCU
        $dShow_azCV
        $dShow1_azCW
        $dShow2_azCX
        $dShow3_azCY
        $dShow4_azCZ
        $dShow5_azD0
        $dShow6_azD1
        $dShow7_azD2
        $dShow8_azD3
        $dShow9_azD4
        $dShow10_azD5
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 40, types: 81, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k) =>
     [(a, b, c, d, e, f, g, h, i, j, k)] -> ShowS
[GblId,
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=13,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azCK)
                 (@ b_azCL)
                 (@ c_azCM)
                 (@ d_azCN)
                 (@ e_azCO)
                 (@ f12_azCP)
                 (@ g_azCQ)
                 (@ h_azCR)
                 (@ i_azCS)
                 (@ j_azCT)
                 (@ k_azCU)
                 ($dShow_azCV [Occ=Once] :: Show a_azCK)
                 ($dShow1_azCW [Occ=Once] :: Show b_azCL)
                 ($dShow2_azCX [Occ=Once] :: Show c_azCM)
                 ($dShow3_azCY [Occ=Once] :: Show d_azCN)
                 ($dShow4_azCZ [Occ=Once] :: Show e_azCO)
                 ($dShow5_azD0 [Occ=Once] :: Show f12_azCP)
                 ($dShow6_azD1 [Occ=Once] :: Show g_azCQ)
                 ($dShow7_azD2 [Occ=Once] :: Show h_azCR)
                 ($dShow8_azD3 [Occ=Once] :: Show i_azCS)
                 ($dShow9_azD4 [Occ=Once] :: Show j_azCT)
                 ($dShow10_azD5 [Occ=Once] :: Show k_azCU)
                 (ls_az3o [Occ=Once]
                    :: [(a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                         h_azCR, i_azCS, j_azCT, k_azCU)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                      h_azCR, i_azCS, j_azCT, k_azCU)
                   (GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      @ a_azCK
                      @ b_azCL
                      @ c_azCM
                      @ d_azCN
                      @ e_azCO
                      @ f12_azCP
                      @ g_azCQ
                      @ h_azCR
                      @ i_azCS
                      @ j_azCT
                      @ k_azCU
                      $dShow_azCV
                      $dShow1_azCW
                      $dShow2_azCX
                      $dShow3_azCY
                      $dShow4_azCZ
                      $dShow5_azD0
                      $dShow6_azD1
                      $dShow7_azD2
                      $dShow8_azD3
                      $dShow9_azD4
                      $dShow10_azD5
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
  = \ (@ a_azCK)
      (@ b_azCL)
      (@ c_azCM)
      (@ d_azCN)
      (@ e_azCO)
      (@ f12_azCP)
      (@ g_azCQ)
      (@ h_azCR)
      (@ i_azCS)
      (@ j_azCT)
      (@ k_azCU)
      ($dShow_azCV :: Show a_azCK)
      ($dShow1_azCW :: Show b_azCL)
      ($dShow2_azCX :: Show c_azCM)
      ($dShow3_azCY :: Show d_azCN)
      ($dShow4_azCZ :: Show e_azCO)
      ($dShow5_azD0 :: Show f12_azCP)
      ($dShow6_azD1 :: Show g_azCQ)
      ($dShow7_azD2 :: Show h_azCR)
      ($dShow8_azD3 :: Show i_azCS)
      ($dShow9_azD4 :: Show j_azCT)
      ($dShow10_azD5 :: Show k_azCU)
      (ls_az3o
         :: [(a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
              h_azCR, i_azCS, j_azCT, k_azCU)])
      (s_az3p :: String) ->
      showList__
        @ (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
           h_azCR, i_azCS, j_azCT, k_azCU)
        (GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
           @ a_azCK
           @ b_azCL
           @ c_azCM
           @ d_azCN
           @ e_azCO
           @ f12_azCP
           @ g_azCQ
           @ h_azCR
           @ i_azCS
           @ j_azCT
           @ k_azCU
           $dShow_azCV
           $dShow1_azCW
           $dShow2_azCX
           $dShow3_azCY
           $dShow4_azCZ
           $dShow5_azD0
           $dShow6_azD1
           $dShow7_azD2
           $dShow8_azD3
           $dShow9_azD4
           $dShow10_azD5
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 59, types: 89, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j, Show k) =>
     Show (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az5A)
             (@ b_az5B)
             (@ c_az5C)
             (@ d_az5D)
             (@ e_az5E)
             (@ f12_az5F)
             (@ g_az5G)
             (@ h_az5H)
             (@ i_az5I)
             (@ j_az5J)
             (@ k_az5K)
             (v_B1 :: Show a_az5A)
             (v1_B2 :: Show b_az5B)
             (v2_B3 :: Show c_az5C)
             (v3_B4 :: Show d_az5D)
             (v4_B5 :: Show e_az5E)
             (v5_B6 :: Show f12_az5F)
             (v6_B7 :: Show g_az5G)
             (v7_B8 :: Show h_az5H)
             (v8_B9 :: Show i_az5I)
             (v9_Ba :: Show j_az5J)
             (v10_Bb :: Show k_az5K) ->
       GHC.Show.C:Show TYPE: (a_az5A, b_az5B, c_az5C, d_az5D, e_az5E,
                              f12_az5F, g_az5G, h_az5H, i_az5I, j_az5J, k_az5K)
                       GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                         @ a_az5A
                         @ b_az5B
                         @ c_az5C
                         @ d_az5D
                         @ e_az5E
                         @ f12_az5F
                         @ g_az5G
                         @ h_az5H
                         @ i_az5I
                         @ j_az5J
                         @ k_az5K
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                       GHC.Show.$fShow(,,,,,,,,,,)_$cshow
                         @ a_az5A
                         @ b_az5B
                         @ c_az5C
                         @ d_az5D
                         @ e_az5E
                         @ f12_az5F
                         @ g_az5G
                         @ h_az5H
                         @ i_az5I
                         @ j_az5J
                         @ k_az5K
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                       GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
                         @ a_az5A
                         @ b_az5B
                         @ c_az5C
                         @ d_az5D
                         @ e_az5E
                         @ f12_az5F
                         @ g_az5G
                         @ h_az5H
                         @ i_az5I
                         @ j_az5J
                         @ k_az5K
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb]
GHC.Show.$fShow(,,,,,,,,,,)
  = \ (@ a_azCK)
      (@ b_azCL)
      (@ c_azCM)
      (@ d_azCN)
      (@ e_azCO)
      (@ f12_azCP)
      (@ g_azCQ)
      (@ h_azCR)
      (@ i_azCS)
      (@ j_azCT)
      (@ k_azCU)
      ($dShow_azCV :: Show a_azCK)
      ($dShow1_azCW :: Show b_azCL)
      ($dShow2_azCX :: Show c_azCM)
      ($dShow3_azCY :: Show d_azCN)
      ($dShow4_azCZ :: Show e_azCO)
      ($dShow5_azD0 :: Show f12_azCP)
      ($dShow6_azD1 :: Show g_azCQ)
      ($dShow7_azD2 :: Show h_azCR)
      ($dShow8_azD3 :: Show i_azCS)
      ($dShow9_azD4 :: Show j_azCT)
      ($dShow10_azD5 :: Show k_azCU) ->
      GHC.Show.C:Show
        @ (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
           h_azCR, i_azCS, j_azCT, k_azCU)
        (GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
           @ a_azCK
           @ b_azCL
           @ c_azCM
           @ d_azCN
           @ e_azCO
           @ f12_azCP
           @ g_azCQ
           @ h_azCR
           @ i_azCS
           @ j_azCT
           @ k_azCU
           $dShow_azCV
           $dShow1_azCW
           $dShow2_azCX
           $dShow3_azCY
           $dShow4_azCZ
           $dShow5_azD0
           $dShow6_azD1
           $dShow7_azD2
           $dShow8_azD3
           $dShow9_azD4
           $dShow10_azD5)
        (GHC.Show.$fShow(,,,,,,,,,,)_$cshow
           @ a_azCK
           @ b_azCL
           @ c_azCM
           @ d_azCN
           @ e_azCO
           @ f12_azCP
           @ g_azCQ
           @ h_azCR
           @ i_azCS
           @ j_azCT
           @ k_azCU
           $dShow_azCV
           $dShow1_azCW
           $dShow2_azCX
           $dShow3_azCY
           $dShow4_azCZ
           $dShow5_azD0
           $dShow6_azD1
           $dShow7_azD2
           $dShow8_azD3
           $dShow9_azD4
           $dShow10_azD5)
        (GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
           @ a_azCK
           @ b_azCL
           @ c_azCM
           @ d_azCN
           @ e_azCO
           @ f12_azCP
           @ g_azCQ
           @ h_azCR
           @ i_azCS
           @ j_azCT
           @ k_azCU
           $dShow_azCV
           $dShow1_azCW
           $dShow2_azCX
           $dShow3_azCY
           $dShow4_azCZ
           $dShow5_azD0
           $dShow6_azD1
           $dShow7_azD2
           $dShow8_azD3
           $dShow9_azD4
           $dShow10_azD5)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 83, types: 97, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j) =>
     Int -> (a, b, c, d, e, f, g, h, i, j) -> ShowS
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 30 30 30 30 0 20 0] 560 30}]
GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
  = \ (@ a_azDI)
      (@ b_azDJ)
      (@ c_azDK)
      (@ d_azDL)
      (@ e_azDM)
      (@ f12_azDN)
      (@ g_azDO)
      (@ h_azDP)
      (@ i_azDQ)
      (@ j_azDR)
      ($dShow_azDS :: Show a_azDI)
      ($dShow1_azDT :: Show b_azDJ)
      ($dShow2_azDU :: Show c_azDK)
      ($dShow3_azDV :: Show d_azDL)
      ($dShow4_azDW :: Show e_azDM)
      ($dShow5_azDX :: Show f12_azDN)
      ($dShow6_azDY :: Show g_azDO)
      ($dShow7_azDZ :: Show h_azDP)
      ($dShow8_azE0 :: Show i_azDQ)
      ($dShow9_azE1 :: Show j_azDR)
      _ [Occ=Dead]
      (ds1_dzTW
         :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
             h_azDP, i_azDQ, j_azDR))
      (s_az6h :: String) ->
      case ds1_dzTW of
      { (a1_az67, b1_az68, c1_az69, d1_az6a, e1_az6b, f13_az6c, g1_az6d,
         h1_az6e, i1_az6f, j1_az6g) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azDI $dShow_azDS GHC.Show.$fShow(,)1 a1_az67)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azDJ $dShow1_azDT GHC.Show.$fShow(,)1 b1_az68)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azDK $dShow2_azDU GHC.Show.$fShow(,)1 c1_az69)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azDL $dShow3_azDV GHC.Show.$fShow(,)1 d1_az6a)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azDM $dShow4_azDW GHC.Show.$fShow(,)1 e1_az6b)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azDN $dShow5_azDX GHC.Show.$fShow(,)1 f13_az6c)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azDO $dShow6_azDY GHC.Show.$fShow(,)1 g1_az6d)
                                (GHC.Types.:
                                   @ ShowS
                                   (showsPrec @ h_azDP $dShow7_azDZ GHC.Show.$fShow(,)1 h1_az6e)
                                   (GHC.Types.:
                                      @ ShowS
                                      (showsPrec @ i_azDQ $dShow8_azE0 GHC.Show.$fShow(,)1 i1_az6f)
                                      (GHC.Types.:
                                         @ ShowS
                                         (showsPrec
                                            @ j_azDR $dShow9_azE1 GHC.Show.$fShow(,)1 j1_az6g)
                                         (GHC.Types.[] @ ShowS)))))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az6h))
      }

-- RHS size: {terms: 35, types: 62, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j) =>
     (a, b, c, d, e, f, g, h, i, j) -> String
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=11,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azDI)
                 (@ b_azDJ)
                 (@ c_azDK)
                 (@ d_azDL)
                 (@ e_azDM)
                 (@ f12_azDN)
                 (@ g_azDO)
                 (@ h_azDP)
                 (@ i_azDQ)
                 (@ j_azDR)
                 ($dShow_azDS [Occ=Once] :: Show a_azDI)
                 ($dShow1_azDT [Occ=Once] :: Show b_azDJ)
                 ($dShow2_azDU [Occ=Once] :: Show c_azDK)
                 ($dShow3_azDV [Occ=Once] :: Show d_azDL)
                 ($dShow4_azDW [Occ=Once] :: Show e_azDM)
                 ($dShow5_azDX [Occ=Once] :: Show f12_azDN)
                 ($dShow6_azDY [Occ=Once] :: Show g_azDO)
                 ($dShow7_azDZ [Occ=Once] :: Show h_azDP)
                 ($dShow8_azE0 [Occ=Once] :: Show i_azDQ)
                 ($dShow9_azE1 [Occ=Once] :: Show j_azDR)
                 (x_az3n [Occ=Once]
                    :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                        h_azDP, i_azDQ, j_azDR)) ->
                 GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                   @ a_azDI
                   @ b_azDJ
                   @ c_azDK
                   @ d_azDL
                   @ e_azDM
                   @ f12_azDN
                   @ g_azDO
                   @ h_azDP
                   @ i_azDQ
                   @ j_azDR
                   $dShow_azDS
                   $dShow1_azDT
                   $dShow2_azDU
                   $dShow3_azDV
                   $dShow4_azDW
                   $dShow5_azDX
                   $dShow6_azDY
                   $dShow7_azDZ
                   $dShow8_azE0
                   $dShow9_azE1
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,,,,)_$cshow
  = \ (@ a_azDI)
      (@ b_azDJ)
      (@ c_azDK)
      (@ d_azDL)
      (@ e_azDM)
      (@ f12_azDN)
      (@ g_azDO)
      (@ h_azDP)
      (@ i_azDQ)
      (@ j_azDR)
      ($dShow_azDS :: Show a_azDI)
      ($dShow1_azDT :: Show b_azDJ)
      ($dShow2_azDU :: Show c_azDK)
      ($dShow3_azDV :: Show d_azDL)
      ($dShow4_azDW :: Show e_azDM)
      ($dShow5_azDX :: Show f12_azDN)
      ($dShow6_azDY :: Show g_azDO)
      ($dShow7_azDZ :: Show h_azDP)
      ($dShow8_azE0 :: Show i_azDQ)
      ($dShow9_azE1 :: Show j_azDR)
      (x_az3n
         :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
             h_azDP, i_azDQ, j_azDR)) ->
      GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
        @ a_azDI
        @ b_azDJ
        @ c_azDK
        @ d_azDL
        @ e_azDM
        @ f12_azDN
        @ g_azDO
        @ h_azDP
        @ i_azDQ
        @ j_azDR
        $dShow_azDS
        $dShow1_azDT
        $dShow2_azDU
        $dShow3_azDV
        $dShow4_azDW
        $dShow5_azDX
        $dShow6_azDY
        $dShow7_azDZ
        $dShow8_azE0
        $dShow9_azE1
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 37, types: 74, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j) =>
     [(a, b, c, d, e, f, g, h, i, j)] -> ShowS
[GblId,
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=12,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azDI)
                 (@ b_azDJ)
                 (@ c_azDK)
                 (@ d_azDL)
                 (@ e_azDM)
                 (@ f12_azDN)
                 (@ g_azDO)
                 (@ h_azDP)
                 (@ i_azDQ)
                 (@ j_azDR)
                 ($dShow_azDS [Occ=Once] :: Show a_azDI)
                 ($dShow1_azDT [Occ=Once] :: Show b_azDJ)
                 ($dShow2_azDU [Occ=Once] :: Show c_azDK)
                 ($dShow3_azDV [Occ=Once] :: Show d_azDL)
                 ($dShow4_azDW [Occ=Once] :: Show e_azDM)
                 ($dShow5_azDX [Occ=Once] :: Show f12_azDN)
                 ($dShow6_azDY [Occ=Once] :: Show g_azDO)
                 ($dShow7_azDZ [Occ=Once] :: Show h_azDP)
                 ($dShow8_azE0 [Occ=Once] :: Show i_azDQ)
                 ($dShow9_azE1 [Occ=Once] :: Show j_azDR)
                 (ls_az3o [Occ=Once]
                    :: [(a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                         h_azDP, i_azDQ, j_azDR)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                      h_azDP, i_azDQ, j_azDR)
                   (GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      @ a_azDI
                      @ b_azDJ
                      @ c_azDK
                      @ d_azDL
                      @ e_azDM
                      @ f12_azDN
                      @ g_azDO
                      @ h_azDP
                      @ i_azDQ
                      @ j_azDR
                      $dShow_azDS
                      $dShow1_azDT
                      $dShow2_azDU
                      $dShow3_azDV
                      $dShow4_azDW
                      $dShow5_azDX
                      $dShow6_azDY
                      $dShow7_azDZ
                      $dShow8_azE0
                      $dShow9_azE1
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,,,,)_$cshowList
  = \ (@ a_azDI)
      (@ b_azDJ)
      (@ c_azDK)
      (@ d_azDL)
      (@ e_azDM)
      (@ f12_azDN)
      (@ g_azDO)
      (@ h_azDP)
      (@ i_azDQ)
      (@ j_azDR)
      ($dShow_azDS :: Show a_azDI)
      ($dShow1_azDT :: Show b_azDJ)
      ($dShow2_azDU :: Show c_azDK)
      ($dShow3_azDV :: Show d_azDL)
      ($dShow4_azDW :: Show e_azDM)
      ($dShow5_azDX :: Show f12_azDN)
      ($dShow6_azDY :: Show g_azDO)
      ($dShow7_azDZ :: Show h_azDP)
      ($dShow8_azE0 :: Show i_azDQ)
      ($dShow9_azE1 :: Show j_azDR)
      (ls_az3o
         :: [(a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
              h_azDP, i_azDQ, j_azDR)])
      (s_az3p :: String) ->
      showList__
        @ (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
           h_azDP, i_azDQ, j_azDR)
        (GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
           @ a_azDI
           @ b_azDJ
           @ c_azDK
           @ d_azDL
           @ e_azDM
           @ f12_azDN
           @ g_azDO
           @ h_azDP
           @ i_azDQ
           @ j_azDR
           $dShow_azDS
           $dShow1_azDT
           $dShow2_azDU
           $dShow3_azDV
           $dShow4_azDW
           $dShow5_azDX
           $dShow6_azDY
           $dShow7_azDZ
           $dShow8_azE0
           $dShow9_azE1
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 54, types: 81, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i, Show j) =>
     Show (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az5X)
             (@ b_az5Y)
             (@ c_az5Z)
             (@ d_az60)
             (@ e_az61)
             (@ f12_az62)
             (@ g_az63)
             (@ h_az64)
             (@ i_az65)
             (@ j_az66)
             (v_B1 :: Show a_az5X)
             (v1_B2 :: Show b_az5Y)
             (v2_B3 :: Show c_az5Z)
             (v3_B4 :: Show d_az60)
             (v4_B5 :: Show e_az61)
             (v5_B6 :: Show f12_az62)
             (v6_B7 :: Show g_az63)
             (v7_B8 :: Show h_az64)
             (v8_B9 :: Show i_az65)
             (v9_Ba :: Show j_az66) ->
       GHC.Show.C:Show TYPE: (a_az5X, b_az5Y, c_az5Z, d_az60, e_az61,
                              f12_az62, g_az63, h_az64, i_az65, j_az66)
                       GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                         @ a_az5X
                         @ b_az5Y
                         @ c_az5Z
                         @ d_az60
                         @ e_az61
                         @ f12_az62
                         @ g_az63
                         @ h_az64
                         @ i_az65
                         @ j_az66
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                       GHC.Show.$fShow(,,,,,,,,,)_$cshow
                         @ a_az5X
                         @ b_az5Y
                         @ c_az5Z
                         @ d_az60
                         @ e_az61
                         @ f12_az62
                         @ g_az63
                         @ h_az64
                         @ i_az65
                         @ j_az66
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                       GHC.Show.$fShow(,,,,,,,,,)_$cshowList
                         @ a_az5X
                         @ b_az5Y
                         @ c_az5Z
                         @ d_az60
                         @ e_az61
                         @ f12_az62
                         @ g_az63
                         @ h_az64
                         @ i_az65
                         @ j_az66
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba]
GHC.Show.$fShow(,,,,,,,,,)
  = \ (@ a_azDI)
      (@ b_azDJ)
      (@ c_azDK)
      (@ d_azDL)
      (@ e_azDM)
      (@ f12_azDN)
      (@ g_azDO)
      (@ h_azDP)
      (@ i_azDQ)
      (@ j_azDR)
      ($dShow_azDS :: Show a_azDI)
      ($dShow1_azDT :: Show b_azDJ)
      ($dShow2_azDU :: Show c_azDK)
      ($dShow3_azDV :: Show d_azDL)
      ($dShow4_azDW :: Show e_azDM)
      ($dShow5_azDX :: Show f12_azDN)
      ($dShow6_azDY :: Show g_azDO)
      ($dShow7_azDZ :: Show h_azDP)
      ($dShow8_azE0 :: Show i_azDQ)
      ($dShow9_azE1 :: Show j_azDR) ->
      GHC.Show.C:Show
        @ (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
           h_azDP, i_azDQ, j_azDR)
        (GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
           @ a_azDI
           @ b_azDJ
           @ c_azDK
           @ d_azDL
           @ e_azDM
           @ f12_azDN
           @ g_azDO
           @ h_azDP
           @ i_azDQ
           @ j_azDR
           $dShow_azDS
           $dShow1_azDT
           $dShow2_azDU
           $dShow3_azDV
           $dShow4_azDW
           $dShow5_azDX
           $dShow6_azDY
           $dShow7_azDZ
           $dShow8_azE0
           $dShow9_azE1)
        (GHC.Show.$fShow(,,,,,,,,,)_$cshow
           @ a_azDI
           @ b_azDJ
           @ c_azDK
           @ d_azDL
           @ e_azDM
           @ f12_azDN
           @ g_azDO
           @ h_azDP
           @ i_azDQ
           @ j_azDR
           $dShow_azDS
           $dShow1_azDT
           $dShow2_azDU
           $dShow3_azDV
           $dShow4_azDW
           $dShow5_azDX
           $dShow6_azDY
           $dShow7_azDZ
           $dShow8_azE0
           $dShow9_azE1)
        (GHC.Show.$fShow(,,,,,,,,,)_$cshowList
           @ a_azDI
           @ b_azDJ
           @ c_azDK
           @ d_azDL
           @ e_azDM
           @ f12_azDN
           @ g_azDO
           @ h_azDP
           @ i_azDQ
           @ j_azDR
           $dShow_azDS
           $dShow1_azDT
           $dShow2_azDU
           $dShow3_azDV
           $dShow4_azDW
           $dShow5_azDX
           $dShow6_azDY
           $dShow7_azDZ
           $dShow8_azE0
           $dShow9_azE1)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 76, types: 88, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i) =>
     Int -> (a, b, c, d, e, f, g, h, i) -> ShowS
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 30 30 30 0 20 0] 510 30}]
GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
  = \ (@ a_azEC)
      (@ b_azED)
      (@ c_azEE)
      (@ d_azEF)
      (@ e_azEG)
      (@ f12_azEH)
      (@ g_azEI)
      (@ h_azEJ)
      (@ i_azEK)
      ($dShow_azEL :: Show a_azEC)
      ($dShow1_azEM :: Show b_azED)
      ($dShow2_azEN :: Show c_azEE)
      ($dShow3_azEO :: Show d_azEF)
      ($dShow4_azEP :: Show e_azEG)
      ($dShow5_azEQ :: Show f12_azEH)
      ($dShow6_azER :: Show g_azEI)
      ($dShow7_azES :: Show h_azEJ)
      ($dShow8_azET :: Show i_azEK)
      _ [Occ=Dead]
      (ds1_dzUf
         :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
             h_azEJ, i_azEK))
      (s_az6A :: String) ->
      case ds1_dzUf of
      { (a1_az6r, b1_az6s, c1_az6t, d1_az6u, e1_az6v, f13_az6w, g1_az6x,
         h1_az6y, i1_az6z) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azEC $dShow_azEL GHC.Show.$fShow(,)1 a1_az6r)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azED $dShow1_azEM GHC.Show.$fShow(,)1 b1_az6s)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azEE $dShow2_azEN GHC.Show.$fShow(,)1 c1_az6t)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azEF $dShow3_azEO GHC.Show.$fShow(,)1 d1_az6u)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azEG $dShow4_azEP GHC.Show.$fShow(,)1 e1_az6v)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azEH $dShow5_azEQ GHC.Show.$fShow(,)1 f13_az6w)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azEI $dShow6_azER GHC.Show.$fShow(,)1 g1_az6x)
                                (GHC.Types.:
                                   @ ShowS
                                   (showsPrec @ h_azEJ $dShow7_azES GHC.Show.$fShow(,)1 h1_az6y)
                                   (GHC.Types.:
                                      @ ShowS
                                      (showsPrec @ i_azEK $dShow8_azET GHC.Show.$fShow(,)1 i1_az6z)
                                      (GHC.Types.[] @ ShowS))))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az6A))
      }

-- RHS size: {terms: 32, types: 56, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,)_$cshow
  :: forall a b c d e f g h i.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i) =>
     (a, b, c, d, e, f, g, h, i) -> String
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=10,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azEC)
                 (@ b_azED)
                 (@ c_azEE)
                 (@ d_azEF)
                 (@ e_azEG)
                 (@ f12_azEH)
                 (@ g_azEI)
                 (@ h_azEJ)
                 (@ i_azEK)
                 ($dShow_azEL [Occ=Once] :: Show a_azEC)
                 ($dShow1_azEM [Occ=Once] :: Show b_azED)
                 ($dShow2_azEN [Occ=Once] :: Show c_azEE)
                 ($dShow3_azEO [Occ=Once] :: Show d_azEF)
                 ($dShow4_azEP [Occ=Once] :: Show e_azEG)
                 ($dShow5_azEQ [Occ=Once] :: Show f12_azEH)
                 ($dShow6_azER [Occ=Once] :: Show g_azEI)
                 ($dShow7_azES [Occ=Once] :: Show h_azEJ)
                 ($dShow8_azET [Occ=Once] :: Show i_azEK)
                 (x_az3n [Occ=Once]
                    :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                        h_azEJ, i_azEK)) ->
                 GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                   @ a_azEC
                   @ b_azED
                   @ c_azEE
                   @ d_azEF
                   @ e_azEG
                   @ f12_azEH
                   @ g_azEI
                   @ h_azEJ
                   @ i_azEK
                   $dShow_azEL
                   $dShow1_azEM
                   $dShow2_azEN
                   $dShow3_azEO
                   $dShow4_azEP
                   $dShow5_azEQ
                   $dShow6_azER
                   $dShow7_azES
                   $dShow8_azET
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,,,)_$cshow
  = \ (@ a_azEC)
      (@ b_azED)
      (@ c_azEE)
      (@ d_azEF)
      (@ e_azEG)
      (@ f12_azEH)
      (@ g_azEI)
      (@ h_azEJ)
      (@ i_azEK)
      ($dShow_azEL :: Show a_azEC)
      ($dShow1_azEM :: Show b_azED)
      ($dShow2_azEN :: Show c_azEE)
      ($dShow3_azEO :: Show d_azEF)
      ($dShow4_azEP :: Show e_azEG)
      ($dShow5_azEQ :: Show f12_azEH)
      ($dShow6_azER :: Show g_azEI)
      ($dShow7_azES :: Show h_azEJ)
      ($dShow8_azET :: Show i_azEK)
      (x_az3n
         :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
             h_azEJ, i_azEK)) ->
      GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
        @ a_azEC
        @ b_azED
        @ c_azEE
        @ d_azEF
        @ e_azEG
        @ f12_azEH
        @ g_azEI
        @ h_azEJ
        @ i_azEK
        $dShow_azEL
        $dShow1_azEM
        $dShow2_azEN
        $dShow3_azEO
        $dShow4_azEP
        $dShow5_azEQ
        $dShow6_azER
        $dShow7_azES
        $dShow8_azET
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 34, types: 67, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i) =>
     [(a, b, c, d, e, f, g, h, i)] -> ShowS
[GblId,
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=11,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azEC)
                 (@ b_azED)
                 (@ c_azEE)
                 (@ d_azEF)
                 (@ e_azEG)
                 (@ f12_azEH)
                 (@ g_azEI)
                 (@ h_azEJ)
                 (@ i_azEK)
                 ($dShow_azEL [Occ=Once] :: Show a_azEC)
                 ($dShow1_azEM [Occ=Once] :: Show b_azED)
                 ($dShow2_azEN [Occ=Once] :: Show c_azEE)
                 ($dShow3_azEO [Occ=Once] :: Show d_azEF)
                 ($dShow4_azEP [Occ=Once] :: Show e_azEG)
                 ($dShow5_azEQ [Occ=Once] :: Show f12_azEH)
                 ($dShow6_azER [Occ=Once] :: Show g_azEI)
                 ($dShow7_azES [Occ=Once] :: Show h_azEJ)
                 ($dShow8_azET [Occ=Once] :: Show i_azEK)
                 (ls_az3o [Occ=Once]
                    :: [(a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                         h_azEJ, i_azEK)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                      h_azEJ, i_azEK)
                   (GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      @ a_azEC
                      @ b_azED
                      @ c_azEE
                      @ d_azEF
                      @ e_azEG
                      @ f12_azEH
                      @ g_azEI
                      @ h_azEJ
                      @ i_azEK
                      $dShow_azEL
                      $dShow1_azEM
                      $dShow2_azEN
                      $dShow3_azEO
                      $dShow4_azEP
                      $dShow5_azEQ
                      $dShow6_azER
                      $dShow7_azES
                      $dShow8_azET
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,,,)_$cshowList
  = \ (@ a_azEC)
      (@ b_azED)
      (@ c_azEE)
      (@ d_azEF)
      (@ e_azEG)
      (@ f12_azEH)
      (@ g_azEI)
      (@ h_azEJ)
      (@ i_azEK)
      ($dShow_azEL :: Show a_azEC)
      ($dShow1_azEM :: Show b_azED)
      ($dShow2_azEN :: Show c_azEE)
      ($dShow3_azEO :: Show d_azEF)
      ($dShow4_azEP :: Show e_azEG)
      ($dShow5_azEQ :: Show f12_azEH)
      ($dShow6_azER :: Show g_azEI)
      ($dShow7_azES :: Show h_azEJ)
      ($dShow8_azET :: Show i_azEK)
      (ls_az3o
         :: [(a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
              h_azEJ, i_azEK)])
      (s_az3p :: String) ->
      showList__
        @ (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
           h_azEJ, i_azEK)
        (GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
           @ a_azEC
           @ b_azED
           @ c_azEE
           @ d_azEF
           @ e_azEG
           @ f12_azEH
           @ g_azEI
           @ h_azEJ
           @ i_azEK
           $dShow_azEL
           $dShow1_azEM
           $dShow2_azEN
           $dShow3_azEO
           $dShow4_azEP
           $dShow5_azEQ
           $dShow6_azER
           $dShow7_azES
           $dShow8_azET
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 49, types: 73, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h,
      Show i) =>
     Show (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az6i)
             (@ b_az6j)
             (@ c_az6k)
             (@ d_az6l)
             (@ e_az6m)
             (@ f12_az6n)
             (@ g_az6o)
             (@ h_az6p)
             (@ i_az6q)
             (v_B1 :: Show a_az6i)
             (v1_B2 :: Show b_az6j)
             (v2_B3 :: Show c_az6k)
             (v3_B4 :: Show d_az6l)
             (v4_B5 :: Show e_az6m)
             (v5_B6 :: Show f12_az6n)
             (v6_B7 :: Show g_az6o)
             (v7_B8 :: Show h_az6p)
             (v8_B9 :: Show i_az6q) ->
       GHC.Show.C:Show TYPE: (a_az6i, b_az6j, c_az6k, d_az6l, e_az6m,
                              f12_az6n, g_az6o, h_az6p, i_az6q)
                       GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                         @ a_az6i
                         @ b_az6j
                         @ c_az6k
                         @ d_az6l
                         @ e_az6m
                         @ f12_az6n
                         @ g_az6o
                         @ h_az6p
                         @ i_az6q
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                       GHC.Show.$fShow(,,,,,,,,)_$cshow
                         @ a_az6i
                         @ b_az6j
                         @ c_az6k
                         @ d_az6l
                         @ e_az6m
                         @ f12_az6n
                         @ g_az6o
                         @ h_az6p
                         @ i_az6q
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                       GHC.Show.$fShow(,,,,,,,,)_$cshowList
                         @ a_az6i
                         @ b_az6j
                         @ c_az6k
                         @ d_az6l
                         @ e_az6m
                         @ f12_az6n
                         @ g_az6o
                         @ h_az6p
                         @ i_az6q
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9]
GHC.Show.$fShow(,,,,,,,,)
  = \ (@ a_azEC)
      (@ b_azED)
      (@ c_azEE)
      (@ d_azEF)
      (@ e_azEG)
      (@ f12_azEH)
      (@ g_azEI)
      (@ h_azEJ)
      (@ i_azEK)
      ($dShow_azEL :: Show a_azEC)
      ($dShow1_azEM :: Show b_azED)
      ($dShow2_azEN :: Show c_azEE)
      ($dShow3_azEO :: Show d_azEF)
      ($dShow4_azEP :: Show e_azEG)
      ($dShow5_azEQ :: Show f12_azEH)
      ($dShow6_azER :: Show g_azEI)
      ($dShow7_azES :: Show h_azEJ)
      ($dShow8_azET :: Show i_azEK) ->
      GHC.Show.C:Show
        @ (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
           h_azEJ, i_azEK)
        (GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
           @ a_azEC
           @ b_azED
           @ c_azEE
           @ d_azEF
           @ e_azEG
           @ f12_azEH
           @ g_azEI
           @ h_azEJ
           @ i_azEK
           $dShow_azEL
           $dShow1_azEM
           $dShow2_azEN
           $dShow3_azEO
           $dShow4_azEP
           $dShow5_azEQ
           $dShow6_azER
           $dShow7_azES
           $dShow8_azET)
        (GHC.Show.$fShow(,,,,,,,,)_$cshow
           @ a_azEC
           @ b_azED
           @ c_azEE
           @ d_azEF
           @ e_azEG
           @ f12_azEH
           @ g_azEI
           @ h_azEJ
           @ i_azEK
           $dShow_azEL
           $dShow1_azEM
           $dShow2_azEN
           $dShow3_azEO
           $dShow4_azEP
           $dShow5_azEQ
           $dShow6_azER
           $dShow7_azES
           $dShow8_azET)
        (GHC.Show.$fShow(,,,,,,,,)_$cshowList
           @ a_azEC
           @ b_azED
           @ c_azEE
           @ d_azEF
           @ e_azEG
           @ f12_azEH
           @ g_azEI
           @ h_azEJ
           @ i_azEK
           $dShow_azEL
           $dShow1_azEM
           $dShow2_azEN
           $dShow3_azEO
           $dShow4_azEP
           $dShow5_azEQ
           $dShow6_azER
           $dShow7_azES
           $dShow8_azET)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 69, types: 79, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h) =>
     Int -> (a, b, c, d, e, f, g, h) -> ShowS
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 30 30 0 20 0] 460 30}]
GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
  = \ (@ a_azFs)
      (@ b_azFt)
      (@ c_azFu)
      (@ d_azFv)
      (@ e_azFw)
      (@ f12_azFx)
      (@ g_azFy)
      (@ h_azFz)
      ($dShow_azFA :: Show a_azFs)
      ($dShow1_azFB :: Show b_azFt)
      ($dShow2_azFC :: Show c_azFu)
      ($dShow3_azFD :: Show d_azFv)
      ($dShow4_azFE :: Show e_azFw)
      ($dShow5_azFF :: Show f12_azFx)
      ($dShow6_azFG :: Show g_azFy)
      ($dShow7_azFH :: Show h_azFz)
      _ [Occ=Dead]
      (ds1_dzUx
         :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
             h_azFz))
      (s_az6R :: String) ->
      case ds1_dzUx of
      { (a1_az6J, b1_az6K, c1_az6L, d1_az6M, e1_az6N, f13_az6O, g1_az6P,
         h1_az6Q) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azFs $dShow_azFA GHC.Show.$fShow(,)1 a1_az6J)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azFt $dShow1_azFB GHC.Show.$fShow(,)1 b1_az6K)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azFu $dShow2_azFC GHC.Show.$fShow(,)1 c1_az6L)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azFv $dShow3_azFD GHC.Show.$fShow(,)1 d1_az6M)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azFw $dShow4_azFE GHC.Show.$fShow(,)1 e1_az6N)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azFx $dShow5_azFF GHC.Show.$fShow(,)1 f13_az6O)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azFy $dShow6_azFG GHC.Show.$fShow(,)1 g1_az6P)
                                (GHC.Types.:
                                   @ ShowS
                                   (showsPrec @ h_azFz $dShow7_azFH GHC.Show.$fShow(,)1 h1_az6Q)
                                   (GHC.Types.[] @ ShowS)))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az6R))
      }

-- RHS size: {terms: 29, types: 50, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,)_$cshow
  :: forall a b c d e f g h.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h) =>
     (a, b, c, d, e, f, g, h) -> String
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azFs)
                 (@ b_azFt)
                 (@ c_azFu)
                 (@ d_azFv)
                 (@ e_azFw)
                 (@ f12_azFx)
                 (@ g_azFy)
                 (@ h_azFz)
                 ($dShow_azFA [Occ=Once] :: Show a_azFs)
                 ($dShow1_azFB [Occ=Once] :: Show b_azFt)
                 ($dShow2_azFC [Occ=Once] :: Show c_azFu)
                 ($dShow3_azFD [Occ=Once] :: Show d_azFv)
                 ($dShow4_azFE [Occ=Once] :: Show e_azFw)
                 ($dShow5_azFF [Occ=Once] :: Show f12_azFx)
                 ($dShow6_azFG [Occ=Once] :: Show g_azFy)
                 ($dShow7_azFH [Occ=Once] :: Show h_azFz)
                 (x_az3n [Occ=Once]
                    :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                        h_azFz)) ->
                 GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                   @ a_azFs
                   @ b_azFt
                   @ c_azFu
                   @ d_azFv
                   @ e_azFw
                   @ f12_azFx
                   @ g_azFy
                   @ h_azFz
                   $dShow_azFA
                   $dShow1_azFB
                   $dShow2_azFC
                   $dShow3_azFD
                   $dShow4_azFE
                   $dShow5_azFF
                   $dShow6_azFG
                   $dShow7_azFH
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,,)_$cshow
  = \ (@ a_azFs)
      (@ b_azFt)
      (@ c_azFu)
      (@ d_azFv)
      (@ e_azFw)
      (@ f12_azFx)
      (@ g_azFy)
      (@ h_azFz)
      ($dShow_azFA :: Show a_azFs)
      ($dShow1_azFB :: Show b_azFt)
      ($dShow2_azFC :: Show c_azFu)
      ($dShow3_azFD :: Show d_azFv)
      ($dShow4_azFE :: Show e_azFw)
      ($dShow5_azFF :: Show f12_azFx)
      ($dShow6_azFG :: Show g_azFy)
      ($dShow7_azFH :: Show h_azFz)
      (x_az3n
         :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
             h_azFz)) ->
      GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
        @ a_azFs
        @ b_azFt
        @ c_azFu
        @ d_azFv
        @ e_azFw
        @ f12_azFx
        @ g_azFy
        @ h_azFz
        $dShow_azFA
        $dShow1_azFB
        $dShow2_azFC
        $dShow3_azFD
        $dShow4_azFE
        $dShow5_azFF
        $dShow6_azFG
        $dShow7_azFH
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 31, types: 60, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,)_$cshowList
  :: forall a b c d e f g h.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h) =>
     [(a, b, c, d, e, f, g, h)] -> ShowS
[GblId,
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=10,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azFs)
                 (@ b_azFt)
                 (@ c_azFu)
                 (@ d_azFv)
                 (@ e_azFw)
                 (@ f12_azFx)
                 (@ g_azFy)
                 (@ h_azFz)
                 ($dShow_azFA [Occ=Once] :: Show a_azFs)
                 ($dShow1_azFB [Occ=Once] :: Show b_azFt)
                 ($dShow2_azFC [Occ=Once] :: Show c_azFu)
                 ($dShow3_azFD [Occ=Once] :: Show d_azFv)
                 ($dShow4_azFE [Occ=Once] :: Show e_azFw)
                 ($dShow5_azFF [Occ=Once] :: Show f12_azFx)
                 ($dShow6_azFG [Occ=Once] :: Show g_azFy)
                 ($dShow7_azFH [Occ=Once] :: Show h_azFz)
                 (ls_az3o [Occ=Once]
                    :: [(a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                         h_azFz)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                      h_azFz)
                   (GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      @ a_azFs
                      @ b_azFt
                      @ c_azFu
                      @ d_azFv
                      @ e_azFw
                      @ f12_azFx
                      @ g_azFy
                      @ h_azFz
                      $dShow_azFA
                      $dShow1_azFB
                      $dShow2_azFC
                      $dShow3_azFD
                      $dShow4_azFE
                      $dShow5_azFF
                      $dShow6_azFG
                      $dShow7_azFH
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,,)_$cshowList
  = \ (@ a_azFs)
      (@ b_azFt)
      (@ c_azFu)
      (@ d_azFv)
      (@ e_azFw)
      (@ f12_azFx)
      (@ g_azFy)
      (@ h_azFz)
      ($dShow_azFA :: Show a_azFs)
      ($dShow1_azFB :: Show b_azFt)
      ($dShow2_azFC :: Show c_azFu)
      ($dShow3_azFD :: Show d_azFv)
      ($dShow4_azFE :: Show e_azFw)
      ($dShow5_azFF :: Show f12_azFx)
      ($dShow6_azFG :: Show g_azFy)
      ($dShow7_azFH :: Show h_azFz)
      (ls_az3o
         :: [(a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
              h_azFz)])
      (s_az3p :: String) ->
      showList__
        @ (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
           h_azFz)
        (GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
           @ a_azFs
           @ b_azFt
           @ c_azFu
           @ d_azFv
           @ e_azFw
           @ f12_azFx
           @ g_azFy
           @ h_azFz
           $dShow_azFA
           $dShow1_azFB
           $dShow2_azFC
           $dShow3_azFD
           $dShow4_azFE
           $dShow5_azFF
           $dShow6_azFG
           $dShow7_azFH
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 44, types: 65, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g, Show h) =>
     Show (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az6B)
             (@ b_az6C)
             (@ c_az6D)
             (@ d_az6E)
             (@ e_az6F)
             (@ f12_az6G)
             (@ g_az6H)
             (@ h_az6I)
             (v_B1 :: Show a_az6B)
             (v1_B2 :: Show b_az6C)
             (v2_B3 :: Show c_az6D)
             (v3_B4 :: Show d_az6E)
             (v4_B5 :: Show e_az6F)
             (v5_B6 :: Show f12_az6G)
             (v6_B7 :: Show g_az6H)
             (v7_B8 :: Show h_az6I) ->
       GHC.Show.C:Show TYPE: (a_az6B, b_az6C, c_az6D, d_az6E, e_az6F,
                              f12_az6G, g_az6H, h_az6I)
                       GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                         @ a_az6B
                         @ b_az6C
                         @ c_az6D
                         @ d_az6E
                         @ e_az6F
                         @ f12_az6G
                         @ g_az6H
                         @ h_az6I
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                       GHC.Show.$fShow(,,,,,,,)_$cshow
                         @ a_az6B
                         @ b_az6C
                         @ c_az6D
                         @ d_az6E
                         @ e_az6F
                         @ f12_az6G
                         @ g_az6H
                         @ h_az6I
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                       GHC.Show.$fShow(,,,,,,,)_$cshowList
                         @ a_az6B
                         @ b_az6C
                         @ c_az6D
                         @ d_az6E
                         @ e_az6F
                         @ f12_az6G
                         @ g_az6H
                         @ h_az6I
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8]
GHC.Show.$fShow(,,,,,,,)
  = \ (@ a_azFs)
      (@ b_azFt)
      (@ c_azFu)
      (@ d_azFv)
      (@ e_azFw)
      (@ f12_azFx)
      (@ g_azFy)
      (@ h_azFz)
      ($dShow_azFA :: Show a_azFs)
      ($dShow1_azFB :: Show b_azFt)
      ($dShow2_azFC :: Show c_azFu)
      ($dShow3_azFD :: Show d_azFv)
      ($dShow4_azFE :: Show e_azFw)
      ($dShow5_azFF :: Show f12_azFx)
      ($dShow6_azFG :: Show g_azFy)
      ($dShow7_azFH :: Show h_azFz) ->
      GHC.Show.C:Show
        @ (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
           h_azFz)
        (GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
           @ a_azFs
           @ b_azFt
           @ c_azFu
           @ d_azFv
           @ e_azFw
           @ f12_azFx
           @ g_azFy
           @ h_azFz
           $dShow_azFA
           $dShow1_azFB
           $dShow2_azFC
           $dShow3_azFD
           $dShow4_azFE
           $dShow5_azFF
           $dShow6_azFG
           $dShow7_azFH)
        (GHC.Show.$fShow(,,,,,,,)_$cshow
           @ a_azFs
           @ b_azFt
           @ c_azFu
           @ d_azFv
           @ e_azFw
           @ f12_azFx
           @ g_azFy
           @ h_azFz
           $dShow_azFA
           $dShow1_azFB
           $dShow2_azFC
           $dShow3_azFD
           $dShow4_azFE
           $dShow5_azFF
           $dShow6_azFG
           $dShow7_azFH)
        (GHC.Show.$fShow(,,,,,,,)_$cshowList
           @ a_azFs
           @ b_azFt
           @ c_azFu
           @ d_azFv
           @ e_azFw
           @ f12_azFx
           @ g_azFy
           @ h_azFz
           $dShow_azFA
           $dShow1_azFB
           $dShow2_azFC
           $dShow3_azFD
           $dShow4_azFE
           $dShow5_azFF
           $dShow6_azFG
           $dShow7_azFH)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 62, types: 70, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,)_$cshowsPrec
  :: forall a b c d e f g.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g) =>
     Int -> (a, b, c, d, e, f, g) -> ShowS
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 30 0 20 0] 410 30}]
GHC.Show.$fShow(,,,,,,)_$cshowsPrec
  = \ (@ a_azGe)
      (@ b_azGf)
      (@ c_azGg)
      (@ d_azGh)
      (@ e_azGi)
      (@ f12_azGj)
      (@ g_azGk)
      ($dShow_azGl :: Show a_azGe)
      ($dShow1_azGm :: Show b_azGf)
      ($dShow2_azGn :: Show c_azGg)
      ($dShow3_azGo :: Show d_azGh)
      ($dShow4_azGp :: Show e_azGi)
      ($dShow5_azGq :: Show f12_azGj)
      ($dShow6_azGr :: Show g_azGk)
      _ [Occ=Dead]
      (ds1_dzUO
         :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk))
      (s_az76 :: String) ->
      case ds1_dzUO of
      { (a1_az6Z, b1_az70, c1_az71, d1_az72, e1_az73, f13_az74,
         g1_az75) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azGe $dShow_azGl GHC.Show.$fShow(,)1 a1_az6Z)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azGf $dShow1_azGm GHC.Show.$fShow(,)1 b1_az70)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azGg $dShow2_azGn GHC.Show.$fShow(,)1 c1_az71)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azGh $dShow3_azGo GHC.Show.$fShow(,)1 d1_az72)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azGi $dShow4_azGp GHC.Show.$fShow(,)1 e1_az73)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azGj $dShow5_azGq GHC.Show.$fShow(,)1 f13_az74)
                             (GHC.Types.:
                                @ ShowS
                                (showsPrec @ g_azGk $dShow6_azGr GHC.Show.$fShow(,)1 g1_az75)
                                (GHC.Types.[] @ ShowS))))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az76))
      }

-- RHS size: {terms: 26, types: 44, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,)_$cshow
  :: forall a b c d e f g.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g) =>
     (a, b, c, d, e, f, g) -> String
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=8,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azGe)
                 (@ b_azGf)
                 (@ c_azGg)
                 (@ d_azGh)
                 (@ e_azGi)
                 (@ f12_azGj)
                 (@ g_azGk)
                 ($dShow_azGl [Occ=Once] :: Show a_azGe)
                 ($dShow1_azGm [Occ=Once] :: Show b_azGf)
                 ($dShow2_azGn [Occ=Once] :: Show c_azGg)
                 ($dShow3_azGo [Occ=Once] :: Show d_azGh)
                 ($dShow4_azGp [Occ=Once] :: Show e_azGi)
                 ($dShow5_azGq [Occ=Once] :: Show f12_azGj)
                 ($dShow6_azGr [Occ=Once] :: Show g_azGk)
                 (x_az3n [Occ=Once]
                    :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)) ->
                 GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                   @ a_azGe
                   @ b_azGf
                   @ c_azGg
                   @ d_azGh
                   @ e_azGi
                   @ f12_azGj
                   @ g_azGk
                   $dShow_azGl
                   $dShow1_azGm
                   $dShow2_azGn
                   $dShow3_azGo
                   $dShow4_azGp
                   $dShow5_azGq
                   $dShow6_azGr
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,,)_$cshow
  = \ (@ a_azGe)
      (@ b_azGf)
      (@ c_azGg)
      (@ d_azGh)
      (@ e_azGi)
      (@ f12_azGj)
      (@ g_azGk)
      ($dShow_azGl :: Show a_azGe)
      ($dShow1_azGm :: Show b_azGf)
      ($dShow2_azGn :: Show c_azGg)
      ($dShow3_azGo :: Show d_azGh)
      ($dShow4_azGp :: Show e_azGi)
      ($dShow5_azGq :: Show f12_azGj)
      ($dShow6_azGr :: Show g_azGk)
      (x_az3n
         :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)) ->
      GHC.Show.$fShow(,,,,,,)_$cshowsPrec
        @ a_azGe
        @ b_azGf
        @ c_azGg
        @ d_azGh
        @ e_azGi
        @ f12_azGj
        @ g_azGk
        $dShow_azGl
        $dShow1_azGm
        $dShow2_azGn
        $dShow3_azGo
        $dShow4_azGp
        $dShow5_azGq
        $dShow6_azGr
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 28, types: 53, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,)_$cshowList
  :: forall a b c d e f g.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g) =>
     [(a, b, c, d, e, f, g)] -> ShowS
[GblId,
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azGe)
                 (@ b_azGf)
                 (@ c_azGg)
                 (@ d_azGh)
                 (@ e_azGi)
                 (@ f12_azGj)
                 (@ g_azGk)
                 ($dShow_azGl [Occ=Once] :: Show a_azGe)
                 ($dShow1_azGm [Occ=Once] :: Show b_azGf)
                 ($dShow2_azGn [Occ=Once] :: Show c_azGg)
                 ($dShow3_azGo [Occ=Once] :: Show d_azGh)
                 ($dShow4_azGp [Occ=Once] :: Show e_azGi)
                 ($dShow5_azGq [Occ=Once] :: Show f12_azGj)
                 ($dShow6_azGr [Occ=Once] :: Show g_azGk)
                 (ls_az3o [Occ=Once]
                    :: [(a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
                   (GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      @ a_azGe
                      @ b_azGf
                      @ c_azGg
                      @ d_azGh
                      @ e_azGi
                      @ f12_azGj
                      @ g_azGk
                      $dShow_azGl
                      $dShow1_azGm
                      $dShow2_azGn
                      $dShow3_azGo
                      $dShow4_azGp
                      $dShow5_azGq
                      $dShow6_azGr
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,,)_$cshowList
  = \ (@ a_azGe)
      (@ b_azGf)
      (@ c_azGg)
      (@ d_azGh)
      (@ e_azGi)
      (@ f12_azGj)
      (@ g_azGk)
      ($dShow_azGl :: Show a_azGe)
      ($dShow1_azGm :: Show b_azGf)
      ($dShow2_azGn :: Show c_azGg)
      ($dShow3_azGo :: Show d_azGh)
      ($dShow4_azGp :: Show e_azGi)
      ($dShow5_azGq :: Show f12_azGj)
      ($dShow6_azGr :: Show g_azGk)
      (ls_az3o
         :: [(a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)])
      (s_az3p :: String) ->
      showList__
        @ (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
        (GHC.Show.$fShow(,,,,,,)_$cshowsPrec
           @ a_azGe
           @ b_azGf
           @ c_azGg
           @ d_azGh
           @ e_azGi
           @ f12_azGj
           @ g_azGk
           $dShow_azGl
           $dShow1_azGm
           $dShow2_azGn
           $dShow3_azGo
           $dShow4_azGp
           $dShow5_azGq
           $dShow6_azGr
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 39, types: 57, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (Show a, Show b, Show c, Show d, Show e, Show f, Show g) =>
     Show (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az6S)
             (@ b_az6T)
             (@ c_az6U)
             (@ d_az6V)
             (@ e_az6W)
             (@ f12_az6X)
             (@ g_az6Y)
             (v_B1 :: Show a_az6S)
             (v1_B2 :: Show b_az6T)
             (v2_B3 :: Show c_az6U)
             (v3_B4 :: Show d_az6V)
             (v4_B5 :: Show e_az6W)
             (v5_B6 :: Show f12_az6X)
             (v6_B7 :: Show g_az6Y) ->
       GHC.Show.C:Show TYPE: (a_az6S, b_az6T, c_az6U, d_az6V, e_az6W,
                              f12_az6X, g_az6Y)
                       GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                         @ a_az6S
                         @ b_az6T
                         @ c_az6U
                         @ d_az6V
                         @ e_az6W
                         @ f12_az6X
                         @ g_az6Y
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                       GHC.Show.$fShow(,,,,,,)_$cshow
                         @ a_az6S
                         @ b_az6T
                         @ c_az6U
                         @ d_az6V
                         @ e_az6W
                         @ f12_az6X
                         @ g_az6Y
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                       GHC.Show.$fShow(,,,,,,)_$cshowList
                         @ a_az6S
                         @ b_az6T
                         @ c_az6U
                         @ d_az6V
                         @ e_az6W
                         @ f12_az6X
                         @ g_az6Y
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7]
GHC.Show.$fShow(,,,,,,)
  = \ (@ a_azGe)
      (@ b_azGf)
      (@ c_azGg)
      (@ d_azGh)
      (@ e_azGi)
      (@ f12_azGj)
      (@ g_azGk)
      ($dShow_azGl :: Show a_azGe)
      ($dShow1_azGm :: Show b_azGf)
      ($dShow2_azGn :: Show c_azGg)
      ($dShow3_azGo :: Show d_azGh)
      ($dShow4_azGp :: Show e_azGi)
      ($dShow5_azGq :: Show f12_azGj)
      ($dShow6_azGr :: Show g_azGk) ->
      GHC.Show.C:Show
        @ (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
        (GHC.Show.$fShow(,,,,,,)_$cshowsPrec
           @ a_azGe
           @ b_azGf
           @ c_azGg
           @ d_azGh
           @ e_azGi
           @ f12_azGj
           @ g_azGk
           $dShow_azGl
           $dShow1_azGm
           $dShow2_azGn
           $dShow3_azGo
           $dShow4_azGp
           $dShow5_azGq
           $dShow6_azGr)
        (GHC.Show.$fShow(,,,,,,)_$cshow
           @ a_azGe
           @ b_azGf
           @ c_azGg
           @ d_azGh
           @ e_azGi
           @ f12_azGj
           @ g_azGk
           $dShow_azGl
           $dShow1_azGm
           $dShow2_azGn
           $dShow3_azGo
           $dShow4_azGp
           $dShow5_azGq
           $dShow6_azGr)
        (GHC.Show.$fShow(,,,,,,)_$cshowList
           @ a_azGe
           @ b_azGf
           @ c_azGg
           @ d_azGh
           @ e_azGi
           @ f12_azGj
           @ g_azGk
           $dShow_azGl
           $dShow1_azGm
           $dShow2_azGn
           $dShow3_azGo
           $dShow4_azGp
           $dShow5_azGq
           $dShow6_azGr)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 55, types: 61, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,)_$cshowsPrec
  :: forall a b c d e f.
     (Show a, Show b, Show c, Show d, Show e, Show f) =>
     Int -> (a, b, c, d, e, f) -> ShowS
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 30 0 20 0] 360 30}]
GHC.Show.$fShow(,,,,,)_$cshowsPrec
  = \ (@ a_azGW)
      (@ b_azGX)
      (@ c_azGY)
      (@ d_azGZ)
      (@ e_azH0)
      (@ f12_azH1)
      ($dShow_azH2 :: Show a_azGW)
      ($dShow1_azH3 :: Show b_azGX)
      ($dShow2_azH4 :: Show c_azGY)
      ($dShow3_azH5 :: Show d_azGZ)
      ($dShow4_azH6 :: Show e_azH0)
      ($dShow5_azH7 :: Show f12_azH1)
      _ [Occ=Dead]
      (ds1_dzV4 :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1))
      (s_az7j :: String) ->
      case ds1_dzV4 of
      { (a1_az7d, b1_az7e, c1_az7f, d1_az7g, e1_az7h, f13_az7i) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azGW $dShow_azH2 GHC.Show.$fShow(,)1 a1_az7d)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azGX $dShow1_azH3 GHC.Show.$fShow(,)1 b1_az7e)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azGY $dShow2_azH4 GHC.Show.$fShow(,)1 c1_az7f)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azGZ $dShow3_azH5 GHC.Show.$fShow(,)1 d1_az7g)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azH0 $dShow4_azH6 GHC.Show.$fShow(,)1 e1_az7h)
                          (GHC.Types.:
                             @ ShowS
                             (showsPrec @ f12_azH1 $dShow5_azH7 GHC.Show.$fShow(,)1 f13_az7i)
                             (GHC.Types.[] @ ShowS)))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az7j))
      }

-- RHS size: {terms: 23, types: 38, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,)_$cshow
  :: forall a b c d e f.
     (Show a, Show b, Show c, Show d, Show e, Show f) =>
     (a, b, c, d, e, f) -> String
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=7,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azGW)
                 (@ b_azGX)
                 (@ c_azGY)
                 (@ d_azGZ)
                 (@ e_azH0)
                 (@ f12_azH1)
                 ($dShow_azH2 [Occ=Once] :: Show a_azGW)
                 ($dShow1_azH3 [Occ=Once] :: Show b_azGX)
                 ($dShow2_azH4 [Occ=Once] :: Show c_azGY)
                 ($dShow3_azH5 [Occ=Once] :: Show d_azGZ)
                 ($dShow4_azH6 [Occ=Once] :: Show e_azH0)
                 ($dShow5_azH7 [Occ=Once] :: Show f12_azH1)
                 (x_az3n [Occ=Once]
                    :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)) ->
                 GHC.Show.$fShow(,,,,,)_$cshowsPrec
                   @ a_azGW
                   @ b_azGX
                   @ c_azGY
                   @ d_azGZ
                   @ e_azH0
                   @ f12_azH1
                   $dShow_azH2
                   $dShow1_azH3
                   $dShow2_azH4
                   $dShow3_azH5
                   $dShow4_azH6
                   $dShow5_azH7
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,,)_$cshow
  = \ (@ a_azGW)
      (@ b_azGX)
      (@ c_azGY)
      (@ d_azGZ)
      (@ e_azH0)
      (@ f12_azH1)
      ($dShow_azH2 :: Show a_azGW)
      ($dShow1_azH3 :: Show b_azGX)
      ($dShow2_azH4 :: Show c_azGY)
      ($dShow3_azH5 :: Show d_azGZ)
      ($dShow4_azH6 :: Show e_azH0)
      ($dShow5_azH7 :: Show f12_azH1)
      (x_az3n :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)) ->
      GHC.Show.$fShow(,,,,,)_$cshowsPrec
        @ a_azGW
        @ b_azGX
        @ c_azGY
        @ d_azGZ
        @ e_azH0
        @ f12_azH1
        $dShow_azH2
        $dShow1_azH3
        $dShow2_azH4
        $dShow3_azH5
        $dShow4_azH6
        $dShow5_azH7
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 25, types: 46, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,)_$cshowList
  :: forall a b c d e f.
     (Show a, Show b, Show c, Show d, Show e, Show f) =>
     [(a, b, c, d, e, f)] -> ShowS
[GblId,
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=8,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azGW)
                 (@ b_azGX)
                 (@ c_azGY)
                 (@ d_azGZ)
                 (@ e_azH0)
                 (@ f12_azH1)
                 ($dShow_azH2 [Occ=Once] :: Show a_azGW)
                 ($dShow1_azH3 [Occ=Once] :: Show b_azGX)
                 ($dShow2_azH4 [Occ=Once] :: Show c_azGY)
                 ($dShow3_azH5 [Occ=Once] :: Show d_azGZ)
                 ($dShow4_azH6 [Occ=Once] :: Show e_azH0)
                 ($dShow5_azH7 [Occ=Once] :: Show f12_azH1)
                 (ls_az3o [Occ=Once]
                    :: [(a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
                   (GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      @ a_azGW
                      @ b_azGX
                      @ c_azGY
                      @ d_azGZ
                      @ e_azH0
                      @ f12_azH1
                      $dShow_azH2
                      $dShow1_azH3
                      $dShow2_azH4
                      $dShow3_azH5
                      $dShow4_azH6
                      $dShow5_azH7
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,,)_$cshowList
  = \ (@ a_azGW)
      (@ b_azGX)
      (@ c_azGY)
      (@ d_azGZ)
      (@ e_azH0)
      (@ f12_azH1)
      ($dShow_azH2 :: Show a_azGW)
      ($dShow1_azH3 :: Show b_azGX)
      ($dShow2_azH4 :: Show c_azGY)
      ($dShow3_azH5 :: Show d_azGZ)
      ($dShow4_azH6 :: Show e_azH0)
      ($dShow5_azH7 :: Show f12_azH1)
      (ls_az3o :: [(a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)])
      (s_az3p :: String) ->
      showList__
        @ (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
        (GHC.Show.$fShow(,,,,,)_$cshowsPrec
           @ a_azGW
           @ b_azGX
           @ c_azGY
           @ d_azGZ
           @ e_azH0
           @ f12_azH1
           $dShow_azH2
           $dShow1_azH3
           $dShow2_azH4
           $dShow3_azH5
           $dShow4_azH6
           $dShow5_azH7
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 34, types: 49, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (Show a, Show b, Show c, Show d, Show e, Show f) =>
     Show (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az77)
             (@ b_az78)
             (@ c_az79)
             (@ d_az7a)
             (@ e_az7b)
             (@ f12_az7c)
             (v_B1 :: Show a_az77)
             (v1_B2 :: Show b_az78)
             (v2_B3 :: Show c_az79)
             (v3_B4 :: Show d_az7a)
             (v4_B5 :: Show e_az7b)
             (v5_B6 :: Show f12_az7c) ->
       GHC.Show.C:Show TYPE: (a_az77, b_az78, c_az79, d_az7a, e_az7b,
                              f12_az7c)
                       GHC.Show.$fShow(,,,,,)_$cshowsPrec
                         @ a_az77
                         @ b_az78
                         @ c_az79
                         @ d_az7a
                         @ e_az7b
                         @ f12_az7c
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                       GHC.Show.$fShow(,,,,,)_$cshow
                         @ a_az77
                         @ b_az78
                         @ c_az79
                         @ d_az7a
                         @ e_az7b
                         @ f12_az7c
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                       GHC.Show.$fShow(,,,,,)_$cshowList
                         @ a_az77
                         @ b_az78
                         @ c_az79
                         @ d_az7a
                         @ e_az7b
                         @ f12_az7c
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6]
GHC.Show.$fShow(,,,,,)
  = \ (@ a_azGW)
      (@ b_azGX)
      (@ c_azGY)
      (@ d_azGZ)
      (@ e_azH0)
      (@ f12_azH1)
      ($dShow_azH2 :: Show a_azGW)
      ($dShow1_azH3 :: Show b_azGX)
      ($dShow2_azH4 :: Show c_azGY)
      ($dShow3_azH5 :: Show d_azGZ)
      ($dShow4_azH6 :: Show e_azH0)
      ($dShow5_azH7 :: Show f12_azH1) ->
      GHC.Show.C:Show
        @ (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
        (GHC.Show.$fShow(,,,,,)_$cshowsPrec
           @ a_azGW
           @ b_azGX
           @ c_azGY
           @ d_azGZ
           @ e_azH0
           @ f12_azH1
           $dShow_azH2
           $dShow1_azH3
           $dShow2_azH4
           $dShow3_azH5
           $dShow4_azH6
           $dShow5_azH7)
        (GHC.Show.$fShow(,,,,,)_$cshow
           @ a_azGW
           @ b_azGX
           @ c_azGY
           @ d_azGZ
           @ e_azH0
           @ f12_azH1
           $dShow_azH2
           $dShow1_azH3
           $dShow2_azH4
           $dShow3_azH5
           $dShow4_azH6
           $dShow5_azH7)
        (GHC.Show.$fShow(,,,,,)_$cshowList
           @ a_azGW
           @ b_azGX
           @ c_azGY
           @ d_azGZ
           @ e_azH0
           @ f12_azH1
           $dShow_azH2
           $dShow1_azH3
           $dShow2_azH4
           $dShow3_azH5
           $dShow4_azH6
           $dShow5_azH7)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 48, types: 52, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,)_$cshowsPrec
  :: forall a b c d e.
     (Show a, Show b, Show c, Show d, Show e) =>
     Int -> (a, b, c, d, e) -> ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 30 0 20 0] 310 30}]
GHC.Show.$fShow(,,,,)_$cshowsPrec
  = \ (@ a_azHA)
      (@ b_azHB)
      (@ c_azHC)
      (@ d_azHD)
      (@ e_azHE)
      ($dShow_azHF :: Show a_azHA)
      ($dShow1_azHG :: Show b_azHB)
      ($dShow2_azHH :: Show c_azHC)
      ($dShow3_azHI :: Show d_azHD)
      ($dShow4_azHJ :: Show e_azHE)
      _ [Occ=Dead]
      (ds1_dzVj :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE))
      (s_az7u :: String) ->
      case ds1_dzVj of { (a1_az7p, b1_az7q, c1_az7r, d1_az7s, e1_az7t) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azHA $dShow_azHF GHC.Show.$fShow(,)1 a1_az7p)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azHB $dShow1_azHG GHC.Show.$fShow(,)1 b1_az7q)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_azHC $dShow2_azHH GHC.Show.$fShow(,)1 c1_az7r)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_azHD $dShow3_azHI GHC.Show.$fShow(,)1 d1_az7s)
                       (GHC.Types.:
                          @ ShowS
                          (showsPrec @ e_azHE $dShow4_azHJ GHC.Show.$fShow(,)1 e1_az7t)
                          (GHC.Types.[] @ ShowS))))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 s_az7u))
      }

-- RHS size: {terms: 20, types: 32, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,)_$cshow
  :: forall a b c d e.
     (Show a, Show b, Show c, Show d, Show e) =>
     (a, b, c, d, e) -> String
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azHA)
                 (@ b_azHB)
                 (@ c_azHC)
                 (@ d_azHD)
                 (@ e_azHE)
                 ($dShow_azHF [Occ=Once] :: Show a_azHA)
                 ($dShow1_azHG [Occ=Once] :: Show b_azHB)
                 ($dShow2_azHH [Occ=Once] :: Show c_azHC)
                 ($dShow3_azHI [Occ=Once] :: Show d_azHD)
                 ($dShow4_azHJ [Occ=Once] :: Show e_azHE)
                 (x_az3n [Occ=Once] :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)) ->
                 GHC.Show.$fShow(,,,,)_$cshowsPrec
                   @ a_azHA
                   @ b_azHB
                   @ c_azHC
                   @ d_azHD
                   @ e_azHE
                   $dShow_azHF
                   $dShow1_azHG
                   $dShow2_azHH
                   $dShow3_azHI
                   $dShow4_azHJ
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,,)_$cshow
  = \ (@ a_azHA)
      (@ b_azHB)
      (@ c_azHC)
      (@ d_azHD)
      (@ e_azHE)
      ($dShow_azHF :: Show a_azHA)
      ($dShow1_azHG :: Show b_azHB)
      ($dShow2_azHH :: Show c_azHC)
      ($dShow3_azHI :: Show d_azHD)
      ($dShow4_azHJ :: Show e_azHE)
      (x_az3n :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)) ->
      GHC.Show.$fShow(,,,,)_$cshowsPrec
        @ a_azHA
        @ b_azHB
        @ c_azHC
        @ d_azHD
        @ e_azHE
        $dShow_azHF
        $dShow1_azHG
        $dShow2_azHH
        $dShow3_azHI
        $dShow4_azHJ
        GHC.Show.$fShow(,)1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 22, types: 39, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,)_$cshowList
  :: forall a b c d e.
     (Show a, Show b, Show c, Show d, Show e) =>
     [(a, b, c, d, e)] -> ShowS
[GblId,
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=7,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azHA)
                 (@ b_azHB)
                 (@ c_azHC)
                 (@ d_azHD)
                 (@ e_azHE)
                 ($dShow_azHF [Occ=Once] :: Show a_azHA)
                 ($dShow1_azHG [Occ=Once] :: Show b_azHB)
                 ($dShow2_azHH [Occ=Once] :: Show c_azHC)
                 ($dShow3_azHI [Occ=Once] :: Show d_azHD)
                 ($dShow4_azHJ [Occ=Once] :: Show e_azHE)
                 (ls_az3o [Occ=Once] :: [(a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)
                   (GHC.Show.$fShow(,,,,)_$cshowsPrec
                      @ a_azHA
                      @ b_azHB
                      @ c_azHC
                      @ d_azHD
                      @ e_azHE
                      $dShow_azHF
                      $dShow1_azHG
                      $dShow2_azHH
                      $dShow3_azHI
                      $dShow4_azHJ
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,,)_$cshowList
  = \ (@ a_azHA)
      (@ b_azHB)
      (@ c_azHC)
      (@ d_azHD)
      (@ e_azHE)
      ($dShow_azHF :: Show a_azHA)
      ($dShow1_azHG :: Show b_azHB)
      ($dShow2_azHH :: Show c_azHC)
      ($dShow3_azHI :: Show d_azHD)
      ($dShow4_azHJ :: Show e_azHE)
      (ls_az3o :: [(a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)])
      (s_az3p :: String) ->
      showList__
        @ (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)
        (GHC.Show.$fShow(,,,,)_$cshowsPrec
           @ a_azHA
           @ b_azHB
           @ c_azHC
           @ d_azHD
           @ e_azHE
           $dShow_azHF
           $dShow1_azHG
           $dShow2_azHH
           $dShow3_azHI
           $dShow4_azHJ
           GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 29, types: 41, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (Show a, Show b, Show c, Show d, Show e) =>
     Show (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az7k)
             (@ b_az7l)
             (@ c_az7m)
             (@ d_az7n)
             (@ e_az7o)
             (v_B1 :: Show a_az7k)
             (v1_B2 :: Show b_az7l)
             (v2_B3 :: Show c_az7m)
             (v3_B4 :: Show d_az7n)
             (v4_B5 :: Show e_az7o) ->
       GHC.Show.C:Show TYPE: (a_az7k, b_az7l, c_az7m, d_az7n, e_az7o)
                       GHC.Show.$fShow(,,,,)_$cshowsPrec
                         @ a_az7k
                         @ b_az7l
                         @ c_az7m
                         @ d_az7n
                         @ e_az7o
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                       GHC.Show.$fShow(,,,,)_$cshow
                         @ a_az7k
                         @ b_az7l
                         @ c_az7m
                         @ d_az7n
                         @ e_az7o
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5
                       GHC.Show.$fShow(,,,,)_$cshowList
                         @ a_az7k
                         @ b_az7l
                         @ c_az7m
                         @ d_az7n
                         @ e_az7o
                         v_B1
                         v1_B2
                         v2_B3
                         v3_B4
                         v4_B5]
GHC.Show.$fShow(,,,,)
  = \ (@ a_azHA)
      (@ b_azHB)
      (@ c_azHC)
      (@ d_azHD)
      (@ e_azHE)
      ($dShow_azHF :: Show a_azHA)
      ($dShow1_azHG :: Show b_azHB)
      ($dShow2_azHH :: Show c_azHC)
      ($dShow3_azHI :: Show d_azHD)
      ($dShow4_azHJ :: Show e_azHE) ->
      GHC.Show.C:Show
        @ (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)
        (GHC.Show.$fShow(,,,,)_$cshowsPrec
           @ a_azHA
           @ b_azHB
           @ c_azHC
           @ d_azHD
           @ e_azHE
           $dShow_azHF
           $dShow1_azHG
           $dShow2_azHH
           $dShow3_azHI
           $dShow4_azHJ)
        (GHC.Show.$fShow(,,,,)_$cshow
           @ a_azHA
           @ b_azHB
           @ c_azHC
           @ d_azHD
           @ e_azHE
           $dShow_azHF
           $dShow1_azHG
           $dShow2_azHH
           $dShow3_azHI
           $dShow4_azHJ)
        (GHC.Show.$fShow(,,,,)_$cshowList
           @ a_azHA
           @ b_azHB
           @ c_azHC
           @ d_azHD
           @ e_azHE
           $dShow_azHF
           $dShow1_azHG
           $dShow2_azHH
           $dShow3_azHI
           $dShow4_azHJ)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 40, types: 36, coercions: 0, joins: 0/0}
GHC.Show.$w$cshowsPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (Show a, Show b, Show c, Show d) =>
     a -> b -> c -> d -> String -> (# Char, [Char] #)
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 30 0 0 0 0 0] 240 30}]
GHC.Show.$w$cshowsPrec2
  = \ (@ a_sBd4)
      (@ b_sBd5)
      (@ c_sBd6)
      (@ d_sBd7)
      (w_sBd8 :: Show a_sBd4)
      (w1_sBd9 :: Show b_sBd5)
      (w2_sBda :: Show c_sBd6)
      (w3_sBdb :: Show d_sBd7)
      (ww_sBdh :: a_sBd4)
      (ww1_sBdi :: b_sBd5)
      (ww2_sBdj :: c_sBd6)
      (ww3_sBdk :: d_sBd7)
      (w4_sBde :: String) ->
      (# GHC.Show.$fShow(,)4,
         GHC.Show.$fShow(,,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_sBd4 w_sBd8 GHC.Show.$fShow(,)1 ww_sBdh)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_sBd5 w1_sBd9 GHC.Show.$fShow(,)1 ww1_sBdi)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_sBd6 w2_sBda GHC.Show.$fShow(,)1 ww2_sBdj)
                    (GHC.Types.:
                       @ ShowS
                       (showsPrec @ d_sBd7 w3_sBdb GHC.Show.$fShow(,)1 ww3_sBdk)
                       (GHC.Types.[] @ ShowS)))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w4_sBde) #)

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (Show a, Show b, Show c, Show d) =>
     Int -> (a, b, c, d) -> ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U)><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=7,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_sBd4)
                 (@ b_sBd5)
                 (@ c_sBd6)
                 (@ d_sBd7)
                 (w_sBd8 [Occ=Once] :: Show a_sBd4)
                 (w1_sBd9 [Occ=Once] :: Show b_sBd5)
                 (w2_sBda [Occ=Once] :: Show c_sBd6)
                 (w3_sBdb [Occ=Once] :: Show d_sBd7)
                 _ [Occ=Dead]
                 (w5_sBdd [Occ=Once!] :: (a_sBd4, b_sBd5, c_sBd6, d_sBd7))
                 (w6_sBde [Occ=Once] :: String) ->
                 case w5_sBdd of
                 { (ww1_sBdh [Occ=Once], ww2_sBdi [Occ=Once], ww3_sBdj [Occ=Once],
                    ww4_sBdk [Occ=Once]) ->
                 case GHC.Show.$w$cshowsPrec2
                        @ a_sBd4
                        @ b_sBd5
                        @ c_sBd6
                        @ d_sBd7
                        w_sBd8
                        w1_sBd9
                        w2_sBda
                        w3_sBdb
                        ww1_sBdh
                        ww2_sBdi
                        ww3_sBdj
                        ww4_sBdk
                        w6_sBde
                 of
                 { (# ww6_sBhc [Occ=Once], ww7_sBhd [Occ=Once] #) ->
                 GHC.Types.: @ Char ww6_sBhc ww7_sBhd
                 }
                 }}]
GHC.Show.$fShow(,,,)_$cshowsPrec
  = \ (@ a_sBd4)
      (@ b_sBd5)
      (@ c_sBd6)
      (@ d_sBd7)
      (w_sBd8 :: Show a_sBd4)
      (w1_sBd9 :: Show b_sBd5)
      (w2_sBda :: Show c_sBd6)
      (w3_sBdb :: Show d_sBd7)
      _ [Occ=Dead]
      (w5_sBdd :: (a_sBd4, b_sBd5, c_sBd6, d_sBd7))
      (w6_sBde :: String) ->
      case w5_sBdd of { (ww1_sBdh, ww2_sBdi, ww3_sBdj, ww4_sBdk) ->
      case GHC.Show.$w$cshowsPrec2
             @ a_sBd4
             @ b_sBd5
             @ c_sBd6
             @ d_sBd7
             w_sBd8
             w1_sBd9
             w2_sBda
             w3_sBdb
             ww1_sBdh
             ww2_sBdi
             ww3_sBdj
             ww4_sBdk
             w6_sBde
      of
      { (# ww6_sBhc, ww7_sBhd #) ->
      GHC.Types.: @ Char ww6_sBhc ww7_sBhd
      }
      }

-- RHS size: {terms: 27, types: 45, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,)_$cshow
  :: forall a b c d.
     (Show a, Show b, Show c, Show d) =>
     (a, b, c, d) -> String
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azIa)
                 (@ b_azIb)
                 (@ c_azIc)
                 (@ d_azId)
                 ($dShow_azIe [Occ=Once] :: Show a_azIa)
                 ($dShow1_azIf [Occ=Once] :: Show b_azIb)
                 ($dShow2_azIg [Occ=Once] :: Show c_azIc)
                 ($dShow3_azIh [Occ=Once] :: Show d_azId)
                 (x_az3n [Occ=Once] :: (a_azIa, b_azIb, c_azIc, d_azId)) ->
                 GHC.Show.$fShow(,,,)_$cshowsPrec
                   @ a_azIa
                   @ b_azIb
                   @ c_azIc
                   @ d_azId
                   $dShow_azIe
                   $dShow1_azIf
                   $dShow2_azIg
                   $dShow3_azIh
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,,)_$cshow
  = \ (@ a_azIa)
      (@ b_azIb)
      (@ c_azIc)
      (@ d_azId)
      ($dShow_azIe :: Show a_azIa)
      ($dShow1_azIf :: Show b_azIb)
      ($dShow2_azIg :: Show c_azIc)
      ($dShow3_azIh :: Show d_azId)
      (x_az3n :: (a_azIa, b_azIb, c_azIc, d_azId)) ->
      case x_az3n of { (ww1_sBdh, ww2_sBdi, ww3_sBdj, ww4_sBdk) ->
      case GHC.Show.$w$cshowsPrec2
             @ a_azIa
             @ b_azIb
             @ c_azIc
             @ d_azId
             $dShow_azIe
             $dShow1_azIf
             $dShow2_azIg
             $dShow3_azIh
             ww1_sBdh
             ww2_sBdi
             ww3_sBdj
             ww4_sBdk
             (GHC.Types.[] @ Char)
      of
      { (# ww6_sBhc, ww7_sBhd #) ->
      GHC.Types.: @ Char ww6_sBhc ww7_sBhd
      }
      }

-- RHS size: {terms: 33, types: 57, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,)_$cshowList
  :: forall a b c d.
     (Show a, Show b, Show c, Show d) =>
     [(a, b, c, d)] -> ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azIa)
                 (@ b_azIb)
                 (@ c_azIc)
                 (@ d_azId)
                 ($dShow_azIe [Occ=Once] :: Show a_azIa)
                 ($dShow1_azIf [Occ=Once] :: Show b_azIb)
                 ($dShow2_azIg [Occ=Once] :: Show c_azIc)
                 ($dShow3_azIh [Occ=Once] :: Show d_azId)
                 (ls_az3o [Occ=Once] :: [(a_azIa, b_azIb, c_azIc, d_azId)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azIa, b_azIb, c_azIc, d_azId)
                   (GHC.Show.$fShow(,,,)_$cshowsPrec
                      @ a_azIa
                      @ b_azIb
                      @ c_azIc
                      @ d_azId
                      $dShow_azIe
                      $dShow1_azIf
                      $dShow2_azIg
                      $dShow3_azIh
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,,)_$cshowList
  = \ (@ a_azIa)
      (@ b_azIb)
      (@ c_azIc)
      (@ d_azId)
      ($dShow_azIe :: Show a_azIa)
      ($dShow1_azIf :: Show b_azIb)
      ($dShow2_azIg :: Show c_azIc)
      ($dShow3_azIh :: Show d_azId)
      (ls_az3o :: [(a_azIa, b_azIb, c_azIc, d_azId)])
      (s_az3p :: String) ->
      showList__
        @ (a_azIa, b_azIb, c_azIc, d_azId)
        (\ (w_sBdd :: (a_azIa, b_azIb, c_azIc, d_azId))
           (w1_sBde [OS=OneShot] :: String) ->
           case w_sBdd of { (ww1_sBdh, ww2_sBdi, ww3_sBdj, ww4_sBdk) ->
           case GHC.Show.$w$cshowsPrec2
                  @ a_azIa
                  @ b_azIb
                  @ c_azIc
                  @ d_azId
                  $dShow_azIe
                  $dShow1_azIf
                  $dShow2_azIg
                  $dShow3_azIh
                  ww1_sBdh
                  ww2_sBdi
                  ww3_sBdj
                  ww4_sBdk
                  w1_sBde
           of
           { (# ww6_sBhc, ww7_sBhd #) ->
           GHC.Types.: @ Char ww6_sBhc ww7_sBhd
           }
           })
        ls_az3o
        s_az3p

-- RHS size: {terms: 24, types: 33, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (Show a, Show b, Show c, Show d) =>
     Show (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az7v)
             (@ b_az7w)
             (@ c_az7x)
             (@ d_az7y)
             (v_B1 :: Show a_az7v)
             (v1_B2 :: Show b_az7w)
             (v2_B3 :: Show c_az7x)
             (v3_B4 :: Show d_az7y) ->
       GHC.Show.C:Show TYPE: (a_az7v, b_az7w, c_az7x, d_az7y)
                       GHC.Show.$fShow(,,,)_$cshowsPrec
                         @ a_az7v @ b_az7w @ c_az7x @ d_az7y v_B1 v1_B2 v2_B3 v3_B4
                       GHC.Show.$fShow(,,,)_$cshow
                         @ a_az7v @ b_az7w @ c_az7x @ d_az7y v_B1 v1_B2 v2_B3 v3_B4
                       GHC.Show.$fShow(,,,)_$cshowList
                         @ a_az7v @ b_az7w @ c_az7x @ d_az7y v_B1 v1_B2 v2_B3 v3_B4]
GHC.Show.$fShow(,,,)
  = \ (@ a_azIa)
      (@ b_azIb)
      (@ c_azIc)
      (@ d_azId)
      ($dShow_azIe :: Show a_azIa)
      ($dShow1_azIf :: Show b_azIb)
      ($dShow2_azIg :: Show c_azIc)
      ($dShow3_azIh :: Show d_azId) ->
      GHC.Show.C:Show
        @ (a_azIa, b_azIb, c_azIc, d_azId)
        (GHC.Show.$fShow(,,,)_$cshowsPrec
           @ a_azIa
           @ b_azIb
           @ c_azIc
           @ d_azId
           $dShow_azIe
           $dShow1_azIf
           $dShow2_azIg
           $dShow3_azIh)
        (GHC.Show.$fShow(,,,)_$cshow
           @ a_azIa
           @ b_azIb
           @ c_azIc
           @ d_azId
           $dShow_azIe
           $dShow1_azIf
           $dShow2_azIg
           $dShow3_azIh)
        (GHC.Show.$fShow(,,,)_$cshowList
           @ a_azIa
           @ b_azIb
           @ c_azIc
           @ d_azId
           $dShow_azIe
           $dShow1_azIf
           $dShow2_azIg
           $dShow3_azIh)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 32, types: 29, coercions: 0, joins: 0/0}
GHC.Show.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (Show a, Show b, Show c) =>
     a -> b -> c -> String -> (# Char, [Char] #)
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 30 0 0 0 0] 190 30}]
GHC.Show.$w$cshowsPrec1
  = \ (@ a_sBds)
      (@ b_sBdt)
      (@ c_sBdu)
      (w_sBdv :: Show a_sBds)
      (w1_sBdw :: Show b_sBdt)
      (w2_sBdx :: Show c_sBdu)
      (ww_sBdD :: a_sBds)
      (ww1_sBdE :: b_sBdt)
      (ww2_sBdF :: c_sBdu)
      (w3_sBdA :: String) ->
      (# GHC.Show.$fShow(,)4,
         GHC.Show.$fShow(,,)_go2
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_sBds w_sBdv GHC.Show.$fShow(,)1 ww_sBdD)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_sBdt w1_sBdw GHC.Show.$fShow(,)1 ww1_sBdE)
                 (GHC.Types.:
                    @ ShowS
                    (showsPrec @ c_sBdu w2_sBdx GHC.Show.$fShow(,)1 ww2_sBdF)
                    (GHC.Types.[] @ ShowS))))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w3_sBdA) #)

-- RHS size: {terms: 25, types: 38, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (Show a, Show b, Show c) =>
     Int -> (a, b, c) -> ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U)><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_sBds)
                 (@ b_sBdt)
                 (@ c_sBdu)
                 (w_sBdv [Occ=Once] :: Show a_sBds)
                 (w1_sBdw [Occ=Once] :: Show b_sBdt)
                 (w2_sBdx [Occ=Once] :: Show c_sBdu)
                 _ [Occ=Dead]
                 (w4_sBdz [Occ=Once!] :: (a_sBds, b_sBdt, c_sBdu))
                 (w5_sBdA [Occ=Once] :: String) ->
                 case w4_sBdz of
                 { (ww1_sBdD [Occ=Once], ww2_sBdE [Occ=Once],
                    ww3_sBdF [Occ=Once]) ->
                 case GHC.Show.$w$cshowsPrec1
                        @ a_sBds
                        @ b_sBdt
                        @ c_sBdu
                        w_sBdv
                        w1_sBdw
                        w2_sBdx
                        ww1_sBdD
                        ww2_sBdE
                        ww3_sBdF
                        w5_sBdA
                 of
                 { (# ww5_sBhf [Occ=Once], ww6_sBhg [Occ=Once] #) ->
                 GHC.Types.: @ Char ww5_sBhf ww6_sBhg
                 }
                 }}]
GHC.Show.$fShow(,,)_$cshowsPrec
  = \ (@ a_sBds)
      (@ b_sBdt)
      (@ c_sBdu)
      (w_sBdv :: Show a_sBds)
      (w1_sBdw :: Show b_sBdt)
      (w2_sBdx :: Show c_sBdu)
      _ [Occ=Dead]
      (w4_sBdz :: (a_sBds, b_sBdt, c_sBdu))
      (w5_sBdA :: String) ->
      case w4_sBdz of { (ww1_sBdD, ww2_sBdE, ww3_sBdF) ->
      case GHC.Show.$w$cshowsPrec1
             @ a_sBds
             @ b_sBdt
             @ c_sBdu
             w_sBdv
             w1_sBdw
             w2_sBdx
             ww1_sBdD
             ww2_sBdE
             ww3_sBdF
             w5_sBdA
      of
      { (# ww5_sBhf, ww6_sBhg #) ->
      GHC.Types.: @ Char ww5_sBhf ww6_sBhg
      }
      }

-- RHS size: {terms: 23, types: 37, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,)_$cshow
  :: forall a b c. (Show a, Show b, Show c) => (a, b, c) -> String
[GblId,
 Arity=4,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azIG)
                 (@ b_azIH)
                 (@ c_azII)
                 ($dShow_azIJ [Occ=Once] :: Show a_azIG)
                 ($dShow1_azIK [Occ=Once] :: Show b_azIH)
                 ($dShow2_azIL [Occ=Once] :: Show c_azII)
                 (x_az3n [Occ=Once] :: (a_azIG, b_azIH, c_azII)) ->
                 GHC.Show.$fShow(,,)_$cshowsPrec
                   @ a_azIG
                   @ b_azIH
                   @ c_azII
                   $dShow_azIJ
                   $dShow1_azIK
                   $dShow2_azIL
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,,)_$cshow
  = \ (@ a_azIG)
      (@ b_azIH)
      (@ c_azII)
      ($dShow_azIJ :: Show a_azIG)
      ($dShow1_azIK :: Show b_azIH)
      ($dShow2_azIL :: Show c_azII)
      (x_az3n :: (a_azIG, b_azIH, c_azII)) ->
      case x_az3n of { (ww1_sBdD, ww2_sBdE, ww3_sBdF) ->
      case GHC.Show.$w$cshowsPrec1
             @ a_azIG
             @ b_azIH
             @ c_azII
             $dShow_azIJ
             $dShow1_azIK
             $dShow2_azIL
             ww1_sBdD
             ww2_sBdE
             ww3_sBdF
             (GHC.Types.[] @ Char)
      of
      { (# ww5_sBhf, ww6_sBhg #) ->
      GHC.Types.: @ Char ww5_sBhf ww6_sBhg
      }
      }

-- RHS size: {terms: 29, types: 47, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,)_$cshowList
  :: forall a b c. (Show a, Show b, Show c) => [(a, b, c)] -> ShowS
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azIG)
                 (@ b_azIH)
                 (@ c_azII)
                 ($dShow_azIJ [Occ=Once] :: Show a_azIG)
                 ($dShow1_azIK [Occ=Once] :: Show b_azIH)
                 ($dShow2_azIL [Occ=Once] :: Show c_azII)
                 (ls_az3o [Occ=Once] :: [(a_azIG, b_azIH, c_azII)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azIG, b_azIH, c_azII)
                   (GHC.Show.$fShow(,,)_$cshowsPrec
                      @ a_azIG
                      @ b_azIH
                      @ c_azII
                      $dShow_azIJ
                      $dShow1_azIK
                      $dShow2_azIL
                      GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,,)_$cshowList
  = \ (@ a_azIG)
      (@ b_azIH)
      (@ c_azII)
      ($dShow_azIJ :: Show a_azIG)
      ($dShow1_azIK :: Show b_azIH)
      ($dShow2_azIL :: Show c_azII)
      (ls_az3o :: [(a_azIG, b_azIH, c_azII)])
      (s_az3p :: String) ->
      showList__
        @ (a_azIG, b_azIH, c_azII)
        (\ (w_sBdz :: (a_azIG, b_azIH, c_azII))
           (w1_sBdA [OS=OneShot] :: String) ->
           case w_sBdz of { (ww1_sBdD, ww2_sBdE, ww3_sBdF) ->
           case GHC.Show.$w$cshowsPrec1
                  @ a_azIG
                  @ b_azIH
                  @ c_azII
                  $dShow_azIJ
                  $dShow1_azIK
                  $dShow2_azIL
                  ww1_sBdD
                  ww2_sBdE
                  ww3_sBdF
                  w1_sBdA
           of
           { (# ww5_sBhf, ww6_sBhg #) ->
           GHC.Types.: @ Char ww5_sBhf ww6_sBhg
           }
           })
        ls_az3o
        s_az3p

-- RHS size: {terms: 19, types: 25, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c. (Show a, Show b, Show c) => Show (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az7E)
             (@ b_az7F)
             (@ c_az7G)
             (v_B1 :: Show a_az7E)
             (v1_B2 :: Show b_az7F)
             (v2_B3 :: Show c_az7G) ->
       GHC.Show.C:Show TYPE: (a_az7E, b_az7F, c_az7G)
                       GHC.Show.$fShow(,,)_$cshowsPrec
                         @ a_az7E @ b_az7F @ c_az7G v_B1 v1_B2 v2_B3
                       GHC.Show.$fShow(,,)_$cshow
                         @ a_az7E @ b_az7F @ c_az7G v_B1 v1_B2 v2_B3
                       GHC.Show.$fShow(,,)_$cshowList
                         @ a_az7E @ b_az7F @ c_az7G v_B1 v1_B2 v2_B3]
GHC.Show.$fShow(,,)
  = \ (@ a_azIG)
      (@ b_azIH)
      (@ c_azII)
      ($dShow_azIJ :: Show a_azIG)
      ($dShow1_azIK :: Show b_azIH)
      ($dShow2_azIL :: Show c_azII) ->
      GHC.Show.C:Show
        @ (a_azIG, b_azIH, c_azII)
        (GHC.Show.$fShow(,,)_$cshowsPrec
           @ a_azIG @ b_azIH @ c_azII $dShow_azIJ $dShow1_azIK $dShow2_azIL)
        (GHC.Show.$fShow(,,)_$cshow
           @ a_azIG @ b_azIH @ c_azII $dShow_azIJ $dShow1_azIK $dShow2_azIL)
        (GHC.Show.$fShow(,,)_$cshowList
           @ a_azIG @ b_azIH @ c_azII $dShow_azIJ $dShow1_azIK $dShow2_azIL)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)_go2 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,)_go2
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,)_go2 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 28, types: 25, coercions: 0, joins: 0/0}
GHC.Show.$w$s$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: [Char] -> SrcLoc -> String -> (# Char, [Char] #)
[GblId,
 Arity=3,
 Str=<L,U><L,U(U,U,U,U(U),U(U),U(U),U(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 200 30}]
GHC.Show.$w$s$cshowsPrec
  = \ (ww_sBdS :: [Char]) (ww1_sBdT :: SrcLoc) (w_sBdP :: String) ->
      (# GHC.Show.$fShow(,)4,
         GHC.Show.$fShow(,)_go2
           (GHC.Types.:
              @ ShowS
              (GHC.Show.$fShow(,)_$cshowList1 ww_sBdS)
              (GHC.Types.:
                 @ ShowS
                 (\ (w1_sB5p :: String) ->
                    case ww1_sBdT of
                    { SrcLoc ww3_sB5w ww4_sB5x ww5_sB5y ww6_sB5z ww7_sB5A ww8_sB5B
                             ww9_sB5C ->
                    GHC.Show.$w$cshowsPrec
                      0#
                      ww3_sB5w
                      ww4_sB5x
                      ww5_sB5y
                      ww6_sB5z
                      ww7_sB5A
                      ww8_sB5B
                      ww9_sB5C
                      w1_sB5p
                    })
                 (GHC.Types.[] @ ShowS)))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_sBdP) #)

Rec {
-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)_go1 [Occ=LoopBreaker]
  :: [String -> String] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShow(,)_go1
  = \ (ds_dsXC :: [String -> String]) (eta_B1 :: String) ->
      case ds_dsXC of {
        [] -> case lvl11_rC0o of wild1_00 { };
        : x_arTo ds1_dsXM ->
          case ds1_dsXM of wild1_X8 {
            [] -> x_arTo eta_B1;
            : ipv_st2a ipv1_st2b ->
              x_arTo
                (GHC.Types.:
                   @ Char
                   GHC.Show.showList__1
                   (GHC.Show.$fShow(,)_go1 wild1_X8 eta_B1))
          }
      }
end Rec }

-- RHS size: {terms: 27, types: 25, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b. (Show a, Show b) => Int -> (a, b) -> ShowS
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U)><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_sBe1)
                 (@ b_sBe2)
                 (w_sBe3 [Occ=Once] :: Show a_sBe1)
                 (w1_sBe4 [Occ=Once] :: Show b_sBe2)
                 _ [Occ=Dead]
                 (w3_sBe6 [Occ=Once!] :: (a_sBe1, b_sBe2))
                 (w4_sBe7 [Occ=Once] :: String) ->
                 case w3_sBe6 of { (ww1_sBea [Occ=Once], ww2_sBeb [Occ=Once]) ->
                 GHC.Types.:
                   @ Char
                   GHC.Show.$fShow(,)4
                   (GHC.Show.$fShow(,)_go1
                      (GHC.Types.:
                         @ ShowS
                         (showsPrec @ a_sBe1 w_sBe3 GHC.Show.$fShow(,)1 ww1_sBea)
                         (GHC.Types.:
                            @ ShowS
                            (showsPrec @ b_sBe2 w1_sBe4 GHC.Show.$fShow(,)1 ww2_sBeb)
                            (GHC.Types.[] @ ShowS)))
                      (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w4_sBe7))
                 }}]
GHC.Show.$fShow(,)_$cshowsPrec
  = \ (@ a_sBe1)
      (@ b_sBe2)
      (w_sBe3 :: Show a_sBe1)
      (w1_sBe4 :: Show b_sBe2)
      _ [Occ=Dead]
      (w3_sBe6 :: (a_sBe1, b_sBe2))
      (w4_sBe7 :: String) ->
      case w3_sBe6 of { (ww1_sBea, ww2_sBeb) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,)_go1
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_sBe1 w_sBe3 GHC.Show.$fShow(,)1 ww1_sBea)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_sBe2 w1_sBe4 GHC.Show.$fShow(,)1 ww2_sBeb)
                 (GHC.Types.[] @ ShowS)))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w4_sBe7))
      }

-- RHS size: {terms: 25, types: 24, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)_$cshow
  :: forall a b. (Show a, Show b) => (a, b) -> String
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azJ8)
                 (@ b_azJ9)
                 ($dShow_azJa [Occ=Once] :: Show a_azJ8)
                 ($dShow1_azJb [Occ=Once] :: Show b_azJ9)
                 (x_az3n [Occ=Once] :: (a_azJ8, b_azJ9)) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ a_azJ8
                   @ b_azJ9
                   $dShow_azJa
                   $dShow1_azJb
                   GHC.Show.$fShow(,)1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow(,)_$cshow
  = \ (@ a_azJ8)
      (@ b_azJ9)
      ($dShow_azJa :: Show a_azJ8)
      ($dShow1_azJb :: Show b_azJ9)
      (x_az3n :: (a_azJ8, b_azJ9)) ->
      case x_az3n of { (ww1_sBea, ww2_sBeb) ->
      GHC.Types.:
        @ Char
        GHC.Show.$fShow(,)4
        (GHC.Show.$fShow(,)_go1
           (GHC.Types.:
              @ ShowS
              (showsPrec @ a_azJ8 $dShow_azJa GHC.Show.$fShow(,)1 ww1_sBea)
              (GHC.Types.:
                 @ ShowS
                 (showsPrec @ b_azJ9 $dShow1_azJb GHC.Show.$fShow(,)1 ww2_sBeb)
                 (GHC.Types.[] @ ShowS)))
           (GHC.Types.: @ Char GHC.Show.$fShow(,)2 (GHC.Types.[] @ Char)))
      }

-- RHS size: {terms: 31, types: 32, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,)_$cshowList
  :: forall a b. (Show a, Show b) => [(a, b)] -> ShowS
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azJ8)
                 (@ b_azJ9)
                 ($dShow_azJa [Occ=Once] :: Show a_azJ8)
                 ($dShow1_azJb [Occ=Once] :: Show b_azJ9)
                 (ls_az3o [Occ=Once] :: [(a_azJ8, b_azJ9)])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (a_azJ8, b_azJ9)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ a_azJ8 @ b_azJ9 $dShow_azJa $dShow1_azJb GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShow(,)_$cshowList
  = \ (@ a_azJ8)
      (@ b_azJ9)
      ($dShow_azJa :: Show a_azJ8)
      ($dShow1_azJb :: Show b_azJ9)
      (ls_az3o :: [(a_azJ8, b_azJ9)])
      (s_az3p :: String) ->
      showList__
        @ (a_azJ8, b_azJ9)
        (\ (w_sBe6 :: (a_azJ8, b_azJ9)) (w1_sBe7 [OS=OneShot] :: String) ->
           case w_sBe6 of { (ww1_sBea, ww2_sBeb) ->
           GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)4
             (GHC.Show.$fShow(,)_go1
                (GHC.Types.:
                   @ ShowS
                   (showsPrec @ a_azJ8 $dShow_azJa GHC.Show.$fShow(,)1 ww1_sBea)
                   (GHC.Types.:
                      @ ShowS
                      (showsPrec @ b_azJ9 $dShow1_azJb GHC.Show.$fShow(,)1 ww2_sBeb)
                      (GHC.Types.[] @ ShowS)))
                (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_sBe7))
           })
        ls_az3o
        s_az3p

-- RHS size: {terms: 14, types: 17, coercions: 0, joins: 0/0}
GHC.Show.$fShow(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b. (Show a, Show b) => Show (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a_az7L)
             (@ b_az7M)
             (v_B1 :: Show a_az7L)
             (v1_B2 :: Show b_az7M) ->
       GHC.Show.C:Show TYPE: (a_az7L, b_az7M)
                       GHC.Show.$fShow(,)_$cshowsPrec @ a_az7L @ b_az7M v_B1 v1_B2
                       GHC.Show.$fShow(,)_$cshow @ a_az7L @ b_az7M v_B1 v1_B2
                       GHC.Show.$fShow(,)_$cshowList @ a_az7L @ b_az7M v_B1 v1_B2]
GHC.Show.$fShow(,)
  = \ (@ a_azJ8)
      (@ b_azJ9)
      ($dShow_azJa :: Show a_azJ8)
      ($dShow1_azJb :: Show b_azJ9) ->
      GHC.Show.C:Show
        @ (a_azJ8, b_azJ9)
        (GHC.Show.$fShow(,)_$cshowsPrec
           @ a_azJ8 @ b_azJ9 $dShow_azJa $dShow1_azJb)
        (GHC.Show.$fShow(,)_$cshow
           @ a_azJ8 @ b_azJ9 $dShow_azJa $dShow1_azJb)
        (GHC.Show.$fShow(,)_$cshowList
           @ a_azJ8 @ b_azJ9 $dShow_azJa $dShow1_azJb)

-- RHS size: {terms: 1, types: 1, coercions: 0, joins: 0/0}
showString :: String -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= ++ @ Char}]
showString = ++ @ Char

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
showCommaSpace :: ShowS
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
showCommaSpace = ++ @ Char GHC.Show.showCommaSpace1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Show.$fShowTypeLitSort5 = "TypeLitSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowTypeLitSort4
  = unpackCString# GHC.Show.$fShowTypeLitSort5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Show.$fShowTypeLitSort3 = "TypeLitNat"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowTypeLitSort2
  = unpackCString# GHC.Show.$fShowTypeLitSort3

-- RHS size: {terms: 13, types: 6, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort_$cshowsPrec
  :: Int -> TypeLitSort -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_dzRs [Occ=Once!] :: TypeLitSort)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds1_dzRs of {
                   TypeLitSymbol ->
                     augment
                       @ Char
                       (\ (@ b_it1L)
                          (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                          (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                          foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShowTypeLitSort4)
                       eta_B1;
                   TypeLitNat ->
                     augment
                       @ Char
                       (\ (@ b_it1L)
                          (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                          (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                          foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShowTypeLitSort2)
                       eta_B1
                 }}]
GHC.Show.$fShowTypeLitSort_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_dzRs :: TypeLitSort) (eta_B1 :: String) ->
      case ds1_dzRs of {
        TypeLitSymbol -> ++ @ Char GHC.Show.$fShowTypeLitSort4 eta_B1;
        TypeLitNat -> ++ @ Char GHC.Show.$fShowTypeLitSort2 eta_B1
      }

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort_$cshow :: TypeLitSort -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: TypeLitSort) ->
                 case x_az3n of {
                   TypeLitSymbol -> GHC.Show.$fShowTypeLitSort4;
                   TypeLitNat -> GHC.Show.$fShowTypeLitSort2
                 }}]
GHC.Show.$fShowTypeLitSort_$cshow
  = \ (x_az3n :: TypeLitSort) ->
      case x_az3n of {
        TypeLitSymbol -> GHC.Show.$fShowTypeLitSort4;
        TypeLitNat -> GHC.Show.$fShowTypeLitSort2
      }

-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort1 :: TypeLitSort -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dzRs [Occ=Once!] :: TypeLitSort)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds_dzRs of {
                   TypeLitSymbol ->
                     augment
                       @ Char
                       (\ (@ b_it1L)
                          (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                          (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                          foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShowTypeLitSort4)
                       eta_B1;
                   TypeLitNat ->
                     augment
                       @ Char
                       (\ (@ b_it1L)
                          (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                          (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                          foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShowTypeLitSort2)
                       eta_B1
                 }}]
GHC.Show.$fShowTypeLitSort1
  = \ (ds_dzRs :: TypeLitSort) (eta_B1 :: String) ->
      case ds_dzRs of {
        TypeLitSymbol -> ++ @ Char GHC.Show.$fShowTypeLitSort4 eta_B1;
        TypeLitNat -> ++ @ Char GHC.Show.$fShowTypeLitSort2 eta_B1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort_$cshowList :: [TypeLitSort] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [TypeLitSort])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ TypeLitSort GHC.Show.$fShowTypeLitSort1 ls_az3o s_az3p}]
GHC.Show.$fShowTypeLitSort_$cshowList
  = \ (ls_az3o :: [TypeLitSort]) (s_az3p :: String) ->
      showList__ @ TypeLitSort GHC.Show.$fShowTypeLitSort1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowTypeLitSort [InlPrag=NOUSERINLINE CONLIKE]
  :: Show TypeLitSort
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: TypeLitSort
                       GHC.Show.$fShowTypeLitSort_$cshowsPrec
                       GHC.Show.$fShowTypeLitSort_$cshow
                       GHC.Show.$fShowTypeLitSort_$cshowList]
GHC.Show.$fShowTypeLitSort
  = GHC.Show.C:Show
      @ TypeLitSort
      GHC.Show.$fShowTypeLitSort_$cshowsPrec
      GHC.Show.$fShowTypeLitSort_$cshow
      GHC.Show.$fShowTypeLitSort_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem20 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Show.$fShowVecElem20 = "Int8ElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem19 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem19 = unpackCString# GHC.Show.$fShowVecElem20

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem18 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Show.$fShowVecElem18 = "Int16ElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem17 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem17 = unpackCString# GHC.Show.$fShowVecElem18

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem16 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Show.$fShowVecElem16 = "Int32ElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem15 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem15 = unpackCString# GHC.Show.$fShowVecElem16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem14 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Show.$fShowVecElem14 = "Int64ElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem13 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem13 = unpackCString# GHC.Show.$fShowVecElem14

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Show.$fShowVecElem12 = "Word8ElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem11 = unpackCString# GHC.Show.$fShowVecElem12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Show.$fShowVecElem10 = "Word16ElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem9 = unpackCString# GHC.Show.$fShowVecElem10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Show.$fShowVecElem8 = "Word32ElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem7 = unpackCString# GHC.Show.$fShowVecElem8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Show.$fShowVecElem6 = "Word64ElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem5 = unpackCString# GHC.Show.$fShowVecElem6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Show.$fShowVecElem4 = "FloatElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem3 = unpackCString# GHC.Show.$fShowVecElem4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Show.$fShowVecElem2 = "DoubleElemRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecElem1 = unpackCString# GHC.Show.$fShowVecElem2

-- RHS size: {terms: 44, types: 13, coercions: 0, joins: 0/0}
GHC.Show.$w$cshowsPrec10 [InlPrag=NOUSERINLINE[0]]
  :: VecElem -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [380 0] 400 0}]
GHC.Show.$w$cshowsPrec10
  = \ (w_sBei :: VecElem) (w1_sBej :: String) ->
      case w_sBei of {
        Int8ElemRep -> ++ @ Char GHC.Show.$fShowVecElem19 w1_sBej;
        Int16ElemRep -> ++ @ Char GHC.Show.$fShowVecElem17 w1_sBej;
        Int32ElemRep -> ++ @ Char GHC.Show.$fShowVecElem15 w1_sBej;
        Int64ElemRep -> ++ @ Char GHC.Show.$fShowVecElem13 w1_sBej;
        Word8ElemRep -> ++ @ Char GHC.Show.$fShowVecElem11 w1_sBej;
        Word16ElemRep -> ++ @ Char GHC.Show.$fShowVecElem9 w1_sBej;
        Word32ElemRep -> ++ @ Char GHC.Show.$fShowVecElem7 w1_sBej;
        Word64ElemRep -> ++ @ Char GHC.Show.$fShowVecElem5 w1_sBej;
        FloatElemRep -> ++ @ Char GHC.Show.$fShowVecElem3 w1_sBej;
        DoubleElemRep -> ++ @ Char GHC.Show.$fShowVecElem1 w1_sBej
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> VecElem -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_sBei [Occ=Once] :: VecElem)
                 (w2_sBej [Occ=Once] :: String) ->
                 GHC.Show.$w$cshowsPrec10 w1_sBei w2_sBej}]
GHC.Show.$fShowVecElem_$cshowsPrec
  = \ _ [Occ=Dead] (w1_sBei :: VecElem) (w2_sBej :: String) ->
      GHC.Show.$w$cshowsPrec10 w1_sBei w2_sBej

-- RHS size: {terms: 23, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem_$cshow :: VecElem -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [110] 100 0}]
GHC.Show.$fShowVecElem_$cshow
  = \ (x_az3n :: VecElem) ->
      case x_az3n of {
        Int8ElemRep -> GHC.Show.$fShowVecElem19;
        Int16ElemRep -> GHC.Show.$fShowVecElem17;
        Int32ElemRep -> GHC.Show.$fShowVecElem15;
        Int64ElemRep -> GHC.Show.$fShowVecElem13;
        Word8ElemRep -> GHC.Show.$fShowVecElem11;
        Word16ElemRep -> GHC.Show.$fShowVecElem9;
        Word32ElemRep -> GHC.Show.$fShowVecElem7;
        Word64ElemRep -> GHC.Show.$fShowVecElem5;
        FloatElemRep -> GHC.Show.$fShowVecElem3;
        DoubleElemRep -> GHC.Show.$fShowVecElem1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem_$cshowList :: [VecElem] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [VecElem])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ VecElem GHC.Show.$w$cshowsPrec10 ls_az3o s_az3p}]
GHC.Show.$fShowVecElem_$cshowList
  = \ (ls_az3o :: [VecElem]) (s_az3p :: String) ->
      showList__ @ VecElem GHC.Show.$w$cshowsPrec10 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecElem [InlPrag=NOUSERINLINE CONLIKE]
  :: Show VecElem
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: VecElem
                       GHC.Show.$fShowVecElem_$cshowsPrec
                       GHC.Show.$fShowVecElem_$cshow
                       GHC.Show.$fShowVecElem_$cshowList]
GHC.Show.$fShowVecElem
  = GHC.Show.C:Show
      @ VecElem
      GHC.Show.$fShowVecElem_$cshowsPrec
      GHC.Show.$fShowVecElem_$cshow
      GHC.Show.$fShowVecElem_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount12 = "Vec2"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount11
  = unpackCString# GHC.Show.$fShowVecCount12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount10 = "Vec4"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount9 = unpackCString# GHC.Show.$fShowVecCount10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount8 = "Vec8"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount7 = unpackCString# GHC.Show.$fShowVecCount8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Show.$fShowVecCount6 = "Vec16"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount5 = unpackCString# GHC.Show.$fShowVecCount6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Show.$fShowVecCount4 = "Vec32"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount3 = unpackCString# GHC.Show.$fShowVecCount4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Show.$fShowVecCount2 = "Vec64"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowVecCount1 = unpackCString# GHC.Show.$fShowVecCount2

-- RHS size: {terms: 28, types: 9, coercions: 0, joins: 0/0}
GHC.Show.$w$cshowsPrec9 [InlPrag=NOUSERINLINE[0]]
  :: VecCount -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [220 0] 240 0}]
GHC.Show.$w$cshowsPrec9
  = \ (w_sBen :: VecCount) (w1_sBeo :: String) ->
      case w_sBen of {
        Vec2 -> ++ @ Char GHC.Show.$fShowVecCount11 w1_sBeo;
        Vec4 -> ++ @ Char GHC.Show.$fShowVecCount9 w1_sBeo;
        Vec8 -> ++ @ Char GHC.Show.$fShowVecCount7 w1_sBeo;
        Vec16 -> ++ @ Char GHC.Show.$fShowVecCount5 w1_sBeo;
        Vec32 -> ++ @ Char GHC.Show.$fShowVecCount3 w1_sBeo;
        Vec64 -> ++ @ Char GHC.Show.$fShowVecCount1 w1_sBeo
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> VecCount -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_sBen [Occ=Once] :: VecCount)
                 (w2_sBeo [Occ=Once] :: String) ->
                 GHC.Show.$w$cshowsPrec9 w1_sBen w2_sBeo}]
GHC.Show.$fShowVecCount_$cshowsPrec
  = \ _ [Occ=Dead] (w1_sBen :: VecCount) (w2_sBeo :: String) ->
      GHC.Show.$w$cshowsPrec9 w1_sBen w2_sBeo

-- RHS size: {terms: 15, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount_$cshow :: VecCount -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: VecCount) ->
                 case x_az3n of {
                   Vec2 -> GHC.Show.$fShowVecCount11;
                   Vec4 -> GHC.Show.$fShowVecCount9;
                   Vec8 -> GHC.Show.$fShowVecCount7;
                   Vec16 -> GHC.Show.$fShowVecCount5;
                   Vec32 -> GHC.Show.$fShowVecCount3;
                   Vec64 -> GHC.Show.$fShowVecCount1
                 }}]
GHC.Show.$fShowVecCount_$cshow
  = \ (x_az3n :: VecCount) ->
      case x_az3n of {
        Vec2 -> GHC.Show.$fShowVecCount11;
        Vec4 -> GHC.Show.$fShowVecCount9;
        Vec8 -> GHC.Show.$fShowVecCount7;
        Vec16 -> GHC.Show.$fShowVecCount5;
        Vec32 -> GHC.Show.$fShowVecCount3;
        Vec64 -> GHC.Show.$fShowVecCount1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount_$cshowList :: [VecCount] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [VecCount])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ VecCount GHC.Show.$w$cshowsPrec9 ls_az3o s_az3p}]
GHC.Show.$fShowVecCount_$cshowList
  = \ (ls_az3o :: [VecCount]) (s_az3p :: String) ->
      showList__ @ VecCount GHC.Show.$w$cshowsPrec9 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowVecCount [InlPrag=NOUSERINLINE CONLIKE]
  :: Show VecCount
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: VecCount
                       GHC.Show.$fShowVecCount_$cshowsPrec
                       GHC.Show.$fShowVecCount_$cshow
                       GHC.Show.$fShowVecCount_$cshowList]
GHC.Show.$fShowVecCount
  = GHC.Show.C:Show
      @ VecCount
      GHC.Show.$fShowVecCount_$cshowsPrec
      GHC.Show.$fShowVecCount_$cshow
      GHC.Show.$fShowVecCount_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowOrdering6 = "LT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowOrdering5 = unpackCString# GHC.Show.$fShowOrdering6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowOrdering4 = "EQ"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowOrdering3 = unpackCString# GHC.Show.$fShowOrdering4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowOrdering2 = "GT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowOrdering1 = unpackCString# GHC.Show.$fShowOrdering2

-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
GHC.Show.$w$cshowsPrec8 [InlPrag=NOUSERINLINE[0]]
  :: Ordering -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 0] 120 0}]
GHC.Show.$w$cshowsPrec8
  = \ (w_sBer :: Ordering) (w1_sBes :: String) ->
      case w_sBer of {
        LT -> ++ @ Char GHC.Show.$fShowOrdering5 w1_sBes;
        EQ -> ++ @ Char GHC.Show.$fShowOrdering3 w1_sBes;
        GT -> ++ @ Char GHC.Show.$fShowOrdering1 w1_sBes
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> Ordering -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_sBer [Occ=Once] :: Ordering)
                 (w2_sBes [Occ=Once] :: String) ->
                 GHC.Show.$w$cshowsPrec8 w1_sBer w2_sBes}]
GHC.Show.$fShowOrdering_$cshowsPrec
  = \ _ [Occ=Dead] (w1_sBer :: Ordering) (w2_sBes :: String) ->
      GHC.Show.$w$cshowsPrec8 w1_sBer w2_sBes

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering_$cshow :: Ordering -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: Ordering) ->
                 case x_az3n of {
                   LT -> GHC.Show.$fShowOrdering5;
                   EQ -> GHC.Show.$fShowOrdering3;
                   GT -> GHC.Show.$fShowOrdering1
                 }}]
GHC.Show.$fShowOrdering_$cshow
  = \ (x_az3n :: Ordering) ->
      case x_az3n of {
        LT -> GHC.Show.$fShowOrdering5;
        EQ -> GHC.Show.$fShowOrdering3;
        GT -> GHC.Show.$fShowOrdering1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering_$cshowList :: [Ordering] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [Ordering])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ Ordering GHC.Show.$w$cshowsPrec8 ls_az3o s_az3p}]
GHC.Show.$fShowOrdering_$cshowList
  = \ (ls_az3o :: [Ordering]) (s_az3p :: String) ->
      showList__ @ Ordering GHC.Show.$w$cshowsPrec8 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Ordering
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Ordering
                       GHC.Show.$fShowOrdering_$cshowsPrec
                       GHC.Show.$fShowOrdering_$cshow
                       GHC.Show.$fShowOrdering_$cshowList]
GHC.Show.$fShowOrdering
  = GHC.Show.C:Show
      @ Ordering
      GHC.Show.$fShowOrdering_$cshowsPrec
      GHC.Show.$fShowOrdering_$cshow
      GHC.Show.$fShowOrdering_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Show.$fShowBool5 = "False"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowBool4 = unpackCString# GHC.Show.$fShowBool5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowBool3 = "True"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowBool2 = unpackCString# GHC.Show.$fShowBool3

-- RHS size: {terms: 13, types: 6, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool_$cshowsPrec :: Int -> Bool -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_dzRF [Occ=Once!] :: Bool)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds1_dzRF of {
                   False ->
                     augment
                       @ Char
                       (\ (@ b_it1L)
                          (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                          (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                          foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShowBool4)
                       eta_B1;
                   True ->
                     augment
                       @ Char
                       (\ (@ b_it1L)
                          (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                          (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                          foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShowBool2)
                       eta_B1
                 }}]
GHC.Show.$fShowBool_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_dzRF :: Bool) (eta_B1 :: String) ->
      case ds1_dzRF of {
        False -> ++ @ Char GHC.Show.$fShowBool4 eta_B1;
        True -> ++ @ Char GHC.Show.$fShowBool2 eta_B1
      }

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool_$cshow :: Bool -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: Bool) ->
                 case x_az3n of {
                   False -> GHC.Show.$fShowBool4;
                   True -> GHC.Show.$fShowBool2
                 }}]
GHC.Show.$fShowBool_$cshow
  = \ (x_az3n :: Bool) ->
      case x_az3n of {
        False -> GHC.Show.$fShowBool4;
        True -> GHC.Show.$fShowBool2
      }

-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool1 :: Bool -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dzRF [Occ=Once!] :: Bool)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds_dzRF of {
                   False ->
                     augment
                       @ Char
                       (\ (@ b_it1L)
                          (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                          (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                          foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShowBool4)
                       eta_B1;
                   True ->
                     augment
                       @ Char
                       (\ (@ b_it1L)
                          (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                          (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                          foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShowBool2)
                       eta_B1
                 }}]
GHC.Show.$fShowBool1
  = \ (ds_dzRF :: Bool) (eta_B1 :: String) ->
      case ds_dzRF of {
        False -> ++ @ Char GHC.Show.$fShowBool4 eta_B1;
        True -> ++ @ Char GHC.Show.$fShowBool2 eta_B1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool_$cshowList :: [Bool] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [Bool])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ Bool GHC.Show.$fShowBool1 ls_az3o s_az3p}]
GHC.Show.$fShowBool_$cshowList
  = \ (ls_az3o :: [Bool]) (s_az3p :: String) ->
      showList__ @ Bool GHC.Show.$fShowBool1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowBool [InlPrag=NOUSERINLINE CONLIKE] :: Show Bool
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Bool
                       GHC.Show.$fShowBool_$cshowsPrec
                       GHC.Show.$fShowBool_$cshow
                       GHC.Show.$fShowBool_$cshowList]
GHC.Show.$fShowBool
  = GHC.Show.C:Show
      @ Bool
      GHC.Show.$fShowBool_$cshowsPrec
      GHC.Show.$fShowBool_$cshow
      GHC.Show.$fShowBool_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShow()3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShow()3 = "()"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShow()2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShow()2 = unpackCString# GHC.Show.$fShow()3

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShow()_$cshowsPrec :: Int -> () -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*H><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_dzRH [Occ=Once!] :: ())
                 (eta_B1 [Occ=Once] :: String) ->
                 case ds1_dzRH of { () ->
                 augment
                   @ Char
                   (\ (@ b_it1L)
                      (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                      (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                      foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShow()2)
                   eta_B1
                 }}]
GHC.Show.$fShow()_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_dzRH :: ()) (eta_B1 :: String) ->
      case ds1_dzRH of { () -> ++ @ Char GHC.Show.$fShow()2 eta_B1 }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShow()_$cshow :: () -> String
[GblId,
 Arity=1,
 Str=<S,1*H>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: ()) ->
                 case x_az3n of { () -> GHC.Show.$fShow()2 }}]
GHC.Show.$fShow()_$cshow
  = \ (x_az3n :: ()) -> case x_az3n of { () -> GHC.Show.$fShow()2 }

-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShow()1 :: () -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*H><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dzRH [Occ=Once!] :: ())
                 (eta_B1 [Occ=Once] :: String) ->
                 case ds_dzRH of { () ->
                 augment
                   @ Char
                   (\ (@ b_it1L)
                      (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                      (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                      foldr @ Char @ b_it1L c_it1M n_it1N GHC.Show.$fShow()2)
                   eta_B1
                 }}]
GHC.Show.$fShow()1
  = \ (ds_dzRH :: ()) (eta_B1 :: String) ->
      case ds_dzRH of { () -> ++ @ Char GHC.Show.$fShow()2 eta_B1 }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShow()_$cshowList :: [()] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [()])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ () GHC.Show.$fShow()1 ls_az3o s_az3p}]
GHC.Show.$fShow()_$cshowList
  = \ (ls_az3o :: [()]) (s_az3p :: String) ->
      showList__ @ () GHC.Show.$fShow()1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShow() [InlPrag=NOUSERINLINE CONLIKE] :: Show ()
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: ()
                       GHC.Show.$fShow()_$cshowsPrec
                       GHC.Show.$fShow()_$cshow
                       GHC.Show.$fShow()_$cshowList]
GHC.Show.$fShow()
  = GHC.Show.C:Show
      @ ()
      GHC.Show.$fShow()_$cshowsPrec
      GHC.Show.$fShow()_$cshow
      GHC.Show.$fShow()_$cshowList

-- RHS size: {terms: 11, types: 8, coercions: 0, joins: 0/0}
GHC.Show.$fShowTrName_$cshowsPrec :: Int -> TrName -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead] (ds1_dzWh [Occ=Once!] :: TrName) ->
                 case ds1_dzWh of {
                   TrNameS s_az7S [Occ=Once] ->
                     ++
                       @ Char
                       (build
                          @ Char (\ (@ b_irkh) -> unpackFoldrCString# @ b_irkh s_az7S));
                   TrNameD s_az7T [Occ=Once] -> ++ @ Char s_az7T
                 }}]
GHC.Show.$fShowTrName_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_dzWh :: TrName) ->
      case ds1_dzWh of {
        TrNameS s_az7S -> ++ @ Char (unpackCString# s_az7S);
        TrNameD s_az7T -> ++ @ Char s_az7T
      }

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShowTrName_$cshow :: TrName -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: TrName) ->
                 case x_az3n of {
                   TrNameS s_az7S [Occ=Once] ->
                     build @ Char (\ (@ b_irkh) -> unpackFoldrCString# @ b_irkh s_az7S);
                   TrNameD s_az7T [Occ=Once] -> s_az7T
                 }}]
GHC.Show.$fShowTrName_$cshow
  = \ (x_az3n :: TrName) ->
      case x_az3n of {
        TrNameS s_az7S -> unpackCString# s_az7S;
        TrNameD s_az7T -> s_az7T
      }

-- RHS size: {terms: 10, types: 7, coercions: 0, joins: 0/0}
GHC.Show.$fShowTrName1 :: TrName -> ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dzWh [Occ=Once!] :: TrName) ->
                 case ds_dzWh of {
                   TrNameS s_az7S [Occ=Once] ->
                     ++
                       @ Char
                       (build
                          @ Char (\ (@ b_irkh) -> unpackFoldrCString# @ b_irkh s_az7S));
                   TrNameD s_az7T [Occ=Once] -> ++ @ Char s_az7T
                 }}]
GHC.Show.$fShowTrName1
  = \ (ds_dzWh :: TrName) ->
      case ds_dzWh of {
        TrNameS s_az7S -> ++ @ Char (unpackCString# s_az7S);
        TrNameD s_az7T -> ++ @ Char s_az7T
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowTrName_$cshowList :: [TrName] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [TrName])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ TrName GHC.Show.$fShowTrName1 ls_az3o s_az3p}]
GHC.Show.$fShowTrName_$cshowList
  = \ (ls_az3o :: [TrName]) (s_az3p :: String) ->
      showList__ @ TrName GHC.Show.$fShowTrName1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowTrName [InlPrag=NOUSERINLINE CONLIKE] :: Show TrName
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: TrName
                       GHC.Show.$fShowTrName_$cshowsPrec
                       GHC.Show.$fShowTrName_$cshow
                       GHC.Show.$fShowTrName_$cshowList]
GHC.Show.$fShowTrName
  = GHC.Show.C:Show
      @ TrName
      GHC.Show.$fShowTrName_$cshowsPrec
      GHC.Show.$fShowTrName_$cshow
      GHC.Show.$fShowTrName_$cshowList

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowModule2 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$fShowModule2 = GHC.Types.C# ':'#

-- RHS size: {terms: 28, types: 21, coercions: 0, joins: 0/2}
GHC.Show.$w$cshowsPrec6 [InlPrag=NOUSERINLINE[0]]
  :: TrName -> TrName -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [50 50] 240 60}]
GHC.Show.$w$cshowsPrec6
  = \ (ww_sBey :: TrName) (ww1_sBez :: TrName) ->
      let {
        f12_sAei [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f12_sAei
          = case ww_sBey of {
              TrNameS s_az7S -> ++ @ Char (unpackCString# s_az7S);
              TrNameD s_az7T -> ++ @ Char s_az7T
            } } in
      let {
        g_sAeg [Dmd=<L,C(U)>] :: String -> [Char]
        [LclId]
        g_sAeg
          = case ww1_sBez of {
              TrNameS s_az7S -> ++ @ Char (unpackCString# s_az7S);
              TrNameD s_az7T -> ++ @ Char s_az7T
            } } in
      \ (x_XnQI :: String) ->
        f12_sAei
          (GHC.Types.: @ Char GHC.Show.$fShowModule2 (g_sAeg x_XnQI))

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShowModule_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> Module -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead] (w1_sBev [Occ=Once!] :: Module) ->
                 case w1_sBev of { Module ww1_sBey [Occ=Once] ww2_sBez [Occ=Once] ->
                 GHC.Show.$w$cshowsPrec6 ww1_sBey ww2_sBez
                 }}]
GHC.Show.$fShowModule_$cshowsPrec
  = \ _ [Occ=Dead] (w1_sBev :: Module) ->
      case w1_sBev of { Module ww1_sBey ww2_sBez ->
      GHC.Show.$w$cshowsPrec6 ww1_sBey ww2_sBez
      }

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShowModule_$cshow :: Module -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: Module) ->
                 GHC.Show.$fShowModule_$cshowsPrec
                   GHC.Show.$fShow(,)1 x_az3n (GHC.Types.[] @ Char)}]
GHC.Show.$fShowModule_$cshow
  = \ (x_az3n :: Module) ->
      case x_az3n of { Module ww1_sBey ww2_sBez ->
      GHC.Show.$w$cshowsPrec6 ww1_sBey ww2_sBez (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 7, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowModule1 :: Module -> ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 40 0}]
GHC.Show.$fShowModule1
  = \ (w_sBev :: Module) ->
      case w_sBev of { Module ww1_sBey ww2_sBez ->
      GHC.Show.$w$cshowsPrec6 ww1_sBey ww2_sBez
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowModule_$cshowList :: [Module] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [Module])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ Module GHC.Show.$fShowModule1 ls_az3o s_az3p}]
GHC.Show.$fShowModule_$cshowList
  = \ (ls_az3o :: [Module]) (s_az3p :: String) ->
      showList__ @ Module GHC.Show.$fShowModule1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowModule [InlPrag=NOUSERINLINE CONLIKE] :: Show Module
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Module
                       GHC.Show.$fShowModule_$cshowsPrec
                       GHC.Show.$fShowModule_$cshow
                       GHC.Show.$fShowModule_$cshowList]
GHC.Show.$fShowModule
  = GHC.Show.C:Show
      @ Module
      GHC.Show.$fShowModule_$cshowsPrec
      GHC.Show.$fShowModule_$cshow
      GHC.Show.$fShowModule_$cshowList

-- RHS size: {terms: 8, types: 9, coercions: 0, joins: 0/0}
GHC.Show.$fShowTyCon_$cshowsPrec :: Int -> TyCon -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (p_az7U [Occ=Once] :: Int)
                 (ds_dzWp [Occ=Once!] :: TyCon) ->
                 case ds_dzWp of
                 { TyCon _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                         tc_name_az7V [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 GHC.Show.$fShowTrName_$cshowsPrec p_az7U tc_name_az7V
                 }}]
GHC.Show.$fShowTyCon_$cshowsPrec
  = \ (p_az7U :: Int) (ds_dzWp :: TyCon) ->
      case ds_dzWp of
      { TyCon ds1_dzWD ds2_dzWE ds3_dzWF tc_name_az7V ds4_dzWG
              ds5_dzWH ->
      GHC.Show.$fShowTrName_$cshowsPrec p_az7U tc_name_az7V
      }

-- RHS size: {terms: 11, types: 12, coercions: 0, joins: 0/0}
GHC.Show.$fShowTyCon_$cshow :: TyCon -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: TyCon) ->
                 case x_az3n of
                 { TyCon _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                         tc_name_az7V [Occ=Once!] _ [Occ=Dead] _ [Occ=Dead] ->
                 case tc_name_az7V of {
                   TrNameS s_az7S [Occ=Once] ->
                     build @ Char (\ (@ b_irkh) -> unpackFoldrCString# @ b_irkh s_az7S);
                   TrNameD s_az7T [Occ=Once] -> s_az7T
                 }
                 }}]
GHC.Show.$fShowTyCon_$cshow
  = \ (x_az3n :: TyCon) ->
      case x_az3n of
      { TyCon ds_dzWD ds1_dzWE ds2_dzWF tc_name_az7V ds3_dzWG ds4_dzWH ->
      case tc_name_az7V of {
        TrNameS s_az7S -> unpackCString# s_az7S;
        TrNameD s_az7T -> s_az7T
      }
      }

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
GHC.Show.$fShowTyCon1 [InlPrag=NOUSERINLINE[0]] :: TyCon -> ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sBeC [Occ=Once!] :: TyCon) ->
                 case w_sBeC of
                 { TyCon _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ww4_sBeI [Occ=Once]
                         _ [Occ=Dead] _ [Occ=Dead] ->
                 GHC.Show.$fShowTrName1 ww4_sBeI
                 }}]
GHC.Show.$fShowTyCon1
  = \ (w_sBeC :: TyCon) ->
      case w_sBeC of
      { TyCon ww1_sBeF ww2_sBeG ww3_sBeH ww4_sBeI ww5_sBeJ ww6_sBeK ->
      GHC.Show.$fShowTrName1 ww4_sBeI
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowTyCon_$cshowList :: [TyCon] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [TyCon])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ TyCon GHC.Show.$fShowTyCon1 ls_az3o s_az3p}]
GHC.Show.$fShowTyCon_$cshowList
  = \ (ls_az3o :: [TyCon]) (s_az3p :: String) ->
      showList__ @ TyCon GHC.Show.$fShowTyCon1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowTyCon [InlPrag=NOUSERINLINE CONLIKE] :: Show TyCon
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: TyCon
                       GHC.Show.$fShowTyCon_$cshowsPrec
                       GHC.Show.$fShowTyCon_$cshow
                       GHC.Show.$fShowTyCon_$cshowList]
GHC.Show.$fShowTyCon
  = GHC.Show.C:Show
      @ TyCon
      GHC.Show.$fShowTyCon_$cshowsPrec
      GHC.Show.$fShowTyCon_$cshow
      GHC.Show.$fShowTyCon_$cshowList

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.showSpace1 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.showSpace1 = GHC.Types.C# ' '#

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
showSpace :: ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (xs_az8i [Occ=Once] :: String) ->
                 GHC.Types.: @ Char GHC.Show.showSpace1 xs_az8i}]
showSpace
  = \ (xs_az8i :: String) ->
      GHC.Types.: @ Char GHC.Show.showSpace1 xs_az8i

-- RHS size: {terms: 18, types: 12, coercions: 0, joins: 0/0}
protectEsc :: (Char -> Bool) -> ShowS -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S),1*C1(U)><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 60 30] 110 0}]
protectEsc
  = \ (p_az8O :: Char -> Bool)
      (f12_az8P :: ShowS)
      (x_inLI :: [Char]) ->
      f12_az8P
        (case x_inLI of wild_X50 {
           [] -> GHC.Types.[] @ Char;
           : c_az8S ds_dzPL ->
             case p_az8O c_az8S of {
               False -> wild_X50;
               True -> unpackAppendCString# GHC.Show.showLitChar4 wild_X50
             }
         })

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$trModule3 = GHC.Types.TrNameS GHC.Show.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Show.$trModule2 = "GHC.Show"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$trModule1 = GHC.Types.TrNameS GHC.Show.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Show.$trModule
  = GHC.Types.Module GHC.Show.$trModule3 GHC.Show.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rC0q :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rC0q
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rC0r :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rC0r
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rC0s :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_rC0s
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3_rC0t :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_rC0t
  = GHC.Types.: @ KindRep $krep_rC0q (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_rC0u :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_rC0u = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep3_rC0t

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_rC0v :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep5_rC0v = GHC.Types.KindRepFun $krep4_rC0u $krep4_rC0u

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$tcShow1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Show.$tcShow1
  = GHC.Types.KindRepFun GHC.Types.krep$* $krep2_rC0s

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep6_rC0w :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_rC0w = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_rC0x :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep7_rC0x = GHC.Types.KindRepFun $krep6_rC0w $krep5_rC0v

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_rC0y :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep8_rC0y = GHC.Types.KindRepFun $krep1_rC0r $krep7_rC0x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_rC0z :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep9_rC0z = GHC.Types.KindRepFun $krep6_rC0w $krep4_rC0u

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep10_rC0A :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep10_rC0A
  = GHC.Types.: @ KindRep $krep6_rC0w (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rC0B :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_rC0B
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep10_rC0A

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rC0C :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_rC0C = GHC.Types.KindRepFun $krep11_rC0B $krep5_rC0v

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$tcShow3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$tcShow3 = "Show"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$tcShow2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$tcShow2 = GHC.Types.TrNameS GHC.Show.$tcShow3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$tcShow :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Show.$tcShow
  = GHC.Types.TyCon
      10437143935872046625##
      8934823934159178042##
      GHC.Show.$trModule
      GHC.Show.$tcShow2
      0#
      GHC.Show.$tcShow1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_rC0D :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_rC0D
  = GHC.Types.KindRepTyConApp GHC.Show.$tcShow $krep10_rC0A

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rC0E :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep14_rC0E = GHC.Types.KindRepFun $krep12_rC0C $krep13_rC0D

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_rC0F :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep15_rC0F = GHC.Types.KindRepFun $krep9_rC0z $krep14_rC0E

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$tc'C:Show1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Show.$tc'C:Show1
  = GHC.Types.KindRepFun $krep8_rC0y $krep15_rC0F

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$tc'C:Show3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Show.$tc'C:Show3 = "'C:Show"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$tc'C:Show2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$tc'C:Show2 = GHC.Types.TrNameS GHC.Show.$tc'C:Show3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$tc'C:Show :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Show.$tc'C:Show
  = GHC.Types.TyCon
      4474575220627516169##
      12023205831716615459##
      GHC.Show.$trModule
      GHC.Show.$tc'C:Show2
      1#
      GHC.Show.$tc'C:Show1

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
GHC.Show.$fShowInt_$cshow :: Int -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: Int) ->
                 showSignedInt GHC.Show.$fShow(,)1 x_az3n (GHC.Types.[] @ Char)}]
GHC.Show.$fShowInt_$cshow
  = \ (x_az3n :: Int) ->
      case x_az3n of { I# ww1_sB52 ->
      case GHC.Show.$wshowSignedInt 0# ww1_sB52 (GHC.Types.[] @ Char) of
      { (# ww3_sBh6, ww4_sBh7 #) ->
      GHC.Types.: @ Char ww3_sBh6 ww4_sBh7
      }
      }

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
GHC.Show.$fShowInt1 :: Int -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 70 30}]
GHC.Show.$fShowInt1
  = \ (w_sB4U :: Int) (w1_sB4V :: String) ->
      case w_sB4U of { I# ww1_sB52 ->
      case GHC.Show.$wshowSignedInt 0# ww1_sB52 w1_sB4V of
      { (# ww3_sBh6, ww4_sBh7 #) ->
      GHC.Types.: @ Char ww3_sBh6 ww4_sBh7
      }
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowInt_$cshowList :: [Int] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [Int])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ Int GHC.Show.$fShowInt1 ls_az3o s_az3p}]
GHC.Show.$fShowInt_$cshowList
  = \ (ls_az3o :: [Int]) (s_az3p :: String) ->
      showList__ @ Int GHC.Show.$fShowInt1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowInt [InlPrag=NOUSERINLINE CONLIKE] :: Show Int
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Int
                       showSignedInt
                       GHC.Show.$fShowInt_$cshow
                       GHC.Show.$fShowInt_$cshowList]
GHC.Show.$fShowInt
  = GHC.Show.C:Show
      @ Int
      showSignedInt
      GHC.Show.$fShowInt_$cshow
      GHC.Show.$fShowInt_$cshowList

-- RHS size: {terms: 10, types: 4, coercions: 0, joins: 0/0}
lvl12_rC0G :: Char -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []]
lvl12_rC0G
  = \ (ds_dzQk :: Char) ->
      case ds_dzQk of { C# x_a5ih ->
      case x_a5ih of {
        __DEFAULT -> GHC.Types.False;
        '\n'# -> GHC.Types.True
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl13_rC0H :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl13_rC0H = "\\n\\"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl14_rC0I :: [Char]
[GblId]
lvl14_rC0I = unpackCString# lvl13_rC0H

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl15_rC0J :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl15_rC0J = "\\n\""#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl16_rC0K :: [Char]
[GblId]
lvl16_rC0K = unpackCString# lvl15_rC0J

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl17_rC0L :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl17_rC0L = "\""#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl18_rC0M :: [Char]
[GblId]
lvl18_rC0M = unpackCString# lvl17_rC0L

Rec {
-- RHS size: {terms: 57, types: 81, coercions: 0, joins: 0/0}
GHC.Show.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Char -> [Char] -> (# [Char], [[Char]] #)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []]
GHC.Show.$wgo
  = \ (w_sBeQ :: Char) (w1_sBeR :: [Char]) ->
      case GHC.List.$wbreak @ Char lvl12_rC0G w1_sBeR of
      { (# ww1_stNl, ww2_stNm #) ->
      case ww2_stNm of {
        [] ->
          (# GHC.Types.: @ Char w_sBeQ (showLitString ww1_stNl lvl18_rC0M),
             GHC.Types.[] @ [Char] #);
        : ds_dzQR s'_az8K ->
          case s'_az8K of wild1_X2t {
            [] ->
              case ds_dzQR of { C# ds1_dzQU ->
              case ds1_dzQU of {
                __DEFAULT ->
                  (# GHC.Types.: @ Char w_sBeQ (showLitString ww1_stNl lvl18_rC0M),
                     GHC.Types.[] @ [Char] #);
                '\n'# ->
                  (# GHC.Types.: @ Char w_sBeQ (showLitString ww1_stNl lvl16_rC0K),
                     GHC.Types.[] @ [Char] #)
              }
              };
            : ds1_dzQS ds2_dzQT ->
              (# GHC.Types.: @ Char w_sBeQ (showLitString ww1_stNl lvl14_rC0I),
                 case GHC.Show.$wgo GHC.Show.showLitChar13 wild1_X2t of
                 { (# ww5_sBho, ww6_sBhp #) ->
                 GHC.Types.: @ [Char] ww5_sBho ww6_sBhp
                 } #)
          }
      }
      }
end Rec }

-- RHS size: {terms: 10, types: 18, coercions: 0, joins: 0/0}
GHC.Show.showMultiLineString_go [InlPrag=NOUSERINLINE[0]]
  :: Char -> [Char] -> [[Char]]
[GblId,
 Arity=2,
 Str=<L,U><S,1*U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sBeQ [Occ=Once] :: Char)
                 (w1_sBeR [Occ=Once] :: [Char]) ->
                 case GHC.Show.$wgo w_sBeQ w1_sBeR of
                 { (# ww1_sBho [Occ=Once], ww2_sBhp [Occ=Once] #) ->
                 GHC.Types.: @ [Char] ww1_sBho ww2_sBhp
                 }}]
GHC.Show.showMultiLineString_go
  = \ (w_sBeQ :: Char) (w1_sBeR :: [Char]) ->
      case GHC.Show.$wgo w_sBeQ w1_sBeR of { (# ww1_sBho, ww2_sBhp #) ->
      GHC.Types.: @ [Char] ww1_sBho ww2_sBhp
      }

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
showMultiLineString :: String -> [String]
[GblId,
 Arity=1,
 Str=<S,1*U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (str_az8F [Occ=Once] :: String) ->
                 GHC.Show.showMultiLineString_go GHC.Show.$fShow(,)3 str_az8F}]
showMultiLineString
  = \ (str_az8F :: String) ->
      case GHC.Show.$wgo GHC.Show.$fShow(,)3 str_az8F of
      { (# ww1_sBho, ww2_sBhp #) ->
      GHC.Types.: @ [Char] ww1_sBho ww2_sBhp
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowChar3 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$fShowChar3 = GHC.Types.C# '\''#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowChar2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowChar2 = "'\\''"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowChar1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowChar1 = unpackCString# GHC.Show.$fShowChar2

-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
GHC.Show.$w$cshowsPrec3 [InlPrag=NOUSERINLINE[0]]
  :: Char# -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0] 100 30}]
GHC.Show.$w$cshowsPrec3
  = \ (ww_sBf1 :: Char#) (w_sBeY :: String) ->
      case ww_sBf1 of ds_XzZh {
        __DEFAULT ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShowChar3
            (GHC.Show.$wshowLitChar
               ds_XzZh (GHC.Types.: @ Char GHC.Show.$fShowChar3 w_sBeY));
        '\''# -> ++ @ Char GHC.Show.$fShowChar1 w_sBeY
      }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShowChar_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> Char -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(S),1*U(1*U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (w1_sBeX [Occ=Once!] :: Char)
                 (w2_sBeY [Occ=Once] :: String) ->
                 case w1_sBeX of { C# ww1_sBf1 [Occ=Once] ->
                 GHC.Show.$w$cshowsPrec3 ww1_sBf1 w2_sBeY
                 }}]
GHC.Show.$fShowChar_$cshowsPrec
  = \ _ [Occ=Dead] (w1_sBeX :: Char) (w2_sBeY :: String) ->
      case w1_sBeX of { C# ww1_sBf1 ->
      GHC.Show.$w$cshowsPrec3 ww1_sBf1 w2_sBeY
      }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl19_rC0N :: [Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
lvl19_rC0N
  = GHC.Types.: @ Char GHC.Show.$fShowChar3 (GHC.Types.[] @ Char)

-- RHS size: {terms: 14, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShowChar_$cshow :: Char -> String
[GblId,
 Arity=1,
 Str=<S(S),1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once!] :: Char) ->
                 case x_az3n of wild_X6E { C# ds_dzWU [Occ=Once!] ->
                 case ds_dzWU of {
                   __DEFAULT ->
                     GHC.Types.:
                       @ Char
                       GHC.Show.$fShowChar3
                       (showLitChar
                          wild_X6E
                          (GHC.Types.: @ Char GHC.Show.$fShowChar3 (GHC.Types.[] @ Char)));
                   '\''# -> GHC.Show.$fShowChar1
                 }
                 }}]
GHC.Show.$fShowChar_$cshow
  = \ (x_az3n :: Char) ->
      case x_az3n of { C# ds_dzWU ->
      case ds_dzWU of ds1_XzZh {
        __DEFAULT ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShowChar3
            (GHC.Show.$wshowLitChar ds1_XzZh lvl19_rC0N);
        '\''# -> GHC.Show.$fShowChar1
      }
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowChar [InlPrag=NOUSERINLINE CONLIKE] :: Show Char
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Char
                       GHC.Show.$fShowChar_$cshowsPrec
                       GHC.Show.$fShowChar_$cshow
                       GHC.Show.$fShow(,)_$cshowList1]
GHC.Show.$fShowChar
  = GHC.Show.C:Show
      @ Char
      GHC.Show.$fShowChar_$cshowsPrec
      GHC.Show.$fShowChar_$cshow
      GHC.Show.$fShow(,)_$cshowList1

-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$cshowList :: [[Int]] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [[Int]])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ [Int] GHC.Show.$fShowInt_$cshowList ls_az3o s_az3p}]
GHC.Show.$fShow[]_$s$cshowList
  = \ (ls_az3o :: [[Int]]) (s_az3p :: String) ->
      showList__ @ [Int] GHC.Show.$fShowInt_$cshowList ls_az3o s_az3p

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$cshow :: [Int] -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: [Int]) ->
                 showList__ @ Int GHC.Show.$fShowInt1 x_az3n (GHC.Types.[] @ Char)}]
GHC.Show.$fShow[]_$s$cshow
  = \ (x_az3n :: [Int]) ->
      showList__ @ Int GHC.Show.$fShowInt1 x_az3n (GHC.Types.[] @ Char)

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$s$fShow[]1_rC0O :: Int -> [String] -> ShowS
[GblId, Arity=3, Str=<L,A>, Unf=OtherCon []]
$s$fShow[]1_rC0O
  = \ _ [Occ=Dead] -> GHC.Show.$fShow[]_$s$cshowList1

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$cshow2 :: [String] -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: [String]) ->
                 showList__
                   @ [Char]
                   GHC.Show.$fShow(,)_$cshowList1
                   x_az3n
                   (GHC.Types.[] @ Char)}]
GHC.Show.$fShow[]_$s$cshow2
  = \ (x_az3n :: [String]) ->
      showList__
        @ [Char]
        GHC.Show.$fShow(,)_$cshowList1
        x_az3n
        (GHC.Types.[] @ Char)

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$cshow :: forall a. Show a => [a] -> String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LLC(C(S))),1*U(A,A,1*C1(C1(U)))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azLN)
                 ($dShow_azLO [Occ=Once] :: Show a_azLN)
                 (x_az3n [Occ=Once] :: [a_azLN]) ->
                 showList @ a_azLN $dShow_azLO x_az3n (GHC.Types.[] @ Char)}]
GHC.Show.$fShow[]_$cshow
  = \ (@ a_azLN) ($dShow_azLO :: Show a_azLN) (x_az3n :: [a_azLN]) ->
      showList @ a_azLN $dShow_azLO x_az3n (GHC.Types.[] @ Char)

-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$cshowList2 :: [[String]] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [[String]])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ [String] GHC.Show.$fShow[]_$s$cshowList1 ls_az3o s_az3p}]
GHC.Show.$fShow[]_$s$cshowList2
  = \ (ls_az3o :: [[String]]) (s_az3p :: String) ->
      showList__
        @ [String] GHC.Show.$fShow[]_$s$cshowList1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$fShow[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: Show [String]
[GblId,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: [String]
                       \ _ [Occ=Dead] -> GHC.Show.$fShow[]_$s$cshowList1
                       GHC.Show.$fShow[]_$s$cshow2
                       GHC.Show.$fShow[]_$s$cshowList2]
GHC.Show.$fShow[]_$s$fShow[]2
  = GHC.Show.C:Show
      @ [String]
      $s$fShow[]1_rC0O
      GHC.Show.$fShow[]_$s$cshow2
      GHC.Show.$fShow[]_$s$cshowList2

-- RHS size: {terms: 9, types: 11, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$cshowList :: forall a. Show a => [[a]] -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C(C1(U)))><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azLN)
                 ($dShow_azLO [Occ=Once] :: Show a_azLN)
                 (ls_az3o [Occ=Once] :: [[a_azLN]])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ [a_azLN] (showList @ a_azLN $dShow_azLO) ls_az3o s_az3p}]
GHC.Show.$fShow[]_$cshowList
  = \ (@ a_azLN)
      ($dShow_azLO :: Show a_azLN)
      (ls_az3o :: [[a_azLN]])
      (s_az3p :: String) ->
      showList__
        @ [a_azLN] (showList @ a_azLN $dShow_azLO) ls_az3o s_az3p

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$s$fShow[]2_rC0P :: Int -> [Int] -> String -> String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []]
$s$fShow[]2_rC0P
  = \ _ [Occ=Dead] (eta_B2 :: [Int]) (eta1_B1 :: String) ->
      GHC.Show.$fShowInt_$cshowList eta_B2 eta1_B1

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShow[]_$s$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: Show [Int]
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: [Int]
                       \ _ [Occ=Dead] -> GHC.Show.$fShowInt_$cshowList
                       GHC.Show.$fShow[]_$s$cshow
                       GHC.Show.$fShow[]_$s$cshowList]
GHC.Show.$fShow[]_$s$fShow[]
  = GHC.Show.C:Show
      @ [Int]
      $s$fShow[]2_rC0P
      GHC.Show.$fShow[]_$s$cshow
      GHC.Show.$fShow[]_$s$cshowList

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/1}
GHC.Show.$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show [a]
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(A,A,U)>m,
 Unf=DFun: \ (@ a_az7Z) (v_B1 :: Show a_az7Z) ->
       GHC.Show.C:Show TYPE: [a_az7Z]
                       \ _ [Occ=Dead] -> showList @ a_az7Z v_B1
                       GHC.Show.$fShow[]_$cshow @ a_az7Z v_B1
                       GHC.Show.$fShow[]_$cshowList @ a_az7Z v_B1]
GHC.Show.$fShow[]
  = \ (@ a_azLN) ($dShow_azLO :: Show a_azLN) ->
      let {
        lvl45_sAof :: [a_azLN] -> ShowS
        [LclId]
        lvl45_sAof = showList @ a_azLN $dShow_azLO } in
      GHC.Show.C:Show
        @ [a_azLN]
        (\ _ [Occ=Dead] -> lvl45_sAof)
        (GHC.Show.$fShow[]_$cshow @ a_azLN $dShow_azLO)
        (GHC.Show.$fShow[]_$cshowList @ a_azLN $dShow_azLO)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl20_rC0Q :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl20_rC0Q = "DoubleRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl21_rC0R :: [Char]
[GblId]
lvl21_rC0R = unpackCString# lvl20_rC0Q

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl22_rC0S :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl22_rC0S = "FloatRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl23_rC0T :: [Char]
[GblId]
lvl23_rC0T = unpackCString# lvl22_rC0S

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl24_rC0U :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl24_rC0U = "AddrRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl25_rC0V :: [Char]
[GblId]
lvl25_rC0V = unpackCString# lvl24_rC0U

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl26_rC0W :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl26_rC0W = "Word64Rep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl27_rC0X :: [Char]
[GblId]
lvl27_rC0X = unpackCString# lvl26_rC0W

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl28_rC0Y :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl28_rC0Y = "Int64Rep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl29_rC0Z :: [Char]
[GblId]
lvl29_rC0Z = unpackCString# lvl28_rC0Y

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl30_rC10 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl30_rC10 = "WordRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl31_rC11 :: [Char]
[GblId]
lvl31_rC11 = unpackCString# lvl30_rC10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl32_rC12 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl32_rC12 = "IntRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl33_rC13 :: [Char]
[GblId]
lvl33_rC13 = unpackCString# lvl32_rC12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl34_rC14 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl34_rC14 = "UnliftedRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl35_rC15 :: [Char]
[GblId]
lvl35_rC15 = unpackCString# lvl34_rC14

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl36_rC16 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl36_rC16 = "LiftedRep"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl37_rC17 :: [Char]
[GblId]
lvl37_rC17 = unpackCString# lvl36_rC16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl38_rC18 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl38_rC18 = "SumRep "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl39_rC19 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl39_rC19 = "TupleRep "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl40_rC1a :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl40_rC1a = "VecRep "#

Rec {
-- RHS size: {terms: 178, types: 81, coercions: 0, joins: 0/7}
GHC.Show.$fShowRuntimeRep_$cshowsPrec [Occ=LoopBreaker]
  :: Int -> RuntimeRep -> ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []]
GHC.Show.$fShowRuntimeRep_$cshowsPrec
  = \ (a_azgJ :: Int) (ds_dzRx :: RuntimeRep) (eta_B1 :: String) ->
      case ds_dzRx of {
        VecRep b1_azgK b2_azgL ->
          case a_azgJ of { I# x_alMY ->
          let {
            p_sAdH [Dmd=<L,1*C1(U)>] :: ShowS
            [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []]
            p_sAdH
              = \ (x1_XnTa [OS=OneShot] :: String) ->
                  unpackAppendCString#
                    lvl40_rC1a
                    (GHC.Show.$w$cshowsPrec9
                       b1_azgK
                       (GHC.Types.:
                          @ Char
                          GHC.Show.showSpace1
                          (GHC.Show.$w$cshowsPrec10 b2_azgL x1_XnTa))) } in
          case >=# x_alMY 11# of {
            __DEFAULT -> p_sAdH eta_B1;
            1# ->
              GHC.Types.:
                @ Char
                GHC.Show.$fShow(,)4
                (p_sAdH (GHC.Types.: @ Char GHC.Show.$fShow(,)2 eta_B1))
          }
          };
        TupleRep b1_azgN ->
          case a_azgJ of { I# x_alMY ->
          let {
            p_sAdR [Dmd=<L,1*C1(U)>] :: ShowS
            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
            p_sAdR
              = \ (x1_inLI [OS=OneShot] :: String) ->
                  unpackAppendCString#
                    lvl39_rC19
                    (case b1_azgN of {
                       [] -> unpackAppendCString# GHC.Show.showList__4 x1_inLI;
                       : x2_az84 xs_az85 ->
                         GHC.Types.:
                           @ Char
                           GHC.Show.showList__3
                           (GHC.Show.$fShowRuntimeRep_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              x2_az84
                              (let {
                                 lvl45_sAgl :: [Char]
                                 [LclId, Unf=OtherCon []]
                                 lvl45_sAgl = GHC.Types.: @ Char GHC.Show.showList__2 x1_inLI } in
                               letrec {
                                 showl_sAeB [Occ=LoopBreaker] :: [RuntimeRep] -> String
                                 [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                                 showl_sAeB
                                   = \ (ds1_dzRg :: [RuntimeRep]) ->
                                       case ds1_dzRg of {
                                         [] -> lvl45_sAgl;
                                         : y_az88 ys_az89 ->
                                           GHC.Types.:
                                             @ Char
                                             GHC.Show.showList__1
                                             (GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                GHC.Show.$fShow(,)1 y_az88 (showl_sAeB ys_az89))
                                       }; } in
                               showl_sAeB xs_az85))
                     }) } in
          case >=# x_alMY 11# of {
            __DEFAULT -> p_sAdR eta_B1;
            1# ->
              GHC.Types.:
                @ Char
                GHC.Show.$fShow(,)4
                (p_sAdR (GHC.Types.: @ Char GHC.Show.$fShow(,)2 eta_B1))
          }
          };
        SumRep b1_azgP ->
          case a_azgJ of { I# x_alMY ->
          let {
            p_sAdZ [Dmd=<L,1*C1(U)>] :: ShowS
            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
            p_sAdZ
              = \ (x1_inLI [OS=OneShot] :: String) ->
                  unpackAppendCString#
                    lvl38_rC18
                    (case b1_azgP of {
                       [] -> unpackAppendCString# GHC.Show.showList__4 x1_inLI;
                       : x2_az84 xs_az85 ->
                         GHC.Types.:
                           @ Char
                           GHC.Show.showList__3
                           (GHC.Show.$fShowRuntimeRep_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              x2_az84
                              (let {
                                 lvl45_sAgl :: [Char]
                                 [LclId, Unf=OtherCon []]
                                 lvl45_sAgl = GHC.Types.: @ Char GHC.Show.showList__2 x1_inLI } in
                               letrec {
                                 showl_sAeB [Occ=LoopBreaker] :: [RuntimeRep] -> String
                                 [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                                 showl_sAeB
                                   = \ (ds1_dzRg :: [RuntimeRep]) ->
                                       case ds1_dzRg of {
                                         [] -> lvl45_sAgl;
                                         : y_az88 ys_az89 ->
                                           GHC.Types.:
                                             @ Char
                                             GHC.Show.showList__1
                                             (GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                GHC.Show.$fShow(,)1 y_az88 (showl_sAeB ys_az89))
                                       }; } in
                               showl_sAeB xs_az85))
                     }) } in
          case >=# x_alMY 11# of {
            __DEFAULT -> p_sAdZ eta_B1;
            1# ->
              GHC.Types.:
                @ Char
                GHC.Show.$fShow(,)4
                (p_sAdZ (GHC.Types.: @ Char GHC.Show.$fShow(,)2 eta_B1))
          }
          };
        LiftedRep -> ++ @ Char lvl37_rC17 eta_B1;
        UnliftedRep -> ++ @ Char lvl35_rC15 eta_B1;
        IntRep -> ++ @ Char lvl33_rC13 eta_B1;
        WordRep -> ++ @ Char lvl31_rC11 eta_B1;
        Int64Rep -> ++ @ Char lvl29_rC0Z eta_B1;
        Word64Rep -> ++ @ Char lvl27_rC0X eta_B1;
        AddrRep -> ++ @ Char lvl25_rC0V eta_B1;
        FloatRep -> ++ @ Char lvl23_rC0T eta_B1;
        DoubleRep -> ++ @ Char lvl21_rC0R eta_B1
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowRuntimeRep1 :: RuntimeRep -> ShowS
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Show.$fShowRuntimeRep1
  = GHC.Show.$fShowRuntimeRep_$cshowsPrec GHC.Show.$fShow(,)1

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowRuntimeRep_$cshowList :: [RuntimeRep] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [RuntimeRep])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ RuntimeRep GHC.Show.$fShowRuntimeRep1 ls_az3o s_az3p}]
GHC.Show.$fShowRuntimeRep_$cshowList
  = \ (ls_az3o :: [RuntimeRep]) (s_az3p :: String) ->
      showList__ @ RuntimeRep GHC.Show.$fShowRuntimeRep1 ls_az3o s_az3p

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShowRuntimeRep_$cshow :: RuntimeRep -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: RuntimeRep) ->
                 GHC.Show.$fShowRuntimeRep_$cshowsPrec
                   GHC.Show.$fShow(,)1 x_az3n (GHC.Types.[] @ Char)}]
GHC.Show.$fShowRuntimeRep_$cshow
  = \ (x_az3n :: RuntimeRep) ->
      GHC.Show.$fShowRuntimeRep_$cshowsPrec
        GHC.Show.$fShow(,)1 x_az3n (GHC.Types.[] @ Char)

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowRuntimeRep [InlPrag=NOUSERINLINE CONLIKE]
  :: Show RuntimeRep
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: RuntimeRep
                       GHC.Show.$fShowRuntimeRep_$cshowsPrec
                       GHC.Show.$fShowRuntimeRep_$cshow
                       GHC.Show.$fShowRuntimeRep_$cshowList]
GHC.Show.$fShowRuntimeRep
  = GHC.Show.C:Show
      @ RuntimeRep
      GHC.Show.$fShowRuntimeRep_$cshowsPrec
      GHC.Show.$fShowRuntimeRep_$cshow
      GHC.Show.$fShowRuntimeRep_$cshowList

-- RHS size: {terms: 14, types: 22, coercions: 0, joins: 0/0}
GHC.Show.$fShowCallStack2 :: ([Char], SrcLoc) -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(U,U(U,U,U,U(U),U(U),U(U),U(U)))><L,U>m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 70 30}]
GHC.Show.$fShowCallStack2
  = \ (w_sBdO :: ([Char], SrcLoc)) (w1_sBdP :: String) ->
      case w_sBdO of { (ww1_sBdS, ww2_sBdT) ->
      case GHC.Show.$w$s$cshowsPrec ww1_sBdS ww2_sBdT w1_sBdP of
      { (# ww4_sBhi, ww5_sBhj #) ->
      GHC.Types.: @ Char ww4_sBhi ww5_sBhj
      }
      }

-- RHS size: {terms: 10, types: 12, coercions: 0, joins: 0/1}
GHC.Show.$fShowCallStack_$cshowsPrec :: Int -> CallStack -> ShowS
[GblId,
 Arity=2,
 Str=<L,A><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead] (eta_B1 [Occ=Once] :: CallStack) ->
                 let {
                   ls_sAda [Occ=OnceL] :: [([Char], SrcLoc)]
                   [LclId]
                   ls_sAda = getCallStack eta_B1 } in
                 \ (s_az3p [Occ=Once] :: String) ->
                   showList__
                     @ ([Char], SrcLoc) GHC.Show.$fShowCallStack2 ls_sAda s_az3p}]
GHC.Show.$fShowCallStack_$cshowsPrec
  = \ _ [Occ=Dead] (eta_B1 :: CallStack) ->
      let {
        ls_sAda :: [([Char], SrcLoc)]
        [LclId]
        ls_sAda = getCallStack eta_B1 } in
      \ (s_az3p :: String) ->
        showList__
          @ ([Char], SrcLoc) GHC.Show.$fShowCallStack2 ls_sAda s_az3p

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowCallStack3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowCallStack3 = unpackCString# GHC.Show.showList__4

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl41_rC1b :: [Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
lvl41_rC1b
  = GHC.Types.: @ Char GHC.Show.showList__2 (GHC.Types.[] @ Char)

Rec {
-- RHS size: {terms: 21, types: 37, coercions: 0, joins: 0/0}
GHC.Show.$fShowCallStack_showl [Occ=LoopBreaker]
  :: [([Char], SrcLoc)] -> String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []]
GHC.Show.$fShowCallStack_showl
  = \ (ds_dzRg :: [([Char], SrcLoc)]) ->
      case ds_dzRg of {
        [] -> lvl41_rC1b;
        : y_az88 ys_az89 ->
          GHC.Types.:
            @ Char
            GHC.Show.showList__1
            (case y_az88 of { (ww1_XBB5, ww2_XBB7) ->
             case GHC.Show.$w$s$cshowsPrec
                    ww1_XBB5 ww2_XBB7 (GHC.Show.$fShowCallStack_showl ys_az89)
             of
             { (# ww4_sBhi, ww5_sBhj #) ->
             GHC.Types.: @ Char ww4_sBhi ww5_sBhj
             }
             })
      }
end Rec }

-- RHS size: {terms: 22, types: 33, coercions: 0, joins: 0/0}
GHC.Show.$fShowCallStack_$cshow :: CallStack -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 140 30}]
GHC.Show.$fShowCallStack_$cshow
  = \ (x_az3n :: CallStack) ->
      case getCallStack x_az3n of {
        [] -> GHC.Show.$fShowCallStack3;
        : x1_az84 xs_az85 ->
          GHC.Types.:
            @ Char
            GHC.Show.showList__3
            (case x1_az84 of { (ww1_sBdS, ww2_sBdT) ->
             case GHC.Show.$w$s$cshowsPrec
                    ww1_sBdS ww2_sBdT (GHC.Show.$fShowCallStack_showl xs_az85)
             of
             { (# ww4_sBhi, ww5_sBhj #) ->
             GHC.Types.: @ Char ww4_sBhi ww5_sBhj
             }
             })
      }

-- RHS size: {terms: 9, types: 11, coercions: 0, joins: 0/1}
GHC.Show.$fShowCallStack1 :: CallStack -> String -> String
[GblId,
 Arity=1,
 Str=<L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_inLI [Occ=Once] :: CallStack) ->
                 let {
                   ls_sAd8 [Occ=OnceL] :: [([Char], SrcLoc)]
                   [LclId]
                   ls_sAd8 = getCallStack x_inLI } in
                 \ (s_XzbS [Occ=Once] :: String) ->
                   showList__
                     @ ([Char], SrcLoc) GHC.Show.$fShowCallStack2 ls_sAd8 s_XzbS}]
GHC.Show.$fShowCallStack1
  = \ (x_inLI :: CallStack) ->
      let {
        ls_sAd8 :: [([Char], SrcLoc)]
        [LclId]
        ls_sAd8 = getCallStack x_inLI } in
      \ (s_XzbS :: String) ->
        showList__
          @ ([Char], SrcLoc) GHC.Show.$fShowCallStack2 ls_sAd8 s_XzbS

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowCallStack_$cshowList :: [CallStack] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [CallStack])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ CallStack GHC.Show.$fShowCallStack1 ls_az3o s_az3p}]
GHC.Show.$fShowCallStack_$cshowList
  = \ (ls_az3o :: [CallStack]) (s_az3p :: String) ->
      showList__ @ CallStack GHC.Show.$fShowCallStack1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowCallStack [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CallStack
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CallStack
                       GHC.Show.$fShowCallStack_$cshowsPrec
                       GHC.Show.$fShowCallStack_$cshow
                       GHC.Show.$fShowCallStack_$cshowList]
GHC.Show.$fShowCallStack
  = GHC.Show.C:Show
      @ CallStack
      GHC.Show.$fShowCallStack_$cshowsPrec
      GHC.Show.$fShowCallStack_$cshow
      GHC.Show.$fShowCallStack_$cshowList

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowNonEmpty2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Show.$fShowNonEmpty2 = GHC.Types.I# 6#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowNonEmpty1 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowNonEmpty1 = " :| "#

-- RHS size: {terms: 36, types: 19, coercions: 0, joins: 0/2}
GHC.Show.$w$cshowsPrec7 [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int# -> a -> [a] -> ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(C1(C(U))),A,1*C1(C(U)))><S,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 0 0 0] 291 120}]
GHC.Show.$w$cshowsPrec7
  = \ (@ a_sBfe)
      (w_sBff :: Show a_sBfe)
      (ww_sBfk :: Int#)
      (ww1_sBfo :: a_sBfe)
      (ww2_sBfp :: [a_sBfe]) ->
      let {
        f12_sAd6 [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f12_sAd6
          = showsPrec @ a_sBfe w_sBff GHC.Show.$fShowNonEmpty2 ww1_sBfo } in
      let {
        g_sAd4 [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        g_sAd4 = showList @ a_sBfe w_sBff ww2_sBfp } in
      case >=# ww_sBfk 6# of {
        __DEFAULT ->
          \ (x_XnTs :: String) ->
            f12_sAd6
              (unpackAppendCString# GHC.Show.$fShowNonEmpty1 (g_sAd4 x_XnTs));
        1# ->
          \ (x_XnPe :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (f12_sAd6
                 (unpackAppendCString#
                    GHC.Show.$fShowNonEmpty1
                    (g_sAd4 (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe))))
      }

-- RHS size: {terms: 15, types: 15, coercions: 0, joins: 0/0}
GHC.Show.$fShowNonEmpty_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => Int -> NonEmpty a -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S(S),1*U(U)><S,1*U(U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_sBfe)
                 (w_sBff [Occ=Once] :: Show a_sBfe)
                 (w1_sBfg [Occ=Once!] :: Int)
                 (w2_sBfh [Occ=Once!] :: NonEmpty a_sBfe) ->
                 case w1_sBfg of { I# ww1_sBfk [Occ=Once] ->
                 case w2_sBfh of { :| ww3_sBfo [Occ=Once] ww4_sBfp [Occ=Once] ->
                 GHC.Show.$w$cshowsPrec7 @ a_sBfe w_sBff ww1_sBfk ww3_sBfo ww4_sBfp
                 }
                 }}]
GHC.Show.$fShowNonEmpty_$cshowsPrec
  = \ (@ a_sBfe)
      (w_sBff :: Show a_sBfe)
      (w1_sBfg :: Int)
      (w2_sBfh :: NonEmpty a_sBfe) ->
      case w1_sBfg of { I# ww1_sBfk ->
      case w2_sBfh of { :| ww3_sBfo ww4_sBfp ->
      GHC.Show.$w$cshowsPrec7 @ a_sBfe w_sBff ww1_sBfk ww3_sBfo ww4_sBfp
      }
      }

-- RHS size: {terms: 14, types: 10, coercions: 0, joins: 0/0}
GHC.Show.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => a -> [a] -> String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(1*C1(C1(C1(U))),A,1*C1(C1(U)))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0] 120 0}]
GHC.Show.$w$cshow
  = \ (@ a_sBfs)
      (w_sBft :: Show a_sBfs)
      (ww_sBfx :: a_sBfs)
      (ww1_sBfy :: [a_sBfs]) ->
      showsPrec
        @ a_sBfs
        w_sBft
        GHC.Show.$fShowNonEmpty2
        ww_sBfx
        (unpackAppendCString#
           GHC.Show.$fShowNonEmpty1
           (showList @ a_sBfs w_sBft ww1_sBfy (GHC.Types.[] @ Char)))

-- RHS size: {terms: 10, types: 12, coercions: 0, joins: 0/0}
GHC.Show.$fShowNonEmpty_$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a. Show a => NonEmpty a -> String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(C(C1(C1(U))),A,C(C1(U)))><S,1*U(U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_sBfs)
                 (w_sBft [Occ=Once] :: Show a_sBfs)
                 (w1_sBfu [Occ=Once!] :: NonEmpty a_sBfs) ->
                 case w1_sBfu of { :| ww1_sBfx [Occ=Once] ww2_sBfy [Occ=Once] ->
                 GHC.Show.$w$cshow @ a_sBfs w_sBft ww1_sBfx ww2_sBfy
                 }}]
GHC.Show.$fShowNonEmpty_$cshow
  = \ (@ a_sBfs)
      (w_sBft :: Show a_sBfs)
      (w1_sBfu :: NonEmpty a_sBfs) ->
      case w1_sBfu of { :| ww1_sBfx ww2_sBfy ->
      GHC.Show.$w$cshow @ a_sBfs w_sBft ww1_sBfx ww2_sBfy
      }

-- RHS size: {terms: 16, types: 18, coercions: 0, joins: 0/0}
GHC.Show.$fShowNonEmpty_$cshowList
  :: forall a. Show a => [NonEmpty a] -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_aztY)
                 ($dShow_aztZ [Occ=Once] :: Show a_aztY)
                 (ls_az3o [Occ=Once] :: [NonEmpty a_aztY])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (NonEmpty a_aztY)
                   (GHC.Show.$fShowNonEmpty_$cshowsPrec
                      @ a_aztY $dShow_aztZ GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShowNonEmpty_$cshowList
  = \ (@ a_aztY)
      ($dShow_aztZ :: Show a_aztY)
      (ls_az3o :: [NonEmpty a_aztY])
      (s_az3p :: String) ->
      showList__
        @ (NonEmpty a_aztY)
        (\ (w_sBfh :: NonEmpty a_aztY) ->
           case w_sBfh of { :| ww1_sBfo ww2_sBfp ->
           GHC.Show.$w$cshowsPrec7 @ a_aztY $dShow_aztZ 0# ww1_sBfo ww2_sBfp
           })
        ls_az3o
        s_az3p

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
GHC.Show.$fShowNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (NonEmpty a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))>m,
 Unf=DFun: \ (@ a_aza0) (v_B1 :: Show a_aza0) ->
       GHC.Show.C:Show TYPE: NonEmpty a_aza0
                       GHC.Show.$fShowNonEmpty_$cshowsPrec @ a_aza0 v_B1
                       GHC.Show.$fShowNonEmpty_$cshow @ a_aza0 v_B1
                       GHC.Show.$fShowNonEmpty_$cshowList @ a_aza0 v_B1]
GHC.Show.$fShowNonEmpty
  = \ (@ a_aztY) ($dShow_aztZ :: Show a_aztY) ->
      GHC.Show.C:Show
        @ (NonEmpty a_aztY)
        (GHC.Show.$fShowNonEmpty_$cshowsPrec @ a_aztY $dShow_aztZ)
        (GHC.Show.$fShowNonEmpty_$cshow @ a_aztY $dShow_aztZ)
        (GHC.Show.$fShowNonEmpty_$cshowList @ a_aztY $dShow_aztZ)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowMaybe5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Show.$fShowMaybe5 = "Nothing"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowMaybe4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowMaybe4 = unpackCString# GHC.Show.$fShowMaybe5

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowMaybe3 :: [Char] -> [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Show.$fShowMaybe3 = ++ @ Char GHC.Show.$fShowMaybe4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowMaybe2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Show.$fShowMaybe2 = "Just "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowMaybe1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Show.$fShowMaybe1 = unpackCString# GHC.Show.$fShowMaybe2

-- RHS size: {terms: 37, types: 22, coercions: 0, joins: 0/1}
GHC.Show.$fShowMaybe_$cshowsPrec
  :: forall a. Show a => Int -> Maybe a -> ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 20 30] 241 180}]
GHC.Show.$fShowMaybe_$cshowsPrec
  = \ (@ a_azus)
      ($dShow_azut :: Show a_azus)
      (ds_dzRA :: Int)
      (ds1_dzRB :: Maybe a_azus) ->
      case ds1_dzRB of {
        Nothing -> GHC.Show.$fShowMaybe3;
        Just b1_azh2 ->
          case ds_dzRA of { I# x_alMY ->
          let {
            g_sAcP [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sAcP = showsPrec @ a_azus $dShow_azut appPrec1 b1_azh2 } in
          case >=# x_alMY 11# of {
            __DEFAULT ->
              \ (x1_inLI :: String) ->
                ++ @ Char GHC.Show.$fShowMaybe1 (g_sAcP x1_inLI);
            1# ->
              \ (x1_XnPe :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     GHC.Show.$fShowMaybe1
                     (g_sAcP (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x1_XnPe)))
          }
          }
      }

-- RHS size: {terms: 15, types: 12, coercions: 0, joins: 0/0}
GHC.Show.$fShowMaybe_$cshow
  :: forall a. Show a => Maybe a -> String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30] 100 0}]
GHC.Show.$fShowMaybe_$cshow
  = \ (@ a_azus)
      ($dShow_azut :: Show a_azus)
      (x_az3n :: Maybe a_azus) ->
      case x_az3n of {
        Nothing -> GHC.Show.$fShowMaybe4;
        Just b1_azh2 ->
          ++
            @ Char
            GHC.Show.$fShowMaybe1
            (showsPrec
               @ a_azus $dShow_azut appPrec1 b1_azh2 (GHC.Types.[] @ Char))
      }

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
GHC.Show.$fShowMaybe_$cshowList
  :: forall a. Show a => [Maybe a] -> ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_azus)
                 ($dShow_azut [Occ=Once] :: Show a_azus)
                 (ls_az3o [Occ=Once] :: [Maybe a_azus])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__
                   @ (Maybe a_azus)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ a_azus $dShow_azut GHC.Show.$fShow(,)1)
                   ls_az3o
                   s_az3p}]
GHC.Show.$fShowMaybe_$cshowList
  = \ (@ a_azus)
      ($dShow_azut :: Show a_azus)
      (ls_az3o :: [Maybe a_azus])
      (s_az3p :: String) ->
      showList__
        @ (Maybe a_azus)
        (GHC.Show.$fShowMaybe_$cshowsPrec
           @ a_azus $dShow_azut GHC.Show.$fShow(,)1)
        ls_az3o
        s_az3p

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
GHC.Show.$fShowMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Maybe a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>m,
 Unf=DFun: \ (@ a_aza1) (v_B1 :: Show a_aza1) ->
       GHC.Show.C:Show TYPE: Maybe a_aza1
                       GHC.Show.$fShowMaybe_$cshowsPrec @ a_aza1 v_B1
                       GHC.Show.$fShowMaybe_$cshow @ a_aza1 v_B1
                       GHC.Show.$fShowMaybe_$cshowList @ a_aza1 v_B1]
GHC.Show.$fShowMaybe
  = \ (@ a_azus) ($dShow_azut :: Show a_azus) ->
      GHC.Show.C:Show
        @ (Maybe a_azus)
        (GHC.Show.$fShowMaybe_$cshowsPrec @ a_azus $dShow_azut)
        (GHC.Show.$fShowMaybe_$cshow @ a_azus $dShow_azut)
        (GHC.Show.$fShowMaybe_$cshowList @ a_azus $dShow_azut)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_rC1c :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f_rC1c = "KindRepTypeLitD "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f1_rC1d :: [Char]
[GblId]
f1_rC1d = unpackCString# f_rC1c

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f2_rC1e :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f2_rC1e = "KindRepTypeLitS "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f3_rC1f :: [Char]
[GblId]
f3_rC1f = unpackCString# f2_rC1e

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f4_rC1g :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f4_rC1g = "KindRepTYPE "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f5_rC1h :: [Char]
[GblId]
f5_rC1h = unpackCString# f4_rC1g

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f6_rC1i :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f6_rC1i = "KindRepFun "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f7_rC1j :: [Char]
[GblId]
f7_rC1j = unpackCString# f6_rC1i

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f8_rC1k :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f8_rC1k = "KindRepApp "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f9_rC1l :: [Char]
[GblId]
f9_rC1l = unpackCString# f8_rC1k

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f10_rC1m :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f10_rC1m = "KindRepVar "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f11_rC1n :: [Char]
[GblId]
f11_rC1n = unpackCString# f10_rC1m

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl42_rC1o :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl42_rC1o = " "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl43_rC1p :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl43_rC1p = "KindRepTyConApp "#

Rec {
-- RHS size: {terms: 382, types: 187, coercions: 0, joins: 0/9}
GHC.Show.$w$cshowsPrec5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Int# -> KindRep -> ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []]
GHC.Show.$w$cshowsPrec5
  = \ (ww_sBfO :: Int#) (w_sBfL :: KindRep) ->
      case w_sBfL of {
        KindRepTyConApp p_az3t q_az3u ->
          let {
            f12_sAbD [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            f12_sAbD
              = case p_az3t of
                { TyCon ds_dzWD ds1_dzWE ds2_dzWF tc_name_az7V ds3_dzWG ds4_dzWH ->
                case tc_name_az7V of {
                  TrNameS s_az7S -> ++ @ Char (unpackCString# s_az7S);
                  TrNameD s_az7T -> ++ @ Char s_az7T
                }
                } } in
          let {
            p1_sAbB :: ShowS
            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
            p1_sAbB
              = \ (x_XnTE :: String) ->
                  unpackAppendCString#
                    lvl43_rC1p
                    (f12_sAbD
                       (unpackAppendCString#
                          lvl42_rC1o
                          (case q_az3u of {
                             [] -> unpackAppendCString# GHC.Show.showList__4 x_XnTE;
                             : x1_az84 xs_az85 ->
                               GHC.Types.:
                                 @ Char
                                 GHC.Show.showList__3
                                 (GHC.Show.$w$cshowsPrec5
                                    0#
                                    x1_az84
                                    (let {
                                       lvl45_sAgl :: [Char]
                                       [LclId, Unf=OtherCon []]
                                       lvl45_sAgl
                                         = GHC.Types.: @ Char GHC.Show.showList__2 x_XnTE } in
                                     letrec {
                                       showl_sAeB [Occ=LoopBreaker] :: [KindRep] -> String
                                       [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                                       showl_sAeB
                                         = \ (ds_dzRg :: [KindRep]) ->
                                             case ds_dzRg of {
                                               [] -> lvl45_sAgl;
                                               : y_az88 ys_az89 ->
                                                 GHC.Types.:
                                                   @ Char
                                                   GHC.Show.showList__1
                                                   (GHC.Show.$w$cshowsPrec5
                                                      0# y_az88 (showl_sAeB ys_az89))
                                             }; } in
                                     showl_sAeB xs_az85))
                           }))) } in
          case ># ww_sBfO 10# of {
            __DEFAULT -> p1_sAbB;
            1# ->
              \ (x_XnPe :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (p1_sAbB (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe))
          };
        KindRepVar dt_dzXd ->
          case ># ww_sBfO 10# of {
            __DEFAULT ->
              \ (x_inLI :: String) ->
                ++
                  @ Char
                  f11_rC1n
                  (case <# dt_dzXd 0# of {
                     __DEFAULT ->
                       case GHC.Show.$witos dt_dzXd x_inLI of
                       { (# ww2_sBh3, ww3_sBh4 #) ->
                       GHC.Types.: @ Char ww2_sBh3 ww3_sBh4
                       };
                     1# ->
                       GHC.Types.:
                         @ Char
                         GHC.Show.$fShow(,)4
                         (case GHC.Show.$witos
                                 dt_dzXd (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_inLI)
                          of
                          { (# ww2_sBh3, ww3_sBh4 #) ->
                          GHC.Types.: @ Char ww2_sBh3 ww3_sBh4
                          })
                   });
            1# ->
              \ (x_XnPe :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     f11_rC1n
                     (case <# dt_dzXd 0# of {
                        __DEFAULT ->
                          case GHC.Show.$witos
                                 dt_dzXd (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe)
                          of
                          { (# ww2_sBh3, ww3_sBh4 #) ->
                          GHC.Types.: @ Char ww2_sBh3 ww3_sBh4
                          };
                        1# ->
                          GHC.Types.:
                            @ Char
                            GHC.Show.$fShow(,)4
                            (case GHC.Show.$witos
                                    dt_dzXd
                                    (GHC.Types.:
                                       @ Char
                                       GHC.Show.$fShow(,)2
                                       (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe))
                             of
                             { (# ww2_sBh3, ww3_sBh4 #) ->
                             GHC.Types.: @ Char ww2_sBh3 ww3_sBh4
                             })
                      }))
          };
        KindRepApp p_az3w q_az3x ->
          let {
            f12_sAbV [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            f12_sAbV = GHC.Show.$w$cshowsPrec5 11# p_az3w } in
          let {
            g_sAbT [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sAbT = GHC.Show.$w$cshowsPrec5 11# q_az3x } in
          case ># ww_sBfO 10# of {
            __DEFAULT ->
              \ (x_XnTG :: String) ->
                ++
                  @ Char
                  f9_rC1l
                  (f12_sAbV (unpackAppendCString# lvl42_rC1o (g_sAbT x_XnTG)));
            1# ->
              \ (x_XnPe :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     f9_rC1l
                     (f12_sAbV
                        (unpackAppendCString#
                           lvl42_rC1o
                           (g_sAbT (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe)))))
          };
        KindRepFun p_az3z q_az3A ->
          let {
            f12_sAc9 [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            f12_sAc9 = GHC.Show.$w$cshowsPrec5 11# p_az3z } in
          let {
            g_sAc7 [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sAc7 = GHC.Show.$w$cshowsPrec5 11# q_az3A } in
          case ># ww_sBfO 10# of {
            __DEFAULT ->
              \ (x_XnTG :: String) ->
                ++
                  @ Char
                  f7_rC1j
                  (f12_sAc9 (unpackAppendCString# lvl42_rC1o (g_sAc7 x_XnTG)));
            1# ->
              \ (x_XnPe :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     f7_rC1j
                     (f12_sAc9
                        (unpackAppendCString#
                           lvl42_rC1o
                           (g_sAc7 (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe)))))
          };
        KindRepTYPE rep_az3C ->
          case ># ww_sBfO 10# of {
            __DEFAULT ->
              \ (x_inLI :: String) ->
                ++
                  @ Char
                  f5_rC1h
                  (GHC.Show.$fShowRuntimeRep_$cshowsPrec appPrec1 rep_az3C x_inLI);
            1# ->
              \ (x_XnPe :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     f5_rC1h
                     (GHC.Show.$fShowRuntimeRep_$cshowsPrec
                        appPrec1 rep_az3C (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe)))
          };
        KindRepTypeLitS p_az3E q_az3F ->
          let {
            cs_sAct :: [Char]
            [LclId]
            cs_sAct = unpackCString# q_az3F } in
          case ># ww_sBfO 10# of {
            __DEFAULT ->
              \ (x_XnTG :: String) ->
                ++
                  @ Char
                  f3_rC1f
                  (case p_az3E of {
                     TypeLitSymbol ->
                       ++
                         @ Char
                         GHC.Show.$fShowTypeLitSort4
                         (unpackAppendCString#
                            lvl42_rC1o
                            (GHC.Types.:
                               @ Char
                               GHC.Show.$fShow(,)3
                               (showLitString
                                  cs_sAct (GHC.Types.: @ Char GHC.Show.$fShow(,)3 x_XnTG))));
                     TypeLitNat ->
                       ++
                         @ Char
                         GHC.Show.$fShowTypeLitSort2
                         (unpackAppendCString#
                            lvl42_rC1o
                            (GHC.Types.:
                               @ Char
                               GHC.Show.$fShow(,)3
                               (showLitString
                                  cs_sAct (GHC.Types.: @ Char GHC.Show.$fShow(,)3 x_XnTG))))
                   });
            1# ->
              \ (x_XnPe :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     f3_rC1f
                     (case p_az3E of {
                        TypeLitSymbol ->
                          ++
                            @ Char
                            GHC.Show.$fShowTypeLitSort4
                            (unpackAppendCString#
                               lvl42_rC1o
                               (GHC.Types.:
                                  @ Char
                                  GHC.Show.$fShow(,)3
                                  (showLitString
                                     cs_sAct
                                     (GHC.Types.:
                                        @ Char
                                        GHC.Show.$fShow(,)3
                                        (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe)))));
                        TypeLitNat ->
                          ++
                            @ Char
                            GHC.Show.$fShowTypeLitSort2
                            (unpackAppendCString#
                               lvl42_rC1o
                               (GHC.Types.:
                                  @ Char
                                  GHC.Show.$fShow(,)3
                                  (showLitString
                                     cs_sAct
                                     (GHC.Types.:
                                        @ Char
                                        GHC.Show.$fShow(,)3
                                        (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe)))))
                      }))
          };
        KindRepTypeLitD p_az3H q_az3I ->
          case ># ww_sBfO 10# of {
            __DEFAULT ->
              \ (x_XnTG :: String) ->
                ++
                  @ Char
                  f1_rC1d
                  (case p_az3H of {
                     TypeLitSymbol ->
                       ++
                         @ Char
                         GHC.Show.$fShowTypeLitSort4
                         (unpackAppendCString#
                            lvl42_rC1o
                            (GHC.Types.:
                               @ Char
                               GHC.Show.$fShow(,)3
                               (showLitString
                                  q_az3I (GHC.Types.: @ Char GHC.Show.$fShow(,)3 x_XnTG))));
                     TypeLitNat ->
                       ++
                         @ Char
                         GHC.Show.$fShowTypeLitSort2
                         (unpackAppendCString#
                            lvl42_rC1o
                            (GHC.Types.:
                               @ Char
                               GHC.Show.$fShow(,)3
                               (showLitString
                                  q_az3I (GHC.Types.: @ Char GHC.Show.$fShow(,)3 x_XnTG))))
                   });
            1# ->
              \ (x_XnPe :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (++
                     @ Char
                     f1_rC1d
                     (case p_az3H of {
                        TypeLitSymbol ->
                          ++
                            @ Char
                            GHC.Show.$fShowTypeLitSort4
                            (unpackAppendCString#
                               lvl42_rC1o
                               (GHC.Types.:
                                  @ Char
                                  GHC.Show.$fShow(,)3
                                  (showLitString
                                     q_az3I
                                     (GHC.Types.:
                                        @ Char
                                        GHC.Show.$fShow(,)3
                                        (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe)))));
                        TypeLitNat ->
                          ++
                            @ Char
                            GHC.Show.$fShowTypeLitSort2
                            (unpackAppendCString#
                               lvl42_rC1o
                               (GHC.Types.:
                                  @ Char
                                  GHC.Show.$fShow(,)3
                                  (showLitString
                                     q_az3I
                                     (GHC.Types.:
                                        @ Char
                                        GHC.Show.$fShow(,)3
                                        (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_XnPe)))))
                      }))
          }
      }
end Rec }

-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowKindRep_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> KindRep -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sBfK [Occ=Once!] :: Int)
                 (w1_sBfL [Occ=Once] :: KindRep) ->
                 case w_sBfK of { I# ww1_sBfO [Occ=Once] ->
                 GHC.Show.$w$cshowsPrec5 ww1_sBfO w1_sBfL
                 }}]
GHC.Show.$fShowKindRep_$cshowsPrec
  = \ (w_sBfK :: Int) (w1_sBfL :: KindRep) ->
      case w_sBfK of { I# ww1_sBfO ->
      GHC.Show.$w$cshowsPrec5 ww1_sBfO w1_sBfL
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowKindRep1 :: KindRep -> ShowS
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
GHC.Show.$fShowKindRep1
  = \ (w_sBfL :: KindRep) -> GHC.Show.$w$cshowsPrec5 0# w_sBfL

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Show.$fShowKindRep_$cshowList :: [KindRep] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [KindRep])
                 (s_az3p [Occ=Once] :: String) ->
                 showList__ @ KindRep GHC.Show.$fShowKindRep1 ls_az3o s_az3p}]
GHC.Show.$fShowKindRep_$cshowList
  = \ (ls_az3o :: [KindRep]) (s_az3p :: String) ->
      showList__ @ KindRep GHC.Show.$fShowKindRep1 ls_az3o s_az3p

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.Show.$fShowKindRep_$cshow :: KindRep -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: KindRep) ->
                 GHC.Show.$fShowKindRep_$cshowsPrec
                   GHC.Show.$fShow(,)1 x_az3n (GHC.Types.[] @ Char)}]
GHC.Show.$fShowKindRep_$cshow
  = \ (x_az3n :: KindRep) ->
      GHC.Show.$w$cshowsPrec5 0# x_az3n (GHC.Types.[] @ Char)

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowKindRep [InlPrag=NOUSERINLINE CONLIKE]
  :: Show KindRep
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: KindRep
                       GHC.Show.$fShowKindRep_$cshowsPrec
                       GHC.Show.$fShowKindRep_$cshow
                       GHC.Show.$fShowKindRep_$cshowList]
GHC.Show.$fShowKindRep
  = GHC.Show.C:Show
      @ KindRep
      GHC.Show.$fShowKindRep_$cshowsPrec
      GHC.Show.$fShowKindRep_$cshow
      GHC.Show.$fShowKindRep_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl44_rC1q :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl44_rC1q = "Char.intToDigit: not a digit "#

-- RHS size: {terms: 12, types: 14, coercions: 0, joins: 0/0}
GHC.Show.intToDigit1 :: Int# -> Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
GHC.Show.intToDigit1
  = \ (i_az8U :: Int#) ->
      errorWithoutStackTrace
        @ 'LiftedRep
        @ Char
        (unpackAppendCString#
           lvl44_rC1q
           (case GHC.Show.$witos i_az8U (GHC.Types.[] @ Char) of
            { (# ww1_sBh3, ww2_sBh4 #) ->
            GHC.Types.: @ Char ww1_sBh3 ww2_sBh4
            }))

-- RHS size: {terms: 44, types: 8, coercions: 0, joins: 1/1}
GHC.Show.$wintToDigit [InlPrag=NOUSERINLINE[0]] :: Int# -> Char#
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 131 0}]
GHC.Show.$wintToDigit
  = \ (ww_sBfV :: Int#) ->
      join {
        $j_sAuR [Dmd=<L,1*U>] :: Char#
        [LclId[JoinId(0)]]
        $j_sAuR
          = case >=# ww_sBfV 10# of {
              __DEFAULT -> case GHC.Show.intToDigit1 ww_sBfV of wild_00 { };
              1# ->
                case <=# ww_sBfV 15# of {
                  __DEFAULT -> case GHC.Show.intToDigit1 ww_sBfV of wild_00 { };
                  1# -> chr# (-# (+# 97# ww_sBfV) 10#)
                }
            } } in
      case >=# ww_sBfV 0# of {
        __DEFAULT -> jump $j_sAuR;
        1# ->
          case <=# ww_sBfV 9# of {
            __DEFAULT -> jump $j_sAuR;
            1# -> chr# (+# 48# ww_sBfV)
          }
      }

-- RHS size: {terms: 10, types: 4, coercions: 0, joins: 0/0}
intToDigit [InlPrag=NOUSERINLINE[0]] :: Int -> Char
[GblId,
 Arity=1,
 Str=<S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sBfS [Occ=Once!] :: Int) ->
                 case w_sBfS of { I# ww1_sBfV [Occ=Once] ->
                 case GHC.Show.$wintToDigit ww1_sBfV of ww2_sBfZ { __DEFAULT ->
                 GHC.Types.C# ww2_sBfZ
                 }
                 }}]
intToDigit
  = \ (w_sBfS :: Int) ->
      case w_sBfS of { I# ww1_sBfV ->
      case GHC.Show.$wintToDigit ww1_sBfV of ww2_sBfZ { __DEFAULT ->
      GHC.Types.C# ww2_sBfZ
      }
      }

Rec {
-- RHS size: {terms: 31, types: 17, coercions: 0, joins: 0/0}
GHC.Show.$wjblock' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Int# -> Int# -> String -> (# Char, [Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U>,
 Unf=OtherCon []]
GHC.Show.$wjblock'
  = \ (ww_sBg6 :: Int#) (ww1_sBga :: Int#) (w_sBg3 :: String) ->
      case ww_sBg6 of wild_Xow {
        __DEFAULT ->
          case quotRemInt# ww1_sBga 10# of { (# ipv_izOn, ipv1_izOo #) ->
          GHC.Show.$wjblock'
            (-# wild_Xow 1#)
            ipv_izOn
            (GHC.Types.:
               @ Char (GHC.Types.C# (chr# (+# 48# ipv1_izOo))) w_sBg3)
          };
        1# -> (# GHC.Types.C# (chr# (+# 48# ww1_sBga)), w_sBg3 #)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowInteger3 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
GHC.Show.$fShowInteger3 = 1000000000000000000

Rec {
-- RHS size: {terms: 39, types: 37, coercions: 0, joins: 0/0}
GHC.Show.$fShowInteger_jprintb [Occ=LoopBreaker]
  :: [Integer] -> String -> String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []]
GHC.Show.$fShowInteger_jprintb
  = \ (ds_dzNx :: [Integer]) (cs_az9F :: String) ->
      case ds_dzNx of {
        [] -> cs_az9F;
        : n_az9G ns_az9H ->
          case quotRemInteger n_az9G GHC.Show.$fShowInteger3 of
          { (# ipv_sA2A, ipv1_sA2B #) ->
          case integerToInt ipv_sA2A of wild1_XF { __DEFAULT ->
          case GHC.Show.$wjblock'
                 18#
                 wild1_XF
                 (case integerToInt ipv1_sA2B of wild2_Xp9 { __DEFAULT ->
                  case GHC.Show.$wjblock'
                         18# wild2_Xp9 (GHC.Show.$fShowInteger_jprintb ns_az9H cs_az9F)
                  of
                  { (# ww1_sBhr, ww2_sBhs #) ->
                  GHC.Types.: @ Char ww1_sBhr ww2_sBhs
                  }
                  })
          of
          { (# ww1_sBhr, ww2_sBhs #) ->
          GHC.Types.: @ Char ww1_sBhr ww2_sBhs
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 19, types: 18, coercions: 0, joins: 0/0}
jsplitb_rC1r :: Integer -> [Integer] -> [Integer]
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,1*U>, Unf=OtherCon []]
jsplitb_rC1r
  = \ (ds_dzN6 :: Integer) (ds1_dzN7 :: [Integer]) ->
      case ds1_dzN7 of {
        [] -> GHC.Types.[] @ Integer;
        : n_az9u ns_az9v ->
          case quotRemInteger n_az9u ds_dzN6 of
          { (# ipv_sA2F, ipv1_sA2G #) ->
          GHC.Types.:
            @ Integer
            ipv_sA2F
            (GHC.Types.: @ Integer ipv1_sA2G (jsplitb_rC1r ds_dzN6 ns_az9v))
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowInteger1 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
GHC.Show.$fShowInteger1 = 0

Rec {
-- RHS size: {terms: 41, types: 37, coercions: 0, joins: 0/0}
GHC.Show.$wjsplitf [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Integer -> Integer -> (# Integer, [Integer] #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []]
GHC.Show.$wjsplitf
  = \ (w_sBgu :: Integer) (w1_sBgv :: Integer) ->
      case gtInteger# w_sBgu w1_sBgv of {
        __DEFAULT ->
          case GHC.Show.$wjsplitf (timesInteger w_sBgu w_sBgu) w1_sBgv of
          { (# ww1_sBhx, ww2_sBhy #) ->
          case quotRemInteger ww1_sBhx w_sBgu of
          { (# ipv_sA2O, ipv1_sA2P #) ->
          case gtInteger# ipv_sA2O GHC.Show.$fShowInteger1 of {
            __DEFAULT -> (# ipv1_sA2P, jsplitb_rC1r w_sBgu ww2_sBhy #);
            1# ->
              (# ipv_sA2O,
                 GHC.Types.: @ Integer ipv1_sA2P (jsplitb_rC1r w_sBgu ww2_sBhy) #)
          }
          }
          };
        1# -> (# w1_sBgv, GHC.Types.[] @ Integer #)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Show.$fShowInteger2 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
GHC.Show.$fShowInteger2 = 1000000000000000000000000000000000000

-- RHS size: {terms: 61, types: 34, coercions: 0, joins: 0/0}
GHC.Show.$wintegerToString' [InlPrag=NOUSERINLINE[0]]
  :: Integer -> String -> (# Char, [Char] #)
[GblId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 481 0}]
GHC.Show.$wintegerToString'
  = \ (w_sBgA :: Integer) (w1_sBgB :: String) ->
      case ltInteger# w_sBgA GHC.Show.$fShowInteger3 of {
        __DEFAULT ->
          case GHC.Show.$wjsplitf GHC.Show.$fShowInteger2 w_sBgA of
          { (# ww1_sBhx, ww2_sBhy #) ->
          case quotRemInteger ww1_sBhx GHC.Show.$fShowInteger3 of
          { (# ipv_sA2X, ipv1_sA2Y #) ->
          case integerToInt ipv_sA2X of wild1_XF { __DEFAULT ->
          case ># wild1_XF 0# of {
            __DEFAULT ->
              case integerToInt ipv1_sA2Y of wild2_XoU { __DEFAULT ->
              GHC.Show.$witos'
                wild2_XoU (GHC.Show.$fShowInteger_jprintb ww2_sBhy w1_sBgB)
              };
            1# ->
              GHC.Show.$witos'
                wild1_XF
                (case integerToInt ipv1_sA2Y of wild2_XoU { __DEFAULT ->
                 case GHC.Show.$wjblock'
                        18# wild2_XoU (GHC.Show.$fShowInteger_jprintb ww2_sBhy w1_sBgB)
                 of
                 { (# ww4_sBhr, ww5_sBhs #) ->
                 GHC.Types.: @ Char ww4_sBhr ww5_sBhs
                 }
                 })
          }
          }
          }
          };
        1# ->
          case integerToInt w_sBgA of wild1_XF { __DEFAULT ->
          GHC.Show.$witos' wild1_XF w1_sBgB
          }
      }

-- RHS size: {terms: 22, types: 18, coercions: 0, joins: 0/0}
GHC.Show.$wintegerToString [InlPrag=NOUSERINLINE[0]]
  :: Integer -> String -> (# Char, [Char] #)
[GblId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 150 30}]
GHC.Show.$wintegerToString
  = \ (w_sBgG :: Integer) (w1_sBgH :: String) ->
      case ltInteger# w_sBgG GHC.Show.$fShowInteger1 of {
        __DEFAULT -> GHC.Show.$wintegerToString' w_sBgG w1_sBgH;
        1# ->
          (# GHC.Show.showLitChar1,
             case GHC.Show.$wintegerToString' (negateInteger w_sBgG) w1_sBgH of
             { (# ww1_sBhA, ww2_sBhB #) ->
             GHC.Types.: @ Char ww1_sBhA ww2_sBhB
             } #)
      }

-- RHS size: {terms: 33, types: 21, coercions: 0, joins: 0/0}
GHC.Show.$w$cshowsPrec4 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> Integer -> String -> (# Char, [Char] #)
[GblId,
 Arity=3,
 Str=<S,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 191 30}]
GHC.Show.$w$cshowsPrec4
  = \ (ww_sBgR :: Int#) (w_sBgN :: Integer) (w1_sBgO :: String) ->
      case ># ww_sBgR 6# of {
        __DEFAULT -> GHC.Show.$wintegerToString w_sBgN w1_sBgO;
        1# ->
          case ltInteger# w_sBgN GHC.Show.$fShowInteger1 of {
            __DEFAULT -> GHC.Show.$wintegerToString w_sBgN w1_sBgO;
            1# ->
              (# GHC.Show.$fShow(,)4,
                 case GHC.Show.$wintegerToString
                        w_sBgN (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_sBgO)
                 of
                 { (# ww2_sBhD, ww3_sBhE #) ->
                 GHC.Types.: @ Char ww2_sBhD ww3_sBhE
                 } #)
          }
      }

-- RHS size: {terms: 15, types: 15, coercions: 0, joins: 0/0}
GHC.Show.$fShowInteger_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> Integer -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sBgM [Occ=Once!] :: Int)
                 (w1_sBgN [Occ=Once] :: Integer)
                 (w2_sBgO [Occ=Once] :: String) ->
                 case w_sBgM of { I# ww1_sBgR [Occ=Once] ->
                 case GHC.Show.$w$cshowsPrec4 ww1_sBgR w1_sBgN w2_sBgO of
                 { (# ww3_sBhG [Occ=Once], ww4_sBhH [Occ=Once] #) ->
                 GHC.Types.: @ Char ww3_sBhG ww4_sBhH
                 }
                 }}]
GHC.Show.$fShowInteger_$cshowsPrec
  = \ (w_sBgM :: Int) (w1_sBgN :: Integer) (w2_sBgO :: String) ->
      case w_sBgM of { I# ww1_sBgR ->
      case GHC.Show.$w$cshowsPrec4 ww1_sBgR w1_sBgN w2_sBgO of
      { (# ww3_sBhG, ww4_sBhH #) ->
      GHC.Types.: @ Char ww3_sBhG ww4_sBhH
      }
      }

-- RHS size: {terms: 10, types: 12, coercions: 0, joins: 0/0}
GHC.Show.$fShowInteger_$cshow :: Integer -> String
[GblId,
 Arity=1,
 Str=<S,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_az3n [Occ=Once] :: Integer) ->
                 GHC.Show.$fShowInteger_$cshowsPrec
                   GHC.Show.$fShow(,)1 x_az3n (GHC.Types.[] @ Char)}]
GHC.Show.$fShowInteger_$cshow
  = \ (x_az3n :: Integer) ->
      case GHC.Show.$w$cshowsPrec4 0# x_az3n (GHC.Types.[] @ Char) of
      { (# ww1_sBhG, ww2_sBhH #) ->
      GHC.Types.: @ Char ww1_sBhG ww2_sBhH
      }

-- RHS size: {terms: 44, types: 43, coercions: 0, joins: 0/2}
GHC.Show.$fShowInteger_$cshowList :: [Integer] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0] 290 30}]
GHC.Show.$fShowInteger_$cshowList
  = \ (ds_dzR9 :: [Integer]) (s_az82 :: String) ->
      case ds_dzR9 of {
        [] -> unpackAppendCString# GHC.Show.showList__4 s_az82;
        : x_az84 xs_az85 ->
          GHC.Types.:
            @ Char
            GHC.Show.showList__3
            (case GHC.Show.$w$cshowsPrec4
                    0#
                    x_az84
                    (let {
                       lvl45_sAgl :: [Char]
                       [LclId, Unf=OtherCon []]
                       lvl45_sAgl = GHC.Types.: @ Char GHC.Show.showList__2 s_az82 } in
                     letrec {
                       showl_sAeB [Occ=LoopBreaker] :: [Integer] -> String
                       [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                       showl_sAeB
                         = \ (ds1_dzRg :: [Integer]) ->
                             case ds1_dzRg of {
                               [] -> lvl45_sAgl;
                               : y_az88 ys_az89 ->
                                 GHC.Types.:
                                   @ Char
                                   GHC.Show.showList__1
                                   (case GHC.Show.$w$cshowsPrec4 0# y_az88 (showl_sAeB ys_az89) of
                                    { (# ww1_sBhG, ww2_sBhH #) ->
                                    GHC.Types.: @ Char ww1_sBhG ww2_sBhH
                                    })
                             }; } in
                     showl_sAeB xs_az85)
             of
             { (# ww1_sBhG, ww2_sBhH #) ->
             GHC.Types.: @ Char ww1_sBhG ww2_sBhH
             })
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Show.$fShowInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Integer
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Integer
                       GHC.Show.$fShowInteger_$cshowsPrec
                       GHC.Show.$fShowInteger_$cshow
                       GHC.Show.$fShowInteger_$cshowList]
GHC.Show.$fShowInteger
  = GHC.Show.C:Show
      @ Integer
      GHC.Show.$fShowInteger_$cshowsPrec
      GHC.Show.$fShowInteger_$cshow
      GHC.Show.$fShowInteger_$cshowList


------ Local rules for imported ids --------
"SPEC $cshow"
    forall ($dShow_XzOw :: Show String).
      GHC.Show.$fShow[]_$cshow @ String $dShow_XzOw
      = GHC.Show.$fShow[]_$s$cshow2
"SPEC $cshow"
    forall ($dShow_azLW :: Show Char).
      GHC.Show.$fShow[]_$cshow @ Char $dShow_azLW
      = GHC.Show.$fShow[]_$s$cshow1
"SPEC $cshow"
    forall ($dShow_azM0 :: Show Int).
      GHC.Show.$fShow[]_$cshow @ Int $dShow_azM0
      = GHC.Show.$fShow[]_$s$cshow
"SPEC $cshowList"
    forall ($dShow_XzOw :: Show String).
      GHC.Show.$fShow[]_$cshowList @ String $dShow_XzOw
      = GHC.Show.$fShow[]_$s$cshowList2
"SPEC $cshowList"
    forall ($dShow_azLW :: Show Char).
      GHC.Show.$fShow[]_$cshowList @ Char $dShow_azLW
      = GHC.Show.$fShow[]_$s$cshowList1
"SPEC $cshowList"
    forall ($dShow_azM0 :: Show Int).
      GHC.Show.$fShow[]_$cshowList @ Int $dShow_azM0
      = GHC.Show.$fShow[]_$s$cshowList
"SPEC $fShow[]"
    forall ($dShow_XzOw :: Show String).
      GHC.Show.$fShow[] @ String $dShow_XzOw
      = GHC.Show.$fShow[]_$s$fShow[]2
"SPEC $fShow[]"
    forall ($dShow_azLW :: Show Char).
      GHC.Show.$fShow[] @ Char $dShow_azLW
      = GHC.Show.$fShow[]_$s$fShow[]1
"SPEC $fShow[]"
    forall ($dShow_azM0 :: Show Int).
      GHC.Show.$fShow[] @ Int $dShow_azM0
      = GHC.Show.$fShow[]_$s$fShow[]

