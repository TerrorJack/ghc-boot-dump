
==================== Raw Cmm ====================
2018-03-16 16:08:34.684625916 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:34.685785439 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule4_bytes" {
     GHC.ExecutionStack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.687608315 UTC

[section ""data" . GHC.ExecutionStack.$trModule3_closure" {
     GHC.ExecutionStack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.689315413 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule2_bytes" {
     GHC.ExecutionStack.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.691001523 UTC

[section ""data" . GHC.ExecutionStack.$trModule1_closure" {
     GHC.ExecutionStack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.692803114 UTC

[section ""data" . GHC.ExecutionStack.$trModule_closure" {
     GHC.ExecutionStack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.$trModule3_closure+1;
         const GHC.ExecutionStack.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.697542788 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace1_closure" {
     GHC.ExecutionStack.getStackTrace1_closure:
         const GHC.ExecutionStack.getStackTrace1_info;
         const 0;
 },
 sat_sdnA7_entry() //  [R1]
         { []
         }
     {offset
       cdnEo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnEp; else goto cdnEq;
       cdnEp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnEq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnEh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnEx; else goto cdnEi;
       udnEx: // global
           call _cdnEh(R1) args: 0, res: 0, upd: 0;
       cdnEi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdnA7_info" {
     sat_sdnA7_info:
         const sat_sdnA7_entry;
         const 1;
         const 4294967312;
         const SdnAQ_srt;
 },
 _cdnEh() //  [R1]
         { []
         }
     {offset
       cdnEh: // global
           if (R1 & 7 == 1) goto cdnEl; else goto cdnEm;
       cdnEl: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdnEm: // global
           R2 = P64[R1 + 6];
           Sp = Sp + 8;
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnEh_info" {
     block_cdnEh_info:
         const _cdnEh;
         const 0;
         const 4294967326;
         const SdnAQ_srt;
 },
 GHC.ExecutionStack.getStackTrace1_entry() //  []
         { []
         }
     {offset
       cdnEy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnEz; else goto cdnEA;
       cdnEz: // global
           R1 = GHC.ExecutionStack.getStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnEA: // global
           I64[Sp - 8] = block_cdnEb_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.getStackTrace1_info" {
     GHC.ExecutionStack.getStackTrace1_info:
         const GHC.ExecutionStack.getStackTrace1_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SdnAQ_srt;
 },
 _cdnEb() //  [R1]
         { []
         }
     {offset
       cdnEb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnED; else goto cdnEC;
       cdnED: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnEC: // global
           I64[Hp - 16] = sat_sdnA7_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnEb_info" {
     block_cdnEb_info:
         const _cdnEb;
         const 0;
         const 4294967326;
         const SdnAQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.706295213 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace_closure" {
     GHC.ExecutionStack.getStackTrace_closure:
         const GHC.ExecutionStack.getStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.getStackTrace_entry() //  []
         { []
         }
     {offset
       cdnF2: // global
           call GHC.ExecutionStack.getStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.getStackTrace_info" {
     GHC.ExecutionStack.getStackTrace_info:
         const GHC.ExecutionStack.getStackTrace_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SdnAQ_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.712232985 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace1_closure" {
     GHC.ExecutionStack.showStackTrace1_closure:
         const GHC.ExecutionStack.showStackTrace1_info;
         const 0;
 },
 sat_sdnAg_entry() //  [R1]
         { []
         }
     {offset
       cdnFC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnFD; else goto cdnFE;
       cdnFD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnFE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdnAg_info" {
     sat_sdnAg_info:
         const sat_sdnAg_entry;
         const 1;
         const 16;
 },
 sat_sdnAh_entry() //  [R1]
         { []
         }
     {offset
       cdnFF: // global
           _sdnAh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnFG; else goto cdnFH;
       cdnFH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnFJ; else goto cdnFI;
       cdnFJ: // global
           HpAlloc = 24;
           goto cdnFG;
       cdnFG: // global
           R1 = _sdnAh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnFI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdnAh::P64;
           _sdnAf::P64 = P64[_sdnAh::P64 + 16];
           I64[Hp - 16] = sat_sdnAg_info;
           P64[Hp] = _sdnAf::P64;
           R3 = Hp - 16;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdnAh_info" {
     sat_sdnAh_info:
         const sat_sdnAh_entry;
         const 1;
         const 16;
 },
 sat_sdnAi_entry() //  [R1]
         { []
         }
     {offset
       cdnFO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnFP; else goto cdnFQ;
       cdnFP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnFQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnFj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnG8; else goto cdnFk;
       udnG8: // global
           call _cdnFj(R1) args: 0, res: 0, upd: 0;
       cdnFk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdnAi_info" {
     sat_sdnAi_info:
         const sat_sdnAi_entry;
         const 1;
         const 4294967312;
         const SdnAQ_srt;
 },
 _cdnFj() //  [R1]
         { []
         }
     {offset
       cdnFj: // global
           if (R1 & 7 == 1) goto udnG4; else goto cdnFM;
       udnG4: // global
           Sp = Sp + 8;
           call _cdnFX() args: 0, res: 0, upd: 0;
       cdnFM: // global
           I64[Sp] = block_cdnFp_info;
           R2 = P64[R1 + 6];
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnFj_info" {
     block_cdnFj_info:
         const _cdnFj;
         const 0;
         const 4294967326;
         const SdnAQ_srt;
 },
 _cdnFp() //  [R1]
         { []
         }
     {offset
       cdnFp: // global
           if (R1 & 7 == 1) goto udnG5; else goto cdnFZ;
       udnG5: // global
           Sp = Sp + 8;
           call _cdnFX() args: 0, res: 0, upd: 0;
       cdnFZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnG2; else goto cdnG1;
       cdnG2: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnG1: // global
           _sdnAf::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_sdnAh_info;
           P64[Hp - 16] = _sdnAf::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnFp_info" {
     block_cdnFp_info:
         const _cdnFp;
         const 0;
         const 30;
 },
 _cdnFX() //  []
         { []
         }
     {offset
       cdnFX: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.showStackTrace1_entry() //  []
         { []
         }
     {offset
       cdnG9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnGa; else goto cdnGb;
       cdnGa: // global
           R1 = GHC.ExecutionStack.showStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnGb: // global
           I64[Sp - 8] = block_cdnFd_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.showStackTrace1_info" {
     GHC.ExecutionStack.showStackTrace1_info:
         const GHC.ExecutionStack.showStackTrace1_entry;
         const 0;
         const 47244640270;
         const 4294967299;
         const SdnAQ_srt;
 },
 _cdnFd() //  [R1]
         { []
         }
     {offset
       cdnFd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnGe; else goto cdnGd;
       cdnGe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnGd: // global
           I64[Hp - 16] = sat_sdnAi_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnFd_info" {
     block_cdnFd_info:
         const _cdnFd;
         const 0;
         const 4294967326;
         const SdnAQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.726958612 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace_closure" {
     GHC.ExecutionStack.showStackTrace_closure:
         const GHC.ExecutionStack.showStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.showStackTrace_entry() //  []
         { []
         }
     {offset
       cdnGU: // global
           call GHC.ExecutionStack.showStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.showStackTrace_info" {
     GHC.ExecutionStack.showStackTrace_info:
         const GHC.ExecutionStack.showStackTrace_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SdnAQ_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.730060116 UTC

[section ""relreadonly" . SdnAQ_srt" {
     SdnAQ_srt:
         const GHC.ExecutionStack.Internal.stackFrames_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.ExecutionStack.getStackTrace1_closure;
         const GHC.ExecutionStack.showStackTrace1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.790975948 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:34.79210253 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule4_bytes" {
     GHC.ExecutionStack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.793959103 UTC

[section ""data" . GHC.ExecutionStack.$trModule3_closure" {
     GHC.ExecutionStack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.795916863 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule2_bytes" {
     GHC.ExecutionStack.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.798060089 UTC

[section ""data" . GHC.ExecutionStack.$trModule1_closure" {
     GHC.ExecutionStack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.800103996 UTC

[section ""data" . GHC.ExecutionStack.$trModule_closure" {
     GHC.ExecutionStack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.$trModule3_closure+1;
         const GHC.ExecutionStack.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.803868849 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace1_closure" {
     GHC.ExecutionStack.getStackTrace1_closure:
         const GHC.ExecutionStack.getStackTrace1_info;
         const 0;
 },
 sat_sdnH8_entry() //  [R1]
         { []
         }
     {offset
       cdnHG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnHH; else goto cdnHI;
       cdnHH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnHI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnHz_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnHP; else goto cdnHA;
       udnHP: // global
           call _cdnHz(R1) args: 0, res: 0, upd: 0;
       cdnHA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdnH8_info" {
     sat_sdnH8_info:
         const sat_sdnH8_entry;
         const 1;
         const 4294967312;
         const SdnHW_srt;
 },
 _cdnHz() //  [R1]
         { []
         }
     {offset
       cdnHz: // global
           if (R1 & 7 == 1) goto cdnHD; else goto cdnHE;
       cdnHD: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdnHE: // global
           R2 = P64[R1 + 6];
           Sp = Sp + 8;
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnHz_info" {
     block_cdnHz_info:
         const _cdnHz;
         const 0;
         const 4294967326;
         const SdnHW_srt;
 },
 GHC.ExecutionStack.getStackTrace1_entry() //  []
         { []
         }
     {offset
       cdnHQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnHR; else goto cdnHS;
       cdnHR: // global
           R1 = GHC.ExecutionStack.getStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnHS: // global
           I64[Sp - 8] = block_cdnHt_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.getStackTrace1_info" {
     GHC.ExecutionStack.getStackTrace1_info:
         const GHC.ExecutionStack.getStackTrace1_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SdnHW_srt;
 },
 _cdnHt() //  [R1]
         { []
         }
     {offset
       cdnHt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnHV; else goto cdnHU;
       cdnHV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnHU: // global
           I64[Hp - 16] = sat_sdnH8_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnHt_info" {
     block_cdnHt_info:
         const _cdnHt;
         const 0;
         const 4294967326;
         const SdnHW_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.815581438 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace_closure" {
     GHC.ExecutionStack.getStackTrace_closure:
         const GHC.ExecutionStack.getStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.getStackTrace_entry() //  []
         { []
         }
     {offset
       cdnIq: // global
           call GHC.ExecutionStack.getStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.getStackTrace_info" {
     GHC.ExecutionStack.getStackTrace_info:
         const GHC.ExecutionStack.getStackTrace_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SdnHW_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.825920193 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace1_closure" {
     GHC.ExecutionStack.showStackTrace1_closure:
         const GHC.ExecutionStack.showStackTrace1_info;
         const 0;
 },
 sat_sdnHh_entry() //  [R1]
         { []
         }
     {offset
       cdnJ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnJ1; else goto cdnJ2;
       cdnJ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnJ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdnHh_info" {
     sat_sdnHh_info:
         const sat_sdnHh_entry;
         const 1;
         const 16;
 },
 sat_sdnHi_entry() //  [R1]
         { []
         }
     {offset
       cdnJ3: // global
           _sdnHi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnJ4; else goto cdnJ5;
       cdnJ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnJ7; else goto cdnJ6;
       cdnJ7: // global
           HpAlloc = 24;
           goto cdnJ4;
       cdnJ4: // global
           R1 = _sdnHi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnJ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdnHi::P64;
           _sdnHg::P64 = P64[_sdnHi::P64 + 16];
           I64[Hp - 16] = sat_sdnHh_info;
           P64[Hp] = _sdnHg::P64;
           R3 = Hp - 16;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdnHi_info" {
     sat_sdnHi_info:
         const sat_sdnHi_entry;
         const 1;
         const 16;
 },
 sat_sdnHj_entry() //  [R1]
         { []
         }
     {offset
       cdnJc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnJd; else goto cdnJe;
       cdnJd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnJe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnIH_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnJw; else goto cdnII;
       udnJw: // global
           call _cdnIH(R1) args: 0, res: 0, upd: 0;
       cdnII: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdnHj_info" {
     sat_sdnHj_info:
         const sat_sdnHj_entry;
         const 1;
         const 4294967312;
         const SdnHW_srt;
 },
 _cdnIH() //  [R1]
         { []
         }
     {offset
       cdnIH: // global
           if (R1 & 7 == 1) goto udnJs; else goto cdnJa;
       udnJs: // global
           Sp = Sp + 8;
           call _cdnJl() args: 0, res: 0, upd: 0;
       cdnJa: // global
           I64[Sp] = block_cdnIN_info;
           R2 = P64[R1 + 6];
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnIH_info" {
     block_cdnIH_info:
         const _cdnIH;
         const 0;
         const 4294967326;
         const SdnHW_srt;
 },
 _cdnIN() //  [R1]
         { []
         }
     {offset
       cdnIN: // global
           if (R1 & 7 == 1) goto udnJt; else goto cdnJn;
       udnJt: // global
           Sp = Sp + 8;
           call _cdnJl() args: 0, res: 0, upd: 0;
       cdnJn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnJq; else goto cdnJp;
       cdnJq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnJp: // global
           _sdnHg::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_sdnHi_info;
           P64[Hp - 16] = _sdnHg::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnIN_info" {
     block_cdnIN_info:
         const _cdnIN;
         const 0;
         const 30;
 },
 _cdnJl() //  []
         { []
         }
     {offset
       cdnJl: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.showStackTrace1_entry() //  []
         { []
         }
     {offset
       cdnJx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnJy; else goto cdnJz;
       cdnJy: // global
           R1 = GHC.ExecutionStack.showStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnJz: // global
           I64[Sp - 8] = block_cdnIB_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.showStackTrace1_info" {
     GHC.ExecutionStack.showStackTrace1_info:
         const GHC.ExecutionStack.showStackTrace1_entry;
         const 0;
         const 47244640270;
         const 4294967299;
         const SdnHW_srt;
 },
 _cdnIB() //  [R1]
         { []
         }
     {offset
       cdnIB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnJC; else goto cdnJB;
       cdnJC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnJB: // global
           I64[Hp - 16] = sat_sdnHj_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnIB_info" {
     block_cdnIB_info:
         const _cdnIB;
         const 0;
         const 4294967326;
         const SdnHW_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.841731564 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace_closure" {
     GHC.ExecutionStack.showStackTrace_closure:
         const GHC.ExecutionStack.showStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.showStackTrace_entry() //  []
         { []
         }
     {offset
       cdnKu: // global
           call GHC.ExecutionStack.showStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.showStackTrace_info" {
     GHC.ExecutionStack.showStackTrace_info:
         const GHC.ExecutionStack.showStackTrace_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SdnHW_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.845040499 UTC

[section ""relreadonly" . SdnHW_srt" {
     SdnHW_srt:
         const GHC.ExecutionStack.Internal.stackFrames_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.ExecutionStack.getStackTrace1_closure;
         const GHC.ExecutionStack.showStackTrace1_closure;
 }]

