
==================== Tidy Core ====================
2018-03-16 15:58:26.674705426 UTC

Result size of Tidy Core
  = {terms: 7,240, types: 16,013, coercions: 4,478, joins: 1/141}

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
readsPrec :: forall a. Read a => Int -> ReadS a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>,
 RULES: Built in rule for readsPrec: "Class op readsPrec"]
readsPrec
  = \ (@ a_a3K2E) (v_B1 :: Read a_a3K2E) ->
      case v_B1 of v_B1 { GHC.Read.C:Read v_B2 v_B3 v_B4 v_B5 -> v_B2 }

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
readList :: forall a. Read a => ReadS [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>,
 RULES: Built in rule for readList: "Class op readList"]
readList
  = \ (@ a_a3K2E) (v_B1 :: Read a_a3K2E) ->
      case v_B1 of v_B1 { GHC.Read.C:Read v_B2 v_B3 v_B4 v_B5 -> v_B3 }

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
readPrec :: forall a. Read a => ReadPrec a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>,
 RULES: Built in rule for readPrec: "Class op readPrec"]
readPrec
  = \ (@ a_a3K2E) (v_B1 :: Read a_a3K2E) ->
      case v_B1 of v_B1 { GHC.Read.C:Read v_B2 v_B3 v_B4 v_B5 -> v_B4 }

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
readListPrec :: forall a. Read a => ReadPrec [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>,
 RULES: Built in rule for readListPrec: "Class op readListPrec"]
readListPrec
  = \ (@ a_a3K2E) (v_B1 :: Read a_a3K2E) ->
      case v_B1 of v_B1 { GHC.Read.C:Read v_B2 v_B3 v_B4 v_B5 -> v_B5 }

-- RHS size: {terms: 13, types: 24, coercions: 0, joins: 0/0}
$dmreadListPrec1_r3N5i
  :: forall a.
     Read a =>
     Prec
     -> forall b.
        ([a] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []]
$dmreadListPrec1_r3N5i
  = \ (@ a_a3K2E)
      ($dRead_a3Kt7 :: Read a_a3K2E)
      _ [Occ=Dead]
      (@ b_s3ofG)
      (eta_B1 :: [a_a3K2E] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ [a_a3K2E] (readList @ a_a3K2E $dRead_a3Kt7) @ b_s3ofG eta_B1
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
GHC.Read.$dmreadListPrec :: forall a. Read a => ReadPrec [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= (\ (@ a_X3K6v)
                  ($dRead_X3KwZ [Occ=OnceL] :: Read a_X3K6v)
                  _ [Occ=Dead] ->
                  let {
                    w_s3ofF [Occ=OnceL] :: ReadS [a_X3K6v]
                    [LclId]
                    w_s3ofF = readList @ a_X3K6v $dRead_X3KwZ } in
                  \ (@ b_s3ofG)
                    (w1_s3ofH [Occ=Once]
                       :: [a_X3K6v] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                    case Text.ParserCombinators.ReadP.$wreadS_to_P
                           @ [a_X3K6v] w_s3ofF @ b_s3ofG w1_s3ofH
                    of
                    { (# ww1_s3oiG [Occ=Once] #) ->
                    Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                    })
               `cast` (forall (a :: <*>_N).
                       <Read a>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <[a]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                <[a]>_R)
                       :: (forall a.
                           Read a =>
                           Prec
                           -> forall b.
                              ([a] -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. Read a => ReadPrec [a] :: *))}]
GHC.Read.$dmreadListPrec
  = $dmreadListPrec1_r3N5i
    `cast` (forall (a :: <*>_N).
            <Read a>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <[a]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <[a]>_R)
            :: (forall a.
                Read a =>
                Prec
                -> forall b.
                   ([a] -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. Read a => ReadPrec [a] :: *))

-- RHS size: {terms: 16, types: 24, coercions: 3, joins: 0/1}
$dmreadPrec1_r3N5j :: forall a. Read a => Prec -> P.ReadP a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []]
$dmreadPrec1_r3N5j
  = \ (@ a_X3K6w) ($dRead_X3Kx0 :: Read a_X3K6w) (eta_B1 :: Prec) ->
      let {
        w_s3LtA [Dmd=<L,C(U)>] :: ReadS a_X3K6w
        [LclId]
        w_s3LtA = readsPrec @ a_X3K6w $dRead_X3Kx0 eta_B1 } in
      (\ (@ b_s3ofG)
         (w1_s3ofH :: a_X3K6w -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
         case Text.ParserCombinators.ReadP.$wreadS_to_P
                @ a_X3K6w w_s3LtA @ b_s3ofG w1_s3ofH
         of
         { (# ww1_s3oiG #) ->
         Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
         })
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_X3K6w>_R)
              :: (forall b.
                  (a_X3K6w -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (P.ReadP a_X3K6w :: *))

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
GHC.Read.$dmreadPrec :: forall a. Read a => ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3Kbt) ($dRead_X3KBY [Occ=OnceL] :: Read a_X3Kbt) ->
                 let {
                   f_a3tmF [Occ=OnceL!] :: Int -> ReadS a_X3Kbt
                   [LclId]
                   f_a3tmF = readsPrec @ a_X3Kbt $dRead_X3KBY } in
                 (\ (n_a3tmG [Occ=Once] :: Prec) ->
                    let {
                      w_s3ofF [Occ=OnceL] :: ReadS a_X3Kbt
                      [LclId]
                      w_s3ofF = f_a3tmF n_a3tmG } in
                    \ (@ b_s3ofG)
                      (w1_s3ofH [Occ=Once]
                         :: a_X3Kbt -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                      case Text.ParserCombinators.ReadP.$wreadS_to_P
                             @ a_X3Kbt w_s3ofF @ b_s3ofG w1_s3ofH
                      of
                      { (# ww1_s3oiG [Occ=Once] #) ->
                      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                      })
                 `cast` ((<Prec>_R
                          ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                        <a_X3Kbt>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <a_X3Kbt>_R)
                         :: (Prec
                             -> forall b.
                                (a_X3Kbt -> Text.ParserCombinators.ReadP.P b)
                                -> Text.ParserCombinators.ReadP.P b :: *)
                            ~R# (ReadPrec a_X3Kbt :: *))}]
GHC.Read.$dmreadPrec
  = $dmreadPrec1_r3N5j
    `cast` (forall (a :: <*>_N).
            <Read a>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. Read a => Prec -> P.ReadP a :: *)
               ~R# (forall a. Read a => ReadPrec a :: *))

-- RHS size: {terms: 8, types: 9, coercions: 4, joins: 0/0}
GHC.Read.$dmreadsPrec :: forall a. Read a => Int -> ReadS a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3K6x) ($dRead_X3Kx1 [Occ=OnceL] :: Read a_X3K6x) ->
                 let {
                   ds_X3tzz [Occ=OnceL] :: ReadPrec a_X3K6x
                   [LclId]
                   ds_X3tzz = readPrec @ a_X3K6x $dRead_X3Kx1 } in
                 \ (n_a3tmE [Occ=Once] :: Int) ->
                   Text.ParserCombinators.ReadP.run
                     @ a_X3K6x
                     ((((ds_X3tzz
                         `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_X3K6x>_R
                                 :: (ReadPrec a_X3K6x :: *) ~R# (Prec -> P.ReadP a_X3K6x :: *)))
                          n_a3tmE)
                       `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_X3K6x>_R
                               :: (P.ReadP a_X3K6x :: *)
                                  ~R# (forall b.
                                       (a_X3K6x -> Text.ParserCombinators.ReadP.P b)
                                       -> Text.ParserCombinators.ReadP.P b :: *)))
                        @ a_X3K6x
                        (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ a_X3K6x))}]
GHC.Read.$dmreadsPrec
  = \ (@ a_X3K6x) ($dRead_X3Kx1 :: Read a_X3K6x) (eta_B1 :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ a_X3K6x
        (((((readPrec @ a_X3K6x $dRead_X3Kx1)
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_X3K6x>_R
                    :: (ReadPrec a_X3K6x :: *) ~R# (Prec -> P.ReadP a_X3K6x :: *)))
             eta_B1)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_X3K6x>_R
                  :: (P.ReadP a_X3K6x :: *)
                     ~R# (forall b.
                          (a_X3K6x -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ a_X3K6x
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ a_X3K6x))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fRead()7 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fRead()7 = GHC.Types.I# 0#

-- RHS size: {terms: 7, types: 11, coercions: 6, joins: 0/0}
readListDefault :: forall a. Read a => ReadS [a]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3Ksg) ($dRead_a3Ksi [Occ=Once] :: Read a_a3Ksg) ->
                 Text.ParserCombinators.ReadP.run
                   @ [a_a3Ksg]
                   (((((readListPrec @ a_a3Ksg $dRead_a3Ksi)
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[a_a3Ksg]>_R
                               :: (ReadPrec [a_a3Ksg] :: *) ~R# (Prec -> P.ReadP [a_a3Ksg] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3Ksg]>_R
                             :: (P.ReadP [a_a3Ksg] :: *)
                                ~R# (forall b.
                                     ([a_a3Ksg] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [a_a3Ksg]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [a_a3Ksg]))}]
readListDefault
  = \ (@ a_a3Ksg) ($dRead_a3Ksi :: Read a_a3Ksg) ->
      Text.ParserCombinators.ReadP.run
        @ [a_a3Ksg]
        (((((readListPrec @ a_a3Ksg $dRead_a3Ksi)
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[a_a3Ksg]>_R
                    :: (ReadPrec [a_a3Ksg] :: *) ~R# (Prec -> P.ReadP [a_a3Ksg] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3Ksg]>_R
                  :: (P.ReadP [a_a3Ksg] :: *)
                     ~R# (forall b.
                          ([a_a3Ksg] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [a_a3Ksg]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [a_a3Ksg]))

-- RHS size: {terms: 6, types: 11, coercions: 0, joins: 0/0}
GHC.Read.lex1 :: Text.ParserCombinators.ReadP.P String
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 20}]
GHC.Read.lex1
  = case Text.Read.Lex.$whsLex
           @ String
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ String)
    of
    { (# ww1_s3xlv #) ->
    Text.ParserCombinators.ReadP.Look @ String ww1_s3xlv
    }

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
lex :: ReadS String
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_a3K7t [Occ=Once] :: String) ->
                 Text.ParserCombinators.ReadP.run @ String GHC.Read.lex1 s_a3K7t}]
lex
  = \ (s_a3K7t :: String) ->
      Text.ParserCombinators.ReadP.run @ String GHC.Read.lex1 s_a3K7t

-- RHS size: {terms: 45, types: 56, coercions: 0, joins: 0/1}
GHC.Read.readParen1 [InlPrag=NOUSERINLINE[0]]
  :: forall a. a -> String -> [(a, String)] -> [(a, String)]
[GblId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 270 0}]
GHC.Read.readParen1
  = \ (@ a_a3Ksn)
      (ww_s3Mnl :: a_a3Ksn)
      (ww1_s3Mnm :: String)
      (w_s3Mni :: [(a_a3Ksn, String)]) ->
      letrec {
        go_X1ybg [Occ=LoopBreaker]
          :: [(String, String)] -> [(a_a3Ksn, String)]
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        go_X1ybg
          = \ (ds_X1ybi :: [(String, String)]) ->
              case ds_X1ybi of {
                [] -> w_s3Mni;
                : y_X1ybq ys_X1ybs ->
                  case y_X1ybq of { (ds1_d3L4M, u_a3K7s) ->
                  case ds1_d3L4M of {
                    [] -> go_X1ybg ys_X1ybs;
                    : ds2_d3L4N ds3_d3L4O ->
                      case ds2_d3L4N of { C# ds4_d3L4P ->
                      case ds4_d3L4P of {
                        __DEFAULT -> go_X1ybg ys_X1ybs;
                        ')'# ->
                          case ds3_d3L4O of {
                            [] ->
                              GHC.Types.:
                                @ (a_a3Ksn, String) (ww_s3Mnl, u_a3K7s) (go_X1ybg ys_X1ybs);
                            : ipv_s3Lej ipv1_s3Lep -> go_X1ybg ys_X1ybs
                          }
                      }
                      }
                  }
                  }
              }; } in
      go_X1ybg
        (Text.ParserCombinators.ReadP.run @ String GHC.Read.lex1 ww1_s3Mnm)

-- RHS size: {terms: 92, types: 124, coercions: 0, joins: 0/5}
readParen :: forall a. Bool -> ReadS a -> ReadS a
[GblId,
 Arity=3,
 Str=<S,1*U><L,C(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [80 60 0] 720 0}]
readParen
  = \ (@ a_a3Ksn)
      (b_a3K7j :: Bool)
      (g_a3K7k :: ReadS a_a3Ksn)
      (eta_B1 :: String) ->
      letrec {
        go_s3MJc [Occ=LoopBreaker]
          :: [(String, String)] -> [(a_a3Ksn, String)]
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        go_s3MJc
          = \ (ds_i1y1c :: [(String, String)]) ->
              case ds_i1y1c of {
                [] -> GHC.Types.[] @ (a_a3Ksn, String);
                : y_i1y1h ys_i1y1i ->
                  case y_i1y1h of { (ds1_d3L5a, s_a3K7p) ->
                  case ds1_d3L5a of {
                    [] -> go_s3MJc ys_i1y1i;
                    : ds2_d3L5b ds3_d3L5c ->
                      case ds2_d3L5b of { C# ds4_d3L5d ->
                      case ds4_d3L5d of {
                        __DEFAULT -> go_s3MJc ys_i1y1i;
                        '('# ->
                          case ds3_d3L5c of {
                            [] ->
                              let {
                                z_X1yb8 :: [(a_a3Ksn, String)]
                                [LclId]
                                z_X1yb8
                                  = let {
                                      z1_X1yba :: [(a_a3Ksn, String)]
                                      [LclId]
                                      z1_X1yba = go_s3MJc ys_i1y1i } in
                                    letrec {
                                      go1_X1ybd [Occ=LoopBreaker]
                                        :: [(a_a3Ksn, String)] -> [(a_a3Ksn, String)]
                                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                                      go1_X1ybd
                                        = \ (ds6_X1ybf :: [(a_a3Ksn, String)]) ->
                                            case ds6_X1ybf of {
                                              [] -> z1_X1yba;
                                              : y1_X1ybn ys1_X1ybp ->
                                                case y1_X1ybn of { (ww1_s3Mnl, ww2_s3Mnm) ->
                                                GHC.Read.readParen1
                                                  @ a_a3Ksn
                                                  ww1_s3Mnl
                                                  ww2_s3Mnm
                                                  (go1_X1ybd ys1_X1ybp)
                                                }
                                            }; } in
                                    go1_X1ybd
                                      (go_s3MJc
                                         (Text.ParserCombinators.ReadP.run
                                            @ String GHC.Read.lex1 s_a3K7p)) } in
                              letrec {
                                go1_X1ybb [Occ=LoopBreaker]
                                  :: [(a_a3Ksn, String)] -> [(a_a3Ksn, String)]
                                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                                go1_X1ybb
                                  = \ (ds6_X1ybd :: [(a_a3Ksn, String)]) ->
                                      case ds6_X1ybd of {
                                        [] -> z_X1yb8;
                                        : y1_X1ybl ys1_X1ybn ->
                                          case y1_X1ybl of { (ww1_s3Mnl, ww2_s3Mnm) ->
                                          GHC.Read.readParen1
                                            @ a_a3Ksn ww1_s3Mnl ww2_s3Mnm (go1_X1ybb ys1_X1ybn)
                                          }
                                      }; } in
                              go1_X1ybb (g_a3K7k s_a3K7p);
                            : ipv_s3Leb ipv1_s3Lex -> go_s3MJc ys_i1y1i
                          }
                      }
                      }
                  }
                  }
              }; } in
      case b_a3K7j of {
        False ->
          ++
            @ (a_a3Ksn, String)
            (g_a3K7k eta_B1)
            (go_s3MJc
               (Text.ParserCombinators.ReadP.run @ String GHC.Read.lex1 eta_B1));
        True ->
          go_s3MJc
            (Text.ParserCombinators.ReadP.run @ String GHC.Read.lex1 eta_B1)
      }

-- RHS size: {terms: 6, types: 11, coercions: 0, joins: 0/0}
GHC.Read.readLitChar1 :: Text.ParserCombinators.ReadP.P Char
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 20}]
GHC.Read.readLitChar1
  = case Text.Read.Lex.$wlexChar
           @ Char (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Char)
    of
    { (# ww1_s3xln #) ->
    Text.ParserCombinators.ReadP.Get @ Char ww1_s3xln
    }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
readLitChar :: ReadS Char
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
readLitChar
  = Text.ParserCombinators.ReadP.run @ Char GHC.Read.readLitChar1

-- RHS size: {terms: 27, types: 18, coercions: 0, joins: 0/1}
GHC.Read.$www1 [InlPrag=NOUSERINLINE[0]]
  :: Char# -> Text.ParserCombinators.ReadP.P String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 122 30}]
GHC.Read.$www1
  = \ (ww_s3MnA :: Char#) ->
      case leWord# (int2Word# (-# (ord# ww_s3MnA) 48#)) 9## of {
        __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ String;
        1# ->
          let {
            wild_i1Mwz :: Char
            [LclId, Unf=OtherCon []]
            wild_i1Mwz = GHC.Types.C# ww_s3MnA } in
          case Text.ParserCombinators.ReadP.$wmunch
                 isDigit
                 @ String
                 (\ (a1_X3nla :: String) ->
                    Text.ParserCombinators.ReadP.Result
                      @ String
                      (GHC.Types.: @ Char wild_i1Mwz a1_X3nla)
                      (Text.ParserCombinators.ReadP.Fail @ String))
          of
          { (# ww2_s3oiM #) ->
          Text.ParserCombinators.ReadP.Look @ String ww2_s3oiM
          }
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.Read.lexDigits_ww1 [InlPrag=NOUSERINLINE[0]]
  :: Char -> Text.ParserCombinators.ReadP.P String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s3Mnx [Occ=Once!] :: Char) ->
                 case w_s3Mnx of { C# ww1_s3MnA [Occ=Once] ->
                 GHC.Read.$www1 ww1_s3MnA
                 }}]
GHC.Read.lexDigits_ww1
  = \ (w_s3Mnx :: Char) ->
      case w_s3Mnx of { C# ww1_s3MnA -> GHC.Read.$www1 ww1_s3MnA }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Read.lexDigits1 :: Text.ParserCombinators.ReadP.P String
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.lexDigits1
  = Text.ParserCombinators.ReadP.Get @ String GHC.Read.lexDigits_ww1

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lexDigits :: ReadS String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
lexDigits
  = Text.ParserCombinators.ReadP.run @ String GHC.Read.lexDigits1

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme1
  :: Prec
     -> forall b1.
        (L.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=2,
 Str=<L,A><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b1_X3nQ4)
                 (eta_B1 [Occ=Once]
                    :: L.Lexeme -> Text.ParserCombinators.ReadP.P b1_X3nQ4) ->
                 Text.Read.Lex.lex1 @ b1_X3nQ4 eta_B1}]
GHC.Read.$fReadLexeme1
  = \ _ [Occ=Dead]
      (@ b1_X3nQ4)
      (eta_B1 :: L.Lexeme -> Text.ParserCombinators.ReadP.P b1_X3nQ4) ->
      Text.Read.Lex.lex1 @ b1_X3nQ4 eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
lexP :: ReadPrec L.Lexeme
[GblId,
 Arity=2,
 Str=<L,A><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Read.$fReadLexeme1
               `cast` ((<Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <L.Lexeme>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                <L.Lexeme>_R)
                       :: (Prec
                           -> forall b.
                              (L.Lexeme -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (ReadPrec L.Lexeme :: *))}]
lexP
  = GHC.Read.$fReadLexeme1
    `cast` ((<Prec>_R
             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                           <L.Lexeme>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <L.Lexeme>_R)
            :: (Prec
                -> forall b.
                   (L.Lexeme -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (ReadPrec L.Lexeme :: *))

-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadChar4
  :: forall b. String -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
GHC.Read.$fReadChar4
  = \ (@ b_a3nvJ) (a3_X3nkL :: String) ->
      case a3_X3nkL of { __DEFAULT ->
      Text.ParserCombinators.ReadP.Fail @ b_a3nvJ
      }

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.Read.$fReadChar3 :: forall b. Text.ParserCombinators.ReadP.P b
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadChar3
  = \ (@ b_a3nvJ) ->
      Text.ParserCombinators.ReadP.Look
        @ b_a3nvJ (GHC.Read.$fReadChar4 @ b_a3nvJ)

-- RHS size: {terms: 54, types: 49, coercions: 11, joins: 0/4}
GHC.Read.$fReadGeneralCategory36
  :: forall a.
     (String, ReadPrec a) -> ReadPrec a -> Prec -> P.ReadP a
[GblId,
 Arity=3,
 Str=<L,U(U,C(C1(U)))><L,1*C1(C(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 60 0] 410 60}]
GHC.Read.$fReadGeneralCategory36
  = \ (@ a_a3Kqu)
      (x_i1Mhr :: (String, ReadPrec a_a3Kqu))
      (eta_B2 [OS=OneShot] :: ReadPrec a_a3Kqu)
      (eta1_B1 :: Prec) ->
      let {
        ds3_s3Ltu [Dmd=<L,C(U)>] :: P.ReadP a_a3Kqu
        [LclId]
        ds3_s3Ltu
          = (eta_B2
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3Kqu>_R
                     :: (ReadPrec a_a3Kqu :: *) ~R# (Prec -> P.ReadP a_a3Kqu :: *)))
              eta1_B1 } in
      (\ (@ b_a3nvJ)
         (k_a3ni6 :: a_a3Kqu -> Text.ParserCombinators.ReadP.P b_a3nvJ) ->
         case x_i1Mhr of { (s_a3K7Y, p_a3K7Z) ->
         let {
           lvl116_X3wk8 :: Text.ParserCombinators.ReadP.P b_a3nvJ
           [LclId]
           lvl116_X3wk8
             = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                 @ b_a3nvJ
                 (GHC.Read.$fReadChar3 @ b_a3nvJ)
                 (let {
                    lvl2_s3MJh :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId]
                    lvl2_s3MJh
                      = (((p_a3K7Z
                           `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3Kqu>_R
                                   :: (ReadPrec a_a3Kqu :: *) ~R# (Prec -> P.ReadP a_a3Kqu :: *)))
                            eta1_B1)
                         `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kqu>_R
                                 :: (P.ReadP a_a3Kqu :: *)
                                    ~R# (forall b.
                                         (a_a3Kqu -> Text.ParserCombinators.ReadP.P b)
                                         -> Text.ParserCombinators.ReadP.P b :: *)))
                          @ b_a3nvJ k_a3ni6 } in
                  Text.Read.Lex.expect2
                    @ b_a3nvJ
                    (\ (a1_a3ngt :: L.Lexeme) ->
                       case a1_a3ngt of {
                         __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_a3nvJ;
                         L.Ident s'_a3K81 ->
                           case eqString s_a3K7Y s'_a3K81 of {
                             False -> Text.ParserCombinators.ReadP.Fail @ b_a3nvJ;
                             True -> lvl2_s3MJh
                           };
                         L.Symbol s'_a3K82 ->
                           case eqString s_a3K7Y s'_a3K82 of {
                             False -> Text.ParserCombinators.ReadP.Fail @ b_a3nvJ;
                             True -> lvl2_s3MJh
                           }
                       })) } in
         let {
           k1_X3w5A [Dmd=<L,C(U)>]
             :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
           [LclId,
            Arity=1,
            Str=<L,A>,
            Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                    WorkFree=True, Expandable=True,
                    Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                    Tmpl= \ _ [Occ=Dead] -> lvl116_X3wk8}]
           k1_X3w5A = \ _ [Occ=Dead] -> lvl116_X3wk8 } in
         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
           @ b_a3nvJ
           (Text.ParserCombinators.ReadP.Look
              @ b_a3nvJ
              (\ (a1_a3ngt :: String) ->
                 Text.ParserCombinators.ReadP.skipSpaces2
                   a1_a3ngt @ b_a3nvJ k1_X3w5A))
           ((ds3_s3Ltu
             `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kqu>_R
                     :: (P.ReadP a_a3Kqu :: *)
                        ~R# (forall b.
                             (a_a3Kqu -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)))
              @ b_a3nvJ k_a3ni6)
         })
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kqu>_R)
              :: (forall b.
                  (a_a3Kqu -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (P.ReadP a_a3Kqu :: *))

-- RHS size: {terms: 4, types: 8, coercions: 0, joins: 0/0}
lvl_r3N5k
  :: forall a b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []]
lvl_r3N5k
  = \ (@ a_a3Kqu) (@ b_a3nza) _ [Occ=Dead] ->
      Text.ParserCombinators.ReadP.Fail @ b_a3nza

Rec {
-- RHS size: {terms: 13, types: 25, coercions: 6, joins: 0/0}
GHC.Read.choose2 [Occ=LoopBreaker]
  :: forall a. [(String, ReadPrec a)] -> Prec -> P.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []]
GHC.Read.choose2
  = \ (@ a_a3Kqu)
      (ds_i1y1c :: [(String, ReadPrec a_a3Kqu)])
      (eta_X9z :: Prec) ->
      case ds_i1y1c of {
        [] ->
          (lvl_r3N5k @ a_a3Kqu)
          `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kqu>_R)
                  :: (forall b.
                      (a_a3Kqu -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (P.ReadP a_a3Kqu :: *));
        : y_i1y1h ys_i1y1i ->
          GHC.Read.$fReadGeneralCategory36
            @ a_a3Kqu
            y_i1y1h
            ((GHC.Read.choose2 @ a_a3Kqu ys_i1y1i)
             `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                              <a_a3Kqu>_R)
                     :: (Prec -> P.ReadP a_a3Kqu :: *) ~R# (ReadPrec a_a3Kqu :: *)))
            eta_X9z
      }
end Rec }

-- RHS size: {terms: 6, types: 9, coercions: 0, joins: 0/0}
GHC.Read.choose1
  :: forall a. [(String, ReadPrec a)] -> Prec -> P.ReadP a
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)}]
GHC.Read.choose1
  = \ (@ a_a3Kqu)
      (sps_a3K7W :: [(String, ReadPrec a_a3Kqu)])
      (eta_B1 :: Prec) ->
      GHC.Read.choose2 @ a_a3Kqu sps_a3K7W eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
choose :: forall a. [(String, ReadPrec a)] -> ReadPrec a
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Read.choose1
               `cast` (forall (a :: <*>_N).
                       <[(String, ReadPrec a)]>_R
                       ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                       :: (forall a. [(String, ReadPrec a)] -> Prec -> P.ReadP a :: *)
                          ~R# (forall a. [(String, ReadPrec a)] -> ReadPrec a :: *))}]
choose
  = GHC.Read.choose1
    `cast` (forall (a :: <*>_N).
            <[(String, ReadPrec a)]>_R
            ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a. [(String, ReadPrec a)] -> Prec -> P.ReadP a :: *)
               ~R# (forall a. [(String, ReadPrec a)] -> ReadPrec a :: *))

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
GHC.Read.expectP1
  :: L.Lexeme
     -> Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U><L,A><L,1*C1(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ (lexeme_X3KcJ [Occ=Once] :: L.Lexeme)
                 _ [Occ=Dead]
                 (@ b_a3ngn)
                 (eta1_B1 [Occ=Once]
                    :: () -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
                 Text.Read.Lex.expect1 lexeme_X3KcJ @ b_a3ngn eta1_B1}]
GHC.Read.expectP1
  = \ (lexeme_X3KcJ :: L.Lexeme)
      _ [Occ=Dead]
      (@ b_a3ngn)
      (eta1_B1 :: () -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      Text.Read.Lex.expect1 lexeme_X3KcJ @ b_a3ngn eta1_B1

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
expectP :: L.Lexeme -> ReadPrec ()
[GblId,
 Arity=3,
 Str=<L,U><L,A><L,1*C1(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Read.expectP1
               `cast` (<L.Lexeme>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                               <()>_R)
                       :: (L.Lexeme
                           -> Prec
                           -> forall b.
                              (() -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (L.Lexeme -> ReadPrec () :: *))}]
expectP
  = GHC.Read.expectP1
    `cast` (<L.Lexeme>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <()>_R)
            :: (L.Lexeme
                -> Prec
                -> forall b.
                   (() -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (L.Lexeme -> ReadPrec () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readField3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.readField3 = "="#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readField2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.readField2 = unpackCString# GHC.Read.readField3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readField_lexeme :: L.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.readField_lexeme = Text.Read.Lex.Punc GHC.Read.readField2

-- RHS size: {terms: 20, types: 25, coercions: 4, joins: 0/0}
GHC.Read.$wreadField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     String
     -> ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0 0] 140 0}]
GHC.Read.$wreadField
  = \ (@ a_s3MnM)
      (w_s3MnN :: String)
      (w1_s3MnO :: ReadPrec a_s3MnM)
      (w2_s3MnP :: Prec)
      (@ b_s3MnQ)
      (w3_s3MnR :: a_s3MnM -> Text.ParserCombinators.ReadP.P b_s3MnQ) ->
      Text.Read.Lex.$wexpect
        (Text.Read.Lex.Ident w_s3MnN)
        @ b_s3MnQ
        (\ _ [Occ=Dead, OS=OneShot] ->
           case Text.Read.Lex.$wexpect
                  GHC.Read.readField_lexeme
                  @ b_s3MnQ
                  (\ _ [Occ=Dead, OS=OneShot] ->
                     (((w1_s3MnO
                        `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_s3MnM>_R
                                :: (ReadPrec a_s3MnM :: *) ~R# (Prec -> P.ReadP a_s3MnM :: *)))
                         w2_s3MnP)
                      `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_s3MnM>_R
                              :: (P.ReadP a_s3MnM :: *)
                                 ~R# (forall b.
                                      (a_s3MnM -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)))
                       @ b_s3MnQ w3_s3MnR)
           of
           { (# ww1_s3xlt #) ->
           Text.ParserCombinators.ReadP.Look @ b_s3MnQ ww1_s3xlt
           })

-- RHS size: {terms: 15, types: 22, coercions: 0, joins: 0/0}
GHC.Read.readField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     String
     -> ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s3MnM)
                 (w_s3MnN [Occ=Once] :: String)
                 (w1_s3MnO [Occ=Once] :: ReadPrec a_s3MnM)
                 (w2_s3MnP [Occ=Once] :: Prec)
                 (@ b_s3MnQ)
                 (w3_s3MnR [Occ=Once]
                    :: a_s3MnM -> Text.ParserCombinators.ReadP.P b_s3MnQ) ->
                 case GHC.Read.$wreadField
                        @ a_s3MnM w_s3MnN w1_s3MnO w2_s3MnP @ b_s3MnQ w3_s3MnR
                 of
                 { (# ww1_s3Mvp [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3MnQ ww1_s3Mvp
                 }}]
GHC.Read.readField1
  = \ (@ a_s3MnM)
      (w_s3MnN :: String)
      (w1_s3MnO :: ReadPrec a_s3MnM)
      (w2_s3MnP :: Prec)
      (@ b_s3MnQ)
      (w3_s3MnR :: a_s3MnM -> Text.ParserCombinators.ReadP.P b_s3MnQ) ->
      case GHC.Read.$wreadField
             @ a_s3MnM w_s3MnN w1_s3MnO w2_s3MnP @ b_s3MnQ w3_s3MnR
      of
      { (# ww1_s3Mvp #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3MnQ ww1_s3Mvp
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
readField [InlPrag=NOINLINE]
  :: forall a. String -> ReadPrec a -> ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Read.readField1
               `cast` (forall (a :: <*>_N).
                       <String>_R
                       ->_R <ReadPrec a>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <a>_R)
                       :: (forall a.
                           String
                           -> ReadPrec a
                           -> Prec
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. String -> ReadPrec a -> ReadPrec a :: *))}]
readField
  = GHC.Read.readField1
    `cast` (forall (a :: <*>_N).
            <String>_R
            ->_R <ReadPrec a>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a.
                String
                -> ReadPrec a
                -> Prec
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. String -> ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readSymField5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.readSymField5 = "("#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readSymField4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.readSymField4 = unpackCString# GHC.Read.readSymField5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readSymField_lexeme1 :: L.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.readSymField_lexeme1
  = Text.Read.Lex.Punc GHC.Read.readSymField4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readSymField3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.readSymField3 = ")"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readSymField2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.readSymField2 = unpackCString# GHC.Read.readSymField3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.readSymField_lexeme :: L.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.readSymField_lexeme
  = Text.Read.Lex.Punc GHC.Read.readSymField2

-- RHS size: {terms: 34, types: 47, coercions: 4, joins: 0/0}
GHC.Read.$wreadSymField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     String
     -> ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0 0] 260 0}]
GHC.Read.$wreadSymField
  = \ (@ a_s3MnW)
      (w_s3MnX :: String)
      (w1_s3MnY :: ReadPrec a_s3MnW)
      (w2_s3MnZ :: Prec)
      (@ b_s3Mo0)
      (w3_s3Mo1 :: a_s3MnW -> Text.ParserCombinators.ReadP.P b_s3Mo0) ->
      Text.Read.Lex.$wexpect
        GHC.Read.readSymField_lexeme1
        @ b_s3Mo0
        (\ _ [Occ=Dead, OS=OneShot] ->
           case Text.Read.Lex.$wexpect
                  (Text.Read.Lex.Symbol w_s3MnX)
                  @ b_s3Mo0
                  (\ _ [Occ=Dead, OS=OneShot] ->
                     case Text.Read.Lex.$wexpect
                            GHC.Read.readSymField_lexeme
                            @ b_s3Mo0
                            (\ _ [Occ=Dead, OS=OneShot] ->
                               case Text.Read.Lex.$wexpect
                                      GHC.Read.readField_lexeme
                                      @ b_s3Mo0
                                      (\ _ [Occ=Dead, OS=OneShot] ->
                                         (((w1_s3MnY
                                            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <a_s3MnW>_R
                                                    :: (ReadPrec a_s3MnW :: *)
                                                       ~R# (Prec -> P.ReadP a_s3MnW :: *)))
                                             w2_s3MnZ)
                                          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                      <a_s3MnW>_R
                                                  :: (P.ReadP a_s3MnW :: *)
                                                     ~R# (forall b.
                                                          (a_s3MnW
                                                           -> Text.ParserCombinators.ReadP.P b)
                                                          -> Text.ParserCombinators.ReadP.P
                                                               b :: *)))
                                           @ b_s3Mo0 w3_s3Mo1)
                               of
                               { (# ww1_s3xlt #) ->
                               Text.ParserCombinators.ReadP.Look @ b_s3Mo0 ww1_s3xlt
                               })
                     of
                     { (# ww1_s3xlt #) ->
                     Text.ParserCombinators.ReadP.Look @ b_s3Mo0 ww1_s3xlt
                     })
           of
           { (# ww1_s3xlt #) ->
           Text.ParserCombinators.ReadP.Look @ b_s3Mo0 ww1_s3xlt
           })

-- RHS size: {terms: 15, types: 22, coercions: 0, joins: 0/0}
GHC.Read.readSymField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     String
     -> ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s3MnW)
                 (w_s3MnX [Occ=Once] :: String)
                 (w1_s3MnY [Occ=Once] :: ReadPrec a_s3MnW)
                 (w2_s3MnZ [Occ=Once] :: Prec)
                 (@ b_s3Mo0)
                 (w3_s3Mo1 [Occ=Once]
                    :: a_s3MnW -> Text.ParserCombinators.ReadP.P b_s3Mo0) ->
                 case GHC.Read.$wreadSymField
                        @ a_s3MnW w_s3MnX w1_s3MnY w2_s3MnZ @ b_s3Mo0 w3_s3Mo1
                 of
                 { (# ww1_s3Mvr [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3Mo0 ww1_s3Mvr
                 }}]
GHC.Read.readSymField1
  = \ (@ a_s3MnW)
      (w_s3MnX :: String)
      (w1_s3MnY :: ReadPrec a_s3MnW)
      (w2_s3MnZ :: Prec)
      (@ b_s3Mo0)
      (w3_s3Mo1 :: a_s3MnW -> Text.ParserCombinators.ReadP.P b_s3Mo0) ->
      case GHC.Read.$wreadSymField
             @ a_s3MnW w_s3MnX w1_s3MnY w2_s3MnZ @ b_s3Mo0 w3_s3Mo1
      of
      { (# ww1_s3Mvr #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3Mo0 ww1_s3Mvr
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
readSymField [InlPrag=NOINLINE]
  :: forall a. String -> ReadPrec a -> ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Read.readSymField1
               `cast` (forall (a :: <*>_N).
                       <String>_R
                       ->_R <ReadPrec a>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <a>_R)
                       :: (forall a.
                           String
                           -> ReadPrec a
                           -> Prec
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. String -> ReadPrec a -> ReadPrec a :: *))}]
readSymField
  = GHC.Read.readSymField1
    `cast` (forall (a :: <*>_N).
            <String>_R
            ->_R <ReadPrec a>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a.
                String
                -> ReadPrec a
                -> Prec
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. String -> ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,)4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fRead(,)4 = ","#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,)3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fRead(,)3 = unpackCString# GHC.Read.$fRead(,)4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,)_lexeme :: L.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fRead(,)_lexeme = Text.Read.Lex.Punc GHC.Read.$fRead(,)3

-- RHS size: {terms: 28, types: 37, coercions: 13, joins: 0/1}
GHC.Read.$fRead(,)2
  :: forall a b. (Read a, Read b) => Prec -> P.ReadP (a, b)
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 30 0] 220 60}]
GHC.Read.$fRead(,)2
  = \ (@ a_a3KnF)
      (@ b_a3KnG)
      ($dRead_a3KnI :: Read a_a3KnF)
      ($dRead1_a3KnJ :: Read b_a3KnG)
      (eta_B1 :: Prec) ->
      let {
        ds1_s3Lt7 [Dmd=<L,C(U)>] :: P.ReadP a_a3KnF
        [LclId]
        ds1_s3Lt7
          = ((readPrec @ a_a3KnF $dRead_a3KnI)
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3KnF>_R
                     :: (ReadPrec a_a3KnF :: *) ~R# (Prec -> P.ReadP a_a3KnF :: *)))
              eta_B1 } in
      (\ (@ b1_a3nIU)
         (k1_a3ngs
            :: (a_a3KnF, b_a3KnG)
               -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         (ds1_s3Lt7
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3KnF>_R
                  :: (P.ReadP a_a3KnF :: *)
                     ~R# (forall b.
                          (a_a3KnF -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU
           (\ (a1_a3ngt :: a_a3KnF) ->
              case Text.Read.Lex.$wexpect
                     GHC.Read.$fRead(,)_lexeme
                     @ b1_a3nIU
                     (\ _ [Occ=Dead, OS=OneShot] ->
                        ((((readPrec @ b_a3KnG $dRead1_a3KnJ)
                           `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <b_a3KnG>_R
                                   :: (ReadPrec b_a3KnG :: *) ~R# (Prec -> P.ReadP b_a3KnG :: *)))
                            eta_B1)
                         `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <b_a3KnG>_R
                                 :: (P.ReadP b_a3KnG :: *)
                                    ~R# (forall b.
                                         (b_a3KnG -> Text.ParserCombinators.ReadP.P b)
                                         -> Text.ParserCombinators.ReadP.P b :: *)))
                          @ b1_a3nIU
                          (\ (a3_X3nl4 :: b_a3KnG) -> k1_a3ngs (a1_a3ngt, a3_X3nl4)))
              of
              { (# ww1_s3xlt #) ->
              Text.ParserCombinators.ReadP.Look @ b1_a3nIU ww1_s3xlt
              }))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                       <(a_a3KnF, b_a3KnG)>_R)
              :: (forall b.
                  ((a_a3KnF, b_a3KnG) -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (P.ReadP (a_a3KnF, b_a3KnG) :: *))

-- RHS size: {terms: 42, types: 67, coercions: 15, joins: 0/1}
GHC.Read.$fRead(,,,)2
  :: forall a b c d.
     (Read a, Read b, Read c, Read d) =>
     Prec -> P.ReadP (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0] 260 60}]
GHC.Read.$fRead(,,,)2
  = \ (@ a_a3Ko6)
      (@ b_a3Ko7)
      (@ c_a3Ko8)
      (@ d_a3Ko9)
      ($dRead_a3Kob :: Read a_a3Ko6)
      ($dRead1_a3Koc :: Read b_a3Ko7)
      ($dRead2_a3Kod :: Read c_a3Ko8)
      ($dRead3_a3Koe :: Read d_a3Ko9)
      (eta_B1 :: Prec) ->
      let {
        ds1_s3Lt4 [Dmd=<L,C(U)>] :: P.ReadP (a_a3Ko6, b_a3Ko7)
        [LclId]
        ds1_s3Lt4
          = GHC.Read.$fRead(,)2
              @ a_a3Ko6 @ b_a3Ko7 $dRead_a3Kob $dRead1_a3Koc eta_B1 } in
      (\ (@ b1_a3nIU)
         (k1_a3ngs
            :: (a_a3Ko6, b_a3Ko7, c_a3Ko8, d_a3Ko9)
               -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         (ds1_s3Lt4
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <(a_a3Ko6, b_a3Ko7)>_R
                  :: (P.ReadP (a_a3Ko6, b_a3Ko7) :: *)
                     ~R# (forall b.
                          ((a_a3Ko6, b_a3Ko7) -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU
           (\ (a1_a3ngt :: (a_a3Ko6, b_a3Ko7)) ->
              case a1_a3ngt of { (a2_a3K8k, b2_a3K8l) ->
              case Text.Read.Lex.$wexpect
                     GHC.Read.$fRead(,)_lexeme
                     @ b1_a3nIU
                     (\ _ [Occ=Dead, OS=OneShot] ->
                        ((GHC.Read.$fRead(,)2
                            @ c_a3Ko8 @ d_a3Ko9 $dRead2_a3Kod $dRead3_a3Koe eta_B1)
                         `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <(c_a3Ko8, d_a3Ko9)>_R
                                 :: (P.ReadP (c_a3Ko8, d_a3Ko9) :: *)
                                    ~R# (forall b.
                                         ((c_a3Ko8, d_a3Ko9) -> Text.ParserCombinators.ReadP.P b)
                                         -> Text.ParserCombinators.ReadP.P b :: *)))
                          @ b1_a3nIU
                          (\ (a4_X3nle :: (c_a3Ko8, d_a3Ko9)) ->
                             case a4_X3nle of { (c1_a3K8m, d1_a3K8n) ->
                             k1_a3ngs (a2_a3K8k, b2_a3K8l, c1_a3K8m, d1_a3K8n)
                             }))
              of
              { (# ww1_s3xlt #) ->
              Text.ParserCombinators.ReadP.Look @ b1_a3nIU ww1_s3xlt
              }
              }))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                       <(a_a3Ko6, b_a3Ko7, c_a3Ko8, d_a3Ko9)>_R)
              :: (forall b.
                  ((a_a3Ko6, b_a3Ko7, c_a3Ko8, d_a3Ko9)
                   -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (P.ReadP (a_a3Ko6, b_a3Ko7, c_a3Ko8, d_a3Ko9) :: *))

-- RHS size: {terms: 58, types: 109, coercions: 23, joins: 0/1}
GHC.Read.$fRead(,,,,,,,)2
  :: forall a b c d e f g h.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h) =>
     Prec -> P.ReadP (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0] 300 60}]
GHC.Read.$fRead(,,,,,,,)2
  = \ (@ a_a3KoH)
      (@ b_a3KoI)
      (@ c_a3KoJ)
      (@ d_a3KoK)
      (@ e_a3KoL)
      (@ f_a3KoM)
      (@ g_a3KoN)
      (@ h_a3KoO)
      ($dRead_a3KoQ :: Read a_a3KoH)
      ($dRead1_a3KoR :: Read b_a3KoI)
      ($dRead2_a3KoS :: Read c_a3KoJ)
      ($dRead3_a3KoT :: Read d_a3KoK)
      ($dRead4_a3KoU :: Read e_a3KoL)
      ($dRead5_a3KoV :: Read f_a3KoM)
      ($dRead6_a3KoW :: Read g_a3KoN)
      ($dRead7_a3KoX :: Read h_a3KoO)
      (eta_B1 :: Prec) ->
      let {
        ds1_s3Lt2 [Dmd=<L,C(U)>]
          :: P.ReadP (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
        [LclId]
        ds1_s3Lt2
          = GHC.Read.$fRead(,,,)2
              @ a_a3KoH
              @ b_a3KoI
              @ c_a3KoJ
              @ d_a3KoK
              $dRead_a3KoQ
              $dRead1_a3KoR
              $dRead2_a3KoS
              $dRead3_a3KoT
              eta_B1 } in
      (\ (@ b1_a3nIU)
         (k1_a3ngs
            :: (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK, e_a3KoL, f_a3KoM, g_a3KoN,
                h_a3KoO)
               -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
         (ds1_s3Lt2
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <(a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)>_R
                  :: (P.ReadP (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK) :: *)
                     ~R# (forall b.
                          ((a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ b1_a3nIU
           (\ (a1_a3ngt :: (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)) ->
              case a1_a3ngt of { (a2_a3K8o, b2_a3K8p, c1_a3K8q, d1_a3K8r) ->
              case Text.Read.Lex.$wexpect
                     GHC.Read.$fRead(,)_lexeme
                     @ b1_a3nIU
                     (\ _ [Occ=Dead, OS=OneShot] ->
                        ((GHC.Read.$fRead(,,,)2
                            @ e_a3KoL
                            @ f_a3KoM
                            @ g_a3KoN
                            @ h_a3KoO
                            $dRead4_a3KoU
                            $dRead5_a3KoV
                            $dRead6_a3KoW
                            $dRead7_a3KoX
                            eta_B1)
                         `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <(e_a3KoL, f_a3KoM, g_a3KoN, h_a3KoO)>_R
                                 :: (P.ReadP (e_a3KoL, f_a3KoM, g_a3KoN, h_a3KoO) :: *)
                                    ~R# (forall b.
                                         ((e_a3KoL, f_a3KoM, g_a3KoN, h_a3KoO)
                                          -> Text.ParserCombinators.ReadP.P b)
                                         -> Text.ParserCombinators.ReadP.P b :: *)))
                          @ b1_a3nIU
                          (\ (a4_X3nlp :: (e_a3KoL, f_a3KoM, g_a3KoN, h_a3KoO)) ->
                             case a4_X3nlp of { (e1_a3K8s, f1_a3K8t, g1_a3K8u, h1_a3K8v) ->
                             k1_a3ngs
                               (a2_a3K8o, b2_a3K8p, c1_a3K8q, d1_a3K8r, e1_a3K8s, f1_a3K8t,
                                g1_a3K8u, h1_a3K8v)
                             }))
              of
              { (# ww1_s3xlt #) ->
              Text.ParserCombinators.ReadP.Look @ b1_a3nIU ww1_s3xlt
              }
              }))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                       <(a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK, e_a3KoL, f_a3KoM, g_a3KoN,
                         h_a3KoO)>_R)
              :: (forall b.
                  ((a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK, e_a3KoL, f_a3KoM, g_a3KoN,
                    h_a3KoO)
                   -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (P.ReadP
                        (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK, e_a3KoL, f_a3KoM, g_a3KoN,
                         h_a3KoO) :: *))

-- RHS size: {terms: 83, types: 69, coercions: 12, joins: 1/4}
GHC.Read.$wskipSpacesThenP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [180 0 0] 441 20}]
GHC.Read.$wskipSpacesThenP
  = \ (@ a_s3MoF)
      (w_s3MoG :: ReadPrec a_s3MoF)
      (w1_s3MoH :: Prec)
      (@ b_s3MoI)
      (w2_s3MoJ :: a_s3MoF -> Text.ParserCombinators.ReadP.P b_s3MoI) ->
      letrec {
        skip_s3Mdt [Occ=LoopBreaker]
          :: [Char]
             -> Prec
             -> forall b1.
                (a_s3MoF -> Text.ParserCombinators.ReadP.P b1)
                -> Text.ParserCombinators.ReadP.P b1
        [LclId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []]
        skip_s3Mdt
          = \ (ds_d3L1v :: [Char])
              (eta_Xa4 :: Prec)
              (@ b1_X3nqq)
              (eta1_Xa5 :: a_s3MoF -> Text.ParserCombinators.ReadP.P b1_X3nqq) ->
              case ds_d3L1v of {
                [] ->
                  (((w_s3MoG
                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_s3MoF>_R
                             :: (ReadPrec a_s3MoF :: *) ~R# (Prec -> P.ReadP a_s3MoF :: *)))
                      eta_Xa4)
                   `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_s3MoF>_R
                           :: (P.ReadP a_s3MoF :: *)
                              ~R# (forall b.
                                   (a_s3MoF -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)))
                    @ b1_X3nqq eta1_Xa5;
                : c_a3K7G s_a3K7H ->
                  case c_a3K7G of { C# ww1_s2iEf ->
                  let {
                    x_aRFM [Dmd=<S,U>] :: Word#
                    [LclId]
                    x_aRFM = int2Word# (ord# ww1_s2iEf) } in
                  join {
                    $j_s3LVC [Dmd=<L,1*U>] :: Text.ParserCombinators.ReadP.P b1_X3nqq
                    [LclId[JoinId(0)], Unf=OtherCon []]
                    $j_s3LVC
                      = let {
                          lvl2_s3Lt0 :: Text.ParserCombinators.ReadP.P b1_X3nqq
                          [LclId]
                          lvl2_s3Lt0
                            = skip_s3Mdt
                                s_a3K7H
                                eta_Xa4
                                @ b1_X3nqq
                                (\ (a4_X3ni3 :: a_s3MoF) -> eta1_Xa5 a4_X3ni3) } in
                        Text.ParserCombinators.ReadP.Get
                          @ b1_X3nqq (\ _ [Occ=Dead] -> lvl2_s3Lt0) } in
                  case leWord# x_aRFM 887## of {
                    __DEFAULT ->
                      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d2hP4
                             (ord# ww1_s2iEf) realWorld#
                      of
                      { (# ds1_d2hP3, ds2_d2hP2 #) ->
                      case ds2_d2hP2 of {
                        __DEFAULT -> jump $j_s3LVC;
                        0# ->
                          (((w_s3MoG
                             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_s3MoF>_R
                                     :: (ReadPrec a_s3MoF :: *) ~R# (Prec -> P.ReadP a_s3MoF :: *)))
                              eta_Xa4)
                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_s3MoF>_R
                                   :: (P.ReadP a_s3MoF :: *)
                                      ~R# (forall b.
                                           (a_s3MoF -> Text.ParserCombinators.ReadP.P b)
                                           -> Text.ParserCombinators.ReadP.P b :: *)))
                            @ b1_X3nqq eta1_Xa5
                      }
                      };
                    1# ->
                      case x_aRFM of wild1_X7V {
                        __DEFAULT ->
                          case leWord# (minusWord# wild1_X7V 9##) 4## of {
                            __DEFAULT ->
                              case wild1_X7V of {
                                __DEFAULT ->
                                  (((w_s3MoG
                                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                 <a_s3MoF>_R
                                             :: (ReadPrec a_s3MoF :: *)
                                                ~R# (Prec -> P.ReadP a_s3MoF :: *)))
                                      eta_Xa4)
                                   `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_s3MoF>_R
                                           :: (P.ReadP a_s3MoF :: *)
                                              ~R# (forall b.
                                                   (a_s3MoF -> Text.ParserCombinators.ReadP.P b)
                                                   -> Text.ParserCombinators.ReadP.P b :: *)))
                                    @ b1_X3nqq eta1_Xa5;
                                160## -> jump $j_s3LVC
                              };
                            1# -> jump $j_s3LVC
                          };
                        32## -> jump $j_s3LVC
                      }
                  }
                  }
              }; } in
      (# \ (a1_a3ngt :: String) ->
           skip_s3Mdt a1_a3ngt w1_s3MoH @ b_s3MoI w2_s3MoJ #)

-- RHS size: {terms: 13, types: 21, coercions: 0, joins: 0/0}
GHC.Read.$fRead()5 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s3MoF)
                 (w_s3MoG [Occ=Once] :: ReadPrec a_s3MoF)
                 (w1_s3MoH [Occ=Once] :: Prec)
                 (@ b_s3MoI)
                 (w2_s3MoJ [Occ=Once]
                    :: a_s3MoF -> Text.ParserCombinators.ReadP.P b_s3MoI) ->
                 case GHC.Read.$wskipSpacesThenP
                        @ a_s3MoF w_s3MoG w1_s3MoH @ b_s3MoI w2_s3MoJ
                 of
                 { (# ww1_s3Mvt [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3MoI ww1_s3Mvt
                 }}]
GHC.Read.$fRead()5
  = \ (@ a_s3MoF)
      (w_s3MoG :: ReadPrec a_s3MoF)
      (w1_s3MoH :: Prec)
      (@ b_s3MoI)
      (w2_s3MoJ :: a_s3MoF -> Text.ParserCombinators.ReadP.P b_s3MoI) ->
      case GHC.Read.$wskipSpacesThenP
             @ a_s3MoF w_s3MoG w1_s3MoH @ b_s3MoI w2_s3MoJ
      of
      { (# ww1_s3Mvt #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3MoI ww1_s3Mvt
      }

-- RHS size: {terms: 44, types: 48, coercions: 13, joins: 0/2}
GHC.Read.$wparen' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0] 250 20}]
GHC.Read.$wparen'
  = \ (@ a_s3MoO)
      (w_s3MoP :: ReadPrec a_s3MoO)
      (w1_s3MoQ :: Prec)
      (@ b_s3MoR)
      (w2_s3MoS :: a_s3MoO -> Text.ParserCombinators.ReadP.P b_s3MoR) ->
      let {
        lvl2_s3MJn :: Text.ParserCombinators.ReadP.P b_s3MoR
        [LclId]
        lvl2_s3MJn
          = (((w_s3MoP
               `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_s3MoO>_R
                       :: (ReadPrec a_s3MoO :: *) ~R# (Prec -> P.ReadP a_s3MoO :: *)))
                minPrec)
             `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_s3MoO>_R
                     :: (P.ReadP a_s3MoO :: *)
                        ~R# (forall b.
                             (a_s3MoO -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)))
              @ b_s3MoR
              (\ (a1_X3npJ :: a_s3MoO) ->
                 case GHC.Read.$wskipSpacesThenP
                        @ a_s3MoO
                        ((\ _ [Occ=Dead]
                            (@ b1_X3nNG)
                            (k1_X3nlf [OS=OneShot]
                               :: a_s3MoO -> Text.ParserCombinators.ReadP.P b1_X3nNG) ->
                            let {
                              lvl3_s3MJm :: Text.ParserCombinators.ReadP.P b1_X3nNG
                              [LclId]
                              lvl3_s3MJm = k1_X3nlf a1_X3npJ } in
                            Text.ParserCombinators.ReadP.Get
                              @ b1_X3nNG
                              (\ (a2_X3nlh :: Char) ->
                                 case a2_X3nlh of { C# x_X5rI ->
                                 case x_X5rI of {
                                   __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nNG;
                                   ')'# -> lvl3_s3MJm
                                 }
                                 }))
                         `cast` ((<Prec>_R
                                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                <a_s3MoO>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <a_s3MoO>_R)
                                 :: (Prec
                                     -> forall b.
                                        (a_s3MoO -> Text.ParserCombinators.ReadP.P b)
                                        -> Text.ParserCombinators.ReadP.P b :: *)
                                    ~R# (ReadPrec a_s3MoO :: *)))
                        w1_s3MoQ
                        @ b_s3MoR
                        w2_s3MoS
                 of
                 { (# ww1_s3Mvt #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3MoR ww1_s3Mvt
                 }) } in
      (# \ (a1_a3ngt :: Char) ->
           case a1_a3ngt of { C# x_a5ih ->
           case x_a5ih of {
             __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_s3MoR;
             '('# -> lvl2_s3MJn
           }
           } #)

-- RHS size: {terms: 13, types: 21, coercions: 0, joins: 0/0}
GHC.Read.paren2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s3MoO)
                 (w_s3MoP [Occ=Once] :: ReadPrec a_s3MoO)
                 (w1_s3MoQ [Occ=Once] :: Prec)
                 (@ b_s3MoR)
                 (w2_s3MoS [Occ=Once]
                    :: a_s3MoO -> Text.ParserCombinators.ReadP.P b_s3MoR) ->
                 case GHC.Read.$wparen'
                        @ a_s3MoO w_s3MoP w1_s3MoQ @ b_s3MoR w2_s3MoS
                 of
                 { (# ww1_s3Mvv [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Get @ b_s3MoR ww1_s3Mvv
                 }}]
GHC.Read.paren2
  = \ (@ a_s3MoO)
      (w_s3MoP :: ReadPrec a_s3MoO)
      (w1_s3MoQ :: Prec)
      (@ b_s3MoR)
      (w2_s3MoS :: a_s3MoO -> Text.ParserCombinators.ReadP.P b_s3MoR) ->
      case GHC.Read.$wparen'
             @ a_s3MoO w_s3MoP w1_s3MoQ @ b_s3MoR w2_s3MoS
      of
      { (# ww1_s3Mvv #) ->
      Text.ParserCombinators.ReadP.Get @ b_s3MoR ww1_s3Mvv
      }

-- RHS size: {terms: 14, types: 22, coercions: 9, joins: 0/0}
GHC.Read.paren1
  :: forall a.
     ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3KmL)
                 (p_a3K7J [Occ=Once] :: ReadPrec a_a3KmL)
                 (eta_B2 [Occ=Once] :: Prec)
                 (@ b_a3ngn)
                 (eta1_B1 [Occ=Once]
                    :: a_a3KmL -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
                 GHC.Read.$fRead()5
                   @ a_a3KmL
                   ((GHC.Read.paren2 @ a_a3KmL p_a3K7J)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <a_a3KmL>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <a_a3KmL>_R)
                            :: (Prec
                                -> forall b.
                                   (a_a3KmL -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec a_a3KmL :: *)))
                   eta_B2
                   @ b_a3ngn
                   eta1_B1}]
GHC.Read.paren1
  = \ (@ a_a3KmL)
      (p_a3K7J :: ReadPrec a_a3KmL)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1 :: a_a3KmL -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      case GHC.Read.$wskipSpacesThenP
             @ a_a3KmL
             ((GHC.Read.paren2 @ a_a3KmL p_a3K7J)
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <a_a3KmL>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <a_a3KmL>_R)
                      :: (Prec
                          -> forall b.
                             (a_a3KmL -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec a_a3KmL :: *)))
             eta_B2
             @ b_a3ngn
             eta1_B1
      of
      { (# ww1_s3Mvt #) ->
      Text.ParserCombinators.ReadP.Look @ b_a3ngn ww1_s3Mvt
      }

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
paren :: forall a. ReadPrec a -> ReadPrec a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Read.paren1
               `cast` (forall (a :: <*>_N).
                       <ReadPrec a>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <a>_R)
                       :: (forall a.
                           ReadPrec a
                           -> Prec
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. ReadPrec a -> ReadPrec a :: *))}]
paren
  = GHC.Read.paren1
    `cast` (forall (a :: <*>_N).
            <ReadPrec a>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a.
                ReadPrec a
                -> Prec
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 38, types: 60, coercions: 19, joins: 0/3}
GHC.Read.list3
  :: forall a.
     ReadPrec a
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,C(C(U))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0] 290 0}]
GHC.Read.list3
  = \ (@ a_a3KmP)
      (p_a3K7M :: ReadPrec a_a3KmP)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1 :: a_a3KmP -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      letrec {
        optional_s3LsH :: Prec -> P.ReadP a_a3KmP
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        optional_s3LsH
          = \ (n_a3tmw :: Prec) ->
              let {
                ds2_s3LsK [Dmd=<L,C(U)>] :: P.ReadP a_a3KmP
                [LclId]
                ds2_s3LsK
                  = (p_a3K7M
                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3KmP>_R
                             :: (ReadPrec a_a3KmP :: *) ~R# (Prec -> P.ReadP a_a3KmP :: *)))
                      n_a3tmw } in
              (\ (@ b1_a3nvJ)
                 (k_a3ni6 :: a_a3KmP -> Text.ParserCombinators.ReadP.P b1_a3nvJ) ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b1_a3nvJ
                   ((ds2_s3LsK
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3KmP>_R
                             :: (P.ReadP a_a3KmP :: *)
                                ~R# (forall b.
                                     (a_a3KmP -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ b1_a3nvJ k_a3ni6)
                   (case GHC.Read.$wparen'
                           @ a_a3KmP
                           (optional1_s3LsI
                            `cast` ((<Prec>_R
                                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                   <a_a3KmP>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                            <a_a3KmP>_R)
                                    :: (Prec
                                        -> forall b.
                                           (a_a3KmP -> Text.ParserCombinators.ReadP.P b)
                                           -> Text.ParserCombinators.ReadP.P b :: *)
                                       ~R# (ReadPrec a_a3KmP :: *)))
                           n_a3tmw
                           @ b1_a3nvJ
                           k_a3ni6
                    of
                    { (# ww1_s3Mvv #) ->
                    Text.ParserCombinators.ReadP.Get @ b1_a3nvJ ww1_s3Mvv
                    }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3KmP>_R)
                      :: (forall b.
                          (a_a3KmP -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP a_a3KmP :: *));
        optional1_s3LsI [Occ=LoopBreaker]
          :: Prec
             -> forall b1.
                (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                -> Text.ParserCombinators.ReadP.P b1
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        optional1_s3LsI
          = \ (w_s3MoH :: Prec)
              (@ b1_s3MoI)
              (w1_s3MoJ :: a_a3KmP -> Text.ParserCombinators.ReadP.P b1_s3MoI) ->
              case GHC.Read.$wskipSpacesThenP
                     @ a_a3KmP
                     (optional_s3LsH
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <a_a3KmP>_R)
                              :: (Prec -> P.ReadP a_a3KmP :: *) ~R# (ReadPrec a_a3KmP :: *)))
                     w_s3MoH
                     @ b1_s3MoI
                     w1_s3MoJ
              of
              { (# ww1_s3Mvt #) ->
              Text.ParserCombinators.ReadP.Look @ b1_s3MoI ww1_s3Mvt
              }; } in
      optional1_s3LsI eta_B2 @ b_a3ngn eta1_B1

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
parens :: forall a. ReadPrec a -> ReadPrec a
[GblId,
 Arity=3,
 Str=<L,C(C(U))><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Read.list3
               `cast` (forall (a :: <*>_N).
                       <ReadPrec a>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <a>_R)
                       :: (forall a.
                           ReadPrec a
                           -> Prec
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a. ReadPrec a -> ReadPrec a :: *))}]
parens
  = GHC.Read.list3
    `cast` (forall (a :: <*>_N).
            <ReadPrec a>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a.
                ReadPrec a
                -> Prec
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a. ReadPrec a -> ReadPrec a :: *))

-- RHS size: {terms: 139, types: 380, coercions: 138, joins: 0/3}
GHC.Read.$fRead(,,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n o.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n, Read o) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=17,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []]
GHC.Read.$fRead(,,,,,,,,,,,,,,)1
  = \ (@ a_a3Kwb)
      (@ b_a3Kwc)
      (@ c_a3Kwd)
      (@ d_a3Kwe)
      (@ e_a3Kwf)
      (@ f_a3Kwg)
      (@ g_a3Kwh)
      (@ h_a3Kwi)
      (@ i_a3Kwj)
      (@ j_a3Kwk)
      (@ k_a3Kwl)
      (@ l_a3Kwm)
      (@ m_a3Kwn)
      (@ n_a3Kwo)
      (@ o_a3Kwp)
      ($dRead_a3Kwq :: Read a_a3Kwb)
      ($dRead1_a3Kwr :: Read b_a3Kwc)
      ($dRead2_a3Kws :: Read c_a3Kwd)
      ($dRead3_a3Kwt :: Read d_a3Kwe)
      ($dRead4_a3Kwu :: Read e_a3Kwf)
      ($dRead5_a3Kwv :: Read f_a3Kwg)
      ($dRead6_a3Kww :: Read g_a3Kwh)
      ($dRead7_a3Kwx :: Read h_a3Kwi)
      ($dRead8_a3Kwy :: Read i_a3Kwj)
      ($dRead9_a3Kwz :: Read j_a3Kwk)
      ($dRead10_a3KwA :: Read k_a3Kwl)
      ($dRead11_a3KwB :: Read l_a3Kwm)
      ($dRead12_a3KwC :: Read m_a3Kwn)
      ($dRead13_a3KwD :: Read n_a3Kwo)
      ($dRead14_a3KwE :: Read o_a3Kwp)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
             h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
             o_a3Kwp)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3LsD [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                   h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                   o_a3Kwp)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3LsD
          = \ (n1_a3tm4 :: Prec) ->
              let {
                ds1_s3LsF [Dmd=<L,C(U)>]
                  :: P.ReadP
                       (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                        h_a3Kwi)
                [LclId]
                ds1_s3LsF
                  = GHC.Read.$fRead(,,,,,,,)2
                      @ a_a3Kwb
                      @ b_a3Kwc
                      @ c_a3Kwd
                      @ d_a3Kwe
                      @ e_a3Kwf
                      @ f_a3Kwg
                      @ g_a3Kwh
                      @ h_a3Kwi
                      $dRead_a3Kwq
                      $dRead1_a3Kwr
                      $dRead2_a3Kws
                      $dRead3_a3Kwt
                      $dRead4_a3Kwu
                      $dRead5_a3Kwv
                      $dRead6_a3Kww
                      $dRead7_a3Kwx
                      n1_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                        h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                        o_a3Kwp)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3LsF
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                h_a3Kwi)>_R
                          :: (P.ReadP
                                (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                 h_a3Kwi) :: *)
                             ~R# (forall b.
                                  ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                    h_a3Kwi)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt
                         :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                             h_a3Kwi)) ->
                      case a1_a3ngt of
                      { (a2_a3K2U, b3_a3K2V, c1_a3K2W, d1_a3K2X, e1_a3K2Y, f1_a3K2Z,
                         g1_a3K30, h1_a3K31) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((GHC.Read.$fRead(,,,)2
                                    @ i_a3Kwj
                                    @ j_a3Kwk
                                    @ k_a3Kwl
                                    @ l_a3Kwm
                                    $dRead8_a3Kwy
                                    $dRead9_a3Kwz
                                    $dRead10_a3KwA
                                    $dRead11_a3KwB
                                    n1_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                             <(i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm)>_R
                                         :: (P.ReadP (i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm) :: *)
                                            ~R# (forall b.
                                                 ((i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm)
                                                  -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlT :: (i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm)) ->
                                     case a4_X3nlT of { (i1_a3K32, j1_a3K33, k2_a3K34, l1_a3K35) ->
                                     case Text.Read.Lex.$wexpect
                                            GHC.Read.$fRead(,)_lexeme
                                            @ b2_a3nIU
                                            (\ _ [Occ=Dead, OS=OneShot] ->
                                               ((GHC.Read.$fRead(,)2
                                                   @ m_a3Kwn
                                                   @ n_a3Kwo
                                                   $dRead12_a3KwC
                                                   $dRead13_a3KwD
                                                   n1_a3tm4)
                                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                            <(m_a3Kwn, n_a3Kwo)>_R
                                                        :: (P.ReadP (m_a3Kwn, n_a3Kwo) :: *)
                                                           ~R# (forall b.
                                                                ((m_a3Kwn, n_a3Kwo)
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b)
                                                                -> Text.ParserCombinators.ReadP.P
                                                                     b :: *)))
                                                 @ b2_a3nIU
                                                 (\ (a6_X3nmb :: (m_a3Kwn, n_a3Kwo)) ->
                                                    case a6_X3nmb of { (m1_a3K36, n2_a3K37) ->
                                                    case Text.Read.Lex.$wexpect
                                                           GHC.Read.$fRead(,)_lexeme
                                                           @ b2_a3nIU
                                                           (\ _ [Occ=Dead, OS=OneShot] ->
                                                              ((((readPrec @ o_a3Kwp $dRead14_a3KwE)
                                                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <o_a3Kwp>_R
                                                                         :: (ReadPrec o_a3Kwp :: *)
                                                                            ~R# (Prec
                                                                                 -> P.ReadP
                                                                                      o_a3Kwp :: *)))
                                                                  n1_a3tm4)
                                                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                                           <o_a3Kwp>_R
                                                                       :: (P.ReadP o_a3Kwp :: *)
                                                                          ~R# (forall b.
                                                                               (o_a3Kwp
                                                                                -> Text.ParserCombinators.ReadP.P
                                                                                     b)
                                                                               -> Text.ParserCombinators.ReadP.P
                                                                                    b :: *)))
                                                                @ b2_a3nIU
                                                                (\ (a8_X3nmr :: o_a3Kwp) ->
                                                                   k1_a3ngs
                                                                     (a2_a3K2U, b3_a3K2V, c1_a3K2W,
                                                                      d1_a3K2X, e1_a3K2Y, f1_a3K2Z,
                                                                      g1_a3K30, h1_a3K31, i1_a3K32,
                                                                      j1_a3K33, k2_a3K34, l1_a3K35,
                                                                      m1_a3K36, n2_a3K37,
                                                                      a8_X3nmr)))
                                                    of
                                                    { (# ww1_s3xlt #) ->
                                                    Text.ParserCombinators.ReadP.Look
                                                      @ b2_a3nIU ww1_s3xlt
                                                    }
                                                    }))
                                     of
                                     { (# ww1_s3xlt #) ->
                                     Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                                     }
                                     }))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                 h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                                 o_a3Kwp)>_R)
                      :: (forall b.
                          ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                            h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                            o_a3Kwp)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                 h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                                 o_a3Kwp) :: *)) } in
      let {
        lvl2_s3Lug [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                  h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                  o_a3Kwp)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lug
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                     h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                     o_a3Kwp)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                        h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                        o_a3Kwp)
                     (p_s3LsD
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg,
                                         g_a3Kwh, h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm,
                                         m_a3Kwn, n_a3Kwo, o_a3Kwp)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg,
                                        g_a3Kwh, h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm,
                                        m_a3Kwn, n_a3Kwo, o_a3Kwp) :: *)
                                 ~R# (ReadPrec
                                        (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg,
                                         g_a3Kwh, h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm,
                                         m_a3Kwn, n_a3Kwo, o_a3Kwp) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
           h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
           o_a3Kwp)
        ((\ (eta2_X57 :: Prec)
            (@ b2_X3nlt)
            (eta3_X58
               :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                   h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                   o_a3Kwp)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlt) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                      h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                      o_a3Kwp)
                   (lvl2_s3Lug
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg,
                                             g_a3Kwh, h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm,
                                             m_a3Kwn, n_a3Kwo,
                                             o_a3Kwp)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3Kwb, b_a3Kwc, c_a3Kwd,
                                                                        d_a3Kwe, e_a3Kwf, f_a3Kwg,
                                                                        g_a3Kwh, h_a3Kwi, i_a3Kwj,
                                                                        j_a3Kwk, k_a3Kwl, l_a3Kwm,
                                                                        m_a3Kwn, n_a3Kwo,
                                                                        o_a3Kwp)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                     h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                                     o_a3Kwp)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg,
                                       g_a3Kwh, h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm,
                                       m_a3Kwn, n_a3Kwo, o_a3Kwp) :: *)))
                   eta2_X57
                   @ b2_X3nlt
                   eta3_X58
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlt ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                  h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                                  o_a3Kwp)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe,
                                                             e_a3Kwf, f_a3Kwg, g_a3Kwh, h_a3Kwi,
                                                             i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm,
                                                             m_a3Kwn, n_a3Kwo, o_a3Kwp)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                          h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                          o_a3Kwp)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                            h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                            o_a3Kwp) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 125, types: 352, coercions: 128, joins: 0/3}
GHC.Read.$fRead(,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 700 0}]
GHC.Read.$fRead(,,,,,,,,,,,,,)1
  = \ (@ a_a3Kyh)
      (@ b_a3Kyi)
      (@ c_a3Kyj)
      (@ d_a3Kyk)
      (@ e_a3Kyl)
      (@ f_a3Kym)
      (@ g_a3Kyn)
      (@ h_a3Kyo)
      (@ i_a3Kyp)
      (@ j_a3Kyq)
      (@ k_a3Kyr)
      (@ l_a3Kys)
      (@ m_a3Kyt)
      (@ n_a3Kyu)
      ($dRead_a3Kyv :: Read a_a3Kyh)
      ($dRead1_a3Kyw :: Read b_a3Kyi)
      ($dRead2_a3Kyx :: Read c_a3Kyj)
      ($dRead3_a3Kyy :: Read d_a3Kyk)
      ($dRead4_a3Kyz :: Read e_a3Kyl)
      ($dRead5_a3KyA :: Read f_a3Kym)
      ($dRead6_a3KyB :: Read g_a3Kyn)
      ($dRead7_a3KyC :: Read h_a3Kyo)
      ($dRead8_a3KyD :: Read i_a3Kyp)
      ($dRead9_a3KyE :: Read j_a3Kyq)
      ($dRead10_a3KyF :: Read k_a3Kyr)
      ($dRead11_a3KyG :: Read l_a3Kys)
      ($dRead12_a3KyH :: Read m_a3Kyt)
      ($dRead13_a3KyI :: Read n_a3Kyu)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
             h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Lsz [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                   h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Lsz
          = \ (n1_a3tm4 :: Prec) ->
              let {
                ds1_s3LsB [Dmd=<L,C(U)>]
                  :: P.ReadP
                       (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                        h_a3Kyo)
                [LclId]
                ds1_s3LsB
                  = GHC.Read.$fRead(,,,,,,,)2
                      @ a_a3Kyh
                      @ b_a3Kyi
                      @ c_a3Kyj
                      @ d_a3Kyk
                      @ e_a3Kyl
                      @ f_a3Kym
                      @ g_a3Kyn
                      @ h_a3Kyo
                      $dRead_a3Kyv
                      $dRead1_a3Kyw
                      $dRead2_a3Kyx
                      $dRead3_a3Kyy
                      $dRead4_a3Kyz
                      $dRead5_a3KyA
                      $dRead6_a3KyB
                      $dRead7_a3KyC
                      n1_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                        h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3LsB
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                h_a3Kyo)>_R
                          :: (P.ReadP
                                (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                 h_a3Kyo) :: *)
                             ~R# (forall b.
                                  ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                    h_a3Kyo)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt
                         :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                             h_a3Kyo)) ->
                      case a1_a3ngt of
                      { (a2_a3K3n, b3_a3K3o, c1_a3K3p, d1_a3K3q, e1_a3K3r, f1_a3K3s,
                         g1_a3K3t, h1_a3K3u) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((GHC.Read.$fRead(,,,)2
                                    @ i_a3Kyp
                                    @ j_a3Kyq
                                    @ k_a3Kyr
                                    @ l_a3Kys
                                    $dRead8_a3KyD
                                    $dRead9_a3KyE
                                    $dRead10_a3KyF
                                    $dRead11_a3KyG
                                    n1_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                             <(i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys)>_R
                                         :: (P.ReadP (i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys) :: *)
                                            ~R# (forall b.
                                                 ((i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys)
                                                  -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlS :: (i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys)) ->
                                     case a4_X3nlS of { (i1_a3K3v, j1_a3K3w, k2_a3K3x, l1_a3K3y) ->
                                     case Text.Read.Lex.$wexpect
                                            GHC.Read.$fRead(,)_lexeme
                                            @ b2_a3nIU
                                            (\ _ [Occ=Dead, OS=OneShot] ->
                                               ((GHC.Read.$fRead(,)2
                                                   @ m_a3Kyt
                                                   @ n_a3Kyu
                                                   $dRead12_a3KyH
                                                   $dRead13_a3KyI
                                                   n1_a3tm4)
                                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                            <(m_a3Kyt, n_a3Kyu)>_R
                                                        :: (P.ReadP (m_a3Kyt, n_a3Kyu) :: *)
                                                           ~R# (forall b.
                                                                ((m_a3Kyt, n_a3Kyu)
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b)
                                                                -> Text.ParserCombinators.ReadP.P
                                                                     b :: *)))
                                                 @ b2_a3nIU
                                                 (\ (a6_X3nma :: (m_a3Kyt, n_a3Kyu)) ->
                                                    case a6_X3nma of { (m1_a3K3z, n2_a3K3A) ->
                                                    k1_a3ngs
                                                      (a2_a3K3n, b3_a3K3o, c1_a3K3p, d1_a3K3q,
                                                       e1_a3K3r, f1_a3K3s, g1_a3K3t, h1_a3K3u,
                                                       i1_a3K3v, j1_a3K3w, k2_a3K3x, l1_a3K3y,
                                                       m1_a3K3z, n2_a3K3A)
                                                    }))
                                     of
                                     { (# ww1_s3xlt #) ->
                                     Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                                     }
                                     }))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                 h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)>_R)
                      :: (forall b.
                          ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                            h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                 h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt,
                                 n_a3Kyu) :: *)) } in
      let {
        lvl2_s3Luh [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                  h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Luh
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                     h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                        h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                     (p_s3Lsz
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym,
                                         g_a3Kyn, h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys,
                                         m_a3Kyt, n_a3Kyu)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym,
                                        g_a3Kyn, h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys,
                                        m_a3Kyt, n_a3Kyu) :: *)
                                 ~R# (ReadPrec
                                        (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym,
                                         g_a3Kyn, h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys,
                                         m_a3Kyt, n_a3Kyu) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
           h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
        ((\ (eta2_X56 :: Prec)
            (@ b2_X3nls)
            (eta3_X57
               :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                   h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                  -> Text.ParserCombinators.ReadP.P b2_X3nls) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                      h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                   (lvl2_s3Luh
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym,
                                             g_a3Kyn, h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys,
                                             m_a3Kyt,
                                             n_a3Kyu)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3Kyh, b_a3Kyi, c_a3Kyj,
                                                                        d_a3Kyk, e_a3Kyl, f_a3Kym,
                                                                        g_a3Kyn, h_a3Kyo, i_a3Kyp,
                                                                        j_a3Kyq, k_a3Kyr, l_a3Kys,
                                                                        m_a3Kyt, n_a3Kyu)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                     h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym,
                                       g_a3Kyn, h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys,
                                       m_a3Kyt, n_a3Kyu) :: *)))
                   eta2_X56
                   @ b2_X3nls
                   eta3_X57
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nls ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                  h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt,
                                  n_a3Kyu)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk,
                                                             e_a3Kyl, f_a3Kym, g_a3Kyn, h_a3Kyo,
                                                             i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys,
                                                             m_a3Kyt, n_a3Kyu)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                          h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                            h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt,
                            n_a3Kyu) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 118, types: 330, coercions: 122, joins: 0/3}
GHC.Read.$fRead(,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0 0 0 0 30 0 0] 680 0}]
GHC.Read.$fRead(,,,,,,,,,,,,)1
  = \ (@ a_a3KAa)
      (@ b_a3KAb)
      (@ c_a3KAc)
      (@ d_a3KAd)
      (@ e_a3KAe)
      (@ f_a3KAf)
      (@ g_a3KAg)
      (@ h_a3KAh)
      (@ i_a3KAi)
      (@ j_a3KAj)
      (@ k_a3KAk)
      (@ l_a3KAl)
      (@ m_a3KAm)
      ($dRead_a3KAn :: Read a_a3KAa)
      ($dRead1_a3KAo :: Read b_a3KAb)
      ($dRead2_a3KAp :: Read c_a3KAc)
      ($dRead3_a3KAq :: Read d_a3KAd)
      ($dRead4_a3KAr :: Read e_a3KAe)
      ($dRead5_a3KAs :: Read f_a3KAf)
      ($dRead6_a3KAt :: Read g_a3KAg)
      ($dRead7_a3KAu :: Read h_a3KAh)
      ($dRead8_a3KAv :: Read i_a3KAi)
      ($dRead9_a3KAw :: Read j_a3KAj)
      ($dRead10_a3KAx :: Read k_a3KAk)
      ($dRead11_a3KAy :: Read l_a3KAl)
      ($dRead12_a3KAz :: Read m_a3KAm)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
             h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Lsv [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                   h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Lsv
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3Lsx [Dmd=<L,C(U)>]
                  :: P.ReadP
                       (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                        h_a3KAh)
                [LclId]
                ds1_s3Lsx
                  = GHC.Read.$fRead(,,,,,,,)2
                      @ a_a3KAa
                      @ b_a3KAb
                      @ c_a3KAc
                      @ d_a3KAd
                      @ e_a3KAe
                      @ f_a3KAf
                      @ g_a3KAg
                      @ h_a3KAh
                      $dRead_a3KAn
                      $dRead1_a3KAo
                      $dRead2_a3KAp
                      $dRead3_a3KAq
                      $dRead4_a3KAr
                      $dRead5_a3KAs
                      $dRead6_a3KAt
                      $dRead7_a3KAu
                      n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                        h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3Lsx
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                h_a3KAh)>_R
                          :: (P.ReadP
                                (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                 h_a3KAh) :: *)
                             ~R# (forall b.
                                  ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                    h_a3KAh)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt
                         :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                             h_a3KAh)) ->
                      case a1_a3ngt of
                      { (a2_a3K3O, b3_a3K3P, c1_a3K3Q, d1_a3K3R, e1_a3K3S, f1_a3K3T,
                         g1_a3K3U, h1_a3K3V) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((GHC.Read.$fRead(,,,)2
                                    @ i_a3KAi
                                    @ j_a3KAj
                                    @ k_a3KAk
                                    @ l_a3KAl
                                    $dRead8_a3KAv
                                    $dRead9_a3KAw
                                    $dRead10_a3KAx
                                    $dRead11_a3KAy
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                             <(i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl)>_R
                                         :: (P.ReadP (i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl) :: *)
                                            ~R# (forall b.
                                                 ((i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl)
                                                  -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlR :: (i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl)) ->
                                     case a4_X3nlR of { (i1_a3K3W, j1_a3K3X, k2_a3K3Y, l1_a3K3Z) ->
                                     case Text.Read.Lex.$wexpect
                                            GHC.Read.$fRead(,)_lexeme
                                            @ b2_a3nIU
                                            (\ _ [Occ=Dead, OS=OneShot] ->
                                               ((((readPrec @ m_a3KAm $dRead12_a3KAz)
                                                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <m_a3KAm>_R
                                                          :: (ReadPrec m_a3KAm :: *)
                                                             ~R# (Prec -> P.ReadP m_a3KAm :: *)))
                                                   n_a3tm4)
                                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                            <m_a3KAm>_R
                                                        :: (P.ReadP m_a3KAm :: *)
                                                           ~R# (forall b.
                                                                (m_a3KAm
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b)
                                                                -> Text.ParserCombinators.ReadP.P
                                                                     b :: *)))
                                                 @ b2_a3nIU
                                                 (\ (a6_X3nm9 :: m_a3KAm) ->
                                                    k1_a3ngs
                                                      (a2_a3K3O, b3_a3K3P, c1_a3K3Q, d1_a3K3R,
                                                       e1_a3K3S, f1_a3K3T, g1_a3K3U, h1_a3K3V,
                                                       i1_a3K3W, j1_a3K3X, k2_a3K3Y, l1_a3K3Z,
                                                       a6_X3nm9)))
                                     of
                                     { (# ww1_s3xlt #) ->
                                     Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                                     }
                                     }))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                 h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)>_R)
                      :: (forall b.
                          ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                            h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                 h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm) :: *)) } in
      let {
        lvl2_s3Lui [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                  h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lui
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                     h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                        h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                     (p_s3Lsv
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf,
                                         g_a3KAg, h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl,
                                         m_a3KAm)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf,
                                        g_a3KAg, h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl,
                                        m_a3KAm) :: *)
                                 ~R# (ReadPrec
                                        (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf,
                                         g_a3KAg, h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl,
                                         m_a3KAm) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
           h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
        ((\ (eta2_X55 :: Prec)
            (@ b2_X3nlr)
            (eta3_X56
               :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                   h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlr) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                      h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                   (lvl2_s3Lui
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf,
                                             g_a3KAg, h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl,
                                             m_a3KAm)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KAa, b_a3KAb, c_a3KAc,
                                                                        d_a3KAd, e_a3KAe, f_a3KAf,
                                                                        g_a3KAg, h_a3KAh, i_a3KAi,
                                                                        j_a3KAj, k_a3KAk, l_a3KAl,
                                                                        m_a3KAm)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                     h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf,
                                       g_a3KAg, h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl,
                                       m_a3KAm) :: *)))
                   eta2_X55
                   @ b2_X3nlr
                   eta3_X56
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlr ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                  h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl,
                                  m_a3KAm)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd,
                                                             e_a3KAe, f_a3KAf, g_a3KAg, h_a3KAh,
                                                             i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl,
                                                             m_a3KAm)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                          h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                            h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 104, types: 302, coercions: 112, joins: 0/3}
GHC.Read.$fRead(,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0 0 0 0 0 0] 570 0}]
GHC.Read.$fRead(,,,,,,,,,,,)1
  = \ (@ a_a3KBY)
      (@ b_a3KBZ)
      (@ c_a3KC0)
      (@ d_a3KC1)
      (@ e_a3KC2)
      (@ f_a3KC3)
      (@ g_a3KC4)
      (@ h_a3KC5)
      (@ i_a3KC6)
      (@ j_a3KC7)
      (@ k_a3KC8)
      (@ l_a3KC9)
      ($dRead_a3KCa :: Read a_a3KBY)
      ($dRead1_a3KCb :: Read b_a3KBZ)
      ($dRead2_a3KCc :: Read c_a3KC0)
      ($dRead3_a3KCd :: Read d_a3KC1)
      ($dRead4_a3KCe :: Read e_a3KC2)
      ($dRead5_a3KCf :: Read f_a3KC3)
      ($dRead6_a3KCg :: Read g_a3KC4)
      ($dRead7_a3KCh :: Read h_a3KC5)
      ($dRead8_a3KCi :: Read i_a3KC6)
      ($dRead9_a3KCj :: Read j_a3KC7)
      ($dRead10_a3KCk :: Read k_a3KC8)
      ($dRead11_a3KCl :: Read l_a3KC9)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
             h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Lsr [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                   h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Lsr
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3Lst [Dmd=<L,C(U)>]
                  :: P.ReadP
                       (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                        h_a3KC5)
                [LclId]
                ds1_s3Lst
                  = GHC.Read.$fRead(,,,,,,,)2
                      @ a_a3KBY
                      @ b_a3KBZ
                      @ c_a3KC0
                      @ d_a3KC1
                      @ e_a3KC2
                      @ f_a3KC3
                      @ g_a3KC4
                      @ h_a3KC5
                      $dRead_a3KCa
                      $dRead1_a3KCb
                      $dRead2_a3KCc
                      $dRead3_a3KCd
                      $dRead4_a3KCe
                      $dRead5_a3KCf
                      $dRead6_a3KCg
                      $dRead7_a3KCh
                      n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                        h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3Lst
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                h_a3KC5)>_R
                          :: (P.ReadP
                                (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                 h_a3KC5) :: *)
                             ~R# (forall b.
                                  ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                    h_a3KC5)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt
                         :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                             h_a3KC5)) ->
                      case a1_a3ngt of
                      { (a2_a3K4d, b3_a3K4e, c1_a3K4f, d1_a3K4g, e1_a3K4h, f1_a3K4i,
                         g1_a3K4j, h1_a3K4k) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((GHC.Read.$fRead(,,,)2
                                    @ i_a3KC6
                                    @ j_a3KC7
                                    @ k_a3KC8
                                    @ l_a3KC9
                                    $dRead8_a3KCi
                                    $dRead9_a3KCj
                                    $dRead10_a3KCk
                                    $dRead11_a3KCl
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                             <(i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)>_R
                                         :: (P.ReadP (i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9) :: *)
                                            ~R# (forall b.
                                                 ((i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                                                  -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlQ :: (i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)) ->
                                     case a4_X3nlQ of { (i1_a3K4l, j1_a3K4m, k2_a3K4n, l1_a3K4o) ->
                                     k1_a3ngs
                                       (a2_a3K4d, b3_a3K4e, c1_a3K4f, d1_a3K4g, e1_a3K4h, f1_a3K4i,
                                        g1_a3K4j, h1_a3K4k, i1_a3K4l, j1_a3K4m, k2_a3K4n, l1_a3K4o)
                                     }))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                 h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)>_R)
                      :: (forall b.
                          ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                            h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                 h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9) :: *)) } in
      let {
        lvl2_s3Luj [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                  h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Luj
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                     h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                        h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                     (p_s3Lsr
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3,
                                         g_a3KC4, h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3,
                                        g_a3KC4, h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9) :: *)
                                 ~R# (ReadPrec
                                        (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3,
                                         g_a3KC4, h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8,
                                         l_a3KC9) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
           h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
        ((\ (eta2_X54 :: Prec)
            (@ b2_X3nlq)
            (eta3_X55
               :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                   h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlq) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                      h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                   (lvl2_s3Luj
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3,
                                             g_a3KC4, h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8,
                                             l_a3KC9)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KBY, b_a3KBZ, c_a3KC0,
                                                                        d_a3KC1, e_a3KC2, f_a3KC3,
                                                                        g_a3KC4, h_a3KC5, i_a3KC6,
                                                                        j_a3KC7, k_a3KC8,
                                                                        l_a3KC9)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                     h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3,
                                       g_a3KC4, h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9) :: *)))
                   eta2_X54
                   @ b2_X3nlq
                   eta3_X55
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlq ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                  h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8,
                                  l_a3KC9)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1,
                                                             e_a3KC2, f_a3KC3, g_a3KC4, h_a3KC5,
                                                             i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                          h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                            h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 110, types: 294, coercions: 108, joins: 0/3}
GHC.Read.$fRead(,,,,,,,,,,)1
  :: forall a b c d e f g h i j k.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0 0 30 0 0] 660 0}]
GHC.Read.$fRead(,,,,,,,,,,)1
  = \ (@ a_a3KDz)
      (@ b_a3KDA)
      (@ c_a3KDB)
      (@ d_a3KDC)
      (@ e_a3KDD)
      (@ f_a3KDE)
      (@ g_a3KDF)
      (@ h_a3KDG)
      (@ i_a3KDH)
      (@ j_a3KDI)
      (@ k_a3KDJ)
      ($dRead_a3KDK :: Read a_a3KDz)
      ($dRead1_a3KDL :: Read b_a3KDA)
      ($dRead2_a3KDM :: Read c_a3KDB)
      ($dRead3_a3KDN :: Read d_a3KDC)
      ($dRead4_a3KDO :: Read e_a3KDD)
      ($dRead5_a3KDP :: Read f_a3KDE)
      ($dRead6_a3KDQ :: Read g_a3KDF)
      ($dRead7_a3KDR :: Read h_a3KDG)
      ($dRead8_a3KDS :: Read i_a3KDH)
      ($dRead9_a3KDT :: Read j_a3KDI)
      ($dRead10_a3KDU :: Read k_a3KDJ)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
             h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Lsn [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                   h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Lsn
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3Lsp [Dmd=<L,C(U)>]
                  :: P.ReadP
                       (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                        h_a3KDG)
                [LclId]
                ds1_s3Lsp
                  = GHC.Read.$fRead(,,,,,,,)2
                      @ a_a3KDz
                      @ b_a3KDA
                      @ c_a3KDB
                      @ d_a3KDC
                      @ e_a3KDD
                      @ f_a3KDE
                      @ g_a3KDF
                      @ h_a3KDG
                      $dRead_a3KDK
                      $dRead1_a3KDL
                      $dRead2_a3KDM
                      $dRead3_a3KDN
                      $dRead4_a3KDO
                      $dRead5_a3KDP
                      $dRead6_a3KDQ
                      $dRead7_a3KDR
                      n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                        h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3Lsp
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                h_a3KDG)>_R
                          :: (P.ReadP
                                (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                 h_a3KDG) :: *)
                             ~R# (forall b.
                                  ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                    h_a3KDG)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt
                         :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                             h_a3KDG)) ->
                      case a1_a3ngt of
                      { (a2_a3K4A, b3_a3K4B, c1_a3K4C, d1_a3K4D, e1_a3K4E, f1_a3K4F,
                         g1_a3K4G, h1_a3K4H) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((GHC.Read.$fRead(,)2
                                    @ i_a3KDH @ j_a3KDI $dRead8_a3KDS $dRead9_a3KDT n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                             <(i_a3KDH, j_a3KDI)>_R
                                         :: (P.ReadP (i_a3KDH, j_a3KDI) :: *)
                                            ~R# (forall b.
                                                 ((i_a3KDH, j_a3KDI)
                                                  -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlP :: (i_a3KDH, j_a3KDI)) ->
                                     case a4_X3nlP of { (i1_a3K4I, j1_a3K4J) ->
                                     case Text.Read.Lex.$wexpect
                                            GHC.Read.$fRead(,)_lexeme
                                            @ b2_a3nIU
                                            (\ _ [Occ=Dead, OS=OneShot] ->
                                               ((((readPrec @ k_a3KDJ $dRead10_a3KDU)
                                                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <k_a3KDJ>_R
                                                          :: (ReadPrec k_a3KDJ :: *)
                                                             ~R# (Prec -> P.ReadP k_a3KDJ :: *)))
                                                   n_a3tm4)
                                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                            <k_a3KDJ>_R
                                                        :: (P.ReadP k_a3KDJ :: *)
                                                           ~R# (forall b.
                                                                (k_a3KDJ
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b)
                                                                -> Text.ParserCombinators.ReadP.P
                                                                     b :: *)))
                                                 @ b2_a3nIU
                                                 (\ (a6_X3nm5 :: k_a3KDJ) ->
                                                    k1_a3ngs
                                                      (a2_a3K4A, b3_a3K4B, c1_a3K4C, d1_a3K4D,
                                                       e1_a3K4E, f1_a3K4F, g1_a3K4G, h1_a3K4H,
                                                       i1_a3K4I, j1_a3K4J, a6_X3nm5)))
                                     of
                                     { (# ww1_s3xlt #) ->
                                     Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                                     }
                                     }))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                 h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)>_R)
                      :: (forall b.
                          ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                            h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                 h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ) :: *)) } in
      let {
        lvl2_s3Luk [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                  h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Luk
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                     h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                        h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                     (p_s3Lsn
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE,
                                         g_a3KDF, h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE,
                                        g_a3KDF, h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ) :: *)
                                 ~R# (ReadPrec
                                        (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE,
                                         g_a3KDF, h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
           h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
        ((\ (eta2_X53 :: Prec)
            (@ b2_X3nlp)
            (eta3_X54
               :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                   h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlp) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                      h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                   (lvl2_s3Luk
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE,
                                             g_a3KDF, h_a3KDG, i_a3KDH, j_a3KDI,
                                             k_a3KDJ)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KDz, b_a3KDA, c_a3KDB,
                                                                        d_a3KDC, e_a3KDD, f_a3KDE,
                                                                        g_a3KDF, h_a3KDG, i_a3KDH,
                                                                        j_a3KDI, k_a3KDJ)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                     h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE,
                                       g_a3KDF, h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ) :: *)))
                   eta2_X53
                   @ b2_X3nlp
                   eta3_X54
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlp ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                  h_a3KDG, i_a3KDH, j_a3KDI,
                                  k_a3KDJ)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC,
                                                             e_a3KDD, f_a3KDE, g_a3KDF, h_a3KDG,
                                                             i_a3KDH, j_a3KDI, k_a3KDJ)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                          h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                            h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 96, types: 266, coercions: 98, joins: 0/3}
GHC.Read.$fRead(,,,,,,,,,)1
  :: forall a b c d e f g h i j.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0 0 0 0] 550 0}]
GHC.Read.$fRead(,,,,,,,,,)1
  = \ (@ a_a3KFd)
      (@ b_a3KFe)
      (@ c_a3KFf)
      (@ d_a3KFg)
      (@ e_a3KFh)
      (@ f_a3KFi)
      (@ g_a3KFj)
      (@ h_a3KFk)
      (@ i_a3KFl)
      (@ j_a3KFm)
      ($dRead_a3KFn :: Read a_a3KFd)
      ($dRead1_a3KFo :: Read b_a3KFe)
      ($dRead2_a3KFp :: Read c_a3KFf)
      ($dRead3_a3KFq :: Read d_a3KFg)
      ($dRead4_a3KFr :: Read e_a3KFh)
      ($dRead5_a3KFs :: Read f_a3KFi)
      ($dRead6_a3KFt :: Read g_a3KFj)
      ($dRead7_a3KFu :: Read h_a3KFk)
      ($dRead8_a3KFv :: Read i_a3KFl)
      ($dRead9_a3KFw :: Read j_a3KFm)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
             h_a3KFk, i_a3KFl, j_a3KFm)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Lsj [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                   h_a3KFk, i_a3KFl, j_a3KFm)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Lsj
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3Lsl [Dmd=<L,C(U)>]
                  :: P.ReadP
                       (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                        h_a3KFk)
                [LclId]
                ds1_s3Lsl
                  = GHC.Read.$fRead(,,,,,,,)2
                      @ a_a3KFd
                      @ b_a3KFe
                      @ c_a3KFf
                      @ d_a3KFg
                      @ e_a3KFh
                      @ f_a3KFi
                      @ g_a3KFj
                      @ h_a3KFk
                      $dRead_a3KFn
                      $dRead1_a3KFo
                      $dRead2_a3KFp
                      $dRead3_a3KFq
                      $dRead4_a3KFr
                      $dRead5_a3KFs
                      $dRead6_a3KFt
                      $dRead7_a3KFu
                      n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                        h_a3KFk, i_a3KFl, j_a3KFm)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3Lsl
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                h_a3KFk)>_R
                          :: (P.ReadP
                                (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                 h_a3KFk) :: *)
                             ~R# (forall b.
                                  ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                    h_a3KFk)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt
                         :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                             h_a3KFk)) ->
                      case a1_a3ngt of
                      { (a2_a3K4V, b3_a3K4W, c1_a3K4X, d1_a3K4Y, e1_a3K4Z, f1_a3K50,
                         g1_a3K51, h1_a3K52) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((GHC.Read.$fRead(,)2
                                    @ i_a3KFl @ j_a3KFm $dRead8_a3KFv $dRead9_a3KFw n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                             <(i_a3KFl, j_a3KFm)>_R
                                         :: (P.ReadP (i_a3KFl, j_a3KFm) :: *)
                                            ~R# (forall b.
                                                 ((i_a3KFl, j_a3KFm)
                                                  -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlO :: (i_a3KFl, j_a3KFm)) ->
                                     case a4_X3nlO of { (i1_a3K53, j1_a3K54) ->
                                     k1_a3ngs
                                       (a2_a3K4V, b3_a3K4W, c1_a3K4X, d1_a3K4Y, e1_a3K4Z, f1_a3K50,
                                        g1_a3K51, h1_a3K52, i1_a3K53, j1_a3K54)
                                     }))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                 h_a3KFk, i_a3KFl, j_a3KFm)>_R)
                      :: (forall b.
                          ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                            h_a3KFk, i_a3KFl, j_a3KFm)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                 h_a3KFk, i_a3KFl, j_a3KFm) :: *)) } in
      let {
        lvl2_s3Lul [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                  h_a3KFk, i_a3KFl, j_a3KFm)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lul
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                     h_a3KFk, i_a3KFl, j_a3KFm)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                        h_a3KFk, i_a3KFl, j_a3KFm)
                     (p_s3Lsj
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi,
                                         g_a3KFj, h_a3KFk, i_a3KFl, j_a3KFm)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi,
                                        g_a3KFj, h_a3KFk, i_a3KFl, j_a3KFm) :: *)
                                 ~R# (ReadPrec
                                        (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi,
                                         g_a3KFj, h_a3KFk, i_a3KFl, j_a3KFm) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
           h_a3KFk, i_a3KFl, j_a3KFm)
        ((\ (eta2_X52 :: Prec)
            (@ b2_X3nlo)
            (eta3_X53
               :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                   h_a3KFk, i_a3KFl, j_a3KFm)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlo) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                      h_a3KFk, i_a3KFl, j_a3KFm)
                   (lvl2_s3Lul
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi,
                                             g_a3KFj, h_a3KFk, i_a3KFl,
                                             j_a3KFm)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KFd, b_a3KFe, c_a3KFf,
                                                                        d_a3KFg, e_a3KFh, f_a3KFi,
                                                                        g_a3KFj, h_a3KFk, i_a3KFl,
                                                                        j_a3KFm)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                     h_a3KFk, i_a3KFl, j_a3KFm)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi,
                                       g_a3KFj, h_a3KFk, i_a3KFl, j_a3KFm) :: *)))
                   eta2_X52
                   @ b2_X3nlo
                   eta3_X53
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlo ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                  h_a3KFk, i_a3KFl,
                                  j_a3KFm)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg,
                                                             e_a3KFh, f_a3KFi, g_a3KFj, h_a3KFk,
                                                             i_a3KFl, j_a3KFm)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                          h_a3KFk, i_a3KFl, j_a3KFm)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                            h_a3KFk, i_a3KFl, j_a3KFm) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 89, types: 244, coercions: 92, joins: 0/3}
GHC.Read.$fRead(,,,,,,,,)1
  :: forall a b c d e f g h i.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 30 0 0] 530 0}]
GHC.Read.$fRead(,,,,,,,,)1
  = \ (@ a_a3KGE)
      (@ b_a3KGF)
      (@ c_a3KGG)
      (@ d_a3KGH)
      (@ e_a3KGI)
      (@ f_a3KGJ)
      (@ g_a3KGK)
      (@ h_a3KGL)
      (@ i_a3KGM)
      ($dRead_a3KGN :: Read a_a3KGE)
      ($dRead1_a3KGO :: Read b_a3KGF)
      ($dRead2_a3KGP :: Read c_a3KGG)
      ($dRead3_a3KGQ :: Read d_a3KGH)
      ($dRead4_a3KGR :: Read e_a3KGI)
      ($dRead5_a3KGS :: Read f_a3KGJ)
      ($dRead6_a3KGT :: Read g_a3KGK)
      ($dRead7_a3KGU :: Read h_a3KGL)
      ($dRead8_a3KGV :: Read i_a3KGM)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
             h_a3KGL, i_a3KGM)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Lsf [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                   h_a3KGL, i_a3KGM)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Lsf
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3Lsh [Dmd=<L,C(U)>]
                  :: P.ReadP
                       (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                        h_a3KGL)
                [LclId]
                ds1_s3Lsh
                  = GHC.Read.$fRead(,,,,,,,)2
                      @ a_a3KGE
                      @ b_a3KGF
                      @ c_a3KGG
                      @ d_a3KGH
                      @ e_a3KGI
                      @ f_a3KGJ
                      @ g_a3KGK
                      @ h_a3KGL
                      $dRead_a3KGN
                      $dRead1_a3KGO
                      $dRead2_a3KGP
                      $dRead3_a3KGQ
                      $dRead4_a3KGR
                      $dRead5_a3KGS
                      $dRead6_a3KGT
                      $dRead7_a3KGU
                      n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                        h_a3KGL, i_a3KGM)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3Lsh
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                h_a3KGL)>_R
                          :: (P.ReadP
                                (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                 h_a3KGL) :: *)
                             ~R# (forall b.
                                  ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                    h_a3KGL)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt
                         :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                             h_a3KGL)) ->
                      case a1_a3ngt of
                      { (a2_a3K5e, b3_a3K5f, c1_a3K5g, d1_a3K5h, e1_a3K5i, f1_a3K5j,
                         g1_a3K5k, h1_a3K5l) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((((readPrec @ i_a3KGM $dRead8_a3KGV)
                                   `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <i_a3KGM>_R
                                           :: (ReadPrec i_a3KGM :: *)
                                              ~R# (Prec -> P.ReadP i_a3KGM :: *)))
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <i_a3KGM>_R
                                         :: (P.ReadP i_a3KGM :: *)
                                            ~R# (forall b.
                                                 (i_a3KGM -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlN :: i_a3KGM) ->
                                     k1_a3ngs
                                       (a2_a3K5e, b3_a3K5f, c1_a3K5g, d1_a3K5h, e1_a3K5i, f1_a3K5j,
                                        g1_a3K5k, h1_a3K5l, a4_X3nlN)))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                 h_a3KGL, i_a3KGM)>_R)
                      :: (forall b.
                          ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                            h_a3KGL, i_a3KGM)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                 h_a3KGL, i_a3KGM) :: *)) } in
      let {
        lvl2_s3Lum [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                  h_a3KGL, i_a3KGM)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lum
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                     h_a3KGL, i_a3KGM)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                        h_a3KGL, i_a3KGM)
                     (p_s3Lsf
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ,
                                         g_a3KGK, h_a3KGL, i_a3KGM)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ,
                                        g_a3KGK, h_a3KGL, i_a3KGM) :: *)
                                 ~R# (ReadPrec
                                        (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ,
                                         g_a3KGK, h_a3KGL, i_a3KGM) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
           h_a3KGL, i_a3KGM)
        ((\ (eta2_X51 :: Prec)
            (@ b2_X3nln)
            (eta3_X52
               :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                   h_a3KGL, i_a3KGM)
                  -> Text.ParserCombinators.ReadP.P b2_X3nln) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                      h_a3KGL, i_a3KGM)
                   (lvl2_s3Lum
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ,
                                             g_a3KGK, h_a3KGL,
                                             i_a3KGM)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KGE, b_a3KGF, c_a3KGG,
                                                                        d_a3KGH, e_a3KGI, f_a3KGJ,
                                                                        g_a3KGK, h_a3KGL,
                                                                        i_a3KGM)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                     h_a3KGL, i_a3KGM)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ,
                                       g_a3KGK, h_a3KGL, i_a3KGM) :: *)))
                   eta2_X51
                   @ b2_X3nln
                   eta3_X52
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nln ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                  h_a3KGL,
                                  i_a3KGM)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH,
                                                             e_a3KGI, f_a3KGJ, g_a3KGK, h_a3KGL,
                                                             i_a3KGM)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                          h_a3KGL, i_a3KGM)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                            h_a3KGL, i_a3KGM) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 55, types: 157, coercions: 61, joins: 0/2}
GHC.Read.$fRead(,,,,,,,)1
  :: forall a b c d e f g h.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0 0 0] 310 0}]
GHC.Read.$fRead(,,,,,,,)1
  = \ (@ a_a3KI0)
      (@ b_a3KI1)
      (@ c_a3KI2)
      (@ d_a3KI3)
      (@ e_a3KI4)
      (@ f_a3KI5)
      (@ g_a3KI6)
      (@ h_a3KI7)
      ($dRead_a3KI8 :: Read a_a3KI0)
      ($dRead1_a3KI9 :: Read b_a3KI1)
      ($dRead2_a3KIa :: Read c_a3KI2)
      ($dRead3_a3KIb :: Read d_a3KI3)
      ($dRead4_a3KIc :: Read e_a3KI4)
      ($dRead5_a3KId :: Read f_a3KI5)
      ($dRead6_a3KIe :: Read g_a3KI6)
      ($dRead7_a3KIf :: Read h_a3KI7)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
             h_a3KI7)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Lsd [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                   h_a3KI7)
        [LclId, Arity=1, Unf=OtherCon []]
        p_s3Lsd
          = GHC.Read.$fRead(,,,,,,,)2
              @ a_a3KI0
              @ b_a3KI1
              @ c_a3KI2
              @ d_a3KI3
              @ e_a3KI4
              @ f_a3KI5
              @ g_a3KI6
              @ h_a3KI7
              $dRead_a3KI8
              $dRead1_a3KI9
              $dRead2_a3KIa
              $dRead3_a3KIb
              $dRead4_a3KIc
              $dRead5_a3KId
              $dRead6_a3KIe
              $dRead7_a3KIf } in
      let {
        lvl2_s3Lun [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                  h_a3KI7)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lun
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                     h_a3KI7)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                        h_a3KI7)
                     (p_s3Lsd
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5,
                                         g_a3KI6, h_a3KI7)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5,
                                        g_a3KI6, h_a3KI7) :: *)
                                 ~R# (ReadPrec
                                        (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5,
                                         g_a3KI6, h_a3KI7) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
           h_a3KI7)
        ((\ (eta2_X4X :: Prec)
            (@ b2_X3nlj)
            (eta3_X4Y
               :: (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                   h_a3KI7)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlj) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                      h_a3KI7)
                   (lvl2_s3Lun
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5,
                                             g_a3KI6,
                                             h_a3KI7)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KI0, b_a3KI1, c_a3KI2,
                                                                        d_a3KI3, e_a3KI4, f_a3KI5,
                                                                        g_a3KI6, h_a3KI7)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                                     h_a3KI7)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5,
                                       g_a3KI6, h_a3KI7) :: *)))
                   eta2_X4X
                   @ b2_X3nlj
                   eta3_X4Y
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlj ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                                  h_a3KI7)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3,
                                                             e_a3KI4, f_a3KI5, g_a3KI6, h_a3KI7)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                          h_a3KI7)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                            h_a3KI7) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 94, types: 218, coercions: 80, joins: 0/3}
GHC.Read.$fRead(,,,,,,)1
  :: forall a b c d e f g.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f, g) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 30 0 0] 620 0}]
GHC.Read.$fRead(,,,,,,)1
  = \ (@ a_a3KIU)
      (@ b_a3KIV)
      (@ c_a3KIW)
      (@ d_a3KIX)
      (@ e_a3KIY)
      (@ f_a3KIZ)
      (@ g_a3KJ0)
      ($dRead_a3KJ1 :: Read a_a3KIU)
      ($dRead1_a3KJ2 :: Read b_a3KIV)
      ($dRead2_a3KJ3 :: Read c_a3KIW)
      ($dRead3_a3KJ4 :: Read d_a3KIX)
      ($dRead4_a3KJ5 :: Read e_a3KIY)
      ($dRead5_a3KJ6 :: Read f_a3KIZ)
      ($dRead6_a3KJ7 :: Read g_a3KJ0)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Ls9 [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP
                  (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Ls9
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3Lsb [Dmd=<L,C(U)>]
                  :: P.ReadP (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                [LclId]
                ds1_s3Lsb
                  = GHC.Read.$fRead(,,,)2
                      @ a_a3KIU
                      @ b_a3KIV
                      @ c_a3KIW
                      @ d_a3KIX
                      $dRead_a3KJ1
                      $dRead1_a3KJ2
                      $dRead2_a3KJ3
                      $dRead3_a3KJ4
                      n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3Lsb
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)>_R
                          :: (P.ReadP (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX) :: *)
                             ~R# (forall b.
                                  ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)) ->
                      case a1_a3ngt of { (a2_a3K5C, b3_a3K5D, c1_a3K5E, d1_a3K5F) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((GHC.Read.$fRead(,)2
                                    @ e_a3KIY @ f_a3KIZ $dRead4_a3KJ5 $dRead5_a3KJ6 n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                             <(e_a3KIY, f_a3KIZ)>_R
                                         :: (P.ReadP (e_a3KIY, f_a3KIZ) :: *)
                                            ~R# (forall b.
                                                 ((e_a3KIY, f_a3KIZ)
                                                  -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlH :: (e_a3KIY, f_a3KIZ)) ->
                                     case a4_X3nlH of { (e1_a3K5G, f1_a3K5H) ->
                                     case Text.Read.Lex.$wexpect
                                            GHC.Read.$fRead(,)_lexeme
                                            @ b2_a3nIU
                                            (\ _ [Occ=Dead, OS=OneShot] ->
                                               ((((readPrec @ g_a3KJ0 $dRead6_a3KJ7)
                                                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <g_a3KJ0>_R
                                                          :: (ReadPrec g_a3KJ0 :: *)
                                                             ~R# (Prec -> P.ReadP g_a3KJ0 :: *)))
                                                   n_a3tm4)
                                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                            <g_a3KJ0>_R
                                                        :: (P.ReadP g_a3KJ0 :: *)
                                                           ~R# (forall b.
                                                                (g_a3KJ0
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b)
                                                                -> Text.ParserCombinators.ReadP.P
                                                                     b :: *)))
                                                 @ b2_a3nIU
                                                 (\ (a6_X3nlX :: g_a3KJ0) ->
                                                    k1_a3ngs
                                                      (a2_a3K5C, b3_a3K5D, c1_a3K5E, d1_a3K5F,
                                                       e1_a3K5G, f1_a3K5H, a6_X3nlX)))
                                     of
                                     { (# ww1_s3xlt #) ->
                                     Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                                     }
                                     }))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                                 g_a3KJ0)>_R)
                      :: (forall b.
                          ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                                 g_a3KJ0) :: *)) } in
      let {
        lvl2_s3Luo [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Luo
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                     (p_s3Ls9
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                                         g_a3KJ0)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                                        g_a3KJ0) :: *)
                                 ~R# (ReadPrec
                                        (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                                         g_a3KJ0) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
        ((\ (eta2_X4Z :: Prec)
            (@ b2_X3nll)
            (eta3_X50
               :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                  -> Text.ParserCombinators.ReadP.P b2_X3nll) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                   (lvl2_s3Luo
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                                             g_a3KJ0)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KIU, b_a3KIV, c_a3KIW,
                                                                        d_a3KIX, e_a3KIY, f_a3KIZ,
                                                                        g_a3KJ0)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                                       g_a3KJ0) :: *)))
                   eta2_X4Z
                   @ b2_X3nll
                   eta3_X50
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nll ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                                  g_a3KJ0)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX,
                                                             e_a3KIY, f_a3KIZ, g_a3KJ0)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ,
                            g_a3KJ0) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 80, types: 190, coercions: 70, joins: 0/3}
GHC.Read.$fRead(,,,,,)1
  :: forall a b c d e f.
     (Read a, Read b, Read c, Read d, Read e, Read f) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e, f) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0 0 0] 510 0}]
GHC.Read.$fRead(,,,,,)1
  = \ (@ a_a3KKe)
      (@ b_a3KKf)
      (@ c_a3KKg)
      (@ d_a3KKh)
      (@ e_a3KKi)
      (@ f_a3KKj)
      ($dRead_a3KKk :: Read a_a3KKe)
      ($dRead1_a3KKl :: Read b_a3KKf)
      ($dRead2_a3KKm :: Read c_a3KKg)
      ($dRead3_a3KKn :: Read d_a3KKh)
      ($dRead4_a3KKo :: Read e_a3KKi)
      ($dRead5_a3KKp :: Read f_a3KKj)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Ls5 [Dmd=<L,C(C1(U))>]
          :: Prec
             -> P.ReadP (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Ls5
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3Ls7 [Dmd=<L,C(U)>]
                  :: P.ReadP (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                [LclId]
                ds1_s3Ls7
                  = GHC.Read.$fRead(,,,)2
                      @ a_a3KKe
                      @ b_a3KKf
                      @ c_a3KKg
                      @ d_a3KKh
                      $dRead_a3KKk
                      $dRead1_a3KKl
                      $dRead2_a3KKm
                      $dRead3_a3KKn
                      n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3Ls7
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)>_R
                          :: (P.ReadP (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh) :: *)
                             ~R# (forall b.
                                  ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)) ->
                      case a1_a3ngt of { (a2_a3K5P, b3_a3K5Q, c1_a3K5R, d1_a3K5S) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((GHC.Read.$fRead(,)2
                                    @ e_a3KKi @ f_a3KKj $dRead4_a3KKo $dRead5_a3KKp n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                             <(e_a3KKi, f_a3KKj)>_R
                                         :: (P.ReadP (e_a3KKi, f_a3KKj) :: *)
                                            ~R# (forall b.
                                                 ((e_a3KKi, f_a3KKj)
                                                  -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlG :: (e_a3KKi, f_a3KKj)) ->
                                     case a4_X3nlG of { (e1_a3K5T, f1_a3K5U) ->
                                     k1_a3ngs
                                       (a2_a3K5P, b3_a3K5Q, c1_a3K5R, d1_a3K5S, e1_a3K5T, f1_a3K5U)
                                     }))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)>_R)
                      :: (forall b.
                          ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj) :: *)) } in
      let {
        lvl2_s3Lup [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lup
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                     (p_s3Ls5
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)>_R)
                              :: (Prec
                                  -> P.ReadP
                                       (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj) :: *)
                                 ~R# (ReadPrec
                                        (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi,
                                         f_a3KKj) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
        ((\ (eta2_X4Y :: Prec)
            (@ b2_X3nlk)
            (eta3_X4Z
               :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlk) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                   (lvl2_s3Lup
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi,
                                             f_a3KKj)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KKe, b_a3KKf, c_a3KKg,
                                                                        d_a3KKh, e_a3KKi,
                                                                        f_a3KKj)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj) :: *)))
                   eta2_X4Y
                   @ b2_X3nlk
                   eta3_X4Z
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlk ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi,
                                  f_a3KKj)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh,
                                                             e_a3KKi, f_a3KKj)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 73, types: 168, coercions: 64, joins: 0/3}
GHC.Read.$fRead(,,,,)1
  :: forall a b c d e.
     (Read a, Read b, Read c, Read d, Read e) =>
     Prec
     -> forall b1.
        ((a, b, c, d, e) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 30 0 0] 490 0}]
GHC.Read.$fRead(,,,,)1
  = \ (@ a_a3KLl)
      (@ b_a3KLm)
      (@ c_a3KLn)
      (@ d_a3KLo)
      (@ e_a3KLp)
      ($dRead_a3KLq :: Read a_a3KLl)
      ($dRead1_a3KLr :: Read b_a3KLm)
      ($dRead2_a3KLs :: Read c_a3KLn)
      ($dRead3_a3KLt :: Read d_a3KLo)
      ($dRead4_a3KLu :: Read e_a3KLp)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3Ls1 [Dmd=<L,C(C1(U))>]
          :: Prec -> P.ReadP (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3Ls1
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3Ls3 [Dmd=<L,C(U)>]
                  :: P.ReadP (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                [LclId]
                ds1_s3Ls3
                  = GHC.Read.$fRead(,,,)2
                      @ a_a3KLl
                      @ b_a3KLm
                      @ c_a3KLn
                      @ d_a3KLo
                      $dRead_a3KLq
                      $dRead1_a3KLr
                      $dRead2_a3KLs
                      $dRead3_a3KLt
                      n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3Ls3
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)>_R
                          :: (P.ReadP (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo) :: *)
                             ~R# (forall b.
                                  ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                                   -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)) ->
                      case a1_a3ngt of { (a2_a3K60, b3_a3K61, c1_a3K62, d1_a3K63) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((((readPrec @ e_a3KLp $dRead4_a3KLu)
                                   `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <e_a3KLp>_R
                                           :: (ReadPrec e_a3KLp :: *)
                                              ~R# (Prec -> P.ReadP e_a3KLp :: *)))
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <e_a3KLp>_R
                                         :: (P.ReadP e_a3KLp :: *)
                                            ~R# (forall b.
                                                 (e_a3KLp -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlF :: e_a3KLp) ->
                                     k1_a3ngs (a2_a3K60, b3_a3K61, c1_a3K62, d1_a3K63, a4_X3nlF)))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)>_R)
                      :: (forall b.
                          ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP
                                (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp) :: *)) } in
      let {
        lvl2_s3Luq [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Luq
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                     (p_s3Ls1
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)>_R)
                              :: (Prec
                                  -> P.ReadP (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp) :: *)
                                 ~R# (ReadPrec (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
        ((\ (eta2_X4X :: Prec)
            (@ b2_X3nlj)
            (eta3_X4Y
               :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlj) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                   (lvl2_s3Luq
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo,
                                             e_a3KLp)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KLl, b_a3KLm, c_a3KLn,
                                                                        d_a3KLo, e_a3KLp)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp) :: *)))
                   eta2_X4X
                   @ b2_X3nlj
                   eta3_X4Y
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlj ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo,
                                  e_a3KLp)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo,
                                                             e_a3KLp)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 43, types: 105, coercions: 41, joins: 0/2}
GHC.Read.$fRead(,,,)1
  :: forall a b c d.
     (Read a, Read b, Read c, Read d) =>
     Prec
     -> forall b1.
        ((a, b, c, d) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0 0] 270 0}]
GHC.Read.$fRead(,,,)1
  = \ (@ a_a3KMn)
      (@ b_a3KMo)
      (@ c_a3KMp)
      (@ d_a3KMq)
      ($dRead_a3KMr :: Read a_a3KMn)
      ($dRead1_a3KMs :: Read b_a3KMo)
      ($dRead2_a3KMt :: Read c_a3KMp)
      ($dRead3_a3KMu :: Read d_a3KMq)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3LrZ [Dmd=<L,C(C1(U))>]
          :: Prec -> P.ReadP (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
        [LclId, Arity=1, Unf=OtherCon []]
        p_s3LrZ
          = GHC.Read.$fRead(,,,)2
              @ a_a3KMn
              @ b_a3KMo
              @ c_a3KMp
              @ d_a3KMq
              $dRead_a3KMr
              $dRead1_a3KMs
              $dRead2_a3KMt
              $dRead3_a3KMu } in
      let {
        lvl2_s3Lur [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                 -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lur
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                     (p_s3LrZ
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)>_R)
                              :: (Prec -> P.ReadP (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq) :: *)
                                 ~R# (ReadPrec (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
        ((\ (eta2_X4T :: Prec)
            (@ b2_X3nlf)
            (eta3_X4U
               :: (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlf) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                   (lvl2_s3Lur
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KMn, b_a3KMo, c_a3KMp,
                                             d_a3KMq)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KMn, b_a3KMo, c_a3KMp,
                                                                        d_a3KMq)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq) :: *)))
                   eta2_X4T
                   @ b2_X3nlf
                   eta3_X4U
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlf ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KMn, b_a3KMo, c_a3KMp,
                                  d_a3KMq)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 65, types: 130, coercions: 50, joins: 0/3}
GHC.Read.$fRead(,,)1
  :: forall a b c.
     (Read a, Read b, Read c) =>
     Prec
     -> forall b1.
        ((a, b, c) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 30 0 0] 470 0}]
GHC.Read.$fRead(,,)1
  = \ (@ a_a3KN1)
      (@ b_a3KN2)
      (@ c_a3KN3)
      ($dRead_a3KN4 :: Read a_a3KN1)
      ($dRead1_a3KN5 :: Read b_a3KN2)
      ($dRead2_a3KN6 :: Read c_a3KN3)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KN1, b_a3KN2, c_a3KN3)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3LrV [Dmd=<L,C(C1(U))>]
          :: Prec -> P.ReadP (a_a3KN1, b_a3KN2, c_a3KN3)
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s3LrV
          = \ (n_a3tm4 :: Prec) ->
              let {
                ds1_s3LrX [Dmd=<L,C(U)>] :: P.ReadP (a_a3KN1, b_a3KN2)
                [LclId]
                ds1_s3LrX
                  = GHC.Read.$fRead(,)2
                      @ a_a3KN1 @ b_a3KN2 $dRead_a3KN4 $dRead1_a3KN5 n_a3tm4 } in
              (\ (@ b2_a3nIU)
                 (k1_a3ngs
                    :: (a_a3KN1, b_a3KN2, c_a3KN3)
                       -> Text.ParserCombinators.ReadP.P b2_a3nIU) ->
                 (ds1_s3LrX
                  `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <(a_a3KN1, b_a3KN2)>_R
                          :: (P.ReadP (a_a3KN1, b_a3KN2) :: *)
                             ~R# (forall b.
                                  ((a_a3KN1, b_a3KN2) -> Text.ParserCombinators.ReadP.P b)
                                  -> Text.ParserCombinators.ReadP.P b :: *)))
                   @ b2_a3nIU
                   (\ (a1_a3ngt :: (a_a3KN1, b_a3KN2)) ->
                      case a1_a3ngt of { (a2_a3K6c, b3_a3K6d) ->
                      case Text.Read.Lex.$wexpect
                             GHC.Read.$fRead(,)_lexeme
                             @ b2_a3nIU
                             (\ _ [Occ=Dead, OS=OneShot] ->
                                ((((readPrec @ c_a3KN3 $dRead2_a3KN6)
                                   `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <c_a3KN3>_R
                                           :: (ReadPrec c_a3KN3 :: *)
                                              ~R# (Prec -> P.ReadP c_a3KN3 :: *)))
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <c_a3KN3>_R
                                         :: (P.ReadP c_a3KN3 :: *)
                                            ~R# (forall b.
                                                 (c_a3KN3 -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b2_a3nIU
                                  (\ (a4_X3nlB :: c_a3KN3) ->
                                     k1_a3ngs (a2_a3K6c, b3_a3K6d, a4_X3nlB)))
                      of
                      { (# ww1_s3xlt #) ->
                      Text.ParserCombinators.ReadP.Look @ b2_a3nIU ww1_s3xlt
                      }
                      }))
              `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                               <(a_a3KN1, b_a3KN2, c_a3KN3)>_R)
                      :: (forall b.
                          ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (P.ReadP (a_a3KN1, b_a3KN2, c_a3KN3) :: *)) } in
      let {
        lvl2_s3Lus [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lus
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KN1, b_a3KN2, c_a3KN3)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KN1, b_a3KN2, c_a3KN3)
                     (p_s3LrV
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KN1, b_a3KN2, c_a3KN3)>_R)
                              :: (Prec -> P.ReadP (a_a3KN1, b_a3KN2, c_a3KN3) :: *)
                                 ~R# (ReadPrec (a_a3KN1, b_a3KN2, c_a3KN3) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KN1, b_a3KN2, c_a3KN3)
        ((\ (eta2_X4V :: Prec)
            (@ b2_X3nlh)
            (eta3_X4W
               :: (a_a3KN1, b_a3KN2, c_a3KN3)
                  -> Text.ParserCombinators.ReadP.P b2_X3nlh) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KN1, b_a3KN2, c_a3KN3)
                   (lvl2_s3Lus
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KN1, b_a3KN2,
                                             c_a3KN3)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KN1, b_a3KN2,
                                                                        c_a3KN3)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (a_a3KN1, b_a3KN2, c_a3KN3) :: *)))
                   eta2_X4V
                   @ b2_X3nlh
                   eta3_X4W
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nlh ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KN1, b_a3KN2,
                                  c_a3KN3)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KN1, b_a3KN2, c_a3KN3)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_a3KN1, b_a3KN2, c_a3KN3) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 37, types: 79, coercions: 31, joins: 0/2}
GHC.Read.$fRead(,)1
  :: forall a b.
     (Read a, Read b) =>
     Prec
     -> forall b1.
        ((a, b) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 250 0}]
GHC.Read.$fRead(,)1
  = \ (@ a_a3KNT)
      (@ b_a3KNU)
      ($dRead_a3KNV :: Read a_a3KNT)
      ($dRead1_a3KNW :: Read b_a3KNU)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: (a_a3KNT, b_a3KNU)
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        p_s3LrT [Dmd=<L,C(C1(U))>] :: Prec -> P.ReadP (a_a3KNT, b_a3KNU)
        [LclId, Arity=1, Unf=OtherCon []]
        p_s3LrT
          = GHC.Read.$fRead(,)2
              @ a_a3KNT @ b_a3KNU $dRead_a3KNV $dRead1_a3KNW } in
      let {
        lvl2_s3Lut [Dmd=<L,C(C1(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KNT, b_a3KNU) -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
        lvl2_s3Lut
          = \ (w_s3MoQ :: Prec)
              (@ b2_s3MoR)
              (w1_s3MoS
                 :: (a_a3KNT, b_a3KNU)
                    -> Text.ParserCombinators.ReadP.P b2_s3MoR) ->
              case GHC.Read.$wparen'
                     @ (a_a3KNT, b_a3KNU)
                     (p_s3LrT
                      `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                       <(a_a3KNT, b_a3KNU)>_R)
                              :: (Prec -> P.ReadP (a_a3KNT, b_a3KNU) :: *)
                                 ~R# (ReadPrec (a_a3KNT, b_a3KNU) :: *)))
                     w_s3MoQ
                     @ b2_s3MoR
                     w1_s3MoS
              of
              { (# ww1_s3Mvv #) ->
              Text.ParserCombinators.ReadP.Get @ b2_s3MoR ww1_s3Mvv
              } } in
      GHC.Read.list3
        @ (a_a3KNT, b_a3KNU)
        ((\ (eta2_X4R :: Prec)
            (@ b2_X3nld)
            (eta3_X4S
               :: (a_a3KNT, b_a3KNU)
                  -> Text.ParserCombinators.ReadP.P b2_X3nld) ->
            case GHC.Read.$wskipSpacesThenP
                   @ (a_a3KNT, b_a3KNU)
                   (lvl2_s3Lut
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_a3KNT,
                                             b_a3KNU)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_a3KNT, b_a3KNU)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_a3KNT, b_a3KNU) -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (a_a3KNT, b_a3KNU) :: *)))
                   eta2_X4R
                   @ b2_X3nld
                   eta3_X4S
            of
            { (# ww1_s3Mvt #) ->
            Text.ParserCombinators.ReadP.Look @ b2_X3nld ww1_s3Mvt
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_a3KNT,
                                  b_a3KNU)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_a3KNT, b_a3KNU)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_a3KNT, b_a3KNU) -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_a3KNT, b_a3KNU) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.list2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.list2 = "["#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.list1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.list1 = unpackCString# GHC.Read.list2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.list_lexeme :: L.Lexeme
[GblId,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.list_lexeme = Text.Read.Lex.Punc GHC.Read.list1

-- RHS size: {terms: 100, types: 105, coercions: 28, joins: 0/6}
list :: forall a. ReadPrec a -> ReadPrec [a]
[GblId,
 Arity=1,
 Str=<L,1*C1(C(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 770 60}]
list
  = \ (@ a_a3KpE) (readx_a3K7P :: ReadPrec a_a3KpE) ->
      let {
        ds1_s3Luv [Dmd=<L,C(U)>] :: P.ReadP a_a3KpE
        [LclId]
        ds1_s3Luv
          = (readx_a3K7P
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3KpE>_R
                     :: (ReadPrec a_a3KpE :: *) ~R# (Prec -> P.ReadP a_a3KpE :: *)))
              minPrec } in
      letrec {
        $wlistRest_s3MtP [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
          :: Bool
             -> forall b1.
                ([a_a3KpE] -> Text.ParserCombinators.ReadP.P b1)
                -> Text.ParserCombinators.ReadP.P b1
        [LclId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []]
        $wlistRest_s3MtP
          = \ (w_s3MtL :: Bool)
              (@ b1_s3MtN)
              (w1_s3MtO
                 :: [a_a3KpE] -> Text.ParserCombinators.ReadP.P b1_s3MtN) ->
              let {
                lvl116_X3wkV :: Text.ParserCombinators.ReadP.P b1_s3MtN
                [LclId]
                lvl116_X3wkV
                  = let {
                      lvl2_s3MJp :: Text.ParserCombinators.ReadP.P b1_s3MtN
                      [LclId]
                      lvl2_s3MJp = w1_s3MtO (GHC.Types.[] @ a_a3KpE) } in
                    let {
                      lvl3_s3MJo :: Text.ParserCombinators.ReadP.P b1_s3MtN
                      [LclId]
                      lvl3_s3MJo
                        = (ds1_s3Luv
                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3KpE>_R
                                   :: (P.ReadP a_a3KpE :: *)
                                      ~R# (forall b.
                                           (a_a3KpE -> Text.ParserCombinators.ReadP.P b)
                                           -> Text.ParserCombinators.ReadP.P b :: *)))
                            @ b1_s3MtN
                            (\ (a1_X3nqw :: a_a3KpE) ->
                               $wlistRest_s3MtP
                                 GHC.Types.True
                                 @ b1_s3MtN
                                 (\ (a2_X3nlu :: [a_a3KpE]) ->
                                    w1_s3MtO (GHC.Types.: @ a_a3KpE a1_X3nqw a2_X3nlu))) } in
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                      @ b1_s3MtN
                      (Text.ParserCombinators.ReadP.Look
                         @ b1_s3MtN
                         (\ (a3_X3nkL :: String) ->
                            case a3_X3nkL of { __DEFAULT ->
                            Text.ParserCombinators.ReadP.Fail @ b1_s3MtN
                            }))
                      (Text.Read.Lex.expect2
                         @ b1_s3MtN
                         (\ (a1_a3ngt :: L.Lexeme) ->
                            case a1_a3ngt of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3MtN;
                              L.Punc c_a3K7T ->
                                case c_a3K7T of {
                                  [] -> Text.ParserCombinators.ReadP.Fail @ b1_s3MtN;
                                  : ds_d3L2F ds2_d3L2G ->
                                    case ds_d3L2F of { C# ds3_d3L2H ->
                                    case ds3_d3L2H of {
                                      __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3MtN;
                                      ','# ->
                                        case ds2_d3L2G of {
                                          [] ->
                                            case w_s3MtL of {
                                              False -> Text.ParserCombinators.ReadP.Fail @ b1_s3MtN;
                                              True -> lvl3_s3MJo
                                            };
                                          : ipv_s3LgC ipv1_s3LgE ->
                                            Text.ParserCombinators.ReadP.Fail @ b1_s3MtN
                                        };
                                      ']'# ->
                                        case ds2_d3L2G of {
                                          [] -> lvl2_s3MJp;
                                          : ipv_s3LgH ipv1_s3LgI ->
                                            Text.ParserCombinators.ReadP.Fail @ b1_s3MtN
                                        }
                                    }
                                    }
                                }
                            })) } in
              let {
                k_X3w6n [Dmd=<L,C(U)>]
                  :: () -> Text.ParserCombinators.ReadP.P b1_s3MtN
                [LclId,
                 Arity=1,
                 Str=<L,A>,
                 Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                         WorkFree=True, Expandable=True,
                         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                         Tmpl= \ _ [Occ=Dead] -> lvl116_X3wkV}]
                k_X3w6n = \ _ [Occ=Dead] -> lvl116_X3wkV } in
              Text.ParserCombinators.ReadP.Look
                @ b1_s3MtN
                (\ (a1_a3ngt :: String) ->
                   Text.ParserCombinators.ReadP.skipSpaces2
                     a1_a3ngt @ b1_s3MtN k_X3w6n); } in
      (GHC.Read.list3
         @ [a_a3KpE]
         ((\ _ [Occ=Dead]
             (@ b_a3ngn)
             (eta_B1 :: [a_a3KpE] -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
             case Text.Read.Lex.$wexpect
                    GHC.Read.list_lexeme
                    @ b_a3ngn
                    (\ _ [Occ=Dead, OS=OneShot] ->
                       Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                         @ b_a3ngn
                         ($wlistRest_s3MtP GHC.Types.False @ b_a3ngn eta_B1)
                         ((ds1_s3Luv
                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3KpE>_R
                                   :: (P.ReadP a_a3KpE :: *)
                                      ~R# (forall b.
                                           (a_a3KpE -> Text.ParserCombinators.ReadP.P b)
                                           -> Text.ParserCombinators.ReadP.P b :: *)))
                            @ b_a3ngn
                            (\ (a2_X3nr9 :: a_a3KpE) ->
                               $wlistRest_s3MtP
                                 GHC.Types.True
                                 @ b_a3ngn
                                 (\ (a3_X3nlu :: [a_a3KpE]) ->
                                    eta_B1 (GHC.Types.: @ a_a3KpE a2_X3nr9 a3_X3nlu)))))
             of
             { (# ww1_s3xlt #) ->
             Text.ParserCombinators.ReadP.Look @ b_a3ngn ww1_s3xlt
             })
          `cast` ((<Prec>_R
                   ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[a_a3KpE]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <[a_a3KpE]>_R)
                  :: (Prec
                      -> forall b.
                         ([a_a3KpE] -> Text.ParserCombinators.ReadP.P b)
                         -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (ReadPrec [a_a3KpE] :: *))))
      `cast` ((<Prec>_R
               ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                             <[a_a3KpE]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <[a_a3KpE]>_R)
              :: (Prec
                  -> forall b.
                     ([a_a3KpE] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (ReadPrec [a_a3KpE] :: *))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
readListPrecDefault :: forall a. Read a => ReadPrec [a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(C(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3Ks9) ($dRead_a3Ksb [Occ=Once] :: Read a_a3Ks9) ->
                 list @ a_a3Ks9 (readPrec @ a_a3Ks9 $dRead_a3Ksb)}]
readListPrecDefault
  = \ (@ a_a3Ks9) ($dRead_a3Ksb :: Read a_a3Ks9) ->
      list @ a_a3Ks9 (readPrec @ a_a3Ks9 $dRead_a3Ksb)

-- RHS size: {terms: 47, types: 91, coercions: 39, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n o.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n, Read o) =>
     ReadPrec [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=15,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KGz)
                 (@ b_X3KGB)
                 (@ c_X3KGD)
                 (@ d_X3KGF)
                 (@ e_X3KGH)
                 (@ f_X3KGJ)
                 (@ g_X3KGL)
                 (@ h_X3KGN)
                 (@ i_X3KGP)
                 (@ j_X3KGR)
                 (@ k_X3KGT)
                 (@ l_X3KGV)
                 (@ m_X3KGX)
                 (@ n_X3KGZ)
                 (@ o_X3KH1)
                 ($dRead_X3KH3 [Occ=Once] :: Read a_X3KGz)
                 ($dRead1_X3KH5 [Occ=Once] :: Read b_X3KGB)
                 ($dRead2_X3KH7 [Occ=Once] :: Read c_X3KGD)
                 ($dRead3_X3KH9 [Occ=Once] :: Read d_X3KGF)
                 ($dRead4_X3KHb [Occ=Once] :: Read e_X3KGH)
                 ($dRead5_X3KHd [Occ=Once] :: Read f_X3KGJ)
                 ($dRead6_X3KHf [Occ=Once] :: Read g_X3KGL)
                 ($dRead7_X3KHh [Occ=Once] :: Read h_X3KGN)
                 ($dRead8_X3KHj [Occ=Once] :: Read i_X3KGP)
                 ($dRead9_X3KHl [Occ=Once] :: Read j_X3KGR)
                 ($dRead10_X3KHn [Occ=Once] :: Read k_X3KGT)
                 ($dRead11_X3KHp [Occ=Once] :: Read l_X3KGV)
                 ($dRead12_X3KHr [Occ=Once] :: Read m_X3KGX)
                 ($dRead13_X3KHt [Occ=Once] :: Read n_X3KGZ)
                 ($dRead14_X3KHv [Occ=Once] :: Read o_X3KH1) ->
                 list
                   @ (a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                      h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                      o_X3KH1)
                   ((GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                       @ a_X3KGz
                       @ b_X3KGB
                       @ c_X3KGD
                       @ d_X3KGF
                       @ e_X3KGH
                       @ f_X3KGJ
                       @ g_X3KGL
                       @ h_X3KGN
                       @ i_X3KGP
                       @ j_X3KGR
                       @ k_X3KGT
                       @ l_X3KGV
                       @ m_X3KGX
                       @ n_X3KGZ
                       @ o_X3KH1
                       $dRead_X3KH3
                       $dRead1_X3KH5
                       $dRead2_X3KH7
                       $dRead3_X3KH9
                       $dRead4_X3KHb
                       $dRead5_X3KHd
                       $dRead6_X3KHf
                       $dRead7_X3KHh
                       $dRead8_X3KHj
                       $dRead9_X3KHl
                       $dRead10_X3KHn
                       $dRead11_X3KHp
                       $dRead12_X3KHr
                       $dRead13_X3KHt
                       $dRead14_X3KHv)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ,
                                             g_X3KGL, h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV,
                                             m_X3KGX, n_X3KGZ,
                                             o_X3KH1)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KGz, b_X3KGB, c_X3KGD,
                                                                        d_X3KGF, e_X3KGH, f_X3KGJ,
                                                                        g_X3KGL, h_X3KGN, i_X3KGP,
                                                                        j_X3KGR, k_X3KGT, l_X3KGV,
                                                                        m_X3KGX, n_X3KGZ,
                                                                        o_X3KH1)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                                     h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                                     o_X3KH1)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ,
                                       g_X3KGL, h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV,
                                       m_X3KGX, n_X3KGZ, o_X3KH1) :: *)))}]
GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
  = \ (@ a_X3KGz)
      (@ b_X3KGB)
      (@ c_X3KGD)
      (@ d_X3KGF)
      (@ e_X3KGH)
      (@ f_X3KGJ)
      (@ g_X3KGL)
      (@ h_X3KGN)
      (@ i_X3KGP)
      (@ j_X3KGR)
      (@ k_X3KGT)
      (@ l_X3KGV)
      (@ m_X3KGX)
      (@ n_X3KGZ)
      (@ o_X3KH1)
      ($dRead_X3KH3 :: Read a_X3KGz)
      ($dRead1_X3KH5 :: Read b_X3KGB)
      ($dRead2_X3KH7 :: Read c_X3KGD)
      ($dRead3_X3KH9 :: Read d_X3KGF)
      ($dRead4_X3KHb :: Read e_X3KGH)
      ($dRead5_X3KHd :: Read f_X3KGJ)
      ($dRead6_X3KHf :: Read g_X3KGL)
      ($dRead7_X3KHh :: Read h_X3KGN)
      ($dRead8_X3KHj :: Read i_X3KGP)
      ($dRead9_X3KHl :: Read j_X3KGR)
      ($dRead10_X3KHn :: Read k_X3KGT)
      ($dRead11_X3KHp :: Read l_X3KGV)
      ($dRead12_X3KHr :: Read m_X3KGX)
      ($dRead13_X3KHt :: Read n_X3KGZ)
      ($dRead14_X3KHv :: Read o_X3KH1) ->
      list
        @ (a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
           h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
           o_X3KH1)
        ((GHC.Read.$fRead(,,,,,,,,,,,,,,)1
            @ a_X3KGz
            @ b_X3KGB
            @ c_X3KGD
            @ d_X3KGF
            @ e_X3KGH
            @ f_X3KGJ
            @ g_X3KGL
            @ h_X3KGN
            @ i_X3KGP
            @ j_X3KGR
            @ k_X3KGT
            @ l_X3KGV
            @ m_X3KGX
            @ n_X3KGZ
            @ o_X3KH1
            $dRead_X3KH3
            $dRead1_X3KH5
            $dRead2_X3KH7
            $dRead3_X3KH9
            $dRead4_X3KHb
            $dRead5_X3KHd
            $dRead6_X3KHf
            $dRead7_X3KHh
            $dRead8_X3KHj
            $dRead9_X3KHl
            $dRead10_X3KHn
            $dRead11_X3KHp
            $dRead12_X3KHr
            $dRead13_X3KHt
            $dRead14_X3KHv)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                                  h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                                  o_X3KH1)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF,
                                                             e_X3KGH, f_X3KGJ, g_X3KGL, h_X3KGN,
                                                             i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV,
                                                             m_X3KGX, n_X3KGZ, o_X3KH1)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                          h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                          o_X3KH1)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                            h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                            o_X3KH1) :: *)))

-- RHS size: {terms: 50, types: 124, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n o.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n, Read o) =>
     Int -> ReadS (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=16,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KGA)
                 (@ b_X3KGC)
                 (@ c_X3KGE)
                 (@ d_X3KGG)
                 (@ e_X3KGI)
                 (@ f_X3KGK)
                 (@ g_X3KGM)
                 (@ h_X3KGO)
                 (@ i_X3KGQ)
                 (@ j_X3KGS)
                 (@ k_X3KGU)
                 (@ l_X3KGW)
                 (@ m_X3KGY)
                 (@ n_X3KH0)
                 (@ o_X3KH2)
                 ($dRead_X3KH4 [Occ=Once] :: Read a_X3KGA)
                 ($dRead1_X3KH6 [Occ=Once] :: Read b_X3KGC)
                 ($dRead2_X3KH8 [Occ=Once] :: Read c_X3KGE)
                 ($dRead3_X3KHa [Occ=Once] :: Read d_X3KGG)
                 ($dRead4_X3KHc [Occ=Once] :: Read e_X3KGI)
                 ($dRead5_X3KHe [Occ=Once] :: Read f_X3KGK)
                 ($dRead6_X3KHg [Occ=Once] :: Read g_X3KGM)
                 ($dRead7_X3KHi [Occ=Once] :: Read h_X3KGO)
                 ($dRead8_X3KHk [Occ=Once] :: Read i_X3KGQ)
                 ($dRead9_X3KHm [Occ=Once] :: Read j_X3KGS)
                 ($dRead10_X3KHo [Occ=Once] :: Read k_X3KGU)
                 ($dRead11_X3KHq [Occ=Once] :: Read l_X3KGW)
                 ($dRead12_X3KHs [Occ=Once] :: Read m_X3KGY)
                 ($dRead13_X3KHu [Occ=Once] :: Read n_X3KH0)
                 ($dRead14_X3KHw [Occ=Once] :: Read o_X3KH2)
                 (n1_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
                      h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
                      o_X3KH2)
                   (GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      @ a_X3KGA
                      @ b_X3KGC
                      @ c_X3KGE
                      @ d_X3KGG
                      @ e_X3KGI
                      @ f_X3KGK
                      @ g_X3KGM
                      @ h_X3KGO
                      @ i_X3KGQ
                      @ j_X3KGS
                      @ k_X3KGU
                      @ l_X3KGW
                      @ m_X3KGY
                      @ n_X3KH0
                      @ o_X3KH2
                      $dRead_X3KH4
                      $dRead1_X3KH6
                      $dRead2_X3KH8
                      $dRead3_X3KHa
                      $dRead4_X3KHc
                      $dRead5_X3KHe
                      $dRead6_X3KHg
                      $dRead7_X3KHi
                      $dRead8_X3KHk
                      $dRead9_X3KHm
                      $dRead10_X3KHo
                      $dRead11_X3KHq
                      $dRead12_X3KHs
                      $dRead13_X3KHu
                      $dRead14_X3KHw
                      n1_a3tmE
                      @ (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
                         h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
                         o_X3KH2)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
                            h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
                            o_X3KH2)))}]
GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
  = \ (@ a_X3KGA)
      (@ b_X3KGC)
      (@ c_X3KGE)
      (@ d_X3KGG)
      (@ e_X3KGI)
      (@ f_X3KGK)
      (@ g_X3KGM)
      (@ h_X3KGO)
      (@ i_X3KGQ)
      (@ j_X3KGS)
      (@ k_X3KGU)
      (@ l_X3KGW)
      (@ m_X3KGY)
      (@ n_X3KH0)
      (@ o_X3KH2)
      ($dRead_X3KH4 :: Read a_X3KGA)
      ($dRead1_X3KH6 :: Read b_X3KGC)
      ($dRead2_X3KH8 :: Read c_X3KGE)
      ($dRead3_X3KHa :: Read d_X3KGG)
      ($dRead4_X3KHc :: Read e_X3KGI)
      ($dRead5_X3KHe :: Read f_X3KGK)
      ($dRead6_X3KHg :: Read g_X3KGM)
      ($dRead7_X3KHi :: Read h_X3KGO)
      ($dRead8_X3KHk :: Read i_X3KGQ)
      ($dRead9_X3KHm :: Read j_X3KGS)
      ($dRead10_X3KHo :: Read k_X3KGU)
      ($dRead11_X3KHq :: Read l_X3KGW)
      ($dRead12_X3KHs :: Read m_X3KGY)
      ($dRead13_X3KHu :: Read n_X3KH0)
      ($dRead14_X3KHw :: Read o_X3KH2)
      (n1_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
           h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
           o_X3KH2)
        (GHC.Read.$fRead(,,,,,,,,,,,,,,)1
           @ a_X3KGA
           @ b_X3KGC
           @ c_X3KGE
           @ d_X3KGG
           @ e_X3KGI
           @ f_X3KGK
           @ g_X3KGM
           @ h_X3KGO
           @ i_X3KGQ
           @ j_X3KGS
           @ k_X3KGU
           @ l_X3KGW
           @ m_X3KGY
           @ n_X3KH0
           @ o_X3KH2
           $dRead_X3KH4
           $dRead1_X3KH6
           $dRead2_X3KH8
           $dRead3_X3KHa
           $dRead4_X3KHc
           $dRead5_X3KHe
           $dRead6_X3KHg
           $dRead7_X3KHi
           $dRead8_X3KHk
           $dRead9_X3KHm
           $dRead10_X3KHo
           $dRead11_X3KHq
           $dRead12_X3KHs
           $dRead13_X3KHu
           $dRead14_X3KHw
           n1_a3tmE
           @ (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
              h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
              o_X3KH2)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
                 h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
                 o_X3KH2)))

-- RHS size: {terms: 50, types: 142, coercions: 75, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n o.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n, Read o) =>
     ReadS [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=15,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KGB)
                 (@ b_X3KGD)
                 (@ c_X3KGF)
                 (@ d_X3KGH)
                 (@ e_X3KGJ)
                 (@ f_X3KGL)
                 (@ g_X3KGN)
                 (@ h_X3KGP)
                 (@ i_X3KGR)
                 (@ j_X3KGT)
                 (@ k_X3KGV)
                 (@ l_X3KGX)
                 (@ m_X3KGZ)
                 (@ n_X3KH1)
                 (@ o_X3KH3)
                 ($dRead_X3KH5 [Occ=Once] :: Read a_X3KGB)
                 ($dRead1_X3KH7 [Occ=Once] :: Read b_X3KGD)
                 ($dRead2_X3KH9 [Occ=Once] :: Read c_X3KGF)
                 ($dRead3_X3KHb [Occ=Once] :: Read d_X3KGH)
                 ($dRead4_X3KHd [Occ=Once] :: Read e_X3KGJ)
                 ($dRead5_X3KHf [Occ=Once] :: Read f_X3KGL)
                 ($dRead6_X3KHh [Occ=Once] :: Read g_X3KGN)
                 ($dRead7_X3KHj [Occ=Once] :: Read h_X3KGP)
                 ($dRead8_X3KHl [Occ=Once] :: Read i_X3KGR)
                 ($dRead9_X3KHn [Occ=Once] :: Read j_X3KGT)
                 ($dRead10_X3KHp [Occ=Once] :: Read k_X3KGV)
                 ($dRead11_X3KHr [Occ=Once] :: Read l_X3KGX)
                 ($dRead12_X3KHt [Occ=Once] :: Read m_X3KGZ)
                 ($dRead13_X3KHv [Occ=Once] :: Read n_X3KH1)
                 ($dRead14_X3KHx [Occ=Once] :: Read o_X3KH3) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                       h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                       o_X3KH3)]
                   (((((list
                          @ (a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                             h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                             o_X3KH3)
                          ((GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                              @ a_X3KGB
                              @ b_X3KGD
                              @ c_X3KGF
                              @ d_X3KGH
                              @ e_X3KGJ
                              @ f_X3KGL
                              @ g_X3KGN
                              @ h_X3KGP
                              @ i_X3KGR
                              @ j_X3KGT
                              @ k_X3KGV
                              @ l_X3KGX
                              @ m_X3KGZ
                              @ n_X3KH1
                              @ o_X3KH3
                              $dRead_X3KH5
                              $dRead1_X3KH7
                              $dRead2_X3KH9
                              $dRead3_X3KHb
                              $dRead4_X3KHd
                              $dRead5_X3KHf
                              $dRead6_X3KHh
                              $dRead7_X3KHj
                              $dRead8_X3KHl
                              $dRead9_X3KHn
                              $dRead10_X3KHp
                              $dRead11_X3KHr
                              $dRead12_X3KHt
                              $dRead13_X3KHv
                              $dRead14_X3KHx)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ,
                                                    f_X3KGL, g_X3KGN, h_X3KGP, i_X3KGR, j_X3KGT,
                                                    k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                                                    o_X3KH3)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KGB, b_X3KGD,
                                                                               c_X3KGF, d_X3KGH,
                                                                               e_X3KGJ, f_X3KGL,
                                                                               g_X3KGN, h_X3KGP,
                                                                               i_X3KGR, j_X3KGT,
                                                                               k_X3KGV, l_X3KGX,
                                                                               m_X3KGZ, n_X3KH1,
                                                                               o_X3KH3)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL,
                                            g_X3KGN, h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX,
                                            m_X3KGZ, n_X3KH1, o_X3KH3)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL,
                                              g_X3KGN, h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX,
                                              m_X3KGZ, n_X3KH1, o_X3KH3) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                                      h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                                      o_X3KH3)]>_R
                               :: (ReadPrec
                                     [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL,
                                       g_X3KGN, h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX,
                                       m_X3KGZ, n_X3KH1, o_X3KH3)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL,
                                              g_X3KGN, h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX,
                                              m_X3KGZ, n_X3KH1, o_X3KH3)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                                    h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                                    o_X3KH3)]>_R
                             :: (P.ReadP
                                   [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                                     h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                                     o_X3KH3)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL,
                                        g_X3KGN, h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX,
                                        m_X3KGZ, n_X3KH1, o_X3KH3)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                          h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                          o_X3KH3)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                             h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                             o_X3KH3)]))}]
GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
  = \ (@ a_X3KGB)
      (@ b_X3KGD)
      (@ c_X3KGF)
      (@ d_X3KGH)
      (@ e_X3KGJ)
      (@ f_X3KGL)
      (@ g_X3KGN)
      (@ h_X3KGP)
      (@ i_X3KGR)
      (@ j_X3KGT)
      (@ k_X3KGV)
      (@ l_X3KGX)
      (@ m_X3KGZ)
      (@ n_X3KH1)
      (@ o_X3KH3)
      ($dRead_X3KH5 :: Read a_X3KGB)
      ($dRead1_X3KH7 :: Read b_X3KGD)
      ($dRead2_X3KH9 :: Read c_X3KGF)
      ($dRead3_X3KHb :: Read d_X3KGH)
      ($dRead4_X3KHd :: Read e_X3KGJ)
      ($dRead5_X3KHf :: Read f_X3KGL)
      ($dRead6_X3KHh :: Read g_X3KGN)
      ($dRead7_X3KHj :: Read h_X3KGP)
      ($dRead8_X3KHl :: Read i_X3KGR)
      ($dRead9_X3KHn :: Read j_X3KGT)
      ($dRead10_X3KHp :: Read k_X3KGV)
      ($dRead11_X3KHr :: Read l_X3KGX)
      ($dRead12_X3KHt :: Read m_X3KGZ)
      ($dRead13_X3KHv :: Read n_X3KH1)
      ($dRead14_X3KHx :: Read o_X3KH3) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
            h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
            o_X3KH3)]
        (((((list
               @ (a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                  h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                  o_X3KH3)
               ((GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                   @ a_X3KGB
                   @ b_X3KGD
                   @ c_X3KGF
                   @ d_X3KGH
                   @ e_X3KGJ
                   @ f_X3KGL
                   @ g_X3KGN
                   @ h_X3KGP
                   @ i_X3KGR
                   @ j_X3KGT
                   @ k_X3KGV
                   @ l_X3KGX
                   @ m_X3KGZ
                   @ n_X3KH1
                   @ o_X3KH3
                   $dRead_X3KH5
                   $dRead1_X3KH7
                   $dRead2_X3KH9
                   $dRead3_X3KHb
                   $dRead4_X3KHd
                   $dRead5_X3KHf
                   $dRead6_X3KHh
                   $dRead7_X3KHj
                   $dRead8_X3KHl
                   $dRead9_X3KHn
                   $dRead10_X3KHp
                   $dRead11_X3KHr
                   $dRead12_X3KHt
                   $dRead13_X3KHv
                   $dRead14_X3KHx)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL,
                                         g_X3KGN, h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX,
                                         m_X3KGZ, n_X3KH1,
                                         o_X3KH3)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KGB, b_X3KGD, c_X3KGF,
                                                                    d_X3KGH, e_X3KGJ, f_X3KGL,
                                                                    g_X3KGN, h_X3KGP, i_X3KGR,
                                                                    j_X3KGT, k_X3KGV, l_X3KGX,
                                                                    m_X3KGZ, n_X3KH1, o_X3KH3)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                                 h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                                 o_X3KH3)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                                   h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                                   o_X3KH3) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                           h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                           o_X3KH3)]>_R
                    :: (ReadPrec
                          [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                            h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                            o_X3KH3)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                                   h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                                   o_X3KH3)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                         h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                         o_X3KH3)]>_R
                  :: (P.ReadP
                        [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                          h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                          o_X3KH3)] :: *)
                     ~R# (forall b.
                          ([(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                             h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                             o_X3KH3)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
               h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
               o_X3KH3)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                  h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                  o_X3KH3)]))

-- RHS size: {terms: 95, types: 136, coercions: 39, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n, Read o) =>
     Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K2F)
             (@ b_a3K2G)
             (@ c_a3K2H)
             (@ d_a3K2I)
             (@ e_a3K2J)
             (@ f_a3K2K)
             (@ g_a3K2L)
             (@ h_a3K2M)
             (@ i_a3K2N)
             (@ j_a3K2O)
             (@ k_a3K2P)
             (@ l_a3K2Q)
             (@ m_a3K2R)
             (@ n_a3K2S)
             (@ o_a3K2T)
             (v_X4Y :: Read a_a3K2F)
             (v1_X50 :: Read b_a3K2G)
             (v2_B3 :: Read c_a3K2H)
             (v3_B4 :: Read d_a3K2I)
             (v4_B5 :: Read e_a3K2J)
             (v5_B6 :: Read f_a3K2K)
             (v6_B7 :: Read g_a3K2L)
             (v7_B8 :: Read h_a3K2M)
             (v8_B9 :: Read i_a3K2N)
             (v9_Ba :: Read j_a3K2O)
             (v10_Bb :: Read k_a3K2P)
             (v11_Bc :: Read l_a3K2Q)
             (v12_Bd :: Read m_a3K2R)
             (v13_Be :: Read n_a3K2S)
             (v14_Bf :: Read o_a3K2T) ->
       GHC.Read.C:Read TYPE: (a_a3K2F, b_a3K2G, c_a3K2H, d_a3K2I, e_a3K2J,
                              f_a3K2K, g_a3K2L, h_a3K2M, i_a3K2N, j_a3K2O, k_a3K2P, l_a3K2Q,
                              m_a3K2R, n_a3K2S, o_a3K2T)
                       GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
                         @ a_a3K2F
                         @ b_a3K2G
                         @ c_a3K2H
                         @ d_a3K2I
                         @ e_a3K2J
                         @ f_a3K2K
                         @ g_a3K2L
                         @ h_a3K2M
                         @ i_a3K2N
                         @ j_a3K2O
                         @ k_a3K2P
                         @ l_a3K2Q
                         @ m_a3K2R
                         @ n_a3K2S
                         @ o_a3K2T
                         v_X4Y
                         v1_X50
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                         v14_Bf
                       GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
                         @ a_a3K2F
                         @ b_a3K2G
                         @ c_a3K2H
                         @ d_a3K2I
                         @ e_a3K2J
                         @ f_a3K2K
                         @ g_a3K2L
                         @ h_a3K2M
                         @ i_a3K2N
                         @ j_a3K2O
                         @ k_a3K2P
                         @ l_a3K2Q
                         @ m_a3K2R
                         @ n_a3K2S
                         @ o_a3K2T
                         v_X4Y
                         v1_X50
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                         v14_Bf
                       (GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                          @ a_a3K2F
                          @ b_a3K2G
                          @ c_a3K2H
                          @ d_a3K2I
                          @ e_a3K2J
                          @ f_a3K2K
                          @ g_a3K2L
                          @ h_a3K2M
                          @ i_a3K2N
                          @ j_a3K2O
                          @ k_a3K2P
                          @ l_a3K2Q
                          @ m_a3K2R
                          @ n_a3K2S
                          @ o_a3K2T
                          v_X4Y
                          v1_X50
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7
                          v7_B8
                          v8_B9
                          v9_Ba
                          v10_Bb
                          v11_Bc
                          v12_Bd
                          v13_Be
                          v14_Bf)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K2F, b_a3K2G, c_a3K2H, d_a3K2I, e_a3K2J,
                                                f_a3K2K, g_a3K2L, h_a3K2M, i_a3K2N, j_a3K2O,
                                                k_a3K2P, l_a3K2Q, m_a3K2R, n_a3K2S,
                                                o_a3K2T)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K2F, b_a3K2G,
                                                                           c_a3K2H, d_a3K2I,
                                                                           e_a3K2J, f_a3K2K,
                                                                           g_a3K2L, h_a3K2M,
                                                                           i_a3K2N, j_a3K2O,
                                                                           k_a3K2P, l_a3K2Q,
                                                                           m_a3K2R, n_a3K2S,
                                                                           o_a3K2T)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K2F, b_a3K2G, c_a3K2H, d_a3K2I, e_a3K2J, f_a3K2K,
                                        g_a3K2L, h_a3K2M, i_a3K2N, j_a3K2O, k_a3K2P, l_a3K2Q,
                                        m_a3K2R, n_a3K2S, o_a3K2T)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K2F, b_a3K2G, c_a3K2H, d_a3K2I, e_a3K2J, f_a3K2K,
                                          g_a3K2L, h_a3K2M, i_a3K2N, j_a3K2O, k_a3K2P, l_a3K2Q,
                                          m_a3K2R, n_a3K2S, o_a3K2T) :: *))
                       GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
                         @ a_a3K2F
                         @ b_a3K2G
                         @ c_a3K2H
                         @ d_a3K2I
                         @ e_a3K2J
                         @ f_a3K2K
                         @ g_a3K2L
                         @ h_a3K2M
                         @ i_a3K2N
                         @ j_a3K2O
                         @ k_a3K2P
                         @ l_a3K2Q
                         @ m_a3K2R
                         @ n_a3K2S
                         @ o_a3K2T
                         v_X4Y
                         v1_X50
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                         v14_Bf]
GHC.Read.$fRead(,,,,,,,,,,,,,,)
  = \ (@ a_X3KGC)
      (@ b_X3KGE)
      (@ c_X3KGG)
      (@ d_X3KGI)
      (@ e_X3KGK)
      (@ f_X3KGM)
      (@ g_X3KGO)
      (@ h_X3KGQ)
      (@ i_X3KGS)
      (@ j_X3KGU)
      (@ k_X3KGW)
      (@ l_X3KGY)
      (@ m_X3KH0)
      (@ n_X3KH2)
      (@ o_X3KH4)
      ($dRead_X3KH6 :: Read a_X3KGC)
      ($dRead1_X3KH8 :: Read b_X3KGE)
      ($dRead2_X3KHa :: Read c_X3KGG)
      ($dRead3_X3KHc :: Read d_X3KGI)
      ($dRead4_X3KHe :: Read e_X3KGK)
      ($dRead5_X3KHg :: Read f_X3KGM)
      ($dRead6_X3KHi :: Read g_X3KGO)
      ($dRead7_X3KHk :: Read h_X3KGQ)
      ($dRead8_X3KHm :: Read i_X3KGS)
      ($dRead9_X3KHo :: Read j_X3KGU)
      ($dRead10_X3KHq :: Read k_X3KGW)
      ($dRead11_X3KHs :: Read l_X3KGY)
      ($dRead12_X3KHu :: Read m_X3KH0)
      ($dRead13_X3KHw :: Read n_X3KH2)
      ($dRead14_X3KHy :: Read o_X3KH4) ->
      GHC.Read.C:Read
        @ (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
           h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
           o_X3KH4)
        (GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
           @ a_X3KGC
           @ b_X3KGE
           @ c_X3KGG
           @ d_X3KGI
           @ e_X3KGK
           @ f_X3KGM
           @ g_X3KGO
           @ h_X3KGQ
           @ i_X3KGS
           @ j_X3KGU
           @ k_X3KGW
           @ l_X3KGY
           @ m_X3KH0
           @ n_X3KH2
           @ o_X3KH4
           $dRead_X3KH6
           $dRead1_X3KH8
           $dRead2_X3KHa
           $dRead3_X3KHc
           $dRead4_X3KHe
           $dRead5_X3KHg
           $dRead6_X3KHi
           $dRead7_X3KHk
           $dRead8_X3KHm
           $dRead9_X3KHo
           $dRead10_X3KHq
           $dRead11_X3KHs
           $dRead12_X3KHu
           $dRead13_X3KHw
           $dRead14_X3KHy)
        (GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
           @ a_X3KGC
           @ b_X3KGE
           @ c_X3KGG
           @ d_X3KGI
           @ e_X3KGK
           @ f_X3KGM
           @ g_X3KGO
           @ h_X3KGQ
           @ i_X3KGS
           @ j_X3KGU
           @ k_X3KGW
           @ l_X3KGY
           @ m_X3KH0
           @ n_X3KH2
           @ o_X3KH4
           $dRead_X3KH6
           $dRead1_X3KH8
           $dRead2_X3KHa
           $dRead3_X3KHc
           $dRead4_X3KHe
           $dRead5_X3KHg
           $dRead6_X3KHi
           $dRead7_X3KHk
           $dRead8_X3KHm
           $dRead9_X3KHo
           $dRead10_X3KHq
           $dRead11_X3KHs
           $dRead12_X3KHu
           $dRead13_X3KHw
           $dRead14_X3KHy)
        ((GHC.Read.$fRead(,,,,,,,,,,,,,,)1
            @ a_X3KGC
            @ b_X3KGE
            @ c_X3KGG
            @ d_X3KGI
            @ e_X3KGK
            @ f_X3KGM
            @ g_X3KGO
            @ h_X3KGQ
            @ i_X3KGS
            @ j_X3KGU
            @ k_X3KGW
            @ l_X3KGY
            @ m_X3KH0
            @ n_X3KH2
            @ o_X3KH4
            $dRead_X3KH6
            $dRead1_X3KH8
            $dRead2_X3KHa
            $dRead3_X3KHc
            $dRead4_X3KHe
            $dRead5_X3KHg
            $dRead6_X3KHi
            $dRead7_X3KHk
            $dRead8_X3KHm
            $dRead9_X3KHo
            $dRead10_X3KHq
            $dRead11_X3KHs
            $dRead12_X3KHu
            $dRead13_X3KHw
            $dRead14_X3KHy)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                                  h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                                  o_X3KH4)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI,
                                                             e_X3KGK, f_X3KGM, g_X3KGO, h_X3KGQ,
                                                             i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY,
                                                             m_X3KH0, n_X3KH2, o_X3KH4)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                          h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                          o_X3KH4)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                            h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                            o_X3KH4) :: *)))
        (GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
           @ a_X3KGC
           @ b_X3KGE
           @ c_X3KGG
           @ d_X3KGI
           @ e_X3KGK
           @ f_X3KGM
           @ g_X3KGO
           @ h_X3KGQ
           @ i_X3KGS
           @ j_X3KGU
           @ k_X3KGW
           @ l_X3KGY
           @ m_X3KH0
           @ n_X3KH2
           @ o_X3KH4
           $dRead_X3KH6
           $dRead1_X3KH8
           $dRead2_X3KHa
           $dRead3_X3KHc
           $dRead4_X3KHe
           $dRead5_X3KHg
           $dRead6_X3KHi
           $dRead7_X3KHk
           $dRead8_X3KHm
           $dRead9_X3KHo
           $dRead10_X3KHq
           $dRead11_X3KHs
           $dRead12_X3KHu
           $dRead13_X3KHw
           $dRead14_X3KHy)

-- RHS size: {terms: 44, types: 85, coercions: 37, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n) =>
     ReadPrec [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=14,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KIJ)
                 (@ b_X3KIL)
                 (@ c_X3KIN)
                 (@ d_X3KIP)
                 (@ e_X3KIR)
                 (@ f_X3KIT)
                 (@ g_X3KIV)
                 (@ h_X3KIX)
                 (@ i_X3KIZ)
                 (@ j_X3KJ1)
                 (@ k_X3KJ3)
                 (@ l_X3KJ5)
                 (@ m_X3KJ7)
                 (@ n_X3KJ9)
                 ($dRead_X3KJb [Occ=Once] :: Read a_X3KIJ)
                 ($dRead1_X3KJd [Occ=Once] :: Read b_X3KIL)
                 ($dRead2_X3KJf [Occ=Once] :: Read c_X3KIN)
                 ($dRead3_X3KJh [Occ=Once] :: Read d_X3KIP)
                 ($dRead4_X3KJj [Occ=Once] :: Read e_X3KIR)
                 ($dRead5_X3KJl [Occ=Once] :: Read f_X3KIT)
                 ($dRead6_X3KJn [Occ=Once] :: Read g_X3KIV)
                 ($dRead7_X3KJp [Occ=Once] :: Read h_X3KIX)
                 ($dRead8_X3KJr [Occ=Once] :: Read i_X3KIZ)
                 ($dRead9_X3KJt [Occ=Once] :: Read j_X3KJ1)
                 ($dRead10_X3KJv [Occ=Once] :: Read k_X3KJ3)
                 ($dRead11_X3KJx [Occ=Once] :: Read l_X3KJ5)
                 ($dRead12_X3KJz [Occ=Once] :: Read m_X3KJ7)
                 ($dRead13_X3KJB [Occ=Once] :: Read n_X3KJ9) ->
                 list
                   @ (a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                      h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7, n_X3KJ9)
                   ((GHC.Read.$fRead(,,,,,,,,,,,,,)1
                       @ a_X3KIJ
                       @ b_X3KIL
                       @ c_X3KIN
                       @ d_X3KIP
                       @ e_X3KIR
                       @ f_X3KIT
                       @ g_X3KIV
                       @ h_X3KIX
                       @ i_X3KIZ
                       @ j_X3KJ1
                       @ k_X3KJ3
                       @ l_X3KJ5
                       @ m_X3KJ7
                       @ n_X3KJ9
                       $dRead_X3KJb
                       $dRead1_X3KJd
                       $dRead2_X3KJf
                       $dRead3_X3KJh
                       $dRead4_X3KJj
                       $dRead5_X3KJl
                       $dRead6_X3KJn
                       $dRead7_X3KJp
                       $dRead8_X3KJr
                       $dRead9_X3KJt
                       $dRead10_X3KJv
                       $dRead11_X3KJx
                       $dRead12_X3KJz
                       $dRead13_X3KJB)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT,
                                             g_X3KIV, h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5,
                                             m_X3KJ7,
                                             n_X3KJ9)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KIJ, b_X3KIL, c_X3KIN,
                                                                        d_X3KIP, e_X3KIR, f_X3KIT,
                                                                        g_X3KIV, h_X3KIX, i_X3KIZ,
                                                                        j_X3KJ1, k_X3KJ3, l_X3KJ5,
                                                                        m_X3KJ7, n_X3KJ9)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                                     h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7, n_X3KJ9)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT,
                                       g_X3KIV, h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5,
                                       m_X3KJ7, n_X3KJ9) :: *)))}]
GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
  = \ (@ a_X3KIJ)
      (@ b_X3KIL)
      (@ c_X3KIN)
      (@ d_X3KIP)
      (@ e_X3KIR)
      (@ f_X3KIT)
      (@ g_X3KIV)
      (@ h_X3KIX)
      (@ i_X3KIZ)
      (@ j_X3KJ1)
      (@ k_X3KJ3)
      (@ l_X3KJ5)
      (@ m_X3KJ7)
      (@ n_X3KJ9)
      ($dRead_X3KJb :: Read a_X3KIJ)
      ($dRead1_X3KJd :: Read b_X3KIL)
      ($dRead2_X3KJf :: Read c_X3KIN)
      ($dRead3_X3KJh :: Read d_X3KIP)
      ($dRead4_X3KJj :: Read e_X3KIR)
      ($dRead5_X3KJl :: Read f_X3KIT)
      ($dRead6_X3KJn :: Read g_X3KIV)
      ($dRead7_X3KJp :: Read h_X3KIX)
      ($dRead8_X3KJr :: Read i_X3KIZ)
      ($dRead9_X3KJt :: Read j_X3KJ1)
      ($dRead10_X3KJv :: Read k_X3KJ3)
      ($dRead11_X3KJx :: Read l_X3KJ5)
      ($dRead12_X3KJz :: Read m_X3KJ7)
      ($dRead13_X3KJB :: Read n_X3KJ9) ->
      list
        @ (a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
           h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7, n_X3KJ9)
        ((GHC.Read.$fRead(,,,,,,,,,,,,,)1
            @ a_X3KIJ
            @ b_X3KIL
            @ c_X3KIN
            @ d_X3KIP
            @ e_X3KIR
            @ f_X3KIT
            @ g_X3KIV
            @ h_X3KIX
            @ i_X3KIZ
            @ j_X3KJ1
            @ k_X3KJ3
            @ l_X3KJ5
            @ m_X3KJ7
            @ n_X3KJ9
            $dRead_X3KJb
            $dRead1_X3KJd
            $dRead2_X3KJf
            $dRead3_X3KJh
            $dRead4_X3KJj
            $dRead5_X3KJl
            $dRead6_X3KJn
            $dRead7_X3KJp
            $dRead8_X3KJr
            $dRead9_X3KJt
            $dRead10_X3KJv
            $dRead11_X3KJx
            $dRead12_X3KJz
            $dRead13_X3KJB)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                                  h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7,
                                  n_X3KJ9)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP,
                                                             e_X3KIR, f_X3KIT, g_X3KIV, h_X3KIX,
                                                             i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5,
                                                             m_X3KJ7, n_X3KJ9)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                          h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7, n_X3KJ9)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                            h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7,
                            n_X3KJ9) :: *)))

-- RHS size: {terms: 47, types: 116, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n) =>
     Int -> ReadS (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=15,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KIK)
                 (@ b_X3KIM)
                 (@ c_X3KIO)
                 (@ d_X3KIQ)
                 (@ e_X3KIS)
                 (@ f_X3KIU)
                 (@ g_X3KIW)
                 (@ h_X3KIY)
                 (@ i_X3KJ0)
                 (@ j_X3KJ2)
                 (@ k_X3KJ4)
                 (@ l_X3KJ6)
                 (@ m_X3KJ8)
                 (@ n_X3KJa)
                 ($dRead_X3KJc [Occ=Once] :: Read a_X3KIK)
                 ($dRead1_X3KJe [Occ=Once] :: Read b_X3KIM)
                 ($dRead2_X3KJg [Occ=Once] :: Read c_X3KIO)
                 ($dRead3_X3KJi [Occ=Once] :: Read d_X3KIQ)
                 ($dRead4_X3KJk [Occ=Once] :: Read e_X3KIS)
                 ($dRead5_X3KJm [Occ=Once] :: Read f_X3KIU)
                 ($dRead6_X3KJo [Occ=Once] :: Read g_X3KIW)
                 ($dRead7_X3KJq [Occ=Once] :: Read h_X3KIY)
                 ($dRead8_X3KJs [Occ=Once] :: Read i_X3KJ0)
                 ($dRead9_X3KJu [Occ=Once] :: Read j_X3KJ2)
                 ($dRead10_X3KJw [Occ=Once] :: Read k_X3KJ4)
                 ($dRead11_X3KJy [Occ=Once] :: Read l_X3KJ6)
                 ($dRead12_X3KJA [Occ=Once] :: Read m_X3KJ8)
                 ($dRead13_X3KJC [Occ=Once] :: Read n_X3KJa)
                 (n1_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
                      h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)
                   (GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      @ a_X3KIK
                      @ b_X3KIM
                      @ c_X3KIO
                      @ d_X3KIQ
                      @ e_X3KIS
                      @ f_X3KIU
                      @ g_X3KIW
                      @ h_X3KIY
                      @ i_X3KJ0
                      @ j_X3KJ2
                      @ k_X3KJ4
                      @ l_X3KJ6
                      @ m_X3KJ8
                      @ n_X3KJa
                      $dRead_X3KJc
                      $dRead1_X3KJe
                      $dRead2_X3KJg
                      $dRead3_X3KJi
                      $dRead4_X3KJk
                      $dRead5_X3KJm
                      $dRead6_X3KJo
                      $dRead7_X3KJq
                      $dRead8_X3KJs
                      $dRead9_X3KJu
                      $dRead10_X3KJw
                      $dRead11_X3KJy
                      $dRead12_X3KJA
                      $dRead13_X3KJC
                      n1_a3tmE
                      @ (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
                         h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
                            h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)))}]
GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
  = \ (@ a_X3KIK)
      (@ b_X3KIM)
      (@ c_X3KIO)
      (@ d_X3KIQ)
      (@ e_X3KIS)
      (@ f_X3KIU)
      (@ g_X3KIW)
      (@ h_X3KIY)
      (@ i_X3KJ0)
      (@ j_X3KJ2)
      (@ k_X3KJ4)
      (@ l_X3KJ6)
      (@ m_X3KJ8)
      (@ n_X3KJa)
      ($dRead_X3KJc :: Read a_X3KIK)
      ($dRead1_X3KJe :: Read b_X3KIM)
      ($dRead2_X3KJg :: Read c_X3KIO)
      ($dRead3_X3KJi :: Read d_X3KIQ)
      ($dRead4_X3KJk :: Read e_X3KIS)
      ($dRead5_X3KJm :: Read f_X3KIU)
      ($dRead6_X3KJo :: Read g_X3KIW)
      ($dRead7_X3KJq :: Read h_X3KIY)
      ($dRead8_X3KJs :: Read i_X3KJ0)
      ($dRead9_X3KJu :: Read j_X3KJ2)
      ($dRead10_X3KJw :: Read k_X3KJ4)
      ($dRead11_X3KJy :: Read l_X3KJ6)
      ($dRead12_X3KJA :: Read m_X3KJ8)
      ($dRead13_X3KJC :: Read n_X3KJa)
      (n1_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
           h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)
        (GHC.Read.$fRead(,,,,,,,,,,,,,)1
           @ a_X3KIK
           @ b_X3KIM
           @ c_X3KIO
           @ d_X3KIQ
           @ e_X3KIS
           @ f_X3KIU
           @ g_X3KIW
           @ h_X3KIY
           @ i_X3KJ0
           @ j_X3KJ2
           @ k_X3KJ4
           @ l_X3KJ6
           @ m_X3KJ8
           @ n_X3KJa
           $dRead_X3KJc
           $dRead1_X3KJe
           $dRead2_X3KJg
           $dRead3_X3KJi
           $dRead4_X3KJk
           $dRead5_X3KJm
           $dRead6_X3KJo
           $dRead7_X3KJq
           $dRead8_X3KJs
           $dRead9_X3KJu
           $dRead10_X3KJw
           $dRead11_X3KJy
           $dRead12_X3KJA
           $dRead13_X3KJC
           n1_a3tmE
           @ (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
              h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
                 h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)))

-- RHS size: {terms: 47, types: 133, coercions: 71, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n) =>
     ReadS [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=14,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KIL)
                 (@ b_X3KIN)
                 (@ c_X3KIP)
                 (@ d_X3KIR)
                 (@ e_X3KIT)
                 (@ f_X3KIV)
                 (@ g_X3KIX)
                 (@ h_X3KIZ)
                 (@ i_X3KJ1)
                 (@ j_X3KJ3)
                 (@ k_X3KJ5)
                 (@ l_X3KJ7)
                 (@ m_X3KJ9)
                 (@ n_X3KJb)
                 ($dRead_X3KJd [Occ=Once] :: Read a_X3KIL)
                 ($dRead1_X3KJf [Occ=Once] :: Read b_X3KIN)
                 ($dRead2_X3KJh [Occ=Once] :: Read c_X3KIP)
                 ($dRead3_X3KJj [Occ=Once] :: Read d_X3KIR)
                 ($dRead4_X3KJl [Occ=Once] :: Read e_X3KIT)
                 ($dRead5_X3KJn [Occ=Once] :: Read f_X3KIV)
                 ($dRead6_X3KJp [Occ=Once] :: Read g_X3KIX)
                 ($dRead7_X3KJr [Occ=Once] :: Read h_X3KIZ)
                 ($dRead8_X3KJt [Occ=Once] :: Read i_X3KJ1)
                 ($dRead9_X3KJv [Occ=Once] :: Read j_X3KJ3)
                 ($dRead10_X3KJx [Occ=Once] :: Read k_X3KJ5)
                 ($dRead11_X3KJz [Occ=Once] :: Read l_X3KJ7)
                 ($dRead12_X3KJB [Occ=Once] :: Read m_X3KJ9)
                 ($dRead13_X3KJD [Occ=Once] :: Read n_X3KJb) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                       h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
                   (((((list
                          @ (a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                             h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)
                          ((GHC.Read.$fRead(,,,,,,,,,,,,,)1
                              @ a_X3KIL
                              @ b_X3KIN
                              @ c_X3KIP
                              @ d_X3KIR
                              @ e_X3KIT
                              @ f_X3KIV
                              @ g_X3KIX
                              @ h_X3KIZ
                              @ i_X3KJ1
                              @ j_X3KJ3
                              @ k_X3KJ5
                              @ l_X3KJ7
                              @ m_X3KJ9
                              @ n_X3KJb
                              $dRead_X3KJd
                              $dRead1_X3KJf
                              $dRead2_X3KJh
                              $dRead3_X3KJj
                              $dRead4_X3KJl
                              $dRead5_X3KJn
                              $dRead6_X3KJp
                              $dRead7_X3KJr
                              $dRead8_X3KJt
                              $dRead9_X3KJv
                              $dRead10_X3KJx
                              $dRead11_X3KJz
                              $dRead12_X3KJB
                              $dRead13_X3KJD)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT,
                                                    f_X3KIV, g_X3KIX, h_X3KIZ, i_X3KJ1, j_X3KJ3,
                                                    k_X3KJ5, l_X3KJ7, m_X3KJ9,
                                                    n_X3KJb)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KIL, b_X3KIN,
                                                                               c_X3KIP, d_X3KIR,
                                                                               e_X3KIT, f_X3KIV,
                                                                               g_X3KIX, h_X3KIZ,
                                                                               i_X3KJ1, j_X3KJ3,
                                                                               k_X3KJ5, l_X3KJ7,
                                                                               m_X3KJ9, n_X3KJb)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV,
                                            g_X3KIX, h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7,
                                            m_X3KJ9, n_X3KJb)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV,
                                              g_X3KIX, h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7,
                                              m_X3KJ9, n_X3KJb) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                                      h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9,
                                      n_X3KJb)]>_R
                               :: (ReadPrec
                                     [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV,
                                       g_X3KIX, h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7,
                                       m_X3KJ9, n_X3KJb)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV,
                                              g_X3KIX, h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7,
                                              m_X3KJ9, n_X3KJb)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                                    h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9,
                                    n_X3KJb)]>_R
                             :: (P.ReadP
                                   [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                                     h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9,
                                     n_X3KJb)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV,
                                        g_X3KIX, h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7,
                                        m_X3KJ9, n_X3KJb)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                          h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                             h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]))}]
GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
  = \ (@ a_X3KIL)
      (@ b_X3KIN)
      (@ c_X3KIP)
      (@ d_X3KIR)
      (@ e_X3KIT)
      (@ f_X3KIV)
      (@ g_X3KIX)
      (@ h_X3KIZ)
      (@ i_X3KJ1)
      (@ j_X3KJ3)
      (@ k_X3KJ5)
      (@ l_X3KJ7)
      (@ m_X3KJ9)
      (@ n_X3KJb)
      ($dRead_X3KJd :: Read a_X3KIL)
      ($dRead1_X3KJf :: Read b_X3KIN)
      ($dRead2_X3KJh :: Read c_X3KIP)
      ($dRead3_X3KJj :: Read d_X3KIR)
      ($dRead4_X3KJl :: Read e_X3KIT)
      ($dRead5_X3KJn :: Read f_X3KIV)
      ($dRead6_X3KJp :: Read g_X3KIX)
      ($dRead7_X3KJr :: Read h_X3KIZ)
      ($dRead8_X3KJt :: Read i_X3KJ1)
      ($dRead9_X3KJv :: Read j_X3KJ3)
      ($dRead10_X3KJx :: Read k_X3KJ5)
      ($dRead11_X3KJz :: Read l_X3KJ7)
      ($dRead12_X3KJB :: Read m_X3KJ9)
      ($dRead13_X3KJD :: Read n_X3KJb) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
            h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
        (((((list
               @ (a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                  h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)
               ((GHC.Read.$fRead(,,,,,,,,,,,,,)1
                   @ a_X3KIL
                   @ b_X3KIN
                   @ c_X3KIP
                   @ d_X3KIR
                   @ e_X3KIT
                   @ f_X3KIV
                   @ g_X3KIX
                   @ h_X3KIZ
                   @ i_X3KJ1
                   @ j_X3KJ3
                   @ k_X3KJ5
                   @ l_X3KJ7
                   @ m_X3KJ9
                   @ n_X3KJb
                   $dRead_X3KJd
                   $dRead1_X3KJf
                   $dRead2_X3KJh
                   $dRead3_X3KJj
                   $dRead4_X3KJl
                   $dRead5_X3KJn
                   $dRead6_X3KJp
                   $dRead7_X3KJr
                   $dRead8_X3KJt
                   $dRead9_X3KJv
                   $dRead10_X3KJx
                   $dRead11_X3KJz
                   $dRead12_X3KJB
                   $dRead13_X3KJD)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV,
                                         g_X3KIX, h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7,
                                         m_X3KJ9,
                                         n_X3KJb)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KIL, b_X3KIN, c_X3KIP,
                                                                    d_X3KIR, e_X3KIT, f_X3KIV,
                                                                    g_X3KIX, h_X3KIZ, i_X3KJ1,
                                                                    j_X3KJ3, k_X3KJ5, l_X3KJ7,
                                                                    m_X3KJ9, n_X3KJb)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                                 h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                                   h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9,
                                   n_X3KJb) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                           h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]>_R
                    :: (ReadPrec
                          [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                            h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9,
                            n_X3KJb)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                                   h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9,
                                   n_X3KJb)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                         h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]>_R
                  :: (P.ReadP
                        [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                          h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9,
                          n_X3KJb)] :: *)
                     ~R# (forall b.
                          ([(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                             h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
               h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                  h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]))

-- RHS size: {terms: 89, types: 127, coercions: 37, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m, Read n) =>
     Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K39)
             (@ b_a3K3a)
             (@ c_a3K3b)
             (@ d_a3K3c)
             (@ e_a3K3d)
             (@ f_a3K3e)
             (@ g_a3K3f)
             (@ h_a3K3g)
             (@ i_a3K3h)
             (@ j_a3K3i)
             (@ k_a3K3j)
             (@ l_a3K3k)
             (@ m_a3K3l)
             (@ n_a3K3m)
             (v_X51 :: Read a_a3K39)
             (v1_X53 :: Read b_a3K3a)
             (v2_B3 :: Read c_a3K3b)
             (v3_B4 :: Read d_a3K3c)
             (v4_B5 :: Read e_a3K3d)
             (v5_B6 :: Read f_a3K3e)
             (v6_B7 :: Read g_a3K3f)
             (v7_B8 :: Read h_a3K3g)
             (v8_B9 :: Read i_a3K3h)
             (v9_Ba :: Read j_a3K3i)
             (v10_Bb :: Read k_a3K3j)
             (v11_Bc :: Read l_a3K3k)
             (v12_Bd :: Read m_a3K3l)
             (v13_Be :: Read n_a3K3m) ->
       GHC.Read.C:Read TYPE: (a_a3K39, b_a3K3a, c_a3K3b, d_a3K3c, e_a3K3d,
                              f_a3K3e, g_a3K3f, h_a3K3g, i_a3K3h, j_a3K3i, k_a3K3j, l_a3K3k,
                              m_a3K3l, n_a3K3m)
                       GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
                         @ a_a3K39
                         @ b_a3K3a
                         @ c_a3K3b
                         @ d_a3K3c
                         @ e_a3K3d
                         @ f_a3K3e
                         @ g_a3K3f
                         @ h_a3K3g
                         @ i_a3K3h
                         @ j_a3K3i
                         @ k_a3K3j
                         @ l_a3K3k
                         @ m_a3K3l
                         @ n_a3K3m
                         v_X51
                         v1_X53
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                       GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
                         @ a_a3K39
                         @ b_a3K3a
                         @ c_a3K3b
                         @ d_a3K3c
                         @ e_a3K3d
                         @ f_a3K3e
                         @ g_a3K3f
                         @ h_a3K3g
                         @ i_a3K3h
                         @ j_a3K3i
                         @ k_a3K3j
                         @ l_a3K3k
                         @ m_a3K3l
                         @ n_a3K3m
                         v_X51
                         v1_X53
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be
                       (GHC.Read.$fRead(,,,,,,,,,,,,,)1
                          @ a_a3K39
                          @ b_a3K3a
                          @ c_a3K3b
                          @ d_a3K3c
                          @ e_a3K3d
                          @ f_a3K3e
                          @ g_a3K3f
                          @ h_a3K3g
                          @ i_a3K3h
                          @ j_a3K3i
                          @ k_a3K3j
                          @ l_a3K3k
                          @ m_a3K3l
                          @ n_a3K3m
                          v_X51
                          v1_X53
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7
                          v7_B8
                          v8_B9
                          v9_Ba
                          v10_Bb
                          v11_Bc
                          v12_Bd
                          v13_Be)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K39, b_a3K3a, c_a3K3b, d_a3K3c, e_a3K3d,
                                                f_a3K3e, g_a3K3f, h_a3K3g, i_a3K3h, j_a3K3i,
                                                k_a3K3j, l_a3K3k, m_a3K3l,
                                                n_a3K3m)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K39, b_a3K3a,
                                                                           c_a3K3b, d_a3K3c,
                                                                           e_a3K3d, f_a3K3e,
                                                                           g_a3K3f, h_a3K3g,
                                                                           i_a3K3h, j_a3K3i,
                                                                           k_a3K3j, l_a3K3k,
                                                                           m_a3K3l, n_a3K3m)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K39, b_a3K3a, c_a3K3b, d_a3K3c, e_a3K3d, f_a3K3e,
                                        g_a3K3f, h_a3K3g, i_a3K3h, j_a3K3i, k_a3K3j, l_a3K3k,
                                        m_a3K3l, n_a3K3m)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K39, b_a3K3a, c_a3K3b, d_a3K3c, e_a3K3d, f_a3K3e,
                                          g_a3K3f, h_a3K3g, i_a3K3h, j_a3K3i, k_a3K3j, l_a3K3k,
                                          m_a3K3l, n_a3K3m) :: *))
                       GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
                         @ a_a3K39
                         @ b_a3K3a
                         @ c_a3K3b
                         @ d_a3K3c
                         @ e_a3K3d
                         @ f_a3K3e
                         @ g_a3K3f
                         @ h_a3K3g
                         @ i_a3K3h
                         @ j_a3K3i
                         @ k_a3K3j
                         @ l_a3K3k
                         @ m_a3K3l
                         @ n_a3K3m
                         v_X51
                         v1_X53
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                         v13_Be]
GHC.Read.$fRead(,,,,,,,,,,,,,)
  = \ (@ a_X3KIM)
      (@ b_X3KIO)
      (@ c_X3KIQ)
      (@ d_X3KIS)
      (@ e_X3KIU)
      (@ f_X3KIW)
      (@ g_X3KIY)
      (@ h_X3KJ0)
      (@ i_X3KJ2)
      (@ j_X3KJ4)
      (@ k_X3KJ6)
      (@ l_X3KJ8)
      (@ m_X3KJa)
      (@ n_X3KJc)
      ($dRead_X3KJe :: Read a_X3KIM)
      ($dRead1_X3KJg :: Read b_X3KIO)
      ($dRead2_X3KJi :: Read c_X3KIQ)
      ($dRead3_X3KJk :: Read d_X3KIS)
      ($dRead4_X3KJm :: Read e_X3KIU)
      ($dRead5_X3KJo :: Read f_X3KIW)
      ($dRead6_X3KJq :: Read g_X3KIY)
      ($dRead7_X3KJs :: Read h_X3KJ0)
      ($dRead8_X3KJu :: Read i_X3KJ2)
      ($dRead9_X3KJw :: Read j_X3KJ4)
      ($dRead10_X3KJy :: Read k_X3KJ6)
      ($dRead11_X3KJA :: Read l_X3KJ8)
      ($dRead12_X3KJC :: Read m_X3KJa)
      ($dRead13_X3KJE :: Read n_X3KJc) ->
      GHC.Read.C:Read
        @ (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
           h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
        (GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
           @ a_X3KIM
           @ b_X3KIO
           @ c_X3KIQ
           @ d_X3KIS
           @ e_X3KIU
           @ f_X3KIW
           @ g_X3KIY
           @ h_X3KJ0
           @ i_X3KJ2
           @ j_X3KJ4
           @ k_X3KJ6
           @ l_X3KJ8
           @ m_X3KJa
           @ n_X3KJc
           $dRead_X3KJe
           $dRead1_X3KJg
           $dRead2_X3KJi
           $dRead3_X3KJk
           $dRead4_X3KJm
           $dRead5_X3KJo
           $dRead6_X3KJq
           $dRead7_X3KJs
           $dRead8_X3KJu
           $dRead9_X3KJw
           $dRead10_X3KJy
           $dRead11_X3KJA
           $dRead12_X3KJC
           $dRead13_X3KJE)
        (GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
           @ a_X3KIM
           @ b_X3KIO
           @ c_X3KIQ
           @ d_X3KIS
           @ e_X3KIU
           @ f_X3KIW
           @ g_X3KIY
           @ h_X3KJ0
           @ i_X3KJ2
           @ j_X3KJ4
           @ k_X3KJ6
           @ l_X3KJ8
           @ m_X3KJa
           @ n_X3KJc
           $dRead_X3KJe
           $dRead1_X3KJg
           $dRead2_X3KJi
           $dRead3_X3KJk
           $dRead4_X3KJm
           $dRead5_X3KJo
           $dRead6_X3KJq
           $dRead7_X3KJs
           $dRead8_X3KJu
           $dRead9_X3KJw
           $dRead10_X3KJy
           $dRead11_X3KJA
           $dRead12_X3KJC
           $dRead13_X3KJE)
        ((GHC.Read.$fRead(,,,,,,,,,,,,,)1
            @ a_X3KIM
            @ b_X3KIO
            @ c_X3KIQ
            @ d_X3KIS
            @ e_X3KIU
            @ f_X3KIW
            @ g_X3KIY
            @ h_X3KJ0
            @ i_X3KJ2
            @ j_X3KJ4
            @ k_X3KJ6
            @ l_X3KJ8
            @ m_X3KJa
            @ n_X3KJc
            $dRead_X3KJe
            $dRead1_X3KJg
            $dRead2_X3KJi
            $dRead3_X3KJk
            $dRead4_X3KJm
            $dRead5_X3KJo
            $dRead6_X3KJq
            $dRead7_X3KJs
            $dRead8_X3KJu
            $dRead9_X3KJw
            $dRead10_X3KJy
            $dRead11_X3KJA
            $dRead12_X3KJC
            $dRead13_X3KJE)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                                  h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa,
                                  n_X3KJc)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS,
                                                             e_X3KIU, f_X3KIW, g_X3KIY, h_X3KJ0,
                                                             i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8,
                                                             m_X3KJa, n_X3KJc)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                          h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                            h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa,
                            n_X3KJc) :: *)))
        (GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
           @ a_X3KIM
           @ b_X3KIO
           @ c_X3KIQ
           @ d_X3KIS
           @ e_X3KIU
           @ f_X3KIW
           @ g_X3KIY
           @ h_X3KJ0
           @ i_X3KJ2
           @ j_X3KJ4
           @ k_X3KJ6
           @ l_X3KJ8
           @ m_X3KJa
           @ n_X3KJc
           $dRead_X3KJe
           $dRead1_X3KJg
           $dRead2_X3KJi
           $dRead3_X3KJk
           $dRead4_X3KJm
           $dRead5_X3KJo
           $dRead6_X3KJq
           $dRead7_X3KJs
           $dRead8_X3KJu
           $dRead9_X3KJw
           $dRead10_X3KJy
           $dRead11_X3KJA
           $dRead12_X3KJC
           $dRead13_X3KJE)

-- RHS size: {terms: 41, types: 79, coercions: 35, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m) =>
     ReadPrec [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=13,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KKG)
                 (@ b_X3KKI)
                 (@ c_X3KKK)
                 (@ d_X3KKM)
                 (@ e_X3KKO)
                 (@ f_X3KKQ)
                 (@ g_X3KKS)
                 (@ h_X3KKU)
                 (@ i_X3KKW)
                 (@ j_X3KKY)
                 (@ k_X3KL0)
                 (@ l_X3KL2)
                 (@ m_X3KL4)
                 ($dRead_X3KL6 [Occ=Once] :: Read a_X3KKG)
                 ($dRead1_X3KL8 [Occ=Once] :: Read b_X3KKI)
                 ($dRead2_X3KLa [Occ=Once] :: Read c_X3KKK)
                 ($dRead3_X3KLc [Occ=Once] :: Read d_X3KKM)
                 ($dRead4_X3KLe [Occ=Once] :: Read e_X3KKO)
                 ($dRead5_X3KLg [Occ=Once] :: Read f_X3KKQ)
                 ($dRead6_X3KLi [Occ=Once] :: Read g_X3KKS)
                 ($dRead7_X3KLk [Occ=Once] :: Read h_X3KKU)
                 ($dRead8_X3KLm [Occ=Once] :: Read i_X3KKW)
                 ($dRead9_X3KLo [Occ=Once] :: Read j_X3KKY)
                 ($dRead10_X3KLq [Occ=Once] :: Read k_X3KL0)
                 ($dRead11_X3KLs [Occ=Once] :: Read l_X3KL2)
                 ($dRead12_X3KLu [Occ=Once] :: Read m_X3KL4) ->
                 list
                   @ (a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                      h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4)
                   ((GHC.Read.$fRead(,,,,,,,,,,,,)1
                       @ a_X3KKG
                       @ b_X3KKI
                       @ c_X3KKK
                       @ d_X3KKM
                       @ e_X3KKO
                       @ f_X3KKQ
                       @ g_X3KKS
                       @ h_X3KKU
                       @ i_X3KKW
                       @ j_X3KKY
                       @ k_X3KL0
                       @ l_X3KL2
                       @ m_X3KL4
                       $dRead_X3KL6
                       $dRead1_X3KL8
                       $dRead2_X3KLa
                       $dRead3_X3KLc
                       $dRead4_X3KLe
                       $dRead5_X3KLg
                       $dRead6_X3KLi
                       $dRead7_X3KLk
                       $dRead8_X3KLm
                       $dRead9_X3KLo
                       $dRead10_X3KLq
                       $dRead11_X3KLs
                       $dRead12_X3KLu)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ,
                                             g_X3KKS, h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2,
                                             m_X3KL4)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KKG, b_X3KKI, c_X3KKK,
                                                                        d_X3KKM, e_X3KKO, f_X3KKQ,
                                                                        g_X3KKS, h_X3KKU, i_X3KKW,
                                                                        j_X3KKY, k_X3KL0, l_X3KL2,
                                                                        m_X3KL4)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                                     h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ,
                                       g_X3KKS, h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2,
                                       m_X3KL4) :: *)))}]
GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
  = \ (@ a_X3KKG)
      (@ b_X3KKI)
      (@ c_X3KKK)
      (@ d_X3KKM)
      (@ e_X3KKO)
      (@ f_X3KKQ)
      (@ g_X3KKS)
      (@ h_X3KKU)
      (@ i_X3KKW)
      (@ j_X3KKY)
      (@ k_X3KL0)
      (@ l_X3KL2)
      (@ m_X3KL4)
      ($dRead_X3KL6 :: Read a_X3KKG)
      ($dRead1_X3KL8 :: Read b_X3KKI)
      ($dRead2_X3KLa :: Read c_X3KKK)
      ($dRead3_X3KLc :: Read d_X3KKM)
      ($dRead4_X3KLe :: Read e_X3KKO)
      ($dRead5_X3KLg :: Read f_X3KKQ)
      ($dRead6_X3KLi :: Read g_X3KKS)
      ($dRead7_X3KLk :: Read h_X3KKU)
      ($dRead8_X3KLm :: Read i_X3KKW)
      ($dRead9_X3KLo :: Read j_X3KKY)
      ($dRead10_X3KLq :: Read k_X3KL0)
      ($dRead11_X3KLs :: Read l_X3KL2)
      ($dRead12_X3KLu :: Read m_X3KL4) ->
      list
        @ (a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
           h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4)
        ((GHC.Read.$fRead(,,,,,,,,,,,,)1
            @ a_X3KKG
            @ b_X3KKI
            @ c_X3KKK
            @ d_X3KKM
            @ e_X3KKO
            @ f_X3KKQ
            @ g_X3KKS
            @ h_X3KKU
            @ i_X3KKW
            @ j_X3KKY
            @ k_X3KL0
            @ l_X3KL2
            @ m_X3KL4
            $dRead_X3KL6
            $dRead1_X3KL8
            $dRead2_X3KLa
            $dRead3_X3KLc
            $dRead4_X3KLe
            $dRead5_X3KLg
            $dRead6_X3KLi
            $dRead7_X3KLk
            $dRead8_X3KLm
            $dRead9_X3KLo
            $dRead10_X3KLq
            $dRead11_X3KLs
            $dRead12_X3KLu)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                                  h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2,
                                  m_X3KL4)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM,
                                                             e_X3KKO, f_X3KKQ, g_X3KKS, h_X3KKU,
                                                             i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2,
                                                             m_X3KL4)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                          h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                            h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4) :: *)))

-- RHS size: {terms: 44, types: 108, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m) =>
     Int -> ReadS (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=14,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KKH)
                 (@ b_X3KKJ)
                 (@ c_X3KKL)
                 (@ d_X3KKN)
                 (@ e_X3KKP)
                 (@ f_X3KKR)
                 (@ g_X3KKT)
                 (@ h_X3KKV)
                 (@ i_X3KKX)
                 (@ j_X3KKZ)
                 (@ k_X3KL1)
                 (@ l_X3KL3)
                 (@ m_X3KL5)
                 ($dRead_X3KL7 [Occ=Once] :: Read a_X3KKH)
                 ($dRead1_X3KL9 [Occ=Once] :: Read b_X3KKJ)
                 ($dRead2_X3KLb [Occ=Once] :: Read c_X3KKL)
                 ($dRead3_X3KLd [Occ=Once] :: Read d_X3KKN)
                 ($dRead4_X3KLf [Occ=Once] :: Read e_X3KKP)
                 ($dRead5_X3KLh [Occ=Once] :: Read f_X3KKR)
                 ($dRead6_X3KLj [Occ=Once] :: Read g_X3KKT)
                 ($dRead7_X3KLl [Occ=Once] :: Read h_X3KKV)
                 ($dRead8_X3KLn [Occ=Once] :: Read i_X3KKX)
                 ($dRead9_X3KLp [Occ=Once] :: Read j_X3KKZ)
                 ($dRead10_X3KLr [Occ=Once] :: Read k_X3KL1)
                 ($dRead11_X3KLt [Occ=Once] :: Read l_X3KL3)
                 ($dRead12_X3KLv [Occ=Once] :: Read m_X3KL5)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
                      h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)
                   (GHC.Read.$fRead(,,,,,,,,,,,,)1
                      @ a_X3KKH
                      @ b_X3KKJ
                      @ c_X3KKL
                      @ d_X3KKN
                      @ e_X3KKP
                      @ f_X3KKR
                      @ g_X3KKT
                      @ h_X3KKV
                      @ i_X3KKX
                      @ j_X3KKZ
                      @ k_X3KL1
                      @ l_X3KL3
                      @ m_X3KL5
                      $dRead_X3KL7
                      $dRead1_X3KL9
                      $dRead2_X3KLb
                      $dRead3_X3KLd
                      $dRead4_X3KLf
                      $dRead5_X3KLh
                      $dRead6_X3KLj
                      $dRead7_X3KLl
                      $dRead8_X3KLn
                      $dRead9_X3KLp
                      $dRead10_X3KLr
                      $dRead11_X3KLt
                      $dRead12_X3KLv
                      n_a3tmE
                      @ (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
                         h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
                            h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)))}]
GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
  = \ (@ a_X3KKH)
      (@ b_X3KKJ)
      (@ c_X3KKL)
      (@ d_X3KKN)
      (@ e_X3KKP)
      (@ f_X3KKR)
      (@ g_X3KKT)
      (@ h_X3KKV)
      (@ i_X3KKX)
      (@ j_X3KKZ)
      (@ k_X3KL1)
      (@ l_X3KL3)
      (@ m_X3KL5)
      ($dRead_X3KL7 :: Read a_X3KKH)
      ($dRead1_X3KL9 :: Read b_X3KKJ)
      ($dRead2_X3KLb :: Read c_X3KKL)
      ($dRead3_X3KLd :: Read d_X3KKN)
      ($dRead4_X3KLf :: Read e_X3KKP)
      ($dRead5_X3KLh :: Read f_X3KKR)
      ($dRead6_X3KLj :: Read g_X3KKT)
      ($dRead7_X3KLl :: Read h_X3KKV)
      ($dRead8_X3KLn :: Read i_X3KKX)
      ($dRead9_X3KLp :: Read j_X3KKZ)
      ($dRead10_X3KLr :: Read k_X3KL1)
      ($dRead11_X3KLt :: Read l_X3KL3)
      ($dRead12_X3KLv :: Read m_X3KL5)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
           h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)
        (GHC.Read.$fRead(,,,,,,,,,,,,)1
           @ a_X3KKH
           @ b_X3KKJ
           @ c_X3KKL
           @ d_X3KKN
           @ e_X3KKP
           @ f_X3KKR
           @ g_X3KKT
           @ h_X3KKV
           @ i_X3KKX
           @ j_X3KKZ
           @ k_X3KL1
           @ l_X3KL3
           @ m_X3KL5
           $dRead_X3KL7
           $dRead1_X3KL9
           $dRead2_X3KLb
           $dRead3_X3KLd
           $dRead4_X3KLf
           $dRead5_X3KLh
           $dRead6_X3KLj
           $dRead7_X3KLl
           $dRead8_X3KLn
           $dRead9_X3KLp
           $dRead10_X3KLr
           $dRead11_X3KLt
           $dRead12_X3KLv
           n_a3tmE
           @ (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
              h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
                 h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)))

-- RHS size: {terms: 44, types: 124, coercions: 67, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m) =>
     ReadS [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=13,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KKI)
                 (@ b_X3KKK)
                 (@ c_X3KKM)
                 (@ d_X3KKO)
                 (@ e_X3KKQ)
                 (@ f_X3KKS)
                 (@ g_X3KKU)
                 (@ h_X3KKW)
                 (@ i_X3KKY)
                 (@ j_X3KL0)
                 (@ k_X3KL2)
                 (@ l_X3KL4)
                 (@ m_X3KL6)
                 ($dRead_X3KL8 [Occ=Once] :: Read a_X3KKI)
                 ($dRead1_X3KLa [Occ=Once] :: Read b_X3KKK)
                 ($dRead2_X3KLc [Occ=Once] :: Read c_X3KKM)
                 ($dRead3_X3KLe [Occ=Once] :: Read d_X3KKO)
                 ($dRead4_X3KLg [Occ=Once] :: Read e_X3KKQ)
                 ($dRead5_X3KLi [Occ=Once] :: Read f_X3KKS)
                 ($dRead6_X3KLk [Occ=Once] :: Read g_X3KKU)
                 ($dRead7_X3KLm [Occ=Once] :: Read h_X3KKW)
                 ($dRead8_X3KLo [Occ=Once] :: Read i_X3KKY)
                 ($dRead9_X3KLq [Occ=Once] :: Read j_X3KL0)
                 ($dRead10_X3KLs [Occ=Once] :: Read k_X3KL2)
                 ($dRead11_X3KLu [Occ=Once] :: Read l_X3KL4)
                 ($dRead12_X3KLw [Occ=Once] :: Read m_X3KL6) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                       h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
                   (((((list
                          @ (a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                             h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)
                          ((GHC.Read.$fRead(,,,,,,,,,,,,)1
                              @ a_X3KKI
                              @ b_X3KKK
                              @ c_X3KKM
                              @ d_X3KKO
                              @ e_X3KKQ
                              @ f_X3KKS
                              @ g_X3KKU
                              @ h_X3KKW
                              @ i_X3KKY
                              @ j_X3KL0
                              @ k_X3KL2
                              @ l_X3KL4
                              @ m_X3KL6
                              $dRead_X3KL8
                              $dRead1_X3KLa
                              $dRead2_X3KLc
                              $dRead3_X3KLe
                              $dRead4_X3KLg
                              $dRead5_X3KLi
                              $dRead6_X3KLk
                              $dRead7_X3KLm
                              $dRead8_X3KLo
                              $dRead9_X3KLq
                              $dRead10_X3KLs
                              $dRead11_X3KLu
                              $dRead12_X3KLw)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ,
                                                    f_X3KKS, g_X3KKU, h_X3KKW, i_X3KKY, j_X3KL0,
                                                    k_X3KL2, l_X3KL4,
                                                    m_X3KL6)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KKI, b_X3KKK,
                                                                               c_X3KKM, d_X3KKO,
                                                                               e_X3KKQ, f_X3KKS,
                                                                               g_X3KKU, h_X3KKW,
                                                                               i_X3KKY, j_X3KL0,
                                                                               k_X3KL2, l_X3KL4,
                                                                               m_X3KL6)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS,
                                            g_X3KKU, h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4,
                                            m_X3KL6)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS,
                                              g_X3KKU, h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4,
                                              m_X3KL6) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                                      h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]>_R
                               :: (ReadPrec
                                     [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS,
                                       g_X3KKU, h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4,
                                       m_X3KL6)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS,
                                              g_X3KKU, h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4,
                                              m_X3KL6)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                                    h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]>_R
                             :: (P.ReadP
                                   [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                                     h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS,
                                        g_X3KKU, h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4,
                                        m_X3KL6)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                          h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                             h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]))}]
GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
  = \ (@ a_X3KKI)
      (@ b_X3KKK)
      (@ c_X3KKM)
      (@ d_X3KKO)
      (@ e_X3KKQ)
      (@ f_X3KKS)
      (@ g_X3KKU)
      (@ h_X3KKW)
      (@ i_X3KKY)
      (@ j_X3KL0)
      (@ k_X3KL2)
      (@ l_X3KL4)
      (@ m_X3KL6)
      ($dRead_X3KL8 :: Read a_X3KKI)
      ($dRead1_X3KLa :: Read b_X3KKK)
      ($dRead2_X3KLc :: Read c_X3KKM)
      ($dRead3_X3KLe :: Read d_X3KKO)
      ($dRead4_X3KLg :: Read e_X3KKQ)
      ($dRead5_X3KLi :: Read f_X3KKS)
      ($dRead6_X3KLk :: Read g_X3KKU)
      ($dRead7_X3KLm :: Read h_X3KKW)
      ($dRead8_X3KLo :: Read i_X3KKY)
      ($dRead9_X3KLq :: Read j_X3KL0)
      ($dRead10_X3KLs :: Read k_X3KL2)
      ($dRead11_X3KLu :: Read l_X3KL4)
      ($dRead12_X3KLw :: Read m_X3KL6) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
            h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
        (((((list
               @ (a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                  h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)
               ((GHC.Read.$fRead(,,,,,,,,,,,,)1
                   @ a_X3KKI
                   @ b_X3KKK
                   @ c_X3KKM
                   @ d_X3KKO
                   @ e_X3KKQ
                   @ f_X3KKS
                   @ g_X3KKU
                   @ h_X3KKW
                   @ i_X3KKY
                   @ j_X3KL0
                   @ k_X3KL2
                   @ l_X3KL4
                   @ m_X3KL6
                   $dRead_X3KL8
                   $dRead1_X3KLa
                   $dRead2_X3KLc
                   $dRead3_X3KLe
                   $dRead4_X3KLg
                   $dRead5_X3KLi
                   $dRead6_X3KLk
                   $dRead7_X3KLm
                   $dRead8_X3KLo
                   $dRead9_X3KLq
                   $dRead10_X3KLs
                   $dRead11_X3KLu
                   $dRead12_X3KLw)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS,
                                         g_X3KKU, h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4,
                                         m_X3KL6)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KKI, b_X3KKK, c_X3KKM,
                                                                    d_X3KKO, e_X3KKQ, f_X3KKS,
                                                                    g_X3KKU, h_X3KKW, i_X3KKY,
                                                                    j_X3KL0, k_X3KL2, l_X3KL4,
                                                                    m_X3KL6)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                                 h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                                   h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                           h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]>_R
                    :: (ReadPrec
                          [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                            h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                                   h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                         h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]>_R
                  :: (P.ReadP
                        [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                          h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)] :: *)
                     ~R# (forall b.
                          ([(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                             h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
               h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                  h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]))

-- RHS size: {terms: 83, types: 118, coercions: 35, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l, Read m) =>
     Read (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K3B)
             (@ b_a3K3C)
             (@ c_a3K3D)
             (@ d_a3K3E)
             (@ e_a3K3F)
             (@ f_a3K3G)
             (@ g_a3K3H)
             (@ h_a3K3I)
             (@ i_a3K3J)
             (@ j_a3K3K)
             (@ k_a3K3L)
             (@ l_a3K3M)
             (@ m_a3K3N)
             (v_X54 :: Read a_a3K3B)
             (v1_X56 :: Read b_a3K3C)
             (v2_B3 :: Read c_a3K3D)
             (v3_B4 :: Read d_a3K3E)
             (v4_B5 :: Read e_a3K3F)
             (v5_B6 :: Read f_a3K3G)
             (v6_B7 :: Read g_a3K3H)
             (v7_B8 :: Read h_a3K3I)
             (v8_B9 :: Read i_a3K3J)
             (v9_Ba :: Read j_a3K3K)
             (v10_Bb :: Read k_a3K3L)
             (v11_Bc :: Read l_a3K3M)
             (v12_Bd :: Read m_a3K3N) ->
       GHC.Read.C:Read TYPE: (a_a3K3B, b_a3K3C, c_a3K3D, d_a3K3E, e_a3K3F,
                              f_a3K3G, g_a3K3H, h_a3K3I, i_a3K3J, j_a3K3K, k_a3K3L, l_a3K3M,
                              m_a3K3N)
                       GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
                         @ a_a3K3B
                         @ b_a3K3C
                         @ c_a3K3D
                         @ d_a3K3E
                         @ e_a3K3F
                         @ f_a3K3G
                         @ g_a3K3H
                         @ h_a3K3I
                         @ i_a3K3J
                         @ j_a3K3K
                         @ k_a3K3L
                         @ l_a3K3M
                         @ m_a3K3N
                         v_X54
                         v1_X56
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                       GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
                         @ a_a3K3B
                         @ b_a3K3C
                         @ c_a3K3D
                         @ d_a3K3E
                         @ e_a3K3F
                         @ f_a3K3G
                         @ g_a3K3H
                         @ h_a3K3I
                         @ i_a3K3J
                         @ j_a3K3K
                         @ k_a3K3L
                         @ l_a3K3M
                         @ m_a3K3N
                         v_X54
                         v1_X56
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd
                       (GHC.Read.$fRead(,,,,,,,,,,,,)1
                          @ a_a3K3B
                          @ b_a3K3C
                          @ c_a3K3D
                          @ d_a3K3E
                          @ e_a3K3F
                          @ f_a3K3G
                          @ g_a3K3H
                          @ h_a3K3I
                          @ i_a3K3J
                          @ j_a3K3K
                          @ k_a3K3L
                          @ l_a3K3M
                          @ m_a3K3N
                          v_X54
                          v1_X56
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7
                          v7_B8
                          v8_B9
                          v9_Ba
                          v10_Bb
                          v11_Bc
                          v12_Bd)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K3B, b_a3K3C, c_a3K3D, d_a3K3E, e_a3K3F,
                                                f_a3K3G, g_a3K3H, h_a3K3I, i_a3K3J, j_a3K3K,
                                                k_a3K3L, l_a3K3M,
                                                m_a3K3N)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K3B, b_a3K3C,
                                                                           c_a3K3D, d_a3K3E,
                                                                           e_a3K3F, f_a3K3G,
                                                                           g_a3K3H, h_a3K3I,
                                                                           i_a3K3J, j_a3K3K,
                                                                           k_a3K3L, l_a3K3M,
                                                                           m_a3K3N)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K3B, b_a3K3C, c_a3K3D, d_a3K3E, e_a3K3F, f_a3K3G,
                                        g_a3K3H, h_a3K3I, i_a3K3J, j_a3K3K, k_a3K3L, l_a3K3M,
                                        m_a3K3N)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K3B, b_a3K3C, c_a3K3D, d_a3K3E, e_a3K3F, f_a3K3G,
                                          g_a3K3H, h_a3K3I, i_a3K3J, j_a3K3K, k_a3K3L, l_a3K3M,
                                          m_a3K3N) :: *))
                       GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
                         @ a_a3K3B
                         @ b_a3K3C
                         @ c_a3K3D
                         @ d_a3K3E
                         @ e_a3K3F
                         @ f_a3K3G
                         @ g_a3K3H
                         @ h_a3K3I
                         @ i_a3K3J
                         @ j_a3K3K
                         @ k_a3K3L
                         @ l_a3K3M
                         @ m_a3K3N
                         v_X54
                         v1_X56
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                         v12_Bd]
GHC.Read.$fRead(,,,,,,,,,,,,)
  = \ (@ a_X3KKJ)
      (@ b_X3KKL)
      (@ c_X3KKN)
      (@ d_X3KKP)
      (@ e_X3KKR)
      (@ f_X3KKT)
      (@ g_X3KKV)
      (@ h_X3KKX)
      (@ i_X3KKZ)
      (@ j_X3KL1)
      (@ k_X3KL3)
      (@ l_X3KL5)
      (@ m_X3KL7)
      ($dRead_X3KL9 :: Read a_X3KKJ)
      ($dRead1_X3KLb :: Read b_X3KKL)
      ($dRead2_X3KLd :: Read c_X3KKN)
      ($dRead3_X3KLf :: Read d_X3KKP)
      ($dRead4_X3KLh :: Read e_X3KKR)
      ($dRead5_X3KLj :: Read f_X3KKT)
      ($dRead6_X3KLl :: Read g_X3KKV)
      ($dRead7_X3KLn :: Read h_X3KKX)
      ($dRead8_X3KLp :: Read i_X3KKZ)
      ($dRead9_X3KLr :: Read j_X3KL1)
      ($dRead10_X3KLt :: Read k_X3KL3)
      ($dRead11_X3KLv :: Read l_X3KL5)
      ($dRead12_X3KLx :: Read m_X3KL7) ->
      GHC.Read.C:Read
        @ (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
           h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
        (GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
           @ a_X3KKJ
           @ b_X3KKL
           @ c_X3KKN
           @ d_X3KKP
           @ e_X3KKR
           @ f_X3KKT
           @ g_X3KKV
           @ h_X3KKX
           @ i_X3KKZ
           @ j_X3KL1
           @ k_X3KL3
           @ l_X3KL5
           @ m_X3KL7
           $dRead_X3KL9
           $dRead1_X3KLb
           $dRead2_X3KLd
           $dRead3_X3KLf
           $dRead4_X3KLh
           $dRead5_X3KLj
           $dRead6_X3KLl
           $dRead7_X3KLn
           $dRead8_X3KLp
           $dRead9_X3KLr
           $dRead10_X3KLt
           $dRead11_X3KLv
           $dRead12_X3KLx)
        (GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
           @ a_X3KKJ
           @ b_X3KKL
           @ c_X3KKN
           @ d_X3KKP
           @ e_X3KKR
           @ f_X3KKT
           @ g_X3KKV
           @ h_X3KKX
           @ i_X3KKZ
           @ j_X3KL1
           @ k_X3KL3
           @ l_X3KL5
           @ m_X3KL7
           $dRead_X3KL9
           $dRead1_X3KLb
           $dRead2_X3KLd
           $dRead3_X3KLf
           $dRead4_X3KLh
           $dRead5_X3KLj
           $dRead6_X3KLl
           $dRead7_X3KLn
           $dRead8_X3KLp
           $dRead9_X3KLr
           $dRead10_X3KLt
           $dRead11_X3KLv
           $dRead12_X3KLx)
        ((GHC.Read.$fRead(,,,,,,,,,,,,)1
            @ a_X3KKJ
            @ b_X3KKL
            @ c_X3KKN
            @ d_X3KKP
            @ e_X3KKR
            @ f_X3KKT
            @ g_X3KKV
            @ h_X3KKX
            @ i_X3KKZ
            @ j_X3KL1
            @ k_X3KL3
            @ l_X3KL5
            @ m_X3KL7
            $dRead_X3KL9
            $dRead1_X3KLb
            $dRead2_X3KLd
            $dRead3_X3KLf
            $dRead4_X3KLh
            $dRead5_X3KLj
            $dRead6_X3KLl
            $dRead7_X3KLn
            $dRead8_X3KLp
            $dRead9_X3KLr
            $dRead10_X3KLt
            $dRead11_X3KLv
            $dRead12_X3KLx)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                                  h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5,
                                  m_X3KL7)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP,
                                                             e_X3KKR, f_X3KKT, g_X3KKV, h_X3KKX,
                                                             i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5,
                                                             m_X3KL7)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                          h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                            h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7) :: *)))
        (GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
           @ a_X3KKJ
           @ b_X3KKL
           @ c_X3KKN
           @ d_X3KKP
           @ e_X3KKR
           @ f_X3KKT
           @ g_X3KKV
           @ h_X3KKX
           @ i_X3KKZ
           @ j_X3KL1
           @ k_X3KL3
           @ l_X3KL5
           @ m_X3KL7
           $dRead_X3KL9
           $dRead1_X3KLb
           $dRead2_X3KLd
           $dRead3_X3KLf
           $dRead4_X3KLh
           $dRead5_X3KLj
           $dRead6_X3KLl
           $dRead7_X3KLn
           $dRead8_X3KLp
           $dRead9_X3KLr
           $dRead10_X3KLt
           $dRead11_X3KLv
           $dRead12_X3KLx)

-- RHS size: {terms: 38, types: 73, coercions: 33, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l) =>
     ReadPrec [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=12,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KMy)
                 (@ b_X3KMA)
                 (@ c_X3KMC)
                 (@ d_X3KME)
                 (@ e_X3KMG)
                 (@ f_X3KMI)
                 (@ g_X3KMK)
                 (@ h_X3KMM)
                 (@ i_X3KMO)
                 (@ j_X3KMQ)
                 (@ k_X3KMS)
                 (@ l_X3KMU)
                 ($dRead_X3KMW [Occ=Once] :: Read a_X3KMy)
                 ($dRead1_X3KMY [Occ=Once] :: Read b_X3KMA)
                 ($dRead2_X3KN0 [Occ=Once] :: Read c_X3KMC)
                 ($dRead3_X3KN2 [Occ=Once] :: Read d_X3KME)
                 ($dRead4_X3KN4 [Occ=Once] :: Read e_X3KMG)
                 ($dRead5_X3KN6 [Occ=Once] :: Read f_X3KMI)
                 ($dRead6_X3KN8 [Occ=Once] :: Read g_X3KMK)
                 ($dRead7_X3KNa [Occ=Once] :: Read h_X3KMM)
                 ($dRead8_X3KNc [Occ=Once] :: Read i_X3KMO)
                 ($dRead9_X3KNe [Occ=Once] :: Read j_X3KMQ)
                 ($dRead10_X3KNg [Occ=Once] :: Read k_X3KMS)
                 ($dRead11_X3KNi [Occ=Once] :: Read l_X3KMU) ->
                 list
                   @ (a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                      h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)
                   ((GHC.Read.$fRead(,,,,,,,,,,,)1
                       @ a_X3KMy
                       @ b_X3KMA
                       @ c_X3KMC
                       @ d_X3KME
                       @ e_X3KMG
                       @ f_X3KMI
                       @ g_X3KMK
                       @ h_X3KMM
                       @ i_X3KMO
                       @ j_X3KMQ
                       @ k_X3KMS
                       @ l_X3KMU
                       $dRead_X3KMW
                       $dRead1_X3KMY
                       $dRead2_X3KN0
                       $dRead3_X3KN2
                       $dRead4_X3KN4
                       $dRead5_X3KN6
                       $dRead6_X3KN8
                       $dRead7_X3KNa
                       $dRead8_X3KNc
                       $dRead9_X3KNe
                       $dRead10_X3KNg
                       $dRead11_X3KNi)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI,
                                             g_X3KMK, h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS,
                                             l_X3KMU)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KMy, b_X3KMA, c_X3KMC,
                                                                        d_X3KME, e_X3KMG, f_X3KMI,
                                                                        g_X3KMK, h_X3KMM, i_X3KMO,
                                                                        j_X3KMQ, k_X3KMS,
                                                                        l_X3KMU)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                                     h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI,
                                       g_X3KMK, h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS,
                                       l_X3KMU) :: *)))}]
GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
  = \ (@ a_X3KMy)
      (@ b_X3KMA)
      (@ c_X3KMC)
      (@ d_X3KME)
      (@ e_X3KMG)
      (@ f_X3KMI)
      (@ g_X3KMK)
      (@ h_X3KMM)
      (@ i_X3KMO)
      (@ j_X3KMQ)
      (@ k_X3KMS)
      (@ l_X3KMU)
      ($dRead_X3KMW :: Read a_X3KMy)
      ($dRead1_X3KMY :: Read b_X3KMA)
      ($dRead2_X3KN0 :: Read c_X3KMC)
      ($dRead3_X3KN2 :: Read d_X3KME)
      ($dRead4_X3KN4 :: Read e_X3KMG)
      ($dRead5_X3KN6 :: Read f_X3KMI)
      ($dRead6_X3KN8 :: Read g_X3KMK)
      ($dRead7_X3KNa :: Read h_X3KMM)
      ($dRead8_X3KNc :: Read i_X3KMO)
      ($dRead9_X3KNe :: Read j_X3KMQ)
      ($dRead10_X3KNg :: Read k_X3KMS)
      ($dRead11_X3KNi :: Read l_X3KMU) ->
      list
        @ (a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
           h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)
        ((GHC.Read.$fRead(,,,,,,,,,,,)1
            @ a_X3KMy
            @ b_X3KMA
            @ c_X3KMC
            @ d_X3KME
            @ e_X3KMG
            @ f_X3KMI
            @ g_X3KMK
            @ h_X3KMM
            @ i_X3KMO
            @ j_X3KMQ
            @ k_X3KMS
            @ l_X3KMU
            $dRead_X3KMW
            $dRead1_X3KMY
            $dRead2_X3KN0
            $dRead3_X3KN2
            $dRead4_X3KN4
            $dRead5_X3KN6
            $dRead6_X3KN8
            $dRead7_X3KNa
            $dRead8_X3KNc
            $dRead9_X3KNe
            $dRead10_X3KNg
            $dRead11_X3KNi)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                                  h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS,
                                  l_X3KMU)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME,
                                                             e_X3KMG, f_X3KMI, g_X3KMK, h_X3KMM,
                                                             i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                          h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                            h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU) :: *)))

-- RHS size: {terms: 41, types: 100, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l) =>
     Int -> ReadS (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=13,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KMz)
                 (@ b_X3KMB)
                 (@ c_X3KMD)
                 (@ d_X3KMF)
                 (@ e_X3KMH)
                 (@ f_X3KMJ)
                 (@ g_X3KML)
                 (@ h_X3KMN)
                 (@ i_X3KMP)
                 (@ j_X3KMR)
                 (@ k_X3KMT)
                 (@ l_X3KMV)
                 ($dRead_X3KMX [Occ=Once] :: Read a_X3KMz)
                 ($dRead1_X3KMZ [Occ=Once] :: Read b_X3KMB)
                 ($dRead2_X3KN1 [Occ=Once] :: Read c_X3KMD)
                 ($dRead3_X3KN3 [Occ=Once] :: Read d_X3KMF)
                 ($dRead4_X3KN5 [Occ=Once] :: Read e_X3KMH)
                 ($dRead5_X3KN7 [Occ=Once] :: Read f_X3KMJ)
                 ($dRead6_X3KN9 [Occ=Once] :: Read g_X3KML)
                 ($dRead7_X3KNb [Occ=Once] :: Read h_X3KMN)
                 ($dRead8_X3KNd [Occ=Once] :: Read i_X3KMP)
                 ($dRead9_X3KNf [Occ=Once] :: Read j_X3KMR)
                 ($dRead10_X3KNh [Occ=Once] :: Read k_X3KMT)
                 ($dRead11_X3KNj [Occ=Once] :: Read l_X3KMV)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
                      h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)
                   (GHC.Read.$fRead(,,,,,,,,,,,)1
                      @ a_X3KMz
                      @ b_X3KMB
                      @ c_X3KMD
                      @ d_X3KMF
                      @ e_X3KMH
                      @ f_X3KMJ
                      @ g_X3KML
                      @ h_X3KMN
                      @ i_X3KMP
                      @ j_X3KMR
                      @ k_X3KMT
                      @ l_X3KMV
                      $dRead_X3KMX
                      $dRead1_X3KMZ
                      $dRead2_X3KN1
                      $dRead3_X3KN3
                      $dRead4_X3KN5
                      $dRead5_X3KN7
                      $dRead6_X3KN9
                      $dRead7_X3KNb
                      $dRead8_X3KNd
                      $dRead9_X3KNf
                      $dRead10_X3KNh
                      $dRead11_X3KNj
                      n_a3tmE
                      @ (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
                         h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
                            h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)))}]
GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
  = \ (@ a_X3KMz)
      (@ b_X3KMB)
      (@ c_X3KMD)
      (@ d_X3KMF)
      (@ e_X3KMH)
      (@ f_X3KMJ)
      (@ g_X3KML)
      (@ h_X3KMN)
      (@ i_X3KMP)
      (@ j_X3KMR)
      (@ k_X3KMT)
      (@ l_X3KMV)
      ($dRead_X3KMX :: Read a_X3KMz)
      ($dRead1_X3KMZ :: Read b_X3KMB)
      ($dRead2_X3KN1 :: Read c_X3KMD)
      ($dRead3_X3KN3 :: Read d_X3KMF)
      ($dRead4_X3KN5 :: Read e_X3KMH)
      ($dRead5_X3KN7 :: Read f_X3KMJ)
      ($dRead6_X3KN9 :: Read g_X3KML)
      ($dRead7_X3KNb :: Read h_X3KMN)
      ($dRead8_X3KNd :: Read i_X3KMP)
      ($dRead9_X3KNf :: Read j_X3KMR)
      ($dRead10_X3KNh :: Read k_X3KMT)
      ($dRead11_X3KNj :: Read l_X3KMV)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
           h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)
        (GHC.Read.$fRead(,,,,,,,,,,,)1
           @ a_X3KMz
           @ b_X3KMB
           @ c_X3KMD
           @ d_X3KMF
           @ e_X3KMH
           @ f_X3KMJ
           @ g_X3KML
           @ h_X3KMN
           @ i_X3KMP
           @ j_X3KMR
           @ k_X3KMT
           @ l_X3KMV
           $dRead_X3KMX
           $dRead1_X3KMZ
           $dRead2_X3KN1
           $dRead3_X3KN3
           $dRead4_X3KN5
           $dRead5_X3KN7
           $dRead6_X3KN9
           $dRead7_X3KNb
           $dRead8_X3KNd
           $dRead9_X3KNf
           $dRead10_X3KNh
           $dRead11_X3KNj
           n_a3tmE
           @ (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
              h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
                 h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)))

-- RHS size: {terms: 41, types: 115, coercions: 63, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l) =>
     ReadS [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=12,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KMA)
                 (@ b_X3KMC)
                 (@ c_X3KME)
                 (@ d_X3KMG)
                 (@ e_X3KMI)
                 (@ f_X3KMK)
                 (@ g_X3KMM)
                 (@ h_X3KMO)
                 (@ i_X3KMQ)
                 (@ j_X3KMS)
                 (@ k_X3KMU)
                 (@ l_X3KMW)
                 ($dRead_X3KMY [Occ=Once] :: Read a_X3KMA)
                 ($dRead1_X3KN0 [Occ=Once] :: Read b_X3KMC)
                 ($dRead2_X3KN2 [Occ=Once] :: Read c_X3KME)
                 ($dRead3_X3KN4 [Occ=Once] :: Read d_X3KMG)
                 ($dRead4_X3KN6 [Occ=Once] :: Read e_X3KMI)
                 ($dRead5_X3KN8 [Occ=Once] :: Read f_X3KMK)
                 ($dRead6_X3KNa [Occ=Once] :: Read g_X3KMM)
                 ($dRead7_X3KNc [Occ=Once] :: Read h_X3KMO)
                 ($dRead8_X3KNe [Occ=Once] :: Read i_X3KMQ)
                 ($dRead9_X3KNg [Occ=Once] :: Read j_X3KMS)
                 ($dRead10_X3KNi [Occ=Once] :: Read k_X3KMU)
                 ($dRead11_X3KNk [Occ=Once] :: Read l_X3KMW) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                       h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
                   (((((list
                          @ (a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                             h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)
                          ((GHC.Read.$fRead(,,,,,,,,,,,)1
                              @ a_X3KMA
                              @ b_X3KMC
                              @ c_X3KME
                              @ d_X3KMG
                              @ e_X3KMI
                              @ f_X3KMK
                              @ g_X3KMM
                              @ h_X3KMO
                              @ i_X3KMQ
                              @ j_X3KMS
                              @ k_X3KMU
                              @ l_X3KMW
                              $dRead_X3KMY
                              $dRead1_X3KN0
                              $dRead2_X3KN2
                              $dRead3_X3KN4
                              $dRead4_X3KN6
                              $dRead5_X3KN8
                              $dRead6_X3KNa
                              $dRead7_X3KNc
                              $dRead8_X3KNe
                              $dRead9_X3KNg
                              $dRead10_X3KNi
                              $dRead11_X3KNk)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI,
                                                    f_X3KMK, g_X3KMM, h_X3KMO, i_X3KMQ, j_X3KMS,
                                                    k_X3KMU,
                                                    l_X3KMW)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KMA, b_X3KMC,
                                                                               c_X3KME, d_X3KMG,
                                                                               e_X3KMI, f_X3KMK,
                                                                               g_X3KMM, h_X3KMO,
                                                                               i_X3KMQ, j_X3KMS,
                                                                               k_X3KMU, l_X3KMW)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK,
                                            g_X3KMM, h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK,
                                              g_X3KMM, h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU,
                                              l_X3KMW) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                                      h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]>_R
                               :: (ReadPrec
                                     [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK,
                                       g_X3KMM, h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK,
                                              g_X3KMM, h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU,
                                              l_X3KMW)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                                    h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]>_R
                             :: (P.ReadP
                                   [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                                     h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK,
                                        g_X3KMM, h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                          h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                             h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]))}]
GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
  = \ (@ a_X3KMA)
      (@ b_X3KMC)
      (@ c_X3KME)
      (@ d_X3KMG)
      (@ e_X3KMI)
      (@ f_X3KMK)
      (@ g_X3KMM)
      (@ h_X3KMO)
      (@ i_X3KMQ)
      (@ j_X3KMS)
      (@ k_X3KMU)
      (@ l_X3KMW)
      ($dRead_X3KMY :: Read a_X3KMA)
      ($dRead1_X3KN0 :: Read b_X3KMC)
      ($dRead2_X3KN2 :: Read c_X3KME)
      ($dRead3_X3KN4 :: Read d_X3KMG)
      ($dRead4_X3KN6 :: Read e_X3KMI)
      ($dRead5_X3KN8 :: Read f_X3KMK)
      ($dRead6_X3KNa :: Read g_X3KMM)
      ($dRead7_X3KNc :: Read h_X3KMO)
      ($dRead8_X3KNe :: Read i_X3KMQ)
      ($dRead9_X3KNg :: Read j_X3KMS)
      ($dRead10_X3KNi :: Read k_X3KMU)
      ($dRead11_X3KNk :: Read l_X3KMW) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
            h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
        (((((list
               @ (a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                  h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)
               ((GHC.Read.$fRead(,,,,,,,,,,,)1
                   @ a_X3KMA
                   @ b_X3KMC
                   @ c_X3KME
                   @ d_X3KMG
                   @ e_X3KMI
                   @ f_X3KMK
                   @ g_X3KMM
                   @ h_X3KMO
                   @ i_X3KMQ
                   @ j_X3KMS
                   @ k_X3KMU
                   @ l_X3KMW
                   $dRead_X3KMY
                   $dRead1_X3KN0
                   $dRead2_X3KN2
                   $dRead3_X3KN4
                   $dRead4_X3KN6
                   $dRead5_X3KN8
                   $dRead6_X3KNa
                   $dRead7_X3KNc
                   $dRead8_X3KNe
                   $dRead9_X3KNg
                   $dRead10_X3KNi
                   $dRead11_X3KNk)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK,
                                         g_X3KMM, h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU,
                                         l_X3KMW)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KMA, b_X3KMC, c_X3KME,
                                                                    d_X3KMG, e_X3KMI, f_X3KMK,
                                                                    g_X3KMM, h_X3KMO, i_X3KMQ,
                                                                    j_X3KMS, k_X3KMU, l_X3KMW)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                                 h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                                   h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                           h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]>_R
                    :: (ReadPrec
                          [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                            h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                                   h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                         h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]>_R
                  :: (P.ReadP
                        [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                          h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)] :: *)
                     ~R# (forall b.
                          ([(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                             h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
               h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                  h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]))

-- RHS size: {terms: 77, types: 109, coercions: 33, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k, Read l) =>
     Read (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K41)
             (@ b_a3K42)
             (@ c_a3K43)
             (@ d_a3K44)
             (@ e_a3K45)
             (@ f_a3K46)
             (@ g_a3K47)
             (@ h_a3K48)
             (@ i_a3K49)
             (@ j_a3K4a)
             (@ k_a3K4b)
             (@ l_a3K4c)
             (v_X57 :: Read a_a3K41)
             (v1_X59 :: Read b_a3K42)
             (v2_B3 :: Read c_a3K43)
             (v3_B4 :: Read d_a3K44)
             (v4_B5 :: Read e_a3K45)
             (v5_B6 :: Read f_a3K46)
             (v6_B7 :: Read g_a3K47)
             (v7_B8 :: Read h_a3K48)
             (v8_B9 :: Read i_a3K49)
             (v9_Ba :: Read j_a3K4a)
             (v10_Bb :: Read k_a3K4b)
             (v11_Bc :: Read l_a3K4c) ->
       GHC.Read.C:Read TYPE: (a_a3K41, b_a3K42, c_a3K43, d_a3K44, e_a3K45,
                              f_a3K46, g_a3K47, h_a3K48, i_a3K49, j_a3K4a, k_a3K4b, l_a3K4c)
                       GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
                         @ a_a3K41
                         @ b_a3K42
                         @ c_a3K43
                         @ d_a3K44
                         @ e_a3K45
                         @ f_a3K46
                         @ g_a3K47
                         @ h_a3K48
                         @ i_a3K49
                         @ j_a3K4a
                         @ k_a3K4b
                         @ l_a3K4c
                         v_X57
                         v1_X59
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                       GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
                         @ a_a3K41
                         @ b_a3K42
                         @ c_a3K43
                         @ d_a3K44
                         @ e_a3K45
                         @ f_a3K46
                         @ g_a3K47
                         @ h_a3K48
                         @ i_a3K49
                         @ j_a3K4a
                         @ k_a3K4b
                         @ l_a3K4c
                         v_X57
                         v1_X59
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc
                       (GHC.Read.$fRead(,,,,,,,,,,,)1
                          @ a_a3K41
                          @ b_a3K42
                          @ c_a3K43
                          @ d_a3K44
                          @ e_a3K45
                          @ f_a3K46
                          @ g_a3K47
                          @ h_a3K48
                          @ i_a3K49
                          @ j_a3K4a
                          @ k_a3K4b
                          @ l_a3K4c
                          v_X57
                          v1_X59
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7
                          v7_B8
                          v8_B9
                          v9_Ba
                          v10_Bb
                          v11_Bc)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K41, b_a3K42, c_a3K43, d_a3K44, e_a3K45,
                                                f_a3K46, g_a3K47, h_a3K48, i_a3K49, j_a3K4a,
                                                k_a3K4b,
                                                l_a3K4c)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K41, b_a3K42,
                                                                           c_a3K43, d_a3K44,
                                                                           e_a3K45, f_a3K46,
                                                                           g_a3K47, h_a3K48,
                                                                           i_a3K49, j_a3K4a,
                                                                           k_a3K4b, l_a3K4c)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K41, b_a3K42, c_a3K43, d_a3K44, e_a3K45, f_a3K46,
                                        g_a3K47, h_a3K48, i_a3K49, j_a3K4a, k_a3K4b, l_a3K4c)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K41, b_a3K42, c_a3K43, d_a3K44, e_a3K45, f_a3K46,
                                          g_a3K47, h_a3K48, i_a3K49, j_a3K4a, k_a3K4b,
                                          l_a3K4c) :: *))
                       GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
                         @ a_a3K41
                         @ b_a3K42
                         @ c_a3K43
                         @ d_a3K44
                         @ e_a3K45
                         @ f_a3K46
                         @ g_a3K47
                         @ h_a3K48
                         @ i_a3K49
                         @ j_a3K4a
                         @ k_a3K4b
                         @ l_a3K4c
                         v_X57
                         v1_X59
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                         v11_Bc]
GHC.Read.$fRead(,,,,,,,,,,,)
  = \ (@ a_X3KMB)
      (@ b_X3KMD)
      (@ c_X3KMF)
      (@ d_X3KMH)
      (@ e_X3KMJ)
      (@ f_X3KML)
      (@ g_X3KMN)
      (@ h_X3KMP)
      (@ i_X3KMR)
      (@ j_X3KMT)
      (@ k_X3KMV)
      (@ l_X3KMX)
      ($dRead_X3KMZ :: Read a_X3KMB)
      ($dRead1_X3KN1 :: Read b_X3KMD)
      ($dRead2_X3KN3 :: Read c_X3KMF)
      ($dRead3_X3KN5 :: Read d_X3KMH)
      ($dRead4_X3KN7 :: Read e_X3KMJ)
      ($dRead5_X3KN9 :: Read f_X3KML)
      ($dRead6_X3KNb :: Read g_X3KMN)
      ($dRead7_X3KNd :: Read h_X3KMP)
      ($dRead8_X3KNf :: Read i_X3KMR)
      ($dRead9_X3KNh :: Read j_X3KMT)
      ($dRead10_X3KNj :: Read k_X3KMV)
      ($dRead11_X3KNl :: Read l_X3KMX) ->
      GHC.Read.C:Read
        @ (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
           h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
        (GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
           @ a_X3KMB
           @ b_X3KMD
           @ c_X3KMF
           @ d_X3KMH
           @ e_X3KMJ
           @ f_X3KML
           @ g_X3KMN
           @ h_X3KMP
           @ i_X3KMR
           @ j_X3KMT
           @ k_X3KMV
           @ l_X3KMX
           $dRead_X3KMZ
           $dRead1_X3KN1
           $dRead2_X3KN3
           $dRead3_X3KN5
           $dRead4_X3KN7
           $dRead5_X3KN9
           $dRead6_X3KNb
           $dRead7_X3KNd
           $dRead8_X3KNf
           $dRead9_X3KNh
           $dRead10_X3KNj
           $dRead11_X3KNl)
        (GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
           @ a_X3KMB
           @ b_X3KMD
           @ c_X3KMF
           @ d_X3KMH
           @ e_X3KMJ
           @ f_X3KML
           @ g_X3KMN
           @ h_X3KMP
           @ i_X3KMR
           @ j_X3KMT
           @ k_X3KMV
           @ l_X3KMX
           $dRead_X3KMZ
           $dRead1_X3KN1
           $dRead2_X3KN3
           $dRead3_X3KN5
           $dRead4_X3KN7
           $dRead5_X3KN9
           $dRead6_X3KNb
           $dRead7_X3KNd
           $dRead8_X3KNf
           $dRead9_X3KNh
           $dRead10_X3KNj
           $dRead11_X3KNl)
        ((GHC.Read.$fRead(,,,,,,,,,,,)1
            @ a_X3KMB
            @ b_X3KMD
            @ c_X3KMF
            @ d_X3KMH
            @ e_X3KMJ
            @ f_X3KML
            @ g_X3KMN
            @ h_X3KMP
            @ i_X3KMR
            @ j_X3KMT
            @ k_X3KMV
            @ l_X3KMX
            $dRead_X3KMZ
            $dRead1_X3KN1
            $dRead2_X3KN3
            $dRead3_X3KN5
            $dRead4_X3KN7
            $dRead5_X3KN9
            $dRead6_X3KNb
            $dRead7_X3KNd
            $dRead8_X3KNf
            $dRead9_X3KNh
            $dRead10_X3KNj
            $dRead11_X3KNl)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                                  h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV,
                                  l_X3KMX)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH,
                                                             e_X3KMJ, f_X3KML, g_X3KMN, h_X3KMP,
                                                             i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                          h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                            h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX) :: *)))
        (GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
           @ a_X3KMB
           @ b_X3KMD
           @ c_X3KMF
           @ d_X3KMH
           @ e_X3KMJ
           @ f_X3KML
           @ g_X3KMN
           @ h_X3KMP
           @ i_X3KMR
           @ j_X3KMT
           @ k_X3KMV
           @ l_X3KMX
           $dRead_X3KMZ
           $dRead1_X3KN1
           $dRead2_X3KN3
           $dRead3_X3KN5
           $dRead4_X3KN7
           $dRead5_X3KN9
           $dRead6_X3KNb
           $dRead7_X3KNd
           $dRead8_X3KNf
           $dRead9_X3KNh
           $dRead10_X3KNj
           $dRead11_X3KNl)

-- RHS size: {terms: 35, types: 67, coercions: 31, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k) =>
     ReadPrec [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=11,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KOd)
                 (@ b_X3KOf)
                 (@ c_X3KOh)
                 (@ d_X3KOj)
                 (@ e_X3KOl)
                 (@ f_X3KOn)
                 (@ g_X3KOp)
                 (@ h_X3KOr)
                 (@ i_X3KOt)
                 (@ j_X3KOv)
                 (@ k_X3KOx)
                 ($dRead_X3KOz [Occ=Once] :: Read a_X3KOd)
                 ($dRead1_X3KOB [Occ=Once] :: Read b_X3KOf)
                 ($dRead2_X3KOD [Occ=Once] :: Read c_X3KOh)
                 ($dRead3_X3KOF [Occ=Once] :: Read d_X3KOj)
                 ($dRead4_X3KOH [Occ=Once] :: Read e_X3KOl)
                 ($dRead5_X3KOJ [Occ=Once] :: Read f_X3KOn)
                 ($dRead6_X3KOL [Occ=Once] :: Read g_X3KOp)
                 ($dRead7_X3KON [Occ=Once] :: Read h_X3KOr)
                 ($dRead8_X3KOP [Occ=Once] :: Read i_X3KOt)
                 ($dRead9_X3KOR [Occ=Once] :: Read j_X3KOv)
                 ($dRead10_X3KOT [Occ=Once] :: Read k_X3KOx) ->
                 list
                   @ (a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                      h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx)
                   ((GHC.Read.$fRead(,,,,,,,,,,)1
                       @ a_X3KOd
                       @ b_X3KOf
                       @ c_X3KOh
                       @ d_X3KOj
                       @ e_X3KOl
                       @ f_X3KOn
                       @ g_X3KOp
                       @ h_X3KOr
                       @ i_X3KOt
                       @ j_X3KOv
                       @ k_X3KOx
                       $dRead_X3KOz
                       $dRead1_X3KOB
                       $dRead2_X3KOD
                       $dRead3_X3KOF
                       $dRead4_X3KOH
                       $dRead5_X3KOJ
                       $dRead6_X3KOL
                       $dRead7_X3KON
                       $dRead8_X3KOP
                       $dRead9_X3KOR
                       $dRead10_X3KOT)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn,
                                             g_X3KOp, h_X3KOr, i_X3KOt, j_X3KOv,
                                             k_X3KOx)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KOd, b_X3KOf, c_X3KOh,
                                                                        d_X3KOj, e_X3KOl, f_X3KOn,
                                                                        g_X3KOp, h_X3KOr, i_X3KOt,
                                                                        j_X3KOv, k_X3KOx)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                                     h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn,
                                       g_X3KOp, h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx) :: *)))}]
GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
  = \ (@ a_X3KOd)
      (@ b_X3KOf)
      (@ c_X3KOh)
      (@ d_X3KOj)
      (@ e_X3KOl)
      (@ f_X3KOn)
      (@ g_X3KOp)
      (@ h_X3KOr)
      (@ i_X3KOt)
      (@ j_X3KOv)
      (@ k_X3KOx)
      ($dRead_X3KOz :: Read a_X3KOd)
      ($dRead1_X3KOB :: Read b_X3KOf)
      ($dRead2_X3KOD :: Read c_X3KOh)
      ($dRead3_X3KOF :: Read d_X3KOj)
      ($dRead4_X3KOH :: Read e_X3KOl)
      ($dRead5_X3KOJ :: Read f_X3KOn)
      ($dRead6_X3KOL :: Read g_X3KOp)
      ($dRead7_X3KON :: Read h_X3KOr)
      ($dRead8_X3KOP :: Read i_X3KOt)
      ($dRead9_X3KOR :: Read j_X3KOv)
      ($dRead10_X3KOT :: Read k_X3KOx) ->
      list
        @ (a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
           h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx)
        ((GHC.Read.$fRead(,,,,,,,,,,)1
            @ a_X3KOd
            @ b_X3KOf
            @ c_X3KOh
            @ d_X3KOj
            @ e_X3KOl
            @ f_X3KOn
            @ g_X3KOp
            @ h_X3KOr
            @ i_X3KOt
            @ j_X3KOv
            @ k_X3KOx
            $dRead_X3KOz
            $dRead1_X3KOB
            $dRead2_X3KOD
            $dRead3_X3KOF
            $dRead4_X3KOH
            $dRead5_X3KOJ
            $dRead6_X3KOL
            $dRead7_X3KON
            $dRead8_X3KOP
            $dRead9_X3KOR
            $dRead10_X3KOT)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                                  h_X3KOr, i_X3KOt, j_X3KOv,
                                  k_X3KOx)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj,
                                                             e_X3KOl, f_X3KOn, g_X3KOp, h_X3KOr,
                                                             i_X3KOt, j_X3KOv, k_X3KOx)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                          h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                            h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx) :: *)))

-- RHS size: {terms: 38, types: 92, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k) =>
     Int -> ReadS (a, b, c, d, e, f, g, h, i, j, k)
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=12,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KOe)
                 (@ b_X3KOg)
                 (@ c_X3KOi)
                 (@ d_X3KOk)
                 (@ e_X3KOm)
                 (@ f_X3KOo)
                 (@ g_X3KOq)
                 (@ h_X3KOs)
                 (@ i_X3KOu)
                 (@ j_X3KOw)
                 (@ k_X3KOy)
                 ($dRead_X3KOA [Occ=Once] :: Read a_X3KOe)
                 ($dRead1_X3KOC [Occ=Once] :: Read b_X3KOg)
                 ($dRead2_X3KOE [Occ=Once] :: Read c_X3KOi)
                 ($dRead3_X3KOG [Occ=Once] :: Read d_X3KOk)
                 ($dRead4_X3KOI [Occ=Once] :: Read e_X3KOm)
                 ($dRead5_X3KOK [Occ=Once] :: Read f_X3KOo)
                 ($dRead6_X3KOM [Occ=Once] :: Read g_X3KOq)
                 ($dRead7_X3KOO [Occ=Once] :: Read h_X3KOs)
                 ($dRead8_X3KOQ [Occ=Once] :: Read i_X3KOu)
                 ($dRead9_X3KOS [Occ=Once] :: Read j_X3KOw)
                 ($dRead10_X3KOU [Occ=Once] :: Read k_X3KOy)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
                      h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)
                   (GHC.Read.$fRead(,,,,,,,,,,)1
                      @ a_X3KOe
                      @ b_X3KOg
                      @ c_X3KOi
                      @ d_X3KOk
                      @ e_X3KOm
                      @ f_X3KOo
                      @ g_X3KOq
                      @ h_X3KOs
                      @ i_X3KOu
                      @ j_X3KOw
                      @ k_X3KOy
                      $dRead_X3KOA
                      $dRead1_X3KOC
                      $dRead2_X3KOE
                      $dRead3_X3KOG
                      $dRead4_X3KOI
                      $dRead5_X3KOK
                      $dRead6_X3KOM
                      $dRead7_X3KOO
                      $dRead8_X3KOQ
                      $dRead9_X3KOS
                      $dRead10_X3KOU
                      n_a3tmE
                      @ (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
                         h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
                            h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)))}]
GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
  = \ (@ a_X3KOe)
      (@ b_X3KOg)
      (@ c_X3KOi)
      (@ d_X3KOk)
      (@ e_X3KOm)
      (@ f_X3KOo)
      (@ g_X3KOq)
      (@ h_X3KOs)
      (@ i_X3KOu)
      (@ j_X3KOw)
      (@ k_X3KOy)
      ($dRead_X3KOA :: Read a_X3KOe)
      ($dRead1_X3KOC :: Read b_X3KOg)
      ($dRead2_X3KOE :: Read c_X3KOi)
      ($dRead3_X3KOG :: Read d_X3KOk)
      ($dRead4_X3KOI :: Read e_X3KOm)
      ($dRead5_X3KOK :: Read f_X3KOo)
      ($dRead6_X3KOM :: Read g_X3KOq)
      ($dRead7_X3KOO :: Read h_X3KOs)
      ($dRead8_X3KOQ :: Read i_X3KOu)
      ($dRead9_X3KOS :: Read j_X3KOw)
      ($dRead10_X3KOU :: Read k_X3KOy)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
           h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)
        (GHC.Read.$fRead(,,,,,,,,,,)1
           @ a_X3KOe
           @ b_X3KOg
           @ c_X3KOi
           @ d_X3KOk
           @ e_X3KOm
           @ f_X3KOo
           @ g_X3KOq
           @ h_X3KOs
           @ i_X3KOu
           @ j_X3KOw
           @ k_X3KOy
           $dRead_X3KOA
           $dRead1_X3KOC
           $dRead2_X3KOE
           $dRead3_X3KOG
           $dRead4_X3KOI
           $dRead5_X3KOK
           $dRead6_X3KOM
           $dRead7_X3KOO
           $dRead8_X3KOQ
           $dRead9_X3KOS
           $dRead10_X3KOU
           n_a3tmE
           @ (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
              h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
                 h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)))

-- RHS size: {terms: 38, types: 106, coercions: 59, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k) =>
     ReadS [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=11,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KOf)
                 (@ b_X3KOh)
                 (@ c_X3KOj)
                 (@ d_X3KOl)
                 (@ e_X3KOn)
                 (@ f_X3KOp)
                 (@ g_X3KOr)
                 (@ h_X3KOt)
                 (@ i_X3KOv)
                 (@ j_X3KOx)
                 (@ k_X3KOz)
                 ($dRead_X3KOB [Occ=Once] :: Read a_X3KOf)
                 ($dRead1_X3KOD [Occ=Once] :: Read b_X3KOh)
                 ($dRead2_X3KOF [Occ=Once] :: Read c_X3KOj)
                 ($dRead3_X3KOH [Occ=Once] :: Read d_X3KOl)
                 ($dRead4_X3KOJ [Occ=Once] :: Read e_X3KOn)
                 ($dRead5_X3KOL [Occ=Once] :: Read f_X3KOp)
                 ($dRead6_X3KON [Occ=Once] :: Read g_X3KOr)
                 ($dRead7_X3KOP [Occ=Once] :: Read h_X3KOt)
                 ($dRead8_X3KOR [Occ=Once] :: Read i_X3KOv)
                 ($dRead9_X3KOT [Occ=Once] :: Read j_X3KOx)
                 ($dRead10_X3KOV [Occ=Once] :: Read k_X3KOz) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                       h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
                   (((((list
                          @ (a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                             h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)
                          ((GHC.Read.$fRead(,,,,,,,,,,)1
                              @ a_X3KOf
                              @ b_X3KOh
                              @ c_X3KOj
                              @ d_X3KOl
                              @ e_X3KOn
                              @ f_X3KOp
                              @ g_X3KOr
                              @ h_X3KOt
                              @ i_X3KOv
                              @ j_X3KOx
                              @ k_X3KOz
                              $dRead_X3KOB
                              $dRead1_X3KOD
                              $dRead2_X3KOF
                              $dRead3_X3KOH
                              $dRead4_X3KOJ
                              $dRead5_X3KOL
                              $dRead6_X3KON
                              $dRead7_X3KOP
                              $dRead8_X3KOR
                              $dRead9_X3KOT
                              $dRead10_X3KOV)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn,
                                                    f_X3KOp, g_X3KOr, h_X3KOt, i_X3KOv, j_X3KOx,
                                                    k_X3KOz)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KOf, b_X3KOh,
                                                                               c_X3KOj, d_X3KOl,
                                                                               e_X3KOn, f_X3KOp,
                                                                               g_X3KOr, h_X3KOt,
                                                                               i_X3KOv, j_X3KOx,
                                                                               k_X3KOz)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp,
                                            g_X3KOr, h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp,
                                              g_X3KOr, h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                                      h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]>_R
                               :: (ReadPrec
                                     [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp,
                                       g_X3KOr, h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp,
                                              g_X3KOr, h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                                    h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]>_R
                             :: (P.ReadP
                                   [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                                     h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp,
                                        g_X3KOr, h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                          h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                             h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]))}]
GHC.Read.$fRead(,,,,,,,,,,)_$creadList
  = \ (@ a_X3KOf)
      (@ b_X3KOh)
      (@ c_X3KOj)
      (@ d_X3KOl)
      (@ e_X3KOn)
      (@ f_X3KOp)
      (@ g_X3KOr)
      (@ h_X3KOt)
      (@ i_X3KOv)
      (@ j_X3KOx)
      (@ k_X3KOz)
      ($dRead_X3KOB :: Read a_X3KOf)
      ($dRead1_X3KOD :: Read b_X3KOh)
      ($dRead2_X3KOF :: Read c_X3KOj)
      ($dRead3_X3KOH :: Read d_X3KOl)
      ($dRead4_X3KOJ :: Read e_X3KOn)
      ($dRead5_X3KOL :: Read f_X3KOp)
      ($dRead6_X3KON :: Read g_X3KOr)
      ($dRead7_X3KOP :: Read h_X3KOt)
      ($dRead8_X3KOR :: Read i_X3KOv)
      ($dRead9_X3KOT :: Read j_X3KOx)
      ($dRead10_X3KOV :: Read k_X3KOz) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
            h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
        (((((list
               @ (a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                  h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)
               ((GHC.Read.$fRead(,,,,,,,,,,)1
                   @ a_X3KOf
                   @ b_X3KOh
                   @ c_X3KOj
                   @ d_X3KOl
                   @ e_X3KOn
                   @ f_X3KOp
                   @ g_X3KOr
                   @ h_X3KOt
                   @ i_X3KOv
                   @ j_X3KOx
                   @ k_X3KOz
                   $dRead_X3KOB
                   $dRead1_X3KOD
                   $dRead2_X3KOF
                   $dRead3_X3KOH
                   $dRead4_X3KOJ
                   $dRead5_X3KOL
                   $dRead6_X3KON
                   $dRead7_X3KOP
                   $dRead8_X3KOR
                   $dRead9_X3KOT
                   $dRead10_X3KOV)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp,
                                         g_X3KOr, h_X3KOt, i_X3KOv, j_X3KOx,
                                         k_X3KOz)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KOf, b_X3KOh, c_X3KOj,
                                                                    d_X3KOl, e_X3KOn, f_X3KOp,
                                                                    g_X3KOr, h_X3KOt, i_X3KOv,
                                                                    j_X3KOx, k_X3KOz)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                                 h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                                   h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                           h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]>_R
                    :: (ReadPrec
                          [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                            h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                                   h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                         h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]>_R
                  :: (P.ReadP
                        [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                          h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)] :: *)
                     ~R# (forall b.
                          ([(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                             h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
               h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                  h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]))

-- RHS size: {terms: 71, types: 100, coercions: 31, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j, Read k) =>
     Read (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K4p)
             (@ b_a3K4q)
             (@ c_a3K4r)
             (@ d_a3K4s)
             (@ e_a3K4t)
             (@ f_a3K4u)
             (@ g_a3K4v)
             (@ h_a3K4w)
             (@ i_a3K4x)
             (@ j_a3K4y)
             (@ k_a3K4z)
             (v_X5a :: Read a_a3K4p)
             (v1_X5c :: Read b_a3K4q)
             (v2_B3 :: Read c_a3K4r)
             (v3_B4 :: Read d_a3K4s)
             (v4_B5 :: Read e_a3K4t)
             (v5_B6 :: Read f_a3K4u)
             (v6_B7 :: Read g_a3K4v)
             (v7_B8 :: Read h_a3K4w)
             (v8_B9 :: Read i_a3K4x)
             (v9_Ba :: Read j_a3K4y)
             (v10_Bb :: Read k_a3K4z) ->
       GHC.Read.C:Read TYPE: (a_a3K4p, b_a3K4q, c_a3K4r, d_a3K4s, e_a3K4t,
                              f_a3K4u, g_a3K4v, h_a3K4w, i_a3K4x, j_a3K4y, k_a3K4z)
                       GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
                         @ a_a3K4p
                         @ b_a3K4q
                         @ c_a3K4r
                         @ d_a3K4s
                         @ e_a3K4t
                         @ f_a3K4u
                         @ g_a3K4v
                         @ h_a3K4w
                         @ i_a3K4x
                         @ j_a3K4y
                         @ k_a3K4z
                         v_X5a
                         v1_X5c
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                       GHC.Read.$fRead(,,,,,,,,,,)_$creadList
                         @ a_a3K4p
                         @ b_a3K4q
                         @ c_a3K4r
                         @ d_a3K4s
                         @ e_a3K4t
                         @ f_a3K4u
                         @ g_a3K4v
                         @ h_a3K4w
                         @ i_a3K4x
                         @ j_a3K4y
                         @ k_a3K4z
                         v_X5a
                         v1_X5c
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb
                       (GHC.Read.$fRead(,,,,,,,,,,)1
                          @ a_a3K4p
                          @ b_a3K4q
                          @ c_a3K4r
                          @ d_a3K4s
                          @ e_a3K4t
                          @ f_a3K4u
                          @ g_a3K4v
                          @ h_a3K4w
                          @ i_a3K4x
                          @ j_a3K4y
                          @ k_a3K4z
                          v_X5a
                          v1_X5c
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7
                          v7_B8
                          v8_B9
                          v9_Ba
                          v10_Bb)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K4p, b_a3K4q, c_a3K4r, d_a3K4s, e_a3K4t,
                                                f_a3K4u, g_a3K4v, h_a3K4w, i_a3K4x, j_a3K4y,
                                                k_a3K4z)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K4p, b_a3K4q,
                                                                           c_a3K4r, d_a3K4s,
                                                                           e_a3K4t, f_a3K4u,
                                                                           g_a3K4v, h_a3K4w,
                                                                           i_a3K4x, j_a3K4y,
                                                                           k_a3K4z)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K4p, b_a3K4q, c_a3K4r, d_a3K4s, e_a3K4t, f_a3K4u,
                                        g_a3K4v, h_a3K4w, i_a3K4x, j_a3K4y, k_a3K4z)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K4p, b_a3K4q, c_a3K4r, d_a3K4s, e_a3K4t, f_a3K4u,
                                          g_a3K4v, h_a3K4w, i_a3K4x, j_a3K4y, k_a3K4z) :: *))
                       GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
                         @ a_a3K4p
                         @ b_a3K4q
                         @ c_a3K4r
                         @ d_a3K4s
                         @ e_a3K4t
                         @ f_a3K4u
                         @ g_a3K4v
                         @ h_a3K4w
                         @ i_a3K4x
                         @ j_a3K4y
                         @ k_a3K4z
                         v_X5a
                         v1_X5c
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                         v10_Bb]
GHC.Read.$fRead(,,,,,,,,,,)
  = \ (@ a_X3KOg)
      (@ b_X3KOi)
      (@ c_X3KOk)
      (@ d_X3KOm)
      (@ e_X3KOo)
      (@ f_X3KOq)
      (@ g_X3KOs)
      (@ h_X3KOu)
      (@ i_X3KOw)
      (@ j_X3KOy)
      (@ k_X3KOA)
      ($dRead_X3KOC :: Read a_X3KOg)
      ($dRead1_X3KOE :: Read b_X3KOi)
      ($dRead2_X3KOG :: Read c_X3KOk)
      ($dRead3_X3KOI :: Read d_X3KOm)
      ($dRead4_X3KOK :: Read e_X3KOo)
      ($dRead5_X3KOM :: Read f_X3KOq)
      ($dRead6_X3KOO :: Read g_X3KOs)
      ($dRead7_X3KOQ :: Read h_X3KOu)
      ($dRead8_X3KOS :: Read i_X3KOw)
      ($dRead9_X3KOU :: Read j_X3KOy)
      ($dRead10_X3KOW :: Read k_X3KOA) ->
      GHC.Read.C:Read
        @ (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
           h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
        (GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
           @ a_X3KOg
           @ b_X3KOi
           @ c_X3KOk
           @ d_X3KOm
           @ e_X3KOo
           @ f_X3KOq
           @ g_X3KOs
           @ h_X3KOu
           @ i_X3KOw
           @ j_X3KOy
           @ k_X3KOA
           $dRead_X3KOC
           $dRead1_X3KOE
           $dRead2_X3KOG
           $dRead3_X3KOI
           $dRead4_X3KOK
           $dRead5_X3KOM
           $dRead6_X3KOO
           $dRead7_X3KOQ
           $dRead8_X3KOS
           $dRead9_X3KOU
           $dRead10_X3KOW)
        (GHC.Read.$fRead(,,,,,,,,,,)_$creadList
           @ a_X3KOg
           @ b_X3KOi
           @ c_X3KOk
           @ d_X3KOm
           @ e_X3KOo
           @ f_X3KOq
           @ g_X3KOs
           @ h_X3KOu
           @ i_X3KOw
           @ j_X3KOy
           @ k_X3KOA
           $dRead_X3KOC
           $dRead1_X3KOE
           $dRead2_X3KOG
           $dRead3_X3KOI
           $dRead4_X3KOK
           $dRead5_X3KOM
           $dRead6_X3KOO
           $dRead7_X3KOQ
           $dRead8_X3KOS
           $dRead9_X3KOU
           $dRead10_X3KOW)
        ((GHC.Read.$fRead(,,,,,,,,,,)1
            @ a_X3KOg
            @ b_X3KOi
            @ c_X3KOk
            @ d_X3KOm
            @ e_X3KOo
            @ f_X3KOq
            @ g_X3KOs
            @ h_X3KOu
            @ i_X3KOw
            @ j_X3KOy
            @ k_X3KOA
            $dRead_X3KOC
            $dRead1_X3KOE
            $dRead2_X3KOG
            $dRead3_X3KOI
            $dRead4_X3KOK
            $dRead5_X3KOM
            $dRead6_X3KOO
            $dRead7_X3KOQ
            $dRead8_X3KOS
            $dRead9_X3KOU
            $dRead10_X3KOW)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                                  h_X3KOu, i_X3KOw, j_X3KOy,
                                  k_X3KOA)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm,
                                                             e_X3KOo, f_X3KOq, g_X3KOs, h_X3KOu,
                                                             i_X3KOw, j_X3KOy, k_X3KOA)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                          h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                            h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA) :: *)))
        (GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
           @ a_X3KOg
           @ b_X3KOi
           @ c_X3KOk
           @ d_X3KOm
           @ e_X3KOo
           @ f_X3KOq
           @ g_X3KOs
           @ h_X3KOu
           @ i_X3KOw
           @ j_X3KOy
           @ k_X3KOA
           $dRead_X3KOC
           $dRead1_X3KOE
           $dRead2_X3KOG
           $dRead3_X3KOI
           $dRead4_X3KOK
           $dRead5_X3KOM
           $dRead6_X3KOO
           $dRead7_X3KOQ
           $dRead8_X3KOS
           $dRead9_X3KOU
           $dRead10_X3KOW)

-- RHS size: {terms: 32, types: 61, coercions: 29, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j) =>
     ReadPrec [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=10,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KPV)
                 (@ b_X3KPX)
                 (@ c_X3KPZ)
                 (@ d_X3KQ1)
                 (@ e_X3KQ3)
                 (@ f_X3KQ5)
                 (@ g_X3KQ7)
                 (@ h_X3KQ9)
                 (@ i_X3KQb)
                 (@ j_X3KQd)
                 ($dRead_X3KQf [Occ=Once] :: Read a_X3KPV)
                 ($dRead1_X3KQh [Occ=Once] :: Read b_X3KPX)
                 ($dRead2_X3KQj [Occ=Once] :: Read c_X3KPZ)
                 ($dRead3_X3KQl [Occ=Once] :: Read d_X3KQ1)
                 ($dRead4_X3KQn [Occ=Once] :: Read e_X3KQ3)
                 ($dRead5_X3KQp [Occ=Once] :: Read f_X3KQ5)
                 ($dRead6_X3KQr [Occ=Once] :: Read g_X3KQ7)
                 ($dRead7_X3KQt [Occ=Once] :: Read h_X3KQ9)
                 ($dRead8_X3KQv [Occ=Once] :: Read i_X3KQb)
                 ($dRead9_X3KQx [Occ=Once] :: Read j_X3KQd) ->
                 list
                   @ (a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                      h_X3KQ9, i_X3KQb, j_X3KQd)
                   ((GHC.Read.$fRead(,,,,,,,,,)1
                       @ a_X3KPV
                       @ b_X3KPX
                       @ c_X3KPZ
                       @ d_X3KQ1
                       @ e_X3KQ3
                       @ f_X3KQ5
                       @ g_X3KQ7
                       @ h_X3KQ9
                       @ i_X3KQb
                       @ j_X3KQd
                       $dRead_X3KQf
                       $dRead1_X3KQh
                       $dRead2_X3KQj
                       $dRead3_X3KQl
                       $dRead4_X3KQn
                       $dRead5_X3KQp
                       $dRead6_X3KQr
                       $dRead7_X3KQt
                       $dRead8_X3KQv
                       $dRead9_X3KQx)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5,
                                             g_X3KQ7, h_X3KQ9, i_X3KQb,
                                             j_X3KQd)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KPV, b_X3KPX, c_X3KPZ,
                                                                        d_X3KQ1, e_X3KQ3, f_X3KQ5,
                                                                        g_X3KQ7, h_X3KQ9, i_X3KQb,
                                                                        j_X3KQd)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                                     h_X3KQ9, i_X3KQb, j_X3KQd)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5,
                                       g_X3KQ7, h_X3KQ9, i_X3KQb, j_X3KQd) :: *)))}]
GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
  = \ (@ a_X3KPV)
      (@ b_X3KPX)
      (@ c_X3KPZ)
      (@ d_X3KQ1)
      (@ e_X3KQ3)
      (@ f_X3KQ5)
      (@ g_X3KQ7)
      (@ h_X3KQ9)
      (@ i_X3KQb)
      (@ j_X3KQd)
      ($dRead_X3KQf :: Read a_X3KPV)
      ($dRead1_X3KQh :: Read b_X3KPX)
      ($dRead2_X3KQj :: Read c_X3KPZ)
      ($dRead3_X3KQl :: Read d_X3KQ1)
      ($dRead4_X3KQn :: Read e_X3KQ3)
      ($dRead5_X3KQp :: Read f_X3KQ5)
      ($dRead6_X3KQr :: Read g_X3KQ7)
      ($dRead7_X3KQt :: Read h_X3KQ9)
      ($dRead8_X3KQv :: Read i_X3KQb)
      ($dRead9_X3KQx :: Read j_X3KQd) ->
      list
        @ (a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
           h_X3KQ9, i_X3KQb, j_X3KQd)
        ((GHC.Read.$fRead(,,,,,,,,,)1
            @ a_X3KPV
            @ b_X3KPX
            @ c_X3KPZ
            @ d_X3KQ1
            @ e_X3KQ3
            @ f_X3KQ5
            @ g_X3KQ7
            @ h_X3KQ9
            @ i_X3KQb
            @ j_X3KQd
            $dRead_X3KQf
            $dRead1_X3KQh
            $dRead2_X3KQj
            $dRead3_X3KQl
            $dRead4_X3KQn
            $dRead5_X3KQp
            $dRead6_X3KQr
            $dRead7_X3KQt
            $dRead8_X3KQv
            $dRead9_X3KQx)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                                  h_X3KQ9, i_X3KQb,
                                  j_X3KQd)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1,
                                                             e_X3KQ3, f_X3KQ5, g_X3KQ7, h_X3KQ9,
                                                             i_X3KQb, j_X3KQd)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                          h_X3KQ9, i_X3KQb, j_X3KQd)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                            h_X3KQ9, i_X3KQb, j_X3KQd) :: *)))

-- RHS size: {terms: 35, types: 84, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j) =>
     Int -> ReadS (a, b, c, d, e, f, g, h, i, j)
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=11,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KPW)
                 (@ b_X3KPY)
                 (@ c_X3KQ0)
                 (@ d_X3KQ2)
                 (@ e_X3KQ4)
                 (@ f_X3KQ6)
                 (@ g_X3KQ8)
                 (@ h_X3KQa)
                 (@ i_X3KQc)
                 (@ j_X3KQe)
                 ($dRead_X3KQg [Occ=Once] :: Read a_X3KPW)
                 ($dRead1_X3KQi [Occ=Once] :: Read b_X3KPY)
                 ($dRead2_X3KQk [Occ=Once] :: Read c_X3KQ0)
                 ($dRead3_X3KQm [Occ=Once] :: Read d_X3KQ2)
                 ($dRead4_X3KQo [Occ=Once] :: Read e_X3KQ4)
                 ($dRead5_X3KQq [Occ=Once] :: Read f_X3KQ6)
                 ($dRead6_X3KQs [Occ=Once] :: Read g_X3KQ8)
                 ($dRead7_X3KQu [Occ=Once] :: Read h_X3KQa)
                 ($dRead8_X3KQw [Occ=Once] :: Read i_X3KQc)
                 ($dRead9_X3KQy [Occ=Once] :: Read j_X3KQe)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
                      h_X3KQa, i_X3KQc, j_X3KQe)
                   (GHC.Read.$fRead(,,,,,,,,,)1
                      @ a_X3KPW
                      @ b_X3KPY
                      @ c_X3KQ0
                      @ d_X3KQ2
                      @ e_X3KQ4
                      @ f_X3KQ6
                      @ g_X3KQ8
                      @ h_X3KQa
                      @ i_X3KQc
                      @ j_X3KQe
                      $dRead_X3KQg
                      $dRead1_X3KQi
                      $dRead2_X3KQk
                      $dRead3_X3KQm
                      $dRead4_X3KQo
                      $dRead5_X3KQq
                      $dRead6_X3KQs
                      $dRead7_X3KQu
                      $dRead8_X3KQw
                      $dRead9_X3KQy
                      n_a3tmE
                      @ (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
                         h_X3KQa, i_X3KQc, j_X3KQe)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
                            h_X3KQa, i_X3KQc, j_X3KQe)))}]
GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
  = \ (@ a_X3KPW)
      (@ b_X3KPY)
      (@ c_X3KQ0)
      (@ d_X3KQ2)
      (@ e_X3KQ4)
      (@ f_X3KQ6)
      (@ g_X3KQ8)
      (@ h_X3KQa)
      (@ i_X3KQc)
      (@ j_X3KQe)
      ($dRead_X3KQg :: Read a_X3KPW)
      ($dRead1_X3KQi :: Read b_X3KPY)
      ($dRead2_X3KQk :: Read c_X3KQ0)
      ($dRead3_X3KQm :: Read d_X3KQ2)
      ($dRead4_X3KQo :: Read e_X3KQ4)
      ($dRead5_X3KQq :: Read f_X3KQ6)
      ($dRead6_X3KQs :: Read g_X3KQ8)
      ($dRead7_X3KQu :: Read h_X3KQa)
      ($dRead8_X3KQw :: Read i_X3KQc)
      ($dRead9_X3KQy :: Read j_X3KQe)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
           h_X3KQa, i_X3KQc, j_X3KQe)
        (GHC.Read.$fRead(,,,,,,,,,)1
           @ a_X3KPW
           @ b_X3KPY
           @ c_X3KQ0
           @ d_X3KQ2
           @ e_X3KQ4
           @ f_X3KQ6
           @ g_X3KQ8
           @ h_X3KQa
           @ i_X3KQc
           @ j_X3KQe
           $dRead_X3KQg
           $dRead1_X3KQi
           $dRead2_X3KQk
           $dRead3_X3KQm
           $dRead4_X3KQo
           $dRead5_X3KQq
           $dRead6_X3KQs
           $dRead7_X3KQu
           $dRead8_X3KQw
           $dRead9_X3KQy
           n_a3tmE
           @ (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
              h_X3KQa, i_X3KQc, j_X3KQe)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
                 h_X3KQa, i_X3KQc, j_X3KQe)))

-- RHS size: {terms: 35, types: 97, coercions: 55, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j) =>
     ReadS [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=10,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KPX)
                 (@ b_X3KPZ)
                 (@ c_X3KQ1)
                 (@ d_X3KQ3)
                 (@ e_X3KQ5)
                 (@ f_X3KQ7)
                 (@ g_X3KQ9)
                 (@ h_X3KQb)
                 (@ i_X3KQd)
                 (@ j_X3KQf)
                 ($dRead_X3KQh [Occ=Once] :: Read a_X3KPX)
                 ($dRead1_X3KQj [Occ=Once] :: Read b_X3KPZ)
                 ($dRead2_X3KQl [Occ=Once] :: Read c_X3KQ1)
                 ($dRead3_X3KQn [Occ=Once] :: Read d_X3KQ3)
                 ($dRead4_X3KQp [Occ=Once] :: Read e_X3KQ5)
                 ($dRead5_X3KQr [Occ=Once] :: Read f_X3KQ7)
                 ($dRead6_X3KQt [Occ=Once] :: Read g_X3KQ9)
                 ($dRead7_X3KQv [Occ=Once] :: Read h_X3KQb)
                 ($dRead8_X3KQx [Occ=Once] :: Read i_X3KQd)
                 ($dRead9_X3KQz [Occ=Once] :: Read j_X3KQf) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                       h_X3KQb, i_X3KQd, j_X3KQf)]
                   (((((list
                          @ (a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                             h_X3KQb, i_X3KQd, j_X3KQf)
                          ((GHC.Read.$fRead(,,,,,,,,,)1
                              @ a_X3KPX
                              @ b_X3KPZ
                              @ c_X3KQ1
                              @ d_X3KQ3
                              @ e_X3KQ5
                              @ f_X3KQ7
                              @ g_X3KQ9
                              @ h_X3KQb
                              @ i_X3KQd
                              @ j_X3KQf
                              $dRead_X3KQh
                              $dRead1_X3KQj
                              $dRead2_X3KQl
                              $dRead3_X3KQn
                              $dRead4_X3KQp
                              $dRead5_X3KQr
                              $dRead6_X3KQt
                              $dRead7_X3KQv
                              $dRead8_X3KQx
                              $dRead9_X3KQz)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5,
                                                    f_X3KQ7, g_X3KQ9, h_X3KQb, i_X3KQd,
                                                    j_X3KQf)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KPX, b_X3KPZ,
                                                                               c_X3KQ1, d_X3KQ3,
                                                                               e_X3KQ5, f_X3KQ7,
                                                                               g_X3KQ9, h_X3KQb,
                                                                               i_X3KQd, j_X3KQf)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7,
                                            g_X3KQ9, h_X3KQb, i_X3KQd, j_X3KQf)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7,
                                              g_X3KQ9, h_X3KQb, i_X3KQd, j_X3KQf) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                                      h_X3KQb, i_X3KQd, j_X3KQf)]>_R
                               :: (ReadPrec
                                     [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7,
                                       g_X3KQ9, h_X3KQb, i_X3KQd, j_X3KQf)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7,
                                              g_X3KQ9, h_X3KQb, i_X3KQd, j_X3KQf)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                                    h_X3KQb, i_X3KQd, j_X3KQf)]>_R
                             :: (P.ReadP
                                   [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                                     h_X3KQb, i_X3KQd, j_X3KQf)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7,
                                        g_X3KQ9, h_X3KQb, i_X3KQd, j_X3KQf)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                          h_X3KQb, i_X3KQd, j_X3KQf)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                             h_X3KQb, i_X3KQd, j_X3KQf)]))}]
GHC.Read.$fRead(,,,,,,,,,)_$creadList
  = \ (@ a_X3KPX)
      (@ b_X3KPZ)
      (@ c_X3KQ1)
      (@ d_X3KQ3)
      (@ e_X3KQ5)
      (@ f_X3KQ7)
      (@ g_X3KQ9)
      (@ h_X3KQb)
      (@ i_X3KQd)
      (@ j_X3KQf)
      ($dRead_X3KQh :: Read a_X3KPX)
      ($dRead1_X3KQj :: Read b_X3KPZ)
      ($dRead2_X3KQl :: Read c_X3KQ1)
      ($dRead3_X3KQn :: Read d_X3KQ3)
      ($dRead4_X3KQp :: Read e_X3KQ5)
      ($dRead5_X3KQr :: Read f_X3KQ7)
      ($dRead6_X3KQt :: Read g_X3KQ9)
      ($dRead7_X3KQv :: Read h_X3KQb)
      ($dRead8_X3KQx :: Read i_X3KQd)
      ($dRead9_X3KQz :: Read j_X3KQf) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
            h_X3KQb, i_X3KQd, j_X3KQf)]
        (((((list
               @ (a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                  h_X3KQb, i_X3KQd, j_X3KQf)
               ((GHC.Read.$fRead(,,,,,,,,,)1
                   @ a_X3KPX
                   @ b_X3KPZ
                   @ c_X3KQ1
                   @ d_X3KQ3
                   @ e_X3KQ5
                   @ f_X3KQ7
                   @ g_X3KQ9
                   @ h_X3KQb
                   @ i_X3KQd
                   @ j_X3KQf
                   $dRead_X3KQh
                   $dRead1_X3KQj
                   $dRead2_X3KQl
                   $dRead3_X3KQn
                   $dRead4_X3KQp
                   $dRead5_X3KQr
                   $dRead6_X3KQt
                   $dRead7_X3KQv
                   $dRead8_X3KQx
                   $dRead9_X3KQz)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7,
                                         g_X3KQ9, h_X3KQb, i_X3KQd,
                                         j_X3KQf)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KPX, b_X3KPZ, c_X3KQ1,
                                                                    d_X3KQ3, e_X3KQ5, f_X3KQ7,
                                                                    g_X3KQ9, h_X3KQb, i_X3KQd,
                                                                    j_X3KQf)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                                 h_X3KQb, i_X3KQd, j_X3KQf)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                                   h_X3KQb, i_X3KQd, j_X3KQf) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                           h_X3KQb, i_X3KQd, j_X3KQf)]>_R
                    :: (ReadPrec
                          [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                            h_X3KQb, i_X3KQd, j_X3KQf)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                                   h_X3KQb, i_X3KQd, j_X3KQf)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                         h_X3KQb, i_X3KQd, j_X3KQf)]>_R
                  :: (P.ReadP
                        [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                          h_X3KQb, i_X3KQd, j_X3KQf)] :: *)
                     ~R# (forall b.
                          ([(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                             h_X3KQb, i_X3KQd, j_X3KQf)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
               h_X3KQb, i_X3KQd, j_X3KQf)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                  h_X3KQb, i_X3KQd, j_X3KQf)]))

-- RHS size: {terms: 65, types: 91, coercions: 29, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i, Read j) =>
     Read (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K4L)
             (@ b_a3K4M)
             (@ c_a3K4N)
             (@ d_a3K4O)
             (@ e_a3K4P)
             (@ f_a3K4Q)
             (@ g_a3K4R)
             (@ h_a3K4S)
             (@ i_a3K4T)
             (@ j_a3K4U)
             (v_X5d :: Read a_a3K4L)
             (v1_X5f :: Read b_a3K4M)
             (v2_B3 :: Read c_a3K4N)
             (v3_B4 :: Read d_a3K4O)
             (v4_B5 :: Read e_a3K4P)
             (v5_B6 :: Read f_a3K4Q)
             (v6_B7 :: Read g_a3K4R)
             (v7_B8 :: Read h_a3K4S)
             (v8_B9 :: Read i_a3K4T)
             (v9_Ba :: Read j_a3K4U) ->
       GHC.Read.C:Read TYPE: (a_a3K4L, b_a3K4M, c_a3K4N, d_a3K4O, e_a3K4P,
                              f_a3K4Q, g_a3K4R, h_a3K4S, i_a3K4T, j_a3K4U)
                       GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
                         @ a_a3K4L
                         @ b_a3K4M
                         @ c_a3K4N
                         @ d_a3K4O
                         @ e_a3K4P
                         @ f_a3K4Q
                         @ g_a3K4R
                         @ h_a3K4S
                         @ i_a3K4T
                         @ j_a3K4U
                         v_X5d
                         v1_X5f
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                       GHC.Read.$fRead(,,,,,,,,,)_$creadList
                         @ a_a3K4L
                         @ b_a3K4M
                         @ c_a3K4N
                         @ d_a3K4O
                         @ e_a3K4P
                         @ f_a3K4Q
                         @ g_a3K4R
                         @ h_a3K4S
                         @ i_a3K4T
                         @ j_a3K4U
                         v_X5d
                         v1_X5f
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba
                       (GHC.Read.$fRead(,,,,,,,,,)1
                          @ a_a3K4L
                          @ b_a3K4M
                          @ c_a3K4N
                          @ d_a3K4O
                          @ e_a3K4P
                          @ f_a3K4Q
                          @ g_a3K4R
                          @ h_a3K4S
                          @ i_a3K4T
                          @ j_a3K4U
                          v_X5d
                          v1_X5f
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7
                          v7_B8
                          v8_B9
                          v9_Ba)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K4L, b_a3K4M, c_a3K4N, d_a3K4O, e_a3K4P,
                                                f_a3K4Q, g_a3K4R, h_a3K4S, i_a3K4T,
                                                j_a3K4U)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K4L, b_a3K4M,
                                                                           c_a3K4N, d_a3K4O,
                                                                           e_a3K4P, f_a3K4Q,
                                                                           g_a3K4R, h_a3K4S,
                                                                           i_a3K4T, j_a3K4U)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K4L, b_a3K4M, c_a3K4N, d_a3K4O, e_a3K4P, f_a3K4Q,
                                        g_a3K4R, h_a3K4S, i_a3K4T, j_a3K4U)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K4L, b_a3K4M, c_a3K4N, d_a3K4O, e_a3K4P, f_a3K4Q,
                                          g_a3K4R, h_a3K4S, i_a3K4T, j_a3K4U) :: *))
                       GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
                         @ a_a3K4L
                         @ b_a3K4M
                         @ c_a3K4N
                         @ d_a3K4O
                         @ e_a3K4P
                         @ f_a3K4Q
                         @ g_a3K4R
                         @ h_a3K4S
                         @ i_a3K4T
                         @ j_a3K4U
                         v_X5d
                         v1_X5f
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                         v9_Ba]
GHC.Read.$fRead(,,,,,,,,,)
  = \ (@ a_X3KPY)
      (@ b_X3KQ0)
      (@ c_X3KQ2)
      (@ d_X3KQ4)
      (@ e_X3KQ6)
      (@ f_X3KQ8)
      (@ g_X3KQa)
      (@ h_X3KQc)
      (@ i_X3KQe)
      (@ j_X3KQg)
      ($dRead_X3KQi :: Read a_X3KPY)
      ($dRead1_X3KQk :: Read b_X3KQ0)
      ($dRead2_X3KQm :: Read c_X3KQ2)
      ($dRead3_X3KQo :: Read d_X3KQ4)
      ($dRead4_X3KQq :: Read e_X3KQ6)
      ($dRead5_X3KQs :: Read f_X3KQ8)
      ($dRead6_X3KQu :: Read g_X3KQa)
      ($dRead7_X3KQw :: Read h_X3KQc)
      ($dRead8_X3KQy :: Read i_X3KQe)
      ($dRead9_X3KQA :: Read j_X3KQg) ->
      GHC.Read.C:Read
        @ (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
           h_X3KQc, i_X3KQe, j_X3KQg)
        (GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
           @ a_X3KPY
           @ b_X3KQ0
           @ c_X3KQ2
           @ d_X3KQ4
           @ e_X3KQ6
           @ f_X3KQ8
           @ g_X3KQa
           @ h_X3KQc
           @ i_X3KQe
           @ j_X3KQg
           $dRead_X3KQi
           $dRead1_X3KQk
           $dRead2_X3KQm
           $dRead3_X3KQo
           $dRead4_X3KQq
           $dRead5_X3KQs
           $dRead6_X3KQu
           $dRead7_X3KQw
           $dRead8_X3KQy
           $dRead9_X3KQA)
        (GHC.Read.$fRead(,,,,,,,,,)_$creadList
           @ a_X3KPY
           @ b_X3KQ0
           @ c_X3KQ2
           @ d_X3KQ4
           @ e_X3KQ6
           @ f_X3KQ8
           @ g_X3KQa
           @ h_X3KQc
           @ i_X3KQe
           @ j_X3KQg
           $dRead_X3KQi
           $dRead1_X3KQk
           $dRead2_X3KQm
           $dRead3_X3KQo
           $dRead4_X3KQq
           $dRead5_X3KQs
           $dRead6_X3KQu
           $dRead7_X3KQw
           $dRead8_X3KQy
           $dRead9_X3KQA)
        ((GHC.Read.$fRead(,,,,,,,,,)1
            @ a_X3KPY
            @ b_X3KQ0
            @ c_X3KQ2
            @ d_X3KQ4
            @ e_X3KQ6
            @ f_X3KQ8
            @ g_X3KQa
            @ h_X3KQc
            @ i_X3KQe
            @ j_X3KQg
            $dRead_X3KQi
            $dRead1_X3KQk
            $dRead2_X3KQm
            $dRead3_X3KQo
            $dRead4_X3KQq
            $dRead5_X3KQs
            $dRead6_X3KQu
            $dRead7_X3KQw
            $dRead8_X3KQy
            $dRead9_X3KQA)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                                  h_X3KQc, i_X3KQe,
                                  j_X3KQg)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4,
                                                             e_X3KQ6, f_X3KQ8, g_X3KQa, h_X3KQc,
                                                             i_X3KQe, j_X3KQg)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                          h_X3KQc, i_X3KQe, j_X3KQg)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                            h_X3KQc, i_X3KQe, j_X3KQg) :: *)))
        (GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
           @ a_X3KPY
           @ b_X3KQ0
           @ c_X3KQ2
           @ d_X3KQ4
           @ e_X3KQ6
           @ f_X3KQ8
           @ g_X3KQa
           @ h_X3KQc
           @ i_X3KQe
           @ j_X3KQg
           $dRead_X3KQi
           $dRead1_X3KQk
           $dRead2_X3KQm
           $dRead3_X3KQo
           $dRead4_X3KQq
           $dRead5_X3KQs
           $dRead6_X3KQu
           $dRead7_X3KQw
           $dRead8_X3KQy
           $dRead9_X3KQA)

-- RHS size: {terms: 29, types: 55, coercions: 27, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i) =>
     ReadPrec [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KRq)
                 (@ b_X3KRs)
                 (@ c_X3KRu)
                 (@ d_X3KRw)
                 (@ e_X3KRy)
                 (@ f_X3KRA)
                 (@ g_X3KRC)
                 (@ h_X3KRE)
                 (@ i_X3KRG)
                 ($dRead_X3KRI [Occ=Once] :: Read a_X3KRq)
                 ($dRead1_X3KRK [Occ=Once] :: Read b_X3KRs)
                 ($dRead2_X3KRM [Occ=Once] :: Read c_X3KRu)
                 ($dRead3_X3KRO [Occ=Once] :: Read d_X3KRw)
                 ($dRead4_X3KRQ [Occ=Once] :: Read e_X3KRy)
                 ($dRead5_X3KRS [Occ=Once] :: Read f_X3KRA)
                 ($dRead6_X3KRU [Occ=Once] :: Read g_X3KRC)
                 ($dRead7_X3KRW [Occ=Once] :: Read h_X3KRE)
                 ($dRead8_X3KRY [Occ=Once] :: Read i_X3KRG) ->
                 list
                   @ (a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                      h_X3KRE, i_X3KRG)
                   ((GHC.Read.$fRead(,,,,,,,,)1
                       @ a_X3KRq
                       @ b_X3KRs
                       @ c_X3KRu
                       @ d_X3KRw
                       @ e_X3KRy
                       @ f_X3KRA
                       @ g_X3KRC
                       @ h_X3KRE
                       @ i_X3KRG
                       $dRead_X3KRI
                       $dRead1_X3KRK
                       $dRead2_X3KRM
                       $dRead3_X3KRO
                       $dRead4_X3KRQ
                       $dRead5_X3KRS
                       $dRead6_X3KRU
                       $dRead7_X3KRW
                       $dRead8_X3KRY)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA,
                                             g_X3KRC, h_X3KRE,
                                             i_X3KRG)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KRq, b_X3KRs, c_X3KRu,
                                                                        d_X3KRw, e_X3KRy, f_X3KRA,
                                                                        g_X3KRC, h_X3KRE,
                                                                        i_X3KRG)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                                     h_X3KRE, i_X3KRG)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA,
                                       g_X3KRC, h_X3KRE, i_X3KRG) :: *)))}]
GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
  = \ (@ a_X3KRq)
      (@ b_X3KRs)
      (@ c_X3KRu)
      (@ d_X3KRw)
      (@ e_X3KRy)
      (@ f_X3KRA)
      (@ g_X3KRC)
      (@ h_X3KRE)
      (@ i_X3KRG)
      ($dRead_X3KRI :: Read a_X3KRq)
      ($dRead1_X3KRK :: Read b_X3KRs)
      ($dRead2_X3KRM :: Read c_X3KRu)
      ($dRead3_X3KRO :: Read d_X3KRw)
      ($dRead4_X3KRQ :: Read e_X3KRy)
      ($dRead5_X3KRS :: Read f_X3KRA)
      ($dRead6_X3KRU :: Read g_X3KRC)
      ($dRead7_X3KRW :: Read h_X3KRE)
      ($dRead8_X3KRY :: Read i_X3KRG) ->
      list
        @ (a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
           h_X3KRE, i_X3KRG)
        ((GHC.Read.$fRead(,,,,,,,,)1
            @ a_X3KRq
            @ b_X3KRs
            @ c_X3KRu
            @ d_X3KRw
            @ e_X3KRy
            @ f_X3KRA
            @ g_X3KRC
            @ h_X3KRE
            @ i_X3KRG
            $dRead_X3KRI
            $dRead1_X3KRK
            $dRead2_X3KRM
            $dRead3_X3KRO
            $dRead4_X3KRQ
            $dRead5_X3KRS
            $dRead6_X3KRU
            $dRead7_X3KRW
            $dRead8_X3KRY)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                                  h_X3KRE,
                                  i_X3KRG)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw,
                                                             e_X3KRy, f_X3KRA, g_X3KRC, h_X3KRE,
                                                             i_X3KRG)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                          h_X3KRE, i_X3KRG)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                            h_X3KRE, i_X3KRG) :: *)))

-- RHS size: {terms: 32, types: 76, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i) =>
     Int -> ReadS (a, b, c, d, e, f, g, h, i)
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=10,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KRr)
                 (@ b_X3KRt)
                 (@ c_X3KRv)
                 (@ d_X3KRx)
                 (@ e_X3KRz)
                 (@ f_X3KRB)
                 (@ g_X3KRD)
                 (@ h_X3KRF)
                 (@ i_X3KRH)
                 ($dRead_X3KRJ [Occ=Once] :: Read a_X3KRr)
                 ($dRead1_X3KRL [Occ=Once] :: Read b_X3KRt)
                 ($dRead2_X3KRN [Occ=Once] :: Read c_X3KRv)
                 ($dRead3_X3KRP [Occ=Once] :: Read d_X3KRx)
                 ($dRead4_X3KRR [Occ=Once] :: Read e_X3KRz)
                 ($dRead5_X3KRT [Occ=Once] :: Read f_X3KRB)
                 ($dRead6_X3KRV [Occ=Once] :: Read g_X3KRD)
                 ($dRead7_X3KRX [Occ=Once] :: Read h_X3KRF)
                 ($dRead8_X3KRZ [Occ=Once] :: Read i_X3KRH)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
                      h_X3KRF, i_X3KRH)
                   (GHC.Read.$fRead(,,,,,,,,)1
                      @ a_X3KRr
                      @ b_X3KRt
                      @ c_X3KRv
                      @ d_X3KRx
                      @ e_X3KRz
                      @ f_X3KRB
                      @ g_X3KRD
                      @ h_X3KRF
                      @ i_X3KRH
                      $dRead_X3KRJ
                      $dRead1_X3KRL
                      $dRead2_X3KRN
                      $dRead3_X3KRP
                      $dRead4_X3KRR
                      $dRead5_X3KRT
                      $dRead6_X3KRV
                      $dRead7_X3KRX
                      $dRead8_X3KRZ
                      n_a3tmE
                      @ (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
                         h_X3KRF, i_X3KRH)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
                            h_X3KRF, i_X3KRH)))}]
GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
  = \ (@ a_X3KRr)
      (@ b_X3KRt)
      (@ c_X3KRv)
      (@ d_X3KRx)
      (@ e_X3KRz)
      (@ f_X3KRB)
      (@ g_X3KRD)
      (@ h_X3KRF)
      (@ i_X3KRH)
      ($dRead_X3KRJ :: Read a_X3KRr)
      ($dRead1_X3KRL :: Read b_X3KRt)
      ($dRead2_X3KRN :: Read c_X3KRv)
      ($dRead3_X3KRP :: Read d_X3KRx)
      ($dRead4_X3KRR :: Read e_X3KRz)
      ($dRead5_X3KRT :: Read f_X3KRB)
      ($dRead6_X3KRV :: Read g_X3KRD)
      ($dRead7_X3KRX :: Read h_X3KRF)
      ($dRead8_X3KRZ :: Read i_X3KRH)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
           h_X3KRF, i_X3KRH)
        (GHC.Read.$fRead(,,,,,,,,)1
           @ a_X3KRr
           @ b_X3KRt
           @ c_X3KRv
           @ d_X3KRx
           @ e_X3KRz
           @ f_X3KRB
           @ g_X3KRD
           @ h_X3KRF
           @ i_X3KRH
           $dRead_X3KRJ
           $dRead1_X3KRL
           $dRead2_X3KRN
           $dRead3_X3KRP
           $dRead4_X3KRR
           $dRead5_X3KRT
           $dRead6_X3KRV
           $dRead7_X3KRX
           $dRead8_X3KRZ
           n_a3tmE
           @ (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
              h_X3KRF, i_X3KRH)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
                 h_X3KRF, i_X3KRH)))

-- RHS size: {terms: 32, types: 88, coercions: 51, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,)_$creadList
  :: forall a b c d e f g h i.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i) =>
     ReadS [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KRs)
                 (@ b_X3KRu)
                 (@ c_X3KRw)
                 (@ d_X3KRy)
                 (@ e_X3KRA)
                 (@ f_X3KRC)
                 (@ g_X3KRE)
                 (@ h_X3KRG)
                 (@ i_X3KRI)
                 ($dRead_X3KRK [Occ=Once] :: Read a_X3KRs)
                 ($dRead1_X3KRM [Occ=Once] :: Read b_X3KRu)
                 ($dRead2_X3KRO [Occ=Once] :: Read c_X3KRw)
                 ($dRead3_X3KRQ [Occ=Once] :: Read d_X3KRy)
                 ($dRead4_X3KRS [Occ=Once] :: Read e_X3KRA)
                 ($dRead5_X3KRU [Occ=Once] :: Read f_X3KRC)
                 ($dRead6_X3KRW [Occ=Once] :: Read g_X3KRE)
                 ($dRead7_X3KRY [Occ=Once] :: Read h_X3KRG)
                 ($dRead8_X3KS0 [Occ=Once] :: Read i_X3KRI) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                       h_X3KRG, i_X3KRI)]
                   (((((list
                          @ (a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                             h_X3KRG, i_X3KRI)
                          ((GHC.Read.$fRead(,,,,,,,,)1
                              @ a_X3KRs
                              @ b_X3KRu
                              @ c_X3KRw
                              @ d_X3KRy
                              @ e_X3KRA
                              @ f_X3KRC
                              @ g_X3KRE
                              @ h_X3KRG
                              @ i_X3KRI
                              $dRead_X3KRK
                              $dRead1_X3KRM
                              $dRead2_X3KRO
                              $dRead3_X3KRQ
                              $dRead4_X3KRS
                              $dRead5_X3KRU
                              $dRead6_X3KRW
                              $dRead7_X3KRY
                              $dRead8_X3KS0)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA,
                                                    f_X3KRC, g_X3KRE, h_X3KRG,
                                                    i_X3KRI)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KRs, b_X3KRu,
                                                                               c_X3KRw, d_X3KRy,
                                                                               e_X3KRA, f_X3KRC,
                                                                               g_X3KRE, h_X3KRG,
                                                                               i_X3KRI)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC,
                                            g_X3KRE, h_X3KRG, i_X3KRI)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC,
                                              g_X3KRE, h_X3KRG, i_X3KRI) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                                      h_X3KRG, i_X3KRI)]>_R
                               :: (ReadPrec
                                     [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC,
                                       g_X3KRE, h_X3KRG, i_X3KRI)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC,
                                              g_X3KRE, h_X3KRG, i_X3KRI)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                                    h_X3KRG, i_X3KRI)]>_R
                             :: (P.ReadP
                                   [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                                     h_X3KRG, i_X3KRI)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC,
                                        g_X3KRE, h_X3KRG, i_X3KRI)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                          h_X3KRG, i_X3KRI)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                             h_X3KRG, i_X3KRI)]))}]
GHC.Read.$fRead(,,,,,,,,)_$creadList
  = \ (@ a_X3KRs)
      (@ b_X3KRu)
      (@ c_X3KRw)
      (@ d_X3KRy)
      (@ e_X3KRA)
      (@ f_X3KRC)
      (@ g_X3KRE)
      (@ h_X3KRG)
      (@ i_X3KRI)
      ($dRead_X3KRK :: Read a_X3KRs)
      ($dRead1_X3KRM :: Read b_X3KRu)
      ($dRead2_X3KRO :: Read c_X3KRw)
      ($dRead3_X3KRQ :: Read d_X3KRy)
      ($dRead4_X3KRS :: Read e_X3KRA)
      ($dRead5_X3KRU :: Read f_X3KRC)
      ($dRead6_X3KRW :: Read g_X3KRE)
      ($dRead7_X3KRY :: Read h_X3KRG)
      ($dRead8_X3KS0 :: Read i_X3KRI) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
            h_X3KRG, i_X3KRI)]
        (((((list
               @ (a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                  h_X3KRG, i_X3KRI)
               ((GHC.Read.$fRead(,,,,,,,,)1
                   @ a_X3KRs
                   @ b_X3KRu
                   @ c_X3KRw
                   @ d_X3KRy
                   @ e_X3KRA
                   @ f_X3KRC
                   @ g_X3KRE
                   @ h_X3KRG
                   @ i_X3KRI
                   $dRead_X3KRK
                   $dRead1_X3KRM
                   $dRead2_X3KRO
                   $dRead3_X3KRQ
                   $dRead4_X3KRS
                   $dRead5_X3KRU
                   $dRead6_X3KRW
                   $dRead7_X3KRY
                   $dRead8_X3KS0)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC,
                                         g_X3KRE, h_X3KRG,
                                         i_X3KRI)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KRs, b_X3KRu, c_X3KRw,
                                                                    d_X3KRy, e_X3KRA, f_X3KRC,
                                                                    g_X3KRE, h_X3KRG, i_X3KRI)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                                 h_X3KRG, i_X3KRI)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                                   h_X3KRG, i_X3KRI) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                           h_X3KRG, i_X3KRI)]>_R
                    :: (ReadPrec
                          [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                            h_X3KRG, i_X3KRI)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                                   h_X3KRG, i_X3KRI)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                         h_X3KRG, i_X3KRI)]>_R
                  :: (P.ReadP
                        [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                          h_X3KRG, i_X3KRI)] :: *)
                     ~R# (forall b.
                          ([(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                             h_X3KRG, i_X3KRI)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
               h_X3KRG, i_X3KRI)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                  h_X3KRG, i_X3KRI)]))

-- RHS size: {terms: 59, types: 82, coercions: 27, joins: 0/0}
GHC.Read.$fRead(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h,
      Read i) =>
     Read (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K55)
             (@ b_a3K56)
             (@ c_a3K57)
             (@ d_a3K58)
             (@ e_a3K59)
             (@ f_a3K5a)
             (@ g_a3K5b)
             (@ h_a3K5c)
             (@ i_a3K5d)
             (v_X5g :: Read a_a3K55)
             (v1_X5i :: Read b_a3K56)
             (v2_B3 :: Read c_a3K57)
             (v3_B4 :: Read d_a3K58)
             (v4_B5 :: Read e_a3K59)
             (v5_B6 :: Read f_a3K5a)
             (v6_B7 :: Read g_a3K5b)
             (v7_B8 :: Read h_a3K5c)
             (v8_B9 :: Read i_a3K5d) ->
       GHC.Read.C:Read TYPE: (a_a3K55, b_a3K56, c_a3K57, d_a3K58, e_a3K59,
                              f_a3K5a, g_a3K5b, h_a3K5c, i_a3K5d)
                       GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
                         @ a_a3K55
                         @ b_a3K56
                         @ c_a3K57
                         @ d_a3K58
                         @ e_a3K59
                         @ f_a3K5a
                         @ g_a3K5b
                         @ h_a3K5c
                         @ i_a3K5d
                         v_X5g
                         v1_X5i
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                       GHC.Read.$fRead(,,,,,,,,)_$creadList
                         @ a_a3K55
                         @ b_a3K56
                         @ c_a3K57
                         @ d_a3K58
                         @ e_a3K59
                         @ f_a3K5a
                         @ g_a3K5b
                         @ h_a3K5c
                         @ i_a3K5d
                         v_X5g
                         v1_X5i
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9
                       (GHC.Read.$fRead(,,,,,,,,)1
                          @ a_a3K55
                          @ b_a3K56
                          @ c_a3K57
                          @ d_a3K58
                          @ e_a3K59
                          @ f_a3K5a
                          @ g_a3K5b
                          @ h_a3K5c
                          @ i_a3K5d
                          v_X5g
                          v1_X5i
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7
                          v7_B8
                          v8_B9)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K55, b_a3K56, c_a3K57, d_a3K58, e_a3K59,
                                                f_a3K5a, g_a3K5b, h_a3K5c,
                                                i_a3K5d)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K55, b_a3K56,
                                                                           c_a3K57, d_a3K58,
                                                                           e_a3K59, f_a3K5a,
                                                                           g_a3K5b, h_a3K5c,
                                                                           i_a3K5d)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K55, b_a3K56, c_a3K57, d_a3K58, e_a3K59, f_a3K5a,
                                        g_a3K5b, h_a3K5c, i_a3K5d)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K55, b_a3K56, c_a3K57, d_a3K58, e_a3K59, f_a3K5a,
                                          g_a3K5b, h_a3K5c, i_a3K5d) :: *))
                       GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
                         @ a_a3K55
                         @ b_a3K56
                         @ c_a3K57
                         @ d_a3K58
                         @ e_a3K59
                         @ f_a3K5a
                         @ g_a3K5b
                         @ h_a3K5c
                         @ i_a3K5d
                         v_X5g
                         v1_X5i
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                         v8_B9]
GHC.Read.$fRead(,,,,,,,,)
  = \ (@ a_X3KRt)
      (@ b_X3KRv)
      (@ c_X3KRx)
      (@ d_X3KRz)
      (@ e_X3KRB)
      (@ f_X3KRD)
      (@ g_X3KRF)
      (@ h_X3KRH)
      (@ i_X3KRJ)
      ($dRead_X3KRL :: Read a_X3KRt)
      ($dRead1_X3KRN :: Read b_X3KRv)
      ($dRead2_X3KRP :: Read c_X3KRx)
      ($dRead3_X3KRR :: Read d_X3KRz)
      ($dRead4_X3KRT :: Read e_X3KRB)
      ($dRead5_X3KRV :: Read f_X3KRD)
      ($dRead6_X3KRX :: Read g_X3KRF)
      ($dRead7_X3KRZ :: Read h_X3KRH)
      ($dRead8_X3KS1 :: Read i_X3KRJ) ->
      GHC.Read.C:Read
        @ (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
           h_X3KRH, i_X3KRJ)
        (GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
           @ a_X3KRt
           @ b_X3KRv
           @ c_X3KRx
           @ d_X3KRz
           @ e_X3KRB
           @ f_X3KRD
           @ g_X3KRF
           @ h_X3KRH
           @ i_X3KRJ
           $dRead_X3KRL
           $dRead1_X3KRN
           $dRead2_X3KRP
           $dRead3_X3KRR
           $dRead4_X3KRT
           $dRead5_X3KRV
           $dRead6_X3KRX
           $dRead7_X3KRZ
           $dRead8_X3KS1)
        (GHC.Read.$fRead(,,,,,,,,)_$creadList
           @ a_X3KRt
           @ b_X3KRv
           @ c_X3KRx
           @ d_X3KRz
           @ e_X3KRB
           @ f_X3KRD
           @ g_X3KRF
           @ h_X3KRH
           @ i_X3KRJ
           $dRead_X3KRL
           $dRead1_X3KRN
           $dRead2_X3KRP
           $dRead3_X3KRR
           $dRead4_X3KRT
           $dRead5_X3KRV
           $dRead6_X3KRX
           $dRead7_X3KRZ
           $dRead8_X3KS1)
        ((GHC.Read.$fRead(,,,,,,,,)1
            @ a_X3KRt
            @ b_X3KRv
            @ c_X3KRx
            @ d_X3KRz
            @ e_X3KRB
            @ f_X3KRD
            @ g_X3KRF
            @ h_X3KRH
            @ i_X3KRJ
            $dRead_X3KRL
            $dRead1_X3KRN
            $dRead2_X3KRP
            $dRead3_X3KRR
            $dRead4_X3KRT
            $dRead5_X3KRV
            $dRead6_X3KRX
            $dRead7_X3KRZ
            $dRead8_X3KS1)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                                  h_X3KRH,
                                  i_X3KRJ)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz,
                                                             e_X3KRB, f_X3KRD, g_X3KRF, h_X3KRH,
                                                             i_X3KRJ)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                          h_X3KRH, i_X3KRJ)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                            h_X3KRH, i_X3KRJ) :: *)))
        (GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
           @ a_X3KRt
           @ b_X3KRv
           @ c_X3KRx
           @ d_X3KRz
           @ e_X3KRB
           @ f_X3KRD
           @ g_X3KRF
           @ h_X3KRH
           @ i_X3KRJ
           $dRead_X3KRL
           $dRead1_X3KRN
           $dRead2_X3KRP
           $dRead3_X3KRR
           $dRead4_X3KRT
           $dRead5_X3KRV
           $dRead6_X3KRX
           $dRead7_X3KRZ
           $dRead8_X3KS1)

-- RHS size: {terms: 26, types: 49, coercions: 25, joins: 0/0}
GHC.Read.$fRead(,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h) =>
     ReadPrec [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=8,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KSQ)
                 (@ b_X3KSS)
                 (@ c_X3KSU)
                 (@ d_X3KSW)
                 (@ e_X3KSY)
                 (@ f_X3KT0)
                 (@ g_X3KT2)
                 (@ h_X3KT4)
                 ($dRead_X3KT6 [Occ=Once] :: Read a_X3KSQ)
                 ($dRead1_X3KT8 [Occ=Once] :: Read b_X3KSS)
                 ($dRead2_X3KTa [Occ=Once] :: Read c_X3KSU)
                 ($dRead3_X3KTc [Occ=Once] :: Read d_X3KSW)
                 ($dRead4_X3KTe [Occ=Once] :: Read e_X3KSY)
                 ($dRead5_X3KTg [Occ=Once] :: Read f_X3KT0)
                 ($dRead6_X3KTi [Occ=Once] :: Read g_X3KT2)
                 ($dRead7_X3KTk [Occ=Once] :: Read h_X3KT4) ->
                 list
                   @ (a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                      h_X3KT4)
                   ((GHC.Read.$fRead(,,,,,,,)1
                       @ a_X3KSQ
                       @ b_X3KSS
                       @ c_X3KSU
                       @ d_X3KSW
                       @ e_X3KSY
                       @ f_X3KT0
                       @ g_X3KT2
                       @ h_X3KT4
                       $dRead_X3KT6
                       $dRead1_X3KT8
                       $dRead2_X3KTa
                       $dRead3_X3KTc
                       $dRead4_X3KTe
                       $dRead5_X3KTg
                       $dRead6_X3KTi
                       $dRead7_X3KTk)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0,
                                             g_X3KT2,
                                             h_X3KT4)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KSQ, b_X3KSS, c_X3KSU,
                                                                        d_X3KSW, e_X3KSY, f_X3KT0,
                                                                        g_X3KT2, h_X3KT4)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                                     h_X3KT4)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0,
                                       g_X3KT2, h_X3KT4) :: *)))}]
GHC.Read.$fRead(,,,,,,,)_$creadListPrec
  = \ (@ a_X3KSQ)
      (@ b_X3KSS)
      (@ c_X3KSU)
      (@ d_X3KSW)
      (@ e_X3KSY)
      (@ f_X3KT0)
      (@ g_X3KT2)
      (@ h_X3KT4)
      ($dRead_X3KT6 :: Read a_X3KSQ)
      ($dRead1_X3KT8 :: Read b_X3KSS)
      ($dRead2_X3KTa :: Read c_X3KSU)
      ($dRead3_X3KTc :: Read d_X3KSW)
      ($dRead4_X3KTe :: Read e_X3KSY)
      ($dRead5_X3KTg :: Read f_X3KT0)
      ($dRead6_X3KTi :: Read g_X3KT2)
      ($dRead7_X3KTk :: Read h_X3KT4) ->
      list
        @ (a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
           h_X3KT4)
        ((GHC.Read.$fRead(,,,,,,,)1
            @ a_X3KSQ
            @ b_X3KSS
            @ c_X3KSU
            @ d_X3KSW
            @ e_X3KSY
            @ f_X3KT0
            @ g_X3KT2
            @ h_X3KT4
            $dRead_X3KT6
            $dRead1_X3KT8
            $dRead2_X3KTa
            $dRead3_X3KTc
            $dRead4_X3KTe
            $dRead5_X3KTg
            $dRead6_X3KTi
            $dRead7_X3KTk)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                                  h_X3KT4)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW,
                                                             e_X3KSY, f_X3KT0, g_X3KT2, h_X3KT4)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                          h_X3KT4)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                            h_X3KT4) :: *)))

-- RHS size: {terms: 29, types: 68, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h) =>
     Int -> ReadS (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=9,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KSR)
                 (@ b_X3KST)
                 (@ c_X3KSV)
                 (@ d_X3KSX)
                 (@ e_X3KSZ)
                 (@ f_X3KT1)
                 (@ g_X3KT3)
                 (@ h_X3KT5)
                 ($dRead_X3KT7 [Occ=Once] :: Read a_X3KSR)
                 ($dRead1_X3KT9 [Occ=Once] :: Read b_X3KST)
                 ($dRead2_X3KTb [Occ=Once] :: Read c_X3KSV)
                 ($dRead3_X3KTd [Occ=Once] :: Read d_X3KSX)
                 ($dRead4_X3KTf [Occ=Once] :: Read e_X3KSZ)
                 ($dRead5_X3KTh [Occ=Once] :: Read f_X3KT1)
                 ($dRead6_X3KTj [Occ=Once] :: Read g_X3KT3)
                 ($dRead7_X3KTl [Occ=Once] :: Read h_X3KT5)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
                      h_X3KT5)
                   (GHC.Read.$fRead(,,,,,,,)1
                      @ a_X3KSR
                      @ b_X3KST
                      @ c_X3KSV
                      @ d_X3KSX
                      @ e_X3KSZ
                      @ f_X3KT1
                      @ g_X3KT3
                      @ h_X3KT5
                      $dRead_X3KT7
                      $dRead1_X3KT9
                      $dRead2_X3KTb
                      $dRead3_X3KTd
                      $dRead4_X3KTf
                      $dRead5_X3KTh
                      $dRead6_X3KTj
                      $dRead7_X3KTl
                      n_a3tmE
                      @ (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
                         h_X3KT5)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
                            h_X3KT5)))}]
GHC.Read.$fRead(,,,,,,,)_$creadsPrec
  = \ (@ a_X3KSR)
      (@ b_X3KST)
      (@ c_X3KSV)
      (@ d_X3KSX)
      (@ e_X3KSZ)
      (@ f_X3KT1)
      (@ g_X3KT3)
      (@ h_X3KT5)
      ($dRead_X3KT7 :: Read a_X3KSR)
      ($dRead1_X3KT9 :: Read b_X3KST)
      ($dRead2_X3KTb :: Read c_X3KSV)
      ($dRead3_X3KTd :: Read d_X3KSX)
      ($dRead4_X3KTf :: Read e_X3KSZ)
      ($dRead5_X3KTh :: Read f_X3KT1)
      ($dRead6_X3KTj :: Read g_X3KT3)
      ($dRead7_X3KTl :: Read h_X3KT5)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
           h_X3KT5)
        (GHC.Read.$fRead(,,,,,,,)1
           @ a_X3KSR
           @ b_X3KST
           @ c_X3KSV
           @ d_X3KSX
           @ e_X3KSZ
           @ f_X3KT1
           @ g_X3KT3
           @ h_X3KT5
           $dRead_X3KT7
           $dRead1_X3KT9
           $dRead2_X3KTb
           $dRead3_X3KTd
           $dRead4_X3KTf
           $dRead5_X3KTh
           $dRead6_X3KTj
           $dRead7_X3KTl
           n_a3tmE
           @ (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
              h_X3KT5)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
                 h_X3KT5)))

-- RHS size: {terms: 29, types: 79, coercions: 47, joins: 0/0}
GHC.Read.$fRead(,,,,,,,)_$creadList
  :: forall a b c d e f g h.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h) =>
     ReadS [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=8,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KSS)
                 (@ b_X3KSU)
                 (@ c_X3KSW)
                 (@ d_X3KSY)
                 (@ e_X3KT0)
                 (@ f_X3KT2)
                 (@ g_X3KT4)
                 (@ h_X3KT6)
                 ($dRead_X3KT8 [Occ=Once] :: Read a_X3KSS)
                 ($dRead1_X3KTa [Occ=Once] :: Read b_X3KSU)
                 ($dRead2_X3KTc [Occ=Once] :: Read c_X3KSW)
                 ($dRead3_X3KTe [Occ=Once] :: Read d_X3KSY)
                 ($dRead4_X3KTg [Occ=Once] :: Read e_X3KT0)
                 ($dRead5_X3KTi [Occ=Once] :: Read f_X3KT2)
                 ($dRead6_X3KTk [Occ=Once] :: Read g_X3KT4)
                 ($dRead7_X3KTm [Occ=Once] :: Read h_X3KT6) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                       h_X3KT6)]
                   (((((list
                          @ (a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                             h_X3KT6)
                          ((GHC.Read.$fRead(,,,,,,,)1
                              @ a_X3KSS
                              @ b_X3KSU
                              @ c_X3KSW
                              @ d_X3KSY
                              @ e_X3KT0
                              @ f_X3KT2
                              @ g_X3KT4
                              @ h_X3KT6
                              $dRead_X3KT8
                              $dRead1_X3KTa
                              $dRead2_X3KTc
                              $dRead3_X3KTe
                              $dRead4_X3KTg
                              $dRead5_X3KTi
                              $dRead6_X3KTk
                              $dRead7_X3KTm)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0,
                                                    f_X3KT2, g_X3KT4,
                                                    h_X3KT6)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KSS, b_X3KSU,
                                                                               c_X3KSW, d_X3KSY,
                                                                               e_X3KT0, f_X3KT2,
                                                                               g_X3KT4, h_X3KT6)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2,
                                            g_X3KT4, h_X3KT6)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2,
                                              g_X3KT4, h_X3KT6) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                                      h_X3KT6)]>_R
                               :: (ReadPrec
                                     [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2,
                                       g_X3KT4, h_X3KT6)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2,
                                              g_X3KT4, h_X3KT6)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                                    h_X3KT6)]>_R
                             :: (P.ReadP
                                   [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                                     h_X3KT6)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2,
                                        g_X3KT4, h_X3KT6)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                          h_X3KT6)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                             h_X3KT6)]))}]
GHC.Read.$fRead(,,,,,,,)_$creadList
  = \ (@ a_X3KSS)
      (@ b_X3KSU)
      (@ c_X3KSW)
      (@ d_X3KSY)
      (@ e_X3KT0)
      (@ f_X3KT2)
      (@ g_X3KT4)
      (@ h_X3KT6)
      ($dRead_X3KT8 :: Read a_X3KSS)
      ($dRead1_X3KTa :: Read b_X3KSU)
      ($dRead2_X3KTc :: Read c_X3KSW)
      ($dRead3_X3KTe :: Read d_X3KSY)
      ($dRead4_X3KTg :: Read e_X3KT0)
      ($dRead5_X3KTi :: Read f_X3KT2)
      ($dRead6_X3KTk :: Read g_X3KT4)
      ($dRead7_X3KTm :: Read h_X3KT6) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
            h_X3KT6)]
        (((((list
               @ (a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                  h_X3KT6)
               ((GHC.Read.$fRead(,,,,,,,)1
                   @ a_X3KSS
                   @ b_X3KSU
                   @ c_X3KSW
                   @ d_X3KSY
                   @ e_X3KT0
                   @ f_X3KT2
                   @ g_X3KT4
                   @ h_X3KT6
                   $dRead_X3KT8
                   $dRead1_X3KTa
                   $dRead2_X3KTc
                   $dRead3_X3KTe
                   $dRead4_X3KTg
                   $dRead5_X3KTi
                   $dRead6_X3KTk
                   $dRead7_X3KTm)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2,
                                         g_X3KT4,
                                         h_X3KT6)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KSS, b_X3KSU, c_X3KSW,
                                                                    d_X3KSY, e_X3KT0, f_X3KT2,
                                                                    g_X3KT4, h_X3KT6)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                                 h_X3KT6)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                                   h_X3KT6) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                           h_X3KT6)]>_R
                    :: (ReadPrec
                          [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                            h_X3KT6)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                                   h_X3KT6)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                         h_X3KT6)]>_R
                  :: (P.ReadP
                        [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                          h_X3KT6)] :: *)
                     ~R# (forall b.
                          ([(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                             h_X3KT6)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
               h_X3KT6)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                  h_X3KT6)]))

-- RHS size: {terms: 53, types: 73, coercions: 25, joins: 0/0}
GHC.Read.$fRead(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g, Read h) =>
     Read (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K5n)
             (@ b_a3K5o)
             (@ c_a3K5p)
             (@ d_a3K5q)
             (@ e_a3K5r)
             (@ f_a3K5s)
             (@ g_a3K5t)
             (@ h_a3K5u)
             (v_X5j :: Read a_a3K5n)
             (v1_X5l :: Read b_a3K5o)
             (v2_B3 :: Read c_a3K5p)
             (v3_B4 :: Read d_a3K5q)
             (v4_B5 :: Read e_a3K5r)
             (v5_B6 :: Read f_a3K5s)
             (v6_B7 :: Read g_a3K5t)
             (v7_B8 :: Read h_a3K5u) ->
       GHC.Read.C:Read TYPE: (a_a3K5n, b_a3K5o, c_a3K5p, d_a3K5q, e_a3K5r,
                              f_a3K5s, g_a3K5t, h_a3K5u)
                       GHC.Read.$fRead(,,,,,,,)_$creadsPrec
                         @ a_a3K5n
                         @ b_a3K5o
                         @ c_a3K5p
                         @ d_a3K5q
                         @ e_a3K5r
                         @ f_a3K5s
                         @ g_a3K5t
                         @ h_a3K5u
                         v_X5j
                         v1_X5l
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                       GHC.Read.$fRead(,,,,,,,)_$creadList
                         @ a_a3K5n
                         @ b_a3K5o
                         @ c_a3K5p
                         @ d_a3K5q
                         @ e_a3K5r
                         @ f_a3K5s
                         @ g_a3K5t
                         @ h_a3K5u
                         v_X5j
                         v1_X5l
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8
                       (GHC.Read.$fRead(,,,,,,,)1
                          @ a_a3K5n
                          @ b_a3K5o
                          @ c_a3K5p
                          @ d_a3K5q
                          @ e_a3K5r
                          @ f_a3K5s
                          @ g_a3K5t
                          @ h_a3K5u
                          v_X5j
                          v1_X5l
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7
                          v7_B8)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K5n, b_a3K5o, c_a3K5p, d_a3K5q, e_a3K5r,
                                                f_a3K5s, g_a3K5t,
                                                h_a3K5u)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K5n, b_a3K5o,
                                                                           c_a3K5p, d_a3K5q,
                                                                           e_a3K5r, f_a3K5s,
                                                                           g_a3K5t, h_a3K5u)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K5n, b_a3K5o, c_a3K5p, d_a3K5q, e_a3K5r, f_a3K5s,
                                        g_a3K5t, h_a3K5u)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K5n, b_a3K5o, c_a3K5p, d_a3K5q, e_a3K5r, f_a3K5s,
                                          g_a3K5t, h_a3K5u) :: *))
                       GHC.Read.$fRead(,,,,,,,)_$creadListPrec
                         @ a_a3K5n
                         @ b_a3K5o
                         @ c_a3K5p
                         @ d_a3K5q
                         @ e_a3K5r
                         @ f_a3K5s
                         @ g_a3K5t
                         @ h_a3K5u
                         v_X5j
                         v1_X5l
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                         v7_B8]
GHC.Read.$fRead(,,,,,,,)
  = \ (@ a_X3KST)
      (@ b_X3KSV)
      (@ c_X3KSX)
      (@ d_X3KSZ)
      (@ e_X3KT1)
      (@ f_X3KT3)
      (@ g_X3KT5)
      (@ h_X3KT7)
      ($dRead_X3KT9 :: Read a_X3KST)
      ($dRead1_X3KTb :: Read b_X3KSV)
      ($dRead2_X3KTd :: Read c_X3KSX)
      ($dRead3_X3KTf :: Read d_X3KSZ)
      ($dRead4_X3KTh :: Read e_X3KT1)
      ($dRead5_X3KTj :: Read f_X3KT3)
      ($dRead6_X3KTl :: Read g_X3KT5)
      ($dRead7_X3KTn :: Read h_X3KT7) ->
      GHC.Read.C:Read
        @ (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
           h_X3KT7)
        (GHC.Read.$fRead(,,,,,,,)_$creadsPrec
           @ a_X3KST
           @ b_X3KSV
           @ c_X3KSX
           @ d_X3KSZ
           @ e_X3KT1
           @ f_X3KT3
           @ g_X3KT5
           @ h_X3KT7
           $dRead_X3KT9
           $dRead1_X3KTb
           $dRead2_X3KTd
           $dRead3_X3KTf
           $dRead4_X3KTh
           $dRead5_X3KTj
           $dRead6_X3KTl
           $dRead7_X3KTn)
        (GHC.Read.$fRead(,,,,,,,)_$creadList
           @ a_X3KST
           @ b_X3KSV
           @ c_X3KSX
           @ d_X3KSZ
           @ e_X3KT1
           @ f_X3KT3
           @ g_X3KT5
           @ h_X3KT7
           $dRead_X3KT9
           $dRead1_X3KTb
           $dRead2_X3KTd
           $dRead3_X3KTf
           $dRead4_X3KTh
           $dRead5_X3KTj
           $dRead6_X3KTl
           $dRead7_X3KTn)
        ((GHC.Read.$fRead(,,,,,,,)1
            @ a_X3KST
            @ b_X3KSV
            @ c_X3KSX
            @ d_X3KSZ
            @ e_X3KT1
            @ f_X3KT3
            @ g_X3KT5
            @ h_X3KT7
            $dRead_X3KT9
            $dRead1_X3KTb
            $dRead2_X3KTd
            $dRead3_X3KTf
            $dRead4_X3KTh
            $dRead5_X3KTj
            $dRead6_X3KTl
            $dRead7_X3KTn)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                                  h_X3KT7)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ,
                                                             e_X3KT1, f_X3KT3, g_X3KT5, h_X3KT7)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                          h_X3KT7)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                            h_X3KT7) :: *)))
        (GHC.Read.$fRead(,,,,,,,)_$creadListPrec
           @ a_X3KST
           @ b_X3KSV
           @ c_X3KSX
           @ d_X3KSZ
           @ e_X3KT1
           @ f_X3KT3
           @ g_X3KT5
           @ h_X3KT7
           $dRead_X3KT9
           $dRead1_X3KTb
           $dRead2_X3KTd
           $dRead3_X3KTf
           $dRead4_X3KTh
           $dRead5_X3KTj
           $dRead6_X3KTl
           $dRead7_X3KTn)

-- RHS size: {terms: 23, types: 43, coercions: 23, joins: 0/0}
GHC.Read.$fRead(,,,,,,)_$creadListPrec
  :: forall a b c d e f g.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g) =>
     ReadPrec [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=7,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KTO)
                 (@ b_X3KTQ)
                 (@ c_X3KTS)
                 (@ d_X3KTU)
                 (@ e_X3KTW)
                 (@ f_X3KTY)
                 (@ g_X3KU0)
                 ($dRead_X3KU2 [Occ=Once] :: Read a_X3KTO)
                 ($dRead1_X3KU4 [Occ=Once] :: Read b_X3KTQ)
                 ($dRead2_X3KU6 [Occ=Once] :: Read c_X3KTS)
                 ($dRead3_X3KU8 [Occ=Once] :: Read d_X3KTU)
                 ($dRead4_X3KUa [Occ=Once] :: Read e_X3KTW)
                 ($dRead5_X3KUc [Occ=Once] :: Read f_X3KTY)
                 ($dRead6_X3KUe [Occ=Once] :: Read g_X3KU0) ->
                 list
                   @ (a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY, g_X3KU0)
                   ((GHC.Read.$fRead(,,,,,,)1
                       @ a_X3KTO
                       @ b_X3KTQ
                       @ c_X3KTS
                       @ d_X3KTU
                       @ e_X3KTW
                       @ f_X3KTY
                       @ g_X3KU0
                       $dRead_X3KU2
                       $dRead1_X3KU4
                       $dRead2_X3KU6
                       $dRead3_X3KU8
                       $dRead4_X3KUa
                       $dRead5_X3KUc
                       $dRead6_X3KUe)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY,
                                             g_X3KU0)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KTO, b_X3KTQ, c_X3KTS,
                                                                        d_X3KTU, e_X3KTW, f_X3KTY,
                                                                        g_X3KU0)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY, g_X3KU0)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY,
                                       g_X3KU0) :: *)))}]
GHC.Read.$fRead(,,,,,,)_$creadListPrec
  = \ (@ a_X3KTO)
      (@ b_X3KTQ)
      (@ c_X3KTS)
      (@ d_X3KTU)
      (@ e_X3KTW)
      (@ f_X3KTY)
      (@ g_X3KU0)
      ($dRead_X3KU2 :: Read a_X3KTO)
      ($dRead1_X3KU4 :: Read b_X3KTQ)
      ($dRead2_X3KU6 :: Read c_X3KTS)
      ($dRead3_X3KU8 :: Read d_X3KTU)
      ($dRead4_X3KUa :: Read e_X3KTW)
      ($dRead5_X3KUc :: Read f_X3KTY)
      ($dRead6_X3KUe :: Read g_X3KU0) ->
      list
        @ (a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY, g_X3KU0)
        ((GHC.Read.$fRead(,,,,,,)1
            @ a_X3KTO
            @ b_X3KTQ
            @ c_X3KTS
            @ d_X3KTU
            @ e_X3KTW
            @ f_X3KTY
            @ g_X3KU0
            $dRead_X3KU2
            $dRead1_X3KU4
            $dRead2_X3KU6
            $dRead3_X3KU8
            $dRead4_X3KUa
            $dRead5_X3KUc
            $dRead6_X3KUe)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY,
                                  g_X3KU0)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU,
                                                             e_X3KTW, f_X3KTY, g_X3KU0)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY, g_X3KU0)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY,
                            g_X3KU0) :: *)))

-- RHS size: {terms: 26, types: 60, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,,)_$creadsPrec
  :: forall a b c d e f g.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g) =>
     Int -> ReadS (a, b, c, d, e, f, g)
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=8,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KTP)
                 (@ b_X3KTR)
                 (@ c_X3KTT)
                 (@ d_X3KTV)
                 (@ e_X3KTX)
                 (@ f_X3KTZ)
                 (@ g_X3KU1)
                 ($dRead_X3KU3 [Occ=Once] :: Read a_X3KTP)
                 ($dRead1_X3KU5 [Occ=Once] :: Read b_X3KTR)
                 ($dRead2_X3KU7 [Occ=Once] :: Read c_X3KTT)
                 ($dRead3_X3KU9 [Occ=Once] :: Read d_X3KTV)
                 ($dRead4_X3KUb [Occ=Once] :: Read e_X3KTX)
                 ($dRead5_X3KUd [Occ=Once] :: Read f_X3KTZ)
                 ($dRead6_X3KUf [Occ=Once] :: Read g_X3KU1)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)
                   (GHC.Read.$fRead(,,,,,,)1
                      @ a_X3KTP
                      @ b_X3KTR
                      @ c_X3KTT
                      @ d_X3KTV
                      @ e_X3KTX
                      @ f_X3KTZ
                      @ g_X3KU1
                      $dRead_X3KU3
                      $dRead1_X3KU5
                      $dRead2_X3KU7
                      $dRead3_X3KU9
                      $dRead4_X3KUb
                      $dRead5_X3KUd
                      $dRead6_X3KUf
                      n_a3tmE
                      @ (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ,
                            g_X3KU1)))}]
GHC.Read.$fRead(,,,,,,)_$creadsPrec
  = \ (@ a_X3KTP)
      (@ b_X3KTR)
      (@ c_X3KTT)
      (@ d_X3KTV)
      (@ e_X3KTX)
      (@ f_X3KTZ)
      (@ g_X3KU1)
      ($dRead_X3KU3 :: Read a_X3KTP)
      ($dRead1_X3KU5 :: Read b_X3KTR)
      ($dRead2_X3KU7 :: Read c_X3KTT)
      ($dRead3_X3KU9 :: Read d_X3KTV)
      ($dRead4_X3KUb :: Read e_X3KTX)
      ($dRead5_X3KUd :: Read f_X3KTZ)
      ($dRead6_X3KUf :: Read g_X3KU1)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)
        (GHC.Read.$fRead(,,,,,,)1
           @ a_X3KTP
           @ b_X3KTR
           @ c_X3KTT
           @ d_X3KTV
           @ e_X3KTX
           @ f_X3KTZ
           @ g_X3KU1
           $dRead_X3KU3
           $dRead1_X3KU5
           $dRead2_X3KU7
           $dRead3_X3KU9
           $dRead4_X3KUb
           $dRead5_X3KUd
           $dRead6_X3KUf
           n_a3tmE
           @ (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)))

-- RHS size: {terms: 26, types: 70, coercions: 43, joins: 0/0}
GHC.Read.$fRead(,,,,,,)_$creadList
  :: forall a b c d e f g.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g) =>
     ReadS [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=7,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KTQ)
                 (@ b_X3KTS)
                 (@ c_X3KTU)
                 (@ d_X3KTW)
                 (@ e_X3KTY)
                 (@ f_X3KU0)
                 (@ g_X3KU2)
                 ($dRead_X3KU4 [Occ=Once] :: Read a_X3KTQ)
                 ($dRead1_X3KU6 [Occ=Once] :: Read b_X3KTS)
                 ($dRead2_X3KU8 [Occ=Once] :: Read c_X3KTU)
                 ($dRead3_X3KUa [Occ=Once] :: Read d_X3KTW)
                 ($dRead4_X3KUc [Occ=Once] :: Read e_X3KTY)
                 ($dRead5_X3KUe [Occ=Once] :: Read f_X3KU0)
                 ($dRead6_X3KUg [Occ=Once] :: Read g_X3KU2) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
                   (((((list
                          @ (a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)
                          ((GHC.Read.$fRead(,,,,,,)1
                              @ a_X3KTQ
                              @ b_X3KTS
                              @ c_X3KTU
                              @ d_X3KTW
                              @ e_X3KTY
                              @ f_X3KU0
                              @ g_X3KU2
                              $dRead_X3KU4
                              $dRead1_X3KU6
                              $dRead2_X3KU8
                              $dRead3_X3KUa
                              $dRead4_X3KUc
                              $dRead5_X3KUe
                              $dRead6_X3KUg)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY,
                                                    f_X3KU0,
                                                    g_X3KU2)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KTQ, b_X3KTS,
                                                                               c_X3KTU, d_X3KTW,
                                                                               e_X3KTY, f_X3KU0,
                                                                               g_X3KU2)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                            g_X3KU2)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                              g_X3KU2) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                      g_X3KU2)]>_R
                               :: (ReadPrec
                                     [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                       g_X3KU2)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                              g_X3KU2)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                    g_X3KU2)]>_R
                             :: (P.ReadP
                                   [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                     g_X3KU2)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                        g_X3KU2)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                             g_X3KU2)]))}]
GHC.Read.$fRead(,,,,,,)_$creadList
  = \ (@ a_X3KTQ)
      (@ b_X3KTS)
      (@ c_X3KTU)
      (@ d_X3KTW)
      (@ e_X3KTY)
      (@ f_X3KU0)
      (@ g_X3KU2)
      ($dRead_X3KU4 :: Read a_X3KTQ)
      ($dRead1_X3KU6 :: Read b_X3KTS)
      ($dRead2_X3KU8 :: Read c_X3KTU)
      ($dRead3_X3KUa :: Read d_X3KTW)
      ($dRead4_X3KUc :: Read e_X3KTY)
      ($dRead5_X3KUe :: Read f_X3KU0)
      ($dRead6_X3KUg :: Read g_X3KU2) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
        (((((list
               @ (a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)
               ((GHC.Read.$fRead(,,,,,,)1
                   @ a_X3KTQ
                   @ b_X3KTS
                   @ c_X3KTU
                   @ d_X3KTW
                   @ e_X3KTY
                   @ f_X3KU0
                   @ g_X3KU2
                   $dRead_X3KU4
                   $dRead1_X3KU6
                   $dRead2_X3KU8
                   $dRead3_X3KUa
                   $dRead4_X3KUc
                   $dRead5_X3KUe
                   $dRead6_X3KUg)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                         g_X3KU2)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KTQ, b_X3KTS, c_X3KTU,
                                                                    d_X3KTW, e_X3KTY, f_X3KU0,
                                                                    g_X3KU2)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                   g_X3KU2) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                           g_X3KU2)]>_R
                    :: (ReadPrec
                          [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                            g_X3KU2)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                                   g_X3KU2)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                         g_X3KU2)]>_R
                  :: (P.ReadP
                        [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                          g_X3KU2)] :: *)
                     ~R# (forall b.
                          ([(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0,
                  g_X3KU2)]))

-- RHS size: {terms: 47, types: 64, coercions: 23, joins: 0/0}
GHC.Read.$fRead(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (Read a, Read b, Read c, Read d, Read e, Read f, Read g) =>
     Read (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K5v)
             (@ b_a3K5w)
             (@ c_a3K5x)
             (@ d_a3K5y)
             (@ e_a3K5z)
             (@ f_a3K5A)
             (@ g_a3K5B)
             (v_X5m :: Read a_a3K5v)
             (v1_X5o :: Read b_a3K5w)
             (v2_B3 :: Read c_a3K5x)
             (v3_B4 :: Read d_a3K5y)
             (v4_B5 :: Read e_a3K5z)
             (v5_B6 :: Read f_a3K5A)
             (v6_B7 :: Read g_a3K5B) ->
       GHC.Read.C:Read TYPE: (a_a3K5v, b_a3K5w, c_a3K5x, d_a3K5y, e_a3K5z,
                              f_a3K5A, g_a3K5B)
                       GHC.Read.$fRead(,,,,,,)_$creadsPrec
                         @ a_a3K5v
                         @ b_a3K5w
                         @ c_a3K5x
                         @ d_a3K5y
                         @ e_a3K5z
                         @ f_a3K5A
                         @ g_a3K5B
                         v_X5m
                         v1_X5o
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                       GHC.Read.$fRead(,,,,,,)_$creadList
                         @ a_a3K5v
                         @ b_a3K5w
                         @ c_a3K5x
                         @ d_a3K5y
                         @ e_a3K5z
                         @ f_a3K5A
                         @ g_a3K5B
                         v_X5m
                         v1_X5o
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7
                       (GHC.Read.$fRead(,,,,,,)1
                          @ a_a3K5v
                          @ b_a3K5w
                          @ c_a3K5x
                          @ d_a3K5y
                          @ e_a3K5z
                          @ f_a3K5A
                          @ g_a3K5B
                          v_X5m
                          v1_X5o
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6
                          v6_B7)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K5v, b_a3K5w, c_a3K5x, d_a3K5y, e_a3K5z,
                                                f_a3K5A,
                                                g_a3K5B)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K5v, b_a3K5w,
                                                                           c_a3K5x, d_a3K5y,
                                                                           e_a3K5z, f_a3K5A,
                                                                           g_a3K5B)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K5v, b_a3K5w, c_a3K5x, d_a3K5y, e_a3K5z, f_a3K5A,
                                        g_a3K5B)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K5v, b_a3K5w, c_a3K5x, d_a3K5y, e_a3K5z, f_a3K5A,
                                          g_a3K5B) :: *))
                       GHC.Read.$fRead(,,,,,,)_$creadListPrec
                         @ a_a3K5v
                         @ b_a3K5w
                         @ c_a3K5x
                         @ d_a3K5y
                         @ e_a3K5z
                         @ f_a3K5A
                         @ g_a3K5B
                         v_X5m
                         v1_X5o
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                         v6_B7]
GHC.Read.$fRead(,,,,,,)
  = \ (@ a_X3KTR)
      (@ b_X3KTT)
      (@ c_X3KTV)
      (@ d_X3KTX)
      (@ e_X3KTZ)
      (@ f_X3KU1)
      (@ g_X3KU3)
      ($dRead_X3KU5 :: Read a_X3KTR)
      ($dRead1_X3KU7 :: Read b_X3KTT)
      ($dRead2_X3KU9 :: Read c_X3KTV)
      ($dRead3_X3KUb :: Read d_X3KTX)
      ($dRead4_X3KUd :: Read e_X3KTZ)
      ($dRead5_X3KUf :: Read f_X3KU1)
      ($dRead6_X3KUh :: Read g_X3KU3) ->
      GHC.Read.C:Read
        @ (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
        (GHC.Read.$fRead(,,,,,,)_$creadsPrec
           @ a_X3KTR
           @ b_X3KTT
           @ c_X3KTV
           @ d_X3KTX
           @ e_X3KTZ
           @ f_X3KU1
           @ g_X3KU3
           $dRead_X3KU5
           $dRead1_X3KU7
           $dRead2_X3KU9
           $dRead3_X3KUb
           $dRead4_X3KUd
           $dRead5_X3KUf
           $dRead6_X3KUh)
        (GHC.Read.$fRead(,,,,,,)_$creadList
           @ a_X3KTR
           @ b_X3KTT
           @ c_X3KTV
           @ d_X3KTX
           @ e_X3KTZ
           @ f_X3KU1
           @ g_X3KU3
           $dRead_X3KU5
           $dRead1_X3KU7
           $dRead2_X3KU9
           $dRead3_X3KUb
           $dRead4_X3KUd
           $dRead5_X3KUf
           $dRead6_X3KUh)
        ((GHC.Read.$fRead(,,,,,,)1
            @ a_X3KTR
            @ b_X3KTT
            @ c_X3KTV
            @ d_X3KTX
            @ e_X3KTZ
            @ f_X3KU1
            @ g_X3KU3
            $dRead_X3KU5
            $dRead1_X3KU7
            $dRead2_X3KU9
            $dRead3_X3KUb
            $dRead4_X3KUd
            $dRead5_X3KUf
            $dRead6_X3KUh)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1,
                                  g_X3KU3)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX,
                                                             e_X3KTZ, f_X3KU1, g_X3KU3)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1,
                            g_X3KU3) :: *)))
        (GHC.Read.$fRead(,,,,,,)_$creadListPrec
           @ a_X3KTR
           @ b_X3KTT
           @ c_X3KTV
           @ d_X3KTX
           @ e_X3KTZ
           @ f_X3KU1
           @ g_X3KU3
           $dRead_X3KU5
           $dRead1_X3KU7
           $dRead2_X3KU9
           $dRead3_X3KUb
           $dRead4_X3KUd
           $dRead5_X3KUf
           $dRead6_X3KUh)

-- RHS size: {terms: 20, types: 37, coercions: 21, joins: 0/0}
GHC.Read.$fRead(,,,,,)_$creadListPrec
  :: forall a b c d e f.
     (Read a, Read b, Read c, Read d, Read e, Read f) =>
     ReadPrec [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KVc)
                 (@ b_X3KVe)
                 (@ c_X3KVg)
                 (@ d_X3KVi)
                 (@ e_X3KVk)
                 (@ f_X3KVm)
                 ($dRead_X3KVo [Occ=Once] :: Read a_X3KVc)
                 ($dRead1_X3KVq [Occ=Once] :: Read b_X3KVe)
                 ($dRead2_X3KVs [Occ=Once] :: Read c_X3KVg)
                 ($dRead3_X3KVu [Occ=Once] :: Read d_X3KVi)
                 ($dRead4_X3KVw [Occ=Once] :: Read e_X3KVk)
                 ($dRead5_X3KVy [Occ=Once] :: Read f_X3KVm) ->
                 list
                   @ (a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm)
                   ((GHC.Read.$fRead(,,,,,)1
                       @ a_X3KVc
                       @ b_X3KVe
                       @ c_X3KVg
                       @ d_X3KVi
                       @ e_X3KVk
                       @ f_X3KVm
                       $dRead_X3KVo
                       $dRead1_X3KVq
                       $dRead2_X3KVs
                       $dRead3_X3KVu
                       $dRead4_X3KVw
                       $dRead5_X3KVy)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk,
                                             f_X3KVm)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KVc, b_X3KVe, c_X3KVg,
                                                                        d_X3KVi, e_X3KVk,
                                                                        f_X3KVm)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk,
                                       f_X3KVm) :: *)))}]
GHC.Read.$fRead(,,,,,)_$creadListPrec
  = \ (@ a_X3KVc)
      (@ b_X3KVe)
      (@ c_X3KVg)
      (@ d_X3KVi)
      (@ e_X3KVk)
      (@ f_X3KVm)
      ($dRead_X3KVo :: Read a_X3KVc)
      ($dRead1_X3KVq :: Read b_X3KVe)
      ($dRead2_X3KVs :: Read c_X3KVg)
      ($dRead3_X3KVu :: Read d_X3KVi)
      ($dRead4_X3KVw :: Read e_X3KVk)
      ($dRead5_X3KVy :: Read f_X3KVm) ->
      list
        @ (a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm)
        ((GHC.Read.$fRead(,,,,,)1
            @ a_X3KVc
            @ b_X3KVe
            @ c_X3KVg
            @ d_X3KVi
            @ e_X3KVk
            @ f_X3KVm
            $dRead_X3KVo
            $dRead1_X3KVq
            $dRead2_X3KVs
            $dRead3_X3KVu
            $dRead4_X3KVw
            $dRead5_X3KVy)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk,
                                  f_X3KVm)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi,
                                                             e_X3KVk, f_X3KVm)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm) :: *)))

-- RHS size: {terms: 23, types: 52, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,,)_$creadsPrec
  :: forall a b c d e f.
     (Read a, Read b, Read c, Read d, Read e, Read f) =>
     Int -> ReadS (a, b, c, d, e, f)
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=7,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KVd)
                 (@ b_X3KVf)
                 (@ c_X3KVh)
                 (@ d_X3KVj)
                 (@ e_X3KVl)
                 (@ f_X3KVn)
                 ($dRead_X3KVp [Occ=Once] :: Read a_X3KVd)
                 ($dRead1_X3KVr [Occ=Once] :: Read b_X3KVf)
                 ($dRead2_X3KVt [Occ=Once] :: Read c_X3KVh)
                 ($dRead3_X3KVv [Occ=Once] :: Read d_X3KVj)
                 ($dRead4_X3KVx [Occ=Once] :: Read e_X3KVl)
                 ($dRead5_X3KVz [Occ=Once] :: Read f_X3KVn)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)
                   (GHC.Read.$fRead(,,,,,)1
                      @ a_X3KVd
                      @ b_X3KVf
                      @ c_X3KVh
                      @ d_X3KVj
                      @ e_X3KVl
                      @ f_X3KVn
                      $dRead_X3KVp
                      $dRead1_X3KVr
                      $dRead2_X3KVt
                      $dRead3_X3KVv
                      $dRead4_X3KVx
                      $dRead5_X3KVz
                      n_a3tmE
                      @ (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)))}]
GHC.Read.$fRead(,,,,,)_$creadsPrec
  = \ (@ a_X3KVd)
      (@ b_X3KVf)
      (@ c_X3KVh)
      (@ d_X3KVj)
      (@ e_X3KVl)
      (@ f_X3KVn)
      ($dRead_X3KVp :: Read a_X3KVd)
      ($dRead1_X3KVr :: Read b_X3KVf)
      ($dRead2_X3KVt :: Read c_X3KVh)
      ($dRead3_X3KVv :: Read d_X3KVj)
      ($dRead4_X3KVx :: Read e_X3KVl)
      ($dRead5_X3KVz :: Read f_X3KVn)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)
        (GHC.Read.$fRead(,,,,,)1
           @ a_X3KVd
           @ b_X3KVf
           @ c_X3KVh
           @ d_X3KVj
           @ e_X3KVl
           @ f_X3KVn
           $dRead_X3KVp
           $dRead1_X3KVr
           $dRead2_X3KVt
           $dRead3_X3KVv
           $dRead4_X3KVx
           $dRead5_X3KVz
           n_a3tmE
           @ (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)))

-- RHS size: {terms: 23, types: 61, coercions: 39, joins: 0/0}
GHC.Read.$fRead(,,,,,)_$creadList
  :: forall a b c d e f.
     (Read a, Read b, Read c, Read d, Read e, Read f) =>
     ReadS [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KVe)
                 (@ b_X3KVg)
                 (@ c_X3KVi)
                 (@ d_X3KVk)
                 (@ e_X3KVm)
                 (@ f_X3KVo)
                 ($dRead_X3KVq [Occ=Once] :: Read a_X3KVe)
                 ($dRead1_X3KVs [Occ=Once] :: Read b_X3KVg)
                 ($dRead2_X3KVu [Occ=Once] :: Read c_X3KVi)
                 ($dRead3_X3KVw [Occ=Once] :: Read d_X3KVk)
                 ($dRead4_X3KVy [Occ=Once] :: Read e_X3KVm)
                 ($dRead5_X3KVA [Occ=Once] :: Read f_X3KVo) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
                   (((((list
                          @ (a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)
                          ((GHC.Read.$fRead(,,,,,)1
                              @ a_X3KVe
                              @ b_X3KVg
                              @ c_X3KVi
                              @ d_X3KVk
                              @ e_X3KVm
                              @ f_X3KVo
                              $dRead_X3KVq
                              $dRead1_X3KVs
                              $dRead2_X3KVu
                              $dRead3_X3KVw
                              $dRead4_X3KVy
                              $dRead5_X3KVA)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm,
                                                    f_X3KVo)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KVe, b_X3KVg,
                                                                               c_X3KVi, d_X3KVk,
                                                                               e_X3KVm, f_X3KVo)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm,
                                              f_X3KVo) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]>_R
                               :: (ReadPrec
                                     [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm,
                                              f_X3KVo)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]>_R
                             :: (P.ReadP
                                   [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]))}]
GHC.Read.$fRead(,,,,,)_$creadList
  = \ (@ a_X3KVe)
      (@ b_X3KVg)
      (@ c_X3KVi)
      (@ d_X3KVk)
      (@ e_X3KVm)
      (@ f_X3KVo)
      ($dRead_X3KVq :: Read a_X3KVe)
      ($dRead1_X3KVs :: Read b_X3KVg)
      ($dRead2_X3KVu :: Read c_X3KVi)
      ($dRead3_X3KVw :: Read d_X3KVk)
      ($dRead4_X3KVy :: Read e_X3KVm)
      ($dRead5_X3KVA :: Read f_X3KVo) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
        (((((list
               @ (a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)
               ((GHC.Read.$fRead(,,,,,)1
                   @ a_X3KVe
                   @ b_X3KVg
                   @ c_X3KVi
                   @ d_X3KVk
                   @ e_X3KVm
                   @ f_X3KVo
                   $dRead_X3KVq
                   $dRead1_X3KVs
                   $dRead2_X3KVu
                   $dRead3_X3KVw
                   $dRead4_X3KVy
                   $dRead5_X3KVA)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm,
                                         f_X3KVo)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KVe, b_X3KVg, c_X3KVi,
                                                                    d_X3KVk, e_X3KVm, f_X3KVo)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]>_R
                    :: (ReadPrec
                          [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)] :: *)
                       ~R# (Prec
                            -> P.ReadP
                                 [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]>_R
                  :: (P.ReadP
                        [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)] :: *)
                     ~R# (forall b.
                          ([(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]))

-- RHS size: {terms: 41, types: 55, coercions: 21, joins: 0/0}
GHC.Read.$fRead(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (Read a, Read b, Read c, Read d, Read e, Read f) =>
     Read (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K5J)
             (@ b_a3K5K)
             (@ c_a3K5L)
             (@ d_a3K5M)
             (@ e_a3K5N)
             (@ f_a3K5O)
             (v_X5p :: Read a_a3K5J)
             (v1_X5r :: Read b_a3K5K)
             (v2_B3 :: Read c_a3K5L)
             (v3_B4 :: Read d_a3K5M)
             (v4_B5 :: Read e_a3K5N)
             (v5_B6 :: Read f_a3K5O) ->
       GHC.Read.C:Read TYPE: (a_a3K5J, b_a3K5K, c_a3K5L, d_a3K5M, e_a3K5N,
                              f_a3K5O)
                       GHC.Read.$fRead(,,,,,)_$creadsPrec
                         @ a_a3K5J
                         @ b_a3K5K
                         @ c_a3K5L
                         @ d_a3K5M
                         @ e_a3K5N
                         @ f_a3K5O
                         v_X5p
                         v1_X5r
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                       GHC.Read.$fRead(,,,,,)_$creadList
                         @ a_a3K5J
                         @ b_a3K5K
                         @ c_a3K5L
                         @ d_a3K5M
                         @ e_a3K5N
                         @ f_a3K5O
                         v_X5p
                         v1_X5r
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6
                       (GHC.Read.$fRead(,,,,,)1
                          @ a_a3K5J
                          @ b_a3K5K
                          @ c_a3K5L
                          @ d_a3K5M
                          @ e_a3K5N
                          @ f_a3K5O
                          v_X5p
                          v1_X5r
                          v2_B3
                          v3_B4
                          v4_B5
                          v5_B6)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K5J, b_a3K5K, c_a3K5L, d_a3K5M, e_a3K5N,
                                                f_a3K5O)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K5J, b_a3K5K,
                                                                           c_a3K5L, d_a3K5M,
                                                                           e_a3K5N, f_a3K5O)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K5J, b_a3K5K, c_a3K5L, d_a3K5M, e_a3K5N, f_a3K5O)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec
                                         (a_a3K5J, b_a3K5K, c_a3K5L, d_a3K5M, e_a3K5N,
                                          f_a3K5O) :: *))
                       GHC.Read.$fRead(,,,,,)_$creadListPrec
                         @ a_a3K5J
                         @ b_a3K5K
                         @ c_a3K5L
                         @ d_a3K5M
                         @ e_a3K5N
                         @ f_a3K5O
                         v_X5p
                         v1_X5r
                         v2_B3
                         v3_B4
                         v4_B5
                         v5_B6]
GHC.Read.$fRead(,,,,,)
  = \ (@ a_X3KVf)
      (@ b_X3KVh)
      (@ c_X3KVj)
      (@ d_X3KVl)
      (@ e_X3KVn)
      (@ f_X3KVp)
      ($dRead_X3KVr :: Read a_X3KVf)
      ($dRead1_X3KVt :: Read b_X3KVh)
      ($dRead2_X3KVv :: Read c_X3KVj)
      ($dRead3_X3KVx :: Read d_X3KVl)
      ($dRead4_X3KVz :: Read e_X3KVn)
      ($dRead5_X3KVB :: Read f_X3KVp) ->
      GHC.Read.C:Read
        @ (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
        (GHC.Read.$fRead(,,,,,)_$creadsPrec
           @ a_X3KVf
           @ b_X3KVh
           @ c_X3KVj
           @ d_X3KVl
           @ e_X3KVn
           @ f_X3KVp
           $dRead_X3KVr
           $dRead1_X3KVt
           $dRead2_X3KVv
           $dRead3_X3KVx
           $dRead4_X3KVz
           $dRead5_X3KVB)
        (GHC.Read.$fRead(,,,,,)_$creadList
           @ a_X3KVf
           @ b_X3KVh
           @ c_X3KVj
           @ d_X3KVl
           @ e_X3KVn
           @ f_X3KVp
           $dRead_X3KVr
           $dRead1_X3KVt
           $dRead2_X3KVv
           $dRead3_X3KVx
           $dRead4_X3KVz
           $dRead5_X3KVB)
        ((GHC.Read.$fRead(,,,,,)1
            @ a_X3KVf
            @ b_X3KVh
            @ c_X3KVj
            @ d_X3KVl
            @ e_X3KVn
            @ f_X3KVp
            $dRead_X3KVr
            $dRead1_X3KVt
            $dRead2_X3KVv
            $dRead3_X3KVx
            $dRead4_X3KVz
            $dRead5_X3KVB)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn,
                                  f_X3KVp)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl,
                                                             e_X3KVn, f_X3KVp)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec
                           (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp) :: *)))
        (GHC.Read.$fRead(,,,,,)_$creadListPrec
           @ a_X3KVf
           @ b_X3KVh
           @ c_X3KVj
           @ d_X3KVl
           @ e_X3KVn
           @ f_X3KVp
           $dRead_X3KVr
           $dRead1_X3KVt
           $dRead2_X3KVv
           $dRead3_X3KVx
           $dRead4_X3KVz
           $dRead5_X3KVB)

-- RHS size: {terms: 17, types: 31, coercions: 19, joins: 0/0}
GHC.Read.$fRead(,,,,)_$creadListPrec
  :: forall a b c d e.
     (Read a, Read b, Read c, Read d, Read e) =>
     ReadPrec [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KWn)
                 (@ b_X3KWp)
                 (@ c_X3KWr)
                 (@ d_X3KWt)
                 (@ e_X3KWv)
                 ($dRead_X3KWx [Occ=Once] :: Read a_X3KWn)
                 ($dRead1_X3KWz [Occ=Once] :: Read b_X3KWp)
                 ($dRead2_X3KWB [Occ=Once] :: Read c_X3KWr)
                 ($dRead3_X3KWD [Occ=Once] :: Read d_X3KWt)
                 ($dRead4_X3KWF [Occ=Once] :: Read e_X3KWv) ->
                 list
                   @ (a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv)
                   ((GHC.Read.$fRead(,,,,)1
                       @ a_X3KWn
                       @ b_X3KWp
                       @ c_X3KWr
                       @ d_X3KWt
                       @ e_X3KWv
                       $dRead_X3KWx
                       $dRead1_X3KWz
                       $dRead2_X3KWB
                       $dRead3_X3KWD
                       $dRead4_X3KWF)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt,
                                             e_X3KWv)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KWn, b_X3KWp, c_X3KWr,
                                                                        d_X3KWt, e_X3KWv)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec
                                      (a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv) :: *)))}]
GHC.Read.$fRead(,,,,)_$creadListPrec
  = \ (@ a_X3KWn)
      (@ b_X3KWp)
      (@ c_X3KWr)
      (@ d_X3KWt)
      (@ e_X3KWv)
      ($dRead_X3KWx :: Read a_X3KWn)
      ($dRead1_X3KWz :: Read b_X3KWp)
      ($dRead2_X3KWB :: Read c_X3KWr)
      ($dRead3_X3KWD :: Read d_X3KWt)
      ($dRead4_X3KWF :: Read e_X3KWv) ->
      list
        @ (a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv)
        ((GHC.Read.$fRead(,,,,)1
            @ a_X3KWn
            @ b_X3KWp
            @ c_X3KWr
            @ d_X3KWt
            @ e_X3KWv
            $dRead_X3KWx
            $dRead1_X3KWz
            $dRead2_X3KWB
            $dRead3_X3KWD
            $dRead4_X3KWF)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt,
                                  e_X3KWv)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt,
                                                             e_X3KWv)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv) :: *)))

-- RHS size: {terms: 20, types: 44, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,,)_$creadsPrec
  :: forall a b c d e.
     (Read a, Read b, Read c, Read d, Read e) =>
     Int -> ReadS (a, b, c, d, e)
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=6,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KWo)
                 (@ b_X3KWq)
                 (@ c_X3KWs)
                 (@ d_X3KWu)
                 (@ e_X3KWw)
                 ($dRead_X3KWy [Occ=Once] :: Read a_X3KWo)
                 ($dRead1_X3KWA [Occ=Once] :: Read b_X3KWq)
                 ($dRead2_X3KWC [Occ=Once] :: Read c_X3KWs)
                 ($dRead3_X3KWE [Occ=Once] :: Read d_X3KWu)
                 ($dRead4_X3KWG [Occ=Once] :: Read e_X3KWw)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)
                   (GHC.Read.$fRead(,,,,)1
                      @ a_X3KWo
                      @ b_X3KWq
                      @ c_X3KWs
                      @ d_X3KWu
                      @ e_X3KWw
                      $dRead_X3KWy
                      $dRead1_X3KWA
                      $dRead2_X3KWC
                      $dRead3_X3KWE
                      $dRead4_X3KWG
                      n_a3tmE
                      @ (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)))}]
GHC.Read.$fRead(,,,,)_$creadsPrec
  = \ (@ a_X3KWo)
      (@ b_X3KWq)
      (@ c_X3KWs)
      (@ d_X3KWu)
      (@ e_X3KWw)
      ($dRead_X3KWy :: Read a_X3KWo)
      ($dRead1_X3KWA :: Read b_X3KWq)
      ($dRead2_X3KWC :: Read c_X3KWs)
      ($dRead3_X3KWE :: Read d_X3KWu)
      ($dRead4_X3KWG :: Read e_X3KWw)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)
        (GHC.Read.$fRead(,,,,)1
           @ a_X3KWo
           @ b_X3KWq
           @ c_X3KWs
           @ d_X3KWu
           @ e_X3KWw
           $dRead_X3KWy
           $dRead1_X3KWA
           $dRead2_X3KWC
           $dRead3_X3KWE
           $dRead4_X3KWG
           n_a3tmE
           @ (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)))

-- RHS size: {terms: 20, types: 52, coercions: 35, joins: 0/0}
GHC.Read.$fRead(,,,,)_$creadList
  :: forall a b c d e.
     (Read a, Read b, Read c, Read d, Read e) =>
     ReadS [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KWp)
                 (@ b_X3KWr)
                 (@ c_X3KWt)
                 (@ d_X3KWv)
                 (@ e_X3KWx)
                 ($dRead_X3KWz [Occ=Once] :: Read a_X3KWp)
                 ($dRead1_X3KWB [Occ=Once] :: Read b_X3KWr)
                 ($dRead2_X3KWD [Occ=Once] :: Read c_X3KWt)
                 ($dRead3_X3KWF [Occ=Once] :: Read d_X3KWv)
                 ($dRead4_X3KWH [Occ=Once] :: Read e_X3KWx) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
                   (((((list
                          @ (a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)
                          ((GHC.Read.$fRead(,,,,)1
                              @ a_X3KWp
                              @ b_X3KWr
                              @ c_X3KWt
                              @ d_X3KWv
                              @ e_X3KWx
                              $dRead_X3KWz
                              $dRead1_X3KWB
                              $dRead2_X3KWD
                              $dRead3_X3KWF
                              $dRead4_X3KWH)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv,
                                                    e_X3KWx)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KWp, b_X3KWr,
                                                                               c_X3KWt, d_X3KWv,
                                                                               e_X3KWx)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec
                                             (a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]>_R
                               :: (ReadPrec [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP
                                            [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]>_R
                             :: (P.ReadP [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]))}]
GHC.Read.$fRead(,,,,)_$creadList
  = \ (@ a_X3KWp)
      (@ b_X3KWr)
      (@ c_X3KWt)
      (@ d_X3KWv)
      (@ e_X3KWx)
      ($dRead_X3KWz :: Read a_X3KWp)
      ($dRead1_X3KWB :: Read b_X3KWr)
      ($dRead2_X3KWD :: Read c_X3KWt)
      ($dRead3_X3KWF :: Read d_X3KWv)
      ($dRead4_X3KWH :: Read e_X3KWx) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
        (((((list
               @ (a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)
               ((GHC.Read.$fRead(,,,,)1
                   @ a_X3KWp
                   @ b_X3KWr
                   @ c_X3KWt
                   @ d_X3KWv
                   @ e_X3KWx
                   $dRead_X3KWz
                   $dRead1_X3KWB
                   $dRead2_X3KWD
                   $dRead3_X3KWF
                   $dRead4_X3KWH)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv,
                                         e_X3KWx)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KWp, b_X3KWr, c_X3KWt,
                                                                    d_X3KWv, e_X3KWx)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec
                                  (a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]>_R
                    :: (ReadPrec [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)] :: *)
                       ~R# (Prec
                            -> P.ReadP [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]>_R
                  :: (P.ReadP [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)] :: *)
                     ~R# (forall b.
                          ([(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]))

-- RHS size: {terms: 35, types: 46, coercions: 19, joins: 0/0}
GHC.Read.$fRead(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (Read a, Read b, Read c, Read d, Read e) =>
     Read (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K5V)
             (@ b_a3K5W)
             (@ c_a3K5X)
             (@ d_a3K5Y)
             (@ e_a3K5Z)
             (v_X5s :: Read a_a3K5V)
             (v1_X5u :: Read b_a3K5W)
             (v2_B3 :: Read c_a3K5X)
             (v3_B4 :: Read d_a3K5Y)
             (v4_B5 :: Read e_a3K5Z) ->
       GHC.Read.C:Read TYPE: (a_a3K5V, b_a3K5W, c_a3K5X, d_a3K5Y, e_a3K5Z)
                       GHC.Read.$fRead(,,,,)_$creadsPrec
                         @ a_a3K5V
                         @ b_a3K5W
                         @ c_a3K5X
                         @ d_a3K5Y
                         @ e_a3K5Z
                         v_X5s
                         v1_X5u
                         v2_B3
                         v3_B4
                         v4_B5
                       GHC.Read.$fRead(,,,,)_$creadList
                         @ a_a3K5V
                         @ b_a3K5W
                         @ c_a3K5X
                         @ d_a3K5Y
                         @ e_a3K5Z
                         v_X5s
                         v1_X5u
                         v2_B3
                         v3_B4
                         v4_B5
                       (GHC.Read.$fRead(,,,,)1
                          @ a_a3K5V
                          @ b_a3K5W
                          @ c_a3K5X
                          @ d_a3K5Y
                          @ e_a3K5Z
                          v_X5s
                          v1_X5u
                          v2_B3
                          v3_B4
                          v4_B5)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K5V, b_a3K5W, c_a3K5X, d_a3K5Y,
                                                e_a3K5Z)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K5V, b_a3K5W,
                                                                           c_a3K5X, d_a3K5Y,
                                                                           e_a3K5Z)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K5V, b_a3K5W, c_a3K5X, d_a3K5Y, e_a3K5Z)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec (a_a3K5V, b_a3K5W, c_a3K5X, d_a3K5Y, e_a3K5Z) :: *))
                       GHC.Read.$fRead(,,,,)_$creadListPrec
                         @ a_a3K5V
                         @ b_a3K5W
                         @ c_a3K5X
                         @ d_a3K5Y
                         @ e_a3K5Z
                         v_X5s
                         v1_X5u
                         v2_B3
                         v3_B4
                         v4_B5]
GHC.Read.$fRead(,,,,)
  = \ (@ a_X3KWq)
      (@ b_X3KWs)
      (@ c_X3KWu)
      (@ d_X3KWw)
      (@ e_X3KWy)
      ($dRead_X3KWA :: Read a_X3KWq)
      ($dRead1_X3KWC :: Read b_X3KWs)
      ($dRead2_X3KWE :: Read c_X3KWu)
      ($dRead3_X3KWG :: Read d_X3KWw)
      ($dRead4_X3KWI :: Read e_X3KWy) ->
      GHC.Read.C:Read
        @ (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
        (GHC.Read.$fRead(,,,,)_$creadsPrec
           @ a_X3KWq
           @ b_X3KWs
           @ c_X3KWu
           @ d_X3KWw
           @ e_X3KWy
           $dRead_X3KWA
           $dRead1_X3KWC
           $dRead2_X3KWE
           $dRead3_X3KWG
           $dRead4_X3KWI)
        (GHC.Read.$fRead(,,,,)_$creadList
           @ a_X3KWq
           @ b_X3KWs
           @ c_X3KWu
           @ d_X3KWw
           @ e_X3KWy
           $dRead_X3KWA
           $dRead1_X3KWC
           $dRead2_X3KWE
           $dRead3_X3KWG
           $dRead4_X3KWI)
        ((GHC.Read.$fRead(,,,,)1
            @ a_X3KWq
            @ b_X3KWs
            @ c_X3KWu
            @ d_X3KWw
            @ e_X3KWy
            $dRead_X3KWA
            $dRead1_X3KWC
            $dRead2_X3KWE
            $dRead3_X3KWG
            $dRead4_X3KWI)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw,
                                  e_X3KWy)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw,
                                                             e_X3KWy)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy) :: *)))
        (GHC.Read.$fRead(,,,,)_$creadListPrec
           @ a_X3KWq
           @ b_X3KWs
           @ c_X3KWu
           @ d_X3KWw
           @ e_X3KWy
           $dRead_X3KWA
           $dRead1_X3KWC
           $dRead2_X3KWE
           $dRead3_X3KWG
           $dRead4_X3KWI)

-- RHS size: {terms: 14, types: 25, coercions: 17, joins: 0/0}
GHC.Read.$fRead(,,,)_$creadListPrec
  :: forall a b c d.
     (Read a, Read b, Read c, Read d) =>
     ReadPrec [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KXt)
                 (@ b_X3KXv)
                 (@ c_X3KXx)
                 (@ d_X3KXz)
                 ($dRead_X3KXB [Occ=Once] :: Read a_X3KXt)
                 ($dRead1_X3KXD [Occ=Once] :: Read b_X3KXv)
                 ($dRead2_X3KXF [Occ=Once] :: Read c_X3KXx)
                 ($dRead3_X3KXH [Occ=Once] :: Read d_X3KXz) ->
                 list
                   @ (a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)
                   ((GHC.Read.$fRead(,,,)1
                       @ a_X3KXt
                       @ b_X3KXv
                       @ c_X3KXx
                       @ d_X3KXz
                       $dRead_X3KXB
                       $dRead1_X3KXD
                       $dRead2_X3KXF
                       $dRead3_X3KXH)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KXt, b_X3KXv, c_X3KXx,
                                             d_X3KXz)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KXt, b_X3KXv, c_X3KXx,
                                                                        d_X3KXz)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)
                                    -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz) :: *)))}]
GHC.Read.$fRead(,,,)_$creadListPrec
  = \ (@ a_X3KXt)
      (@ b_X3KXv)
      (@ c_X3KXx)
      (@ d_X3KXz)
      ($dRead_X3KXB :: Read a_X3KXt)
      ($dRead1_X3KXD :: Read b_X3KXv)
      ($dRead2_X3KXF :: Read c_X3KXx)
      ($dRead3_X3KXH :: Read d_X3KXz) ->
      list
        @ (a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)
        ((GHC.Read.$fRead(,,,)1
            @ a_X3KXt
            @ b_X3KXv
            @ c_X3KXx
            @ d_X3KXz
            $dRead_X3KXB
            $dRead1_X3KXD
            $dRead2_X3KXF
            $dRead3_X3KXH)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KXt, b_X3KXv, c_X3KXx,
                                  d_X3KXz)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz) :: *)))

-- RHS size: {terms: 17, types: 36, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,,)_$creadsPrec
  :: forall a b c d.
     (Read a, Read b, Read c, Read d) =>
     Int -> ReadS (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KXu)
                 (@ b_X3KXw)
                 (@ c_X3KXy)
                 (@ d_X3KXA)
                 ($dRead_X3KXC [Occ=Once] :: Read a_X3KXu)
                 ($dRead1_X3KXE [Occ=Once] :: Read b_X3KXw)
                 ($dRead2_X3KXG [Occ=Once] :: Read c_X3KXy)
                 ($dRead3_X3KXI [Occ=Once] :: Read d_X3KXA)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)
                   (GHC.Read.$fRead(,,,)1
                      @ a_X3KXu
                      @ b_X3KXw
                      @ c_X3KXy
                      @ d_X3KXA
                      $dRead_X3KXC
                      $dRead1_X3KXE
                      $dRead2_X3KXG
                      $dRead3_X3KXI
                      n_a3tmE
                      @ (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)))}]
GHC.Read.$fRead(,,,)_$creadsPrec
  = \ (@ a_X3KXu)
      (@ b_X3KXw)
      (@ c_X3KXy)
      (@ d_X3KXA)
      ($dRead_X3KXC :: Read a_X3KXu)
      ($dRead1_X3KXE :: Read b_X3KXw)
      ($dRead2_X3KXG :: Read c_X3KXy)
      ($dRead3_X3KXI :: Read d_X3KXA)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)
        (GHC.Read.$fRead(,,,)1
           @ a_X3KXu
           @ b_X3KXw
           @ c_X3KXy
           @ d_X3KXA
           $dRead_X3KXC
           $dRead1_X3KXE
           $dRead2_X3KXG
           $dRead3_X3KXI
           n_a3tmE
           @ (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)))

-- RHS size: {terms: 17, types: 43, coercions: 31, joins: 0/0}
GHC.Read.$fRead(,,,)_$creadList
  :: forall a b c d.
     (Read a, Read b, Read c, Read d) =>
     ReadS [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KXv)
                 (@ b_X3KXx)
                 (@ c_X3KXz)
                 (@ d_X3KXB)
                 ($dRead_X3KXD [Occ=Once] :: Read a_X3KXv)
                 ($dRead1_X3KXF [Occ=Once] :: Read b_X3KXx)
                 ($dRead2_X3KXH [Occ=Once] :: Read c_X3KXz)
                 ($dRead3_X3KXJ [Occ=Once] :: Read d_X3KXB) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
                   (((((list
                          @ (a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)
                          ((GHC.Read.$fRead(,,,)1
                              @ a_X3KXv
                              @ b_X3KXx
                              @ c_X3KXz
                              @ d_X3KXB
                              $dRead_X3KXD
                              $dRead1_X3KXF
                              $dRead2_X3KXH
                              $dRead3_X3KXJ)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KXv, b_X3KXx, c_X3KXz,
                                                    d_X3KXB)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KXv, b_X3KXx,
                                                                               c_X3KXz, d_X3KXB)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec (a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]>_R
                               :: (ReadPrec [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)] :: *)
                                  ~R# (Prec
                                       -> P.ReadP [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]>_R
                             :: (P.ReadP [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]))}]
GHC.Read.$fRead(,,,)_$creadList
  = \ (@ a_X3KXv)
      (@ b_X3KXx)
      (@ c_X3KXz)
      (@ d_X3KXB)
      ($dRead_X3KXD :: Read a_X3KXv)
      ($dRead1_X3KXF :: Read b_X3KXx)
      ($dRead2_X3KXH :: Read c_X3KXz)
      ($dRead3_X3KXJ :: Read d_X3KXB) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
        (((((list
               @ (a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)
               ((GHC.Read.$fRead(,,,)1
                   @ a_X3KXv
                   @ b_X3KXx
                   @ c_X3KXz
                   @ d_X3KXB
                   $dRead_X3KXD
                   $dRead1_X3KXF
                   $dRead2_X3KXH
                   $dRead3_X3KXJ)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KXv, b_X3KXx, c_X3KXz,
                                         d_X3KXB)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KXv, b_X3KXx, c_X3KXz,
                                                                    d_X3KXB)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)
                                -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec (a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]>_R
                    :: (ReadPrec [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)] :: *)
                       ~R# (Prec -> P.ReadP [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]>_R
                  :: (P.ReadP [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)] :: *)
                     ~R# (forall b.
                          ([(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
                           -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]))

-- RHS size: {terms: 29, types: 37, coercions: 17, joins: 0/0}
GHC.Read.$fRead(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (Read a, Read b, Read c, Read d) =>
     Read (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K65)
             (@ b_a3K66)
             (@ c_a3K67)
             (@ d_a3K68)
             (v_X5v :: Read a_a3K65)
             (v1_X5x :: Read b_a3K66)
             (v2_B3 :: Read c_a3K67)
             (v3_B4 :: Read d_a3K68) ->
       GHC.Read.C:Read TYPE: (a_a3K65, b_a3K66, c_a3K67, d_a3K68)
                       GHC.Read.$fRead(,,,)_$creadsPrec
                         @ a_a3K65 @ b_a3K66 @ c_a3K67 @ d_a3K68 v_X5v v1_X5x v2_B3 v3_B4
                       GHC.Read.$fRead(,,,)_$creadList
                         @ a_a3K65 @ b_a3K66 @ c_a3K67 @ d_a3K68 v_X5v v1_X5x v2_B3 v3_B4
                       (GHC.Read.$fRead(,,,)1
                          @ a_a3K65 @ b_a3K66 @ c_a3K67 @ d_a3K68 v_X5v v1_X5x v2_B3 v3_B4)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K65, b_a3K66, c_a3K67,
                                                d_a3K68)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K65, b_a3K66,
                                                                           c_a3K67, d_a3K68)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K65, b_a3K66, c_a3K67, d_a3K68)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec (a_a3K65, b_a3K66, c_a3K67, d_a3K68) :: *))
                       GHC.Read.$fRead(,,,)_$creadListPrec
                         @ a_a3K65 @ b_a3K66 @ c_a3K67 @ d_a3K68 v_X5v v1_X5x v2_B3 v3_B4]
GHC.Read.$fRead(,,,)
  = \ (@ a_X3KXw)
      (@ b_X3KXy)
      (@ c_X3KXA)
      (@ d_X3KXC)
      ($dRead_X3KXE :: Read a_X3KXw)
      ($dRead1_X3KXG :: Read b_X3KXy)
      ($dRead2_X3KXI :: Read c_X3KXA)
      ($dRead3_X3KXK :: Read d_X3KXC) ->
      GHC.Read.C:Read
        @ (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
        (GHC.Read.$fRead(,,,)_$creadsPrec
           @ a_X3KXw
           @ b_X3KXy
           @ c_X3KXA
           @ d_X3KXC
           $dRead_X3KXE
           $dRead1_X3KXG
           $dRead2_X3KXI
           $dRead3_X3KXK)
        (GHC.Read.$fRead(,,,)_$creadList
           @ a_X3KXw
           @ b_X3KXy
           @ c_X3KXA
           @ d_X3KXC
           $dRead_X3KXE
           $dRead1_X3KXG
           $dRead2_X3KXI
           $dRead3_X3KXK)
        ((GHC.Read.$fRead(,,,)1
            @ a_X3KXw
            @ b_X3KXy
            @ c_X3KXA
            @ d_X3KXC
            $dRead_X3KXE
            $dRead1_X3KXG
            $dRead2_X3KXI
            $dRead3_X3KXK)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KXw, b_X3KXy, c_X3KXA,
                                  d_X3KXC)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
                         -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC) :: *)))
        (GHC.Read.$fRead(,,,)_$creadListPrec
           @ a_X3KXw
           @ b_X3KXy
           @ c_X3KXA
           @ d_X3KXC
           $dRead_X3KXE
           $dRead1_X3KXG
           $dRead2_X3KXI
           $dRead3_X3KXK)

-- RHS size: {terms: 11, types: 19, coercions: 15, joins: 0/0}
GHC.Read.$fRead(,,)_$creadListPrec
  :: forall a b c. (Read a, Read b, Read c) => ReadPrec [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KYb)
                 (@ b_X3KYd)
                 (@ c_X3KYf)
                 ($dRead_X3KYh [Occ=Once] :: Read a_X3KYb)
                 ($dRead1_X3KYj [Occ=Once] :: Read b_X3KYd)
                 ($dRead2_X3KYl [Occ=Once] :: Read c_X3KYf) ->
                 list
                   @ (a_X3KYb, b_X3KYd, c_X3KYf)
                   ((GHC.Read.$fRead(,,)1
                       @ a_X3KYb
                       @ b_X3KYd
                       @ c_X3KYf
                       $dRead_X3KYh
                       $dRead1_X3KYj
                       $dRead2_X3KYl)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KYb, b_X3KYd,
                                             c_X3KYf)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KYb, b_X3KYd,
                                                                        c_X3KYf)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KYb, b_X3KYd, c_X3KYf) -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (a_X3KYb, b_X3KYd, c_X3KYf) :: *)))}]
GHC.Read.$fRead(,,)_$creadListPrec
  = \ (@ a_X3KYb)
      (@ b_X3KYd)
      (@ c_X3KYf)
      ($dRead_X3KYh :: Read a_X3KYb)
      ($dRead1_X3KYj :: Read b_X3KYd)
      ($dRead2_X3KYl :: Read c_X3KYf) ->
      list
        @ (a_X3KYb, b_X3KYd, c_X3KYf)
        ((GHC.Read.$fRead(,,)1
            @ a_X3KYb
            @ b_X3KYd
            @ c_X3KYf
            $dRead_X3KYh
            $dRead1_X3KYj
            $dRead2_X3KYl)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KYb, b_X3KYd,
                                  c_X3KYf)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KYb, b_X3KYd, c_X3KYf)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KYb, b_X3KYd, c_X3KYf) -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_X3KYb, b_X3KYd, c_X3KYf) :: *)))

-- RHS size: {terms: 14, types: 28, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,,)_$creadsPrec
  :: forall a b c. (Read a, Read b, Read c) => Int -> ReadS (a, b, c)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KYc)
                 (@ b_X3KYe)
                 (@ c_X3KYg)
                 ($dRead_X3KYi [Occ=Once] :: Read a_X3KYc)
                 ($dRead1_X3KYk [Occ=Once] :: Read b_X3KYe)
                 ($dRead2_X3KYm [Occ=Once] :: Read c_X3KYg)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KYc, b_X3KYe, c_X3KYg)
                   (GHC.Read.$fRead(,,)1
                      @ a_X3KYc
                      @ b_X3KYe
                      @ c_X3KYg
                      $dRead_X3KYi
                      $dRead1_X3KYk
                      $dRead2_X3KYm
                      n_a3tmE
                      @ (a_X3KYc, b_X3KYe, c_X3KYg)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KYc, b_X3KYe, c_X3KYg)))}]
GHC.Read.$fRead(,,)_$creadsPrec
  = \ (@ a_X3KYc)
      (@ b_X3KYe)
      (@ c_X3KYg)
      ($dRead_X3KYi :: Read a_X3KYc)
      ($dRead1_X3KYk :: Read b_X3KYe)
      ($dRead2_X3KYm :: Read c_X3KYg)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KYc, b_X3KYe, c_X3KYg)
        (GHC.Read.$fRead(,,)1
           @ a_X3KYc
           @ b_X3KYe
           @ c_X3KYg
           $dRead_X3KYi
           $dRead1_X3KYk
           $dRead2_X3KYm
           n_a3tmE
           @ (a_X3KYc, b_X3KYe, c_X3KYg)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KYc, b_X3KYe, c_X3KYg)))

-- RHS size: {terms: 14, types: 34, coercions: 27, joins: 0/0}
GHC.Read.$fRead(,,)_$creadList
  :: forall a b c. (Read a, Read b, Read c) => ReadS [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KYd)
                 (@ b_X3KYf)
                 (@ c_X3KYh)
                 ($dRead_X3KYj [Occ=Once] :: Read a_X3KYd)
                 ($dRead1_X3KYl [Occ=Once] :: Read b_X3KYf)
                 ($dRead2_X3KYn [Occ=Once] :: Read c_X3KYh) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KYd, b_X3KYf, c_X3KYh)]
                   (((((list
                          @ (a_X3KYd, b_X3KYf, c_X3KYh)
                          ((GHC.Read.$fRead(,,)1
                              @ a_X3KYd
                              @ b_X3KYf
                              @ c_X3KYh
                              $dRead_X3KYj
                              $dRead1_X3KYl
                              $dRead2_X3KYn)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KYd, b_X3KYf,
                                                    c_X3KYh)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KYd, b_X3KYf,
                                                                               c_X3KYh)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KYd, b_X3KYf, c_X3KYh)
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec (a_X3KYd, b_X3KYf, c_X3KYh) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KYd, b_X3KYf, c_X3KYh)]>_R
                               :: (ReadPrec [(a_X3KYd, b_X3KYf, c_X3KYh)] :: *)
                                  ~R# (Prec -> P.ReadP [(a_X3KYd, b_X3KYf, c_X3KYh)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KYd, b_X3KYf, c_X3KYh)]>_R
                             :: (P.ReadP [(a_X3KYd, b_X3KYf, c_X3KYh)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KYd, b_X3KYf, c_X3KYh)]
                                      -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KYd, b_X3KYf, c_X3KYh)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KYd, b_X3KYf, c_X3KYh)]))}]
GHC.Read.$fRead(,,)_$creadList
  = \ (@ a_X3KYd)
      (@ b_X3KYf)
      (@ c_X3KYh)
      ($dRead_X3KYj :: Read a_X3KYd)
      ($dRead1_X3KYl :: Read b_X3KYf)
      ($dRead2_X3KYn :: Read c_X3KYh) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KYd, b_X3KYf, c_X3KYh)]
        (((((list
               @ (a_X3KYd, b_X3KYf, c_X3KYh)
               ((GHC.Read.$fRead(,,)1
                   @ a_X3KYd
                   @ b_X3KYf
                   @ c_X3KYh
                   $dRead_X3KYj
                   $dRead1_X3KYl
                   $dRead2_X3KYn)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KYd, b_X3KYf,
                                         c_X3KYh)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KYd, b_X3KYf, c_X3KYh)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KYd, b_X3KYf, c_X3KYh) -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec (a_X3KYd, b_X3KYf, c_X3KYh) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KYd, b_X3KYf, c_X3KYh)]>_R
                    :: (ReadPrec [(a_X3KYd, b_X3KYf, c_X3KYh)] :: *)
                       ~R# (Prec -> P.ReadP [(a_X3KYd, b_X3KYf, c_X3KYh)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KYd, b_X3KYf, c_X3KYh)]>_R
                  :: (P.ReadP [(a_X3KYd, b_X3KYf, c_X3KYh)] :: *)
                     ~R# (forall b.
                          ([(a_X3KYd, b_X3KYf, c_X3KYh)] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KYd, b_X3KYf, c_X3KYh)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KYd, b_X3KYf, c_X3KYh)]))

-- RHS size: {terms: 23, types: 28, coercions: 15, joins: 0/0}
GHC.Read.$fRead(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c. (Read a, Read b, Read c) => Read (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K69)
             (@ b_a3K6a)
             (@ c_a3K6b)
             (v_X5y :: Read a_a3K69)
             (v1_X5A :: Read b_a3K6a)
             (v2_B3 :: Read c_a3K6b) ->
       GHC.Read.C:Read TYPE: (a_a3K69, b_a3K6a, c_a3K6b)
                       GHC.Read.$fRead(,,)_$creadsPrec
                         @ a_a3K69 @ b_a3K6a @ c_a3K6b v_X5y v1_X5A v2_B3
                       GHC.Read.$fRead(,,)_$creadList
                         @ a_a3K69 @ b_a3K6a @ c_a3K6b v_X5y v1_X5A v2_B3
                       (GHC.Read.$fRead(,,)1
                          @ a_a3K69 @ b_a3K6a @ c_a3K6b v_X5y v1_X5A v2_B3)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K69, b_a3K6a,
                                                c_a3K6b)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K69, b_a3K6a,
                                                                           c_a3K6b)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K69, b_a3K6a, c_a3K6b)
                                       -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec (a_a3K69, b_a3K6a, c_a3K6b) :: *))
                       GHC.Read.$fRead(,,)_$creadListPrec
                         @ a_a3K69 @ b_a3K6a @ c_a3K6b v_X5y v1_X5A v2_B3]
GHC.Read.$fRead(,,)
  = \ (@ a_X3KYe)
      (@ b_X3KYg)
      (@ c_X3KYi)
      ($dRead_X3KYk :: Read a_X3KYe)
      ($dRead1_X3KYm :: Read b_X3KYg)
      ($dRead2_X3KYo :: Read c_X3KYi) ->
      GHC.Read.C:Read
        @ (a_X3KYe, b_X3KYg, c_X3KYi)
        (GHC.Read.$fRead(,,)_$creadsPrec
           @ a_X3KYe
           @ b_X3KYg
           @ c_X3KYi
           $dRead_X3KYk
           $dRead1_X3KYm
           $dRead2_X3KYo)
        (GHC.Read.$fRead(,,)_$creadList
           @ a_X3KYe
           @ b_X3KYg
           @ c_X3KYi
           $dRead_X3KYk
           $dRead1_X3KYm
           $dRead2_X3KYo)
        ((GHC.Read.$fRead(,,)1
            @ a_X3KYe
            @ b_X3KYg
            @ c_X3KYi
            $dRead_X3KYk
            $dRead1_X3KYm
            $dRead2_X3KYo)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KYe, b_X3KYg,
                                  c_X3KYi)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KYe, b_X3KYg, c_X3KYi)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KYe, b_X3KYg, c_X3KYi) -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_X3KYe, b_X3KYg, c_X3KYi) :: *)))
        (GHC.Read.$fRead(,,)_$creadListPrec
           @ a_X3KYe
           @ b_X3KYg
           @ c_X3KYi
           $dRead_X3KYk
           $dRead1_X3KYm
           $dRead2_X3KYo)

-- RHS size: {terms: 8, types: 13, coercions: 13, joins: 0/0}
GHC.Read.$fRead(,)_$creadListPrec
  :: forall a b. (Read a, Read b) => ReadPrec [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KZ7)
                 (@ b_X3KZ9)
                 ($dRead_X3KZb [Occ=Once] :: Read a_X3KZ7)
                 ($dRead1_X3KZd [Occ=Once] :: Read b_X3KZ9) ->
                 list
                   @ (a_X3KZ7, b_X3KZ9)
                   ((GHC.Read.$fRead(,)1
                       @ a_X3KZ7 @ b_X3KZ9 $dRead_X3KZb $dRead1_X3KZd)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <(a_X3KZ7,
                                             b_X3KZ9)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <(a_X3KZ7, b_X3KZ9)>_R)
                            :: (Prec
                                -> forall b.
                                   ((a_X3KZ7, b_X3KZ9) -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (a_X3KZ7, b_X3KZ9) :: *)))}]
GHC.Read.$fRead(,)_$creadListPrec
  = \ (@ a_X3KZ7)
      (@ b_X3KZ9)
      ($dRead_X3KZb :: Read a_X3KZ7)
      ($dRead1_X3KZd :: Read b_X3KZ9) ->
      list
        @ (a_X3KZ7, b_X3KZ9)
        ((GHC.Read.$fRead(,)1
            @ a_X3KZ7 @ b_X3KZ9 $dRead_X3KZb $dRead1_X3KZd)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KZ7,
                                  b_X3KZ9)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KZ7, b_X3KZ9)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KZ7, b_X3KZ9) -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_X3KZ7, b_X3KZ9) :: *)))

-- RHS size: {terms: 11, types: 20, coercions: 0, joins: 0/0}
GHC.Read.$fRead(,)_$creadsPrec
  :: forall a b. (Read a, Read b) => Int -> ReadS (a, b)
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KZ8)
                 (@ b_X3KZa)
                 ($dRead_X3KZc [Occ=Once] :: Read a_X3KZ8)
                 ($dRead1_X3KZe [Occ=Once] :: Read b_X3KZa)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (a_X3KZ8, b_X3KZa)
                   (GHC.Read.$fRead(,)1
                      @ a_X3KZ8
                      @ b_X3KZa
                      $dRead_X3KZc
                      $dRead1_X3KZe
                      n_a3tmE
                      @ (a_X3KZ8, b_X3KZa)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (a_X3KZ8, b_X3KZa)))}]
GHC.Read.$fRead(,)_$creadsPrec
  = \ (@ a_X3KZ8)
      (@ b_X3KZa)
      ($dRead_X3KZc :: Read a_X3KZ8)
      ($dRead1_X3KZe :: Read b_X3KZa)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (a_X3KZ8, b_X3KZa)
        (GHC.Read.$fRead(,)1
           @ a_X3KZ8
           @ b_X3KZa
           $dRead_X3KZc
           $dRead1_X3KZe
           n_a3tmE
           @ (a_X3KZ8, b_X3KZa)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (a_X3KZ8, b_X3KZa)))

-- RHS size: {terms: 11, types: 25, coercions: 23, joins: 0/0}
GHC.Read.$fRead(,)_$creadList
  :: forall a b. (Read a, Read b) => ReadS [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KZ9)
                 (@ b_X3KZb)
                 ($dRead_X3KZd [Occ=Once] :: Read a_X3KZ9)
                 ($dRead1_X3KZf [Occ=Once] :: Read b_X3KZb) ->
                 Text.ParserCombinators.ReadP.run
                   @ [(a_X3KZ9, b_X3KZb)]
                   (((((list
                          @ (a_X3KZ9, b_X3KZb)
                          ((GHC.Read.$fRead(,)1
                              @ a_X3KZ9 @ b_X3KZb $dRead_X3KZd $dRead1_X3KZf)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <(a_X3KZ9,
                                                    b_X3KZb)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <(a_X3KZ9, b_X3KZb)>_R)
                                   :: (Prec
                                       -> forall b.
                                          ((a_X3KZ9, b_X3KZb) -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec (a_X3KZ9, b_X3KZb) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[(a_X3KZ9, b_X3KZb)]>_R
                               :: (ReadPrec [(a_X3KZ9, b_X3KZb)] :: *)
                                  ~R# (Prec -> P.ReadP [(a_X3KZ9, b_X3KZb)] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[(a_X3KZ9, b_X3KZb)]>_R
                             :: (P.ReadP [(a_X3KZ9, b_X3KZb)] :: *)
                                ~R# (forall b.
                                     ([(a_X3KZ9, b_X3KZb)] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [(a_X3KZ9, b_X3KZb)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [(a_X3KZ9, b_X3KZb)]))}]
GHC.Read.$fRead(,)_$creadList
  = \ (@ a_X3KZ9)
      (@ b_X3KZb)
      ($dRead_X3KZd :: Read a_X3KZ9)
      ($dRead1_X3KZf :: Read b_X3KZb) ->
      Text.ParserCombinators.ReadP.run
        @ [(a_X3KZ9, b_X3KZb)]
        (((((list
               @ (a_X3KZ9, b_X3KZb)
               ((GHC.Read.$fRead(,)1
                   @ a_X3KZ9 @ b_X3KZb $dRead_X3KZd $dRead1_X3KZf)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <(a_X3KZ9,
                                         b_X3KZb)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <(a_X3KZ9, b_X3KZb)>_R)
                        :: (Prec
                            -> forall b.
                               ((a_X3KZ9, b_X3KZb) -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec (a_X3KZ9, b_X3KZb) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[(a_X3KZ9, b_X3KZb)]>_R
                    :: (ReadPrec [(a_X3KZ9, b_X3KZb)] :: *)
                       ~R# (Prec -> P.ReadP [(a_X3KZ9, b_X3KZb)] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[(a_X3KZ9, b_X3KZb)]>_R
                  :: (P.ReadP [(a_X3KZ9, b_X3KZb)] :: *)
                     ~R# (forall b.
                          ([(a_X3KZ9, b_X3KZb)] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [(a_X3KZ9, b_X3KZb)]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [(a_X3KZ9, b_X3KZb)]))

-- RHS size: {terms: 17, types: 19, coercions: 13, joins: 0/0}
GHC.Read.$fRead(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b. (Read a, Read b) => Read (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K6f)
             (@ b_a3K6g)
             (v_X5B :: Read a_a3K6f)
             (v1_X5D :: Read b_a3K6g) ->
       GHC.Read.C:Read TYPE: (a_a3K6f, b_a3K6g)
                       GHC.Read.$fRead(,)_$creadsPrec @ a_a3K6f @ b_a3K6g v_X5B v1_X5D
                       GHC.Read.$fRead(,)_$creadList @ a_a3K6f @ b_a3K6g v_X5B v1_X5D
                       (GHC.Read.$fRead(,)1 @ a_a3K6f @ b_a3K6g v_X5B v1_X5D)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <(a_a3K6f,
                                                b_a3K6g)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <(a_a3K6f, b_a3K6g)>_R)
                               :: (Prec
                                   -> forall b.
                                      ((a_a3K6f, b_a3K6g) -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec (a_a3K6f, b_a3K6g) :: *))
                       GHC.Read.$fRead(,)_$creadListPrec @ a_a3K6f @ b_a3K6g v_X5B v1_X5D]
GHC.Read.$fRead(,)
  = \ (@ a_X3KZa)
      (@ b_X3KZc)
      ($dRead_X3KZe :: Read a_X3KZa)
      ($dRead1_X3KZg :: Read b_X3KZc) ->
      GHC.Read.C:Read
        @ (a_X3KZa, b_X3KZc)
        (GHC.Read.$fRead(,)_$creadsPrec
           @ a_X3KZa @ b_X3KZc $dRead_X3KZe $dRead1_X3KZg)
        (GHC.Read.$fRead(,)_$creadList
           @ a_X3KZa @ b_X3KZc $dRead_X3KZe $dRead1_X3KZg)
        ((GHC.Read.$fRead(,)1
            @ a_X3KZa @ b_X3KZc $dRead_X3KZe $dRead1_X3KZg)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <(a_X3KZa,
                                  b_X3KZc)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <(a_X3KZa, b_X3KZc)>_R)
                 :: (Prec
                     -> forall b.
                        ((a_X3KZa, b_X3KZc) -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (a_X3KZa, b_X3KZc) :: *)))
        (GHC.Read.$fRead(,)_$creadListPrec
           @ a_X3KZa @ b_X3KZc $dRead_X3KZe $dRead1_X3KZg)

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadLexeme_$creadListPrec :: ReadPrec [L.Lexeme]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadLexeme_$creadListPrec
  = list
      @ L.Lexeme
      (GHC.Read.$fReadLexeme1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <L.Lexeme>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <L.Lexeme>_R)
               :: (Prec
                   -> forall b.
                      (L.Lexeme -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec L.Lexeme :: *)))

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme_lvl117
  :: Text.ParserCombinators.ReadP.P L.Lexeme
[GblId,
 Caf=NoCafRefs,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadLexeme_lvl117
  = Text.ParserCombinators.ReadP.Result
      @ L.Lexeme
      Text.Read.Lex.EOF
      (Text.ParserCombinators.ReadP.Fail @ L.Lexeme)

-- RHS size: {terms: 7, types: 7, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme8
  :: String -> Text.ParserCombinators.ReadP.P L.Lexeme
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
GHC.Read.$fReadLexeme8
  = \ (a3_X3nkL :: String) ->
      case a3_X3nkL of {
        [] -> GHC.Read.$fReadLexeme_lvl117;
        : ds1_i2Mqv ds2_i2Mqw ->
          Text.ParserCombinators.ReadP.Fail @ L.Lexeme
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme7 :: Text.ParserCombinators.ReadP.P L.Lexeme
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadLexeme7
  = Text.ParserCombinators.ReadP.Look
      @ L.Lexeme GHC.Read.$fReadLexeme8

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme6 :: Text.ParserCombinators.ReadP.P L.Lexeme
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadLexeme6
  = Text.Read.Lex.expect2
      @ L.Lexeme
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ L.Lexeme)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme_lvl116
  :: Text.ParserCombinators.ReadP.P L.Lexeme
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadLexeme_lvl116
  = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
      @ L.Lexeme GHC.Read.$fReadLexeme7 GHC.Read.$fReadLexeme6

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme_k
  :: () -> Text.ParserCombinators.ReadP.P L.Lexeme
[GblId,
 Arity=1,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] -> GHC.Read.$fReadLexeme_lvl116}]
GHC.Read.$fReadLexeme_k
  = \ _ [Occ=Dead] -> GHC.Read.$fReadLexeme_lvl116

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme5
  :: String -> Text.ParserCombinators.ReadP.P L.Lexeme
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a3ngt [Occ=Once] :: String) ->
                 Text.ParserCombinators.ReadP.skipSpaces2
                   a_a3ngt @ L.Lexeme GHC.Read.$fReadLexeme_k}]
GHC.Read.$fReadLexeme5
  = \ (a_a3ngt :: String) ->
      Text.ParserCombinators.ReadP.skipSpaces2
        a_a3ngt @ L.Lexeme GHC.Read.$fReadLexeme_k

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme4 :: Text.ParserCombinators.ReadP.P L.Lexeme
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadLexeme4
  = Text.ParserCombinators.ReadP.Look
      @ L.Lexeme GHC.Read.$fReadLexeme5

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme3 :: ReadS L.Lexeme
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadLexeme3
  = Text.ParserCombinators.ReadP.run
      @ L.Lexeme GHC.Read.$fReadLexeme4

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme_$creadsPrec :: Int -> ReadS L.Lexeme
[GblId,
 Arity=2,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] -> GHC.Read.$fReadLexeme3}]
GHC.Read.$fReadLexeme_$creadsPrec
  = \ _ [Occ=Dead] -> GHC.Read.$fReadLexeme3

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fReadLexeme2 :: Text.ParserCombinators.ReadP.P [L.Lexeme]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadLexeme2
  = (((GHC.Read.$fReadLexeme_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                   <[L.Lexeme]>_R
               :: (ReadPrec [L.Lexeme] :: *)
                  ~R# (Prec -> P.ReadP [L.Lexeme] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[L.Lexeme]>_R
             :: (P.ReadP [L.Lexeme] :: *)
                ~R# (forall b.
                     ([L.Lexeme] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [L.Lexeme]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [L.Lexeme])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadLexeme_$creadList :: ReadS [L.Lexeme]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadLexeme_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [L.Lexeme] GHC.Read.$fReadLexeme2

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: Read L.Lexeme
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: L.Lexeme
                       GHC.Read.$fReadLexeme_$creadsPrec
                       GHC.Read.$fReadLexeme_$creadList
                       GHC.Read.$fReadLexeme1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <L.Lexeme>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <L.Lexeme>_R)
                               :: (Prec
                                   -> forall b.
                                      (L.Lexeme -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec L.Lexeme :: *))
                       GHC.Read.$fReadLexeme_$creadListPrec]
GHC.Read.$fReadLexeme
  = GHC.Read.C:Read
      @ L.Lexeme
      GHC.Read.$fReadLexeme_$creadsPrec
      GHC.Read.$fReadLexeme_$creadList
      (GHC.Read.$fReadLexeme1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <L.Lexeme>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <L.Lexeme>_R)
               :: (Prec
                   -> forall b.
                      (L.Lexeme -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec L.Lexeme :: *)))
      GHC.Read.$fReadLexeme_$creadListPrec

-- RHS size: {terms: 8, types: 12, coercions: 6, joins: 0/0}
GHC.Read.$dmreadList :: forall a. Read a => ReadS [a]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,1*C1(C(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3K8l) ($dRead_X3KyP [Occ=Once] :: Read a_X3K8l) ->
                 Text.ParserCombinators.ReadP.run
                   @ [a_X3K8l]
                   (((((list @ a_X3K8l (readPrec @ a_X3K8l $dRead_X3KyP))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[a_X3K8l]>_R
                               :: (ReadPrec [a_X3K8l] :: *) ~R# (Prec -> P.ReadP [a_X3K8l] :: *)))
                        (GHC.Types.I# 0#))
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_X3K8l]>_R
                             :: (P.ReadP [a_X3K8l] :: *)
                                ~R# (forall b.
                                     ([a_X3K8l] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [a_X3K8l]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [a_X3K8l]))}]
GHC.Read.$dmreadList
  = \ (@ a_X3K8l) ($dRead_X3KyP :: Read a_X3K8l) ->
      Text.ParserCombinators.ReadP.run
        @ [a_X3K8l]
        (((((list @ a_X3K8l (readPrec @ a_X3K8l $dRead_X3KyP))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[a_X3K8l]>_R
                    :: (ReadPrec [a_X3K8l] :: *) ~R# (Prec -> P.ReadP [a_X3K8l] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_X3K8l]>_R
                  :: (P.ReadP [a_X3K8l] :: *)
                     ~R# (forall b.
                          ([a_X3K8l] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [a_X3K8l]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [a_X3K8l]))

-- RHS size: {terms: 108, types: 95, coercions: 33, joins: 0/10}
GHC.Read.$fReadInteger_$sreadNumber
  :: (L.Lexeme -> ReadPrec Integer)
     -> Prec
     -> forall b.
        (Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []]
GHC.Read.$fReadInteger_$sreadNumber
  = \ (convert_a3K88 :: L.Lexeme -> ReadPrec Integer)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1 :: Integer -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      GHC.Read.list3
        @ Integer
        ((\ (n_a3tm4 :: Prec)
            (@ b1_a3nIU)
            (k1_a3ngs :: Integer -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
            let {
              lvl116_X3wmg :: Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId]
              lvl116_X3wmg
                = let {
                    lvl2_X3wmI :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl2_X3wmI
                      = let {
                          lvl3_s3LuW :: Integer -> Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId,
                           Arity=1,
                           Str=<L,1*U>,
                           Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                                   WorkFree=True, Expandable=True,
                                   Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                                   Tmpl= \ (a1_X3nmX [Occ=Once] :: Integer) ->
                                           k1_a3ngs (negateInteger a1_X3nmX)}]
                          lvl3_s3LuW
                            = \ (a1_X3nmX :: Integer) -> k1_a3ngs (negateInteger a1_X3nmX) } in
                        let {
                          lvl117_X3wmG :: Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId]
                          lvl117_X3wmG
                            = ((((convert_a3K88 Text.Read.Lex.EOF)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Integer>_R
                                         :: (ReadPrec Integer :: *)
                                            ~R# (Prec -> P.ReadP Integer :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R
                                       :: (P.ReadP Integer :: *)
                                          ~R# (forall b.
                                               (Integer -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU lvl3_s3LuW } in
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                          @ b1_a3nIU
                          (Text.ParserCombinators.ReadP.Look
                             @ b1_a3nIU
                             (\ (a3_X3nkL :: String) ->
                                case a3_X3nkL of {
                                  [] -> lvl117_X3wmG;
                                  : ds1_i2Mqv ds2_i2Mqw ->
                                    Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                                }))
                          (Text.Read.Lex.expect2
                             @ b1_a3nIU
                             (\ (a1_X3nmQ :: L.Lexeme) ->
                                ((((convert_a3K88 a1_X3nmQ)
                                   `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Integer>_R
                                           :: (ReadPrec Integer :: *)
                                              ~R# (Prec -> P.ReadP Integer :: *)))
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R
                                         :: (P.ReadP Integer :: *)
                                            ~R# (forall b.
                                                 (Integer -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b1_a3nIU lvl3_s3LuW)) } in
                  let {
                    k_X3w8a [Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId,
                     Arity=1,
                     Str=<L,A>,
                     Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                             WorkFree=True, Expandable=True,
                             Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                             Tmpl= \ _ [Occ=Dead] -> lvl2_X3wmI}]
                    k_X3w8a = \ _ [Occ=Dead] -> lvl2_X3wmI } in
                  let {
                    lvl3_s3MMB :: String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    lvl3_s3MMB
                      = \ (a_X3nsN :: String) ->
                          Text.ParserCombinators.ReadP.skipSpaces2
                            a_X3nsN @ b1_a3nIU k_X3w8a } in
                  let {
                    lvl4_s3MJt :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Unf=OtherCon []]
                    lvl4_s3MJt
                      = Text.ParserCombinators.ReadP.Look @ b1_a3nIU lvl3_s3MMB } in
                  let {
                    w2_X3xwt :: L.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    w2_X3xwt
                      = \ (a1_a3ngt :: L.Lexeme) ->
                          case a1_a3ngt of wild_X5U {
                            __DEFAULT ->
                              ((((convert_a3K88 wild_X5U)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Integer>_R
                                         :: (ReadPrec Integer :: *)
                                            ~R# (Prec -> P.ReadP Integer :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R
                                       :: (P.ReadP Integer :: *)
                                          ~R# (forall b.
                                               (Integer -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU k1_a3ngs;
                            L.Symbol ds_d3L3U ->
                              case ds_d3L3U of {
                                [] ->
                                  ((((convert_a3K88 wild_X5U)
                                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                 <Integer>_R
                                             :: (ReadPrec Integer :: *)
                                                ~R# (Prec -> P.ReadP Integer :: *)))
                                      n_a3tm4)
                                   `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R
                                           :: (P.ReadP Integer :: *)
                                              ~R# (forall b.
                                                   (Integer -> Text.ParserCombinators.ReadP.P b)
                                                   -> Text.ParserCombinators.ReadP.P b :: *)))
                                    @ b1_a3nIU k1_a3ngs;
                                : ds1_d3L3V ds2_d3L3W ->
                                  case ds1_d3L3V of { C# ds3_d3L3X ->
                                  case ds3_d3L3X of {
                                    __DEFAULT ->
                                      ((((convert_a3K88 wild_X5U)
                                         `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Integer>_R
                                                 :: (ReadPrec Integer :: *)
                                                    ~R# (Prec -> P.ReadP Integer :: *)))
                                          n_a3tm4)
                                       `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Integer>_R
                                               :: (P.ReadP Integer :: *)
                                                  ~R# (forall b.
                                                       (Integer -> Text.ParserCombinators.ReadP.P b)
                                                       -> Text.ParserCombinators.ReadP.P b :: *)))
                                        @ b1_a3nIU k1_a3ngs;
                                    '-'# ->
                                      case ds2_d3L3W of {
                                        [] -> lvl4_s3MJt;
                                        : ipv_s3LgW ipv1_s3LgX ->
                                          ((((convert_a3K88 wild_X5U)
                                             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Integer>_R
                                                     :: (ReadPrec Integer :: *)
                                                        ~R# (Prec -> P.ReadP Integer :: *)))
                                              n_a3tm4)
                                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <Integer>_R
                                                   :: (P.ReadP Integer :: *)
                                                      ~R# (forall b.
                                                           (Integer
                                                            -> Text.ParserCombinators.ReadP.P b)
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b :: *)))
                                            @ b1_a3nIU k1_a3ngs
                                      }
                                  }
                                  }
                              }
                          } } in
                  let {
                    lvl117_X3wy7 :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl117_X3wy7 = w2_X3xwt Text.Read.Lex.EOF } in
                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b1_a3nIU
                    (Text.ParserCombinators.ReadP.Look
                       @ b1_a3nIU
                       (\ (a3_X3nkL :: String) ->
                          case a3_X3nkL of {
                            [] -> lvl117_X3wy7;
                            : ds1_i2Mqv ds2_i2Mqw ->
                              Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                          }))
                    (Text.Read.Lex.expect2 @ b1_a3nIU w2_X3xwt) } in
            let {
              k_X3w7I [Dmd=<L,C(U)>]
                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId,
               Arity=1,
               Str=<L,A>,
               Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                       WorkFree=True, Expandable=True,
                       Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                       Tmpl= \ _ [Occ=Dead] -> lvl116_X3wmg}]
              k_X3w7I = \ _ [Occ=Dead] -> lvl116_X3wmg } in
            Text.ParserCombinators.ReadP.Look
              @ b1_a3nIU
              (\ (a_a3ngt :: String) ->
                 Text.ParserCombinators.ReadP.skipSpaces2
                   a_a3ngt @ b1_a3nIU k_X3w7I))
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Integer>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Integer>_R)
                 :: (Prec
                     -> forall b.
                        (Integer -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec Integer :: *)))
        eta_B2
        @ b_a3ngn
        eta1_B1

-- RHS size: {terms: 108, types: 95, coercions: 33, joins: 0/10}
GHC.Read.$fReadDouble_$sreadNumber
  :: (L.Lexeme -> ReadPrec Double)
     -> Prec
     -> forall b.
        (Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []]
GHC.Read.$fReadDouble_$sreadNumber
  = \ (convert_a3K88 :: L.Lexeme -> ReadPrec Double)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1 :: Double -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      GHC.Read.list3
        @ Double
        ((\ (n_a3tm4 :: Prec)
            (@ b1_a3nIU)
            (k1_a3ngs :: Double -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
            let {
              lvl116_X3wmh :: Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId]
              lvl116_X3wmh
                = let {
                    lvl2_X3wmJ :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl2_X3wmJ
                      = let {
                          lvl3_s3LuY :: Double -> Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId,
                           Arity=1,
                           Str=<L,1*U(U)>,
                           Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                                   WorkFree=True, Expandable=True,
                                   Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                                   Tmpl= \ (a1_X3nmX [Occ=Once] :: Double) ->
                                           k1_a3ngs (negateDouble a1_X3nmX)}]
                          lvl3_s3LuY
                            = \ (a1_X3nmX :: Double) -> k1_a3ngs (negateDouble a1_X3nmX) } in
                        let {
                          lvl117_X3wmH :: Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId]
                          lvl117_X3wmH
                            = ((((convert_a3K88 Text.Read.Lex.EOF)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Double>_R
                                         :: (ReadPrec Double :: *)
                                            ~R# (Prec -> P.ReadP Double :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Double>_R
                                       :: (P.ReadP Double :: *)
                                          ~R# (forall b.
                                               (Double -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU lvl3_s3LuY } in
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                          @ b1_a3nIU
                          (Text.ParserCombinators.ReadP.Look
                             @ b1_a3nIU
                             (\ (a3_X3nkL :: String) ->
                                case a3_X3nkL of {
                                  [] -> lvl117_X3wmH;
                                  : ds1_i2Mqv ds2_i2Mqw ->
                                    Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                                }))
                          (Text.Read.Lex.expect2
                             @ b1_a3nIU
                             (\ (a1_X3nmQ :: L.Lexeme) ->
                                ((((convert_a3K88 a1_X3nmQ)
                                   `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Double>_R
                                           :: (ReadPrec Double :: *)
                                              ~R# (Prec -> P.ReadP Double :: *)))
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Double>_R
                                         :: (P.ReadP Double :: *)
                                            ~R# (forall b.
                                                 (Double -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b1_a3nIU lvl3_s3LuY)) } in
                  let {
                    k_X3w8b [Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId,
                     Arity=1,
                     Str=<L,A>,
                     Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                             WorkFree=True, Expandable=True,
                             Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                             Tmpl= \ _ [Occ=Dead] -> lvl2_X3wmJ}]
                    k_X3w8b = \ _ [Occ=Dead] -> lvl2_X3wmJ } in
                  let {
                    lvl3_s3MMN :: String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    lvl3_s3MMN
                      = \ (a_X3nsO :: String) ->
                          Text.ParserCombinators.ReadP.skipSpaces2
                            a_X3nsO @ b1_a3nIU k_X3w8b } in
                  let {
                    lvl4_s3MJu :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Unf=OtherCon []]
                    lvl4_s3MJu
                      = Text.ParserCombinators.ReadP.Look @ b1_a3nIU lvl3_s3MMN } in
                  let {
                    w2_X3xwu :: L.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    w2_X3xwu
                      = \ (a1_a3ngt :: L.Lexeme) ->
                          case a1_a3ngt of wild_X5U {
                            __DEFAULT ->
                              ((((convert_a3K88 wild_X5U)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Double>_R
                                         :: (ReadPrec Double :: *)
                                            ~R# (Prec -> P.ReadP Double :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Double>_R
                                       :: (P.ReadP Double :: *)
                                          ~R# (forall b.
                                               (Double -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU k1_a3ngs;
                            L.Symbol ds_d3L3U ->
                              case ds_d3L3U of {
                                [] ->
                                  ((((convert_a3K88 wild_X5U)
                                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                 <Double>_R
                                             :: (ReadPrec Double :: *)
                                                ~R# (Prec -> P.ReadP Double :: *)))
                                      n_a3tm4)
                                   `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Double>_R
                                           :: (P.ReadP Double :: *)
                                              ~R# (forall b.
                                                   (Double -> Text.ParserCombinators.ReadP.P b)
                                                   -> Text.ParserCombinators.ReadP.P b :: *)))
                                    @ b1_a3nIU k1_a3ngs;
                                : ds1_d3L3V ds2_d3L3W ->
                                  case ds1_d3L3V of { C# ds3_d3L3X ->
                                  case ds3_d3L3X of {
                                    __DEFAULT ->
                                      ((((convert_a3K88 wild_X5U)
                                         `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Double>_R
                                                 :: (ReadPrec Double :: *)
                                                    ~R# (Prec -> P.ReadP Double :: *)))
                                          n_a3tm4)
                                       `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Double>_R
                                               :: (P.ReadP Double :: *)
                                                  ~R# (forall b.
                                                       (Double -> Text.ParserCombinators.ReadP.P b)
                                                       -> Text.ParserCombinators.ReadP.P b :: *)))
                                        @ b1_a3nIU k1_a3ngs;
                                    '-'# ->
                                      case ds2_d3L3W of {
                                        [] -> lvl4_s3MJu;
                                        : ipv_s3LgW ipv1_s3LgX ->
                                          ((((convert_a3K88 wild_X5U)
                                             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Double>_R
                                                     :: (ReadPrec Double :: *)
                                                        ~R# (Prec -> P.ReadP Double :: *)))
                                              n_a3tm4)
                                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <Double>_R
                                                   :: (P.ReadP Double :: *)
                                                      ~R# (forall b.
                                                           (Double
                                                            -> Text.ParserCombinators.ReadP.P b)
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b :: *)))
                                            @ b1_a3nIU k1_a3ngs
                                      }
                                  }
                                  }
                              }
                          } } in
                  let {
                    lvl117_X3wy9 :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl117_X3wy9 = w2_X3xwu Text.Read.Lex.EOF } in
                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b1_a3nIU
                    (Text.ParserCombinators.ReadP.Look
                       @ b1_a3nIU
                       (\ (a3_X3nkL :: String) ->
                          case a3_X3nkL of {
                            [] -> lvl117_X3wy9;
                            : ds1_i2Mqv ds2_i2Mqw ->
                              Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                          }))
                    (Text.Read.Lex.expect2 @ b1_a3nIU w2_X3xwu) } in
            let {
              k_X3w7J [Dmd=<L,C(U)>]
                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId,
               Arity=1,
               Str=<L,A>,
               Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                       WorkFree=True, Expandable=True,
                       Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                       Tmpl= \ _ [Occ=Dead] -> lvl116_X3wmh}]
              k_X3w7J = \ _ [Occ=Dead] -> lvl116_X3wmh } in
            Text.ParserCombinators.ReadP.Look
              @ b1_a3nIU
              (\ (a_a3ngt :: String) ->
                 Text.ParserCombinators.ReadP.skipSpaces2
                   a_a3ngt @ b1_a3nIU k_X3w7J))
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <Double>_R)
                 :: (Prec
                     -> forall b.
                        (Double -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec Double :: *)))
        eta_B2
        @ b_a3ngn
        eta1_B1

-- RHS size: {terms: 108, types: 95, coercions: 33, joins: 0/10}
GHC.Read.$fReadFloat_$sreadNumber
  :: (L.Lexeme -> ReadPrec Float)
     -> Prec
     -> forall b.
        (Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []]
GHC.Read.$fReadFloat_$sreadNumber
  = \ (convert_a3K88 :: L.Lexeme -> ReadPrec Float)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1 :: Float -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      GHC.Read.list3
        @ Float
        ((\ (n_a3tm4 :: Prec)
            (@ b1_a3nIU)
            (k1_a3ngs :: Float -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
            let {
              lvl116_X3wmi :: Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId]
              lvl116_X3wmi
                = let {
                    lvl2_X3wmK :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl2_X3wmK
                      = let {
                          lvl3_s3Lv0 :: Float -> Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId,
                           Arity=1,
                           Str=<L,1*U(U)>,
                           Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                                   WorkFree=True, Expandable=True,
                                   Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                                   Tmpl= \ (a1_X3nmX [Occ=Once] :: Float) ->
                                           k1_a3ngs (negateFloat a1_X3nmX)}]
                          lvl3_s3Lv0
                            = \ (a1_X3nmX :: Float) -> k1_a3ngs (negateFloat a1_X3nmX) } in
                        let {
                          lvl117_X3wmI :: Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId]
                          lvl117_X3wmI
                            = ((((convert_a3K88 Text.Read.Lex.EOF)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Float>_R
                                         :: (ReadPrec Float :: *) ~R# (Prec -> P.ReadP Float :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Float>_R
                                       :: (P.ReadP Float :: *)
                                          ~R# (forall b.
                                               (Float -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU lvl3_s3Lv0 } in
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                          @ b1_a3nIU
                          (Text.ParserCombinators.ReadP.Look
                             @ b1_a3nIU
                             (\ (a3_X3nkL :: String) ->
                                case a3_X3nkL of {
                                  [] -> lvl117_X3wmI;
                                  : ds1_i2Mqv ds2_i2Mqw ->
                                    Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                                }))
                          (Text.Read.Lex.expect2
                             @ b1_a3nIU
                             (\ (a1_X3nmQ :: L.Lexeme) ->
                                ((((convert_a3K88 a1_X3nmQ)
                                   `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Float>_R
                                           :: (ReadPrec Float :: *)
                                              ~R# (Prec -> P.ReadP Float :: *)))
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Float>_R
                                         :: (P.ReadP Float :: *)
                                            ~R# (forall b.
                                                 (Float -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b1_a3nIU lvl3_s3Lv0)) } in
                  let {
                    k_X3w8c [Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId,
                     Arity=1,
                     Str=<L,A>,
                     Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                             WorkFree=True, Expandable=True,
                             Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                             Tmpl= \ _ [Occ=Dead] -> lvl2_X3wmK}]
                    k_X3w8c = \ _ [Occ=Dead] -> lvl2_X3wmK } in
                  let {
                    lvl3_s3MMZ :: String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    lvl3_s3MMZ
                      = \ (a_X3nsP :: String) ->
                          Text.ParserCombinators.ReadP.skipSpaces2
                            a_X3nsP @ b1_a3nIU k_X3w8c } in
                  let {
                    lvl4_s3MJv :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Unf=OtherCon []]
                    lvl4_s3MJv
                      = Text.ParserCombinators.ReadP.Look @ b1_a3nIU lvl3_s3MMZ } in
                  let {
                    w2_X3xwv :: L.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    w2_X3xwv
                      = \ (a1_a3ngt :: L.Lexeme) ->
                          case a1_a3ngt of wild_X5U {
                            __DEFAULT ->
                              ((((convert_a3K88 wild_X5U)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Float>_R
                                         :: (ReadPrec Float :: *) ~R# (Prec -> P.ReadP Float :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Float>_R
                                       :: (P.ReadP Float :: *)
                                          ~R# (forall b.
                                               (Float -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU k1_a3ngs;
                            L.Symbol ds_d3L3U ->
                              case ds_d3L3U of {
                                [] ->
                                  ((((convert_a3K88 wild_X5U)
                                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Float>_R
                                             :: (ReadPrec Float :: *)
                                                ~R# (Prec -> P.ReadP Float :: *)))
                                      n_a3tm4)
                                   `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Float>_R
                                           :: (P.ReadP Float :: *)
                                              ~R# (forall b.
                                                   (Float -> Text.ParserCombinators.ReadP.P b)
                                                   -> Text.ParserCombinators.ReadP.P b :: *)))
                                    @ b1_a3nIU k1_a3ngs;
                                : ds1_d3L3V ds2_d3L3W ->
                                  case ds1_d3L3V of { C# ds3_d3L3X ->
                                  case ds3_d3L3X of {
                                    __DEFAULT ->
                                      ((((convert_a3K88 wild_X5U)
                                         `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Float>_R
                                                 :: (ReadPrec Float :: *)
                                                    ~R# (Prec -> P.ReadP Float :: *)))
                                          n_a3tm4)
                                       `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Float>_R
                                               :: (P.ReadP Float :: *)
                                                  ~R# (forall b.
                                                       (Float -> Text.ParserCombinators.ReadP.P b)
                                                       -> Text.ParserCombinators.ReadP.P b :: *)))
                                        @ b1_a3nIU k1_a3ngs;
                                    '-'# ->
                                      case ds2_d3L3W of {
                                        [] -> lvl4_s3MJv;
                                        : ipv_s3LgW ipv1_s3LgX ->
                                          ((((convert_a3K88 wild_X5U)
                                             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Float>_R
                                                     :: (ReadPrec Float :: *)
                                                        ~R# (Prec -> P.ReadP Float :: *)))
                                              n_a3tm4)
                                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Float>_R
                                                   :: (P.ReadP Float :: *)
                                                      ~R# (forall b.
                                                           (Float
                                                            -> Text.ParserCombinators.ReadP.P b)
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b :: *)))
                                            @ b1_a3nIU k1_a3ngs
                                      }
                                  }
                                  }
                              }
                          } } in
                  let {
                    lvl117_X3wyb :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl117_X3wyb = w2_X3xwv Text.Read.Lex.EOF } in
                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b1_a3nIU
                    (Text.ParserCombinators.ReadP.Look
                       @ b1_a3nIU
                       (\ (a3_X3nkL :: String) ->
                          case a3_X3nkL of {
                            [] -> lvl117_X3wyb;
                            : ds1_i2Mqv ds2_i2Mqw ->
                              Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                          }))
                    (Text.Read.Lex.expect2 @ b1_a3nIU w2_X3xwv) } in
            let {
              k_X3w7K [Dmd=<L,C(U)>]
                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId,
               Arity=1,
               Str=<L,A>,
               Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                       WorkFree=True, Expandable=True,
                       Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                       Tmpl= \ _ [Occ=Dead] -> lvl116_X3wmi}]
              k_X3w7K = \ _ [Occ=Dead] -> lvl116_X3wmi } in
            Text.ParserCombinators.ReadP.Look
              @ b1_a3nIU
              (\ (a_a3ngt :: String) ->
                 Text.ParserCombinators.ReadP.skipSpaces2
                   a_a3ngt @ b1_a3nIU k_X3w7K))
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       <Float>_R)
                 :: (Prec
                     -> forall b.
                        (Float -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec Float :: *)))
        eta_B2
        @ b_a3ngn
        eta1_B1

-- RHS size: {terms: 108, types: 95, coercions: 33, joins: 0/10}
GHC.Read.$fReadInt_$sreadNumber
  :: (L.Lexeme -> ReadPrec Int)
     -> Prec
     -> forall b.
        (Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []]
GHC.Read.$fReadInt_$sreadNumber
  = \ (convert_a3K88 :: L.Lexeme -> ReadPrec Int)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1 :: Int -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      GHC.Read.list3
        @ Int
        ((\ (n_a3tm4 :: Prec)
            (@ b1_a3nIU)
            (k1_a3ngs :: Int -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
            let {
              lvl116_X3wmj :: Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId]
              lvl116_X3wmj
                = let {
                    lvl2_X3wmL :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl2_X3wmL
                      = let {
                          lvl3_s3Lv2 :: Int -> Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId,
                           Arity=1,
                           Str=<L,1*U(U)>,
                           Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                                   WorkFree=True, Expandable=True,
                                   Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                                   Tmpl= \ (a1_X3nmX [Occ=Once] :: Int) ->
                                           k1_a3ngs (GHC.Num.$fNumInt_$cnegate a1_X3nmX)}]
                          lvl3_s3Lv2
                            = \ (a1_X3nmX :: Int) ->
                                k1_a3ngs (GHC.Num.$fNumInt_$cnegate a1_X3nmX) } in
                        let {
                          lvl117_X3wmJ :: Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId]
                          lvl117_X3wmJ
                            = ((((convert_a3K88 Text.Read.Lex.EOF)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Int>_R
                                         :: (ReadPrec Int :: *) ~R# (Prec -> P.ReadP Int :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Int>_R
                                       :: (P.ReadP Int :: *)
                                          ~R# (forall b.
                                               (Int -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU lvl3_s3Lv2 } in
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                          @ b1_a3nIU
                          (Text.ParserCombinators.ReadP.Look
                             @ b1_a3nIU
                             (\ (a3_X3nkL :: String) ->
                                case a3_X3nkL of {
                                  [] -> lvl117_X3wmJ;
                                  : ds1_i2Mqv ds2_i2Mqw ->
                                    Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                                }))
                          (Text.Read.Lex.expect2
                             @ b1_a3nIU
                             (\ (a1_X3nmQ :: L.Lexeme) ->
                                ((((convert_a3K88 a1_X3nmQ)
                                   `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Int>_R
                                           :: (ReadPrec Int :: *) ~R# (Prec -> P.ReadP Int :: *)))
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Int>_R
                                         :: (P.ReadP Int :: *)
                                            ~R# (forall b.
                                                 (Int -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b1_a3nIU lvl3_s3Lv2)) } in
                  let {
                    k_X3w8d [Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId,
                     Arity=1,
                     Str=<L,A>,
                     Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                             WorkFree=True, Expandable=True,
                             Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                             Tmpl= \ _ [Occ=Dead] -> lvl2_X3wmL}]
                    k_X3w8d = \ _ [Occ=Dead] -> lvl2_X3wmL } in
                  let {
                    lvl3_s3MNb :: String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    lvl3_s3MNb
                      = \ (a_X3nsQ :: String) ->
                          Text.ParserCombinators.ReadP.skipSpaces2
                            a_X3nsQ @ b1_a3nIU k_X3w8d } in
                  let {
                    lvl4_s3MJw :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Unf=OtherCon []]
                    lvl4_s3MJw
                      = Text.ParserCombinators.ReadP.Look @ b1_a3nIU lvl3_s3MNb } in
                  let {
                    w2_X3xww :: L.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    w2_X3xww
                      = \ (a1_a3ngt :: L.Lexeme) ->
                          case a1_a3ngt of wild_X5U {
                            __DEFAULT ->
                              ((((convert_a3K88 wild_X5U)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Int>_R
                                         :: (ReadPrec Int :: *) ~R# (Prec -> P.ReadP Int :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Int>_R
                                       :: (P.ReadP Int :: *)
                                          ~R# (forall b.
                                               (Int -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU k1_a3ngs;
                            L.Symbol ds_d3L3U ->
                              case ds_d3L3U of {
                                [] ->
                                  ((((convert_a3K88 wild_X5U)
                                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Int>_R
                                             :: (ReadPrec Int :: *) ~R# (Prec -> P.ReadP Int :: *)))
                                      n_a3tm4)
                                   `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Int>_R
                                           :: (P.ReadP Int :: *)
                                              ~R# (forall b.
                                                   (Int -> Text.ParserCombinators.ReadP.P b)
                                                   -> Text.ParserCombinators.ReadP.P b :: *)))
                                    @ b1_a3nIU k1_a3ngs;
                                : ds1_d3L3V ds2_d3L3W ->
                                  case ds1_d3L3V of { C# ds3_d3L3X ->
                                  case ds3_d3L3X of {
                                    __DEFAULT ->
                                      ((((convert_a3K88 wild_X5U)
                                         `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Int>_R
                                                 :: (ReadPrec Int :: *)
                                                    ~R# (Prec -> P.ReadP Int :: *)))
                                          n_a3tm4)
                                       `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Int>_R
                                               :: (P.ReadP Int :: *)
                                                  ~R# (forall b.
                                                       (Int -> Text.ParserCombinators.ReadP.P b)
                                                       -> Text.ParserCombinators.ReadP.P b :: *)))
                                        @ b1_a3nIU k1_a3ngs;
                                    '-'# ->
                                      case ds2_d3L3W of {
                                        [] -> lvl4_s3MJw;
                                        : ipv_s3LgW ipv1_s3LgX ->
                                          ((((convert_a3K88 wild_X5U)
                                             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Int>_R
                                                     :: (ReadPrec Int :: *)
                                                        ~R# (Prec -> P.ReadP Int :: *)))
                                              n_a3tm4)
                                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <Int>_R
                                                   :: (P.ReadP Int :: *)
                                                      ~R# (forall b.
                                                           (Int -> Text.ParserCombinators.ReadP.P b)
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b :: *)))
                                            @ b1_a3nIU k1_a3ngs
                                      }
                                  }
                                  }
                              }
                          } } in
                  let {
                    lvl117_X3wyd :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl117_X3wyd = w2_X3xww Text.Read.Lex.EOF } in
                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b1_a3nIU
                    (Text.ParserCombinators.ReadP.Look
                       @ b1_a3nIU
                       (\ (a3_X3nkL :: String) ->
                          case a3_X3nkL of {
                            [] -> lvl117_X3wyd;
                            : ds1_i2Mqv ds2_i2Mqw ->
                              Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                          }))
                    (Text.Read.Lex.expect2 @ b1_a3nIU w2_X3xww) } in
            let {
              k_X3w7L [Dmd=<L,C(U)>]
                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId,
               Arity=1,
               Str=<L,A>,
               Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                       WorkFree=True, Expandable=True,
                       Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                       Tmpl= \ _ [Occ=Dead] -> lvl116_X3wmj}]
              k_X3w7L = \ _ [Occ=Dead] -> lvl116_X3wmj } in
            Text.ParserCombinators.ReadP.Look
              @ b1_a3nIU
              (\ (a_a3ngt :: String) ->
                 Text.ParserCombinators.ReadP.skipSpaces2
                   a_a3ngt @ b1_a3nIU k_X3w7L))
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Int>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Int>_R)
                 :: (Prec
                     -> forall b.
                        (Int -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec Int :: *)))
        eta_B2
        @ b_a3ngn
        eta1_B1

-- RHS size: {terms: 111, types: 100, coercions: 33, joins: 0/10}
GHC.Read.readNumber1
  :: forall a.
     Num a =>
     (L.Lexeme -> ReadPrec a)
     -> Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []]
GHC.Read.readNumber1
  = \ (@ a_a3Kr6)
      ($dNum_a3Kr8 :: Num a_a3Kr6)
      (convert_a3K88 :: L.Lexeme -> ReadPrec a_a3Kr6)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1 :: a_a3Kr6 -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      GHC.Read.list3
        @ a_a3Kr6
        ((\ (n_a3tm4 :: Prec)
            (@ b1_a3nIU)
            (k1_a3ngs :: a_a3Kr6 -> Text.ParserCombinators.ReadP.P b1_a3nIU) ->
            let {
              lvl116_X3wmn :: Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId]
              lvl116_X3wmn
                = let {
                    lvl2_X3wmP :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl2_X3wmP
                      = let {
                          lvl3_s3Lv4 :: a_a3Kr6 -> Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId,
                           Arity=1,
                           Str=<L,U>,
                           Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                                   WorkFree=True, Expandable=True,
                                   Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                                   Tmpl= \ (a1_X3nmX [Occ=Once] :: a_a3Kr6) ->
                                           k1_a3ngs (negate @ a_a3Kr6 $dNum_a3Kr8 a1_X3nmX)}]
                          lvl3_s3Lv4
                            = \ (a1_X3nmX :: a_a3Kr6) ->
                                k1_a3ngs (negate @ a_a3Kr6 $dNum_a3Kr8 a1_X3nmX) } in
                        let {
                          lvl117_X3wmN :: Text.ParserCombinators.ReadP.P b1_a3nIU
                          [LclId]
                          lvl117_X3wmN
                            = ((((convert_a3K88 Text.Read.Lex.EOF)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3Kr6>_R
                                         :: (ReadPrec a_a3Kr6 :: *)
                                            ~R# (Prec -> P.ReadP a_a3Kr6 :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kr6>_R
                                       :: (P.ReadP a_a3Kr6 :: *)
                                          ~R# (forall b.
                                               (a_a3Kr6 -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU lvl3_s3Lv4 } in
                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                          @ b1_a3nIU
                          (Text.ParserCombinators.ReadP.Look
                             @ b1_a3nIU
                             (\ (a3_X3nkL :: String) ->
                                case a3_X3nkL of {
                                  [] -> lvl117_X3wmN;
                                  : ds1_i2Mqv ds2_i2Mqw ->
                                    Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                                }))
                          (Text.Read.Lex.expect2
                             @ b1_a3nIU
                             (\ (a1_X3nmQ :: L.Lexeme) ->
                                ((((convert_a3K88 a1_X3nmQ)
                                   `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3Kr6>_R
                                           :: (ReadPrec a_a3Kr6 :: *)
                                              ~R# (Prec -> P.ReadP a_a3Kr6 :: *)))
                                    n_a3tm4)
                                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kr6>_R
                                         :: (P.ReadP a_a3Kr6 :: *)
                                            ~R# (forall b.
                                                 (a_a3Kr6 -> Text.ParserCombinators.ReadP.P b)
                                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                                  @ b1_a3nIU lvl3_s3Lv4)) } in
                  let {
                    k_X3w8h [Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId,
                     Arity=1,
                     Str=<L,A>,
                     Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                             WorkFree=True, Expandable=True,
                             Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                             Tmpl= \ _ [Occ=Dead] -> lvl2_X3wmP}]
                    k_X3w8h = \ _ [Occ=Dead] -> lvl2_X3wmP } in
                  let {
                    lvl3_s3MNn :: String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    lvl3_s3MNn
                      = \ (a1_X3nsU :: String) ->
                          Text.ParserCombinators.ReadP.skipSpaces2
                            a1_X3nsU @ b1_a3nIU k_X3w8h } in
                  let {
                    lvl4_s3MJx :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Unf=OtherCon []]
                    lvl4_s3MJx
                      = Text.ParserCombinators.ReadP.Look @ b1_a3nIU lvl3_s3MNn } in
                  let {
                    w2_X3xwA :: L.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                    w2_X3xwA
                      = \ (a1_a3ngt :: L.Lexeme) ->
                          case a1_a3ngt of wild_X5U {
                            __DEFAULT ->
                              ((((convert_a3K88 wild_X5U)
                                 `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3Kr6>_R
                                         :: (ReadPrec a_a3Kr6 :: *)
                                            ~R# (Prec -> P.ReadP a_a3Kr6 :: *)))
                                  n_a3tm4)
                               `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kr6>_R
                                       :: (P.ReadP a_a3Kr6 :: *)
                                          ~R# (forall b.
                                               (a_a3Kr6 -> Text.ParserCombinators.ReadP.P b)
                                               -> Text.ParserCombinators.ReadP.P b :: *)))
                                @ b1_a3nIU k1_a3ngs;
                            L.Symbol ds_d3L3U ->
                              case ds_d3L3U of {
                                [] ->
                                  ((((convert_a3K88 wild_X5U)
                                     `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                 <a_a3Kr6>_R
                                             :: (ReadPrec a_a3Kr6 :: *)
                                                ~R# (Prec -> P.ReadP a_a3Kr6 :: *)))
                                      n_a3tm4)
                                   `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kr6>_R
                                           :: (P.ReadP a_a3Kr6 :: *)
                                              ~R# (forall b.
                                                   (a_a3Kr6 -> Text.ParserCombinators.ReadP.P b)
                                                   -> Text.ParserCombinators.ReadP.P b :: *)))
                                    @ b1_a3nIU k1_a3ngs;
                                : ds1_d3L3V ds2_d3L3W ->
                                  case ds1_d3L3V of { C# ds3_d3L3X ->
                                  case ds3_d3L3X of {
                                    __DEFAULT ->
                                      ((((convert_a3K88 wild_X5U)
                                         `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <a_a3Kr6>_R
                                                 :: (ReadPrec a_a3Kr6 :: *)
                                                    ~R# (Prec -> P.ReadP a_a3Kr6 :: *)))
                                          n_a3tm4)
                                       `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Kr6>_R
                                               :: (P.ReadP a_a3Kr6 :: *)
                                                  ~R# (forall b.
                                                       (a_a3Kr6 -> Text.ParserCombinators.ReadP.P b)
                                                       -> Text.ParserCombinators.ReadP.P b :: *)))
                                        @ b1_a3nIU k1_a3ngs;
                                    '-'# ->
                                      case ds2_d3L3W of {
                                        [] -> lvl4_s3MJx;
                                        : ipv_s3LgW ipv1_s3LgX ->
                                          ((((convert_a3K88 wild_X5U)
                                             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <a_a3Kr6>_R
                                                     :: (ReadPrec a_a3Kr6 :: *)
                                                        ~R# (Prec -> P.ReadP a_a3Kr6 :: *)))
                                              n_a3tm4)
                                           `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <a_a3Kr6>_R
                                                   :: (P.ReadP a_a3Kr6 :: *)
                                                      ~R# (forall b.
                                                           (a_a3Kr6
                                                            -> Text.ParserCombinators.ReadP.P b)
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b :: *)))
                                            @ b1_a3nIU k1_a3ngs
                                      }
                                  }
                                  }
                              }
                          } } in
                  let {
                    lvl117_X3wyl :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId]
                    lvl117_X3wyl = w2_X3xwA Text.Read.Lex.EOF } in
                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b1_a3nIU
                    (Text.ParserCombinators.ReadP.Look
                       @ b1_a3nIU
                       (\ (a3_X3nkL :: String) ->
                          case a3_X3nkL of {
                            [] -> lvl117_X3wyl;
                            : ds1_i2Mqv ds2_i2Mqw ->
                              Text.ParserCombinators.ReadP.Fail @ b1_a3nIU
                          }))
                    (Text.Read.Lex.expect2 @ b1_a3nIU w2_X3xwA) } in
            let {
              k_X3w7P [Dmd=<L,C(U)>]
                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
              [LclId,
               Arity=1,
               Str=<L,A>,
               Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                       WorkFree=True, Expandable=True,
                       Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                       Tmpl= \ _ [Occ=Dead] -> lvl116_X3wmn}]
              k_X3w7P = \ _ [Occ=Dead] -> lvl116_X3wmn } in
            Text.ParserCombinators.ReadP.Look
              @ b1_a3nIU
              (\ (a1_a3ngt :: String) ->
                 Text.ParserCombinators.ReadP.skipSpaces2
                   a1_a3ngt @ b1_a3nIU k_X3w7P))
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <a_a3Kr6>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <a_a3Kr6>_R)
                 :: (Prec
                     -> forall b.
                        (a_a3Kr6 -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec a_a3Kr6 :: *)))
        eta_B2
        @ b_a3ngn
        eta1_B1

-- RHS size: {terms: 1, types: 0, coercions: 19, joins: 0/0}
readNumber
  :: forall a. Num a => (L.Lexeme -> ReadPrec a) -> ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Read.readNumber1
               `cast` (forall (a :: <*>_N).
                       <Num a>_R
                       ->_R <L.Lexeme -> ReadPrec a>_R
                       ->_R (<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <a>_R)
                       :: (forall a.
                           Num a =>
                           (L.Lexeme -> ReadPrec a)
                           -> Prec
                           -> forall b.
                              (a -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b :: *)
                          ~R# (forall a.
                               Num a =>
                               (L.Lexeme -> ReadPrec a) -> ReadPrec a :: *))}]
readNumber
  = GHC.Read.readNumber1
    `cast` (forall (a :: <*>_N).
            <Num a>_R
            ->_R <L.Lexeme -> ReadPrec a>_R
            ->_R (<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <a>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
            :: (forall a.
                Num a =>
                (L.Lexeme -> ReadPrec a)
                -> Prec
                -> forall b.
                   (a -> Text.ParserCombinators.ReadP.P b)
                   -> Text.ParserCombinators.ReadP.P b :: *)
               ~R# (forall a.
                    Num a =>
                    (L.Lexeme -> ReadPrec a) -> ReadPrec a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory152 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory152 = "UppercaseLetter"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory151 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory151
  = unpackCString# GHC.Read.$fReadGeneralCategory152

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory150
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.UppercaseLetter}]
GHC.Read.$fReadGeneralCategory150
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.UppercaseLetter

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory149
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory149
  = (GHC.Read.$fReadGeneralCategory151,
     GHC.Read.$fReadGeneralCategory150
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory148 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory148 = "LowercaseLetter"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory147 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory147
  = unpackCString# GHC.Read.$fReadGeneralCategory148

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory146
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.LowercaseLetter}]
GHC.Read.$fReadGeneralCategory146
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.LowercaseLetter

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory145
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory145
  = (GHC.Read.$fReadGeneralCategory147,
     GHC.Read.$fReadGeneralCategory146
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory144 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory144 = "TitlecaseLetter"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory143 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory143
  = unpackCString# GHC.Read.$fReadGeneralCategory144

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory142
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.TitlecaseLetter}]
GHC.Read.$fReadGeneralCategory142
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.TitlecaseLetter

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory141
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory141
  = (GHC.Read.$fReadGeneralCategory143,
     GHC.Read.$fReadGeneralCategory142
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory140 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory140 = "ModifierLetter"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory139 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory139
  = unpackCString# GHC.Read.$fReadGeneralCategory140

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory138
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.ModifierLetter}]
GHC.Read.$fReadGeneralCategory138
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.ModifierLetter

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory137
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory137
  = (GHC.Read.$fReadGeneralCategory139,
     GHC.Read.$fReadGeneralCategory138
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory136 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory136 = "OtherLetter"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory135 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory135
  = unpackCString# GHC.Read.$fReadGeneralCategory136

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory134
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.OtherLetter}]
GHC.Read.$fReadGeneralCategory134
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.OtherLetter

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory133
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory133
  = (GHC.Read.$fReadGeneralCategory135,
     GHC.Read.$fReadGeneralCategory134
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory132 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory132 = "NonSpacingMark"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory131 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory131
  = unpackCString# GHC.Read.$fReadGeneralCategory132

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory130
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.NonSpacingMark}]
GHC.Read.$fReadGeneralCategory130
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.NonSpacingMark

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory129
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory129
  = (GHC.Read.$fReadGeneralCategory131,
     GHC.Read.$fReadGeneralCategory130
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory128 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Read.$fReadGeneralCategory128 = "SpacingCombiningMark"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory127 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory127
  = unpackCString# GHC.Read.$fReadGeneralCategory128

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory126
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.SpacingCombiningMark}]
GHC.Read.$fReadGeneralCategory126
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.SpacingCombiningMark

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory125
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory125
  = (GHC.Read.$fReadGeneralCategory127,
     GHC.Read.$fReadGeneralCategory126
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory124 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory124 = "EnclosingMark"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory123 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory123
  = unpackCString# GHC.Read.$fReadGeneralCategory124

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory122
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.EnclosingMark}]
GHC.Read.$fReadGeneralCategory122
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.EnclosingMark

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory121
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory121
  = (GHC.Read.$fReadGeneralCategory123,
     GHC.Read.$fReadGeneralCategory122
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory120 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory120 = "DecimalNumber"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory119 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory119
  = unpackCString# GHC.Read.$fReadGeneralCategory120

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory118
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.DecimalNumber}]
GHC.Read.$fReadGeneralCategory118
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.DecimalNumber

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory117
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory117
  = (GHC.Read.$fReadGeneralCategory119,
     GHC.Read.$fReadGeneralCategory118
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory116 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory116 = "LetterNumber"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory115 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory115
  = unpackCString# GHC.Read.$fReadGeneralCategory116

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory114
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.LetterNumber}]
GHC.Read.$fReadGeneralCategory114
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.LetterNumber

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory113
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory113
  = (GHC.Read.$fReadGeneralCategory115,
     GHC.Read.$fReadGeneralCategory114
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory112 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory112 = "OtherNumber"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory111 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory111
  = unpackCString# GHC.Read.$fReadGeneralCategory112

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory110
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.OtherNumber}]
GHC.Read.$fReadGeneralCategory110
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.OtherNumber

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory109
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory109
  = (GHC.Read.$fReadGeneralCategory111,
     GHC.Read.$fReadGeneralCategory110
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory108 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Read.$fReadGeneralCategory108 = "ConnectorPunctuation"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory107 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory107
  = unpackCString# GHC.Read.$fReadGeneralCategory108

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory106
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.ConnectorPunctuation}]
GHC.Read.$fReadGeneralCategory106
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.ConnectorPunctuation

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory105
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory105
  = (GHC.Read.$fReadGeneralCategory107,
     GHC.Read.$fReadGeneralCategory106
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory104 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory104 = "DashPunctuation"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory103 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory103
  = unpackCString# GHC.Read.$fReadGeneralCategory104

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory102
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.DashPunctuation}]
GHC.Read.$fReadGeneralCategory102
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.DashPunctuation

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory101
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory101
  = (GHC.Read.$fReadGeneralCategory103,
     GHC.Read.$fReadGeneralCategory102
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory100 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory100 = "OpenPunctuation"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory99 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory99
  = unpackCString# GHC.Read.$fReadGeneralCategory100

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory98
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.OpenPunctuation}]
GHC.Read.$fReadGeneralCategory98
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.OpenPunctuation

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory97
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory97
  = (GHC.Read.$fReadGeneralCategory99,
     GHC.Read.$fReadGeneralCategory98
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory96 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory96 = "ClosePunctuation"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory95 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory95
  = unpackCString# GHC.Read.$fReadGeneralCategory96

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory94
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.ClosePunctuation}]
GHC.Read.$fReadGeneralCategory94
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.ClosePunctuation

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory93
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory93
  = (GHC.Read.$fReadGeneralCategory95,
     GHC.Read.$fReadGeneralCategory94
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory92 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory92 = "InitialQuote"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory91 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory91
  = unpackCString# GHC.Read.$fReadGeneralCategory92

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory90
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.InitialQuote}]
GHC.Read.$fReadGeneralCategory90
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.InitialQuote

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory89
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory89
  = (GHC.Read.$fReadGeneralCategory91,
     GHC.Read.$fReadGeneralCategory90
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory88 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory88 = "FinalQuote"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory87 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory87
  = unpackCString# GHC.Read.$fReadGeneralCategory88

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory86
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.FinalQuote}]
GHC.Read.$fReadGeneralCategory86
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.FinalQuote

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory85
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory85
  = (GHC.Read.$fReadGeneralCategory87,
     GHC.Read.$fReadGeneralCategory86
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory84 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory84 = "OtherPunctuation"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory83 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory83
  = unpackCString# GHC.Read.$fReadGeneralCategory84

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory82
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.OtherPunctuation}]
GHC.Read.$fReadGeneralCategory82
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.OtherPunctuation

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory81
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory81
  = (GHC.Read.$fReadGeneralCategory83,
     GHC.Read.$fReadGeneralCategory82
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory80 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory80 = "MathSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory79 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory79
  = unpackCString# GHC.Read.$fReadGeneralCategory80

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory78
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.MathSymbol}]
GHC.Read.$fReadGeneralCategory78
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.MathSymbol

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory77
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory77
  = (GHC.Read.$fReadGeneralCategory79,
     GHC.Read.$fReadGeneralCategory78
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory76 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory76 = "CurrencySymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory75 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory75
  = unpackCString# GHC.Read.$fReadGeneralCategory76

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory74
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.CurrencySymbol}]
GHC.Read.$fReadGeneralCategory74
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.CurrencySymbol

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory73
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory73
  = (GHC.Read.$fReadGeneralCategory75,
     GHC.Read.$fReadGeneralCategory74
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory72 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory72 = "ModifierSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory71 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory71
  = unpackCString# GHC.Read.$fReadGeneralCategory72

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory70
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.ModifierSymbol}]
GHC.Read.$fReadGeneralCategory70
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.ModifierSymbol

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory69
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory69
  = (GHC.Read.$fReadGeneralCategory71,
     GHC.Read.$fReadGeneralCategory70
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory68 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory68 = "OtherSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory67 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory67
  = unpackCString# GHC.Read.$fReadGeneralCategory68

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory66
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.OtherSymbol}]
GHC.Read.$fReadGeneralCategory66
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.OtherSymbol

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory65
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory65
  = (GHC.Read.$fReadGeneralCategory67,
     GHC.Read.$fReadGeneralCategory66
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory64 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadGeneralCategory64 = "Space"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory63 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory63
  = unpackCString# GHC.Read.$fReadGeneralCategory64

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory62
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.Space}]
GHC.Read.$fReadGeneralCategory62
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.Space

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory61
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory61
  = (GHC.Read.$fReadGeneralCategory63,
     GHC.Read.$fReadGeneralCategory62
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory60 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Read.$fReadGeneralCategory60 = "LineSeparator"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory59 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory59
  = unpackCString# GHC.Read.$fReadGeneralCategory60

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory58
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.LineSeparator}]
GHC.Read.$fReadGeneralCategory58
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.LineSeparator

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory57
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory57
  = (GHC.Read.$fReadGeneralCategory59,
     GHC.Read.$fReadGeneralCategory58
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory56 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Read.$fReadGeneralCategory56 = "ParagraphSeparator"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory55 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory55
  = unpackCString# GHC.Read.$fReadGeneralCategory56

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory54
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.ParagraphSeparator}]
GHC.Read.$fReadGeneralCategory54
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.ParagraphSeparator

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory53
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory53
  = (GHC.Read.$fReadGeneralCategory55,
     GHC.Read.$fReadGeneralCategory54
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory52 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadGeneralCategory52 = "Control"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory51 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory51
  = unpackCString# GHC.Read.$fReadGeneralCategory52

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory50
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.Control}]
GHC.Read.$fReadGeneralCategory50
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.Control

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory49
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory49
  = (GHC.Read.$fReadGeneralCategory51,
     GHC.Read.$fReadGeneralCategory50
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory48 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadGeneralCategory48 = "Format"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory47 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory47
  = unpackCString# GHC.Read.$fReadGeneralCategory48

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory46
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.Format}]
GHC.Read.$fReadGeneralCategory46
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.Format

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory45
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory45
  = (GHC.Read.$fReadGeneralCategory47,
     GHC.Read.$fReadGeneralCategory46
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory44 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory44 = "Surrogate"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory43 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory43
  = unpackCString# GHC.Read.$fReadGeneralCategory44

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory42
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.Surrogate}]
GHC.Read.$fReadGeneralCategory42
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.Surrogate

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory41
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory41
  = (GHC.Read.$fReadGeneralCategory43,
     GHC.Read.$fReadGeneralCategory42
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory40 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory40 = "PrivateUse"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory39 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory39
  = unpackCString# GHC.Read.$fReadGeneralCategory40

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory38
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.PrivateUse}]
GHC.Read.$fReadGeneralCategory38
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.PrivateUse

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory37
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory37
  = (GHC.Read.$fReadGeneralCategory39,
     GHC.Read.$fReadGeneralCategory38
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory35 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadGeneralCategory35 = "NotAssigned"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory34 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory34
  = unpackCString# GHC.Read.$fReadGeneralCategory35

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory33
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Unicode.NotAssigned}]
GHC.Read.$fReadGeneralCategory33
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw
         :: GeneralCategory -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Unicode.NotAssigned

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory32
  :: ([Char], ReadPrec GeneralCategory)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$fReadGeneralCategory32
  = (GHC.Read.$fReadGeneralCategory34,
     GHC.Read.$fReadGeneralCategory33
     `cast` ((<Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <GeneralCategory>_R)
             :: (Prec
                 -> forall b.
                    (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 2, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory31 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory31
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory32
      ((Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
          @ GeneralCategory)
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                               <GeneralCategory>_R)
               :: (Prec
                   -> forall b.
                      (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory30 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory30
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory37
      (GHC.Read.$fReadGeneralCategory31
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory29 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory29
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory41
      (GHC.Read.$fReadGeneralCategory30
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory28 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory28
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory45
      (GHC.Read.$fReadGeneralCategory29
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory27 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory27
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory49
      (GHC.Read.$fReadGeneralCategory28
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory26 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory26
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory53
      (GHC.Read.$fReadGeneralCategory27
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory25 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory25
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory57
      (GHC.Read.$fReadGeneralCategory26
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory24 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory24
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory61
      (GHC.Read.$fReadGeneralCategory25
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory23 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory23
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory65
      (GHC.Read.$fReadGeneralCategory24
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory22 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory22
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory69
      (GHC.Read.$fReadGeneralCategory23
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory21 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory21
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory73
      (GHC.Read.$fReadGeneralCategory22
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory20 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory20
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory77
      (GHC.Read.$fReadGeneralCategory21
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory19 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory19
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory81
      (GHC.Read.$fReadGeneralCategory20
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory18 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory18
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory85
      (GHC.Read.$fReadGeneralCategory19
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory17 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory17
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory89
      (GHC.Read.$fReadGeneralCategory18
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory16 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory16
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory93
      (GHC.Read.$fReadGeneralCategory17
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory15 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory15
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory97
      (GHC.Read.$fReadGeneralCategory16
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory14 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory14
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory101
      (GHC.Read.$fReadGeneralCategory15
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory13 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory13
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory105
      (GHC.Read.$fReadGeneralCategory14
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory12 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory12
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory109
      (GHC.Read.$fReadGeneralCategory13
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory11 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory11
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory113
      (GHC.Read.$fReadGeneralCategory12
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory10 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory10
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory117
      (GHC.Read.$fReadGeneralCategory11
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory9 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory9
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory121
      (GHC.Read.$fReadGeneralCategory10
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory8 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory8
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory125
      (GHC.Read.$fReadGeneralCategory9
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory7 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory7
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory129
      (GHC.Read.$fReadGeneralCategory8
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory6 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory6
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory133
      (GHC.Read.$fReadGeneralCategory7
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory5 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory5
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory137
      (GHC.Read.$fReadGeneralCategory6
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory4 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory4
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory141
      (GHC.Read.$fReadGeneralCategory5
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory3 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory3
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory145
      (GHC.Read.$fReadGeneralCategory4
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory2 :: Prec -> P.ReadP GeneralCategory
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
GHC.Read.$fReadGeneralCategory2
  = GHC.Read.$fReadGeneralCategory36
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory149
      (GHC.Read.$fReadGeneralCategory3
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory1
  :: Prec
     -> forall b.
        (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadGeneralCategory1
  = GHC.Read.list3
      @ GeneralCategory
      (GHC.Read.$fReadGeneralCategory2
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <GeneralCategory>_R)
               :: (Prec -> P.ReadP GeneralCategory :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 3, joins: 0/0}
GHC.Read.$fReadGeneralCategory_$creadsPrec
  :: Int -> ReadS GeneralCategory
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ GeneralCategory
                   (GHC.Read.list3
                      @ GeneralCategory
                      (GHC.Read.$fReadGeneralCategory2
                       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                        <GeneralCategory>_R)
                               :: (Prec -> P.ReadP GeneralCategory :: *)
                                  ~R# (ReadPrec GeneralCategory :: *)))
                      n_a3tmE
                      @ GeneralCategory
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ GeneralCategory))}]
GHC.Read.$fReadGeneralCategory_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ GeneralCategory
        (GHC.Read.list3
           @ GeneralCategory
           (GHC.Read.$fReadGeneralCategory2
            `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <GeneralCategory>_R)
                    :: (Prec -> P.ReadP GeneralCategory :: *)
                       ~R# (ReadPrec GeneralCategory :: *)))
           n_a3tmE
           @ GeneralCategory
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ GeneralCategory))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory_$creadListPrec
  :: ReadPrec [GeneralCategory]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadGeneralCategory_$creadListPrec
  = list
      @ GeneralCategory
      (GHC.Read.$fReadGeneralCategory1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                               <GeneralCategory>_R)
               :: (Prec
                   -> forall b.
                      (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fReadGeneralCategory153
  :: Text.ParserCombinators.ReadP.P [GeneralCategory]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadGeneralCategory153
  = (((GHC.Read.$fReadGeneralCategory_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                   <[GeneralCategory]>_R
               :: (ReadPrec [GeneralCategory] :: *)
                  ~R# (Prec -> P.ReadP [GeneralCategory] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                 <[GeneralCategory]>_R
             :: (P.ReadP [GeneralCategory] :: *)
                ~R# (forall b.
                     ([GeneralCategory] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [GeneralCategory]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
         @ [GeneralCategory])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadGeneralCategory_$creadList
  :: ReadS [GeneralCategory]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadGeneralCategory_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [GeneralCategory] GHC.Read.$fReadGeneralCategory153

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadGeneralCategory [InlPrag=NOUSERINLINE CONLIKE]
  :: Read GeneralCategory
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: GeneralCategory
                       GHC.Read.$fReadGeneralCategory_$creadsPrec
                       GHC.Read.$fReadGeneralCategory_$creadList
                       GHC.Read.$fReadGeneralCategory1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                               <GeneralCategory>_R)
                               :: (Prec
                                   -> forall b.
                                      (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec GeneralCategory :: *))
                       GHC.Read.$fReadGeneralCategory_$creadListPrec]
GHC.Read.$fReadGeneralCategory
  = GHC.Read.C:Read
      @ GeneralCategory
      GHC.Read.$fReadGeneralCategory_$creadsPrec
      GHC.Read.$fReadGeneralCategory_$creadList
      (GHC.Read.$fReadGeneralCategory1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <GeneralCategory>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                               <GeneralCategory>_R)
               :: (Prec
                   -> forall b.
                      (GeneralCategory -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec GeneralCategory :: *)))
      GHC.Read.$fReadGeneralCategory_$creadListPrec

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fRead()4
  :: Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: () -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Tuple.()}]
GHC.Read.$fRead()4
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw :: () -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Tuple.()

-- RHS size: {terms: 11, types: 17, coercions: 9, joins: 0/0}
GHC.Read.$fRead()3
  :: Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 60 20}]
GHC.Read.$fRead()3
  = \ (w_s3MoQ :: Prec)
      (@ b_s3MoR)
      (w1_s3MoS :: () -> Text.ParserCombinators.ReadP.P b_s3MoR) ->
      case GHC.Read.$wparen'
             @ ()
             (GHC.Read.$fRead()4
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <()>_R)
                      :: (Prec
                          -> forall b.
                             (() -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec () :: *)))
             w_s3MoQ
             @ b_s3MoR
             w1_s3MoS
      of
      { (# ww1_s3Mvv #) ->
      Text.ParserCombinators.ReadP.Get @ b_s3MoR ww1_s3Mvv
      }

-- RHS size: {terms: 11, types: 17, coercions: 9, joins: 0/0}
GHC.Read.$fRead()2
  :: Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (eta_X5Y [Occ=Once] :: Prec)
                 (@ b_a3ngn)
                 (eta1_X5Z [Occ=Once]
                    :: () -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
                 GHC.Read.$fRead()5
                   @ ()
                   (GHC.Read.$fRead()3
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                               <()>_R)
                            :: (Prec
                                -> forall b.
                                   (() -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec () :: *)))
                   eta_X5Y
                   @ b_a3ngn
                   eta1_X5Z}]
GHC.Read.$fRead()2
  = \ (eta_X5Y :: Prec)
      (@ b_a3ngn)
      (eta1_X5Z :: () -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      case GHC.Read.$wskipSpacesThenP
             @ ()
             (GHC.Read.$fRead()3
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <()>_R)
                      :: (Prec
                          -> forall b.
                             (() -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec () :: *)))
             eta_X5Y
             @ b_a3ngn
             eta1_X5Z
      of
      { (# ww1_s3Mvt #) ->
      Text.ParserCombinators.ReadP.Look @ b_a3ngn ww1_s3Mvt
      }

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fRead()1
  :: Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fRead()1
  = GHC.Read.list3
      @ ()
      (GHC.Read.$fRead()2
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <()>_R)
               :: (Prec
                   -> forall b.
                      (() -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec () :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 9, joins: 0/0}
GHC.Read.$fRead()_$creadsPrec :: Int -> ReadS ()
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ ()
                   (GHC.Read.list3
                      @ ()
                      (GHC.Read.$fRead()2
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <()>_R)
                               :: (Prec
                                   -> forall b.
                                      (() -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec () :: *)))
                      n_a3tmE
                      @ ()
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ ()))}]
GHC.Read.$fRead()_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ ()
        (GHC.Read.list3
           @ ()
           (GHC.Read.$fRead()2
            `cast` ((<Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       <()>_R)
                    :: (Prec
                        -> forall b.
                           (() -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (ReadPrec () :: *)))
           n_a3tmE
           @ ()
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ ()))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fRead()_$creadListPrec :: ReadPrec [()]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fRead()_$creadListPrec
  = list
      @ ()
      (GHC.Read.$fRead()1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <()>_R)
               :: (Prec
                   -> forall b.
                      (() -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec () :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fRead()6 :: Text.ParserCombinators.ReadP.P [()]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fRead()6
  = (((GHC.Read.$fRead()_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[()]>_R
               :: (ReadPrec [()] :: *) ~R# (Prec -> P.ReadP [()] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[()]>_R
             :: (P.ReadP [()] :: *)
                ~R# (forall b.
                     ([()] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [()] (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [()])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fRead()_$creadList :: ReadS [()]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fRead()_$creadList
  = Text.ParserCombinators.ReadP.run @ [()] GHC.Read.$fRead()6

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fRead() [InlPrag=NOUSERINLINE CONLIKE] :: Read ()
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: ()
                       GHC.Read.$fRead()_$creadsPrec
                       GHC.Read.$fRead()_$creadList
                       GHC.Read.$fRead()1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <()>_R)
                               :: (Prec
                                   -> forall b.
                                      (() -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec () :: *))
                       GHC.Read.$fRead()_$creadListPrec]
GHC.Read.$fRead()
  = GHC.Read.C:Read
      @ ()
      GHC.Read.$fRead()_$creadsPrec
      GHC.Read.$fRead()_$creadList
      (GHC.Read.$fRead()1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <()>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <()>_R)
               :: (Prec
                   -> forall b.
                      (() -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec () :: *)))
      GHC.Read.$fRead()_$creadListPrec

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadRatio5 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadRatio5 = GHC.Types.I# 8#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadRatio4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadRatio4 = "%"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadRatio3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadRatio3 = unpackCString# GHC.Read.$fReadRatio4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadRatio2 :: L.Lexeme
[GblId,
 Str=m5,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadRatio2 = Text.Read.Lex.Symbol GHC.Read.$fReadRatio3

-- RHS size: {terms: 42, types: 46, coercions: 17, joins: 0/1}
GHC.Read.$fReadRatio1
  :: forall a.
     (Integral a, Read a) =>
     Prec
     -> forall b.
        (Ratio a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30 0 0] 311 0}]
GHC.Read.$fReadRatio1
  = \ (@ a_a3KOR)
      ($dIntegral_a3KOS :: Integral a_a3KOR)
      ($dRead_a3KOT :: Read a_a3KOR)
      (eta_B2 :: Prec)
      (@ b_X3nsg)
      (eta1_B1
         :: Ratio a_a3KOR -> Text.ParserCombinators.ReadP.P b_X3nsg) ->
      GHC.Read.list3
        @ (Ratio a_a3KOR)
        (let {
           ds1_s3Lrq [Dmd=<L,C(U)>] :: P.ReadP a_a3KOR
           [LclId]
           ds1_s3Lrq
             = ((readPrec @ a_a3KOR $dRead_a3KOT)
                `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3KOR>_R
                        :: (ReadPrec a_a3KOR :: *) ~R# (Prec -> P.ReadP a_a3KOR :: *)))
                 GHC.Read.$fReadRatio5 } in
         (\ (c_a3tmt :: Prec)
            (@ b1_a3ngn)
            (eta2_Xdl
               :: Ratio a_a3KOR -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
            case c_a3tmt of { I# x_at1e ->
            case <=# x_at1e 7# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_a3ngn;
              1# ->
                (ds1_s3Lrq
                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3KOR>_R
                         :: (P.ReadP a_a3KOR :: *)
                            ~R# (forall b.
                                 (a_a3KOR -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                  @ b1_a3ngn
                  (\ (a1_a3ngt :: a_a3KOR) ->
                     case Text.Read.Lex.$wexpect
                            GHC.Read.$fReadRatio2
                            @ b1_a3ngn
                            (\ _ [Occ=Dead, OS=OneShot] ->
                               (ds1_s3Lrq
                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3KOR>_R
                                        :: (P.ReadP a_a3KOR :: *)
                                           ~R# (forall b.
                                                (a_a3KOR -> Text.ParserCombinators.ReadP.P b)
                                                -> Text.ParserCombinators.ReadP.P b :: *)))
                                 @ b1_a3ngn
                                 (\ (a3_X3nmY :: a_a3KOR) ->
                                    eta2_Xdl (% @ a_a3KOR $dIntegral_a3KOS a1_a3ngt a3_X3nmY)))
                     of
                     { (# ww1_s3xlt #) ->
                     Text.ParserCombinators.ReadP.Look @ b1_a3ngn ww1_s3xlt
                     })
            }
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Ratio
                                   a_a3KOR>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Ratio a_a3KOR>_R)
                 :: (Prec
                     -> forall b.
                        (Ratio a_a3KOR -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Ratio a_a3KOR) :: *)))
        eta_B2
        @ b_X3nsg
        eta1_B1

-- RHS size: {terms: 10, types: 14, coercions: 0, joins: 0/0}
GHC.Read.$fReadRatio_$creadsPrec
  :: forall a. (Integral a, Read a) => Int -> ReadS (Ratio a)
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L0L)
                 ($dIntegral_X3L0N [Occ=Once] :: Integral a_X3L0L)
                 ($dRead_X3L0P [Occ=Once] :: Read a_X3L0L)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (Ratio a_X3L0L)
                   (GHC.Read.$fReadRatio1
                      @ a_X3L0L
                      $dIntegral_X3L0N
                      $dRead_X3L0P
                      n_a3tmE
                      @ (Ratio a_X3L0L)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (Ratio a_X3L0L)))}]
GHC.Read.$fReadRatio_$creadsPrec
  = \ (@ a_X3L0L)
      ($dIntegral_X3L0N :: Integral a_X3L0L)
      ($dRead_X3L0P :: Read a_X3L0L)
      (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (Ratio a_X3L0L)
        (GHC.Read.$fReadRatio1
           @ a_X3L0L
           $dIntegral_X3L0N
           $dRead_X3L0P
           n_a3tmE
           @ (Ratio a_X3L0L)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (Ratio a_X3L0L)))

-- RHS size: {terms: 7, types: 9, coercions: 11, joins: 0/0}
GHC.Read.$fReadRatio_$creadListPrec
  :: forall a. (Integral a, Read a) => ReadPrec [Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L0M)
                 ($dIntegral_X3L0O [Occ=Once] :: Integral a_X3L0M)
                 ($dRead_X3L0Q [Occ=Once] :: Read a_X3L0M) ->
                 list
                   @ (Ratio a_X3L0M)
                   ((GHC.Read.$fReadRatio1 @ a_X3L0M $dIntegral_X3L0O $dRead_X3L0Q)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Ratio
                                              a_X3L0M>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Ratio a_X3L0M>_R)
                            :: (Prec
                                -> forall b.
                                   (Ratio a_X3L0M -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (Ratio a_X3L0M) :: *)))}]
GHC.Read.$fReadRatio_$creadListPrec
  = \ (@ a_X3L0M)
      ($dIntegral_X3L0O :: Integral a_X3L0M)
      ($dRead_X3L0Q :: Read a_X3L0M) ->
      list
        @ (Ratio a_X3L0M)
        ((GHC.Read.$fReadRatio1 @ a_X3L0M $dIntegral_X3L0O $dRead_X3L0Q)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Ratio
                                   a_X3L0M>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Ratio a_X3L0M>_R)
                 :: (Prec
                     -> forall b.
                        (Ratio a_X3L0M -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Ratio a_X3L0M) :: *)))

-- RHS size: {terms: 10, types: 18, coercions: 19, joins: 0/0}
GHC.Read.$fReadRatio_$creadList
  :: forall a. (Integral a, Read a) => ReadS [Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L0N)
                 ($dIntegral_X3L0P [Occ=Once] :: Integral a_X3L0N)
                 ($dRead_X3L0R [Occ=Once] :: Read a_X3L0N) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Ratio a_X3L0N]
                   (((((list
                          @ (Ratio a_X3L0N)
                          ((GHC.Read.$fReadRatio1 @ a_X3L0N $dIntegral_X3L0P $dRead_X3L0R)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <Ratio
                                                     a_X3L0N>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <Ratio a_X3L0N>_R)
                                   :: (Prec
                                       -> forall b.
                                          (Ratio a_X3L0N -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec (Ratio a_X3L0N) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Ratio a_X3L0N]>_R
                               :: (ReadPrec [Ratio a_X3L0N] :: *)
                                  ~R# (Prec -> P.ReadP [Ratio a_X3L0N] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Ratio a_X3L0N]>_R
                             :: (P.ReadP [Ratio a_X3L0N] :: *)
                                ~R# (forall b.
                                     ([Ratio a_X3L0N] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Ratio a_X3L0N]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Ratio a_X3L0N]))}]
GHC.Read.$fReadRatio_$creadList
  = \ (@ a_X3L0N)
      ($dIntegral_X3L0P :: Integral a_X3L0N)
      ($dRead_X3L0R :: Read a_X3L0N) ->
      Text.ParserCombinators.ReadP.run
        @ [Ratio a_X3L0N]
        (((((list
               @ (Ratio a_X3L0N)
               ((GHC.Read.$fReadRatio1 @ a_X3L0N $dIntegral_X3L0P $dRead_X3L0R)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Ratio
                                          a_X3L0N>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Ratio a_X3L0N>_R)
                        :: (Prec
                            -> forall b.
                               (Ratio a_X3L0N -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec (Ratio a_X3L0N) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Ratio a_X3L0N]>_R
                    :: (ReadPrec [Ratio a_X3L0N] :: *)
                       ~R# (Prec -> P.ReadP [Ratio a_X3L0N] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Ratio a_X3L0N]>_R
                  :: (P.ReadP [Ratio a_X3L0N] :: *)
                     ~R# (forall b.
                          ([Ratio a_X3L0N] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Ratio a_X3L0N]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Ratio a_X3L0N]))

-- RHS size: {terms: 16, types: 12, coercions: 11, joins: 0/0}
GHC.Read.$fReadRatio [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. (Integral a, Read a) => Read (Ratio a)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>m,
 Unf=DFun: \ (@ a_a3K6h)
             (v_X60 :: Integral a_a3K6h)
             (v1_X62 :: Read a_a3K6h) ->
       GHC.Read.C:Read TYPE: Ratio a_a3K6h
                       GHC.Read.$fReadRatio_$creadsPrec @ a_a3K6h v_X60 v1_X62
                       GHC.Read.$fReadRatio_$creadList @ a_a3K6h v_X60 v1_X62
                       (GHC.Read.$fReadRatio1 @ a_a3K6h v_X60 v1_X62)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Ratio
                                                 a_a3K6h>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Ratio a_a3K6h>_R)
                               :: (Prec
                                   -> forall b.
                                      (Ratio a_a3K6h -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec (Ratio a_a3K6h) :: *))
                       GHC.Read.$fReadRatio_$creadListPrec @ a_a3K6h v_X60 v1_X62]
GHC.Read.$fReadRatio
  = \ (@ a_X3L0O)
      ($dIntegral_X3L0Q :: Integral a_X3L0O)
      ($dRead_X3L0S :: Read a_X3L0O) ->
      GHC.Read.C:Read
        @ (Ratio a_X3L0O)
        (GHC.Read.$fReadRatio_$creadsPrec
           @ a_X3L0O $dIntegral_X3L0Q $dRead_X3L0S)
        (GHC.Read.$fReadRatio_$creadList
           @ a_X3L0O $dIntegral_X3L0Q $dRead_X3L0S)
        ((GHC.Read.$fReadRatio1 @ a_X3L0O $dIntegral_X3L0Q $dRead_X3L0S)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Ratio
                                   a_X3L0O>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Ratio a_X3L0O>_R)
                 :: (Prec
                     -> forall b.
                        (Ratio a_X3L0O -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Ratio a_X3L0O) :: *)))
        (GHC.Read.$fReadRatio_$creadListPrec
           @ a_X3L0O $dIntegral_X3L0Q $dRead_X3L0S)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadMaybe5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadMaybe5 = "Nothing"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadMaybe4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadMaybe4 = unpackCString# GHC.Read.$fReadMaybe5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadMaybe_lexeme1 :: L.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadMaybe_lexeme1
  = Text.Read.Lex.Ident GHC.Read.$fReadMaybe4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadMaybe3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadMaybe3 = "Just"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadMaybe2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadMaybe2 = unpackCString# GHC.Read.$fReadMaybe3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadMaybe_lexeme :: L.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadMaybe_lexeme
  = Text.Read.Lex.Ident GHC.Read.$fReadMaybe2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadArray2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadArray2 = GHC.Types.I# 11#

-- RHS size: {terms: 45, types: 53, coercions: 15, joins: 0/0}
GHC.Read.$fReadMaybe1
  :: forall a.
     Read a =>
     Prec
     -> forall b.
        (Maybe a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0 0] 341 0}]
GHC.Read.$fReadMaybe1
  = \ (@ a_a3KVO)
      ($dRead_a3KVP :: Read a_a3KVO)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1
         :: Maybe a_a3KVO -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      GHC.Read.list3
        @ (Maybe a_a3KVO)
        ((\ (n_a3tmw :: Prec)
            (@ b1_X3nsy)
            (eta2_X8
               :: Maybe a_a3KVO -> Text.ParserCombinators.ReadP.P b1_X3nsy) ->
            case Text.Read.Lex.$wexpect
                   GHC.Read.$fReadMaybe_lexeme1
                   @ b1_X3nsy
                   (\ _ [Occ=Dead, OS=OneShot] ->
                      eta2_X8 (GHC.Base.Nothing @ a_a3KVO))
            of
            { (# ww1_s3xlt #) ->
            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b1_X3nsy
              (Text.ParserCombinators.ReadP.Look @ b1_X3nsy ww1_s3xlt)
              (case n_a3tmw of { I# x_at1e ->
               case <=# x_at1e 10# of {
                 __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nsy;
                 1# ->
                   case Text.Read.Lex.$wexpect
                          GHC.Read.$fReadMaybe_lexeme
                          @ b1_X3nsy
                          (\ _ [Occ=Dead, OS=OneShot] ->
                             ((((readPrec @ a_a3KVO $dRead_a3KVP)
                                `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3KVO>_R
                                        :: (ReadPrec a_a3KVO :: *)
                                           ~R# (Prec -> P.ReadP a_a3KVO :: *)))
                                 GHC.Read.$fReadArray2)
                              `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3KVO>_R
                                      :: (P.ReadP a_a3KVO :: *)
                                         ~R# (forall b.
                                              (a_a3KVO -> Text.ParserCombinators.ReadP.P b)
                                              -> Text.ParserCombinators.ReadP.P b :: *)))
                               @ b1_X3nsy
                               (\ (a2_X3nne :: a_a3KVO) ->
                                  eta2_X8 (GHC.Base.Just @ a_a3KVO a2_X3nne)))
                   of
                   { (# ww3_X3xAC #) ->
                   Text.ParserCombinators.ReadP.Look @ b1_X3nsy ww3_X3xAC
                   }
               }
               })
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Maybe
                                   a_a3KVO>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Maybe a_a3KVO>_R)
                 :: (Prec
                     -> forall b.
                        (Maybe a_a3KVO -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Maybe a_a3KVO) :: *)))
        eta_B2
        @ b_a3ngn
        eta1_B1

-- RHS size: {terms: 8, types: 12, coercions: 0, joins: 0/0}
GHC.Read.$fReadMaybe_$creadsPrec
  :: forall a. Read a => Int -> ReadS (Maybe a)
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L7Q)
                 ($dRead_X3L7S [Occ=Once] :: Read a_X3L7Q)
                 (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (Maybe a_X3L7Q)
                   (GHC.Read.$fReadMaybe1
                      @ a_X3L7Q
                      $dRead_X3L7S
                      n_a3tmE
                      @ (Maybe a_X3L7Q)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (Maybe a_X3L7Q)))}]
GHC.Read.$fReadMaybe_$creadsPrec
  = \ (@ a_X3L7Q) ($dRead_X3L7S :: Read a_X3L7Q) (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (Maybe a_X3L7Q)
        (GHC.Read.$fReadMaybe1
           @ a_X3L7Q
           $dRead_X3L7S
           n_a3tmE
           @ (Maybe a_X3L7Q)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (Maybe a_X3L7Q)))

-- RHS size: {terms: 5, types: 7, coercions: 11, joins: 0/0}
GHC.Read.$fReadMaybe_$creadListPrec
  :: forall a. Read a => ReadPrec [Maybe a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L7R) ($dRead_X3L7T [Occ=Once] :: Read a_X3L7R) ->
                 list
                   @ (Maybe a_X3L7R)
                   ((GHC.Read.$fReadMaybe1 @ a_X3L7R $dRead_X3L7T)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Maybe
                                              a_X3L7R>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Maybe a_X3L7R>_R)
                            :: (Prec
                                -> forall b.
                                   (Maybe a_X3L7R -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (Maybe a_X3L7R) :: *)))}]
GHC.Read.$fReadMaybe_$creadListPrec
  = \ (@ a_X3L7R) ($dRead_X3L7T :: Read a_X3L7R) ->
      list
        @ (Maybe a_X3L7R)
        ((GHC.Read.$fReadMaybe1 @ a_X3L7R $dRead_X3L7T)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Maybe
                                   a_X3L7R>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Maybe a_X3L7R>_R)
                 :: (Prec
                     -> forall b.
                        (Maybe a_X3L7R -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Maybe a_X3L7R) :: *)))

-- RHS size: {terms: 8, types: 16, coercions: 19, joins: 0/0}
GHC.Read.$fReadMaybe_$creadList
  :: forall a. Read a => ReadS [Maybe a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L7S) ($dRead_X3L7U [Occ=Once] :: Read a_X3L7S) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Maybe a_X3L7S]
                   (((((list
                          @ (Maybe a_X3L7S)
                          ((GHC.Read.$fReadMaybe1 @ a_X3L7S $dRead_X3L7U)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <Maybe
                                                     a_X3L7S>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <Maybe a_X3L7S>_R)
                                   :: (Prec
                                       -> forall b.
                                          (Maybe a_X3L7S -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec (Maybe a_X3L7S) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Maybe a_X3L7S]>_R
                               :: (ReadPrec [Maybe a_X3L7S] :: *)
                                  ~R# (Prec -> P.ReadP [Maybe a_X3L7S] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Maybe a_X3L7S]>_R
                             :: (P.ReadP [Maybe a_X3L7S] :: *)
                                ~R# (forall b.
                                     ([Maybe a_X3L7S] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Maybe a_X3L7S]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Maybe a_X3L7S]))}]
GHC.Read.$fReadMaybe_$creadList
  = \ (@ a_X3L7S) ($dRead_X3L7U :: Read a_X3L7S) ->
      Text.ParserCombinators.ReadP.run
        @ [Maybe a_X3L7S]
        (((((list
               @ (Maybe a_X3L7S)
               ((GHC.Read.$fReadMaybe1 @ a_X3L7S $dRead_X3L7U)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Maybe
                                          a_X3L7S>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Maybe a_X3L7S>_R)
                        :: (Prec
                            -> forall b.
                               (Maybe a_X3L7S -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec (Maybe a_X3L7S) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Maybe a_X3L7S]>_R
                    :: (ReadPrec [Maybe a_X3L7S] :: *)
                       ~R# (Prec -> P.ReadP [Maybe a_X3L7S] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Maybe a_X3L7S]>_R
                  :: (P.ReadP [Maybe a_X3L7S] :: *)
                     ~R# (forall b.
                          ([Maybe a_X3L7S] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Maybe a_X3L7S]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Maybe a_X3L7S]))

-- RHS size: {terms: 11, types: 10, coercions: 11, joins: 0/0}
GHC.Read.$fReadMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Read a => Read (Maybe a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K6J) (v_X65 :: Read a_a3K6J) ->
       GHC.Read.C:Read TYPE: Maybe a_a3K6J
                       GHC.Read.$fReadMaybe_$creadsPrec @ a_a3K6J v_X65
                       GHC.Read.$fReadMaybe_$creadList @ a_a3K6J v_X65
                       (GHC.Read.$fReadMaybe1 @ a_a3K6J v_X65)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Maybe
                                                 a_a3K6J>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Maybe a_a3K6J>_R)
                               :: (Prec
                                   -> forall b.
                                      (Maybe a_a3K6J -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec (Maybe a_a3K6J) :: *))
                       GHC.Read.$fReadMaybe_$creadListPrec @ a_a3K6J v_X65]
GHC.Read.$fReadMaybe
  = \ (@ a_X3L7T) ($dRead_X3L7V :: Read a_X3L7T) ->
      GHC.Read.C:Read
        @ (Maybe a_X3L7T)
        (GHC.Read.$fReadMaybe_$creadsPrec @ a_X3L7T $dRead_X3L7V)
        (GHC.Read.$fReadMaybe_$creadList @ a_X3L7T $dRead_X3L7V)
        ((GHC.Read.$fReadMaybe1 @ a_X3L7T $dRead_X3L7V)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Maybe
                                   a_X3L7T>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Maybe a_X3L7T>_R)
                 :: (Prec
                     -> forall b.
                        (Maybe a_X3L7T -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Maybe a_X3L7T) :: *)))
        (GHC.Read.$fReadMaybe_$creadListPrec @ a_X3L7T $dRead_X3L7V)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadOrdering4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadOrdering4 = "LT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadOrdering3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadOrdering3 = unpackCString# GHC.Read.$fReadOrdering4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadOrdering6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadOrdering6 = "GT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadOrdering5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadOrdering5 = unpackCString# GHC.Read.$fReadOrdering6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadOrdering8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadOrdering8 = "EQ"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadOrdering7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadOrdering7 = unpackCString# GHC.Read.$fReadOrdering8

-- RHS size: {terms: 63, types: 46, coercions: 0, joins: 0/7}
GHC.Read.$w$creadPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Ordering -> Text.ParserCombinators.ReadP.P b1)
     -> (# String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId,
 Arity=1,
 Str=<L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 470 20}]
GHC.Read.$w$creadPrec2
  = \ (@ b1_s3Muw)
      (w_s3Mux :: Ordering -> Text.ParserCombinators.ReadP.P b1_s3Muw) ->
      let {
        lvl116_X3wpu :: Text.ParserCombinators.ReadP.P b1_s3Muw
        [LclId]
        lvl116_X3wpu
          = let {
              lvl2_s3MJA :: Text.ParserCombinators.ReadP.P b1_s3Muw
              [LclId]
              lvl2_s3MJA = w_s3Mux GHC.Types.EQ } in
            let {
              lvl3_s3MJz :: Text.ParserCombinators.ReadP.P b1_s3Muw
              [LclId]
              lvl3_s3MJz = w_s3Mux GHC.Types.GT } in
            let {
              lvl4_s3MJy :: Text.ParserCombinators.ReadP.P b1_s3Muw
              [LclId]
              lvl4_s3MJy = w_s3Mux GHC.Types.LT } in
            let {
              w2_X3xzH :: L.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3Muw
              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
              w2_X3xzH
                = \ (a1_a3ngt :: L.Lexeme) ->
                    case a1_a3ngt of {
                      __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3Muw;
                      L.Ident s_a3K6L ->
                        case eqString s_a3K6L GHC.Read.$fReadOrdering7 of {
                          False ->
                            case eqString s_a3K6L GHC.Read.$fReadOrdering5 of {
                              False ->
                                case eqString s_a3K6L GHC.Read.$fReadOrdering3 of {
                                  False -> Text.ParserCombinators.ReadP.Fail @ b1_s3Muw;
                                  True -> lvl4_s3MJy
                                };
                              True -> lvl3_s3MJz
                            };
                          True -> lvl2_s3MJA
                        }
                    } } in
            let {
              lvl117_X3wEz :: Text.ParserCombinators.ReadP.P b1_s3Muw
              [LclId]
              lvl117_X3wEz = w2_X3xzH Text.Read.Lex.EOF } in
            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b1_s3Muw
              (Text.ParserCombinators.ReadP.Look
                 @ b1_s3Muw
                 (\ (a3_X3nkL :: String) ->
                    case a3_X3nkL of {
                      [] -> lvl117_X3wEz;
                      : ds1_i2Mqv ds2_i2Mqw ->
                        Text.ParserCombinators.ReadP.Fail @ b1_s3Muw
                    }))
              (Text.Read.Lex.expect2 @ b1_s3Muw w2_X3xzH) } in
      let {
        k_X3waW [Dmd=<L,C(U)>]
          :: () -> Text.ParserCombinators.ReadP.P b1_s3Muw
        [LclId,
         Arity=1,
         Str=<L,A>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                 Tmpl= \ _ [Occ=Dead] -> lvl116_X3wpu}]
        k_X3waW = \ _ [Occ=Dead] -> lvl116_X3wpu } in
      (# \ (a_a3ngt :: String) ->
           Text.ParserCombinators.ReadP.skipSpaces2
             a_a3ngt @ b1_s3Muw k_X3waW #)

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
GHC.Read.$fReadOrdering2 [InlPrag=NOUSERINLINE[0]]
  :: Prec
     -> forall b1.
        (Ordering -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b1_s3Muw)
                 (w1_s3Mux [Occ=Once]
                    :: Ordering -> Text.ParserCombinators.ReadP.P b1_s3Muw) ->
                 case GHC.Read.$w$creadPrec2 @ b1_s3Muw w1_s3Mux of
                 { (# ww1_s3Mvx [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b1_s3Muw ww1_s3Mvx
                 }}]
GHC.Read.$fReadOrdering2
  = \ _ [Occ=Dead]
      (@ b1_s3Muw)
      (w1_s3Mux
         :: Ordering -> Text.ParserCombinators.ReadP.P b1_s3Muw) ->
      case GHC.Read.$w$creadPrec2 @ b1_s3Muw w1_s3Mux of
      { (# ww1_s3Mvx #) ->
      Text.ParserCombinators.ReadP.Look @ b1_s3Muw ww1_s3Mvx
      }

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadOrdering1
  :: Prec
     -> forall b.
        (Ordering -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadOrdering1
  = GHC.Read.list3
      @ Ordering
      (GHC.Read.$fReadOrdering2
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Ordering>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <Ordering>_R)
               :: (Prec
                   -> forall b.
                      (Ordering -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Ordering :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 9, joins: 0/0}
GHC.Read.$fReadOrdering_$creadsPrec :: Int -> ReadS Ordering
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Ordering
                   (GHC.Read.list3
                      @ Ordering
                      (GHC.Read.$fReadOrdering2
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Ordering>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <Ordering>_R)
                               :: (Prec
                                   -> forall b.
                                      (Ordering -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Ordering :: *)))
                      n_a3tmE
                      @ Ordering
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Ordering))}]
GHC.Read.$fReadOrdering_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Ordering
        (GHC.Read.list3
           @ Ordering
           (GHC.Read.$fReadOrdering2
            `cast` ((<Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <Ordering>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <Ordering>_R)
                    :: (Prec
                        -> forall b.
                           (Ordering -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (ReadPrec Ordering :: *)))
           n_a3tmE
           @ Ordering
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Ordering))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadOrdering_$creadListPrec :: ReadPrec [Ordering]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadOrdering_$creadListPrec
  = list
      @ Ordering
      (GHC.Read.$fReadOrdering1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Ordering>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <Ordering>_R)
               :: (Prec
                   -> forall b.
                      (Ordering -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Ordering :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fReadOrdering9
  :: Text.ParserCombinators.ReadP.P [Ordering]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadOrdering9
  = (((GHC.Read.$fReadOrdering_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                   <[Ordering]>_R
               :: (ReadPrec [Ordering] :: *)
                  ~R# (Prec -> P.ReadP [Ordering] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Ordering]>_R
             :: (P.ReadP [Ordering] :: *)
                ~R# (forall b.
                     ([Ordering] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Ordering]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Ordering])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadOrdering_$creadList :: ReadS [Ordering]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadOrdering_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [Ordering] GHC.Read.$fReadOrdering9

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: Read Ordering
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Ordering
                       GHC.Read.$fReadOrdering_$creadsPrec
                       GHC.Read.$fReadOrdering_$creadList
                       GHC.Read.$fReadOrdering1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Ordering>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <Ordering>_R)
                               :: (Prec
                                   -> forall b.
                                      (Ordering -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Ordering :: *))
                       GHC.Read.$fReadOrdering_$creadListPrec]
GHC.Read.$fReadOrdering
  = GHC.Read.C:Read
      @ Ordering
      GHC.Read.$fReadOrdering_$creadsPrec
      GHC.Read.$fReadOrdering_$creadList
      (GHC.Read.$fReadOrdering1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Ordering>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <Ordering>_R)
               :: (Prec
                   -> forall b.
                      (Ordering -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Ordering :: *)))
      GHC.Read.$fReadOrdering_$creadListPrec

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadBool4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadBool4 = "True"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadBool3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadBool3 = unpackCString# GHC.Read.$fReadBool4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadBool6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadBool6 = "False"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadBool5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadBool5 = unpackCString# GHC.Read.$fReadBool6

-- RHS size: {terms: 46, types: 35, coercions: 0, joins: 0/4}
GHC.Read.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Bool -> Text.ParserCombinators.ReadP.P b1)
     -> (# String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId,
 Arity=1,
 Str=<L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 340 20}]
GHC.Read.$w$creadPrec
  = \ (@ b1_s3MuE)
      (w_s3MuF :: Bool -> Text.ParserCombinators.ReadP.P b1_s3MuE) ->
      let {
        lvl116_X3wpG :: Text.ParserCombinators.ReadP.P b1_s3MuE
        [LclId]
        lvl116_X3wpG
          = let {
              lvl2_s3MJC :: Text.ParserCombinators.ReadP.P b1_s3MuE
              [LclId]
              lvl2_s3MJC = w_s3MuF GHC.Types.False } in
            let {
              lvl3_s3MJB :: Text.ParserCombinators.ReadP.P b1_s3MuE
              [LclId]
              lvl3_s3MJB = w_s3MuF GHC.Types.True } in
            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b1_s3MuE
              (Text.ParserCombinators.ReadP.Look
                 @ b1_s3MuE
                 (\ (a3_X3nkL :: String) ->
                    case a3_X3nkL of { __DEFAULT ->
                    Text.ParserCombinators.ReadP.Fail @ b1_s3MuE
                    }))
              (Text.Read.Lex.expect2
                 @ b1_s3MuE
                 (\ (a1_a3ngt :: L.Lexeme) ->
                    case a1_a3ngt of {
                      __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3MuE;
                      L.Ident s_a3K6M ->
                        case eqString s_a3K6M GHC.Read.$fReadBool5 of {
                          False ->
                            case eqString s_a3K6M GHC.Read.$fReadBool3 of {
                              False -> Text.ParserCombinators.ReadP.Fail @ b1_s3MuE;
                              True -> lvl3_s3MJB
                            };
                          True -> lvl2_s3MJC
                        }
                    })) } in
      let {
        k_X3wb8 [Dmd=<L,C(U)>]
          :: () -> Text.ParserCombinators.ReadP.P b1_s3MuE
        [LclId,
         Arity=1,
         Str=<L,A>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                 Tmpl= \ _ [Occ=Dead] -> lvl116_X3wpG}]
        k_X3wb8 = \ _ [Occ=Dead] -> lvl116_X3wpG } in
      (# \ (a_a3ngt :: String) ->
           Text.ParserCombinators.ReadP.skipSpaces2
             a_a3ngt @ b1_s3MuE k_X3wb8 #)

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
GHC.Read.$fReadBool2 [InlPrag=NOUSERINLINE[0]]
  :: Prec
     -> forall b1.
        (Bool -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b1_s3MuE)
                 (w1_s3MuF [Occ=Once]
                    :: Bool -> Text.ParserCombinators.ReadP.P b1_s3MuE) ->
                 case GHC.Read.$w$creadPrec @ b1_s3MuE w1_s3MuF of
                 { (# ww1_s3Mvz [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b1_s3MuE ww1_s3Mvz
                 }}]
GHC.Read.$fReadBool2
  = \ _ [Occ=Dead]
      (@ b1_s3MuE)
      (w1_s3MuF :: Bool -> Text.ParserCombinators.ReadP.P b1_s3MuE) ->
      case GHC.Read.$w$creadPrec @ b1_s3MuE w1_s3MuF of
      { (# ww1_s3Mvz #) ->
      Text.ParserCombinators.ReadP.Look @ b1_s3MuE ww1_s3Mvz
      }

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadBool1
  :: Prec
     -> forall b.
        (Bool -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadBool1
  = GHC.Read.list3
      @ Bool
      (GHC.Read.$fReadBool2
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <Bool>_R)
               :: (Prec
                   -> forall b.
                      (Bool -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Bool :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 9, joins: 0/0}
GHC.Read.$fReadBool_$creadsPrec :: Int -> ReadS Bool
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Bool
                   (GHC.Read.list3
                      @ Bool
                      (GHC.Read.$fReadBool2
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <Bool>_R)
                               :: (Prec
                                   -> forall b.
                                      (Bool -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Bool :: *)))
                      n_a3tmE
                      @ Bool
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Bool))}]
GHC.Read.$fReadBool_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Bool
        (GHC.Read.list3
           @ Bool
           (GHC.Read.$fReadBool2
            `cast` ((<Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Bool>_R)
                    :: (Prec
                        -> forall b.
                           (Bool -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (ReadPrec Bool :: *)))
           n_a3tmE
           @ Bool
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Bool))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadBool_$creadListPrec :: ReadPrec [Bool]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadBool_$creadListPrec
  = list
      @ Bool
      (GHC.Read.$fReadBool1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <Bool>_R)
               :: (Prec
                   -> forall b.
                      (Bool -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Bool :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fReadBool7 :: Text.ParserCombinators.ReadP.P [Bool]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadBool7
  = (((GHC.Read.$fReadBool_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Bool]>_R
               :: (ReadPrec [Bool] :: *) ~R# (Prec -> P.ReadP [Bool] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Bool]>_R
             :: (P.ReadP [Bool] :: *)
                ~R# (forall b.
                     ([Bool] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Bool]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Bool])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadBool_$creadList :: ReadS [Bool]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadBool_$creadList
  = Text.ParserCombinators.ReadP.run @ [Bool] GHC.Read.$fReadBool7

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadBool [InlPrag=NOUSERINLINE CONLIKE] :: Read Bool
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Bool
                       GHC.Read.$fReadBool_$creadsPrec
                       GHC.Read.$fReadBool_$creadList
                       GHC.Read.$fReadBool1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <Bool>_R)
                               :: (Prec
                                   -> forall b.
                                      (Bool -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Bool :: *))
                       GHC.Read.$fReadBool_$creadListPrec]
GHC.Read.$fReadBool
  = GHC.Read.C:Read
      @ Bool
      GHC.Read.$fReadBool_$creadsPrec
      GHC.Read.$fReadBool_$creadList
      (GHC.Read.$fReadBool1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Bool>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <Bool>_R)
               :: (Prec
                   -> forall b.
                      (Bool -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Bool :: *)))
      GHC.Read.$fReadBool_$creadListPrec

-- RHS size: {terms: 22, types: 24, coercions: 0, joins: 0/2}
GHC.Read.$w$creadPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId,
 Arity=1,
 Str=<L,C(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60] 170 20}]
GHC.Read.$w$creadPrec1
  = \ (@ b1_s3MuL)
      (w_s3MuM :: Char -> Text.ParserCombinators.ReadP.P b1_s3MuL) ->
      let {
        lvl116_X3wpO :: Text.ParserCombinators.ReadP.P b1_s3MuL
        [LclId]
        lvl116_X3wpO
          = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
              @ b1_s3MuL
              (GHC.Read.$fReadChar3 @ b1_s3MuL)
              (Text.Read.Lex.expect2
                 @ b1_s3MuL
                 (\ (a1_a3ngt :: L.Lexeme) ->
                    case a1_a3ngt of {
                      __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_s3MuL;
                      L.Char c_a3K6N -> w_s3MuM c_a3K6N
                    })) } in
      let {
        k_X3wbg [Dmd=<L,C(U)>]
          :: () -> Text.ParserCombinators.ReadP.P b1_s3MuL
        [LclId,
         Arity=1,
         Str=<L,A>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                 Tmpl= \ _ [Occ=Dead] -> lvl116_X3wpO}]
        k_X3wbg = \ _ [Occ=Dead] -> lvl116_X3wpO } in
      (# \ (a_a3ngt :: String) ->
           Text.ParserCombinators.ReadP.skipSpaces2
             a_a3ngt @ b1_s3MuL k_X3wbg #)

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
GHC.Read.$fReadChar7 [InlPrag=NOUSERINLINE[0]]
  :: Prec
     -> forall b1.
        (Char -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b1_s3MuL)
                 (w1_s3MuM [Occ=Once]
                    :: Char -> Text.ParserCombinators.ReadP.P b1_s3MuL) ->
                 case GHC.Read.$w$creadPrec1 @ b1_s3MuL w1_s3MuM of
                 { (# ww1_s3MvB [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b1_s3MuL ww1_s3MvB
                 }}]
GHC.Read.$fReadChar7
  = \ _ [Occ=Dead]
      (@ b1_s3MuL)
      (w1_s3MuM :: Char -> Text.ParserCombinators.ReadP.P b1_s3MuL) ->
      case GHC.Read.$w$creadPrec1 @ b1_s3MuL w1_s3MuM of
      { (# ww1_s3MvB #) ->
      Text.ParserCombinators.ReadP.Look @ b1_s3MuL ww1_s3MvB
      }

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadChar6
  :: Prec
     -> forall b.
        (Char -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadChar6
  = GHC.Read.list3
      @ Char
      (GHC.Read.$fReadChar7
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Char>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <Char>_R)
               :: (Prec
                   -> forall b.
                      (Char -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Char :: *)))

-- RHS size: {terms: 17, types: 14, coercions: 27, joins: 0/0}
GHC.Read.$fReadInteger2 :: L.Lexeme -> ReadPrec Integer
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 100 180}]
GHC.Read.$fReadInteger2
  = \ (ds_d3L16 :: L.Lexeme) ->
      case ds_d3L16 of {
        __DEFAULT ->
          (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4 @ Integer)
          `cast` ((<Prec>_R
                   ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <Integer>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <Integer>_R)
                  :: (Prec
                      -> forall b.
                         (Integer -> Text.ParserCombinators.ReadP.P b)
                         -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (ReadPrec Integer :: *));
        L.Number n_a3K8c ->
          case L.numberToInteger n_a3K8c of {
            Nothing ->
              (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4 @ Integer)
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Integer>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <Integer>_R)
                      :: (Prec
                          -> forall b.
                             (Integer -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Integer :: *));
            Just i_a3K8d ->
              (\ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw :: Integer -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw i_a3K8d)
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Integer>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <Integer>_R)
                      :: (Prec
                          -> forall b.
                             (Integer -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Integer :: *))
          }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadInteger1
  :: Prec
     -> forall b.
        (Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadInteger1
  = GHC.Read.$fReadInteger_$sreadNumber GHC.Read.$fReadInteger2

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Read.$fReadInteger_$creadsPrec :: Int -> ReadS Integer
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Integer
                   (GHC.Read.$fReadInteger_$sreadNumber
                      GHC.Read.$fReadInteger2
                      n_a3tmE
                      @ Integer
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Integer))}]
GHC.Read.$fReadInteger_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Integer
        (GHC.Read.$fReadInteger_$sreadNumber
           GHC.Read.$fReadInteger2
           n_a3tmE
           @ Integer
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Integer))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadInteger_$creadListPrec :: ReadPrec [Integer]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadInteger_$creadListPrec
  = list
      @ Integer
      (GHC.Read.$fReadInteger1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Integer>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       <Integer>_R)
               :: (Prec
                   -> forall b.
                      (Integer -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Integer :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fReadInteger3 :: Text.ParserCombinators.ReadP.P [Integer]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadInteger3
  = (((GHC.Read.$fReadInteger_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Integer]>_R
               :: (ReadPrec [Integer] :: *) ~R# (Prec -> P.ReadP [Integer] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Integer]>_R
             :: (P.ReadP [Integer] :: *)
                ~R# (forall b.
                     ([Integer] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Integer]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Integer])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadInteger_$creadList :: ReadS [Integer]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadInteger_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [Integer] GHC.Read.$fReadInteger3

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: Read Integer
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Integer
                       GHC.Read.$fReadInteger_$creadsPrec
                       GHC.Read.$fReadInteger_$creadList
                       GHC.Read.$fReadInteger1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Integer>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       <Integer>_R)
                               :: (Prec
                                   -> forall b.
                                      (Integer -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Integer :: *))
                       GHC.Read.$fReadInteger_$creadListPrec]
GHC.Read.$fReadInteger
  = GHC.Read.C:Read
      @ Integer
      GHC.Read.$fReadInteger_$creadsPrec
      GHC.Read.$fReadInteger_$creadList
      (GHC.Read.$fReadInteger1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Integer>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       <Integer>_R)
               :: (Prec
                   -> forall b.
                      (Integer -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Integer :: *)))
      GHC.Read.$fReadInteger_$creadListPrec

Rec {
-- RHS size: {terms: 16, types: 28, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord64_go [Occ=LoopBreaker]
  :: [(Integer, String)] -> [(Word64, String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.Read.$fReadWord64_go
  = \ (ds_i1y1c :: [(Integer, String)]) ->
      case ds_i1y1c of {
        [] -> GHC.Types.[] @ (Word64, String);
        : y_i1y1h ys_i1y1i ->
          case y_i1y1h of { (x_a3K6m, r_a3K6n) ->
          GHC.Types.:
            @ (Word64, String)
            (GHC.Word.$fNumWord64_$cfromInteger x_a3K6m, r_a3K6n)
            (GHC.Read.$fReadWord64_go ys_i1y1i)
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord64_$creadsPrec :: Int -> ReadS Word64
[GblId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
GHC.Read.$fReadWord64_$creadsPrec
  = \ (p_a3K6k :: Int) (s_a3K6l :: String) ->
      GHC.Read.$fReadWord64_go
        (Text.ParserCombinators.ReadP.run
           @ Integer
           (GHC.Read.$fReadInteger_$sreadNumber
              GHC.Read.$fReadInteger2
              p_a3K6k
              @ Integer
              (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Integer))
           s_a3K6l)

-- RHS size: {terms: 11, types: 17, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord13
  :: Prec
     -> forall b.
        (Word64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_X3ttj [Occ=Once] :: Prec)
                 (@ b_s3ofG)
                 (eta_B1 [Occ=Once]
                    :: Word64 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ Word64
                        (GHC.Read.$fReadWord64_$creadsPrec n_X3ttj)
                        @ b_s3ofG
                        eta_B1
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord13
  = \ (n_X3ttj :: Prec)
      (@ b_s3ofG)
      (eta_B1 :: Word64 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ Word64
             (GHC.Read.$fReadWord64_$creadsPrec n_X3ttj)
             @ b_s3ofG
             eta_B1
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 4, types: 5, coercions: 15, joins: 0/0}
GHC.Read.$fReadWord12 :: Text.ParserCombinators.ReadP.P [Word64]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadWord12
  = ((((list
          @ Word64
          (GHC.Read.$fReadWord13
           `cast` ((<Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <Word64>_R)
                   :: (Prec
                       -> forall b.
                          (Word64 -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                      ~R# (ReadPrec Word64 :: *))))
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Word64]>_R
               :: (ReadPrec [Word64] :: *) ~R# (Prec -> P.ReadP [Word64] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Word64]>_R
             :: (P.ReadP [Word64] :: *)
                ~R# (forall b.
                     ([Word64] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Word64]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Word64])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord64_$creadList :: ReadS [Word64]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadWord64_$creadList
  = Text.ParserCombinators.ReadP.run @ [Word64] GHC.Read.$fReadWord12

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord11
  :: Prec
     -> forall b.
        ([Word64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_s3ofG)
                 (w1_s3ofH [Occ=Once]
                    :: [Word64] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ [Word64] GHC.Read.$fReadWord64_$creadList @ b_s3ofG w1_s3ofH
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord11
  = \ _ [Occ=Dead]
      (@ b_s3ofG)
      (w1_s3ofH :: [Word64] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ [Word64] GHC.Read.$fReadWord64_$creadList @ b_s3ofG w1_s3ofH
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 5, types: 1, coercions: 20, joins: 0/0}
GHC.Read.$fReadWord64 [InlPrag=NOUSERINLINE CONLIKE] :: Read Word64
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Word64
                       GHC.Read.$fReadWord64_$creadsPrec
                       GHC.Read.$fReadWord64_$creadList
                       GHC.Read.$fReadWord13
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Word64>_R)
                               :: (Prec
                                   -> forall b.
                                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Word64 :: *))
                       GHC.Read.$fReadWord11
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <[Word64]>_R)
                               :: (Prec
                                   -> forall b.
                                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec [Word64] :: *))]
GHC.Read.$fReadWord64
  = GHC.Read.C:Read
      @ Word64
      GHC.Read.$fReadWord64_$creadsPrec
      GHC.Read.$fReadWord64_$creadList
      (GHC.Read.$fReadWord13
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <Word64>_R)
               :: (Prec
                   -> forall b.
                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Word64 :: *)))
      (GHC.Read.$fReadWord11
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <[Word64]>_R)
               :: (Prec
                   -> forall b.
                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec [Word64] :: *)))

Rec {
-- RHS size: {terms: 16, types: 28, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord_go [Occ=LoopBreaker]
  :: [(Integer, String)] -> [(Word, String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.Read.$fReadWord_go
  = \ (ds_i1y1c :: [(Integer, String)]) ->
      case ds_i1y1c of {
        [] -> GHC.Types.[] @ (Word, String);
        : y_i1y1h ys_i1y1i ->
          case y_i1y1h of { (x_a3K6C, r_a3K6D) ->
          GHC.Types.:
            @ (Word, String)
            (GHC.Num.$fNumWord_$cfromInteger x_a3K6C, r_a3K6D)
            (GHC.Read.$fReadWord_go ys_i1y1i)
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord_$creadsPrec :: Int -> ReadS Word
[GblId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
GHC.Read.$fReadWord_$creadsPrec
  = \ (p_a3K6A :: Int) (s_a3K6B :: String) ->
      GHC.Read.$fReadWord_go
        (Text.ParserCombinators.ReadP.run
           @ Integer
           (GHC.Read.$fReadInteger_$sreadNumber
              GHC.Read.$fReadInteger2
              p_a3K6A
              @ Integer
              (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Integer))
           s_a3K6B)

-- RHS size: {terms: 11, types: 17, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord3
  :: Prec
     -> forall b.
        (Word -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_X3ttw [Occ=Once] :: Prec)
                 (@ b_s3ofG)
                 (eta_B1 [Occ=Once]
                    :: Word -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ Word (GHC.Read.$fReadWord_$creadsPrec n_X3ttw) @ b_s3ofG eta_B1
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord3
  = \ (n_X3ttw :: Prec)
      (@ b_s3ofG)
      (eta_B1 :: Word -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ Word (GHC.Read.$fReadWord_$creadsPrec n_X3ttw) @ b_s3ofG eta_B1
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 4, types: 5, coercions: 15, joins: 0/0}
GHC.Read.$fReadWord2 :: Text.ParserCombinators.ReadP.P [Word]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadWord2
  = ((((list
          @ Word
          (GHC.Read.$fReadWord3
           `cast` ((<Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Word>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <Word>_R)
                   :: (Prec
                       -> forall b.
                          (Word -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                      ~R# (ReadPrec Word :: *))))
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Word]>_R
               :: (ReadPrec [Word] :: *) ~R# (Prec -> P.ReadP [Word] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Word]>_R
             :: (P.ReadP [Word] :: *)
                ~R# (forall b.
                     ([Word] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Word]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Word])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord_$creadList :: ReadS [Word]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadWord_$creadList
  = Text.ParserCombinators.ReadP.run @ [Word] GHC.Read.$fReadWord2

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord1
  :: Prec
     -> forall b.
        ([Word] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_s3ofG)
                 (w1_s3ofH [Occ=Once]
                    :: [Word] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ [Word] GHC.Read.$fReadWord_$creadList @ b_s3ofG w1_s3ofH
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord1
  = \ _ [Occ=Dead]
      (@ b_s3ofG)
      (w1_s3ofH :: [Word] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ [Word] GHC.Read.$fReadWord_$creadList @ b_s3ofG w1_s3ofH
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 5, types: 1, coercions: 20, joins: 0/0}
GHC.Read.$fReadWord [InlPrag=NOUSERINLINE CONLIKE] :: Read Word
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Word
                       GHC.Read.$fReadWord_$creadsPrec
                       GHC.Read.$fReadWord_$creadList
                       GHC.Read.$fReadWord3
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <Word>_R)
                               :: (Prec
                                   -> forall b.
                                      (Word -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Word :: *))
                       GHC.Read.$fReadWord1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <[Word]>_R)
                               :: (Prec
                                   -> forall b.
                                      ([Word] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec [Word] :: *))]
GHC.Read.$fReadWord
  = GHC.Read.C:Read
      @ Word
      GHC.Read.$fReadWord_$creadsPrec
      GHC.Read.$fReadWord_$creadList
      (GHC.Read.$fReadWord3
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <Word>_R)
               :: (Prec
                   -> forall b.
                      (Word -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Word :: *)))
      (GHC.Read.$fReadWord1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <[Word]>_R)
               :: (Prec
                   -> forall b.
                      ([Word] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec [Word] :: *)))

-- RHS size: {terms: 24, types: 16, coercions: 27, joins: 0/1}
GHC.Read.$fReadInt2 :: L.Lexeme -> ReadPrec Int
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 150 180}]
GHC.Read.$fReadInt2
  = \ (ds_d3L16 :: L.Lexeme) ->
      case ds_d3L16 of {
        __DEFAULT ->
          (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4 @ Int)
          `cast` ((<Prec>_R
                   ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <Int>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <Int>_R)
                  :: (Prec
                      -> forall b.
                         (Int -> Text.ParserCombinators.ReadP.P b)
                         -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (ReadPrec Int :: *));
        L.Number n_a3K8c ->
          case L.numberToInteger n_a3K8c of {
            Nothing ->
              (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4 @ Int)
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Int>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <Int>_R)
                      :: (Prec
                          -> forall b.
                             (Int -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Int :: *));
            Just i_a3K8d ->
              let {
                x_s3Lrb :: Int
                [LclId]
                x_s3Lrb
                  = case integerToInt i_a3K8d of wild2_i1AOp { __DEFAULT ->
                    GHC.Types.I# wild2_i1AOp
                    } } in
              (\ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw :: Int -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw x_s3Lrb)
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Int>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <Int>_R)
                      :: (Prec
                          -> forall b.
                             (Int -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Int :: *))
          }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadInt1
  :: Prec
     -> forall b.
        (Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadInt1
  = GHC.Read.$fReadInt_$sreadNumber GHC.Read.$fReadInt2

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble_x1 :: Double
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 11 20}]
GHC.Read.$fReadDouble_x1
  = case /## 0.0## 0.0## of wild2_X1p { __DEFAULT ->
    GHC.Types.D# wild2_X1p
    }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble3
  :: Prec
     -> forall b.
        (Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_a3nJT)
                 (k_a3ngw [Occ=Once!]
                    :: Double -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
                 k_a3ngw GHC.Read.$fReadDouble_x1}]
GHC.Read.$fReadDouble3
  = \ _ [Occ=Dead]
      (@ b_a3nJT)
      (k_a3ngw :: Double -> Text.ParserCombinators.ReadP.P b_a3nJT) ->
      k_a3ngw GHC.Read.$fReadDouble_x1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadDouble5 = "NaN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadDouble4 = unpackCString# GHC.Read.$fReadDouble5

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble_x :: Double
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 11 20}]
GHC.Read.$fReadDouble_x
  = case /## 1.0## 0.0## of wild2_X1p { __DEFAULT ->
    GHC.Types.D# wild2_X1p
    }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble2
  :: Prec
     -> forall b.
        (Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_X3o1r)
                 (k_X3ny5 [Occ=Once!]
                    :: Double -> Text.ParserCombinators.ReadP.P b_X3o1r) ->
                 k_X3ny5 GHC.Read.$fReadDouble_x}]
GHC.Read.$fReadDouble2
  = \ _ [Occ=Dead]
      (@ b_X3o1r)
      (k_X3ny5 :: Double -> Text.ParserCombinators.ReadP.P b_X3o1r) ->
      k_X3ny5 GHC.Read.$fReadDouble_x

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadDouble7 = "Infinity"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadDouble6 = unpackCString# GHC.Read.$fReadDouble7

-- RHS size: {terms: 42, types: 23, coercions: 54, joins: 0/1}
GHC.Read.$fReadDouble_$sconvertFrac :: L.Lexeme -> ReadPrec Double
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [140] 280 360}]
GHC.Read.$fReadDouble_$sconvertFrac
  = \ (eta_B1 :: L.Lexeme) ->
      case eta_B1 of {
        __DEFAULT ->
          (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4 @ Double)
          `cast` ((<Prec>_R
                   ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Double>_R)
                  :: (Prec
                      -> forall b.
                         (Double -> Text.ParserCombinators.ReadP.P b)
                         -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (ReadPrec Double :: *));
        L.Ident ds_d3L11 ->
          case eqString ds_d3L11 GHC.Read.$fReadDouble6 of {
            False ->
              case eqString ds_d3L11 GHC.Read.$fReadDouble4 of {
                False ->
                  (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4 @ Double)
                  `cast` ((<Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <Double>_R)
                          :: (Prec
                              -> forall b.
                                 (Double -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)
                             ~R# (ReadPrec Double :: *));
                True ->
                  GHC.Read.$fReadDouble3
                  `cast` ((<Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                 <Double>_R)
                          :: (Prec
                              -> forall b.
                                 (Double -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)
                             ~R# (ReadPrec Double :: *))
              };
            True ->
              GHC.Read.$fReadDouble2
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <Double>_R)
                      :: (Prec
                          -> forall b.
                             (Double -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Double :: *))
          };
        L.Number n_a3K8e ->
          case Text.Read.Lex.$wnumberToRangedRational
                 GHC.Float.$fRealFloatDouble3 GHC.Float.$fRealFloatDouble2 n_a3K8e
          of {
            Nothing ->
              GHC.Read.$fReadDouble2
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <Double>_R)
                      :: (Prec
                          -> forall b.
                             (Double -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Double :: *));
            Just rat_a3K8g ->
              let {
                x_s3Lr9 :: Double
                [LclId]
                x_s3Lr9
                  = case rat_a3K8g of { :% n1_a2HZb d_a2HZc ->
                    rationalToDouble n1_a2HZb d_a2HZc
                    } } in
              (\ _ [Occ=Dead]
                 (@ b_X3o1S)
                 (k_X3nyw :: Double -> Text.ParserCombinators.ReadP.P b_X3o1S) ->
                 k_X3nyw x_s3Lr9)
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                             <Double>_R)
                      :: (Prec
                          -> forall b.
                             (Double -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Double :: *))
          }
      }

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadFloat_x1 :: Float
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 11 20}]
GHC.Read.$fReadFloat_x1
  = case divideFloat# 0.0# 0.0# of wild2_XH { __DEFAULT ->
    GHC.Types.F# wild2_XH
    }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadFloat3
  :: Prec
     -> forall b.
        (Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_X3o1L)
                 (k_X3nyp [Occ=Once!]
                    :: Float -> Text.ParserCombinators.ReadP.P b_X3o1L) ->
                 k_X3nyp GHC.Read.$fReadFloat_x1}]
GHC.Read.$fReadFloat3
  = \ _ [Occ=Dead]
      (@ b_X3o1L)
      (k_X3nyp :: Float -> Text.ParserCombinators.ReadP.P b_X3o1L) ->
      k_X3nyp GHC.Read.$fReadFloat_x1

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
GHC.Read.$fReadFloat_x :: Float
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 11 20}]
GHC.Read.$fReadFloat_x
  = case divideFloat# 1.0# 0.0# of wild2_XH { __DEFAULT ->
    GHC.Types.F# wild2_XH
    }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Read.$fReadFloat2
  :: Prec
     -> forall b.
        (Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_X3o1S)
                 (k_X3nyw [Occ=Once!]
                    :: Float -> Text.ParserCombinators.ReadP.P b_X3o1S) ->
                 k_X3nyw GHC.Read.$fReadFloat_x}]
GHC.Read.$fReadFloat2
  = \ _ [Occ=Dead]
      (@ b_X3o1S)
      (k_X3nyw :: Float -> Text.ParserCombinators.ReadP.P b_X3o1S) ->
      k_X3nyw GHC.Read.$fReadFloat_x

-- RHS size: {terms: 42, types: 23, coercions: 54, joins: 0/1}
GHC.Read.$fReadFloat_$sconvertFrac :: L.Lexeme -> ReadPrec Float
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [140] 280 360}]
GHC.Read.$fReadFloat_$sconvertFrac
  = \ (eta_B1 :: L.Lexeme) ->
      case eta_B1 of {
        __DEFAULT ->
          (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4 @ Float)
          `cast` ((<Prec>_R
                   ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <Float>_R)
                  :: (Prec
                      -> forall b.
                         (Float -> Text.ParserCombinators.ReadP.P b)
                         -> Text.ParserCombinators.ReadP.P b :: *)
                     ~R# (ReadPrec Float :: *));
        L.Ident ds_d3L11 ->
          case eqString ds_d3L11 GHC.Read.$fReadDouble6 of {
            False ->
              case eqString ds_d3L11 GHC.Read.$fReadDouble4 of {
                False ->
                  (Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4 @ Float)
                  `cast` ((<Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                <Float>_R)
                          :: (Prec
                              -> forall b.
                                 (Float -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)
                             ~R# (ReadPrec Float :: *));
                True ->
                  GHC.Read.$fReadFloat3
                  `cast` ((<Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                <Float>_R)
                          :: (Prec
                              -> forall b.
                                 (Float -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)
                             ~R# (ReadPrec Float :: *))
              };
            True ->
              GHC.Read.$fReadFloat2
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <Float>_R)
                      :: (Prec
                          -> forall b.
                             (Float -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Float :: *))
          };
        L.Number n_a3K8e ->
          case Text.Read.Lex.$wnumberToRangedRational
                 GHC.Float.$fRealFloatFloat3 GHC.Float.$fRealFloatFloat2 n_a3K8e
          of {
            Nothing ->
              GHC.Read.$fReadFloat2
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <Float>_R)
                      :: (Prec
                          -> forall b.
                             (Float -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Float :: *));
            Just rat_a3K8g ->
              let {
                x_s3LqT :: Float
                [LclId]
                x_s3LqT
                  = case rat_a3K8g of { :% n1_a2I0w d_a2I0x ->
                    rationalToFloat n1_a2I0w d_a2I0x
                    } } in
              (\ _ [Occ=Dead]
                 (@ b_X3o2j)
                 (k_X3nyX :: Float -> Text.ParserCombinators.ReadP.P b_X3o2j) ->
                 k_X3nyX x_s3LqT)
              `cast` ((<Prec>_R
                       ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                     <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <Float>_R)
                      :: (Prec
                          -> forall b.
                             (Float -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)
                         ~R# (ReadPrec Float :: *))
          }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble1
  :: Prec
     -> forall b.
        (Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadDouble1
  = GHC.Read.$fReadDouble_$sreadNumber
      GHC.Read.$fReadDouble_$sconvertFrac

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble_$creadsPrec :: Int -> ReadS Double
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Double
                   (GHC.Read.$fReadDouble_$sreadNumber
                      GHC.Read.$fReadDouble_$sconvertFrac
                      n_a3tmE
                      @ Double
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Double))}]
GHC.Read.$fReadDouble_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Double
        (GHC.Read.$fReadDouble_$sreadNumber
           GHC.Read.$fReadDouble_$sconvertFrac
           n_a3tmE
           @ Double
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Double))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadDouble_$creadListPrec :: ReadPrec [Double]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadDouble_$creadListPrec
  = list
      @ Double
      (GHC.Read.$fReadDouble1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <Double>_R)
               :: (Prec
                   -> forall b.
                      (Double -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Double :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fReadDouble8 :: Text.ParserCombinators.ReadP.P [Double]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadDouble8
  = (((GHC.Read.$fReadDouble_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Double]>_R
               :: (ReadPrec [Double] :: *) ~R# (Prec -> P.ReadP [Double] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Double]>_R
             :: (P.ReadP [Double] :: *)
                ~R# (forall b.
                     ([Double] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Double]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Double])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadDouble_$creadList :: ReadS [Double]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadDouble_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [Double] GHC.Read.$fReadDouble8

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadDouble [InlPrag=NOUSERINLINE CONLIKE] :: Read Double
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Double
                       GHC.Read.$fReadDouble_$creadsPrec
                       GHC.Read.$fReadDouble_$creadList
                       GHC.Read.$fReadDouble1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Double>_R)
                               :: (Prec
                                   -> forall b.
                                      (Double -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Double :: *))
                       GHC.Read.$fReadDouble_$creadListPrec]
GHC.Read.$fReadDouble
  = GHC.Read.C:Read
      @ Double
      GHC.Read.$fReadDouble_$creadsPrec
      GHC.Read.$fReadDouble_$creadList
      (GHC.Read.$fReadDouble1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Double>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <Double>_R)
               :: (Prec
                   -> forall b.
                      (Double -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Double :: *)))
      GHC.Read.$fReadDouble_$creadListPrec

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadFloat1
  :: Prec
     -> forall b.
        (Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadFloat1
  = GHC.Read.$fReadFloat_$sreadNumber
      GHC.Read.$fReadFloat_$sconvertFrac

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Read.$fReadFloat_$creadsPrec :: Int -> ReadS Float
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Float
                   (GHC.Read.$fReadFloat_$sreadNumber
                      GHC.Read.$fReadFloat_$sconvertFrac
                      n_a3tmE
                      @ Float
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Float))}]
GHC.Read.$fReadFloat_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Float
        (GHC.Read.$fReadFloat_$sreadNumber
           GHC.Read.$fReadFloat_$sconvertFrac
           n_a3tmE
           @ Float
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Float))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadFloat_$creadListPrec :: ReadPrec [Float]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadFloat_$creadListPrec
  = list
      @ Float
      (GHC.Read.$fReadFloat1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Float>_R)
               :: (Prec
                   -> forall b.
                      (Float -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Float :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fReadFloat4 :: Text.ParserCombinators.ReadP.P [Float]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadFloat4
  = (((GHC.Read.$fReadFloat_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Float]>_R
               :: (ReadPrec [Float] :: *) ~R# (Prec -> P.ReadP [Float] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Float]>_R
             :: (P.ReadP [Float] :: *)
                ~R# (forall b.
                     ([Float] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Float]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Float])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadFloat_$creadList :: ReadS [Float]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadFloat_$creadList
  = Text.ParserCombinators.ReadP.run @ [Float] GHC.Read.$fReadFloat4

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadFloat [InlPrag=NOUSERINLINE CONLIKE] :: Read Float
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Float
                       GHC.Read.$fReadFloat_$creadsPrec
                       GHC.Read.$fReadFloat_$creadList
                       GHC.Read.$fReadFloat1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     <Float>_R)
                               :: (Prec
                                   -> forall b.
                                      (Float -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Float :: *))
                       GHC.Read.$fReadFloat_$creadListPrec]
GHC.Read.$fReadFloat
  = GHC.Read.C:Read
      @ Float
      GHC.Read.$fReadFloat_$creadsPrec
      GHC.Read.$fReadFloat_$creadList
      (GHC.Read.$fReadFloat1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Float>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Float>_R)
               :: (Prec
                   -> forall b.
                      (Float -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Float :: *)))
      GHC.Read.$fReadFloat_$creadListPrec

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$trModule3 = GHC.Types.TrNameS GHC.Read.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$trModule2 = "GHC.Read"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$trModule1 = GHC.Types.TrNameS GHC.Read.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.$trModule
  = GHC.Types.Module GHC.Read.$trModule3 GHC.Read.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r3N5l :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r3N5l
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r3N5m :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r3N5m
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r3N5n :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r3N5n
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3_r3N5o :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_r3N5o
  = GHC.Types.: @ KindRep $krep_r3N5l (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r3N5p :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_r3N5p
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep3_r3N5o

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$tcRead1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Read.$tcRead1
  = GHC.Types.KindRepFun GHC.Types.krep$* $krep2_r3N5n

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep5_r3N5q :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_r3N5q = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_r3N5r :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_r3N5r
  = GHC.Types.: @ KindRep $krep4_r3N5p (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep7_r3N5s :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_r3N5s = GHC.Types.: @ KindRep $krep5_r3N5q $krep6_r3N5r

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r3N5t :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_r3N5t
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep7_r3N5s

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_r3N5u :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep9_r3N5u
  = GHC.Types.: @ KindRep $krep8_r3N5t (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r3N5v :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_r3N5v
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep9_r3N5u

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r3N5w :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep11_r3N5w = GHC.Types.KindRepFun $krep4_r3N5p $krep10_r3N5v

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r3N5x :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_r3N5x = GHC.Types.KindRepFun $krep1_r3N5m $krep11_r3N5w

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep13_r3N5y :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep13_r3N5y
  = GHC.Types.: @ KindRep $krep5_r3N5q (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r3N5z :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep14_r3N5z
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep13_r3N5y

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_r3N5A :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep15_r3N5A = GHC.Types.: @ KindRep $krep14_r3N5z $krep6_r3N5r

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r3N5B :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep16_r3N5B
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep15_r3N5A

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep17_r3N5C :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep17_r3N5C
  = GHC.Types.: @ KindRep $krep16_r3N5B (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_r3N5D :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep18_r3N5D
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep17_r3N5C

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_r3N5E :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep19_r3N5E = GHC.Types.KindRepFun $krep4_r3N5p $krep18_r3N5D

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep20_r3N5F :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep20_r3N5F
  = GHC.Types.: @ KindRep $krep14_r3N5z (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_r3N5G :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep21_r3N5G
  = GHC.Types.KindRepTyConApp
      Text.ParserCombinators.ReadPrec.$tcReadPrec $krep20_r3N5F

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_r3N5H :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep22_r3N5H
  = GHC.Types.KindRepTyConApp
      Text.ParserCombinators.ReadPrec.$tcReadPrec $krep13_r3N5y

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$tcRead3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$tcRead3 = "Read"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$tcRead2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$tcRead2 = GHC.Types.TrNameS GHC.Read.$tcRead3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$tcRead :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Read.$tcRead
  = GHC.Types.TyCon
      2005723268194049725##
      6708234688584993214##
      GHC.Read.$trModule
      GHC.Read.$tcRead2
      0#
      GHC.Read.$tcRead1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_r3N5I :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep23_r3N5I
  = GHC.Types.KindRepTyConApp GHC.Read.$tcRead $krep13_r3N5y

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep24_r3N5J :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep24_r3N5J = GHC.Types.KindRepFun $krep21_r3N5G $krep23_r3N5I

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_r3N5K :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep25_r3N5K = GHC.Types.KindRepFun $krep22_r3N5H $krep24_r3N5J

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep26_r3N5L :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep26_r3N5L = GHC.Types.KindRepFun $krep19_r3N5E $krep25_r3N5K

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$tc'C:Read1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Read.$tc'C:Read1
  = GHC.Types.KindRepFun $krep12_r3N5x $krep26_r3N5L

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$tc'C:Read3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$tc'C:Read3 = "'C:Read"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$tc'C:Read2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$tc'C:Read2 = GHC.Types.TrNameS GHC.Read.$tc'C:Read3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$tc'C:Read :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Read.$tc'C:Read
  = GHC.Types.TyCon
      14808553548329602455##
      6533111827003124976##
      GHC.Read.$trModule
      GHC.Read.$tc'C:Read2
      1#
      GHC.Read.$tc'C:Read1

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Read.$fReadInt_$creadsPrec :: Int -> ReadS Int
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Int
                   (GHC.Read.$fReadInt_$sreadNumber
                      GHC.Read.$fReadInt2
                      n_a3tmE
                      @ Int
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Int))}]
GHC.Read.$fReadInt_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Int
        (GHC.Read.$fReadInt_$sreadNumber
           GHC.Read.$fReadInt2
           n_a3tmE
           @ Int
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Int))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadInt_$creadListPrec :: ReadPrec [Int]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadInt_$creadListPrec
  = list
      @ Int
      (GHC.Read.$fReadInt1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <Int>_R)
               :: (Prec
                   -> forall b.
                      (Int -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Int :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.Read.$fReadInt3 :: Text.ParserCombinators.ReadP.P [Int]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadInt3
  = (((GHC.Read.$fReadInt_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Int]>_R
               :: (ReadPrec [Int] :: *) ~R# (Prec -> P.ReadP [Int] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Int]>_R
             :: (P.ReadP [Int] :: *)
                ~R# (forall b.
                     ([Int] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Int]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Int])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadInt_$creadList :: ReadS [Int]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadInt_$creadList
  = Text.ParserCombinators.ReadP.run @ [Int] GHC.Read.$fReadInt3

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadInt [InlPrag=NOUSERINLINE CONLIKE] :: Read Int
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Int
                       GHC.Read.$fReadInt_$creadsPrec
                       GHC.Read.$fReadInt_$creadList
                       GHC.Read.$fReadInt1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <Int>_R)
                               :: (Prec
                                   -> forall b.
                                      (Int -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Int :: *))
                       GHC.Read.$fReadInt_$creadListPrec]
GHC.Read.$fReadInt
  = GHC.Read.C:Read
      @ Int
      GHC.Read.$fReadInt_$creadsPrec
      GHC.Read.$fReadInt_$creadList
      (GHC.Read.$fReadInt1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                   <Int>_R)
               :: (Prec
                   -> forall b.
                      (Int -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Int :: *)))
      GHC.Read.$fReadInt_$creadListPrec

Rec {
-- RHS size: {terms: 21, types: 30, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord32_go [Occ=LoopBreaker]
  :: [(Int, String)] -> [(Word32, String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.Read.$fReadWord32_go
  = \ (ds_i1y1c :: [(Int, String)]) ->
      case ds_i1y1c of {
        [] -> GHC.Types.[] @ (Word32, String);
        : y_i1y1h ys_i1y1i ->
          case y_i1y1h of { (x_a3K6q, r_a3K6r) ->
          GHC.Types.:
            @ (Word32, String)
            (case x_a3K6q of { I# x#_i1AQD ->
             GHC.Word.W32# (narrow32Word# (int2Word# x#_i1AQD))
             },
             r_a3K6r)
            (GHC.Read.$fReadWord32_go ys_i1y1i)
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord32_$creadsPrec :: Int -> ReadS Word32
[GblId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
GHC.Read.$fReadWord32_$creadsPrec
  = \ (p_a3K6o :: Int) (s_a3K6p :: String) ->
      GHC.Read.$fReadWord32_go
        (Text.ParserCombinators.ReadP.run
           @ Int
           (GHC.Read.$fReadInt_$sreadNumber
              GHC.Read.$fReadInt2
              p_a3K6o
              @ Int
              (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Int))
           s_a3K6p)

-- RHS size: {terms: 11, types: 17, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord10
  :: Prec
     -> forall b.
        (Word32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_X3tuM [Occ=Once] :: Prec)
                 (@ b_s3ofG)
                 (eta_B1 [Occ=Once]
                    :: Word32 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ Word32
                        (GHC.Read.$fReadWord32_$creadsPrec n_X3tuM)
                        @ b_s3ofG
                        eta_B1
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord10
  = \ (n_X3tuM :: Prec)
      (@ b_s3ofG)
      (eta_B1 :: Word32 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ Word32
             (GHC.Read.$fReadWord32_$creadsPrec n_X3tuM)
             @ b_s3ofG
             eta_B1
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 4, types: 5, coercions: 15, joins: 0/0}
GHC.Read.$fReadWord9 :: Text.ParserCombinators.ReadP.P [Word32]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadWord9
  = ((((list
          @ Word32
          (GHC.Read.$fReadWord10
           `cast` ((<Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <Word32>_R)
                   :: (Prec
                       -> forall b.
                          (Word32 -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                      ~R# (ReadPrec Word32 :: *))))
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Word32]>_R
               :: (ReadPrec [Word32] :: *) ~R# (Prec -> P.ReadP [Word32] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Word32]>_R
             :: (P.ReadP [Word32] :: *)
                ~R# (forall b.
                     ([Word32] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Word32]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Word32])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord32_$creadList :: ReadS [Word32]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadWord32_$creadList
  = Text.ParserCombinators.ReadP.run @ [Word32] GHC.Read.$fReadWord9

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord7
  :: Prec
     -> forall b.
        ([Word32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_s3ofG)
                 (w1_s3ofH [Occ=Once]
                    :: [Word32] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ [Word32] GHC.Read.$fReadWord32_$creadList @ b_s3ofG w1_s3ofH
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord7
  = \ _ [Occ=Dead]
      (@ b_s3ofG)
      (w1_s3ofH :: [Word32] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ [Word32] GHC.Read.$fReadWord32_$creadList @ b_s3ofG w1_s3ofH
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 5, types: 1, coercions: 20, joins: 0/0}
GHC.Read.$fReadWord32 [InlPrag=NOUSERINLINE CONLIKE] :: Read Word32
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Word32
                       GHC.Read.$fReadWord32_$creadsPrec
                       GHC.Read.$fReadWord32_$creadList
                       GHC.Read.$fReadWord10
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Word32>_R)
                               :: (Prec
                                   -> forall b.
                                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Word32 :: *))
                       GHC.Read.$fReadWord7
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <[Word32]>_R)
                               :: (Prec
                                   -> forall b.
                                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec [Word32] :: *))]
GHC.Read.$fReadWord32
  = GHC.Read.C:Read
      @ Word32
      GHC.Read.$fReadWord32_$creadsPrec
      GHC.Read.$fReadWord32_$creadList
      (GHC.Read.$fReadWord10
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <Word32>_R)
               :: (Prec
                   -> forall b.
                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Word32 :: *)))
      (GHC.Read.$fReadWord7
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <[Word32]>_R)
               :: (Prec
                   -> forall b.
                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec [Word32] :: *)))

Rec {
-- RHS size: {terms: 21, types: 30, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord16_go [Occ=LoopBreaker]
  :: [(Int, String)] -> [(Word16, String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.Read.$fReadWord16_go
  = \ (ds_i1y1c :: [(Int, String)]) ->
      case ds_i1y1c of {
        [] -> GHC.Types.[] @ (Word16, String);
        : y_i1y1h ys_i1y1i ->
          case y_i1y1h of { (x_a3K6u, r_a3K6v) ->
          GHC.Types.:
            @ (Word16, String)
            (case x_a3K6u of { I# x#_i1AQD ->
             GHC.Word.W16# (narrow16Word# (int2Word# x#_i1AQD))
             },
             r_a3K6v)
            (GHC.Read.$fReadWord16_go ys_i1y1i)
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord16_$creadsPrec :: Int -> ReadS Word16
[GblId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
GHC.Read.$fReadWord16_$creadsPrec
  = \ (p_a3K6s :: Int) (s_a3K6t :: String) ->
      GHC.Read.$fReadWord16_go
        (Text.ParserCombinators.ReadP.run
           @ Int
           (GHC.Read.$fReadInt_$sreadNumber
              GHC.Read.$fReadInt2
              p_a3K6s
              @ Int
              (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Int))
           s_a3K6t)

-- RHS size: {terms: 11, types: 17, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord6
  :: Prec
     -> forall b.
        (Word16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_X3tuZ [Occ=Once] :: Prec)
                 (@ b_s3ofG)
                 (eta_B1 [Occ=Once]
                    :: Word16 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ Word16
                        (GHC.Read.$fReadWord16_$creadsPrec n_X3tuZ)
                        @ b_s3ofG
                        eta_B1
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord6
  = \ (n_X3tuZ :: Prec)
      (@ b_s3ofG)
      (eta_B1 :: Word16 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ Word16
             (GHC.Read.$fReadWord16_$creadsPrec n_X3tuZ)
             @ b_s3ofG
             eta_B1
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 4, types: 5, coercions: 15, joins: 0/0}
GHC.Read.$fReadWord5 :: Text.ParserCombinators.ReadP.P [Word16]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadWord5
  = ((((list
          @ Word16
          (GHC.Read.$fReadWord6
           `cast` ((<Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Word16>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <Word16>_R)
                   :: (Prec
                       -> forall b.
                          (Word16 -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                      ~R# (ReadPrec Word16 :: *))))
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Word16]>_R
               :: (ReadPrec [Word16] :: *) ~R# (Prec -> P.ReadP [Word16] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Word16]>_R
             :: (P.ReadP [Word16] :: *)
                ~R# (forall b.
                     ([Word16] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Word16]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Word16])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord16_$creadList :: ReadS [Word16]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadWord16_$creadList
  = Text.ParserCombinators.ReadP.run @ [Word16] GHC.Read.$fReadWord5

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord4
  :: Prec
     -> forall b.
        ([Word16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_s3ofG)
                 (w1_s3ofH [Occ=Once]
                    :: [Word16] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ [Word16] GHC.Read.$fReadWord16_$creadList @ b_s3ofG w1_s3ofH
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord4
  = \ _ [Occ=Dead]
      (@ b_s3ofG)
      (w1_s3ofH :: [Word16] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ [Word16] GHC.Read.$fReadWord16_$creadList @ b_s3ofG w1_s3ofH
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 5, types: 1, coercions: 20, joins: 0/0}
GHC.Read.$fReadWord16 [InlPrag=NOUSERINLINE CONLIKE] :: Read Word16
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Word16
                       GHC.Read.$fReadWord16_$creadsPrec
                       GHC.Read.$fReadWord16_$creadList
                       GHC.Read.$fReadWord6
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word16>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Word16>_R)
                               :: (Prec
                                   -> forall b.
                                      (Word16 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Word16 :: *))
                       GHC.Read.$fReadWord4
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word16]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <[Word16]>_R)
                               :: (Prec
                                   -> forall b.
                                      ([Word16] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec [Word16] :: *))]
GHC.Read.$fReadWord16
  = GHC.Read.C:Read
      @ Word16
      GHC.Read.$fReadWord16_$creadsPrec
      GHC.Read.$fReadWord16_$creadList
      (GHC.Read.$fReadWord6
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word16>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <Word16>_R)
               :: (Prec
                   -> forall b.
                      (Word16 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Word16 :: *)))
      (GHC.Read.$fReadWord4
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word16]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <[Word16]>_R)
               :: (Prec
                   -> forall b.
                      ([Word16] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec [Word16] :: *)))

Rec {
-- RHS size: {terms: 21, types: 30, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord8_go [Occ=LoopBreaker]
  :: [(Int, String)] -> [(Word8, String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.Read.$fReadWord8_go
  = \ (ds_i1y1c :: [(Int, String)]) ->
      case ds_i1y1c of {
        [] -> GHC.Types.[] @ (Word8, String);
        : y_i1y1h ys_i1y1i ->
          case y_i1y1h of { (x_a3K6y, r_a3K6z) ->
          GHC.Types.:
            @ (Word8, String)
            (case x_a3K6y of { I# x#_i1AQD ->
             GHC.Word.W8# (narrow8Word# (int2Word# x#_i1AQD))
             },
             r_a3K6z)
            (GHC.Read.$fReadWord8_go ys_i1y1i)
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord8_$creadsPrec :: Int -> ReadS Word8
[GblId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
GHC.Read.$fReadWord8_$creadsPrec
  = \ (p_a3K6w :: Int) (s_a3K6x :: String) ->
      GHC.Read.$fReadWord8_go
        (Text.ParserCombinators.ReadP.run
           @ Int
           (GHC.Read.$fReadInt_$sreadNumber
              GHC.Read.$fReadInt2
              p_a3K6w
              @ Int
              (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Int))
           s_a3K6x)

-- RHS size: {terms: 11, types: 17, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord17
  :: Prec
     -> forall b.
        (Word8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_X3tvc [Occ=Once] :: Prec)
                 (@ b_s3ofG)
                 (eta_B1 [Occ=Once]
                    :: Word8 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ Word8 (GHC.Read.$fReadWord8_$creadsPrec n_X3tvc) @ b_s3ofG eta_B1
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord17
  = \ (n_X3tvc :: Prec)
      (@ b_s3ofG)
      (eta_B1 :: Word8 -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ Word8 (GHC.Read.$fReadWord8_$creadsPrec n_X3tvc) @ b_s3ofG eta_B1
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 4, types: 5, coercions: 15, joins: 0/0}
GHC.Read.$fReadWord15 :: Text.ParserCombinators.ReadP.P [Word8]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadWord15
  = ((((list
          @ Word8
          (GHC.Read.$fReadWord17
           `cast` ((<Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Word8>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Word8>_R)
                   :: (Prec
                       -> forall b.
                          (Word8 -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                      ~R# (ReadPrec Word8 :: *))))
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Word8]>_R
               :: (ReadPrec [Word8] :: *) ~R# (Prec -> P.ReadP [Word8] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Word8]>_R
             :: (P.ReadP [Word8] :: *)
                ~R# (forall b.
                     ([Word8] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [Word8]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Word8])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord8_$creadList :: ReadS [Word8]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadWord8_$creadList
  = Text.ParserCombinators.ReadP.run @ [Word8] GHC.Read.$fReadWord15

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
GHC.Read.$fReadWord14
  :: Prec
     -> forall b.
        ([Word8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_s3ofG)
                 (w1_s3ofH [Occ=Once]
                    :: [Word8] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ [Word8] GHC.Read.$fReadWord8_$creadList @ b_s3ofG w1_s3ofH
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.Read.$fReadWord14
  = \ _ [Occ=Dead]
      (@ b_s3ofG)
      (w1_s3ofH :: [Word8] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ [Word8] GHC.Read.$fReadWord8_$creadList @ b_s3ofG w1_s3ofH
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 5, types: 1, coercions: 20, joins: 0/0}
GHC.Read.$fReadWord8 [InlPrag=NOUSERINLINE CONLIKE] :: Read Word8
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Word8
                       GHC.Read.$fReadWord8_$creadsPrec
                       GHC.Read.$fReadWord8_$creadList
                       GHC.Read.$fReadWord17
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word8>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     <Word8>_R)
                               :: (Prec
                                   -> forall b.
                                      (Word8 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Word8 :: *))
                       GHC.Read.$fReadWord14
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word8]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       <[Word8]>_R)
                               :: (Prec
                                   -> forall b.
                                      ([Word8] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec [Word8] :: *))]
GHC.Read.$fReadWord8
  = GHC.Read.C:Read
      @ Word8
      GHC.Read.$fReadWord8_$creadsPrec
      GHC.Read.$fReadWord8_$creadList
      (GHC.Read.$fReadWord17
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word8>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <Word8>_R)
               :: (Prec
                   -> forall b.
                      (Word8 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Word8 :: *)))
      (GHC.Read.$fReadWord14
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word8]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       <[Word8]>_R)
               :: (Prec
                   -> forall b.
                      ([Word8] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec [Word8] :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 9, joins: 0/0}
GHC.Read.$fReadChar_$creadsPrec :: Int -> ReadS Char
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Char
                   (GHC.Read.list3
                      @ Char
                      (GHC.Read.$fReadChar7
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Char>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <Char>_R)
                               :: (Prec
                                   -> forall b.
                                      (Char -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Char :: *)))
                      n_a3tmE
                      @ Char
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Char))}]
GHC.Read.$fReadChar_$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ Char
        (GHC.Read.list3
           @ Char
           (GHC.Read.$fReadChar7
            `cast` ((<Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <Char>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                         <Char>_R)
                    :: (Prec
                        -> forall b.
                           (Char -> Text.ParserCombinators.ReadP.P b)
                           -> Text.ParserCombinators.ReadP.P b :: *)
                       ~R# (ReadPrec Char :: *)))
           n_a3tmE
           @ Char
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ Char))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.Read.$fReadChar5 :: ReadPrec [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadChar5
  = list
      @ Char
      (GHC.Read.$fReadChar6
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Char>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <Char>_R)
               :: (Prec
                   -> forall b.
                      (Char -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Char :: *)))

-- RHS size: {terms: 29, types: 26, coercions: 7, joins: 0/3}
GHC.Read.$fReadChar2 :: Prec -> P.ReadP String
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 270 60}]
GHC.Read.$fReadChar2
  = \ (n_a3tmw :: Prec) ->
      let {
        ds3_s3Lqp [Dmd=<L,C(U)>] :: P.ReadP String
        [LclId]
        ds3_s3Lqp
          = (GHC.Read.$fReadChar5
             `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <String>_R
                     :: (ReadPrec String :: *) ~R# (Prec -> P.ReadP String :: *)))
              n_a3tmw } in
      (\ (@ b_a3nvJ)
         (k_a3ni6 :: String -> Text.ParserCombinators.ReadP.P b_a3nvJ) ->
         let {
           lvl116_X3ws0 :: Text.ParserCombinators.ReadP.P b_a3nvJ
           [LclId]
           lvl116_X3ws0
             = Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                 @ b_a3nvJ
                 (GHC.Read.$fReadChar3 @ b_a3nvJ)
                 (Text.Read.Lex.expect2
                    @ b_a3nvJ
                    (\ (a1_a3ngt :: L.Lexeme) ->
                       case a1_a3ngt of {
                         __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b_a3nvJ;
                         L.String s_a3K6O -> k_a3ni6 s_a3K6O
                       })) } in
         let {
           k1_X3wds [Dmd=<L,C(U)>]
             :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
           [LclId,
            Arity=1,
            Str=<L,A>,
            Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                    WorkFree=True, Expandable=True,
                    Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
                    Tmpl= \ _ [Occ=Dead] -> lvl116_X3ws0}]
           k1_X3wds = \ _ [Occ=Dead] -> lvl116_X3ws0 } in
         Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
           @ b_a3nvJ
           (Text.ParserCombinators.ReadP.Look
              @ b_a3nvJ
              (\ (a_a3ngt :: String) ->
                 Text.ParserCombinators.ReadP.skipSpaces2
                   a_a3ngt @ b_a3nvJ k1_X3wds))
           ((ds3_s3Lqp
             `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <String>_R
                     :: (P.ReadP String :: *)
                        ~R# (forall b.
                             (String -> Text.ParserCombinators.ReadP.P b)
                             -> Text.ParserCombinators.ReadP.P b :: *)))
              @ b_a3nvJ k_a3ni6))
      `cast` (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <String>_R)
              :: (forall b.
                  (String -> Text.ParserCombinators.ReadP.P b)
                  -> Text.ParserCombinators.ReadP.P b :: *)
                 ~R# (P.ReadP String :: *))

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
GHC.Read.$fReadChar1
  :: Prec
     -> forall b.
        (String -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadChar1
  = GHC.Read.list3
      @ String
      (GHC.Read.$fReadChar2
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <String>_R)
               :: (Prec -> P.ReadP String :: *) ~R# (ReadPrec String :: *)))

-- RHS size: {terms: 4, types: 5, coercions: 3, joins: 0/0}
GHC.Read.$fReadChar8 :: Text.ParserCombinators.ReadP.P [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
GHC.Read.$fReadChar8
  = GHC.Read.list3
      @ String
      (GHC.Read.$fReadChar2
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <String>_R)
               :: (Prec -> P.ReadP String :: *) ~R# (ReadPrec String :: *)))
      GHC.Read.$fRead()7
      @ [Char]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Char])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fReadChar_$creadList :: ReadS [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fReadChar_$creadList
  = Text.ParserCombinators.ReadP.run @ [Char] GHC.Read.$fReadChar8

-- RHS size: {terms: 5, types: 1, coercions: 18, joins: 0/0}
GHC.Read.$fReadChar [InlPrag=NOUSERINLINE CONLIKE] :: Read Char
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Char
                       GHC.Read.$fReadChar_$creadsPrec
                       GHC.Read.$fReadChar_$creadList
                       GHC.Read.$fReadChar6
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Char>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <Char>_R)
                               :: (Prec
                                   -> forall b.
                                      (Char -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec Char :: *))
                       GHC.Read.$fReadChar1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <String>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <String>_R)
                               :: (Prec
                                   -> forall b.
                                      (String -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec String :: *))]
GHC.Read.$fReadChar
  = GHC.Read.C:Read
      @ Char
      GHC.Read.$fReadChar_$creadsPrec
      GHC.Read.$fReadChar_$creadList
      (GHC.Read.$fReadChar6
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Char>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                    <Char>_R)
               :: (Prec
                   -> forall b.
                      (Char -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec Char :: *)))
      (GHC.Read.$fReadChar1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <String>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <String>_R)
               :: (Prec
                   -> forall b.
                      (String -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec String :: *)))

-- RHS size: {terms: 2, types: 2, coercions: 9, joins: 0/0}
GHC.Read.$fRead[]_$s$creadListPrec1 :: ReadPrec [[Char]]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fRead[]_$s$creadListPrec1
  = list
      @ [Char]
      (GHC.Read.$fReadChar1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <String>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <String>_R)
               :: (Prec
                   -> forall b.
                      (String -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec String :: *)))

-- RHS size: {terms: 3, types: 6, coercions: 8, joins: 0/0}
GHC.Read.$fRead[]2 :: Text.ParserCombinators.ReadP.P [[Char]]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fRead[]2
  = (((GHC.Read.$fRead[]_$s$creadListPrec1
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[[Char]]>_R
               :: (ReadPrec [[Char]] :: *) ~R# (Prec -> P.ReadP [[Char]] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[[Char]]>_R
             :: (P.ReadP [[Char]] :: *)
                ~R# (forall b.
                     ([[Char]] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [[Char]]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [[Char]])

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
GHC.Read.$fRead[]_$s$creadList1 :: ReadS [[Char]]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fRead[]_$s$creadList1
  = Text.ParserCombinators.ReadP.run @ [[Char]] GHC.Read.$fRead[]2

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fRead[]_$s$creadListPrec :: ReadPrec [[Int]]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fRead[]_$s$creadListPrec
  = list @ [Int] GHC.Read.$fReadInt_$creadListPrec

-- RHS size: {terms: 3, types: 6, coercions: 8, joins: 0/0}
GHC.Read.$fRead[]1 :: Text.ParserCombinators.ReadP.P [[Int]]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fRead[]1
  = (((GHC.Read.$fRead[]_$s$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[[Int]]>_R
               :: (ReadPrec [[Int]] :: *) ~R# (Prec -> P.ReadP [[Int]] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[[Int]]>_R
             :: (P.ReadP [[Int]] :: *)
                ~R# (forall b.
                     ([[Int]] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [[Int]]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [[Int]])

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
GHC.Read.$fRead[]_$s$creadList :: ReadS [[Int]]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fRead[]_$s$creadList
  = Text.ParserCombinators.ReadP.run @ [[Int]] GHC.Read.$fRead[]1

-- RHS size: {terms: 6, types: 8, coercions: 3, joins: 0/0}
GHC.Read.$fRead[]_$s$creadsPrec1 :: Int -> ReadS [Char]
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Char]
                   (GHC.Read.list3
                      @ String
                      (GHC.Read.$fReadChar2
                       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                        <String>_R)
                               :: (Prec -> P.ReadP String :: *) ~R# (ReadPrec String :: *)))
                      n_a3tmE
                      @ [Char]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Char]))}]
GHC.Read.$fRead[]_$s$creadsPrec1
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ [Char]
        (GHC.Read.list3
           @ String
           (GHC.Read.$fReadChar2
            `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <String>_R)
                    :: (Prec -> P.ReadP String :: *) ~R# (ReadPrec String :: *)))
           n_a3tmE
           @ [Char]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Char]))

-- RHS size: {terms: 5, types: 7, coercions: 6, joins: 0/0}
GHC.Read.$fRead[]_$s$creadsPrec :: Int -> ReadS [Int]
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Int]
                   ((((GHC.Read.$fReadInt_$creadListPrec
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Int]>_R
                               :: (ReadPrec [Int] :: *) ~R# (Prec -> P.ReadP [Int] :: *)))
                        n_a3tmE)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Int]>_R
                             :: (P.ReadP [Int] :: *)
                                ~R# (forall b.
                                     ([Int] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Int]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Int]))}]
GHC.Read.$fRead[]_$s$creadsPrec
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ [Int]
        ((((GHC.Read.$fReadInt_$creadListPrec
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[Int]>_R
                    :: (ReadPrec [Int] :: *) ~R# (Prec -> P.ReadP [Int] :: *)))
             n_a3tmE)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[Int]>_R
                  :: (P.ReadP [Int] :: *)
                     ~R# (forall b.
                          ([Int] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Int]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [Int]))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fRead[]_$s$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: Read [Int]
[GblId,
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: [Int]
                       GHC.Read.$fRead[]_$s$creadsPrec
                       GHC.Read.$fRead[]_$s$creadList
                       GHC.Read.$fReadInt_$creadListPrec
                       GHC.Read.$fRead[]_$s$creadListPrec]
GHC.Read.$fRead[]_$s$fRead[]
  = GHC.Read.C:Read
      @ [Int]
      GHC.Read.$fRead[]_$s$creadsPrec
      GHC.Read.$fRead[]_$s$creadList
      GHC.Read.$fReadInt_$creadListPrec
      GHC.Read.$fRead[]_$s$creadListPrec

-- RHS size: {terms: 5, types: 2, coercions: 9, joins: 0/0}
GHC.Read.$fRead[]_$s$fRead[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: Read [Char]
[GblId,
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: [Char]
                       GHC.Read.$fRead[]_$s$creadsPrec1
                       GHC.Read.$fRead[]_$s$creadList1
                       GHC.Read.$fReadChar1
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <String>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <String>_R)
                               :: (Prec
                                   -> forall b.
                                      (String -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec String :: *))
                       GHC.Read.$fRead[]_$s$creadListPrec1]
GHC.Read.$fRead[]_$s$fRead[]1
  = GHC.Read.C:Read
      @ [Char]
      GHC.Read.$fRead[]_$s$creadsPrec1
      GHC.Read.$fRead[]_$s$creadList1
      (GHC.Read.$fReadChar1
       `cast` ((<Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <String>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <String>_R)
               :: (Prec
                   -> forall b.
                      (String -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (ReadPrec String :: *)))
      GHC.Read.$fRead[]_$s$creadListPrec1

-- RHS size: {terms: 5, types: 7, coercions: 6, joins: 0/0}
GHC.Read.$fRead[]_$s$creadsPrec2 :: Int -> ReadS [String]
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a3tmE [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ [String]
                   ((((GHC.Read.$fRead[]_$s$creadListPrec1
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[String]>_R
                               :: (ReadPrec [String] :: *) ~R# (Prec -> P.ReadP [String] :: *)))
                        n_a3tmE)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[String]>_R
                             :: (P.ReadP [String] :: *)
                                ~R# (forall b.
                                     ([String] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [String]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [String]))}]
GHC.Read.$fRead[]_$s$creadsPrec2
  = \ (n_a3tmE :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ [String]
        ((((GHC.Read.$fRead[]_$s$creadListPrec1
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[String]>_R
                    :: (ReadPrec [String] :: *) ~R# (Prec -> P.ReadP [String] :: *)))
             n_a3tmE)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[String]>_R
                  :: (P.ReadP [String] :: *)
                     ~R# (forall b.
                          ([String] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [String]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [String]))

-- RHS size: {terms: 8, types: 12, coercions: 6, joins: 0/0}
GHC.Read.$fRead[]_$creadsPrec
  :: forall a. Read a => Int -> ReadS [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3KVb)
                 ($dRead_a3KVc [Occ=Once] :: Read a_a3KVb)
                 (eta_B1 [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ [a_a3KVb]
                   (((((readListPrec @ a_a3KVb $dRead_a3KVc)
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[a_a3KVb]>_R
                               :: (ReadPrec [a_a3KVb] :: *) ~R# (Prec -> P.ReadP [a_a3KVb] :: *)))
                        eta_B1)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3KVb]>_R
                             :: (P.ReadP [a_a3KVb] :: *)
                                ~R# (forall b.
                                     ([a_a3KVb] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [a_a3KVb]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [a_a3KVb]))}]
GHC.Read.$fRead[]_$creadsPrec
  = \ (@ a_a3KVb) ($dRead_a3KVc :: Read a_a3KVb) (eta_B1 :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ [a_a3KVb]
        (((((readListPrec @ a_a3KVb $dRead_a3KVc)
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[a_a3KVb]>_R
                    :: (ReadPrec [a_a3KVb] :: *) ~R# (Prec -> P.ReadP [a_a3KVb] :: *)))
             eta_B1)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3KVb]>_R
                  :: (P.ReadP [a_a3KVb] :: *)
                     ~R# (forall b.
                          ([a_a3KVb] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [a_a3KVb]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [a_a3KVb]))

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fRead[]_$s$creadListPrec2 :: ReadPrec [[String]]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fRead[]_$s$creadListPrec2
  = list @ [String] GHC.Read.$fRead[]_$s$creadListPrec1

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
GHC.Read.$fRead[]_$creadListPrec
  :: forall a. Read a => ReadPrec [[a]]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,A,1*C1(C(U)))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3KVb) ($dRead_a3KVc [Occ=Once] :: Read a_a3KVb) ->
                 list @ [a_a3KVb] (readListPrec @ a_a3KVb $dRead_a3KVc)}]
GHC.Read.$fRead[]_$creadListPrec
  = \ (@ a_a3KVb) ($dRead_a3KVc :: Read a_a3KVb) ->
      list @ [a_a3KVb] (readListPrec @ a_a3KVb $dRead_a3KVc)

-- RHS size: {terms: 3, types: 6, coercions: 8, joins: 0/0}
GHC.Read.$fRead[]3 :: Text.ParserCombinators.ReadP.P [[String]]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fRead[]3
  = (((GHC.Read.$fRead[]_$s$creadListPrec2
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                   <[[String]]>_R
               :: (ReadPrec [[String]] :: *)
                  ~R# (Prec -> P.ReadP [[String]] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[[String]]>_R
             :: (P.ReadP [[String]] :: *)
                ~R# (forall b.
                     ([[String]] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [[String]]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [[String]])

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
GHC.Read.$fRead[]_$s$creadList2 :: ReadS [[String]]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Read.$fRead[]_$s$creadList2
  = Text.ParserCombinators.ReadP.run @ [[String]] GHC.Read.$fRead[]3

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.Read.$fRead[]_$s$fRead[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: Read [String]
[GblId,
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: [String]
                       GHC.Read.$fRead[]_$s$creadsPrec2
                       GHC.Read.$fRead[]_$s$creadList2
                       GHC.Read.$fRead[]_$s$creadListPrec1
                       GHC.Read.$fRead[]_$s$creadListPrec2]
GHC.Read.$fRead[]_$s$fRead[]2
  = GHC.Read.C:Read
      @ [String]
      GHC.Read.$fRead[]_$s$creadsPrec2
      GHC.Read.$fRead[]_$s$creadList2
      GHC.Read.$fRead[]_$s$creadListPrec1
      GHC.Read.$fRead[]_$s$creadListPrec2

-- RHS size: {terms: 8, types: 16, coercions: 8, joins: 0/0}
GHC.Read.$fRead[]_$creadList :: forall a. Read a => ReadS [[a]]
[GblId,
 Arity=1,
 Str=<L,1*U(A,A,A,1*C1(C(U)))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a3KVb) ($dRead_a3KVc [Occ=Once] :: Read a_a3KVb) ->
                 Text.ParserCombinators.ReadP.run
                   @ [[a_a3KVb]]
                   (((((list @ [a_a3KVb] (readListPrec @ a_a3KVb $dRead_a3KVc))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[[a_a3KVb]]>_R
                               :: (ReadPrec [[a_a3KVb]] :: *)
                                  ~R# (Prec -> P.ReadP [[a_a3KVb]] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[[a_a3KVb]]>_R
                             :: (P.ReadP [[a_a3KVb]] :: *)
                                ~R# (forall b.
                                     ([[a_a3KVb]] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [[a_a3KVb]]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [[a_a3KVb]]))}]
GHC.Read.$fRead[]_$creadList
  = \ (@ a_a3KVb) ($dRead_a3KVc :: Read a_a3KVb) ->
      Text.ParserCombinators.ReadP.run
        @ [[a_a3KVb]]
        (((((list @ [a_a3KVb] (readListPrec @ a_a3KVb $dRead_a3KVc))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[[a_a3KVb]]>_R
                    :: (ReadPrec [[a_a3KVb]] :: *)
                       ~R# (Prec -> P.ReadP [[a_a3KVb]] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[[a_a3KVb]]>_R
                  :: (P.ReadP [[a_a3KVb]] :: *)
                     ~R# (forall b.
                          ([[a_a3KVb]] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [[a_a3KVb]]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [[a_a3KVb]]))

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
GHC.Read.$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Read a => Read [a]
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,A,U)>m,
 Unf=DFun: \ (@ a_a3K6I) (v_X8P :: Read a_a3K6I) ->
       GHC.Read.C:Read TYPE: [a_a3K6I]
                       GHC.Read.$fRead[]_$creadsPrec @ a_a3K6I v_X8P
                       GHC.Read.$fRead[]_$creadList @ a_a3K6I v_X8P
                       readListPrec @ a_a3K6I v_X8P
                       GHC.Read.$fRead[]_$creadListPrec @ a_a3K6I v_X8P]
GHC.Read.$fRead[]
  = \ (@ a_a3KVb) ($dRead_a3KVc :: Read a_a3KVb) ->
      GHC.Read.C:Read
        @ [a_a3KVb]
        (GHC.Read.$fRead[]_$creadsPrec @ a_a3KVb $dRead_a3KVc)
        (GHC.Read.$fRead[]_$creadList @ a_a3KVb $dRead_a3KVc)
        (readListPrec @ a_a3KVb $dRead_a3KVc)
        (GHC.Read.$fRead[]_$creadListPrec @ a_a3KVb $dRead_a3KVc)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadNonEmpty5 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadNonEmpty5 = GHC.Types.I# 6#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadNonEmpty4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadNonEmpty4 = ":|"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadNonEmpty3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadNonEmpty3 = unpackCString# GHC.Read.$fReadNonEmpty4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadNonEmpty2 :: L.Lexeme
[GblId,
 Str=m5,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadNonEmpty2
  = Text.Read.Lex.Symbol GHC.Read.$fReadNonEmpty3

-- RHS size: {terms: 42, types: 46, coercions: 21, joins: 0/1}
GHC.Read.$fReadNonEmpty1
  :: forall a.
     Read a =>
     Prec
     -> forall b.
        (NonEmpty a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,1*C1(C(U)),C(C1(U)))><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0] 301 0}]
GHC.Read.$fReadNonEmpty1
  = \ (@ a_a3Ktx)
      ($dRead_a3Kty :: Read a_a3Ktx)
      (eta_B2 :: Prec)
      (@ b_a3ngn)
      (eta1_B1
         :: NonEmpty a_a3Ktx -> Text.ParserCombinators.ReadP.P b_a3ngn) ->
      GHC.Read.list3
        @ (NonEmpty a_a3Ktx)
        (let {
           ds1_s3Lqm [Dmd=<L,C(U)>] :: P.ReadP a_a3Ktx
           [LclId]
           ds1_s3Lqm
             = ((readPrec @ a_a3Ktx $dRead_a3Kty)
                `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a_a3Ktx>_R
                        :: (ReadPrec a_a3Ktx :: *) ~R# (Prec -> P.ReadP a_a3Ktx :: *)))
                 GHC.Read.$fReadNonEmpty5 } in
         (\ (c_a3tmt :: Prec)
            (@ b1_X3nwX)
            (eta2_XgC
               :: NonEmpty a_a3Ktx -> Text.ParserCombinators.ReadP.P b1_X3nwX) ->
            case c_a3tmt of { I# x_at1e ->
            case <=# x_at1e 5# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1_X3nwX;
              1# ->
                (ds1_s3Lqm
                 `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <a_a3Ktx>_R
                         :: (P.ReadP a_a3Ktx :: *)
                            ~R# (forall b.
                                 (a_a3Ktx -> Text.ParserCombinators.ReadP.P b)
                                 -> Text.ParserCombinators.ReadP.P b :: *)))
                  @ b1_X3nwX
                  (\ (a1_a3ngt :: a_a3Ktx) ->
                     case Text.Read.Lex.$wexpect
                            GHC.Read.$fReadNonEmpty2
                            @ b1_X3nwX
                            (\ _ [Occ=Dead, OS=OneShot] ->
                               ((((readListPrec @ a_a3Ktx $dRead_a3Kty)
                                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                              <[a_a3Ktx]>_R
                                          :: (ReadPrec [a_a3Ktx] :: *)
                                             ~R# (Prec -> P.ReadP [a_a3Ktx] :: *)))
                                   GHC.Read.$fReadNonEmpty5)
                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[a_a3Ktx]>_R
                                        :: (P.ReadP [a_a3Ktx] :: *)
                                           ~R# (forall b.
                                                ([a_a3Ktx] -> Text.ParserCombinators.ReadP.P b)
                                                -> Text.ParserCombinators.ReadP.P b :: *)))
                                 @ b1_X3nwX
                                 (\ (a3_X3nqe :: [a_a3Ktx]) ->
                                    eta2_XgC (GHC.Base.:| @ a_a3Ktx a1_a3ngt a3_X3nqe)))
                     of
                     { (# ww1_s3xlt #) ->
                     Text.ParserCombinators.ReadP.Look @ b1_X3nwX ww1_s3xlt
                     })
            }
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <NonEmpty
                                   a_a3Ktx>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <NonEmpty a_a3Ktx>_R)
                 :: (Prec
                     -> forall b.
                        (NonEmpty a_a3Ktx -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (NonEmpty a_a3Ktx) :: *)))
        eta_B2
        @ b_a3ngn
        eta1_B1

-- RHS size: {terms: 8, types: 12, coercions: 0, joins: 0/0}
GHC.Read.$fReadNonEmpty_$creadsPrec
  :: forall a. Read a => Int -> ReadS (NonEmpty a)
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KIs)
                 ($dRead_X3KIu [Occ=Once] :: Read a_X3KIs)
                 (eta_B1 [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (NonEmpty a_X3KIs)
                   (GHC.Read.$fReadNonEmpty1
                      @ a_X3KIs
                      $dRead_X3KIu
                      eta_B1
                      @ (NonEmpty a_X3KIs)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (NonEmpty a_X3KIs)))}]
GHC.Read.$fReadNonEmpty_$creadsPrec
  = \ (@ a_X3KIs) ($dRead_X3KIu :: Read a_X3KIs) (eta_B1 :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (NonEmpty a_X3KIs)
        (GHC.Read.$fReadNonEmpty1
           @ a_X3KIs
           $dRead_X3KIu
           eta_B1
           @ (NonEmpty a_X3KIs)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (NonEmpty a_X3KIs)))

-- RHS size: {terms: 5, types: 7, coercions: 11, joins: 0/0}
GHC.Read.$fReadNonEmpty_$creadListPrec
  :: forall a. Read a => ReadPrec [NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KIt) ($dRead_X3KIv [Occ=Once] :: Read a_X3KIt) ->
                 list
                   @ (NonEmpty a_X3KIt)
                   ((GHC.Read.$fReadNonEmpty1 @ a_X3KIt $dRead_X3KIv)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <NonEmpty
                                              a_X3KIt>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <NonEmpty a_X3KIt>_R)
                            :: (Prec
                                -> forall b.
                                   (NonEmpty a_X3KIt -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (NonEmpty a_X3KIt) :: *)))}]
GHC.Read.$fReadNonEmpty_$creadListPrec
  = \ (@ a_X3KIt) ($dRead_X3KIv :: Read a_X3KIt) ->
      list
        @ (NonEmpty a_X3KIt)
        ((GHC.Read.$fReadNonEmpty1 @ a_X3KIt $dRead_X3KIv)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <NonEmpty
                                   a_X3KIt>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <NonEmpty a_X3KIt>_R)
                 :: (Prec
                     -> forall b.
                        (NonEmpty a_X3KIt -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (NonEmpty a_X3KIt) :: *)))

-- RHS size: {terms: 8, types: 16, coercions: 19, joins: 0/0}
GHC.Read.$fReadNonEmpty_$creadList
  :: forall a. Read a => ReadS [NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3KIu) ($dRead_X3KIw [Occ=Once] :: Read a_X3KIu) ->
                 Text.ParserCombinators.ReadP.run
                   @ [NonEmpty a_X3KIu]
                   (((((list
                          @ (NonEmpty a_X3KIu)
                          ((GHC.Read.$fReadNonEmpty1 @ a_X3KIu $dRead_X3KIw)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <NonEmpty
                                                     a_X3KIu>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <NonEmpty a_X3KIu>_R)
                                   :: (Prec
                                       -> forall b.
                                          (NonEmpty a_X3KIu -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec (NonEmpty a_X3KIu) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[NonEmpty a_X3KIu]>_R
                               :: (ReadPrec [NonEmpty a_X3KIu] :: *)
                                  ~R# (Prec -> P.ReadP [NonEmpty a_X3KIu] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[NonEmpty a_X3KIu]>_R
                             :: (P.ReadP [NonEmpty a_X3KIu] :: *)
                                ~R# (forall b.
                                     ([NonEmpty a_X3KIu] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [NonEmpty a_X3KIu]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [NonEmpty a_X3KIu]))}]
GHC.Read.$fReadNonEmpty_$creadList
  = \ (@ a_X3KIu) ($dRead_X3KIw :: Read a_X3KIu) ->
      Text.ParserCombinators.ReadP.run
        @ [NonEmpty a_X3KIu]
        (((((list
               @ (NonEmpty a_X3KIu)
               ((GHC.Read.$fReadNonEmpty1 @ a_X3KIu $dRead_X3KIw)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <NonEmpty
                                          a_X3KIu>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <NonEmpty a_X3KIu>_R)
                        :: (Prec
                            -> forall b.
                               (NonEmpty a_X3KIu -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec (NonEmpty a_X3KIu) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[NonEmpty a_X3KIu]>_R
                    :: (ReadPrec [NonEmpty a_X3KIu] :: *)
                       ~R# (Prec -> P.ReadP [NonEmpty a_X3KIu] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[NonEmpty a_X3KIu]>_R
                  :: (P.ReadP [NonEmpty a_X3KIu] :: *)
                     ~R# (forall b.
                          ([NonEmpty a_X3KIu] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [NonEmpty a_X3KIu]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [NonEmpty a_X3KIu]))

-- RHS size: {terms: 11, types: 10, coercions: 11, joins: 0/0}
GHC.Read.$fReadNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Read a => Read (NonEmpty a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>m,
 Unf=DFun: \ (@ a_a3K8w) (v_X9f :: Read a_a3K8w) ->
       GHC.Read.C:Read TYPE: NonEmpty a_a3K8w
                       GHC.Read.$fReadNonEmpty_$creadsPrec @ a_a3K8w v_X9f
                       GHC.Read.$fReadNonEmpty_$creadList @ a_a3K8w v_X9f
                       (GHC.Read.$fReadNonEmpty1 @ a_a3K8w v_X9f)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <NonEmpty
                                                 a_a3K8w>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <NonEmpty a_a3K8w>_R)
                               :: (Prec
                                   -> forall b.
                                      (NonEmpty a_a3K8w -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec (NonEmpty a_a3K8w) :: *))
                       GHC.Read.$fReadNonEmpty_$creadListPrec @ a_a3K8w v_X9f]
GHC.Read.$fReadNonEmpty
  = \ (@ a_X3KIv) ($dRead_X3KIx :: Read a_X3KIv) ->
      GHC.Read.C:Read
        @ (NonEmpty a_X3KIv)
        (GHC.Read.$fReadNonEmpty_$creadsPrec @ a_X3KIv $dRead_X3KIx)
        (GHC.Read.$fReadNonEmpty_$creadList @ a_X3KIv $dRead_X3KIx)
        ((GHC.Read.$fReadNonEmpty1 @ a_X3KIv $dRead_X3KIx)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <NonEmpty
                                   a_X3KIv>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <NonEmpty a_X3KIv>_R)
                 :: (Prec
                     -> forall b.
                        (NonEmpty a_X3KIv -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (NonEmpty a_X3KIv) :: *)))
        (GHC.Read.$fReadNonEmpty_$creadListPrec @ a_X3KIv $dRead_X3KIx)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadArray4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Read.$fReadArray4 = "array"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadArray3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Read.$fReadArray3 = unpackCString# GHC.Read.$fReadArray4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Read.$fReadArray_lexeme :: L.Lexeme
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Read.$fReadArray_lexeme
  = Text.Read.Lex.Ident GHC.Read.$fReadArray3

-- RHS size: {terms: 49, types: 73, coercions: 36, joins: 0/1}
GHC.Read.$fReadArray1
  :: forall a b.
     (Ix a, Read a, Read b) =>
     Prec
     -> forall b1.
        (Array a b -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0] 361 0}]
GHC.Read.$fReadArray1
  = \ (@ a_a3KUf)
      (@ b_a3KUg)
      ($dIx_a3KUh :: Ix a_a3KUf)
      ($dRead_a3KUi :: Read a_a3KUf)
      ($dRead1_a3KUj :: Read b_a3KUg)
      (eta_B2 :: Prec)
      (@ b1_a3ngn)
      (eta1_B1
         :: Array a_a3KUf b_a3KUg
            -> Text.ParserCombinators.ReadP.P b1_a3ngn) ->
      let {
        lvl2_s3LB7 [Dmd=<L,C(C(U))>]
          :: Prec
             -> forall b2.
                ((a_a3KUf, b_a3KUg) -> Text.ParserCombinators.ReadP.P b2)
                -> Text.ParserCombinators.ReadP.P b2
        [LclId, Arity=2, Unf=OtherCon []]
        lvl2_s3LB7
          = GHC.Read.$fRead(,)1
              @ a_a3KUf @ b_a3KUg $dRead_a3KUi $dRead1_a3KUj } in
      GHC.Read.list3
        @ (Array a_a3KUf b_a3KUg)
        ((\ (c_a3tmt :: Prec)
            (@ b2_X3nvw)
            (eta2_X8
               :: Array a_a3KUf b_a3KUg
                  -> Text.ParserCombinators.ReadP.P b2_X3nvw) ->
            case c_a3tmt of { I# x_at1e ->
            case <=# x_at1e 10# of {
              __DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b2_X3nvw;
              1# ->
                case Text.Read.Lex.$wexpect
                       GHC.Read.$fReadArray_lexeme
                       @ b2_X3nvw
                       (\ _ [Occ=Dead, OS=OneShot] ->
                          GHC.Read.$fRead(,)1
                            @ a_a3KUf
                            @ a_a3KUf
                            $dRead_a3KUi
                            $dRead_a3KUi
                            GHC.Read.$fReadArray2
                            @ b2_X3nvw
                            (\ (a2_X3nvQ :: (a_a3KUf, a_a3KUf)) ->
                               ((((list
                                     @ (a_a3KUf, b_a3KUg)
                                     (lvl2_s3LB7
                                      `cast` ((<Prec>_R
                                               ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                             <(a_a3KUf,
                                                               b_a3KUg)>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                        <(a_a3KUf,
                                                                                          b_a3KUg)>_R)
                                              :: (Prec
                                                  -> forall b.
                                                     ((a_a3KUf, b_a3KUg)
                                                      -> Text.ParserCombinators.ReadP.P b)
                                                     -> Text.ParserCombinators.ReadP.P b :: *)
                                                 ~R# (ReadPrec (a_a3KUf, b_a3KUg) :: *))))
                                  `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                              <[(a_a3KUf, b_a3KUg)]>_R
                                          :: (ReadPrec [(a_a3KUf, b_a3KUg)] :: *)
                                             ~R# (Prec -> P.ReadP [(a_a3KUf, b_a3KUg)] :: *)))
                                   GHC.Read.$fReadArray2)
                                `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                            <[(a_a3KUf, b_a3KUg)]>_R
                                        :: (P.ReadP [(a_a3KUf, b_a3KUg)] :: *)
                                           ~R# (forall b.
                                                ([(a_a3KUf, b_a3KUg)]
                                                 -> Text.ParserCombinators.ReadP.P b)
                                                -> Text.ParserCombinators.ReadP.P b :: *)))
                                 @ b2_X3nvw
                                 (\ (a3_X3nqq :: [(a_a3KUf, b_a3KUg)]) ->
                                    eta2_X8
                                      (array @ a_a3KUf @ b_a3KUg $dIx_a3KUh a2_X3nvQ a3_X3nqq))))
                of
                { (# ww1_s3xlt #) ->
                Text.ParserCombinators.ReadP.Look @ b2_X3nvw ww1_s3xlt
                }
            }
            })
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Array
                                   a_a3KUf
                                   b_a3KUg>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Array a_a3KUf b_a3KUg>_R)
                 :: (Prec
                     -> forall b.
                        (Array a_a3KUf b_a3KUg -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Array a_a3KUf b_a3KUg) :: *)))
        eta_B2
        @ b1_a3ngn
        eta1_B1

-- RHS size: {terms: 13, types: 22, coercions: 0, joins: 0/0}
GHC.Read.$fReadArray_$creadsPrec
  :: forall a b. (Ix a, Read a, Read b) => Int -> ReadS (Array a b)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L9l)
                 (@ b_X3L9n)
                 ($dIx_X3L9p [Occ=Once] :: Ix a_X3L9l)
                 ($dRead_X3L9r [Occ=Once] :: Read a_X3L9l)
                 ($dRead1_X3L9t [Occ=Once] :: Read b_X3L9n)
                 (n_X3tw8 [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (Array a_X3L9l b_X3L9n)
                   (GHC.Read.$fReadArray1
                      @ a_X3L9l
                      @ b_X3L9n
                      $dIx_X3L9p
                      $dRead_X3L9r
                      $dRead1_X3L9t
                      n_X3tw8
                      @ (Array a_X3L9l b_X3L9n)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (Array a_X3L9l b_X3L9n)))}]
GHC.Read.$fReadArray_$creadsPrec
  = \ (@ a_X3L9l)
      (@ b_X3L9n)
      ($dIx_X3L9p :: Ix a_X3L9l)
      ($dRead_X3L9r :: Read a_X3L9l)
      ($dRead1_X3L9t :: Read b_X3L9n)
      (n_X3tw8 :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ (Array a_X3L9l b_X3L9n)
        (GHC.Read.$fReadArray1
           @ a_X3L9l
           @ b_X3L9n
           $dIx_X3L9p
           $dRead_X3L9r
           $dRead1_X3L9t
           n_X3tw8
           @ (Array a_X3L9l b_X3L9n)
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ (Array a_X3L9l b_X3L9n)))

-- RHS size: {terms: 10, types: 15, coercions: 13, joins: 0/0}
GHC.Read.$fReadArray_$creadListPrec
  :: forall a b. (Ix a, Read a, Read b) => ReadPrec [Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L9m)
                 (@ b_X3L9o)
                 ($dIx_X3L9q [Occ=Once] :: Ix a_X3L9m)
                 ($dRead_X3L9s [Occ=Once] :: Read a_X3L9m)
                 ($dRead1_X3L9u [Occ=Once] :: Read b_X3L9o) ->
                 list
                   @ (Array a_X3L9m b_X3L9o)
                   ((GHC.Read.$fReadArray1
                       @ a_X3L9m @ b_X3L9o $dIx_X3L9q $dRead_X3L9s $dRead1_X3L9u)
                    `cast` ((<Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Array
                                              a_X3L9m
                                              b_X3L9o>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <Array a_X3L9m b_X3L9o>_R)
                            :: (Prec
                                -> forall b.
                                   (Array a_X3L9m b_X3L9o -> Text.ParserCombinators.ReadP.P b)
                                   -> Text.ParserCombinators.ReadP.P b :: *)
                               ~R# (ReadPrec (Array a_X3L9m b_X3L9o) :: *)))}]
GHC.Read.$fReadArray_$creadListPrec
  = \ (@ a_X3L9m)
      (@ b_X3L9o)
      ($dIx_X3L9q :: Ix a_X3L9m)
      ($dRead_X3L9s :: Read a_X3L9m)
      ($dRead1_X3L9u :: Read b_X3L9o) ->
      list
        @ (Array a_X3L9m b_X3L9o)
        ((GHC.Read.$fReadArray1
            @ a_X3L9m @ b_X3L9o $dIx_X3L9q $dRead_X3L9s $dRead1_X3L9u)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Array
                                   a_X3L9m
                                   b_X3L9o>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Array a_X3L9m b_X3L9o>_R)
                 :: (Prec
                     -> forall b.
                        (Array a_X3L9m b_X3L9o -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Array a_X3L9m b_X3L9o) :: *)))

-- RHS size: {terms: 13, types: 27, coercions: 23, joins: 0/0}
GHC.Read.$fReadArray_$creadList
  :: forall a b. (Ix a, Read a, Read b) => ReadS [Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_X3L9n)
                 (@ b_X3L9p)
                 ($dIx_X3L9r [Occ=Once] :: Ix a_X3L9n)
                 ($dRead_X3L9t [Occ=Once] :: Read a_X3L9n)
                 ($dRead1_X3L9v [Occ=Once] :: Read b_X3L9p) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Array a_X3L9n b_X3L9p]
                   (((((list
                          @ (Array a_X3L9n b_X3L9p)
                          ((GHC.Read.$fReadArray1
                              @ a_X3L9n @ b_X3L9p $dIx_X3L9r $dRead_X3L9t $dRead1_X3L9v)
                           `cast` ((<Prec>_R
                                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                  <Array
                                                     a_X3L9n
                                                     b_X3L9p>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <Array
                                                                                a_X3L9n b_X3L9p>_R)
                                   :: (Prec
                                       -> forall b.
                                          (Array a_X3L9n b_X3L9p
                                           -> Text.ParserCombinators.ReadP.P b)
                                          -> Text.ParserCombinators.ReadP.P b :: *)
                                      ~R# (ReadPrec (Array a_X3L9n b_X3L9p) :: *))))
                       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <[Array a_X3L9n b_X3L9p]>_R
                               :: (ReadPrec [Array a_X3L9n b_X3L9p] :: *)
                                  ~R# (Prec -> P.ReadP [Array a_X3L9n b_X3L9p] :: *)))
                        GHC.Read.$fRead()7)
                     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                                 <[Array a_X3L9n b_X3L9p]>_R
                             :: (P.ReadP [Array a_X3L9n b_X3L9p] :: *)
                                ~R# (forall b.
                                     ([Array a_X3L9n b_X3L9p] -> Text.ParserCombinators.ReadP.P b)
                                     -> Text.ParserCombinators.ReadP.P b :: *)))
                      @ [Array a_X3L9n b_X3L9p]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Array a_X3L9n b_X3L9p]))}]
GHC.Read.$fReadArray_$creadList
  = \ (@ a_X3L9n)
      (@ b_X3L9p)
      ($dIx_X3L9r :: Ix a_X3L9n)
      ($dRead_X3L9t :: Read a_X3L9n)
      ($dRead1_X3L9v :: Read b_X3L9p) ->
      Text.ParserCombinators.ReadP.run
        @ [Array a_X3L9n b_X3L9p]
        (((((list
               @ (Array a_X3L9n b_X3L9p)
               ((GHC.Read.$fReadArray1
                   @ a_X3L9n @ b_X3L9p $dIx_X3L9r $dRead_X3L9t $dRead1_X3L9v)
                `cast` ((<Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Array
                                          a_X3L9n
                                          b_X3L9p>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Array a_X3L9n b_X3L9p>_R)
                        :: (Prec
                            -> forall b.
                               (Array a_X3L9n b_X3L9p -> Text.ParserCombinators.ReadP.P b)
                               -> Text.ParserCombinators.ReadP.P b :: *)
                           ~R# (ReadPrec (Array a_X3L9n b_X3L9p) :: *))))
            `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <[Array a_X3L9n b_X3L9p]>_R
                    :: (ReadPrec [Array a_X3L9n b_X3L9p] :: *)
                       ~R# (Prec -> P.ReadP [Array a_X3L9n b_X3L9p] :: *)))
             GHC.Read.$fRead()7)
          `cast` (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[Array a_X3L9n b_X3L9p]>_R
                  :: (P.ReadP [Array a_X3L9n b_X3L9p] :: *)
                     ~R# (forall b.
                          ([Array a_X3L9n b_X3L9p] -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)))
           @ [Array a_X3L9n b_X3L9p]
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
              @ [Array a_X3L9n b_X3L9p]))

-- RHS size: {terms: 22, types: 21, coercions: 13, joins: 0/0}
GHC.Read.$fReadArray [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b. (Ix a, Read a, Read b) => Read (Array a b)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m,
 Unf=DFun: \ (@ a_a3K6E)
             (@ b_a3K6F)
             (v_X9l :: Ix a_a3K6E)
             (v1_X9n :: Read a_a3K6E)
             (v2_B3 :: Read b_a3K6F) ->
       GHC.Read.C:Read TYPE: Array a_a3K6E b_a3K6F
                       GHC.Read.$fReadArray_$creadsPrec
                         @ a_a3K6E @ b_a3K6F v_X9l v1_X9n v2_B3
                       GHC.Read.$fReadArray_$creadList
                         @ a_a3K6E @ b_a3K6F v_X9l v1_X9n v2_B3
                       (GHC.Read.$fReadArray1 @ a_a3K6E @ b_a3K6F v_X9l v1_X9n v2_B3)
                       `cast` ((<Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Array
                                                 a_a3K6E
                                                 b_a3K6F>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <Array a_a3K6E b_a3K6F>_R)
                               :: (Prec
                                   -> forall b.
                                      (Array a_a3K6E b_a3K6F -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (ReadPrec (Array a_a3K6E b_a3K6F) :: *))
                       GHC.Read.$fReadArray_$creadListPrec
                         @ a_a3K6E @ b_a3K6F v_X9l v1_X9n v2_B3]
GHC.Read.$fReadArray
  = \ (@ a_X3L9o)
      (@ b_X3L9q)
      ($dIx_X3L9s :: Ix a_X3L9o)
      ($dRead_X3L9u :: Read a_X3L9o)
      ($dRead1_X3L9w :: Read b_X3L9q) ->
      GHC.Read.C:Read
        @ (Array a_X3L9o b_X3L9q)
        (GHC.Read.$fReadArray_$creadsPrec
           @ a_X3L9o @ b_X3L9q $dIx_X3L9s $dRead_X3L9u $dRead1_X3L9w)
        (GHC.Read.$fReadArray_$creadList
           @ a_X3L9o @ b_X3L9q $dIx_X3L9s $dRead_X3L9u $dRead1_X3L9w)
        ((GHC.Read.$fReadArray1
            @ a_X3L9o @ b_X3L9q $dIx_X3L9s $dRead_X3L9u $dRead1_X3L9w)
         `cast` ((<Prec>_R
                  ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                <Array
                                   a_X3L9o
                                   b_X3L9q>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                           <Array a_X3L9o b_X3L9q>_R)
                 :: (Prec
                     -> forall b.
                        (Array a_X3L9o b_X3L9q -> Text.ParserCombinators.ReadP.P b)
                        -> Text.ParserCombinators.ReadP.P b :: *)
                    ~R# (ReadPrec (Array a_X3L9o b_X3L9q) :: *)))
        (GHC.Read.$fReadArray_$creadListPrec
           @ a_X3L9o @ b_X3L9q $dIx_X3L9s $dRead_X3L9u $dRead1_X3L9w)

Rec {
-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl1_r3N5M :: [Char]
[GblId]
lvl1_r3N5M = GHC.Read.lexLitChar_removeNulls (GHC.Types.[] @ Char)

-- RHS size: {terms: 37, types: 22, coercions: 0, joins: 0/0}
GHC.Read.lexLitChar_removeNulls [Occ=LoopBreaker]
  :: [Char] -> [Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
GHC.Read.lexLitChar_removeNulls
  = \ (ds_d3L4d :: [Char]) ->
      case ds_d3L4d of {
        [] -> GHC.Types.[] @ Char;
        : ds1_d3L4n ds2_d3L4o ->
          case ds1_d3L4n of wild1_X3Z { C# ds3_d3L4p ->
          case ds3_d3L4p of {
            __DEFAULT ->
              GHC.Types.:
                @ Char wild1_X3Z (GHC.Read.lexLitChar_removeNulls ds2_d3L4o);
            '\\'# ->
              case ds2_d3L4o of wild2_X42 {
                [] -> GHC.Types.: @ Char wild1_X3Z lvl1_r3N5M;
                : ds5_d3L4q xs_a3K7v ->
                  case ds5_d3L4q of { C# ds6_d3L4r ->
                  case ds6_d3L4r of {
                    __DEFAULT ->
                      GHC.Types.:
                        @ Char wild1_X3Z (GHC.Read.lexLitChar_removeNulls wild2_X42);
                    '&'# -> GHC.Read.lexLitChar_removeNulls xs_a3K7v
                  }
                  }
              }
          }
          }
      }
end Rec }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
GHC.Read.lexLitChar4
  :: String -> Text.ParserCombinators.ReadP.P [Char]
[GblId,
 Arity=1,
 Str=<L,1*U>m4,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_a3niB [Occ=Once] :: String) ->
                 Text.ParserCombinators.ReadP.Result
                   @ [Char]
                   (GHC.Read.lexLitChar_removeNulls s_a3niB)
                   (Text.ParserCombinators.ReadP.Fail @ [Char])}]
GHC.Read.lexLitChar4
  = \ (s_a3niB :: String) ->
      Text.ParserCombinators.ReadP.Result
        @ [Char]
        (GHC.Read.lexLitChar_removeNulls s_a3niB)
        (Text.ParserCombinators.ReadP.Fail @ [Char])

-- RHS size: {terms: 3, types: 8, coercions: 0, joins: 0/0}
GHC.Read.lexLitChar3
  :: Text.ParserCombinators.ReadP.P
       (String -> Text.ParserCombinators.ReadP.P [Char])
[GblId,
 Str=m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Read.lexLitChar3
  = Text.ParserCombinators.ReadP.Result
      @ (String -> Text.ParserCombinators.ReadP.P [Char])
      GHC.Read.lexLitChar4
      (Text.ParserCombinators.ReadP.Fail
         @ (String -> Text.ParserCombinators.ReadP.P [Char]))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Read.lexLitChar2
  :: Char
     -> Text.ParserCombinators.ReadP.P
          (String -> Text.ParserCombinators.ReadP.P [Char])
[GblId,
 Arity=1,
 Str=<L,A>m4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
GHC.Read.lexLitChar2 = \ _ [Occ=Dead] -> GHC.Read.lexLitChar3

-- RHS size: {terms: 8, types: 25, coercions: 0, joins: 0/0}
GHC.Read.lexLitChar1 :: Text.ParserCombinators.ReadP.P [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 70 0}]
GHC.Read.lexLitChar1
  = case Text.Read.Lex.$wlexChar
           @ (String -> Text.ParserCombinators.ReadP.P [Char])
           GHC.Read.lexLitChar2
    of
    { (# ww1_s3xln #) ->
    Text.ParserCombinators.ReadP.gather_gath
      @ [Char]
      (id @ String)
      (Text.ParserCombinators.ReadP.Get
         @ (String -> Text.ParserCombinators.ReadP.P [Char]) ww1_s3xln)
    }

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lexLitChar :: ReadS String
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
lexLitChar
  = Text.ParserCombinators.ReadP.run @ [Char] GHC.Read.lexLitChar1


------ Local rules for imported ids --------
"SPEC readNumber @ Integer"
    forall ($dNum_s3LrE :: Num Integer).
      GHC.Read.readNumber1 @ Integer $dNum_s3LrE
      = GHC.Read.$fReadInteger_$sreadNumber
"SPEC readNumber @ Double"
    forall ($dNum_s3LrA :: Num Double).
      GHC.Read.readNumber1 @ Double $dNum_s3LrA
      = GHC.Read.$fReadDouble_$sreadNumber
"SPEC readNumber @ Float"
    forall ($dNum_s3Lrx :: Num Float).
      GHC.Read.readNumber1 @ Float $dNum_s3Lrx
      = GHC.Read.$fReadFloat_$sreadNumber
"SPEC readNumber @ Int"
    forall ($dNum_s3Lrs :: Num Int).
      GHC.Read.readNumber1 @ Int $dNum_s3Lrs
      = GHC.Read.$fReadInt_$sreadNumber
"SPEC $creadsPrec"
    forall ($dRead_X3KYZ :: Read String).
      GHC.Read.$fRead[]_$creadsPrec @ String $dRead_X3KYZ
      = GHC.Read.$fRead[]_$s$creadsPrec2
"SPEC $creadsPrec"
    forall ($dRead_a3KVk :: Read Char).
      GHC.Read.$fRead[]_$creadsPrec @ Char $dRead_a3KVk
      = GHC.Read.$fRead[]_$s$creadsPrec1
"SPEC $creadsPrec"
    forall ($dRead_X3KZ7 :: Read Int).
      GHC.Read.$fRead[]_$creadsPrec @ Int $dRead_X3KZ7
      = GHC.Read.$fRead[]_$s$creadsPrec
"SPEC $creadListPrec"
    forall ($dRead_X3KYZ :: Read String).
      GHC.Read.$fRead[]_$creadListPrec @ String $dRead_X3KYZ
      = GHC.Read.$fRead[]_$s$creadListPrec2
"SPEC $creadListPrec"
    forall ($dRead_a3KVk :: Read Char).
      GHC.Read.$fRead[]_$creadListPrec @ Char $dRead_a3KVk
      = GHC.Read.$fRead[]_$s$creadListPrec1
"SPEC $creadListPrec"
    forall ($dRead_X3KZ7 :: Read Int).
      GHC.Read.$fRead[]_$creadListPrec @ Int $dRead_X3KZ7
      = GHC.Read.$fRead[]_$s$creadListPrec
"SPEC $creadList"
    forall ($dRead_X3KYZ :: Read String).
      GHC.Read.$fRead[]_$creadList @ String $dRead_X3KYZ
      = GHC.Read.$fRead[]_$s$creadList2
"SPEC $creadList"
    forall ($dRead_a3KVk :: Read Char).
      GHC.Read.$fRead[]_$creadList @ Char $dRead_a3KVk
      = GHC.Read.$fRead[]_$s$creadList1
"SPEC $creadList"
    forall ($dRead_X3KZ7 :: Read Int).
      GHC.Read.$fRead[]_$creadList @ Int $dRead_X3KZ7
      = GHC.Read.$fRead[]_$s$creadList
"SPEC $fRead[]"
    forall ($dRead_X3KYZ :: Read String).
      GHC.Read.$fRead[] @ String $dRead_X3KYZ
      = GHC.Read.$fRead[]_$s$fRead[]2
"SPEC $fRead[]"
    forall ($dRead_a3KVk :: Read Char).
      GHC.Read.$fRead[] @ Char $dRead_a3KVk
      = GHC.Read.$fRead[]_$s$fRead[]1
"SPEC $fRead[]"
    forall ($dRead_X3KZ7 :: Read Int).
      GHC.Read.$fRead[] @ Int $dRead_X3KZ7
      = GHC.Read.$fRead[]_$s$fRead[]

