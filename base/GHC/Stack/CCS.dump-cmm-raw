
==================== Raw Cmm ====================
2018-03-16 16:05:04.348346765 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:04.349947994 UTC

[section ""data" . GHC.Stack.CCS.getCurrentCCS1_closure" {
     GHC.Stack.CCS.getCurrentCCS1_closure:
         const GHC.Stack.CCS.getCurrentCCS1_info;
 },
 GHC.Stack.CCS.getCurrentCCS1_entry() //  [R2]
         { []
         }
     {offset
       ca1yr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1yv; else goto ca1yu;
       ca1yv: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.CCS.getCurrentCCS1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1yu: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = CCCS;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.getCurrentCCS1_info" {
     GHC.Stack.CCS.getCurrentCCS1_info:
         const GHC.Stack.CCS.getCurrentCCS1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.353992227 UTC

[section ""data" . GHC.Stack.CCS.getCurrentCCS_closure" {
     GHC.Stack.CCS.getCurrentCCS_closure:
         const GHC.Stack.CCS.getCurrentCCS_info;
 },
 GHC.Stack.CCS.getCurrentCCS_entry() //  [R2]
         { []
         }
     {offset
       ca1yG: // global
           R2 = R2;
           call GHC.Stack.CCS.getCurrentCCS1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.getCurrentCCS_info" {
     GHC.Stack.CCS.getCurrentCCS_info:
         const GHC.Stack.CCS.getCurrentCCS_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.35750285 UTC

[section ""data" . GHC.Stack.CCS.getCCSOf1_closure" {
     GHC.Stack.CCS.getCCSOf1_closure:
         const GHC.Stack.CCS.getCCSOf1_info;
 },
 GHC.Stack.CCS.getCCSOf1_entry() //  [R2]
         { []
         }
     {offset
       ca1yS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1yW; else goto ca1yV;
       ca1yW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.CCS.getCCSOf1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1yV: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = 0;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.getCCSOf1_info" {
     GHC.Stack.CCS.getCCSOf1_info:
         const GHC.Stack.CCS.getCCSOf1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.360957896 UTC

[section ""data" . GHC.Stack.CCS.getCCSOf_closure" {
     GHC.Stack.CCS.getCCSOf_closure:
         const GHC.Stack.CCS.getCCSOf_info;
 },
 GHC.Stack.CCS.getCCSOf_entry() //  [R2]
         { []
         }
     {offset
       ca1z6: // global
           R2 = R2;
           call GHC.Stack.CCS.getCCSOf1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.getCCSOf_info" {
     GHC.Stack.CCS.getCCSOf_info:
         const GHC.Stack.CCS.getCCSOf_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.364336346 UTC

[section ""data" . GHC.Stack.CCS.clearCCS_closure" {
     GHC.Stack.CCS.clearCCS_closure:
         const GHC.Stack.CCS.clearCCS_info;
 },
 GHC.Stack.CCS.clearCCS_entry() //  [R2]
         { []
         }
     {offset
       ca1zh: // global
           R1 = R2;
           call stg_clearCCS#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.clearCCS_info" {
     GHC.Stack.CCS.clearCCS_info:
         const GHC.Stack.CCS.clearCCS_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.368560706 UTC

[section ""cstring" . f_ra1i8_bytes" {
     f_ra1i8_bytes:
         I8[] [10,32,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.370821357 UTC

[section ""data" . f1_ra1i9_closure" {
     f1_ra1i9_closure:
         const f1_ra1i9_info;
         const 0;
         const 0;
         const 0;
 },
 f1_ra1i9_entry() //  [R1]
         { []
         }
     {offset
       ca1zv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1zw; else goto ca1zx;
       ca1zw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1zx: // global
           (_ca1zs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ca1zs::I64 == 0) goto ca1zu; else goto ca1zt;
       ca1zu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ca1zt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ca1zs::I64;
           R2 = f_ra1i8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_ra1i9_info" {
     f1_ra1i9_info:
         const f1_ra1i9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.374303326 UTC

[section ""cstring" . GHC.Stack.CCS.renderStack1_bytes" {
     GHC.Stack.CCS.renderStack1_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,45,112,114,111,102,41,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.377714646 UTC

[section ""data" . GHC.Stack.CCS.renderStack_go_closure" {
     GHC.Stack.CCS.renderStack_go_closure:
         const GHC.Stack.CCS.renderStack_go_info;
         const 0;
 },
 sat_sa1iy_entry() //  [R1]
         { []
         }
     {offset
       ca1zY: // global
           R2 = P64[R1 + 16];
           call GHC.Stack.CCS.renderStack_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sa1iy_info" {
     sat_sa1iy_info:
         const sat_sa1iy_entry;
         const 1;
         const 4294967312;
         const Sa1lM_srt;
 },
 sat_sa1iz_entry() //  [R1]
         { []
         }
     {offset
       ca1A1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ca1A5; else goto ca1A4;
       ca1A5: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1A4: // global
           _sa1iw::P64 = P64[R1 + 16];
           _sa1ix::P64 = P64[R1 + 24];
           I64[Hp - 16] = sat_sa1iy_info;
           P64[Hp] = _sa1ix::P64;
           R3 = Hp - 16;
           R2 = _sa1iw::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sa1iz_info" {
     sat_sa1iz_info:
         const sat_sa1iz_entry;
         const 2;
         const 4294967314;
         const Sa1lM_srt;
 },
 GHC.Stack.CCS.renderStack_go_entry() //  [R2]
         { []
         }
     {offset
       ca1Aa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Ab; else goto ca1Ac;
       ca1Ab: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.renderStack_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Ac: // global
           I64[Sp - 8] = block_ca1zK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1Ai; else goto ca1zL;
       ua1Ai: // global
           call _ca1zK(R1) args: 0, res: 0, upd: 0;
       ca1zL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.renderStack_go_info" {
     GHC.Stack.CCS.renderStack_go_info:
         const GHC.Stack.CCS.renderStack_go_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sa1lM_srt;
 },
 _ca1zK() //  [R1]
         { []
         }
     {offset
       ca1zK: // global
           if (R1 & 7 == 1) goto ca1A7; else goto ca1A8;
       ca1A7: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ca1A8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ca1Ah; else goto ca1Ag;
       ca1Ah: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1Ag: // global
           _sa1iw::P64 = P64[R1 + 6];
           _sa1ix::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sa1iz_info;
           P64[Hp - 8] = _sa1iw::P64;
           P64[Hp] = _sa1ix::P64;
           R3 = Hp - 24;
           R2 = f1_ra1i9_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1zK_info" {
     block_ca1zK_info:
         const _ca1zK;
         const 0;
         const 12884901918;
         const Sa1lM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.387469508 UTC

[section ""data" . GHC.Stack.CCS.renderStack_closure" {
     GHC.Stack.CCS.renderStack_closure:
         const GHC.Stack.CCS.renderStack_info;
         const 0;
 },
 sat_sa1iC_entry() //  [R1]
         { []
         }
     {offset
       ca1AL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ca1AM; else goto ca1AN;
       ca1AM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1AN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ca1AJ_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa1iC_info" {
     sat_sa1iC_info:
         const sat_sa1iC_entry;
         const 1;
         const 4294967312;
         const Sa1lM_srt;
 },
 _ca1AJ() //  [R1]
         { []
         }
     {offset
       ca1AJ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Stack.CCS.renderStack_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ca1AJ_info" {
     block_ca1AJ_info:
         const _ca1AJ;
         const 0;
         const 4294967326;
         const Sa1lM_srt;
 },
 GHC.Stack.CCS.renderStack_entry() //  [R2]
         { []
         }
     {offset
       ca1AR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ca1AV; else goto ca1AU;
       ca1AV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Stack.CCS.renderStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1AU: // global
           I64[Hp - 16] = sat_sa1iC_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Stack.CCS.renderStack1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.renderStack_info" {
     GHC.Stack.CCS.renderStack_info:
         const GHC.Stack.CCS.renderStack_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const Sa1lM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.394399916 UTC

[section ""cstring" . GHC.Stack.CCS.$trModule4_bytes" {
     GHC.Stack.CCS.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.396026836 UTC

[section ""data" . GHC.Stack.CCS.$trModule3_closure" {
     GHC.Stack.CCS.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.CCS.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.398229321 UTC

[section ""cstring" . GHC.Stack.CCS.$trModule2_bytes" {
     GHC.Stack.CCS.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107,46,67,67,83]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.399871111 UTC

[section ""data" . GHC.Stack.CCS.$trModule1_closure" {
     GHC.Stack.CCS.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.CCS.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.401614808 UTC

[section ""data" . GHC.Stack.CCS.$trModule_closure" {
     GHC.Stack.CCS.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.CCS.$trModule3_closure+1;
         const GHC.Stack.CCS.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.403318496 UTC

[section ""cstring" . GHC.Stack.CCS.$tcCostCentreStack2_bytes" {
     GHC.Stack.CCS.$tcCostCentreStack2_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.40498826 UTC

[section ""data" . GHC.Stack.CCS.$tcCostCentreStack1_closure" {
     GHC.Stack.CCS.$tcCostCentreStack1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.CCS.$tcCostCentreStack2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.406812491 UTC

[section ""data" . GHC.Stack.CCS.$tcCostCentreStack_closure" {
     GHC.Stack.CCS.$tcCostCentreStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.CCS.$trModule_closure+1;
         const GHC.Stack.CCS.$tcCostCentreStack1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4388269014118491027;
         const 5682182778281832541;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.408658118 UTC

[section ""cstring" . GHC.Stack.CCS.$tcCostCentre2_bytes" {
     GHC.Stack.CCS.$tcCostCentre2_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.410775043 UTC

[section ""data" . GHC.Stack.CCS.$tcCostCentre1_closure" {
     GHC.Stack.CCS.$tcCostCentre1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.CCS.$tcCostCentre2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.412612075 UTC

[section ""data" . GHC.Stack.CCS.$tcCostCentre_closure" {
     GHC.Stack.CCS.$tcCostCentre_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.CCS.$trModule_closure+1;
         const GHC.Stack.CCS.$tcCostCentre1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10996116669986307392;
         const 5747049382639019202;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.415566348 UTC

[section ""data" . GHC.Stack.CCS.ccsCC1_closure" {
     GHC.Stack.CCS.ccsCC1_closure:
         const GHC.Stack.CCS.ccsCC1_info;
 },
 GHC.Stack.CCS.ccsCC1_entry() //  [R2]
         { []
         }
     {offset
       ca1Bp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Bw; else goto ca1Bx;
       ca1Bw: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccsCC1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Bx: // global
           I64[Sp - 8] = block_ca1Bm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1BB; else goto ca1Bn;
       ua1BB: // global
           call _ca1Bm(R1) args: 0, res: 0, upd: 0;
       ca1Bn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsCC1_info" {
     GHC.Stack.CCS.ccsCC1_info:
         const GHC.Stack.CCS.ccsCC1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1Bm() //  [R1]
         { []
         }
     {offset
       ca1Bm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1BA; else goto ca1Bz;
       ca1BA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1Bz: // global
           _sa1iK::I64 = I64[I64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1iK::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Bm_info" {
     block_ca1Bm_info:
         const _ca1Bm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.421878821 UTC

[section ""data" . GHC.Stack.CCS.ccsCC_closure" {
     GHC.Stack.CCS.ccsCC_closure:
         const GHC.Stack.CCS.ccsCC_info;
 },
 GHC.Stack.CCS.ccsCC_entry() //  [R2]
         { []
         }
     {offset
       ca1BR: // global
           R2 = R2;
           call GHC.Stack.CCS.ccsCC1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsCC_info" {
     GHC.Stack.CCS.ccsCC_info:
         const GHC.Stack.CCS.ccsCC_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.425796927 UTC

[section ""data" . GHC.Stack.CCS.ccsParent1_closure" {
     GHC.Stack.CCS.ccsParent1_closure:
         const GHC.Stack.CCS.ccsParent1_info;
 },
 GHC.Stack.CCS.ccsParent1_entry() //  [R2]
         { []
         }
     {offset
       ca1C5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Cc; else goto ca1Cd;
       ca1Cc: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccsParent1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Cd: // global
           I64[Sp - 8] = block_ca1C2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1Ch; else goto ca1C3;
       ua1Ch: // global
           call _ca1C2(R1) args: 0, res: 0, upd: 0;
       ca1C3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsParent1_info" {
     GHC.Stack.CCS.ccsParent1_info:
         const GHC.Stack.CCS.ccsParent1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1C2() //  [R1]
         { []
         }
     {offset
       ca1C2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1Cg; else goto ca1Cf;
       ca1Cg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1Cf: // global
           _sa1iT::I64 = I64[I64[R1 + 7] + 16];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1iT::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1C2_info" {
     block_ca1C2_info:
         const _ca1C2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.431043055 UTC

[section ""data" . GHC.Stack.CCS.ccsParent_closure" {
     GHC.Stack.CCS.ccsParent_closure:
         const GHC.Stack.CCS.ccsParent_info;
 },
 GHC.Stack.CCS.ccsParent_entry() //  [R2]
         { []
         }
     {offset
       ca1Cx: // global
           R2 = R2;
           call GHC.Stack.CCS.ccsParent1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsParent_info" {
     GHC.Stack.CCS.ccsParent_info:
         const GHC.Stack.CCS.ccsParent_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.435295388 UTC

[section ""data" . GHC.Stack.CCS.ccSrcSpan1_closure" {
     GHC.Stack.CCS.ccSrcSpan1_closure:
         const GHC.Stack.CCS.ccSrcSpan1_info;
 },
 GHC.Stack.CCS.ccSrcSpan1_entry() //  [R2]
         { []
         }
     {offset
       ca1CL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1CS; else goto ca1CT;
       ca1CS: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccSrcSpan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1CT: // global
           I64[Sp - 8] = block_ca1CI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1CX; else goto ca1CJ;
       ua1CX: // global
           call _ca1CI(R1) args: 0, res: 0, upd: 0;
       ca1CJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccSrcSpan1_info" {
     GHC.Stack.CCS.ccSrcSpan1_info:
         const GHC.Stack.CCS.ccSrcSpan1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1CI() //  [R1]
         { []
         }
     {offset
       ca1CI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1CW; else goto ca1CV;
       ca1CW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1CV: // global
           _sa1j2::I64 = I64[I64[R1 + 7] + 24];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1j2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1CI_info" {
     block_ca1CI_info:
         const _ca1CI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.440764735 UTC

[section ""data" . GHC.Stack.CCS.ccSrcSpan_closure" {
     GHC.Stack.CCS.ccSrcSpan_closure:
         const GHC.Stack.CCS.ccSrcSpan_info;
 },
 GHC.Stack.CCS.ccSrcSpan_entry() //  [R2]
         { []
         }
     {offset
       ca1Dd: // global
           R2 = R2;
           call GHC.Stack.CCS.ccSrcSpan1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccSrcSpan_info" {
     GHC.Stack.CCS.ccSrcSpan_info:
         const GHC.Stack.CCS.ccSrcSpan_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.445187063 UTC

[section ""data" . GHC.Stack.CCS.ccModule1_closure" {
     GHC.Stack.CCS.ccModule1_closure:
         const GHC.Stack.CCS.ccModule1_info;
 },
 GHC.Stack.CCS.ccModule1_entry() //  [R2]
         { []
         }
     {offset
       ca1Dr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Dy; else goto ca1Dz;
       ca1Dy: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccModule1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Dz: // global
           I64[Sp - 8] = block_ca1Do_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1DD; else goto ca1Dp;
       ua1DD: // global
           call _ca1Do(R1) args: 0, res: 0, upd: 0;
       ca1Dp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccModule1_info" {
     GHC.Stack.CCS.ccModule1_info:
         const GHC.Stack.CCS.ccModule1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1Do() //  [R1]
         { []
         }
     {offset
       ca1Do: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1DC; else goto ca1DB;
       ca1DC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1DB: // global
           _sa1jb::I64 = I64[I64[R1 + 7] + 16];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1jb::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Do_info" {
     block_ca1Do_info:
         const _ca1Do;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.450557823 UTC

[section ""data" . GHC.Stack.CCS.ccModule_closure" {
     GHC.Stack.CCS.ccModule_closure:
         const GHC.Stack.CCS.ccModule_info;
 },
 GHC.Stack.CCS.ccModule_entry() //  [R2]
         { []
         }
     {offset
       ca1DT: // global
           R2 = R2;
           call GHC.Stack.CCS.ccModule1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccModule_info" {
     GHC.Stack.CCS.ccModule_info:
         const GHC.Stack.CCS.ccModule_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.454451317 UTC

[section ""data" . GHC.Stack.CCS.ccLabel1_closure" {
     GHC.Stack.CCS.ccLabel1_closure:
         const GHC.Stack.CCS.ccLabel1_info;
 },
 GHC.Stack.CCS.ccLabel1_entry() //  [R2]
         { []
         }
     {offset
       ca1E7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Ee; else goto ca1Ef;
       ca1Ee: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccLabel1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Ef: // global
           I64[Sp - 8] = block_ca1E4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1Ej; else goto ca1E5;
       ua1Ej: // global
           call _ca1E4(R1) args: 0, res: 0, upd: 0;
       ca1E5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccLabel1_info" {
     GHC.Stack.CCS.ccLabel1_info:
         const GHC.Stack.CCS.ccLabel1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1E4() //  [R1]
         { []
         }
     {offset
       ca1E4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1Ei; else goto ca1Eh;
       ca1Ei: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1Eh: // global
           _sa1jk::I64 = I64[I64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1jk::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1E4_info" {
     block_ca1E4_info:
         const _ca1E4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.459810706 UTC

[section ""data" . GHC.Stack.CCS.ccLabel_closure" {
     GHC.Stack.CCS.ccLabel_closure:
         const GHC.Stack.CCS.ccLabel_info;
 },
 GHC.Stack.CCS.ccLabel_entry() //  [R2]
         { []
         }
     {offset
       ca1Ez: // global
           R2 = R2;
           call GHC.Stack.CCS.ccLabel1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccLabel_info" {
     GHC.Stack.CCS.ccLabel_info:
         const GHC.Stack.CCS.ccLabel_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.462841521 UTC

[section ""cstring" . lvl_ra1ia_bytes" {
     lvl_ra1ia_bytes:
         I8[] [77,65,73,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.465208096 UTC

[section ""data" . lvl1_ra1ib_closure" {
     lvl1_ra1ib_closure:
         const lvl1_ra1ib_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_ra1ib_entry() //  [R1]
         { []
         }
     {offset
       ca1EN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1EO; else goto ca1EP;
       ca1EO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1EP: // global
           (_ca1EK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ca1EK::I64 == 0) goto ca1EM; else goto ca1EL;
       ca1EM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ca1EL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ca1EK::I64;
           R2 = lvl_ra1ia_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_ra1ib_info" {
     lvl1_ra1ib_info:
         const lvl1_ra1ib_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.469096669 UTC

[section ""cstring" . lvl2_ra1ic_bytes" {
     lvl2_ra1ic_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.471047361 UTC

[section ""data" . lvl3_ra1id_closure" {
     lvl3_ra1id_closure:
         const GHC.Types.C#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.472600198 UTC

[section ""data" . lvl4_ra1ie_closure" {
     lvl4_ra1ie_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.474269089 UTC

[section ""data" . lvl5_ra1if_closure" {
     lvl5_ra1if_closure:
         const GHC.Types.C#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.4765358 UTC

[section ""data" . lvl6_ra1ig_closure" {
     lvl6_ra1ig_closure:
         const lvl6_ra1ig_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_ra1ig_entry() //  [R1]
         { []
         }
     {offset
       ca1F7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1F8; else goto ca1F9;
       ca1F8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1F9: // global
           (_ca1F4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ca1F4::I64 == 0) goto ca1F6; else goto ca1F5;
       ca1F6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ca1F5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ca1F4::I64;
           R2 = lvl2_ra1ic_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_ra1ig_info" {
     lvl6_ra1ig_info:
         const lvl6_ra1ig_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.484810469 UTC

[section ""data" . GHC.Stack.CCS.$wgo_closure" {
     GHC.Stack.CCS.$wgo_closure:
         const GHC.Stack.CCS.$wgo_info;
         const 0;
 },
 sat_sa1jU_entry() //  [R1]
         { []
         }
     {offset
       ca1G1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1G2; else goto ca1G3;
       ca1G2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1G3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl6_ra1ig_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa1jU_info" {
     sat_sa1jU_info:
         const sat_sa1jU_entry;
         const 1;
         const 4294967312;
         const Sa1lM_srt+24;
 },
 sat_sa1jX_entry() //  [R1]
         { []
         }
     {offset
       ca1G6: // global
           _sa1jX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ca1G7; else goto ca1G8;
       ca1G8: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ca1Ga; else goto ca1G9;
       ca1Ga: // global
           HpAlloc = 72;
           goto ca1G7;
       ca1G7: // global
           R1 = _sa1jX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1G9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sa1jX::P64;
           _sa1jA::P64 = P64[_sa1jX::P64 + 16];
           _sa1jO::P64 = P64[_sa1jX::P64 + 24];
           I64[Hp - 64] = sat_sa1jU_info;
           P64[Hp - 48] = _sa1jO::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl3_ra1id_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl4_ra1ie_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sa1jA::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa1jX_info" {
     sat_sa1jX_info:
         const sat_sa1jX_entry;
         const 2;
         const 4294967314;
         const Sa1lM_srt+24;
 },
 sat_sa1jZ_entry() //  [R1]
         { []
         }
     {offset
       ca1Gc: // global
           _sa1jZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ca1Gd; else goto ca1Ge;
       ca1Ge: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ca1Gg; else goto ca1Gf;
       ca1Gg: // global
           HpAlloc = 56;
           goto ca1Gd;
       ca1Gd: // global
           R1 = _sa1jZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1Gf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sa1jZ::P64;
           _sa1jA::P64 = P64[_sa1jZ::P64 + 16];
           _sa1jH::P64 = P64[_sa1jZ::P64 + 24];
           _sa1jO::P64 = P64[_sa1jZ::P64 + 32];
           I64[Hp - 48] = sat_sa1jX_info;
           P64[Hp - 32] = _sa1jA::P64;
           P64[Hp - 24] = _sa1jO::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl5_ra1if_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sa1jH::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa1jZ_info" {
     sat_sa1jZ_info:
         const sat_sa1jZ_entry;
         const 3;
         const 4294967311;
         const Sa1lM_srt+24;
 },
 GHC.Stack.CCS.$wgo_entry() //  [R2, R3]
         { []
         }
     {offset
       ca1Gk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ca1Gl; else goto ua1GR;
       ca1Gl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.CCS.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ua1GR: // global
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _ca1Fi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.$wgo_info" {
     GHC.Stack.CCS.$wgo_info:
         const GHC.Stack.CCS.$wgo_entry;
         const 0;
         const 133143986190;
         const 12884901901;
         const Sa1lM_srt+24;
 },
 _ca1Fi() //  []
         { []
         }
     {offset
       ca1Fi: // global
           _sa1jm::I64 = I64[Sp];
           if (_sa1jm::I64 == 0) goto ua1GS; else goto ca1Gi;
       ua1GS: // global
           Sp = Sp + 8;
           call _ca1Gj() args: 0, res: 0, upd: 0;
       ca1Gi: // global
           _sa1jt::I64 = I64[_sa1jm::I64 + 8];
           _sa1jx::I64 = I64[_sa1jt::I64 + 8];
           I64[Sp - 16] = block_ca1Fu_info;
           R3 = _sa1jx::I64;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           I64[Sp - 8] = _sa1jt::I64;
           Sp = Sp - 16;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _ca1Fu() //  [R1]
         { []
         }
     {offset
       ca1Fu: // global
           _sa1jE::I64 = I64[I64[Sp + 8] + 16];
           I64[Sp - 8] = block_ca1Fz_info;
           R3 = _sa1jE::I64;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Fu_info" {
     block_ca1Fu_info:
         const _ca1Fu;
         const 195;
         const 98784247838;
         const Sa1lM_srt+24;
 },
 _ca1Fz() //  [R1]
         { []
         }
     {offset
       ca1Fz: // global
           _sa1jL::I64 = I64[I64[Sp + 16] + 24];
           I64[Sp] = block_ca1FE_info;
           R3 = _sa1jL::I64;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp + 16] = R1;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Fz_info" {
     block_ca1Fz_info:
         const _ca1Fz;
         const 388;
         const 98784247838;
         const Sa1lM_srt+24;
 },
 _ca1FE() //  [R1]
         { []
         }
     {offset
       ca1FE: // global
           _sa1jS::I64 = I64[I64[Sp + 24] + 16];
           I64[Sp - 8] = block_ca1Gq_info;
           R3 = lvl1_ra1ib_closure;
           R2 = P64[Sp + 16];
           I64[Sp] = _sa1jS::I64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1FE_info" {
     block_ca1FE_info:
         const _ca1FE;
         const 260;
         const 98784247838;
         const Sa1lM_srt+24;
 },
 _ca1Gq() //  [R1]
         { []
         }
     {offset
       ca1Gq: // global
           if (R1 & 7 == 1) goto ua1GY; else goto ca1GE;
       ua1GY: // global
           call _ca1FM() args: 0, res: 0, upd: 0;
       ca1GE: // global
           I64[Sp] = block_ca1GC_info;
           R3 = lvl1_ra1ib_closure;
           R2 = P64[Sp + 16];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Gq_info" {
     block_ca1Gq_info:
         const _ca1Gq;
         const 69;
         const 98784247838;
         const Sa1lM_srt+24;
 },
 _ca1GC() //  [R1]
         { []
         }
     {offset
       ca1GC: // global
           if (R1 & 7 == 1) goto ua1GZ; else goto ua1GT;
       ua1GZ: // global
           call _ca1FM() args: 0, res: 0, upd: 0;
       ua1GT: // global
           Sp = Sp + 40;
           call _ca1Gj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ca1GC_info" {
     block_ca1GC_info:
         const _ca1GC;
         const 69;
         const 98784247838;
         const Sa1lM_srt+24;
 },
 _ca1FM() //  []
         { []
         }
     {offset
       ca1FM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ca1Gt; else goto ca1Gs;
       ca1Gt: // global
           HpAlloc = 64;
           I64[Sp] = block_ca1FM_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ca1Gs: // global
           I64[Hp - 56] = sat_sa1jZ_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 32] = I64[Sp + 8];
           P64[Sp + 40] = Hp - 14;
           Sp = Sp + 32;
           call _ca1Fi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ca1FM_info" {
     block_ca1FM_info:
         const _ca1FM;
         const 69;
         const 98784247838;
         const Sa1lM_srt+24;
 },
 _ca1Gj() //  []
         { []
         }
     {offset
       ca1Gj: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.506030955 UTC

[section ""data" . GHC.Stack.CCS.ccsToStrings2_closure" {
     GHC.Stack.CCS.ccsToStrings2_closure:
         const GHC.Stack.CCS.ccsToStrings2_info;
         const 0;
 },
 GHC.Stack.CCS.ccsToStrings2_entry() //  [R2, R3]
         { []
         }
     {offset
       ca1I3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1I4; else goto ca1I5;
       ca1I4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.CCS.ccsToStrings2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ca1I5: // global
           I64[Sp - 16] = block_ca1I0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ua1I9; else goto ca1I1;
       ua1I9: // global
           call _ca1I0(R1) args: 0, res: 0, upd: 0;
       ca1I1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsToStrings2_info" {
     GHC.Stack.CCS.ccsToStrings2_info:
         const GHC.Stack.CCS.ccsToStrings2_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const Sa1lM_srt+48;
 },
 _ca1I0() //  [R1]
         { []
         }
     {offset
       ca1I0: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1I0_info" {
     block_ca1I0_info:
         const _ca1I0;
         const 1;
         const 4294967326;
         const Sa1lM_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.511749129 UTC

[section ""data" . GHC.Stack.CCS.ccsToStrings1_closure" {
     GHC.Stack.CCS.ccsToStrings1_closure:
         const GHC.Stack.CCS.ccsToStrings1_info;
         const 0;
 },
 GHC.Stack.CCS.ccsToStrings1_entry() //  [R2]
         { []
         }
     {offset
       ca1Iq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Ir; else goto ca1Is;
       ca1Ir: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccsToStrings1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Is: // global
           I64[Sp - 8] = block_ca1In_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1Iw; else goto ca1Io;
       ua1Iw: // global
           call _ca1In(R1) args: 0, res: 0, upd: 0;
       ca1Io: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsToStrings1_info" {
     GHC.Stack.CCS.ccsToStrings1_info:
         const GHC.Stack.CCS.ccsToStrings1_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const Sa1lM_srt+48;
 },
 _ca1In() //  [R1]
         { []
         }
     {offset
       ca1In: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1In_info" {
     block_ca1In_info:
         const _ca1In;
         const 0;
         const 4294967326;
         const Sa1lM_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.516807103 UTC

[section ""data" . GHC.Stack.CCS.ccsToStrings_closure" {
     GHC.Stack.CCS.ccsToStrings_closure:
         const GHC.Stack.CCS.ccsToStrings_info;
         const 0;
 },
 GHC.Stack.CCS.ccsToStrings_entry() //  [R2]
         { []
         }
     {offset
       ca1IK: // global
           R2 = R2;
           call GHC.Stack.CCS.ccsToStrings1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsToStrings_info" {
     GHC.Stack.CCS.ccsToStrings_info:
         const GHC.Stack.CCS.ccsToStrings_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sa1lM_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.521052007 UTC

[section ""data" . GHC.Stack.CCS.whoCreated1_closure" {
     GHC.Stack.CCS.whoCreated1_closure:
         const GHC.Stack.CCS.whoCreated1_info;
         const 0;
 },
 GHC.Stack.CCS.whoCreated1_entry() //  []
         { []
         }
     {offset
       ca1IV: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = 0;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.whoCreated1_info" {
     GHC.Stack.CCS.whoCreated1_info:
         const GHC.Stack.CCS.whoCreated1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sa1lM_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.524430369 UTC

[section ""data" . GHC.Stack.CCS.whoCreated_closure" {
     GHC.Stack.CCS.whoCreated_closure:
         const GHC.Stack.CCS.whoCreated_info;
         const 0;
 },
 GHC.Stack.CCS.whoCreated_entry() //  [R2]
         { []
         }
     {offset
       ca1J6: // global
           R2 = R2;
           call GHC.Stack.CCS.whoCreated1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.whoCreated_info" {
     GHC.Stack.CCS.whoCreated_info:
         const GHC.Stack.CCS.whoCreated_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sa1lM_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.527651437 UTC

[section ""data" . GHC.Stack.CCS.currentCallStack1_closure" {
     GHC.Stack.CCS.currentCallStack1_closure:
         const GHC.Stack.CCS.currentCallStack1_info;
         const 0;
 },
 GHC.Stack.CCS.currentCallStack1_entry() //  []
         { []
         }
     {offset
       ca1Jh: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = CCCS;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.currentCallStack1_info" {
     GHC.Stack.CCS.currentCallStack1_info:
         const GHC.Stack.CCS.currentCallStack1_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Sa1lM_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.531161597 UTC

[section ""data" . GHC.Stack.CCS.currentCallStack_closure" {
     GHC.Stack.CCS.currentCallStack_closure:
         const GHC.Stack.CCS.currentCallStack_info;
         const 0;
 },
 GHC.Stack.CCS.currentCallStack_entry() //  []
         { []
         }
     {offset
       ca1Js: // global
           call GHC.Stack.CCS.currentCallStack1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.currentCallStack_info" {
     GHC.Stack.CCS.currentCallStack_info:
         const GHC.Stack.CCS.currentCallStack_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Sa1lM_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.534239525 UTC

[section ""relreadonly" . Sa1lM_srt" {
     Sa1lM_srt:
         const GHC.Stack.CCS.renderStack_go_closure;
         const f1_ra1i9_closure;
         const GHC.Stack.CCS.renderStack_closure;
         const lvl6_ra1ig_closure;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.Stack.CCS.$wgo_closure;
         const lvl1_ra1ib_closure;
         const GHC.Stack.CCS.ccsToStrings2_closure;
         const GHC.Stack.CCS.ccsToStrings1_closure;
         const GHC.Stack.CCS.whoCreated1_closure;
         const GHC.Stack.CCS.currentCallStack1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.858471097 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:04.860217235 UTC

[section ""data" . GHC.Stack.CCS.getCurrentCCS1_closure" {
     GHC.Stack.CCS.getCurrentCCS1_closure:
         const GHC.Stack.CCS.getCurrentCCS1_info;
 },
 GHC.Stack.CCS.getCurrentCCS1_entry() //  [R2]
         { []
         }
     {offset
       ca1LI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1LM; else goto ca1LL;
       ca1LM: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.CCS.getCurrentCCS1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1LL: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = CCCS;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.getCurrentCCS1_info" {
     GHC.Stack.CCS.getCurrentCCS1_info:
         const GHC.Stack.CCS.getCurrentCCS1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.864275587 UTC

[section ""data" . GHC.Stack.CCS.getCurrentCCS_closure" {
     GHC.Stack.CCS.getCurrentCCS_closure:
         const GHC.Stack.CCS.getCurrentCCS_info;
 },
 GHC.Stack.CCS.getCurrentCCS_entry() //  [R2]
         { []
         }
     {offset
       ca1LY: // global
           R2 = R2;
           call GHC.Stack.CCS.getCurrentCCS1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.getCurrentCCS_info" {
     GHC.Stack.CCS.getCurrentCCS_info:
         const GHC.Stack.CCS.getCurrentCCS_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.867608857 UTC

[section ""data" . GHC.Stack.CCS.getCCSOf1_closure" {
     GHC.Stack.CCS.getCCSOf1_closure:
         const GHC.Stack.CCS.getCCSOf1_info;
 },
 GHC.Stack.CCS.getCCSOf1_entry() //  [R2]
         { []
         }
     {offset
       ca1Ma: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1Me; else goto ca1Md;
       ca1Me: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.CCS.getCCSOf1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Md: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = 0;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.getCCSOf1_info" {
     GHC.Stack.CCS.getCCSOf1_info:
         const GHC.Stack.CCS.getCCSOf1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.871232641 UTC

[section ""data" . GHC.Stack.CCS.getCCSOf_closure" {
     GHC.Stack.CCS.getCCSOf_closure:
         const GHC.Stack.CCS.getCCSOf_info;
 },
 GHC.Stack.CCS.getCCSOf_entry() //  [R2]
         { []
         }
     {offset
       ca1Mp: // global
           R2 = R2;
           call GHC.Stack.CCS.getCCSOf1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.getCCSOf_info" {
     GHC.Stack.CCS.getCCSOf_info:
         const GHC.Stack.CCS.getCCSOf_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.874703151 UTC

[section ""data" . GHC.Stack.CCS.clearCCS_closure" {
     GHC.Stack.CCS.clearCCS_closure:
         const GHC.Stack.CCS.clearCCS_info;
 },
 GHC.Stack.CCS.clearCCS_entry() //  [R2]
         { []
         }
     {offset
       ca1MA: // global
           R1 = R2;
           call stg_clearCCS#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.clearCCS_info" {
     GHC.Stack.CCS.clearCCS_info:
         const GHC.Stack.CCS.clearCCS_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.877601777 UTC

[section ""cstring" . f_ra1i8_bytes" {
     f_ra1i8_bytes:
         I8[] [10,32,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.8797559 UTC

[section ""data" . f1_ra1i9_closure" {
     f1_ra1i9_closure:
         const f1_ra1i9_info;
         const 0;
         const 0;
         const 0;
 },
 f1_ra1i9_entry() //  [R1]
         { []
         }
     {offset
       ca1MO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1MP; else goto ca1MQ;
       ca1MP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1MQ: // global
           (_ca1ML::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ca1ML::I64 == 0) goto ca1MN; else goto ca1MM;
       ca1MN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ca1MM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ca1ML::I64;
           R2 = f_ra1i8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_ra1i9_info" {
     f1_ra1i9_info:
         const f1_ra1i9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.88353504 UTC

[section ""cstring" . GHC.Stack.CCS.renderStack1_bytes" {
     GHC.Stack.CCS.renderStack1_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,45,112,114,111,102,41,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.887198317 UTC

[section ""data" . GHC.Stack.CCS.renderStack_go_closure" {
     GHC.Stack.CCS.renderStack_go_closure:
         const GHC.Stack.CCS.renderStack_go_info;
         const 0;
 },
 sat_sa1JQ_entry() //  [R1]
         { []
         }
     {offset
       ca1Ni: // global
           R2 = P64[R1 + 16];
           call GHC.Stack.CCS.renderStack_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sa1JQ_info" {
     sat_sa1JQ_info:
         const sat_sa1JQ_entry;
         const 1;
         const 4294967312;
         const Sa1ND_srt;
 },
 sat_sa1JR_entry() //  [R1]
         { []
         }
     {offset
       ca1Nl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ca1Np; else goto ca1No;
       ca1Np: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1No: // global
           _sa1JO::P64 = P64[R1 + 16];
           _sa1JP::P64 = P64[R1 + 24];
           I64[Hp - 16] = sat_sa1JQ_info;
           P64[Hp] = _sa1JP::P64;
           R3 = Hp - 16;
           R2 = _sa1JO::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sa1JR_info" {
     sat_sa1JR_info:
         const sat_sa1JR_entry;
         const 2;
         const 4294967314;
         const Sa1ND_srt;
 },
 GHC.Stack.CCS.renderStack_go_entry() //  [R2]
         { []
         }
     {offset
       ca1Nu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Nv; else goto ca1Nw;
       ca1Nv: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.renderStack_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Nw: // global
           I64[Sp - 8] = block_ca1N4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1NC; else goto ca1N5;
       ua1NC: // global
           call _ca1N4(R1) args: 0, res: 0, upd: 0;
       ca1N5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.renderStack_go_info" {
     GHC.Stack.CCS.renderStack_go_info:
         const GHC.Stack.CCS.renderStack_go_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sa1ND_srt;
 },
 _ca1N4() //  [R1]
         { []
         }
     {offset
       ca1N4: // global
           if (R1 & 7 == 1) goto ca1Nr; else goto ca1Ns;
       ca1Nr: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ca1Ns: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ca1NB; else goto ca1NA;
       ca1NB: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1NA: // global
           _sa1JO::P64 = P64[R1 + 6];
           _sa1JP::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sa1JR_info;
           P64[Hp - 8] = _sa1JO::P64;
           P64[Hp] = _sa1JP::P64;
           R3 = Hp - 24;
           R2 = f1_ra1i9_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1N4_info" {
     block_ca1N4_info:
         const _ca1N4;
         const 0;
         const 12884901918;
         const Sa1ND_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.896620068 UTC

[section ""data" . GHC.Stack.CCS.renderStack_closure" {
     GHC.Stack.CCS.renderStack_closure:
         const GHC.Stack.CCS.renderStack_info;
         const 0;
 },
 sat_sa1JU_entry() //  [R1]
         { []
         }
     {offset
       ca1Oa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ca1Ob; else goto ca1Oc;
       ca1Ob: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1Oc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ca1O8_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa1JU_info" {
     sat_sa1JU_info:
         const sat_sa1JU_entry;
         const 1;
         const 4294967312;
         const Sa1ND_srt;
 },
 _ca1O8() //  [R1]
         { []
         }
     {offset
       ca1O8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Stack.CCS.renderStack_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ca1O8_info" {
     block_ca1O8_info:
         const _ca1O8;
         const 0;
         const 4294967326;
         const Sa1ND_srt;
 },
 GHC.Stack.CCS.renderStack_entry() //  [R2]
         { []
         }
     {offset
       ca1Og: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ca1Ok; else goto ca1Oj;
       ca1Ok: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Stack.CCS.renderStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Oj: // global
           I64[Hp - 16] = sat_sa1JU_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Stack.CCS.renderStack1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.renderStack_info" {
     GHC.Stack.CCS.renderStack_info:
         const GHC.Stack.CCS.renderStack_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const Sa1ND_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.903367607 UTC

[section ""cstring" . GHC.Stack.CCS.$trModule4_bytes" {
     GHC.Stack.CCS.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.905020011 UTC

[section ""data" . GHC.Stack.CCS.$trModule3_closure" {
     GHC.Stack.CCS.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.CCS.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.906993535 UTC

[section ""cstring" . GHC.Stack.CCS.$trModule2_bytes" {
     GHC.Stack.CCS.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107,46,67,67,83]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.908601582 UTC

[section ""data" . GHC.Stack.CCS.$trModule1_closure" {
     GHC.Stack.CCS.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.CCS.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.910250251 UTC

[section ""data" . GHC.Stack.CCS.$trModule_closure" {
     GHC.Stack.CCS.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.CCS.$trModule3_closure+1;
         const GHC.Stack.CCS.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.911928338 UTC

[section ""cstring" . GHC.Stack.CCS.$tcCostCentreStack2_bytes" {
     GHC.Stack.CCS.$tcCostCentreStack2_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.913943827 UTC

[section ""data" . GHC.Stack.CCS.$tcCostCentreStack1_closure" {
     GHC.Stack.CCS.$tcCostCentreStack1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.CCS.$tcCostCentreStack2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.91597184 UTC

[section ""data" . GHC.Stack.CCS.$tcCostCentreStack_closure" {
     GHC.Stack.CCS.$tcCostCentreStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.CCS.$trModule_closure+1;
         const GHC.Stack.CCS.$tcCostCentreStack1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4388269014118491027;
         const 5682182778281832541;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.917626599 UTC

[section ""cstring" . GHC.Stack.CCS.$tcCostCentre2_bytes" {
     GHC.Stack.CCS.$tcCostCentre2_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.91923405 UTC

[section ""data" . GHC.Stack.CCS.$tcCostCentre1_closure" {
     GHC.Stack.CCS.$tcCostCentre1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.CCS.$tcCostCentre2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.920895394 UTC

[section ""data" . GHC.Stack.CCS.$tcCostCentre_closure" {
     GHC.Stack.CCS.$tcCostCentre_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.CCS.$trModule_closure+1;
         const GHC.Stack.CCS.$tcCostCentre1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10996116669986307392;
         const 5747049382639019202;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.923664256 UTC

[section ""data" . GHC.Stack.CCS.ccsCC1_closure" {
     GHC.Stack.CCS.ccsCC1_closure:
         const GHC.Stack.CCS.ccsCC1_info;
 },
 GHC.Stack.CCS.ccsCC1_entry() //  [R2]
         { []
         }
     {offset
       ca1OS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1OZ; else goto ca1P0;
       ca1OZ: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccsCC1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1P0: // global
           I64[Sp - 8] = block_ca1OP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1P4; else goto ca1OQ;
       ua1P4: // global
           call _ca1OP(R1) args: 0, res: 0, upd: 0;
       ca1OQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsCC1_info" {
     GHC.Stack.CCS.ccsCC1_info:
         const GHC.Stack.CCS.ccsCC1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1OP() //  [R1]
         { []
         }
     {offset
       ca1OP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1P3; else goto ca1P2;
       ca1P3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1P2: // global
           _sa1K2::I64 = I64[I64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1K2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1OP_info" {
     block_ca1OP_info:
         const _ca1OP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.929050782 UTC

[section ""data" . GHC.Stack.CCS.ccsCC_closure" {
     GHC.Stack.CCS.ccsCC_closure:
         const GHC.Stack.CCS.ccsCC_info;
 },
 GHC.Stack.CCS.ccsCC_entry() //  [R2]
         { []
         }
     {offset
       ca1Pm: // global
           R2 = R2;
           call GHC.Stack.CCS.ccsCC1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsCC_info" {
     GHC.Stack.CCS.ccsCC_info:
         const GHC.Stack.CCS.ccsCC_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.932890538 UTC

[section ""data" . GHC.Stack.CCS.ccsParent1_closure" {
     GHC.Stack.CCS.ccsParent1_closure:
         const GHC.Stack.CCS.ccsParent1_info;
 },
 GHC.Stack.CCS.ccsParent1_entry() //  [R2]
         { []
         }
     {offset
       ca1PA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1PH; else goto ca1PI;
       ca1PH: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccsParent1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1PI: // global
           I64[Sp - 8] = block_ca1Px_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1PM; else goto ca1Py;
       ua1PM: // global
           call _ca1Px(R1) args: 0, res: 0, upd: 0;
       ca1Py: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsParent1_info" {
     GHC.Stack.CCS.ccsParent1_info:
         const GHC.Stack.CCS.ccsParent1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1Px() //  [R1]
         { []
         }
     {offset
       ca1Px: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1PL; else goto ca1PK;
       ca1PL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1PK: // global
           _sa1Kb::I64 = I64[I64[R1 + 7] + 16];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1Kb::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Px_info" {
     block_ca1Px_info:
         const _ca1Px;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.938916282 UTC

[section ""data" . GHC.Stack.CCS.ccsParent_closure" {
     GHC.Stack.CCS.ccsParent_closure:
         const GHC.Stack.CCS.ccsParent_info;
 },
 GHC.Stack.CCS.ccsParent_entry() //  [R2]
         { []
         }
     {offset
       ca1Q4: // global
           R2 = R2;
           call GHC.Stack.CCS.ccsParent1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsParent_info" {
     GHC.Stack.CCS.ccsParent_info:
         const GHC.Stack.CCS.ccsParent_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.942658557 UTC

[section ""data" . GHC.Stack.CCS.ccSrcSpan1_closure" {
     GHC.Stack.CCS.ccSrcSpan1_closure:
         const GHC.Stack.CCS.ccSrcSpan1_info;
 },
 GHC.Stack.CCS.ccSrcSpan1_entry() //  [R2]
         { []
         }
     {offset
       ca1Qi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Qp; else goto ca1Qq;
       ca1Qp: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccSrcSpan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Qq: // global
           I64[Sp - 8] = block_ca1Qf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1Qu; else goto ca1Qg;
       ua1Qu: // global
           call _ca1Qf(R1) args: 0, res: 0, upd: 0;
       ca1Qg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccSrcSpan1_info" {
     GHC.Stack.CCS.ccSrcSpan1_info:
         const GHC.Stack.CCS.ccSrcSpan1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1Qf() //  [R1]
         { []
         }
     {offset
       ca1Qf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1Qt; else goto ca1Qs;
       ca1Qt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1Qs: // global
           _sa1Kk::I64 = I64[I64[R1 + 7] + 24];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1Kk::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Qf_info" {
     block_ca1Qf_info:
         const _ca1Qf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.948371632 UTC

[section ""data" . GHC.Stack.CCS.ccSrcSpan_closure" {
     GHC.Stack.CCS.ccSrcSpan_closure:
         const GHC.Stack.CCS.ccSrcSpan_info;
 },
 GHC.Stack.CCS.ccSrcSpan_entry() //  [R2]
         { []
         }
     {offset
       ca1QM: // global
           R2 = R2;
           call GHC.Stack.CCS.ccSrcSpan1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccSrcSpan_info" {
     GHC.Stack.CCS.ccSrcSpan_info:
         const GHC.Stack.CCS.ccSrcSpan_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.952009164 UTC

[section ""data" . GHC.Stack.CCS.ccModule1_closure" {
     GHC.Stack.CCS.ccModule1_closure:
         const GHC.Stack.CCS.ccModule1_info;
 },
 GHC.Stack.CCS.ccModule1_entry() //  [R2]
         { []
         }
     {offset
       ca1R0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1R7; else goto ca1R8;
       ca1R7: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccModule1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1R8: // global
           I64[Sp - 8] = block_ca1QX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1Rc; else goto ca1QY;
       ua1Rc: // global
           call _ca1QX(R1) args: 0, res: 0, upd: 0;
       ca1QY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccModule1_info" {
     GHC.Stack.CCS.ccModule1_info:
         const GHC.Stack.CCS.ccModule1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1QX() //  [R1]
         { []
         }
     {offset
       ca1QX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1Rb; else goto ca1Ra;
       ca1Rb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1Ra: // global
           _sa1Kt::I64 = I64[I64[R1 + 7] + 16];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1Kt::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1QX_info" {
     block_ca1QX_info:
         const _ca1QX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.957146677 UTC

[section ""data" . GHC.Stack.CCS.ccModule_closure" {
     GHC.Stack.CCS.ccModule_closure:
         const GHC.Stack.CCS.ccModule_info;
 },
 GHC.Stack.CCS.ccModule_entry() //  [R2]
         { []
         }
     {offset
       ca1Ru: // global
           R2 = R2;
           call GHC.Stack.CCS.ccModule1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccModule_info" {
     GHC.Stack.CCS.ccModule_info:
         const GHC.Stack.CCS.ccModule_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.961498686 UTC

[section ""data" . GHC.Stack.CCS.ccLabel1_closure" {
     GHC.Stack.CCS.ccLabel1_closure:
         const GHC.Stack.CCS.ccLabel1_info;
 },
 GHC.Stack.CCS.ccLabel1_entry() //  [R2]
         { []
         }
     {offset
       ca1RI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1RP; else goto ca1RQ;
       ca1RP: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccLabel1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1RQ: // global
           I64[Sp - 8] = block_ca1RF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1RU; else goto ca1RG;
       ua1RU: // global
           call _ca1RF(R1) args: 0, res: 0, upd: 0;
       ca1RG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccLabel1_info" {
     GHC.Stack.CCS.ccLabel1_info:
         const GHC.Stack.CCS.ccLabel1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _ca1RF() //  [R1]
         { []
         }
     {offset
       ca1RF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ca1RT; else goto ca1RS;
       ca1RT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ca1RS: // global
           _sa1KC::I64 = I64[I64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sa1KC::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1RF_info" {
     block_ca1RF_info:
         const _ca1RF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.96646949 UTC

[section ""data" . GHC.Stack.CCS.ccLabel_closure" {
     GHC.Stack.CCS.ccLabel_closure:
         const GHC.Stack.CCS.ccLabel_info;
 },
 GHC.Stack.CCS.ccLabel_entry() //  [R2]
         { []
         }
     {offset
       ca1Sc: // global
           R2 = R2;
           call GHC.Stack.CCS.ccLabel1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccLabel_info" {
     GHC.Stack.CCS.ccLabel_info:
         const GHC.Stack.CCS.ccLabel_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.969920379 UTC

[section ""cstring" . lvl_ra1ia_bytes" {
     lvl_ra1ia_bytes:
         I8[] [77,65,73,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.972019509 UTC

[section ""data" . lvl1_ra1ib_closure" {
     lvl1_ra1ib_closure:
         const lvl1_ra1ib_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_ra1ib_entry() //  [R1]
         { []
         }
     {offset
       ca1Sq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1Sr; else goto ca1Ss;
       ca1Sr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1Ss: // global
           (_ca1Sn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ca1Sn::I64 == 0) goto ca1Sp; else goto ca1So;
       ca1Sp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ca1So: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ca1Sn::I64;
           R2 = lvl_ra1ia_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_ra1ib_info" {
     lvl1_ra1ib_info:
         const lvl1_ra1ib_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.975416756 UTC

[section ""cstring" . lvl2_ra1ic_bytes" {
     lvl2_ra1ic_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.977007181 UTC

[section ""data" . lvl3_ra1id_closure" {
     lvl3_ra1id_closure:
         const GHC.Types.C#_con_info;
         const 40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.978931616 UTC

[section ""data" . lvl4_ra1ie_closure" {
     lvl4_ra1ie_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.98046067 UTC

[section ""data" . lvl5_ra1if_closure" {
     lvl5_ra1if_closure:
         const GHC.Types.C#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.982851508 UTC

[section ""data" . lvl6_ra1ig_closure" {
     lvl6_ra1ig_closure:
         const lvl6_ra1ig_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_ra1ig_entry() //  [R1]
         { []
         }
     {offset
       ca1SL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1SM; else goto ca1SN;
       ca1SM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1SN: // global
           (_ca1SI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ca1SI::I64 == 0) goto ca1SK; else goto ca1SJ;
       ca1SK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ca1SJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ca1SI::I64;
           R2 = lvl2_ra1ic_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_ra1ig_info" {
     lvl6_ra1ig_info:
         const lvl6_ra1ig_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:04.990868387 UTC

[section ""data" . GHC.Stack.CCS.$wgo_closure" {
     GHC.Stack.CCS.$wgo_closure:
         const GHC.Stack.CCS.$wgo_info;
         const 0;
 },
 sat_sa1Lc_entry() //  [R1]
         { []
         }
     {offset
       ca1TG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1TH; else goto ca1TI;
       ca1TH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1TI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl6_ra1ig_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa1Lc_info" {
     sat_sa1Lc_info:
         const sat_sa1Lc_entry;
         const 1;
         const 4294967312;
         const Sa1ND_srt+24;
 },
 sat_sa1Lf_entry() //  [R1]
         { []
         }
     {offset
       ca1TL: // global
           _sa1Lf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ca1TM; else goto ca1TN;
       ca1TN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ca1TP; else goto ca1TO;
       ca1TP: // global
           HpAlloc = 72;
           goto ca1TM;
       ca1TM: // global
           R1 = _sa1Lf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1TO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sa1Lf::P64;
           _sa1KS::P64 = P64[_sa1Lf::P64 + 16];
           _sa1L6::P64 = P64[_sa1Lf::P64 + 24];
           I64[Hp - 64] = sat_sa1Lc_info;
           P64[Hp - 48] = _sa1L6::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl3_ra1id_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl4_ra1ie_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _sa1KS::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa1Lf_info" {
     sat_sa1Lf_info:
         const sat_sa1Lf_entry;
         const 2;
         const 4294967314;
         const Sa1ND_srt+24;
 },
 sat_sa1Lh_entry() //  [R1]
         { []
         }
     {offset
       ca1TR: // global
           _sa1Lh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ca1TS; else goto ca1TT;
       ca1TT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ca1TV; else goto ca1TU;
       ca1TV: // global
           HpAlloc = 56;
           goto ca1TS;
       ca1TS: // global
           R1 = _sa1Lh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca1TU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sa1Lh::P64;
           _sa1KS::P64 = P64[_sa1Lh::P64 + 16];
           _sa1KZ::P64 = P64[_sa1Lh::P64 + 24];
           _sa1L6::P64 = P64[_sa1Lh::P64 + 32];
           I64[Hp - 48] = sat_sa1Lf_info;
           P64[Hp - 32] = _sa1KS::P64;
           P64[Hp - 24] = _sa1L6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl5_ra1if_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sa1KZ::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa1Lh_info" {
     sat_sa1Lh_info:
         const sat_sa1Lh_entry;
         const 3;
         const 4294967311;
         const Sa1ND_srt+24;
 },
 GHC.Stack.CCS.$wgo_entry() //  [R2, R3]
         { []
         }
     {offset
       ca1TZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ca1U0; else goto ua1Uw;
       ca1U0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.CCS.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ua1Uw: // global
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _ca1SX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.$wgo_info" {
     GHC.Stack.CCS.$wgo_info:
         const GHC.Stack.CCS.$wgo_entry;
         const 0;
         const 133143986190;
         const 12884901901;
         const Sa1ND_srt+24;
 },
 _ca1SX() //  []
         { []
         }
     {offset
       ca1SX: // global
           _sa1KE::I64 = I64[Sp];
           if (_sa1KE::I64 == 0) goto ua1Ux; else goto ca1TX;
       ua1Ux: // global
           Sp = Sp + 8;
           call _ca1TY() args: 0, res: 0, upd: 0;
       ca1TX: // global
           _sa1KL::I64 = I64[_sa1KE::I64 + 8];
           _sa1KP::I64 = I64[_sa1KL::I64 + 8];
           I64[Sp - 16] = block_ca1T9_info;
           R3 = _sa1KP::I64;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           I64[Sp - 8] = _sa1KL::I64;
           Sp = Sp - 16;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _ca1T9() //  [R1]
         { []
         }
     {offset
       ca1T9: // global
           _sa1KW::I64 = I64[I64[Sp + 8] + 16];
           I64[Sp - 8] = block_ca1Te_info;
           R3 = _sa1KW::I64;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1T9_info" {
     block_ca1T9_info:
         const _ca1T9;
         const 195;
         const 98784247838;
         const Sa1ND_srt+24;
 },
 _ca1Te() //  [R1]
         { []
         }
     {offset
       ca1Te: // global
           _sa1L3::I64 = I64[I64[Sp + 16] + 24];
           I64[Sp] = block_ca1Tj_info;
           R3 = _sa1L3::I64;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp + 16] = R1;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Te_info" {
     block_ca1Te_info:
         const _ca1Te;
         const 388;
         const 98784247838;
         const Sa1ND_srt+24;
 },
 _ca1Tj() //  [R1]
         { []
         }
     {offset
       ca1Tj: // global
           _sa1La::I64 = I64[I64[Sp + 24] + 16];
           I64[Sp - 8] = block_ca1U5_info;
           R3 = lvl1_ra1ib_closure;
           R2 = P64[Sp + 16];
           I64[Sp] = _sa1La::I64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Tj_info" {
     block_ca1Tj_info:
         const _ca1Tj;
         const 260;
         const 98784247838;
         const Sa1ND_srt+24;
 },
 _ca1U5() //  [R1]
         { []
         }
     {offset
       ca1U5: // global
           if (R1 & 7 == 1) goto ua1UD; else goto ca1Uj;
       ua1UD: // global
           call _ca1Tr() args: 0, res: 0, upd: 0;
       ca1Uj: // global
           I64[Sp] = block_ca1Uh_info;
           R3 = lvl1_ra1ib_closure;
           R2 = P64[Sp + 16];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1U5_info" {
     block_ca1U5_info:
         const _ca1U5;
         const 69;
         const 98784247838;
         const Sa1ND_srt+24;
 },
 _ca1Uh() //  [R1]
         { []
         }
     {offset
       ca1Uh: // global
           if (R1 & 7 == 1) goto ua1UE; else goto ua1Uy;
       ua1UE: // global
           call _ca1Tr() args: 0, res: 0, upd: 0;
       ua1Uy: // global
           Sp = Sp + 40;
           call _ca1TY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ca1Uh_info" {
     block_ca1Uh_info:
         const _ca1Uh;
         const 69;
         const 98784247838;
         const Sa1ND_srt+24;
 },
 _ca1Tr() //  []
         { []
         }
     {offset
       ca1Tr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ca1U8; else goto ca1U7;
       ca1U8: // global
           HpAlloc = 64;
           I64[Sp] = block_ca1Tr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ca1U7: // global
           I64[Hp - 56] = sat_sa1Lh_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 32] = I64[Sp + 8];
           P64[Sp + 40] = Hp - 14;
           Sp = Sp + 32;
           call _ca1SX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ca1Tr_info" {
     block_ca1Tr_info:
         const _ca1Tr;
         const 69;
         const 98784247838;
         const Sa1ND_srt+24;
 },
 _ca1TY() //  []
         { []
         }
     {offset
       ca1TY: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.010912975 UTC

[section ""data" . GHC.Stack.CCS.ccsToStrings2_closure" {
     GHC.Stack.CCS.ccsToStrings2_closure:
         const GHC.Stack.CCS.ccsToStrings2_info;
         const 0;
 },
 GHC.Stack.CCS.ccsToStrings2_entry() //  [R2, R3]
         { []
         }
     {offset
       ca1W1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca1W2; else goto ca1W3;
       ca1W2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.CCS.ccsToStrings2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ca1W3: // global
           I64[Sp - 16] = block_ca1VY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ua1W7; else goto ca1VZ;
       ua1W7: // global
           call _ca1VY(R1) args: 0, res: 0, upd: 0;
       ca1VZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsToStrings2_info" {
     GHC.Stack.CCS.ccsToStrings2_info:
         const GHC.Stack.CCS.ccsToStrings2_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const Sa1ND_srt+48;
 },
 _ca1VY() //  [R1]
         { []
         }
     {offset
       ca1VY: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1VY_info" {
     block_ca1VY_info:
         const _ca1VY;
         const 1;
         const 4294967326;
         const Sa1ND_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.016388908 UTC

[section ""data" . GHC.Stack.CCS.ccsToStrings1_closure" {
     GHC.Stack.CCS.ccsToStrings1_closure:
         const GHC.Stack.CCS.ccsToStrings1_info;
         const 0;
 },
 GHC.Stack.CCS.ccsToStrings1_entry() //  [R2]
         { []
         }
     {offset
       ca1Wp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca1Wq; else goto ca1Wr;
       ca1Wq: // global
           R2 = R2;
           R1 = GHC.Stack.CCS.ccsToStrings1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca1Wr: // global
           I64[Sp - 8] = block_ca1Wm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua1Wv; else goto ca1Wn;
       ua1Wv: // global
           call _ca1Wm(R1) args: 0, res: 0, upd: 0;
       ca1Wn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsToStrings1_info" {
     GHC.Stack.CCS.ccsToStrings1_info:
         const GHC.Stack.CCS.ccsToStrings1_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const Sa1ND_srt+48;
 },
 _ca1Wm() //  [R1]
         { []
         }
     {offset
       ca1Wm: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca1Wm_info" {
     block_ca1Wm_info:
         const _ca1Wm;
         const 0;
         const 4294967326;
         const Sa1ND_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.021700165 UTC

[section ""data" . GHC.Stack.CCS.ccsToStrings_closure" {
     GHC.Stack.CCS.ccsToStrings_closure:
         const GHC.Stack.CCS.ccsToStrings_info;
         const 0;
 },
 GHC.Stack.CCS.ccsToStrings_entry() //  [R2]
         { []
         }
     {offset
       ca1WL: // global
           R2 = R2;
           call GHC.Stack.CCS.ccsToStrings1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.ccsToStrings_info" {
     GHC.Stack.CCS.ccsToStrings_info:
         const GHC.Stack.CCS.ccsToStrings_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sa1ND_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.025117917 UTC

[section ""data" . GHC.Stack.CCS.whoCreated1_closure" {
     GHC.Stack.CCS.whoCreated1_closure:
         const GHC.Stack.CCS.whoCreated1_info;
         const 0;
 },
 GHC.Stack.CCS.whoCreated1_entry() //  []
         { []
         }
     {offset
       ca1WW: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = 0;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.whoCreated1_info" {
     GHC.Stack.CCS.whoCreated1_info:
         const GHC.Stack.CCS.whoCreated1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sa1ND_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.028287809 UTC

[section ""data" . GHC.Stack.CCS.whoCreated_closure" {
     GHC.Stack.CCS.whoCreated_closure:
         const GHC.Stack.CCS.whoCreated_info;
         const 0;
 },
 GHC.Stack.CCS.whoCreated_entry() //  [R2]
         { []
         }
     {offset
       ca1X8: // global
           R2 = R2;
           call GHC.Stack.CCS.whoCreated1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.whoCreated_info" {
     GHC.Stack.CCS.whoCreated_info:
         const GHC.Stack.CCS.whoCreated_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sa1ND_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.032045373 UTC

[section ""data" . GHC.Stack.CCS.currentCallStack1_closure" {
     GHC.Stack.CCS.currentCallStack1_closure:
         const GHC.Stack.CCS.currentCallStack1_info;
         const 0;
 },
 GHC.Stack.CCS.currentCallStack1_entry() //  []
         { []
         }
     {offset
       ca1Xj: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = CCCS;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.currentCallStack1_info" {
     GHC.Stack.CCS.currentCallStack1_info:
         const GHC.Stack.CCS.currentCallStack1_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Sa1ND_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.035684262 UTC

[section ""data" . GHC.Stack.CCS.currentCallStack_closure" {
     GHC.Stack.CCS.currentCallStack_closure:
         const GHC.Stack.CCS.currentCallStack_info;
         const 0;
 },
 GHC.Stack.CCS.currentCallStack_entry() //  []
         { []
         }
     {offset
       ca1Xv: // global
           call GHC.Stack.CCS.currentCallStack1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.CCS.currentCallStack_info" {
     GHC.Stack.CCS.currentCallStack_info:
         const GHC.Stack.CCS.currentCallStack_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Sa1ND_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.038617165 UTC

[section ""relreadonly" . Sa1ND_srt" {
     Sa1ND_srt:
         const GHC.Stack.CCS.renderStack_go_closure;
         const f1_ra1i9_closure;
         const GHC.Stack.CCS.renderStack_closure;
         const lvl6_ra1ig_closure;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.Stack.CCS.$wgo_closure;
         const lvl1_ra1ib_closure;
         const GHC.Stack.CCS.ccsToStrings2_closure;
         const GHC.Stack.CCS.ccsToStrings1_closure;
         const GHC.Stack.CCS.whoCreated1_closure;
         const GHC.Stack.CCS.currentCallStack1_closure;
 }]

