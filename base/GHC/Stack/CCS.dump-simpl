
==================== Tidy Core ====================
2018-03-16 16:05:04.211824596 UTC

Result size of Tidy Core
  = {terms: 377, types: 658, coercions: 84, joins: 1/1}

-- RHS size: {terms: 12, types: 27, coercions: 0, joins: 0/0}
GHC.Stack.CCS.getCurrentCCS1
  :: forall dummy.
     dummy
     -> State# RealWorld -> (# State# RealWorld, Ptr CostCentreStack #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ dummy_aa15y)
                 (dummy1_aa10o [Occ=Once] :: dummy_aa15y)
                 (s_aa10p [Occ=Once] :: State# RealWorld) ->
                 case getCurrentCCS# @ dummy_aa15y @ RealWorld dummy1_aa10o s_aa10p
                 of
                 { (# s'_sa1a3 [Occ=Once], addr_sa1a4 [Occ=Once] #) ->
                 (# s'_sa1a3, GHC.Ptr.Ptr @ CostCentreStack addr_sa1a4 #)
                 }}]
GHC.Stack.CCS.getCurrentCCS1
  = \ (@ dummy_aa15y)
      (dummy1_aa10o :: dummy_aa15y)
      (s_aa10p :: State# RealWorld) ->
      case getCurrentCCS# @ dummy_aa15y @ RealWorld dummy1_aa10o s_aa10p
      of
      { (# s'_sa1g2, addr_sa1g3 #) ->
      (# s'_sa1g2, GHC.Ptr.Ptr @ CostCentreStack addr_sa1g3 #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
getCurrentCCS :: forall dummy. dummy -> IO (Ptr CostCentreStack)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.getCurrentCCS1
               `cast` (forall (dummy :: <*>_N).
                       <dummy>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr CostCentreStack>_R)
                       :: (forall dummy.
                           dummy
                           -> State# RealWorld
                           -> (# State# RealWorld, Ptr CostCentreStack #) :: *)
                          ~R# (forall dummy. dummy -> IO (Ptr CostCentreStack) :: *))}]
getCurrentCCS
  = GHC.Stack.CCS.getCurrentCCS1
    `cast` (forall (dummy :: <*>_N).
            <dummy>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr CostCentreStack>_R)
            :: (forall dummy.
                dummy
                -> State# RealWorld
                -> (# State# RealWorld, Ptr CostCentreStack #) :: *)
               ~R# (forall dummy. dummy -> IO (Ptr CostCentreStack) :: *))

-- RHS size: {terms: 12, types: 27, coercions: 0, joins: 0/0}
GHC.Stack.CCS.getCCSOf1
  :: forall a.
     a
     -> State# RealWorld -> (# State# RealWorld, Ptr CostCentreStack #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_aa15g)
                 (obj_aa10s [Occ=Once] :: a_aa15g)
                 (s_aa10t [Occ=Once] :: State# RealWorld) ->
                 case getCCSOf# @ a_aa15g @ RealWorld obj_aa10s s_aa10t of
                 { (# s'_sa1a7 [Occ=Once], addr_sa1a8 [Occ=Once] #) ->
                 (# s'_sa1a7, GHC.Ptr.Ptr @ CostCentreStack addr_sa1a8 #)
                 }}]
GHC.Stack.CCS.getCCSOf1
  = \ (@ a_aa15g)
      (obj_aa10s :: a_aa15g)
      (s_aa10t :: State# RealWorld) ->
      case getCCSOf# @ a_aa15g @ RealWorld obj_aa10s s_aa10t of
      { (# s'_sa1g6, addr_sa1g7 #) ->
      (# s'_sa1g6, GHC.Ptr.Ptr @ CostCentreStack addr_sa1g7 #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
getCCSOf :: forall a. a -> IO (Ptr CostCentreStack)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.getCCSOf1
               `cast` (forall (a :: <*>_N).
                       <a>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr CostCentreStack>_R)
                       :: (forall a.
                           a
                           -> State# RealWorld
                           -> (# State# RealWorld, Ptr CostCentreStack #) :: *)
                          ~R# (forall a. a -> IO (Ptr CostCentreStack) :: *))}]
getCCSOf
  = GHC.Stack.CCS.getCCSOf1
    `cast` (forall (a :: <*>_N).
            <a>_R ->_R Sym (GHC.Types.N:IO[0] <Ptr CostCentreStack>_R)
            :: (forall a.
                a
                -> State# RealWorld
                -> (# State# RealWorld, Ptr CostCentreStack #) :: *)
               ~R# (forall a. a -> IO (Ptr CostCentreStack) :: *))

-- RHS size: {terms: 1, types: 1, coercions: 10, joins: 0/0}
clearCCS :: forall a. IO a -> IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (clearCCS# @ RealWorld)
               `cast` (forall (a :: <*>_N).
                       Sym (GHC.Types.N:IO[0] <a>_R) ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           (State# RealWorld -> (# State# RealWorld, a #))
                           -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. IO a -> IO a :: *))}]
clearCCS
  = (clearCCS# @ RealWorld)
    `cast` (forall (a :: <*>_N).
            Sym (GHC.Types.N:IO[0] <a>_R) ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                (State# RealWorld -> (# State# RealWorld, a #))
                -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. IO a -> IO a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_ra1i8 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
f_ra1i8
  = "\n\
    \  "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f1_ra1i9 :: [Char]
[GblId]
f1_ra1i9 = unpackCString# f_ra1i8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.renderStack1 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.Stack.CCS.renderStack1 = "CallStack (from -prof):"#

Rec {
-- RHS size: {terms: 12, types: 14, coercions: 0, joins: 0/0}
GHC.Stack.CCS.renderStack_go [Occ=LoopBreaker]
  :: [[Char]] -> [Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
GHC.Stack.CCS.renderStack_go
  = \ (ds_i7Jck :: [[Char]]) ->
      case ds_i7Jck of {
        [] -> GHC.Types.[] @ Char;
        : y_i7Jcp ys_i7Jcq ->
          ++
            @ Char
            f1_ra1i9
            (++ @ Char y_i7Jcp (GHC.Stack.CCS.renderStack_go ys_i7Jcq))
      }
end Rec }

-- RHS size: {terms: 7, types: 4, coercions: 0, joins: 0/0}
renderStack :: [String] -> String
[GblId,
 Arity=1,
 Str=<L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 80 0}]
renderStack
  = \ (strs_aa10T :: [String]) ->
      unpackAppendCString#
        GHC.Stack.CCS.renderStack1
        (GHC.Stack.CCS.renderStack_go
           (GHC.List.reverse1 @ String strs_aa10T (GHC.Types.[] @ String)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Stack.CCS.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Stack.CCS.$trModule3
  = GHC.Types.TrNameS GHC.Stack.CCS.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Stack.CCS.$trModule2 = "GHC.Stack.CCS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Stack.CCS.$trModule1
  = GHC.Types.TrNameS GHC.Stack.CCS.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Stack.CCS.$trModule
  = GHC.Types.Module
      GHC.Stack.CCS.$trModule3 GHC.Stack.CCS.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$tcCostCentreStack2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Stack.CCS.$tcCostCentreStack2 = "CostCentreStack"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$tcCostCentreStack1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Stack.CCS.$tcCostCentreStack1
  = GHC.Types.TrNameS GHC.Stack.CCS.$tcCostCentreStack2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$tcCostCentreStack :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Stack.CCS.$tcCostCentreStack
  = GHC.Types.TyCon
      4388269014118491027##
      5682182778281832541##
      GHC.Stack.CCS.$trModule
      GHC.Stack.CCS.$tcCostCentreStack1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$tcCostCentre2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Stack.CCS.$tcCostCentre2 = "CostCentre"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$tcCostCentre1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Stack.CCS.$tcCostCentre1
  = GHC.Types.TrNameS GHC.Stack.CCS.$tcCostCentre2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Stack.CCS.$tcCostCentre :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Stack.CCS.$tcCostCentre
  = GHC.Types.TyCon
      10996116669986307392##
      5747049382639019202##
      GHC.Stack.CCS.$trModule
      GHC.Stack.CCS.$tcCostCentre1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 17, types: 28, coercions: 0, joins: 0/0}
GHC.Stack.CCS.ccsCC1
  :: Ptr CostCentreStack
     -> State# RealWorld -> (# State# RealWorld, Ptr CostCentre #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (p_aa10y [Occ=Once!] :: Ptr CostCentreStack)
                 (eta_i9h9C [Occ=Once] :: State# RealWorld) ->
                 case p_aa10y of { Ptr addr_i9h9F [Occ=Once] ->
                 case readAddrOffAddr#
                        @ RealWorld (plusAddr# addr_i9h9F 8#) 0# eta_i9h9C
                 of
                 { (# ipv_i9h9N [Occ=Once], ipv1_i9h9O [Occ=Once] #) ->
                 (# ipv_i9h9N, GHC.Ptr.Ptr @ CostCentre ipv1_i9h9O #)
                 }
                 }}]
GHC.Stack.CCS.ccsCC1
  = \ (p_aa10y :: Ptr CostCentreStack)
      (eta_i9h9C :: State# RealWorld) ->
      case p_aa10y of { Ptr addr_i9h9F ->
      case readAddrOffAddr#
             @ RealWorld (plusAddr# addr_i9h9F 8#) 0# eta_i9h9C
      of
      { (# ipv_i9h9N, ipv1_i9h9O #) ->
      (# ipv_i9h9N, GHC.Ptr.Ptr @ CostCentre ipv1_i9h9O #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
ccsCC :: Ptr CostCentreStack -> IO (Ptr CostCentre)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.ccsCC1
               `cast` (<Ptr CostCentreStack>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr CostCentre>_R)
                       :: (Ptr CostCentreStack
                           -> State# RealWorld -> (# State# RealWorld, Ptr CostCentre #) :: *)
                          ~R# (Ptr CostCentreStack -> IO (Ptr CostCentre) :: *))}]
ccsCC
  = GHC.Stack.CCS.ccsCC1
    `cast` (<Ptr CostCentreStack>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr CostCentre>_R)
            :: (Ptr CostCentreStack
                -> State# RealWorld -> (# State# RealWorld, Ptr CostCentre #) :: *)
               ~R# (Ptr CostCentreStack -> IO (Ptr CostCentre) :: *))

-- RHS size: {terms: 17, types: 28, coercions: 0, joins: 0/0}
GHC.Stack.CCS.ccsParent1
  :: Ptr CostCentreStack
     -> State# RealWorld -> (# State# RealWorld, Ptr CostCentreStack #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (p_aa10A [Occ=Once!] :: Ptr CostCentreStack)
                 (eta_i9h9C [Occ=Once] :: State# RealWorld) ->
                 case p_aa10A of { Ptr addr_i9h9F [Occ=Once] ->
                 case readAddrOffAddr#
                        @ RealWorld (plusAddr# addr_i9h9F 16#) 0# eta_i9h9C
                 of
                 { (# ipv_i9h9N [Occ=Once], ipv1_i9h9O [Occ=Once] #) ->
                 (# ipv_i9h9N, GHC.Ptr.Ptr @ CostCentreStack ipv1_i9h9O #)
                 }
                 }}]
GHC.Stack.CCS.ccsParent1
  = \ (p_aa10A :: Ptr CostCentreStack)
      (eta_i9h9C :: State# RealWorld) ->
      case p_aa10A of { Ptr addr_i9h9F ->
      case readAddrOffAddr#
             @ RealWorld (plusAddr# addr_i9h9F 16#) 0# eta_i9h9C
      of
      { (# ipv_i9h9N, ipv1_i9h9O #) ->
      (# ipv_i9h9N, GHC.Ptr.Ptr @ CostCentreStack ipv1_i9h9O #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
ccsParent :: Ptr CostCentreStack -> IO (Ptr CostCentreStack)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.ccsParent1
               `cast` (<Ptr CostCentreStack>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr CostCentreStack>_R)
                       :: (Ptr CostCentreStack
                           -> State# RealWorld
                           -> (# State# RealWorld, Ptr CostCentreStack #) :: *)
                          ~R# (Ptr CostCentreStack -> IO (Ptr CostCentreStack) :: *))}]
ccsParent
  = GHC.Stack.CCS.ccsParent1
    `cast` (<Ptr CostCentreStack>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr CostCentreStack>_R)
            :: (Ptr CostCentreStack
                -> State# RealWorld
                -> (# State# RealWorld, Ptr CostCentreStack #) :: *)
               ~R# (Ptr CostCentreStack -> IO (Ptr CostCentreStack) :: *))

-- RHS size: {terms: 17, types: 28, coercions: 0, joins: 0/0}
GHC.Stack.CCS.ccSrcSpan1
  :: Ptr CostCentre
     -> State# RealWorld -> (# State# RealWorld, Ptr CChar #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (p_aa10G [Occ=Once!] :: Ptr CostCentre)
                 (eta_i9h9C [Occ=Once] :: State# RealWorld) ->
                 case p_aa10G of { Ptr addr_i9h9F [Occ=Once] ->
                 case readAddrOffAddr#
                        @ RealWorld (plusAddr# addr_i9h9F 24#) 0# eta_i9h9C
                 of
                 { (# ipv_i9h9N [Occ=Once], ipv1_i9h9O [Occ=Once] #) ->
                 (# ipv_i9h9N, GHC.Ptr.Ptr @ CChar ipv1_i9h9O #)
                 }
                 }}]
GHC.Stack.CCS.ccSrcSpan1
  = \ (p_aa10G :: Ptr CostCentre) (eta_i9h9C :: State# RealWorld) ->
      case p_aa10G of { Ptr addr_i9h9F ->
      case readAddrOffAddr#
             @ RealWorld (plusAddr# addr_i9h9F 24#) 0# eta_i9h9C
      of
      { (# ipv_i9h9N, ipv1_i9h9O #) ->
      (# ipv_i9h9N, GHC.Ptr.Ptr @ CChar ipv1_i9h9O #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
ccSrcSpan :: Ptr CostCentre -> IO CString
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.ccSrcSpan1
               `cast` (<Ptr CostCentre>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr CChar>_R)
                       :: (Ptr CostCentre
                           -> State# RealWorld -> (# State# RealWorld, Ptr CChar #) :: *)
                          ~R# (Ptr CostCentre -> IO (Ptr CChar) :: *))}]
ccSrcSpan
  = GHC.Stack.CCS.ccSrcSpan1
    `cast` (<Ptr CostCentre>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr CChar>_R)
            :: (Ptr CostCentre
                -> State# RealWorld -> (# State# RealWorld, Ptr CChar #) :: *)
               ~R# (Ptr CostCentre -> IO (Ptr CChar) :: *))

-- RHS size: {terms: 17, types: 28, coercions: 0, joins: 0/0}
GHC.Stack.CCS.ccModule1
  :: Ptr CostCentre
     -> State# RealWorld -> (# State# RealWorld, Ptr CChar #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (p_aa10E [Occ=Once!] :: Ptr CostCentre)
                 (eta_i9h9C [Occ=Once] :: State# RealWorld) ->
                 case p_aa10E of { Ptr addr_i9h9F [Occ=Once] ->
                 case readAddrOffAddr#
                        @ RealWorld (plusAddr# addr_i9h9F 16#) 0# eta_i9h9C
                 of
                 { (# ipv_i9h9N [Occ=Once], ipv1_i9h9O [Occ=Once] #) ->
                 (# ipv_i9h9N, GHC.Ptr.Ptr @ CChar ipv1_i9h9O #)
                 }
                 }}]
GHC.Stack.CCS.ccModule1
  = \ (p_aa10E :: Ptr CostCentre) (eta_i9h9C :: State# RealWorld) ->
      case p_aa10E of { Ptr addr_i9h9F ->
      case readAddrOffAddr#
             @ RealWorld (plusAddr# addr_i9h9F 16#) 0# eta_i9h9C
      of
      { (# ipv_i9h9N, ipv1_i9h9O #) ->
      (# ipv_i9h9N, GHC.Ptr.Ptr @ CChar ipv1_i9h9O #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
ccModule :: Ptr CostCentre -> IO CString
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.ccModule1
               `cast` (<Ptr CostCentre>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr CChar>_R)
                       :: (Ptr CostCentre
                           -> State# RealWorld -> (# State# RealWorld, Ptr CChar #) :: *)
                          ~R# (Ptr CostCentre -> IO (Ptr CChar) :: *))}]
ccModule
  = GHC.Stack.CCS.ccModule1
    `cast` (<Ptr CostCentre>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr CChar>_R)
            :: (Ptr CostCentre
                -> State# RealWorld -> (# State# RealWorld, Ptr CChar #) :: *)
               ~R# (Ptr CostCentre -> IO (Ptr CChar) :: *))

-- RHS size: {terms: 17, types: 28, coercions: 0, joins: 0/0}
GHC.Stack.CCS.ccLabel1
  :: Ptr CostCentre
     -> State# RealWorld -> (# State# RealWorld, Ptr CChar #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (p_aa10C [Occ=Once!] :: Ptr CostCentre)
                 (eta_i9h9C [Occ=Once] :: State# RealWorld) ->
                 case p_aa10C of { Ptr addr_i9h9F [Occ=Once] ->
                 case readAddrOffAddr#
                        @ RealWorld (plusAddr# addr_i9h9F 8#) 0# eta_i9h9C
                 of
                 { (# ipv_i9h9N [Occ=Once], ipv1_i9h9O [Occ=Once] #) ->
                 (# ipv_i9h9N, GHC.Ptr.Ptr @ CChar ipv1_i9h9O #)
                 }
                 }}]
GHC.Stack.CCS.ccLabel1
  = \ (p_aa10C :: Ptr CostCentre) (eta_i9h9C :: State# RealWorld) ->
      case p_aa10C of { Ptr addr_i9h9F ->
      case readAddrOffAddr#
             @ RealWorld (plusAddr# addr_i9h9F 8#) 0# eta_i9h9C
      of
      { (# ipv_i9h9N, ipv1_i9h9O #) ->
      (# ipv_i9h9N, GHC.Ptr.Ptr @ CChar ipv1_i9h9O #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
ccLabel :: Ptr CostCentre -> IO CString
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.ccLabel1
               `cast` (<Ptr CostCentre>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Ptr CChar>_R)
                       :: (Ptr CostCentre
                           -> State# RealWorld -> (# State# RealWorld, Ptr CChar #) :: *)
                          ~R# (Ptr CostCentre -> IO (Ptr CChar) :: *))}]
ccLabel
  = GHC.Stack.CCS.ccLabel1
    `cast` (<Ptr CostCentre>_R
            ->_R Sym (GHC.Types.N:IO[0] <Ptr CChar>_R)
            :: (Ptr CostCentre
                -> State# RealWorld -> (# State# RealWorld, Ptr CChar #) :: *)
               ~R# (Ptr CostCentre -> IO (Ptr CChar) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_ra1ia :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_ra1ia = "MAIN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_ra1ib :: [Char]
[GblId]
lvl1_ra1ib = unpackCString# lvl_ra1ia

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_ra1ic :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_ra1ic = ")"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_ra1id :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl3_ra1id = GHC.Types.C# '('#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl4_ra1ie :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl4_ra1ie = GHC.Types.C# ' '#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5_ra1if :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl5_ra1if = GHC.Types.C# '.'#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_ra1ig :: [Char]
[GblId]
lvl6_ra1ig = unpackCString# lvl2_ra1ic

Rec {
-- RHS size: {terms: 106, types: 138, coercions: 0, joins: 1/1}
GHC.Stack.CCS.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Addr#
     -> [[Char]] -> State# RealWorld -> (# State# RealWorld, [[Char]] #)
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []]
GHC.Stack.CCS.$wgo
  = \ (ww_sa1ev :: Addr#)
      (w_sa1er :: [[Char]])
      (w1_sa1es :: State# RealWorld) ->
      case eqAddr# ww_sa1ev __NULL of {
        __DEFAULT ->
          case readAddrOffAddr#
                 @ RealWorld (plusAddr# ww_sa1ev 8#) 0# w1_sa1es
          of
          { (# ipv_i9h9N, ipv1_i9h9O #) ->
          case readAddrOffAddr#
                 @ RealWorld (plusAddr# ipv1_i9h9O 8#) 0# ipv_i9h9N
          of
          { (# ipv2_X9hby, ipv3_X9hbA #) ->
          case GHC.Foreign.$wpeekCString
                 GHC.IO.Encoding.UTF8.utf8 ipv3_X9hbA ipv2_X9hby
          of
          { (# ipv4_X7IDx, ipv5_X7IDA #) ->
          case readAddrOffAddr#
                 @ RealWorld (plusAddr# ipv1_i9h9O 16#) 0# ipv4_X7IDx
          of
          { (# ipv6_X9hbL, ipv7_X9hbN #) ->
          case GHC.Foreign.$wpeekCString
                 GHC.IO.Encoding.UTF8.utf8 ipv7_X9hbN ipv6_X9hbL
          of
          { (# ipv8_X7IDQ, ipv9_X7IDT #) ->
          case readAddrOffAddr#
                 @ RealWorld (plusAddr# ipv1_i9h9O 24#) 0# ipv8_X7IDQ
          of
          { (# ipv10_X9hbY, ipv11_X9hc0 #) ->
          case GHC.Foreign.$wpeekCString
                 GHC.IO.Encoding.UTF8.utf8 ipv11_X9hc0 ipv10_X9hbY
          of
          { (# ipv12_X7IE9, ipv13_X7IEc #) ->
          case readAddrOffAddr#
                 @ RealWorld (plusAddr# ww_sa1ev 16#) 0# ipv12_X7IE9
          of
          { (# ipv14_X9hcb, ipv15_X9hcd #) ->
          join {
            $j_sa1b4 [Dmd=<L,1*U(U,U)>] :: (# State# RealWorld, [[Char]] #)
            [LclId[JoinId(0)]]
            $j_sa1b4
              = GHC.Stack.CCS.$wgo
                  ipv15_X9hcd
                  (GHC.Types.:
                     @ [Char]
                     (++
                        @ Char
                        ipv9_X7IDT
                        (GHC.Types.:
                           @ Char
                           lvl5_ra1if
                           (++
                              @ Char
                              ipv5_X7IDA
                              (GHC.Types.:
                                 @ Char
                                 lvl4_ra1ie
                                 (GHC.Types.:
                                    @ Char lvl3_ra1id (++ @ Char ipv13_X7IEc lvl6_ra1ig))))))
                     w_sa1er)
                  ipv14_X9hcb } in
          case eqString ipv9_X7IDT lvl1_ra1ib of {
            False -> jump $j_sa1b4;
            True ->
              case eqString ipv5_X7IDA lvl1_ra1ib of {
                False -> jump $j_sa1b4;
                True -> (# ipv14_X9hcb, w_sa1er #)
              }
          }
          }
          }
          }
          }
          }
          }
          }
          };
        1# -> (# w1_sa1es, w_sa1er #)
      }
end Rec }

-- RHS size: {terms: 10, types: 10, coercions: 0, joins: 0/0}
GHC.Stack.CCS.ccsToStrings2 [InlPrag=NOUSERINLINE[0]]
  :: Ptr CostCentreStack
     -> [[Char]] -> State# RealWorld -> (# State# RealWorld, [[Char]] #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sa1eq [Occ=Once!] :: Ptr CostCentreStack)
                 (w1_sa1er [Occ=Once] :: [[Char]])
                 (w2_sa1es [Occ=Once] :: State# RealWorld) ->
                 case w_sa1eq of { Ptr ww1_sa1ev [Occ=Once] ->
                 GHC.Stack.CCS.$wgo ww1_sa1ev w1_sa1er w2_sa1es
                 }}]
GHC.Stack.CCS.ccsToStrings2
  = \ (w_sa1eq :: Ptr CostCentreStack)
      (w1_sa1er :: [[Char]])
      (w2_sa1es :: State# RealWorld) ->
      case w_sa1eq of { Ptr ww1_sa1ev ->
      GHC.Stack.CCS.$wgo ww1_sa1ev w1_sa1er w2_sa1es
      }

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
GHC.Stack.CCS.ccsToStrings1
  :: Ptr CostCentreStack
     -> State# RealWorld -> (# State# RealWorld, [[Char]] #)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ccs0_aa10I [Occ=Once] :: Ptr CostCentreStack)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 GHC.Stack.CCS.ccsToStrings2
                   ccs0_aa10I (GHC.Types.[] @ [Char]) eta_B1}]
GHC.Stack.CCS.ccsToStrings1
  = \ (ccs0_aa10I :: Ptr CostCentreStack)
      (eta_B1 :: State# RealWorld) ->
      case ccs0_aa10I of { Ptr ww1_sa1ev ->
      GHC.Stack.CCS.$wgo ww1_sa1ev (GHC.Types.[] @ [Char]) eta_B1
      }

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
ccsToStrings :: Ptr CostCentreStack -> IO [String]
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.ccsToStrings1
               `cast` (<Ptr CostCentreStack>_R
                       ->_R Sym (GHC.Types.N:IO[0] <[[Char]]>_R)
                       :: (Ptr CostCentreStack
                           -> State# RealWorld -> (# State# RealWorld, [[Char]] #) :: *)
                          ~R# (Ptr CostCentreStack -> IO [[Char]] :: *))}]
ccsToStrings
  = GHC.Stack.CCS.ccsToStrings1
    `cast` (<Ptr CostCentreStack>_R
            ->_R Sym (GHC.Types.N:IO[0] <[[Char]]>_R)
            :: (Ptr CostCentreStack
                -> State# RealWorld -> (# State# RealWorld, [[Char]] #) :: *)
               ~R# (Ptr CostCentreStack -> IO [[Char]] :: *))

-- RHS size: {terms: 12, types: 20, coercions: 0, joins: 0/0}
GHC.Stack.CCS.whoCreated1
  :: forall a.
     a -> State# RealWorld -> (# State# RealWorld, [String] #)
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_aa15q)
                 (obj_aa10R [Occ=Once] :: a_aa15q)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case getCCSOf# @ a_aa15q @ RealWorld obj_aa10R s_i7IAv of
                 { (# s'_sa1as [Occ=Once], addr_sa1at [Occ=Once] #) ->
                 GHC.Stack.CCS.ccsToStrings2
                   (GHC.Ptr.Ptr @ CostCentreStack addr_sa1at)
                   (GHC.Types.[] @ [Char])
                   s'_sa1as
                 }}]
GHC.Stack.CCS.whoCreated1
  = \ (@ a_aa15q)
      (obj_aa10R :: a_aa15q)
      (s_i7IAv :: State# RealWorld) ->
      case getCCSOf# @ a_aa15q @ RealWorld obj_aa10R s_i7IAv of
      { (# s'_sa1gd, addr_sa1ge #) ->
      GHC.Stack.CCS.$wgo addr_sa1ge (GHC.Types.[] @ [Char]) s'_sa1gd
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
whoCreated :: forall a. a -> IO [String]
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.whoCreated1
               `cast` (forall (a :: <*>_N).
                       <a>_R ->_R Sym (GHC.Types.N:IO[0] <[String]>_R)
                       :: (forall a.
                           a -> State# RealWorld -> (# State# RealWorld, [String] #) :: *)
                          ~R# (forall a. a -> IO [String] :: *))}]
whoCreated
  = GHC.Stack.CCS.whoCreated1
    `cast` (forall (a :: <*>_N).
            <a>_R ->_R Sym (GHC.Types.N:IO[0] <[String]>_R)
            :: (forall a.
                a -> State# RealWorld -> (# State# RealWorld, [String] #) :: *)
               ~R# (forall a. a -> IO [String] :: *))

-- RHS size: {terms: 10, types: 17, coercions: 0, joins: 0/0}
GHC.Stack.CCS.currentCallStack1
  :: State# RealWorld -> (# State# RealWorld, [String] #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case getCurrentCCS# @ () @ RealWorld GHC.Tuple.() s_i7IAv of
                 { (# s'_sa1aA [Occ=Once], addr_sa1aB [Occ=Once] #) ->
                 GHC.Stack.CCS.ccsToStrings2
                   (GHC.Ptr.Ptr @ CostCentreStack addr_sa1aB)
                   (GHC.Types.[] @ [Char])
                   s'_sa1aA
                 }}]
GHC.Stack.CCS.currentCallStack1
  = \ (s_i7IAv :: State# RealWorld) ->
      case getCurrentCCS# @ () @ RealWorld GHC.Tuple.() s_i7IAv of
      { (# s'_sa1gh, addr_sa1gi #) ->
      GHC.Stack.CCS.$wgo addr_sa1gi (GHC.Types.[] @ [Char]) s'_sa1gh
      }

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
currentCallStack :: IO [String]
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Stack.CCS.currentCallStack1
               `cast` (Sym (GHC.Types.N:IO[0] <[String]>_R)
                       :: (State# RealWorld -> (# State# RealWorld, [String] #) :: *)
                          ~R# (IO [String] :: *))}]
currentCallStack
  = GHC.Stack.CCS.currentCallStack1
    `cast` (Sym (GHC.Types.N:IO[0] <[String]>_R)
            :: (State# RealWorld -> (# State# RealWorld, [String] #) :: *)
               ~R# (IO [String] :: *))


