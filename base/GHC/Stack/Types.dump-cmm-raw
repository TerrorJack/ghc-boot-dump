
==================== Raw Cmm ====================
2018-03-16 15:54:39.092605524 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:54:39.098682253 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c==_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c==_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c==_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c2pl: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2pp; else goto c2pq;
       c2pp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2pq: // global
           I64[Sp - 16] = block_c2pi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2r7; else goto c2pj;
       u2r7: // global
           call _c2pi(R1) args: 0, res: 0, upd: 0;
       c2pj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.$fEqSrcLoc_$c==_info" {
     GHC.Stack.Types.$fEqSrcLoc_$c==_info:
         const GHC.Stack.Types.$fEqSrcLoc_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2pi() //  [R1]
         { []
         }
     {offset
       c2pi: // global
           I64[Sp - 48] = block_c2po_info;
           _s2ad::P64 = P64[R1 + 7];
           _s2ae::P64 = P64[R1 + 15];
           _s2af::P64 = P64[R1 + 23];
           _s2ag::P64 = P64[R1 + 31];
           _s2ah::P64 = P64[R1 + 39];
           _s2ai::P64 = P64[R1 + 47];
           _s2aj::P64 = P64[R1 + 55];
           R1 = P64[Sp + 8];
           P64[Sp - 40] = _s2af::P64;
           P64[Sp - 32] = _s2ag::P64;
           P64[Sp - 24] = _s2ah::P64;
           P64[Sp - 16] = _s2ai::P64;
           P64[Sp - 8] = _s2aj::P64;
           P64[Sp] = _s2ae::P64;
           P64[Sp + 8] = _s2ad::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2r6; else goto c2ps;
       u2r6: // global
           call _c2po(R1) args: 0, res: 0, upd: 0;
       c2ps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2pi_info" {
     block_c2pi_info:
         const _c2pi;
         const 1;
         const 30;
 },
 _c2po() //  [R1]
         { []
         }
     {offset
       c2po: // global
           I64[Sp - 40] = block_c2pw_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 56];
           P64[Sp - 32] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 56] = P64[R1 + 15];
           Sp = Sp - 40;
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2po_info" {
     block_c2po_info:
         const _c2po;
         const 7;
         const 30;
 },
 _c2pw() //  [R1]
         { []
         }
     {offset
       c2pw: // global
           if (R1 & 7 == 1) goto u2r0; else goto c2pI;
       u2r0: // global
           Sp = Sp + 104;
           call _c2qV() args: 0, res: 0, upd: 0;
       c2pI: // global
           I64[Sp] = block_c2pG_info;
           R3 = P64[Sp + 96];
           R2 = P64[Sp + 88];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2pw_info" {
     block_c2pw_info:
         const _c2pw;
         const 12;
         const 30;
 },
 _c2pG() //  [R1]
         { []
         }
     {offset
       c2pG: // global
           if (R1 & 7 == 1) goto u2r1; else goto c2pT;
       u2r1: // global
           Sp = Sp + 104;
           call _c2qV() args: 0, res: 0, upd: 0;
       c2pT: // global
           I64[Sp] = block_c2pR_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2pG_info" {
     block_c2pG_info:
         const _c2pG;
         const 196620;
         const 30;
 },
 _c2pR() //  [R1]
         { []
         }
     {offset
       c2pR: // global
           if (R1 & 7 == 1) goto u2r2; else goto c2q9;
       u2r2: // global
           Sp = Sp + 104;
           call _c2qV() args: 0, res: 0, upd: 0;
       c2q9: // global
           I64[Sp] = block_c2q2_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2ra; else goto c2q3;
       u2ra: // global
           call _c2q2(R1) args: 0, res: 0, upd: 0;
       c2q3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2pR_info" {
     block_c2pR_info:
         const _c2pR;
         const 199692;
         const 30;
 },
 _c2q2() //  [R1]
         { []
         }
     {offset
       c2q2: // global
           _s2ao::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2q7_info;
           _s2aw::I64 = I64[R1 + 7];
           R1 = _s2ao::P64;
           I64[Sp + 96] = _s2aw::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2rc; else goto c2qb;
       u2rc: // global
           call _c2q7(R1) args: 0, res: 0, upd: 0;
       c2qb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2q2_info" {
     block_c2q2_info:
         const _c2q2;
         const 203788;
         const 30;
 },
 _c2q7() //  [R1]
         { []
         }
     {offset
       c2q7: // global
           if (I64[Sp + 88] == I64[R1 + 7]) goto c2qs; else goto u2r3;
       c2qs: // global
           I64[Sp] = block_c2qm_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2rd; else goto c2qn;
       u2rd: // global
           call _c2qm(R1) args: 0, res: 0, upd: 0;
       c2qn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2r3: // global
           Sp = Sp + 96;
           call _c2qV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2q7_info" {
     block_c2q7_info:
         const _c2q7;
         const 101899;
         const 30;
 },
 _c2qm() //  [R1]
         { []
         }
     {offset
       c2qm: // global
           _s2ap::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2qr_info;
           _s2aB::I64 = I64[R1 + 7];
           R1 = _s2ap::P64;
           I64[Sp + 88] = _s2aB::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2rf; else goto c2qu;
       u2rf: // global
           call _c2qr(R1) args: 0, res: 0, upd: 0;
       c2qu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2qm_info" {
     block_c2qm_info:
         const _c2qm;
         const 105995;
         const 30;
 },
 _c2qr() //  [R1]
         { []
         }
     {offset
       c2qr: // global
           if (I64[Sp + 80] == I64[R1 + 7]) goto c2qL; else goto u2r4;
       c2qL: // global
           I64[Sp] = block_c2qF_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2rg; else goto c2qG;
       u2rg: // global
           call _c2qF(R1) args: 0, res: 0, upd: 0;
       c2qG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2r4: // global
           Sp = Sp + 88;
           call _c2qV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2qr_info" {
     block_c2qr_info:
         const _c2qr;
         const 53002;
         const 30;
 },
 _c2qF() //  [R1]
         { []
         }
     {offset
       c2qF: // global
           _s2aq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2qK_info;
           _s2aG::I64 = I64[R1 + 7];
           R1 = _s2aq::P64;
           I64[Sp + 80] = _s2aG::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2ri; else goto c2qN;
       u2ri: // global
           call _c2qK(R1) args: 0, res: 0, upd: 0;
       c2qN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2qF_info" {
     block_c2qF_info:
         const _c2qF;
         const 57098;
         const 30;
 },
 _c2qK() //  [R1]
         { []
         }
     {offset
       c2qK: // global
           if (I64[Sp + 72] == I64[R1 + 7]) goto c2qW; else goto u2r5;
       c2qW: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 80;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2r5: // global
           Sp = Sp + 80;
           call _c2qV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2qK_info" {
     block_c2qK_info:
         const _c2qK;
         const 28553;
         const 30;
 },
 _c2qV() //  []
         { []
         }
     {offset
       c2qV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.127182817 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c/=_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c/=_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2sw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2sx; else goto c2sy;
       c2sx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2sy: // global
           I64[Sp - 8] = block_c2sq_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.$fEqSrcLoc_$c==_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.$fEqSrcLoc_$c/=_info" {
     GHC.Stack.Types.$fEqSrcLoc_$c/=_info:
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2sq() //  [R1]
         { []
         }
     {offset
       c2sq: // global
           if (R1 & 7 == 1) goto c2st; else goto c2su;
       c2st: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2su: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2sq_info" {
     block_c2sq_info:
         const _c2sq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.13206025 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_closure" {
     GHC.Stack.Types.$fEqSrcLoc_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Stack.Types.$fEqSrcLoc_$c==_closure+2;
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.134393571 UTC

[section ""data" . GHC.Stack.Types.srcLocEndCol_closure" {
     GHC.Stack.Types.srcLocEndCol_closure:
         const GHC.Stack.Types.srcLocEndCol_info;
 },
 GHC.Stack.Types.srcLocEndCol_entry() //  [R2]
         { []
         }
     {offset
       c2sZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2t0; else goto c2t1;
       c2t0: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2t1: // global
           I64[Sp - 8] = block_c2sW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2t5; else goto c2sX;
       u2t5: // global
           call _c2sW(R1) args: 0, res: 0, upd: 0;
       c2sX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocEndCol_info" {
     GHC.Stack.Types.srcLocEndCol_info:
         const GHC.Stack.Types.srcLocEndCol_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2sW() //  [R1]
         { []
         }
     {offset
       c2sW: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2sW_info" {
     block_c2sW_info:
         const _c2sW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.139646372 UTC

[section ""data" . GHC.Stack.Types.srcLocEndLine_closure" {
     GHC.Stack.Types.srcLocEndLine_closure:
         const GHC.Stack.Types.srcLocEndLine_info;
 },
 GHC.Stack.Types.srcLocEndLine_entry() //  [R2]
         { []
         }
     {offset
       c2to: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2tp; else goto c2tq;
       c2tp: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2tq: // global
           I64[Sp - 8] = block_c2tl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2tu; else goto c2tm;
       u2tu: // global
           call _c2tl(R1) args: 0, res: 0, upd: 0;
       c2tm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocEndLine_info" {
     GHC.Stack.Types.srcLocEndLine_info:
         const GHC.Stack.Types.srcLocEndLine_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2tl() //  [R1]
         { []
         }
     {offset
       c2tl: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2tl_info" {
     block_c2tl_info:
         const _c2tl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.145435898 UTC

[section ""data" . GHC.Stack.Types.srcLocStartCol_closure" {
     GHC.Stack.Types.srcLocStartCol_closure:
         const GHC.Stack.Types.srcLocStartCol_info;
 },
 GHC.Stack.Types.srcLocStartCol_entry() //  [R2]
         { []
         }
     {offset
       c2tN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2tO; else goto c2tP;
       c2tO: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2tP: // global
           I64[Sp - 8] = block_c2tK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2tT; else goto c2tL;
       u2tT: // global
           call _c2tK(R1) args: 0, res: 0, upd: 0;
       c2tL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocStartCol_info" {
     GHC.Stack.Types.srcLocStartCol_info:
         const GHC.Stack.Types.srcLocStartCol_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2tK() //  [R1]
         { []
         }
     {offset
       c2tK: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2tK_info" {
     block_c2tK_info:
         const _c2tK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.150768846 UTC

[section ""data" . GHC.Stack.Types.srcLocStartLine_closure" {
     GHC.Stack.Types.srcLocStartLine_closure:
         const GHC.Stack.Types.srcLocStartLine_info;
 },
 GHC.Stack.Types.srcLocStartLine_entry() //  [R2]
         { []
         }
     {offset
       c2uc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ud; else goto c2ue;
       c2ud: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ue: // global
           I64[Sp - 8] = block_c2u9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ui; else goto c2ua;
       u2ui: // global
           call _c2u9(R1) args: 0, res: 0, upd: 0;
       c2ua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocStartLine_info" {
     GHC.Stack.Types.srcLocStartLine_info:
         const GHC.Stack.Types.srcLocStartLine_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2u9() //  [R1]
         { []
         }
     {offset
       c2u9: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2u9_info" {
     block_c2u9_info:
         const _c2u9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.156094632 UTC

[section ""data" . GHC.Stack.Types.srcLocFile_closure" {
     GHC.Stack.Types.srcLocFile_closure:
         const GHC.Stack.Types.srcLocFile_info;
 },
 GHC.Stack.Types.srcLocFile_entry() //  [R2]
         { []
         }
     {offset
       c2uB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2uC; else goto c2uD;
       c2uC: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2uD: // global
           I64[Sp - 8] = block_c2uy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2uH; else goto c2uz;
       u2uH: // global
           call _c2uy(R1) args: 0, res: 0, upd: 0;
       c2uz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocFile_info" {
     GHC.Stack.Types.srcLocFile_info:
         const GHC.Stack.Types.srcLocFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2uy() //  [R1]
         { []
         }
     {offset
       c2uy: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2uy_info" {
     block_c2uy_info:
         const _c2uy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.1613109 UTC

[section ""data" . GHC.Stack.Types.srcLocModule_closure" {
     GHC.Stack.Types.srcLocModule_closure:
         const GHC.Stack.Types.srcLocModule_info;
 },
 GHC.Stack.Types.srcLocModule_entry() //  [R2]
         { []
         }
     {offset
       c2v0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2v1; else goto c2v2;
       c2v1: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocModule_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2v2: // global
           I64[Sp - 8] = block_c2uX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2v6; else goto c2uY;
       u2v6: // global
           call _c2uX(R1) args: 0, res: 0, upd: 0;
       c2uY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocModule_info" {
     GHC.Stack.Types.srcLocModule_info:
         const GHC.Stack.Types.srcLocModule_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2uX() //  [R1]
         { []
         }
     {offset
       c2uX: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2uX_info" {
     block_c2uX_info:
         const _c2uX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.166757368 UTC

[section ""data" . GHC.Stack.Types.srcLocPackage_closure" {
     GHC.Stack.Types.srcLocPackage_closure:
         const GHC.Stack.Types.srcLocPackage_info;
 },
 GHC.Stack.Types.srcLocPackage_entry() //  [R2]
         { []
         }
     {offset
       c2vp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2vq; else goto c2vr;
       c2vq: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocPackage_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2vr: // global
           I64[Sp - 8] = block_c2vm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2vv; else goto c2vn;
       u2vv: // global
           call _c2vm(R1) args: 0, res: 0, upd: 0;
       c2vn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocPackage_info" {
     GHC.Stack.Types.srcLocPackage_info:
         const GHC.Stack.Types.srcLocPackage_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2vm() //  [R1]
         { []
         }
     {offset
       c2vm: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2vm_info" {
     block_c2vm_info:
         const _c2vm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.173158339 UTC

[section ""data" . GHC.Stack.Types.getCallStack_closure" {
     GHC.Stack.Types.getCallStack_closure:
         const GHC.Stack.Types.getCallStack_info;
 },
 sat_s2bU_entry() //  [R1]
         { []
         }
     {offset
       c2vV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2vW; else goto c2vX;
       c2vW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2vX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bU_info" {
     sat_s2bU_info:
         const sat_s2bU_entry;
         const 1;
         const 16;
 },
 GHC.Stack.Types.getCallStack_entry() //  [R2]
         { []
         }
     {offset
       c2w3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2w4; else goto u2wh;
       c2w4: // global
           R2 = R2;
           R1 = GHC.Stack.Types.getCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u2wh: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c2vI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.getCallStack_info" {
     GHC.Stack.Types.getCallStack_info:
         const GHC.Stack.Types.getCallStack_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2vI() //  []
         { []
         }
     {offset
       c2vI: // global
           _s2bO::P64 = P64[Sp];
           I64[Sp] = block_c2vL_info;
           R1 = _s2bO::P64;
           if (R1 & 7 != 0) goto u2wj; else goto c2vM;
       u2wj: // global
           call _c2vL(R1) args: 0, res: 0, upd: 0;
       c2vM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2vL() //  [R1]
         { []
         }
     {offset
       c2vL: // global
           _c2w2::P64 = R1 & 7;
           if (_c2w2::P64 < 3) goto u2wg; else goto c2w1;
       u2wg: // global
           if (_c2w2::P64 < 2) goto c2vZ; else goto c2w0;
       c2vZ: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2w0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2wc; else goto c2wb;
       c2wc: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2wb: // global
           _s2bQ::P64 = P64[R1 + 6];
           _s2bR::P64 = P64[R1 + 14];
           _s2bS::P64 = P64[R1 + 22];
           I64[Hp - 64] = sat_s2bU_info;
           P64[Hp - 48] = _s2bS::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bQ::P64;
           P64[Hp - 24] = _s2bR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2w1: // global
           P64[Sp] = P64[R1 + 5];
           call _c2vI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2vL_info" {
     block_c2vL_info:
         const _c2vL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.182731022 UTC

[section ""data" . GHC.Stack.Types.fromCallSiteList_closure" {
     GHC.Stack.Types.fromCallSiteList_closure:
         const GHC.Stack.Types.fromCallSiteList_info;
 },
 sat_s2c3_entry() //  [R1]
         { []
         }
     {offset
       c2x0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2x1; else goto c2x2;
       c2x1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2x2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2c3_info" {
     sat_s2c3_info:
         const sat_s2c3_entry;
         const 1;
         const 16;
 },
 GHC.Stack.Types.fromCallSiteList_entry() //  [R2]
         { []
         }
     {offset
       c2x7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2x8; else goto c2x9;
       c2x8: // global
           R2 = R2;
           R1 = GHC.Stack.Types.fromCallSiteList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2x9: // global
           I64[Sp - 8] = block_c2wL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2xi; else goto c2wM;
       u2xi: // global
           call _c2wL(R1) args: 0, res: 0, upd: 0;
       c2wM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.fromCallSiteList_info" {
     GHC.Stack.Types.fromCallSiteList_info:
         const GHC.Stack.Types.fromCallSiteList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2wL() //  [R1]
         { []
         }
     {offset
       c2wL: // global
           if (R1 & 7 == 1) goto c2x4; else goto c2x5;
       c2x4: // global
           R1 = GHC.Stack.Types.EmptyCallStack_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2x5: // global
           I64[Sp - 8] = block_c2wR_info;
           _s2bZ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2bZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2xh; else goto c2wS;
       u2xh: // global
           call _c2wR(R1) args: 0, res: 0, upd: 0;
       c2wS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2wL_info" {
     block_c2wL_info:
         const _c2wL;
         const 0;
         const 30;
 },
 _c2wR() //  [R1]
         { []
         }
     {offset
       c2wR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2xg; else goto c2xf;
       c2xg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2xf: // global
           _s2c1::P64 = P64[R1 + 7];
           _s2c2::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2c3_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = _s2c1::P64;
           P64[Hp - 8] = _s2c2::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2wR_info" {
     block_c2wR_info:
         const _c2wR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.192497852 UTC

[section ""data" . GHC.Stack.Types.pushCallStack_closure" {
     GHC.Stack.Types.pushCallStack_closure:
         const GHC.Stack.Types.pushCallStack_info;
 },
 GHC.Stack.Types.pushCallStack_entry() //  [R2, R3]
         { []
         }
     {offset
       c2xN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2xO; else goto c2xP;
       c2xO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.pushCallStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2xP: // global
           I64[Sp - 16] = block_c2xK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ya; else goto c2xL;
       u2ya: // global
           call _c2xK(R1) args: 0, res: 0, upd: 0;
       c2xL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.pushCallStack_info" {
     GHC.Stack.Types.pushCallStack_info:
         const GHC.Stack.Types.pushCallStack_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2xK() //  [R1]
         { []
         }
     {offset
       c2xK: // global
           I64[Sp - 8] = block_c2xS_info;
           _s2c7::P64 = P64[R1 + 7];
           _s2c8::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2c8::P64;
           P64[Sp + 8] = _s2c7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2y9; else goto c2xU;
       u2y9: // global
           call _c2xS(R1) args: 0, res: 0, upd: 0;
       c2xU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2xK_info" {
     block_c2xK_info:
         const _c2xK;
         const 1;
         const 30;
 },
 _c2xS() //  [R1]
         { []
         }
     {offset
       c2xS: // global
           if (R1 & 7 == 3) goto c2y7; else goto c2y0;
       c2y7: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2y0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2y3; else goto c2y2;
       c2y3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2y2: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2xS_info" {
     block_c2xS_info:
         const _c2xS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.199597113 UTC

[section ""data" . GHC.Stack.Types.emptyCallStack_closure" {
     GHC.Stack.Types.emptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.201727093 UTC

[section ""data" . GHC.Stack.Types.freezeCallStack_closure" {
     GHC.Stack.Types.freezeCallStack_closure:
         const GHC.Stack.Types.freezeCallStack_info;
 },
 GHC.Stack.Types.freezeCallStack_entry() //  [R2]
         { []
         }
     {offset
       c2yB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2yF; else goto c2yE;
       c2yF: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.freezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2yE: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.freezeCallStack_info" {
     GHC.Stack.Types.freezeCallStack_info:
         const GHC.Stack.Types.freezeCallStack_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.205013772 UTC

[section ""cstring" . GHC.Stack.Types.$trModule4_bytes" {
     GHC.Stack.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.206894625 UTC

[section ""data" . GHC.Stack.Types.$trModule3_closure" {
     GHC.Stack.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.208411477 UTC

[section ""cstring" . GHC.Stack.Types.$trModule2_bytes" {
     GHC.Stack.Types.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107,46,84,121,112,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.210293826 UTC

[section ""data" . GHC.Stack.Types.$trModule1_closure" {
     GHC.Stack.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.212808847 UTC

[section ""data" . GHC.Stack.Types.$trModule_closure" {
     GHC.Stack.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.Types.$trModule3_closure+1;
         const GHC.Stack.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.214562702 UTC

[section ""data" . $krep_r29X_closure" {
     $krep_r29X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.216423643 UTC

[section ""data" . $krep1_r29Y_closure" {
     $krep1_r29Y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.218135508 UTC

[section ""data" . $krep2_r29Z_closure" {
     $krep2_r29Z_closure:
         const :_con_info;
         const $krep1_r29Y_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.219800236 UTC

[section ""data" . $krep3_r2a0_closure" {
     $krep3_r2a0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r29Z_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.221686141 UTC

[section ""cstring" . GHC.Stack.Types.$tcSrcLoc2_bytes" {
     GHC.Stack.Types.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.223194189 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc1_closure" {
     GHC.Stack.Types.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcSrcLoc2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.225159647 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc_closure" {
     GHC.Stack.Types.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11659135446504247116;
         const 7996606469851030013;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.226972382 UTC

[section ""data" . $krep4_r2a1_closure" {
     $krep4_r2a1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.228664765 UTC

[section ""data" . $krep5_r2a2_closure" {
     $krep5_r2a2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep4_r2a1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.230689338 UTC

[section ""data" . $krep6_r2a3_closure" {
     $krep6_r2a3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep5_r2a2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.232202797 UTC

[section ""data" . $krep7_r2a4_closure" {
     $krep7_r2a4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep6_r2a3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.234026436 UTC

[section ""data" . $krep8_r2a5_closure" {
     $krep8_r2a5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep7_r2a4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.235579333 UTC

[section ""data" . $krep9_r2a6_closure" {
     $krep9_r2a6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep8_r2a5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.237150474 UTC

[section ""data" . $krep10_r2a7_closure" {
     $krep10_r2a7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep9_r2a6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.238998765 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc1_closure" {
     GHC.Stack.Types.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep10_r2a7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.240520412 UTC

[section ""cstring" . GHC.Stack.Types.$tc'SrcLoc3_bytes" {
     GHC.Stack.Types.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.242164836 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc2_closure" {
     GHC.Stack.Types.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'SrcLoc3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.244025903 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc_closure" {
     GHC.Stack.Types.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc2_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc1_closure+4;
         const 13956426263269302848;
         const 15330088913444129695;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.24639226 UTC

[section ""cstring" . GHC.Stack.Types.$tcCallStack2_bytes" {
     GHC.Stack.Types.$tcCallStack2_bytes:
         I8[] [67,97,108,108,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.248255397 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack1_closure" {
     GHC.Stack.Types.$tcCallStack1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcCallStack2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.250077615 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack_closure" {
     GHC.Stack.Types.$tcCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcCallStack1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9079156173149315555;
         const 7592677015683705484;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.251836991 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack1_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcCallStack_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.253800185 UTC

[section ""cstring" . GHC.Stack.Types.$tc'EmptyCallStack3_bytes" {
     GHC.Stack.Types.$tc'EmptyCallStack3_bytes:
         I8[] [39,69,109,112,116,121,67,97,108,108,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.25547585 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack2_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.258473003 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack2_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 4745696424279029534;
         const 621383300069717314;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.260297957 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack1_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.262074971 UTC

[section ""cstring" . GHC.Stack.Types.$tc'FreezeCallStack3_bytes" {
     GHC.Stack.Types.$tc'FreezeCallStack3_bytes:
         I8[] [39,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.264097196 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack2_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'FreezeCallStack3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.265846334 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack2_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 13172881767820002692;
         const 8012125741085098641;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.267812712 UTC

[section ""data" . $krep11_r2a8_closure" {
     $krep11_r2a8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r2a1_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.269471196 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack1_closure" {
     GHC.Stack.Types.$tc'PushCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep11_r2a8_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.27125617 UTC

[section ""cstring" . GHC.Stack.Types.$tc'PushCallStack3_bytes" {
     GHC.Stack.Types.$tc'PushCallStack3_bytes:
         I8[] [39,80,117,115,104,67,97,108,108,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.272845139 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack2_closure" {
     GHC.Stack.Types.$tc'PushCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'PushCallStack3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.276610341 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack_closure" {
     GHC.Stack.Types.$tc'PushCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack2_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack1_closure+4;
         const 11257300383724147409;
         const 9589391422293138004;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.278681644 UTC

[section ""data" . GHC.Stack.Types.EmptyCallStack_closure" {
     GHC.Stack.Types.EmptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.281029715 UTC

[section ""data" . GHC.Stack.Types.PushCallStack_closure" {
     GHC.Stack.Types.PushCallStack_closure:
         const GHC.Stack.Types.PushCallStack_info;
 },
 GHC.Stack.Types.PushCallStack_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2zu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2zy; else goto c2zx;
       c2zy: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.PushCallStack_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2zx: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.PushCallStack_info" {
     GHC.Stack.Types.PushCallStack_info:
         const GHC.Stack.Types.PushCallStack_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.285057948 UTC

[section ""data" . GHC.Stack.Types.FreezeCallStack_closure" {
     GHC.Stack.Types.FreezeCallStack_closure:
         const GHC.Stack.Types.FreezeCallStack_info;
 },
 GHC.Stack.Types.FreezeCallStack_entry() //  [R2]
         { []
         }
     {offset
       c2zJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2zN; else goto c2zM;
       c2zN: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.FreezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2zM: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.FreezeCallStack_info" {
     GHC.Stack.Types.FreezeCallStack_info:
         const GHC.Stack.Types.FreezeCallStack_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.289292012 UTC

[section ""data" . GHC.Stack.Types.SrcLoc_closure" {
     GHC.Stack.Types.SrcLoc_closure:
         const GHC.Stack.Types.SrcLoc_info;
 },
 GHC.Stack.Types.SrcLoc_slow() //  [R1]
         { []
         }
     {offset
       c2zU: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stack.Types.SrcLoc_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Stack.Types.SrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2zZ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2A3; else goto c2A2;
       c2A3: // global
           HpAlloc = 64;
           R1 = GHC.Stack.Types.SrcLoc_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2A2: // global
           I64[Hp - 56] = GHC.Stack.Types.SrcLoc_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.SrcLoc_info" {
     GHC.Stack.Types.SrcLoc_info:
         const GHC.Stack.Types.SrcLoc_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Stack.Types.SrcLoc_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.294237623 UTC

[section ""cstring" . i2p7_str" {
     i2p7_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,69,109,112,116,121,67,97,108,108,83,116,97,99,107]
 },
 GHC.Stack.Types.EmptyCallStack_con_entry() //  [R1]
         { []
         }
     {offset
       c2Ad: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.EmptyCallStack_con_info" {
     GHC.Stack.Types.EmptyCallStack_con_info:
         const GHC.Stack.Types.EmptyCallStack_con_entry;
         const 4294967296;
         const 3;
         const i2p7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.298063568 UTC

[section ""cstring" . i2p9_str" {
     i2p9_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,80,117,115,104,67,97,108,108,83,116,97,99,107]
 },
 GHC.Stack.Types.PushCallStack_con_entry() //  [R1]
         { []
         }
     {offset
       c2Aj: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.PushCallStack_con_info" {
     GHC.Stack.Types.PushCallStack_con_info:
         const GHC.Stack.Types.PushCallStack_con_entry;
         const 3;
         const 4294967297;
         const i2p9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.301703429 UTC

[section ""cstring" . i2pb_str" {
     i2pb_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]
 },
 GHC.Stack.Types.FreezeCallStack_con_entry() //  [R1]
         { []
         }
     {offset
       c2Ap: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.FreezeCallStack_con_info" {
     GHC.Stack.Types.FreezeCallStack_con_info:
         const GHC.Stack.Types.FreezeCallStack_con_entry;
         const 1;
         const 8589934594;
         const i2pb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.305614264 UTC

[section ""cstring" . i2pd_str" {
     i2pd_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,83,114,99,76,111,99]
 },
 GHC.Stack.Types.SrcLoc_con_entry() //  [R1]
         { []
         }
     {offset
       c2Av: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.SrcLoc_con_info" {
     GHC.Stack.Types.SrcLoc_con_info:
         const GHC.Stack.Types.SrcLoc_con_entry;
         const 7;
         const 1;
         const i2pd_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.308885511 UTC

[section ""relreadonly" . S2iF_srt" { S2iF_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.706659289 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:54:39.713657583 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c==_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c==_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c==_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c2CK: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2CO; else goto c2CP;
       c2CO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2CP: // global
           I64[Sp - 16] = block_c2CH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2Ew; else goto c2CI;
       u2Ew: // global
           call _c2CH(R1) args: 0, res: 0, upd: 0;
       c2CI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.$fEqSrcLoc_$c==_info" {
     GHC.Stack.Types.$fEqSrcLoc_$c==_info:
         const GHC.Stack.Types.$fEqSrcLoc_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2CH() //  [R1]
         { []
         }
     {offset
       c2CH: // global
           I64[Sp - 48] = block_c2CN_info;
           _s2AF::P64 = P64[R1 + 7];
           _s2AG::P64 = P64[R1 + 15];
           _s2AH::P64 = P64[R1 + 23];
           _s2AI::P64 = P64[R1 + 31];
           _s2AJ::P64 = P64[R1 + 39];
           _s2AK::P64 = P64[R1 + 47];
           _s2AL::P64 = P64[R1 + 55];
           R1 = P64[Sp + 8];
           P64[Sp - 40] = _s2AH::P64;
           P64[Sp - 32] = _s2AI::P64;
           P64[Sp - 24] = _s2AJ::P64;
           P64[Sp - 16] = _s2AK::P64;
           P64[Sp - 8] = _s2AL::P64;
           P64[Sp] = _s2AG::P64;
           P64[Sp + 8] = _s2AF::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2Ev; else goto c2CR;
       u2Ev: // global
           call _c2CN(R1) args: 0, res: 0, upd: 0;
       c2CR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2CH_info" {
     block_c2CH_info:
         const _c2CH;
         const 1;
         const 30;
 },
 _c2CN() //  [R1]
         { []
         }
     {offset
       c2CN: // global
           I64[Sp - 40] = block_c2CV_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 56];
           P64[Sp - 32] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 56] = P64[R1 + 15];
           Sp = Sp - 40;
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2CN_info" {
     block_c2CN_info:
         const _c2CN;
         const 7;
         const 30;
 },
 _c2CV() //  [R1]
         { []
         }
     {offset
       c2CV: // global
           if (R1 & 7 == 1) goto u2Ep; else goto c2D7;
       u2Ep: // global
           Sp = Sp + 104;
           call _c2Ek() args: 0, res: 0, upd: 0;
       c2D7: // global
           I64[Sp] = block_c2D5_info;
           R3 = P64[Sp + 96];
           R2 = P64[Sp + 88];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2CV_info" {
     block_c2CV_info:
         const _c2CV;
         const 12;
         const 30;
 },
 _c2D5() //  [R1]
         { []
         }
     {offset
       c2D5: // global
           if (R1 & 7 == 1) goto u2Eq; else goto c2Di;
       u2Eq: // global
           Sp = Sp + 104;
           call _c2Ek() args: 0, res: 0, upd: 0;
       c2Di: // global
           I64[Sp] = block_c2Dg_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2D5_info" {
     block_c2D5_info:
         const _c2D5;
         const 196620;
         const 30;
 },
 _c2Dg() //  [R1]
         { []
         }
     {offset
       c2Dg: // global
           if (R1 & 7 == 1) goto u2Er; else goto c2Dy;
       u2Er: // global
           Sp = Sp + 104;
           call _c2Ek() args: 0, res: 0, upd: 0;
       c2Dy: // global
           I64[Sp] = block_c2Dr_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2Ez; else goto c2Ds;
       u2Ez: // global
           call _c2Dr(R1) args: 0, res: 0, upd: 0;
       c2Ds: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2Dg_info" {
     block_c2Dg_info:
         const _c2Dg;
         const 199692;
         const 30;
 },
 _c2Dr() //  [R1]
         { []
         }
     {offset
       c2Dr: // global
           _s2AQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2Dw_info;
           _s2AY::I64 = I64[R1 + 7];
           R1 = _s2AQ::P64;
           I64[Sp + 96] = _s2AY::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2EB; else goto c2DA;
       u2EB: // global
           call _c2Dw(R1) args: 0, res: 0, upd: 0;
       c2DA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2Dr_info" {
     block_c2Dr_info:
         const _c2Dr;
         const 203788;
         const 30;
 },
 _c2Dw() //  [R1]
         { []
         }
     {offset
       c2Dw: // global
           if (I64[Sp + 88] == I64[R1 + 7]) goto c2DR; else goto u2Es;
       c2DR: // global
           I64[Sp] = block_c2DL_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2EC; else goto c2DM;
       u2EC: // global
           call _c2DL(R1) args: 0, res: 0, upd: 0;
       c2DM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2Es: // global
           Sp = Sp + 96;
           call _c2Ek() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2Dw_info" {
     block_c2Dw_info:
         const _c2Dw;
         const 101899;
         const 30;
 },
 _c2DL() //  [R1]
         { []
         }
     {offset
       c2DL: // global
           _s2AR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2DQ_info;
           _s2B3::I64 = I64[R1 + 7];
           R1 = _s2AR::P64;
           I64[Sp + 88] = _s2B3::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2EE; else goto c2DT;
       u2EE: // global
           call _c2DQ(R1) args: 0, res: 0, upd: 0;
       c2DT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2DL_info" {
     block_c2DL_info:
         const _c2DL;
         const 105995;
         const 30;
 },
 _c2DQ() //  [R1]
         { []
         }
     {offset
       c2DQ: // global
           if (I64[Sp + 80] == I64[R1 + 7]) goto c2Ea; else goto u2Et;
       c2Ea: // global
           I64[Sp] = block_c2E4_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2EF; else goto c2E5;
       u2EF: // global
           call _c2E4(R1) args: 0, res: 0, upd: 0;
       c2E5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2Et: // global
           Sp = Sp + 88;
           call _c2Ek() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2DQ_info" {
     block_c2DQ_info:
         const _c2DQ;
         const 53002;
         const 30;
 },
 _c2E4() //  [R1]
         { []
         }
     {offset
       c2E4: // global
           _s2AS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2E9_info;
           _s2B8::I64 = I64[R1 + 7];
           R1 = _s2AS::P64;
           I64[Sp + 80] = _s2B8::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2EH; else goto c2Ec;
       u2EH: // global
           call _c2E9(R1) args: 0, res: 0, upd: 0;
       c2Ec: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2E4_info" {
     block_c2E4_info:
         const _c2E4;
         const 57098;
         const 30;
 },
 _c2E9() //  [R1]
         { []
         }
     {offset
       c2E9: // global
           if (I64[Sp + 72] == I64[R1 + 7]) goto c2El; else goto u2Eu;
       c2El: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 80;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2Eu: // global
           Sp = Sp + 80;
           call _c2Ek() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2E9_info" {
     block_c2E9_info:
         const _c2E9;
         const 28553;
         const 30;
 },
 _c2Ek() //  []
         { []
         }
     {offset
       c2Ek: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.740347353 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c/=_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c/=_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2G7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2G8; else goto c2G9;
       c2G8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2G9: // global
           I64[Sp - 8] = block_c2G1_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.$fEqSrcLoc_$c==_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.$fEqSrcLoc_$c/=_info" {
     GHC.Stack.Types.$fEqSrcLoc_$c/=_info:
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2G1() //  [R1]
         { []
         }
     {offset
       c2G1: // global
           if (R1 & 7 == 1) goto c2G4; else goto c2G5;
       c2G4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2G5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2G1_info" {
     block_c2G1_info:
         const _c2G1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.746273428 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_closure" {
     GHC.Stack.Types.$fEqSrcLoc_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Stack.Types.$fEqSrcLoc_$c==_closure+2;
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.74917338 UTC

[section ""data" . GHC.Stack.Types.srcLocEndCol_closure" {
     GHC.Stack.Types.srcLocEndCol_closure:
         const GHC.Stack.Types.srcLocEndCol_info;
 },
 GHC.Stack.Types.srcLocEndCol_entry() //  [R2]
         { []
         }
     {offset
       c2GD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2GE; else goto c2GF;
       c2GE: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2GF: // global
           I64[Sp - 8] = block_c2GA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2GJ; else goto c2GB;
       u2GJ: // global
           call _c2GA(R1) args: 0, res: 0, upd: 0;
       c2GB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocEndCol_info" {
     GHC.Stack.Types.srcLocEndCol_info:
         const GHC.Stack.Types.srcLocEndCol_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2GA() //  [R1]
         { []
         }
     {offset
       c2GA: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2GA_info" {
     block_c2GA_info:
         const _c2GA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.755723245 UTC

[section ""data" . GHC.Stack.Types.srcLocEndLine_closure" {
     GHC.Stack.Types.srcLocEndLine_closure:
         const GHC.Stack.Types.srcLocEndLine_info;
 },
 GHC.Stack.Types.srcLocEndLine_entry() //  [R2]
         { []
         }
     {offset
       c2H3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2H4; else goto c2H5;
       c2H4: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2H5: // global
           I64[Sp - 8] = block_c2H0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2H9; else goto c2H1;
       u2H9: // global
           call _c2H0(R1) args: 0, res: 0, upd: 0;
       c2H1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocEndLine_info" {
     GHC.Stack.Types.srcLocEndLine_info:
         const GHC.Stack.Types.srcLocEndLine_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2H0() //  [R1]
         { []
         }
     {offset
       c2H0: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2H0_info" {
     block_c2H0_info:
         const _c2H0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.762582425 UTC

[section ""data" . GHC.Stack.Types.srcLocStartCol_closure" {
     GHC.Stack.Types.srcLocStartCol_closure:
         const GHC.Stack.Types.srcLocStartCol_info;
 },
 GHC.Stack.Types.srcLocStartCol_entry() //  [R2]
         { []
         }
     {offset
       c2Ht: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2Hu; else goto c2Hv;
       c2Hu: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2Hv: // global
           I64[Sp - 8] = block_c2Hq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2Hz; else goto c2Hr;
       u2Hz: // global
           call _c2Hq(R1) args: 0, res: 0, upd: 0;
       c2Hr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocStartCol_info" {
     GHC.Stack.Types.srcLocStartCol_info:
         const GHC.Stack.Types.srcLocStartCol_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2Hq() //  [R1]
         { []
         }
     {offset
       c2Hq: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2Hq_info" {
     block_c2Hq_info:
         const _c2Hq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.768945077 UTC

[section ""data" . GHC.Stack.Types.srcLocStartLine_closure" {
     GHC.Stack.Types.srcLocStartLine_closure:
         const GHC.Stack.Types.srcLocStartLine_info;
 },
 GHC.Stack.Types.srcLocStartLine_entry() //  [R2]
         { []
         }
     {offset
       c2HT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2HU; else goto c2HV;
       c2HU: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2HV: // global
           I64[Sp - 8] = block_c2HQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2HZ; else goto c2HR;
       u2HZ: // global
           call _c2HQ(R1) args: 0, res: 0, upd: 0;
       c2HR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocStartLine_info" {
     GHC.Stack.Types.srcLocStartLine_info:
         const GHC.Stack.Types.srcLocStartLine_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2HQ() //  [R1]
         { []
         }
     {offset
       c2HQ: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2HQ_info" {
     block_c2HQ_info:
         const _c2HQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.775807138 UTC

[section ""data" . GHC.Stack.Types.srcLocFile_closure" {
     GHC.Stack.Types.srcLocFile_closure:
         const GHC.Stack.Types.srcLocFile_info;
 },
 GHC.Stack.Types.srcLocFile_entry() //  [R2]
         { []
         }
     {offset
       c2Ij: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2Ik; else goto c2Il;
       c2Ik: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2Il: // global
           I64[Sp - 8] = block_c2Ig_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2Ip; else goto c2Ih;
       u2Ip: // global
           call _c2Ig(R1) args: 0, res: 0, upd: 0;
       c2Ih: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocFile_info" {
     GHC.Stack.Types.srcLocFile_info:
         const GHC.Stack.Types.srcLocFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2Ig() //  [R1]
         { []
         }
     {offset
       c2Ig: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2Ig_info" {
     block_c2Ig_info:
         const _c2Ig;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.782783773 UTC

[section ""data" . GHC.Stack.Types.srcLocModule_closure" {
     GHC.Stack.Types.srcLocModule_closure:
         const GHC.Stack.Types.srcLocModule_info;
 },
 GHC.Stack.Types.srcLocModule_entry() //  [R2]
         { []
         }
     {offset
       c2IJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2IK; else goto c2IL;
       c2IK: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocModule_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2IL: // global
           I64[Sp - 8] = block_c2IG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2IP; else goto c2IH;
       u2IP: // global
           call _c2IG(R1) args: 0, res: 0, upd: 0;
       c2IH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocModule_info" {
     GHC.Stack.Types.srcLocModule_info:
         const GHC.Stack.Types.srcLocModule_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2IG() //  [R1]
         { []
         }
     {offset
       c2IG: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2IG_info" {
     block_c2IG_info:
         const _c2IG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.789781059 UTC

[section ""data" . GHC.Stack.Types.srcLocPackage_closure" {
     GHC.Stack.Types.srcLocPackage_closure:
         const GHC.Stack.Types.srcLocPackage_info;
 },
 GHC.Stack.Types.srcLocPackage_entry() //  [R2]
         { []
         }
     {offset
       c2J9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2Ja; else goto c2Jb;
       c2Ja: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocPackage_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2Jb: // global
           I64[Sp - 8] = block_c2J6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2Jf; else goto c2J7;
       u2Jf: // global
           call _c2J6(R1) args: 0, res: 0, upd: 0;
       c2J7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.srcLocPackage_info" {
     GHC.Stack.Types.srcLocPackage_info:
         const GHC.Stack.Types.srcLocPackage_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2J6() //  [R1]
         { []
         }
     {offset
       c2J6: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2J6_info" {
     block_c2J6_info:
         const _c2J6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.797385841 UTC

[section ""data" . GHC.Stack.Types.getCallStack_closure" {
     GHC.Stack.Types.getCallStack_closure:
         const GHC.Stack.Types.getCallStack_info;
 },
 sat_s2Cm_entry() //  [R1]
         { []
         }
     {offset
       c2JG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2JH; else goto c2JI;
       c2JH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2JI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Cm_info" {
     sat_s2Cm_info:
         const sat_s2Cm_entry;
         const 1;
         const 16;
 },
 GHC.Stack.Types.getCallStack_entry() //  [R2]
         { []
         }
     {offset
       c2JO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2JP; else goto u2K2;
       c2JP: // global
           R2 = R2;
           R1 = GHC.Stack.Types.getCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u2K2: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c2Jt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.getCallStack_info" {
     GHC.Stack.Types.getCallStack_info:
         const GHC.Stack.Types.getCallStack_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2Jt() //  []
         { []
         }
     {offset
       c2Jt: // global
           _s2Cg::P64 = P64[Sp];
           I64[Sp] = block_c2Jw_info;
           R1 = _s2Cg::P64;
           if (R1 & 7 != 0) goto u2K4; else goto c2Jx;
       u2K4: // global
           call _c2Jw(R1) args: 0, res: 0, upd: 0;
       c2Jx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2Jw() //  [R1]
         { []
         }
     {offset
       c2Jw: // global
           _c2JN::P64 = R1 & 7;
           if (_c2JN::P64 < 3) goto u2K1; else goto c2JM;
       u2K1: // global
           if (_c2JN::P64 < 2) goto c2JK; else goto c2JL;
       c2JK: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2JL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2JX; else goto c2JW;
       c2JX: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2JW: // global
           _s2Ci::P64 = P64[R1 + 6];
           _s2Cj::P64 = P64[R1 + 14];
           _s2Ck::P64 = P64[R1 + 22];
           I64[Hp - 64] = sat_s2Cm_info;
           P64[Hp - 48] = _s2Ck::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2Ci::P64;
           P64[Hp - 24] = _s2Cj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2JM: // global
           P64[Sp] = P64[R1 + 5];
           call _c2Jt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2Jw_info" {
     block_c2Jw_info:
         const _c2Jw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.811128098 UTC

[section ""data" . GHC.Stack.Types.fromCallSiteList_closure" {
     GHC.Stack.Types.fromCallSiteList_closure:
         const GHC.Stack.Types.fromCallSiteList_info;
 },
 sat_s2Cv_entry() //  [R1]
         { []
         }
     {offset
       c2KR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2KS; else goto c2KT;
       c2KS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2KT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2Cv_info" {
     sat_s2Cv_info:
         const sat_s2Cv_entry;
         const 1;
         const 16;
 },
 GHC.Stack.Types.fromCallSiteList_entry() //  [R2]
         { []
         }
     {offset
       c2KY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2KZ; else goto c2L0;
       c2KZ: // global
           R2 = R2;
           R1 = GHC.Stack.Types.fromCallSiteList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2L0: // global
           I64[Sp - 8] = block_c2KC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2L9; else goto c2KD;
       u2L9: // global
           call _c2KC(R1) args: 0, res: 0, upd: 0;
       c2KD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.fromCallSiteList_info" {
     GHC.Stack.Types.fromCallSiteList_info:
         const GHC.Stack.Types.fromCallSiteList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2KC() //  [R1]
         { []
         }
     {offset
       c2KC: // global
           if (R1 & 7 == 1) goto c2KV; else goto c2KW;
       c2KV: // global
           R1 = GHC.Stack.Types.EmptyCallStack_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2KW: // global
           I64[Sp - 8] = block_c2KI_info;
           _s2Cr::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2Cr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2L8; else goto c2KJ;
       u2L8: // global
           call _c2KI(R1) args: 0, res: 0, upd: 0;
       c2KJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2KC_info" {
     block_c2KC_info:
         const _c2KC;
         const 0;
         const 30;
 },
 _c2KI() //  [R1]
         { []
         }
     {offset
       c2KI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2L7; else goto c2L6;
       c2L7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2L6: // global
           _s2Ct::P64 = P64[R1 + 7];
           _s2Cu::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2Cv_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = _s2Ct::P64;
           P64[Hp - 8] = _s2Cu::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2KI_info" {
     block_c2KI_info:
         const _c2KI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.830855069 UTC

[section ""data" . GHC.Stack.Types.pushCallStack_closure" {
     GHC.Stack.Types.pushCallStack_closure:
         const GHC.Stack.Types.pushCallStack_info;
 },
 GHC.Stack.Types.pushCallStack_entry() //  [R2, R3]
         { []
         }
     {offset
       c2LJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2LK; else goto c2LL;
       c2LK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.pushCallStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2LL: // global
           I64[Sp - 16] = block_c2LG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2M6; else goto c2LH;
       u2M6: // global
           call _c2LG(R1) args: 0, res: 0, upd: 0;
       c2LH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.pushCallStack_info" {
     GHC.Stack.Types.pushCallStack_info:
         const GHC.Stack.Types.pushCallStack_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2LG() //  [R1]
         { []
         }
     {offset
       c2LG: // global
           I64[Sp - 8] = block_c2LO_info;
           _s2Cz::P64 = P64[R1 + 7];
           _s2CA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2CA::P64;
           P64[Sp + 8] = _s2Cz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2M5; else goto c2LQ;
       u2M5: // global
           call _c2LO(R1) args: 0, res: 0, upd: 0;
       c2LQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2LG_info" {
     block_c2LG_info:
         const _c2LG;
         const 1;
         const 30;
 },
 _c2LO() //  [R1]
         { []
         }
     {offset
       c2LO: // global
           if (R1 & 7 == 3) goto c2M3; else goto c2LW;
       c2M3: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2LW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2LZ; else goto c2LY;
       c2LZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2LY: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2LO_info" {
     block_c2LO_info:
         const _c2LO;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.842916407 UTC

[section ""data" . GHC.Stack.Types.emptyCallStack_closure" {
     GHC.Stack.Types.emptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.846673669 UTC

[section ""data" . GHC.Stack.Types.freezeCallStack_closure" {
     GHC.Stack.Types.freezeCallStack_closure:
         const GHC.Stack.Types.freezeCallStack_info;
 },
 GHC.Stack.Types.freezeCallStack_entry() //  [R2]
         { []
         }
     {offset
       c2MA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2ME; else goto c2MD;
       c2ME: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.freezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2MD: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.freezeCallStack_info" {
     GHC.Stack.Types.freezeCallStack_info:
         const GHC.Stack.Types.freezeCallStack_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.853108487 UTC

[section ""cstring" . GHC.Stack.Types.$trModule4_bytes" {
     GHC.Stack.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.855851446 UTC

[section ""data" . GHC.Stack.Types.$trModule3_closure" {
     GHC.Stack.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.858623392 UTC

[section ""cstring" . GHC.Stack.Types.$trModule2_bytes" {
     GHC.Stack.Types.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107,46,84,121,112,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.861948888 UTC

[section ""data" . GHC.Stack.Types.$trModule1_closure" {
     GHC.Stack.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.864628532 UTC

[section ""data" . GHC.Stack.Types.$trModule_closure" {
     GHC.Stack.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.Types.$trModule3_closure+1;
         const GHC.Stack.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.867322096 UTC

[section ""data" . $krep_r29X_closure" {
     $krep_r29X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.870129024 UTC

[section ""data" . $krep1_r29Y_closure" {
     $krep1_r29Y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.873298229 UTC

[section ""data" . $krep2_r29Z_closure" {
     $krep2_r29Z_closure:
         const :_con_info;
         const $krep1_r29Y_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.876069681 UTC

[section ""data" . $krep3_r2a0_closure" {
     $krep3_r2a0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r29Z_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.879999444 UTC

[section ""cstring" . GHC.Stack.Types.$tcSrcLoc2_bytes" {
     GHC.Stack.Types.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.882763566 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc1_closure" {
     GHC.Stack.Types.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcSrcLoc2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.886130244 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc_closure" {
     GHC.Stack.Types.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11659135446504247116;
         const 7996606469851030013;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.88892592 UTC

[section ""data" . $krep4_r2a1_closure" {
     $krep4_r2a1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.891449274 UTC

[section ""data" . $krep5_r2a2_closure" {
     $krep5_r2a2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep4_r2a1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.894255608 UTC

[section ""data" . $krep6_r2a3_closure" {
     $krep6_r2a3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep5_r2a2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.8974766 UTC

[section ""data" . $krep7_r2a4_closure" {
     $krep7_r2a4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep6_r2a3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.899246378 UTC

[section ""data" . $krep8_r2a5_closure" {
     $krep8_r2a5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep7_r2a4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.90105344 UTC

[section ""data" . $krep9_r2a6_closure" {
     $krep9_r2a6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep8_r2a5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.902883477 UTC

[section ""data" . $krep10_r2a7_closure" {
     $krep10_r2a7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep9_r2a6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.905185586 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc1_closure" {
     GHC.Stack.Types.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep10_r2a7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.907085316 UTC

[section ""cstring" . GHC.Stack.Types.$tc'SrcLoc3_bytes" {
     GHC.Stack.Types.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.90887116 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc2_closure" {
     GHC.Stack.Types.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'SrcLoc3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.910749938 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc_closure" {
     GHC.Stack.Types.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc2_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc1_closure+4;
         const 13956426263269302848;
         const 15330088913444129695;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.913034853 UTC

[section ""cstring" . GHC.Stack.Types.$tcCallStack2_bytes" {
     GHC.Stack.Types.$tcCallStack2_bytes:
         I8[] [67,97,108,108,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.914839123 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack1_closure" {
     GHC.Stack.Types.$tcCallStack1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcCallStack2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.916790716 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack_closure" {
     GHC.Stack.Types.$tcCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcCallStack1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9079156173149315555;
         const 7592677015683705484;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.918925788 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack1_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcCallStack_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.921123034 UTC

[section ""cstring" . GHC.Stack.Types.$tc'EmptyCallStack3_bytes" {
     GHC.Stack.Types.$tc'EmptyCallStack3_bytes:
         I8[] [39,69,109,112,116,121,67,97,108,108,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.922932249 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack2_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.924733418 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack2_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 4745696424279029534;
         const 621383300069717314;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.927113929 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack1_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.930022535 UTC

[section ""cstring" . GHC.Stack.Types.$tc'FreezeCallStack3_bytes" {
     GHC.Stack.Types.$tc'FreezeCallStack3_bytes:
         I8[] [39,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.931840806 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack2_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'FreezeCallStack3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.933716791 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack2_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 13172881767820002692;
         const 8012125741085098641;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.936096578 UTC

[section ""data" . $krep11_r2a8_closure" {
     $krep11_r2a8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r2a1_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.938016734 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack1_closure" {
     GHC.Stack.Types.$tc'PushCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep11_r2a8_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.939800825 UTC

[section ""cstring" . GHC.Stack.Types.$tc'PushCallStack3_bytes" {
     GHC.Stack.Types.$tc'PushCallStack3_bytes:
         I8[] [39,80,117,115,104,67,97,108,108,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.94155772 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack2_closure" {
     GHC.Stack.Types.$tc'PushCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'PushCallStack3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.943851538 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack_closure" {
     GHC.Stack.Types.$tc'PushCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack2_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack1_closure+4;
         const 11257300383724147409;
         const 9589391422293138004;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.945825588 UTC

[section ""data" . GHC.Stack.Types.EmptyCallStack_closure" {
     GHC.Stack.Types.EmptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.948394729 UTC

[section ""data" . GHC.Stack.Types.PushCallStack_closure" {
     GHC.Stack.Types.PushCallStack_closure:
         const GHC.Stack.Types.PushCallStack_info;
 },
 GHC.Stack.Types.PushCallStack_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2Nu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2Ny; else goto c2Nx;
       c2Ny: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.PushCallStack_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2Nx: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.PushCallStack_info" {
     GHC.Stack.Types.PushCallStack_info:
         const GHC.Stack.Types.PushCallStack_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.955848954 UTC

[section ""data" . GHC.Stack.Types.FreezeCallStack_closure" {
     GHC.Stack.Types.FreezeCallStack_closure:
         const GHC.Stack.Types.FreezeCallStack_info;
 },
 GHC.Stack.Types.FreezeCallStack_entry() //  [R2]
         { []
         }
     {offset
       c2NK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2NO; else goto c2NN;
       c2NO: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.FreezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2NN: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.FreezeCallStack_info" {
     GHC.Stack.Types.FreezeCallStack_info:
         const GHC.Stack.Types.FreezeCallStack_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.960822735 UTC

[section ""data" . GHC.Stack.Types.SrcLoc_closure" {
     GHC.Stack.Types.SrcLoc_closure:
         const GHC.Stack.Types.SrcLoc_info;
 },
 GHC.Stack.Types.SrcLoc_slow() //  [R1]
         { []
         }
     {offset
       c2NW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stack.Types.SrcLoc_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Stack.Types.SrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2O1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2O5; else goto c2O4;
       c2O5: // global
           HpAlloc = 64;
           R1 = GHC.Stack.Types.SrcLoc_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2O4: // global
           I64[Hp - 56] = GHC.Stack.Types.SrcLoc_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.SrcLoc_info" {
     GHC.Stack.Types.SrcLoc_info:
         const GHC.Stack.Types.SrcLoc_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Stack.Types.SrcLoc_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.966900954 UTC

[section ""cstring" . i2Oh_str" {
     i2Oh_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,69,109,112,116,121,67,97,108,108,83,116,97,99,107]
 },
 GHC.Stack.Types.EmptyCallStack_con_entry() //  [R1]
         { []
         }
     {offset
       c2Og: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.EmptyCallStack_con_info" {
     GHC.Stack.Types.EmptyCallStack_con_info:
         const GHC.Stack.Types.EmptyCallStack_con_entry;
         const 4294967296;
         const 3;
         const i2Oh_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.972150274 UTC

[section ""cstring" . i2Oo_str" {
     i2Oo_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,80,117,115,104,67,97,108,108,83,116,97,99,107]
 },
 GHC.Stack.Types.PushCallStack_con_entry() //  [R1]
         { []
         }
     {offset
       c2On: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.PushCallStack_con_info" {
     GHC.Stack.Types.PushCallStack_con_info:
         const GHC.Stack.Types.PushCallStack_con_entry;
         const 3;
         const 4294967297;
         const i2Oo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.976233519 UTC

[section ""cstring" . i2Ov_str" {
     i2Ov_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]
 },
 GHC.Stack.Types.FreezeCallStack_con_entry() //  [R1]
         { []
         }
     {offset
       c2Ou: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.FreezeCallStack_con_info" {
     GHC.Stack.Types.FreezeCallStack_con_info:
         const GHC.Stack.Types.FreezeCallStack_con_entry;
         const 1;
         const 8589934594;
         const i2Ov_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.97986856 UTC

[section ""cstring" . i2OC_str" {
     i2OC_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,83,114,99,76,111,99]
 },
 GHC.Stack.Types.SrcLoc_con_entry() //  [R1]
         { []
         }
     {offset
       c2OB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.Types.SrcLoc_con_info" {
     GHC.Stack.Types.SrcLoc_con_info:
         const GHC.Stack.Types.SrcLoc_con_entry;
         const 7;
         const 1;
         const i2OC_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:39.984112955 UTC

[section ""relreadonly" . S2OI_srt" { S2OI_srt:
 }]

