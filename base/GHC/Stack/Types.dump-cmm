
==================== Output Cmm ====================
2018-03-16 15:54:38.968921836 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:38.971546748 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c==_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c==_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c==_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c==_entry() //  [R2, R3]
         { info_tbl: [(c2ci,
                       label: GHC.Stack.Types.$fEqSrcLoc_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ci: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2cm; else goto c2cn;
       c2cm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cn: // global
           I64[Sp - 16] = block_c2cf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2e4; else goto c2cg;
       u2e4: // global
           call _c2cf(R1) args: 0, res: 0, upd: 0;
       c2cg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2cf() //  [R1]
         { info_tbl: [(c2cf,
                       label: block_c2cf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2cf: // global
           I64[Sp - 48] = block_c2cl_info;
           _s2ad::P64 = P64[R1 + 7];
           _s2ae::P64 = P64[R1 + 15];
           _s2af::P64 = P64[R1 + 23];
           _s2ag::P64 = P64[R1 + 31];
           _s2ah::P64 = P64[R1 + 39];
           _s2ai::P64 = P64[R1 + 47];
           _s2aj::P64 = P64[R1 + 55];
           R1 = P64[Sp + 8];
           P64[Sp - 40] = _s2af::P64;
           P64[Sp - 32] = _s2ag::P64;
           P64[Sp - 24] = _s2ah::P64;
           P64[Sp - 16] = _s2ai::P64;
           P64[Sp - 8] = _s2aj::P64;
           P64[Sp] = _s2ae::P64;
           P64[Sp + 8] = _s2ad::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2e3; else goto c2cp;
       u2e3: // global
           call _c2cl(R1) args: 0, res: 0, upd: 0;
       c2cp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2cl() //  [R1]
         { info_tbl: [(c2cl,
                       label: block_c2cl_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2cl: // global
           I64[Sp - 40] = block_c2ct_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 56];
           P64[Sp - 32] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 56] = P64[R1 + 15];
           Sp = Sp - 40;
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2ct() //  [R1]
         { info_tbl: [(c2ct,
                       label: block_c2ct_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ct: // global
           if (R1 & 7 == 1) goto u2dX; else goto c2cF;
       u2dX: // global
           Sp = Sp + 104;
           call _c2dS() args: 0, res: 0, upd: 0;
       c2cF: // global
           I64[Sp] = block_c2cD_info;
           R3 = P64[Sp + 96];
           R2 = P64[Sp + 88];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2cD() //  [R1]
         { info_tbl: [(c2cD,
                       label: block_c2cD_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2cD: // global
           if (R1 & 7 == 1) goto u2dY; else goto c2cQ;
       u2dY: // global
           Sp = Sp + 104;
           call _c2dS() args: 0, res: 0, upd: 0;
       c2cQ: // global
           I64[Sp] = block_c2cO_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2cO() //  [R1]
         { info_tbl: [(c2cO,
                       label: block_c2cO_info
                       rep:StackRep [False, False, False, False, True, True, False, False,
                                     False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2cO: // global
           if (R1 & 7 == 1) goto u2dZ; else goto c2d6;
       u2dZ: // global
           Sp = Sp + 104;
           call _c2dS() args: 0, res: 0, upd: 0;
       c2d6: // global
           I64[Sp] = block_c2cZ_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2e7; else goto c2d0;
       u2e7: // global
           call _c2cZ(R1) args: 0, res: 0, upd: 0;
       c2d0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2cZ() //  [R1]
         { info_tbl: [(c2cZ,
                       label: block_c2cZ_info
                       rep:StackRep [False, False, False, False, True, True, True, False,
                                     False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2cZ: // global
           _s2ao::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2d4_info;
           _s2aw::I64 = I64[R1 + 7];
           R1 = _s2ao::P64;
           I64[Sp + 96] = _s2aw::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2e9; else goto c2d8;
       u2e9: // global
           call _c2d4(R1) args: 0, res: 0, upd: 0;
       c2d8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2d4() //  [R1]
         { info_tbl: [(c2d4,
                       label: block_c2d4_info
                       rep:StackRep [False, False, False, True, True, True, False, False,
                                     False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2d4: // global
           if (I64[Sp + 88] == I64[R1 + 7]) goto c2dp; else goto u2e0;
       c2dp: // global
           I64[Sp] = block_c2dj_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2ea; else goto c2dk;
       u2ea: // global
           call _c2dj(R1) args: 0, res: 0, upd: 0;
       c2dk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2e0: // global
           Sp = Sp + 96;
           call _c2dS() args: 0, res: 0, upd: 0;
     }
 },
 _c2dj() //  [R1]
         { info_tbl: [(c2dj,
                       label: block_c2dj_info
                       rep:StackRep [False, False, False, True, True, True, True, False,
                                     False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2dj: // global
           _s2ap::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2do_info;
           _s2aB::I64 = I64[R1 + 7];
           R1 = _s2ap::P64;
           I64[Sp + 88] = _s2aB::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2ec; else goto c2dr;
       u2ec: // global
           call _c2do(R1) args: 0, res: 0, upd: 0;
       c2dr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2do() //  [R1]
         { info_tbl: [(c2do,
                       label: block_c2do_info
                       rep:StackRep [False, False, True, True, True, True, False, False,
                                     True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2do: // global
           if (I64[Sp + 80] == I64[R1 + 7]) goto c2dI; else goto u2e1;
       c2dI: // global
           I64[Sp] = block_c2dC_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2ed; else goto c2dD;
       u2ed: // global
           call _c2dC(R1) args: 0, res: 0, upd: 0;
       c2dD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2e1: // global
           Sp = Sp + 88;
           call _c2dS() args: 0, res: 0, upd: 0;
     }
 },
 _c2dC() //  [R1]
         { info_tbl: [(c2dC,
                       label: block_c2dC_info
                       rep:StackRep [False, False, True, True, True, True, True, False,
                                     True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2dC: // global
           _s2aq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2dH_info;
           _s2aG::I64 = I64[R1 + 7];
           R1 = _s2aq::P64;
           I64[Sp + 80] = _s2aG::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2ef; else goto c2dK;
       u2ef: // global
           call _c2dH(R1) args: 0, res: 0, upd: 0;
       c2dK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2dH() //  [R1]
         { info_tbl: [(c2dH,
                       label: block_c2dH_info
                       rep:StackRep [False, True, True, True, True, True, False, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2dH: // global
           if (I64[Sp + 72] == I64[R1 + 7]) goto c2dT; else goto u2e2;
       c2dT: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 80;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2e2: // global
           Sp = Sp + 80;
           call _c2dS() args: 0, res: 0, upd: 0;
     }
 },
 _c2dS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2dS: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.976668423 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c/=_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c/=_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c2er,
                       label: GHC.Stack.Types.$fEqSrcLoc_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2er: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2es; else goto c2et;
       c2es: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2et: // global
           I64[Sp - 8] = block_c2el_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.$fEqSrcLoc_$c==_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2el() //  [R1]
         { info_tbl: [(c2el,
                       label: block_c2el_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2el: // global
           if (R1 & 7 == 1) goto c2eo; else goto c2ep;
       c2eo: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ep: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.978165606 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_closure" {
     GHC.Stack.Types.$fEqSrcLoc_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Stack.Types.$fEqSrcLoc_$c==_closure+2;
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.979030213 UTC

[section ""data" . GHC.Stack.Types.srcLocEndCol_closure" {
     GHC.Stack.Types.srcLocEndCol_closure:
         const GHC.Stack.Types.srcLocEndCol_info;
 },
 GHC.Stack.Types.srcLocEndCol_entry() //  [R2]
         { info_tbl: [(c2eH,
                       label: GHC.Stack.Types.srcLocEndCol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2eH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2eI; else goto c2eJ;
       c2eI: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eJ: // global
           I64[Sp - 8] = block_c2eE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eN; else goto c2eF;
       u2eN: // global
           call _c2eE(R1) args: 0, res: 0, upd: 0;
       c2eF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2eE() //  [R1]
         { info_tbl: [(c2eE,
                       label: block_c2eE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2eE: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.980730908 UTC

[section ""data" . GHC.Stack.Types.srcLocEndLine_closure" {
     GHC.Stack.Types.srcLocEndLine_closure:
         const GHC.Stack.Types.srcLocEndLine_info;
 },
 GHC.Stack.Types.srcLocEndLine_entry() //  [R2]
         { info_tbl: [(c2eV,
                       label: GHC.Stack.Types.srcLocEndLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2eV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2eW; else goto c2eX;
       c2eW: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eX: // global
           I64[Sp - 8] = block_c2eS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2f1; else goto c2eT;
       u2f1: // global
           call _c2eS(R1) args: 0, res: 0, upd: 0;
       c2eT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2eS() //  [R1]
         { info_tbl: [(c2eS,
                       label: block_c2eS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2eS: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.981962777 UTC

[section ""data" . GHC.Stack.Types.srcLocStartCol_closure" {
     GHC.Stack.Types.srcLocStartCol_closure:
         const GHC.Stack.Types.srcLocStartCol_info;
 },
 GHC.Stack.Types.srcLocStartCol_entry() //  [R2]
         { info_tbl: [(c2f9,
                       label: GHC.Stack.Types.srcLocStartCol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2f9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2fa; else goto c2fb;
       c2fa: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fb: // global
           I64[Sp - 8] = block_c2f6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ff; else goto c2f7;
       u2ff: // global
           call _c2f6(R1) args: 0, res: 0, upd: 0;
       c2f7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2f6() //  [R1]
         { info_tbl: [(c2f6,
                       label: block_c2f6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2f6: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.983210017 UTC

[section ""data" . GHC.Stack.Types.srcLocStartLine_closure" {
     GHC.Stack.Types.srcLocStartLine_closure:
         const GHC.Stack.Types.srcLocStartLine_info;
 },
 GHC.Stack.Types.srcLocStartLine_entry() //  [R2]
         { info_tbl: [(c2fn,
                       label: GHC.Stack.Types.srcLocStartLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2fn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2fo; else goto c2fp;
       c2fo: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fp: // global
           I64[Sp - 8] = block_c2fk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ft; else goto c2fl;
       u2ft: // global
           call _c2fk(R1) args: 0, res: 0, upd: 0;
       c2fl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2fk() //  [R1]
         { info_tbl: [(c2fk,
                       label: block_c2fk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2fk: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.984411916 UTC

[section ""data" . GHC.Stack.Types.srcLocFile_closure" {
     GHC.Stack.Types.srcLocFile_closure:
         const GHC.Stack.Types.srcLocFile_info;
 },
 GHC.Stack.Types.srcLocFile_entry() //  [R2]
         { info_tbl: [(c2fB,
                       label: GHC.Stack.Types.srcLocFile_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2fB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2fC; else goto c2fD;
       c2fC: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fD: // global
           I64[Sp - 8] = block_c2fy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fH; else goto c2fz;
       u2fH: // global
           call _c2fy(R1) args: 0, res: 0, upd: 0;
       c2fz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2fy() //  [R1]
         { info_tbl: [(c2fy,
                       label: block_c2fy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2fy: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.98563847 UTC

[section ""data" . GHC.Stack.Types.srcLocModule_closure" {
     GHC.Stack.Types.srcLocModule_closure:
         const GHC.Stack.Types.srcLocModule_info;
 },
 GHC.Stack.Types.srcLocModule_entry() //  [R2]
         { info_tbl: [(c2fP,
                       label: GHC.Stack.Types.srcLocModule_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2fP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2fQ; else goto c2fR;
       c2fQ: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocModule_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fR: // global
           I64[Sp - 8] = block_c2fM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fV; else goto c2fN;
       u2fV: // global
           call _c2fM(R1) args: 0, res: 0, upd: 0;
       c2fN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2fM() //  [R1]
         { info_tbl: [(c2fM,
                       label: block_c2fM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2fM: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.987145578 UTC

[section ""data" . GHC.Stack.Types.srcLocPackage_closure" {
     GHC.Stack.Types.srcLocPackage_closure:
         const GHC.Stack.Types.srcLocPackage_info;
 },
 GHC.Stack.Types.srcLocPackage_entry() //  [R2]
         { info_tbl: [(c2g3,
                       label: GHC.Stack.Types.srcLocPackage_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2g3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2g4; else goto c2g5;
       c2g4: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocPackage_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2g5: // global
           I64[Sp - 8] = block_c2g0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g9; else goto c2g1;
       u2g9: // global
           call _c2g0(R1) args: 0, res: 0, upd: 0;
       c2g1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2g0() //  [R1]
         { info_tbl: [(c2g0,
                       label: block_c2g0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2g0: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.98871984 UTC

[section ""data" . GHC.Stack.Types.getCallStack_closure" {
     GHC.Stack.Types.getCallStack_closure:
         const GHC.Stack.Types.getCallStack_info;
 },
 sat_s2bU_entry() //  [R1]
         { info_tbl: [(c2go,
                       label: sat_s2bU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2go: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gp; else goto c2gq;
       c2gp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Stack.Types.getCallStack_entry() //  [R2]
         { info_tbl: [(c2gw,
                       label: GHC.Stack.Types.getCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2gw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2gx; else goto u2gK;
       c2gx: // global
           R2 = R2;
           R1 = GHC.Stack.Types.getCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u2gK: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c2gb() args: 0, res: 0, upd: 0;
     }
 },
 _c2gb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2gb: // global
           _s2bO::P64 = P64[Sp];
           I64[Sp] = block_c2ge_info;
           R1 = _s2bO::P64;
           if (R1 & 7 != 0) goto u2gM; else goto c2gf;
       u2gM: // global
           call _c2ge(R1) args: 0, res: 0, upd: 0;
       c2gf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ge() //  [R1]
         { info_tbl: [(c2ge,
                       label: block_c2ge_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ge: // global
           _c2gv::P64 = R1 & 7;
           if (_c2gv::P64 < 3) goto u2gJ; else goto c2gu;
       u2gJ: // global
           if (_c2gv::P64 < 2) goto c2gs; else goto c2gt;
       c2gs: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2gF; else goto c2gE;
       c2gF: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gE: // global
           _s2bQ::P64 = P64[R1 + 6];
           _s2bR::P64 = P64[R1 + 14];
           _s2bS::P64 = P64[R1 + 22];
           I64[Hp - 64] = sat_s2bU_info;
           P64[Hp - 48] = _s2bS::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bQ::P64;
           P64[Hp - 24] = _s2bR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gu: // global
           P64[Sp] = P64[R1 + 5];
           call _c2gb() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.990861677 UTC

[section ""data" . GHC.Stack.Types.fromCallSiteList_closure" {
     GHC.Stack.Types.fromCallSiteList_closure:
         const GHC.Stack.Types.fromCallSiteList_info;
 },
 sat_s2c3_entry() //  [R1]
         { info_tbl: [(c2h8,
                       label: sat_s2c3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2h8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2h9; else goto c2ha;
       c2h9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ha: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Stack.Types.fromCallSiteList_entry() //  [R2]
         { info_tbl: [(c2hf,
                       label: GHC.Stack.Types.fromCallSiteList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2hf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2hg; else goto c2hh;
       c2hg: // global
           R2 = R2;
           R1 = GHC.Stack.Types.fromCallSiteList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2hh: // global
           I64[Sp - 8] = block_c2gT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2hq; else goto c2gU;
       u2hq: // global
           call _c2gT(R1) args: 0, res: 0, upd: 0;
       c2gU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2gT() //  [R1]
         { info_tbl: [(c2gT,
                       label: block_c2gT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2gT: // global
           if (R1 & 7 == 1) goto c2hc; else goto c2hd;
       c2hc: // global
           R1 = GHC.Stack.Types.EmptyCallStack_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2hd: // global
           I64[Sp - 8] = block_c2gZ_info;
           _s2bZ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2bZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2hp; else goto c2h0;
       u2hp: // global
           call _c2gZ(R1) args: 0, res: 0, upd: 0;
       c2h0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2gZ() //  [R1]
         { info_tbl: [(c2gZ,
                       label: block_c2gZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2gZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2ho; else goto c2hn;
       c2ho: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2hn: // global
           _s2c1::P64 = P64[R1 + 7];
           _s2c2::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2c3_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = _s2c1::P64;
           P64[Hp - 8] = _s2c2::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.993337485 UTC

[section ""data" . GHC.Stack.Types.pushCallStack_closure" {
     GHC.Stack.Types.pushCallStack_closure:
         const GHC.Stack.Types.pushCallStack_info;
 },
 GHC.Stack.Types.pushCallStack_entry() //  [R2, R3]
         { info_tbl: [(c2hy,
                       label: GHC.Stack.Types.pushCallStack_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2hy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2hz; else goto c2hA;
       c2hz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.pushCallStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2hA: // global
           I64[Sp - 16] = block_c2hv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2hV; else goto c2hw;
       u2hV: // global
           call _c2hv(R1) args: 0, res: 0, upd: 0;
       c2hw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2hv() //  [R1]
         { info_tbl: [(c2hv,
                       label: block_c2hv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2hv: // global
           I64[Sp - 8] = block_c2hD_info;
           _s2c7::P64 = P64[R1 + 7];
           _s2c8::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2c8::P64;
           P64[Sp + 8] = _s2c7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2hU; else goto c2hF;
       u2hU: // global
           call _c2hD(R1) args: 0, res: 0, upd: 0;
       c2hF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2hD() //  [R1]
         { info_tbl: [(c2hD,
                       label: block_c2hD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2hD: // global
           if (R1 & 7 == 3) goto c2hS; else goto c2hL;
       c2hS: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2hL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2hO; else goto c2hN;
       c2hO: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2hN: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.994843507 UTC

[section ""data" . GHC.Stack.Types.emptyCallStack_closure" {
     GHC.Stack.Types.emptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.995577515 UTC

[section ""data" . GHC.Stack.Types.freezeCallStack_closure" {
     GHC.Stack.Types.freezeCallStack_closure:
         const GHC.Stack.Types.freezeCallStack_info;
 },
 GHC.Stack.Types.freezeCallStack_entry() //  [R2]
         { info_tbl: [(c2i1,
                       label: GHC.Stack.Types.freezeCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2i1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2i5; else goto c2i4;
       c2i5: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.freezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2i4: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.996395623 UTC

[section ""cstring" . GHC.Stack.Types.$trModule4_bytes" {
     GHC.Stack.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.996982575 UTC

[section ""data" . GHC.Stack.Types.$trModule3_closure" {
     GHC.Stack.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.99756748 UTC

[section ""cstring" . GHC.Stack.Types.$trModule2_bytes" {
     GHC.Stack.Types.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107,46,84,121,112,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.998394441 UTC

[section ""data" . GHC.Stack.Types.$trModule1_closure" {
     GHC.Stack.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.999000354 UTC

[section ""data" . GHC.Stack.Types.$trModule_closure" {
     GHC.Stack.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.Types.$trModule3_closure+1;
         const GHC.Stack.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:38.999549862 UTC

[section ""data" . $krep_r29X_closure" {
     $krep_r29X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.000117579 UTC

[section ""data" . $krep1_r29Y_closure" {
     $krep1_r29Y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.000629587 UTC

[section ""data" . $krep2_r29Z_closure" {
     $krep2_r29Z_closure:
         const :_con_info;
         const $krep1_r29Y_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.001185599 UTC

[section ""data" . $krep3_r2a0_closure" {
     $krep3_r2a0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r29Z_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.001775021 UTC

[section ""cstring" . GHC.Stack.Types.$tcSrcLoc2_bytes" {
     GHC.Stack.Types.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.002328498 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc1_closure" {
     GHC.Stack.Types.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcSrcLoc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.002887301 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc_closure" {
     GHC.Stack.Types.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11659135446504247116;
         const 7996606469851030013;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.003741122 UTC

[section ""data" . $krep4_r2a1_closure" {
     $krep4_r2a1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.004298182 UTC

[section ""data" . $krep5_r2a2_closure" {
     $krep5_r2a2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep4_r2a1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.004846707 UTC

[section ""data" . $krep6_r2a3_closure" {
     $krep6_r2a3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep5_r2a2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.005390285 UTC

[section ""data" . $krep7_r2a4_closure" {
     $krep7_r2a4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep6_r2a3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.005942105 UTC

[section ""data" . $krep8_r2a5_closure" {
     $krep8_r2a5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep7_r2a4_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.006486558 UTC

[section ""data" . $krep9_r2a6_closure" {
     $krep9_r2a6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep8_r2a5_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.007014105 UTC

[section ""data" . $krep10_r2a7_closure" {
     $krep10_r2a7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep9_r2a6_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.007557297 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc1_closure" {
     GHC.Stack.Types.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep10_r2a7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.008437845 UTC

[section ""cstring" . GHC.Stack.Types.$tc'SrcLoc3_bytes" {
     GHC.Stack.Types.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.00899436 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc2_closure" {
     GHC.Stack.Types.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'SrcLoc3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.009578453 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc_closure" {
     GHC.Stack.Types.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc2_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc1_closure+4;
         const 13956426263269302848;
         const 15330088913444129695;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.010225917 UTC

[section ""cstring" . GHC.Stack.Types.$tcCallStack2_bytes" {
     GHC.Stack.Types.$tcCallStack2_bytes:
         I8[] [67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.010815449 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack1_closure" {
     GHC.Stack.Types.$tcCallStack1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcCallStack2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.011428255 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack_closure" {
     GHC.Stack.Types.$tcCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcCallStack1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9079156173149315555;
         const 7592677015683705484;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.01201282 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack1_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcCallStack_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.012805957 UTC

[section ""cstring" . GHC.Stack.Types.$tc'EmptyCallStack3_bytes" {
     GHC.Stack.Types.$tc'EmptyCallStack3_bytes:
         I8[] [39,69,109,112,116,121,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.013746629 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack2_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.014290504 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack2_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 4745696424279029534;
         const 621383300069717314;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.01498364 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack1_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.015537261 UTC

[section ""cstring" . GHC.Stack.Types.$tc'FreezeCallStack3_bytes" {
     GHC.Stack.Types.$tc'FreezeCallStack3_bytes:
         I8[] [39,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.01606549 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack2_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'FreezeCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.016652122 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack2_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 13172881767820002692;
         const 8012125741085098641;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.017228777 UTC

[section ""data" . $krep11_r2a8_closure" {
     $krep11_r2a8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r2a1_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.017833649 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack1_closure" {
     GHC.Stack.Types.$tc'PushCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep11_r2a8_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.018773631 UTC

[section ""cstring" . GHC.Stack.Types.$tc'PushCallStack3_bytes" {
     GHC.Stack.Types.$tc'PushCallStack3_bytes:
         I8[] [39,80,117,115,104,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.019330234 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack2_closure" {
     GHC.Stack.Types.$tc'PushCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'PushCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.019914491 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack_closure" {
     GHC.Stack.Types.$tc'PushCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack2_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack1_closure+4;
         const 11257300383724147409;
         const 9589391422293138004;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.020531189 UTC

[section ""data" . GHC.Stack.Types.EmptyCallStack_closure" {
     GHC.Stack.Types.EmptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.021597981 UTC

[section ""data" . GHC.Stack.Types.PushCallStack_closure" {
     GHC.Stack.Types.PushCallStack_closure:
         const GHC.Stack.Types.PushCallStack_info;
 },
 GHC.Stack.Types.PushCallStack_entry() //  [R2, R3, R4]
         { info_tbl: [(c2ib,
                       label: GHC.Stack.Types.PushCallStack_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ib: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2if; else goto c2ie;
       c2if: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.PushCallStack_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ie: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.022822194 UTC

[section ""data" . GHC.Stack.Types.FreezeCallStack_closure" {
     GHC.Stack.Types.FreezeCallStack_closure:
         const GHC.Stack.Types.FreezeCallStack_info;
 },
 GHC.Stack.Types.FreezeCallStack_entry() //  [R2]
         { info_tbl: [(c2il,
                       label: GHC.Stack.Types.FreezeCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2il: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2ip; else goto c2io;
       c2ip: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.FreezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2io: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.02407895 UTC

[section ""data" . GHC.Stack.Types.SrcLoc_closure" {
     GHC.Stack.Types.SrcLoc_closure:
         const GHC.Stack.Types.SrcLoc_info;
 },
 GHC.Stack.Types.SrcLoc_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ir: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stack.Types.SrcLoc_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Stack.Types.SrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c2iw,
                       label: GHC.Stack.Types.SrcLoc_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2iA; else goto c2iz;
       c2iA: // global
           HpAlloc = 64;
           R1 = GHC.Stack.Types.SrcLoc_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2iz: // global
           I64[Hp - 56] = GHC.Stack.Types.SrcLoc_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.025667599 UTC

[GHC.Stack.Types.EmptyCallStack_con_entry() //  [R1]
         { info_tbl: [(c2iB,
                       label: GHC.Stack.Types.EmptyCallStack_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,69,109,112,116,121,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.02643869 UTC

[GHC.Stack.Types.PushCallStack_con_entry() //  [R1]
         { info_tbl: [(c2iC,
                       label: GHC.Stack.Types.PushCallStack_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,80,117,115,104,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iC: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.027174425 UTC

[GHC.Stack.Types.FreezeCallStack_con_entry() //  [R1]
         { info_tbl: [(c2iD,
                       label: GHC.Stack.Types.FreezeCallStack_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iD: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.027890473 UTC

[GHC.Stack.Types.SrcLoc_con_entry() //  [R1]
         { info_tbl: [(c2iE,
                       label: GHC.Stack.Types.SrcLoc_con_info
                       rep:HeapRep 7 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,83,114,99,76,111,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iE: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.028589648 UTC

[section ""relreadonly" . S2iF_srt" { S2iF_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.029141927 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:39.031820219 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c==_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c==_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c==_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c==_entry() //  [R2, R3]
         { info_tbl: [(c2iN,
                       label: GHC.Stack.Types.$fEqSrcLoc_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iN: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2iR; else goto c2iS;
       c2iR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2iS: // global
           I64[Sp - 16] = block_c2iK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kz; else goto c2iL;
       u2kz: // global
           call _c2iK(R1) args: 0, res: 0, upd: 0;
       c2iL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2iK() //  [R1]
         { info_tbl: [(c2iK,
                       label: block_c2iK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iK: // global
           I64[Sp - 48] = block_c2iQ_info;
           _s2ad::P64 = P64[R1 + 7];
           _s2ae::P64 = P64[R1 + 15];
           _s2af::P64 = P64[R1 + 23];
           _s2ag::P64 = P64[R1 + 31];
           _s2ah::P64 = P64[R1 + 39];
           _s2ai::P64 = P64[R1 + 47];
           _s2aj::P64 = P64[R1 + 55];
           R1 = P64[Sp + 8];
           P64[Sp - 40] = _s2af::P64;
           P64[Sp - 32] = _s2ag::P64;
           P64[Sp - 24] = _s2ah::P64;
           P64[Sp - 16] = _s2ai::P64;
           P64[Sp - 8] = _s2aj::P64;
           P64[Sp] = _s2ae::P64;
           P64[Sp + 8] = _s2ad::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2ky; else goto c2iU;
       u2ky: // global
           call _c2iQ(R1) args: 0, res: 0, upd: 0;
       c2iU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2iQ() //  [R1]
         { info_tbl: [(c2iQ,
                       label: block_c2iQ_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iQ: // global
           I64[Sp - 40] = block_c2iY_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 56];
           P64[Sp - 32] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 56] = P64[R1 + 15];
           Sp = Sp - 40;
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2iY() //  [R1]
         { info_tbl: [(c2iY,
                       label: block_c2iY_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2iY: // global
           if (R1 & 7 == 1) goto u2ks; else goto c2ja;
       u2ks: // global
           Sp = Sp + 104;
           call _c2kn() args: 0, res: 0, upd: 0;
       c2ja: // global
           I64[Sp] = block_c2j8_info;
           R3 = P64[Sp + 96];
           R2 = P64[Sp + 88];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2j8() //  [R1]
         { info_tbl: [(c2j8,
                       label: block_c2j8_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2j8: // global
           if (R1 & 7 == 1) goto u2kt; else goto c2jl;
       u2kt: // global
           Sp = Sp + 104;
           call _c2kn() args: 0, res: 0, upd: 0;
       c2jl: // global
           I64[Sp] = block_c2jj_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2jj() //  [R1]
         { info_tbl: [(c2jj,
                       label: block_c2jj_info
                       rep:StackRep [False, False, False, False, True, True, False, False,
                                     False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jj: // global
           if (R1 & 7 == 1) goto u2ku; else goto c2jB;
       u2ku: // global
           Sp = Sp + 104;
           call _c2kn() args: 0, res: 0, upd: 0;
       c2jB: // global
           I64[Sp] = block_c2ju_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2kC; else goto c2jv;
       u2kC: // global
           call _c2ju(R1) args: 0, res: 0, upd: 0;
       c2jv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ju() //  [R1]
         { info_tbl: [(c2ju,
                       label: block_c2ju_info
                       rep:StackRep [False, False, False, False, True, True, True, False,
                                     False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ju: // global
           _s2ao::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2jz_info;
           _s2aw::I64 = I64[R1 + 7];
           R1 = _s2ao::P64;
           I64[Sp + 96] = _s2aw::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2kE; else goto c2jD;
       u2kE: // global
           call _c2jz(R1) args: 0, res: 0, upd: 0;
       c2jD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jz() //  [R1]
         { info_tbl: [(c2jz,
                       label: block_c2jz_info
                       rep:StackRep [False, False, False, True, True, True, False, False,
                                     False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jz: // global
           if (I64[Sp + 88] == I64[R1 + 7]) goto c2jU; else goto u2kv;
       c2jU: // global
           I64[Sp] = block_c2jO_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2kF; else goto c2jP;
       u2kF: // global
           call _c2jO(R1) args: 0, res: 0, upd: 0;
       c2jP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2kv: // global
           Sp = Sp + 96;
           call _c2kn() args: 0, res: 0, upd: 0;
     }
 },
 _c2jO() //  [R1]
         { info_tbl: [(c2jO,
                       label: block_c2jO_info
                       rep:StackRep [False, False, False, True, True, True, True, False,
                                     False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jO: // global
           _s2ap::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2jT_info;
           _s2aB::I64 = I64[R1 + 7];
           R1 = _s2ap::P64;
           I64[Sp + 88] = _s2aB::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2kH; else goto c2jW;
       u2kH: // global
           call _c2jT(R1) args: 0, res: 0, upd: 0;
       c2jW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jT() //  [R1]
         { info_tbl: [(c2jT,
                       label: block_c2jT_info
                       rep:StackRep [False, False, True, True, True, True, False, False,
                                     True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jT: // global
           if (I64[Sp + 80] == I64[R1 + 7]) goto c2kd; else goto u2kw;
       c2kd: // global
           I64[Sp] = block_c2k7_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2kI; else goto c2k8;
       u2kI: // global
           call _c2k7(R1) args: 0, res: 0, upd: 0;
       c2k8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2kw: // global
           Sp = Sp + 88;
           call _c2kn() args: 0, res: 0, upd: 0;
     }
 },
 _c2k7() //  [R1]
         { info_tbl: [(c2k7,
                       label: block_c2k7_info
                       rep:StackRep [False, False, True, True, True, True, True, False,
                                     True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k7: // global
           _s2aq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2kc_info;
           _s2aG::I64 = I64[R1 + 7];
           R1 = _s2aq::P64;
           I64[Sp + 80] = _s2aG::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2kK; else goto c2kf;
       u2kK: // global
           call _c2kc(R1) args: 0, res: 0, upd: 0;
       c2kf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kc() //  [R1]
         { info_tbl: [(c2kc,
                       label: block_c2kc_info
                       rep:StackRep [False, True, True, True, True, True, False, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kc: // global
           if (I64[Sp + 72] == I64[R1 + 7]) goto c2ko; else goto u2kx;
       c2ko: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 80;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2kx: // global
           Sp = Sp + 80;
           call _c2kn() args: 0, res: 0, upd: 0;
     }
 },
 _c2kn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kn: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.03617583 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c/=_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c/=_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c2kW,
                       label: GHC.Stack.Types.$fEqSrcLoc_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kX; else goto c2kY;
       c2kX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kY: // global
           I64[Sp - 8] = block_c2kQ_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.$fEqSrcLoc_$c==_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2kQ() //  [R1]
         { info_tbl: [(c2kQ,
                       label: block_c2kQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kQ: // global
           if (R1 & 7 == 1) goto c2kT; else goto c2kU;
       c2kT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.03770834 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_closure" {
     GHC.Stack.Types.$fEqSrcLoc_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Stack.Types.$fEqSrcLoc_$c==_closure+2;
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.038516618 UTC

[section ""data" . GHC.Stack.Types.srcLocEndCol_closure" {
     GHC.Stack.Types.srcLocEndCol_closure:
         const GHC.Stack.Types.srcLocEndCol_info;
 },
 GHC.Stack.Types.srcLocEndCol_entry() //  [R2]
         { info_tbl: [(c2lc,
                       label: GHC.Stack.Types.srcLocEndCol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ld; else goto c2le;
       c2ld: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2le: // global
           I64[Sp - 8] = block_c2l9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2li; else goto c2la;
       u2li: // global
           call _c2l9(R1) args: 0, res: 0, upd: 0;
       c2la: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l9() //  [R1]
         { info_tbl: [(c2l9,
                       label: block_c2l9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l9: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.039739327 UTC

[section ""data" . GHC.Stack.Types.srcLocEndLine_closure" {
     GHC.Stack.Types.srcLocEndLine_closure:
         const GHC.Stack.Types.srcLocEndLine_info;
 },
 GHC.Stack.Types.srcLocEndLine_entry() //  [R2]
         { info_tbl: [(c2lq,
                       label: GHC.Stack.Types.srcLocEndLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lr; else goto c2ls;
       c2lr: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ls: // global
           I64[Sp - 8] = block_c2ln_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lw; else goto c2lo;
       u2lw: // global
           call _c2ln(R1) args: 0, res: 0, upd: 0;
       c2lo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ln() //  [R1]
         { info_tbl: [(c2ln,
                       label: block_c2ln_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ln: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.040950172 UTC

[section ""data" . GHC.Stack.Types.srcLocStartCol_closure" {
     GHC.Stack.Types.srcLocStartCol_closure:
         const GHC.Stack.Types.srcLocStartCol_info;
 },
 GHC.Stack.Types.srcLocStartCol_entry() //  [R2]
         { info_tbl: [(c2lE,
                       label: GHC.Stack.Types.srcLocStartCol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lF; else goto c2lG;
       c2lF: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lG: // global
           I64[Sp - 8] = block_c2lB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lK; else goto c2lC;
       u2lK: // global
           call _c2lB(R1) args: 0, res: 0, upd: 0;
       c2lC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lB() //  [R1]
         { info_tbl: [(c2lB,
                       label: block_c2lB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lB: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.04225079 UTC

[section ""data" . GHC.Stack.Types.srcLocStartLine_closure" {
     GHC.Stack.Types.srcLocStartLine_closure:
         const GHC.Stack.Types.srcLocStartLine_info;
 },
 GHC.Stack.Types.srcLocStartLine_entry() //  [R2]
         { info_tbl: [(c2lS,
                       label: GHC.Stack.Types.srcLocStartLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lT; else goto c2lU;
       c2lT: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lU: // global
           I64[Sp - 8] = block_c2lP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lY; else goto c2lQ;
       u2lY: // global
           call _c2lP(R1) args: 0, res: 0, upd: 0;
       c2lQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lP() //  [R1]
         { info_tbl: [(c2lP,
                       label: block_c2lP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lP: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.043868321 UTC

[section ""data" . GHC.Stack.Types.srcLocFile_closure" {
     GHC.Stack.Types.srcLocFile_closure:
         const GHC.Stack.Types.srcLocFile_info;
 },
 GHC.Stack.Types.srcLocFile_entry() //  [R2]
         { info_tbl: [(c2m6,
                       label: GHC.Stack.Types.srcLocFile_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2m7; else goto c2m8;
       c2m7: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2m8: // global
           I64[Sp - 8] = block_c2m3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mc; else goto c2m4;
       u2mc: // global
           call _c2m3(R1) args: 0, res: 0, upd: 0;
       c2m4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2m3() //  [R1]
         { info_tbl: [(c2m3,
                       label: block_c2m3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m3: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.045054671 UTC

[section ""data" . GHC.Stack.Types.srcLocModule_closure" {
     GHC.Stack.Types.srcLocModule_closure:
         const GHC.Stack.Types.srcLocModule_info;
 },
 GHC.Stack.Types.srcLocModule_entry() //  [R2]
         { info_tbl: [(c2mk,
                       label: GHC.Stack.Types.srcLocModule_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ml; else goto c2mm;
       c2ml: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocModule_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mm: // global
           I64[Sp - 8] = block_c2mh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mq; else goto c2mi;
       u2mq: // global
           call _c2mh(R1) args: 0, res: 0, upd: 0;
       c2mi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mh() //  [R1]
         { info_tbl: [(c2mh,
                       label: block_c2mh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mh: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.046300343 UTC

[section ""data" . GHC.Stack.Types.srcLocPackage_closure" {
     GHC.Stack.Types.srcLocPackage_closure:
         const GHC.Stack.Types.srcLocPackage_info;
 },
 GHC.Stack.Types.srcLocPackage_entry() //  [R2]
         { info_tbl: [(c2my,
                       label: GHC.Stack.Types.srcLocPackage_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2my: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mz; else goto c2mA;
       c2mz: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocPackage_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mA: // global
           I64[Sp - 8] = block_c2mv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mE; else goto c2mw;
       u2mE: // global
           call _c2mv(R1) args: 0, res: 0, upd: 0;
       c2mw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mv() //  [R1]
         { info_tbl: [(c2mv,
                       label: block_c2mv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mv: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.047943952 UTC

[section ""data" . GHC.Stack.Types.getCallStack_closure" {
     GHC.Stack.Types.getCallStack_closure:
         const GHC.Stack.Types.getCallStack_info;
 },
 sat_s2bU_entry() //  [R1]
         { info_tbl: [(c2mT,
                       label: sat_s2bU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mU; else goto c2mV;
       c2mU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Stack.Types.getCallStack_entry() //  [R2]
         { info_tbl: [(c2n1,
                       label: GHC.Stack.Types.getCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n2; else goto u2nf;
       c2n2: // global
           R2 = R2;
           R1 = GHC.Stack.Types.getCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u2nf: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c2mG() args: 0, res: 0, upd: 0;
     }
 },
 _c2mG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mG: // global
           _s2bO::P64 = P64[Sp];
           I64[Sp] = block_c2mJ_info;
           R1 = _s2bO::P64;
           if (R1 & 7 != 0) goto u2nh; else goto c2mK;
       u2nh: // global
           call _c2mJ(R1) args: 0, res: 0, upd: 0;
       c2mK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mJ() //  [R1]
         { info_tbl: [(c2mJ,
                       label: block_c2mJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mJ: // global
           _c2n0::P64 = R1 & 7;
           if (_c2n0::P64 < 3) goto u2ne; else goto c2mZ;
       u2ne: // global
           if (_c2n0::P64 < 2) goto c2mX; else goto c2mY;
       c2mX: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2na; else goto c2n9;
       c2na: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n9: // global
           _s2bQ::P64 = P64[R1 + 6];
           _s2bR::P64 = P64[R1 + 14];
           _s2bS::P64 = P64[R1 + 22];
           I64[Hp - 64] = sat_s2bU_info;
           P64[Hp - 48] = _s2bS::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bQ::P64;
           P64[Hp - 24] = _s2bR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mZ: // global
           P64[Sp] = P64[R1 + 5];
           call _c2mG() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.050716975 UTC

[section ""data" . GHC.Stack.Types.fromCallSiteList_closure" {
     GHC.Stack.Types.fromCallSiteList_closure:
         const GHC.Stack.Types.fromCallSiteList_info;
 },
 sat_s2c3_entry() //  [R1]
         { info_tbl: [(c2nD,
                       label: sat_s2c3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nE; else goto c2nF;
       c2nE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Stack.Types.fromCallSiteList_entry() //  [R2]
         { info_tbl: [(c2nK,
                       label: GHC.Stack.Types.fromCallSiteList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nL; else goto c2nM;
       c2nL: // global
           R2 = R2;
           R1 = GHC.Stack.Types.fromCallSiteList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nM: // global
           I64[Sp - 8] = block_c2no_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nV; else goto c2np;
       u2nV: // global
           call _c2no(R1) args: 0, res: 0, upd: 0;
       c2np: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2no() //  [R1]
         { info_tbl: [(c2no,
                       label: block_c2no_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2no: // global
           if (R1 & 7 == 1) goto c2nH; else goto c2nI;
       c2nH: // global
           R1 = GHC.Stack.Types.EmptyCallStack_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nI: // global
           I64[Sp - 8] = block_c2nu_info;
           _s2bZ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2bZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nU; else goto c2nv;
       u2nU: // global
           call _c2nu(R1) args: 0, res: 0, upd: 0;
       c2nv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nu() //  [R1]
         { info_tbl: [(c2nu,
                       label: block_c2nu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2nT; else goto c2nS;
       c2nT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2nS: // global
           _s2c1::P64 = P64[R1 + 7];
           _s2c2::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2c3_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = _s2c1::P64;
           P64[Hp - 8] = _s2c2::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.05288915 UTC

[section ""data" . GHC.Stack.Types.pushCallStack_closure" {
     GHC.Stack.Types.pushCallStack_closure:
         const GHC.Stack.Types.pushCallStack_info;
 },
 GHC.Stack.Types.pushCallStack_entry() //  [R2, R3]
         { info_tbl: [(c2o3,
                       label: GHC.Stack.Types.pushCallStack_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2o3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2o4; else goto c2o5;
       c2o4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.pushCallStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2o5: // global
           I64[Sp - 16] = block_c2o0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2oq; else goto c2o1;
       u2oq: // global
           call _c2o0(R1) args: 0, res: 0, upd: 0;
       c2o1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2o0() //  [R1]
         { info_tbl: [(c2o0,
                       label: block_c2o0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2o0: // global
           I64[Sp - 8] = block_c2o8_info;
           _s2c7::P64 = P64[R1 + 7];
           _s2c8::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2c8::P64;
           P64[Sp + 8] = _s2c7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2op; else goto c2oa;
       u2op: // global
           call _c2o8(R1) args: 0, res: 0, upd: 0;
       c2oa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2o8() //  [R1]
         { info_tbl: [(c2o8,
                       label: block_c2o8_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2o8: // global
           if (R1 & 7 == 3) goto c2on; else goto c2og;
       c2on: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2og: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2oj; else goto c2oi;
       c2oj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2oi: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.054379114 UTC

[section ""data" . GHC.Stack.Types.emptyCallStack_closure" {
     GHC.Stack.Types.emptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.055161219 UTC

[section ""data" . GHC.Stack.Types.freezeCallStack_closure" {
     GHC.Stack.Types.freezeCallStack_closure:
         const GHC.Stack.Types.freezeCallStack_info;
 },
 GHC.Stack.Types.freezeCallStack_entry() //  [R2]
         { info_tbl: [(c2ow,
                       label: GHC.Stack.Types.freezeCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ow: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2oA; else goto c2oz;
       c2oA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.freezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2oz: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.056448896 UTC

[section ""cstring" . GHC.Stack.Types.$trModule4_bytes" {
     GHC.Stack.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.057037633 UTC

[section ""data" . GHC.Stack.Types.$trModule3_closure" {
     GHC.Stack.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.057689587 UTC

[section ""cstring" . GHC.Stack.Types.$trModule2_bytes" {
     GHC.Stack.Types.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107,46,84,121,112,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.058252513 UTC

[section ""data" . GHC.Stack.Types.$trModule1_closure" {
     GHC.Stack.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.058815752 UTC

[section ""data" . GHC.Stack.Types.$trModule_closure" {
     GHC.Stack.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.Types.$trModule3_closure+1;
         const GHC.Stack.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.059388341 UTC

[section ""data" . $krep_r29X_closure" {
     $krep_r29X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.060009712 UTC

[section ""data" . $krep1_r29Y_closure" {
     $krep1_r29Y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.060613289 UTC

[section ""data" . $krep2_r29Z_closure" {
     $krep2_r29Z_closure:
         const :_con_info;
         const $krep1_r29Y_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.061598459 UTC

[section ""data" . $krep3_r2a0_closure" {
     $krep3_r2a0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r29Z_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.062184928 UTC

[section ""cstring" . GHC.Stack.Types.$tcSrcLoc2_bytes" {
     GHC.Stack.Types.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.062724958 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc1_closure" {
     GHC.Stack.Types.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcSrcLoc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.063278743 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc_closure" {
     GHC.Stack.Types.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11659135446504247116;
         const 7996606469851030013;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.063893982 UTC

[section ""data" . $krep4_r2a1_closure" {
     $krep4_r2a1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.064455589 UTC

[section ""data" . $krep5_r2a2_closure" {
     $krep5_r2a2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep4_r2a1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.065034041 UTC

[section ""data" . $krep6_r2a3_closure" {
     $krep6_r2a3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep5_r2a2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.066920967 UTC

[section ""data" . $krep7_r2a4_closure" {
     $krep7_r2a4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep6_r2a3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.067816826 UTC

[section ""data" . $krep8_r2a5_closure" {
     $krep8_r2a5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep7_r2a4_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.068434309 UTC

[section ""data" . $krep9_r2a6_closure" {
     $krep9_r2a6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep8_r2a5_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.069097225 UTC

[section ""data" . $krep10_r2a7_closure" {
     $krep10_r2a7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep9_r2a6_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.069679077 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc1_closure" {
     GHC.Stack.Types.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep10_r2a7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.070251325 UTC

[section ""cstring" . GHC.Stack.Types.$tc'SrcLoc3_bytes" {
     GHC.Stack.Types.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.070810772 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc2_closure" {
     GHC.Stack.Types.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'SrcLoc3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.071379067 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc_closure" {
     GHC.Stack.Types.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc2_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc1_closure+4;
         const 13956426263269302848;
         const 15330088913444129695;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.071997579 UTC

[section ""cstring" . GHC.Stack.Types.$tcCallStack2_bytes" {
     GHC.Stack.Types.$tcCallStack2_bytes:
         I8[] [67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.072793556 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack1_closure" {
     GHC.Stack.Types.$tcCallStack1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcCallStack2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.073524042 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack_closure" {
     GHC.Stack.Types.$tcCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcCallStack1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9079156173149315555;
         const 7592677015683705484;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.074120617 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack1_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcCallStack_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.074663234 UTC

[section ""cstring" . GHC.Stack.Types.$tc'EmptyCallStack3_bytes" {
     GHC.Stack.Types.$tc'EmptyCallStack3_bytes:
         I8[] [39,69,109,112,116,121,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.075216667 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack2_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.075981461 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack2_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 4745696424279029534;
         const 621383300069717314;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.076587989 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack1_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.077165998 UTC

[section ""cstring" . GHC.Stack.Types.$tc'FreezeCallStack3_bytes" {
     GHC.Stack.Types.$tc'FreezeCallStack3_bytes:
         I8[] [39,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.078196958 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack2_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'FreezeCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.07882498 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack2_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 13172881767820002692;
         const 8012125741085098641;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.079444275 UTC

[section ""data" . $krep11_r2a8_closure" {
     $krep11_r2a8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r2a1_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.080104559 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack1_closure" {
     GHC.Stack.Types.$tc'PushCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep11_r2a8_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.080720379 UTC

[section ""cstring" . GHC.Stack.Types.$tc'PushCallStack3_bytes" {
     GHC.Stack.Types.$tc'PushCallStack3_bytes:
         I8[] [39,80,117,115,104,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.081399839 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack2_closure" {
     GHC.Stack.Types.$tc'PushCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'PushCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.082005194 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack_closure" {
     GHC.Stack.Types.$tc'PushCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack2_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack1_closure+4;
         const 11257300383724147409;
         const 9589391422293138004;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.083119258 UTC

[section ""data" . GHC.Stack.Types.EmptyCallStack_closure" {
     GHC.Stack.Types.EmptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.084185122 UTC

[section ""data" . GHC.Stack.Types.PushCallStack_closure" {
     GHC.Stack.Types.PushCallStack_closure:
         const GHC.Stack.Types.PushCallStack_info;
 },
 GHC.Stack.Types.PushCallStack_entry() //  [R2, R3, R4]
         { info_tbl: [(c2oG,
                       label: GHC.Stack.Types.PushCallStack_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2oG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2oK; else goto c2oJ;
       c2oK: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.PushCallStack_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2oJ: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.08536614 UTC

[section ""data" . GHC.Stack.Types.FreezeCallStack_closure" {
     GHC.Stack.Types.FreezeCallStack_closure:
         const GHC.Stack.Types.FreezeCallStack_info;
 },
 GHC.Stack.Types.FreezeCallStack_entry() //  [R2]
         { info_tbl: [(c2oQ,
                       label: GHC.Stack.Types.FreezeCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2oQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2oU; else goto c2oT;
       c2oU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.FreezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2oT: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.086528366 UTC

[section ""data" . GHC.Stack.Types.SrcLoc_closure" {
     GHC.Stack.Types.SrcLoc_closure:
         const GHC.Stack.Types.SrcLoc_info;
 },
 GHC.Stack.Types.SrcLoc_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2oW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stack.Types.SrcLoc_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Stack.Types.SrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c2p1,
                       label: GHC.Stack.Types.SrcLoc_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2p1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2p5; else goto c2p4;
       c2p5: // global
           HpAlloc = 64;
           R1 = GHC.Stack.Types.SrcLoc_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2p4: // global
           I64[Hp - 56] = GHC.Stack.Types.SrcLoc_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.08777118 UTC

[GHC.Stack.Types.EmptyCallStack_con_entry() //  [R1]
         { info_tbl: [(c2p6,
                       label: GHC.Stack.Types.EmptyCallStack_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,69,109,112,116,121,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2p6: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.088509396 UTC

[GHC.Stack.Types.PushCallStack_con_entry() //  [R1]
         { info_tbl: [(c2p8,
                       label: GHC.Stack.Types.PushCallStack_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,80,117,115,104,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2p8: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.089638254 UTC

[GHC.Stack.Types.FreezeCallStack_con_entry() //  [R1]
         { info_tbl: [(c2pa,
                       label: GHC.Stack.Types.FreezeCallStack_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2pa: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.090366118 UTC

[GHC.Stack.Types.SrcLoc_con_entry() //  [R1]
         { info_tbl: [(c2pc,
                       label: GHC.Stack.Types.SrcLoc_con_info
                       rep:HeapRep 7 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,83,114,99,76,111,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2pc: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.091135911 UTC

[section ""relreadonly" . S2iF_srt" { S2iF_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.092025597 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:39.094721959 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c==_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c==_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c==_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c==_entry() //  [R2, R3]
         { info_tbl: [(c2pl,
                       label: GHC.Stack.Types.$fEqSrcLoc_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2pl: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2pp; else goto c2pq;
       c2pp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2pq: // global
           I64[Sp - 16] = block_c2pi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2r7; else goto c2pj;
       u2r7: // global
           call _c2pi(R1) args: 0, res: 0, upd: 0;
       c2pj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2pi() //  [R1]
         { info_tbl: [(c2pi,
                       label: block_c2pi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2pi: // global
           I64[Sp - 48] = block_c2po_info;
           _s2ad::P64 = P64[R1 + 7];
           _s2ae::P64 = P64[R1 + 15];
           _s2af::P64 = P64[R1 + 23];
           _s2ag::P64 = P64[R1 + 31];
           _s2ah::P64 = P64[R1 + 39];
           _s2ai::P64 = P64[R1 + 47];
           _s2aj::P64 = P64[R1 + 55];
           R1 = P64[Sp + 8];
           P64[Sp - 40] = _s2af::P64;
           P64[Sp - 32] = _s2ag::P64;
           P64[Sp - 24] = _s2ah::P64;
           P64[Sp - 16] = _s2ai::P64;
           P64[Sp - 8] = _s2aj::P64;
           P64[Sp] = _s2ae::P64;
           P64[Sp + 8] = _s2ad::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2r6; else goto c2ps;
       u2r6: // global
           call _c2po(R1) args: 0, res: 0, upd: 0;
       c2ps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2po() //  [R1]
         { info_tbl: [(c2po,
                       label: block_c2po_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2po: // global
           I64[Sp - 40] = block_c2pw_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 56];
           P64[Sp - 32] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 56] = P64[R1 + 15];
           Sp = Sp - 40;
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2pw() //  [R1]
         { info_tbl: [(c2pw,
                       label: block_c2pw_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2pw: // global
           if (R1 & 7 == 1) goto u2r0; else goto c2pI;
       u2r0: // global
           Sp = Sp + 104;
           call _c2qV() args: 0, res: 0, upd: 0;
       c2pI: // global
           I64[Sp] = block_c2pG_info;
           R3 = P64[Sp + 96];
           R2 = P64[Sp + 88];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2pG() //  [R1]
         { info_tbl: [(c2pG,
                       label: block_c2pG_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2pG: // global
           if (R1 & 7 == 1) goto u2r1; else goto c2pT;
       u2r1: // global
           Sp = Sp + 104;
           call _c2qV() args: 0, res: 0, upd: 0;
       c2pT: // global
           I64[Sp] = block_c2pR_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2pR() //  [R1]
         { info_tbl: [(c2pR,
                       label: block_c2pR_info
                       rep:StackRep [False, False, False, False, True, True, False, False,
                                     False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2pR: // global
           if (R1 & 7 == 1) goto u2r2; else goto c2q9;
       u2r2: // global
           Sp = Sp + 104;
           call _c2qV() args: 0, res: 0, upd: 0;
       c2q9: // global
           I64[Sp] = block_c2q2_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2ra; else goto c2q3;
       u2ra: // global
           call _c2q2(R1) args: 0, res: 0, upd: 0;
       c2q3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2q2() //  [R1]
         { info_tbl: [(c2q2,
                       label: block_c2q2_info
                       rep:StackRep [False, False, False, False, True, True, True, False,
                                     False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2q2: // global
           _s2ao::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2q7_info;
           _s2aw::I64 = I64[R1 + 7];
           R1 = _s2ao::P64;
           I64[Sp + 96] = _s2aw::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2rc; else goto c2qb;
       u2rc: // global
           call _c2q7(R1) args: 0, res: 0, upd: 0;
       c2qb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2q7() //  [R1]
         { info_tbl: [(c2q7,
                       label: block_c2q7_info
                       rep:StackRep [False, False, False, True, True, True, False, False,
                                     False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2q7: // global
           if (I64[Sp + 88] == I64[R1 + 7]) goto c2qs; else goto u2r3;
       c2qs: // global
           I64[Sp] = block_c2qm_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2rd; else goto c2qn;
       u2rd: // global
           call _c2qm(R1) args: 0, res: 0, upd: 0;
       c2qn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2r3: // global
           Sp = Sp + 96;
           call _c2qV() args: 0, res: 0, upd: 0;
     }
 },
 _c2qm() //  [R1]
         { info_tbl: [(c2qm,
                       label: block_c2qm_info
                       rep:StackRep [False, False, False, True, True, True, True, False,
                                     False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2qm: // global
           _s2ap::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2qr_info;
           _s2aB::I64 = I64[R1 + 7];
           R1 = _s2ap::P64;
           I64[Sp + 88] = _s2aB::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2rf; else goto c2qu;
       u2rf: // global
           call _c2qr(R1) args: 0, res: 0, upd: 0;
       c2qu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2qr() //  [R1]
         { info_tbl: [(c2qr,
                       label: block_c2qr_info
                       rep:StackRep [False, False, True, True, True, True, False, False,
                                     True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2qr: // global
           if (I64[Sp + 80] == I64[R1 + 7]) goto c2qL; else goto u2r4;
       c2qL: // global
           I64[Sp] = block_c2qF_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2rg; else goto c2qG;
       u2rg: // global
           call _c2qF(R1) args: 0, res: 0, upd: 0;
       c2qG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2r4: // global
           Sp = Sp + 88;
           call _c2qV() args: 0, res: 0, upd: 0;
     }
 },
 _c2qF() //  [R1]
         { info_tbl: [(c2qF,
                       label: block_c2qF_info
                       rep:StackRep [False, False, True, True, True, True, True, False,
                                     True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2qF: // global
           _s2aq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2qK_info;
           _s2aG::I64 = I64[R1 + 7];
           R1 = _s2aq::P64;
           I64[Sp + 80] = _s2aG::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2ri; else goto c2qN;
       u2ri: // global
           call _c2qK(R1) args: 0, res: 0, upd: 0;
       c2qN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2qK() //  [R1]
         { info_tbl: [(c2qK,
                       label: block_c2qK_info
                       rep:StackRep [False, True, True, True, True, True, False, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2qK: // global
           if (I64[Sp + 72] == I64[R1 + 7]) goto c2qW; else goto u2r5;
       c2qW: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 80;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2r5: // global
           Sp = Sp + 80;
           call _c2qV() args: 0, res: 0, upd: 0;
     }
 },
 _c2qV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2qV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.125865343 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c/=_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c/=_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c2sw,
                       label: GHC.Stack.Types.$fEqSrcLoc_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2sw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2sx; else goto c2sy;
       c2sx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2sy: // global
           I64[Sp - 8] = block_c2sq_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.$fEqSrcLoc_$c==_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2sq() //  [R1]
         { info_tbl: [(c2sq,
                       label: block_c2sq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2sq: // global
           if (R1 & 7 == 1) goto c2st; else goto c2su;
       c2st: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2su: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.131528189 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_closure" {
     GHC.Stack.Types.$fEqSrcLoc_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Stack.Types.$fEqSrcLoc_$c==_closure+2;
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.133482278 UTC

[section ""data" . GHC.Stack.Types.srcLocEndCol_closure" {
     GHC.Stack.Types.srcLocEndCol_closure:
         const GHC.Stack.Types.srcLocEndCol_info;
 },
 GHC.Stack.Types.srcLocEndCol_entry() //  [R2]
         { info_tbl: [(c2sZ,
                       label: GHC.Stack.Types.srcLocEndCol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2sZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2t0; else goto c2t1;
       c2t0: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2t1: // global
           I64[Sp - 8] = block_c2sW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2t5; else goto c2sX;
       u2t5: // global
           call _c2sW(R1) args: 0, res: 0, upd: 0;
       c2sX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2sW() //  [R1]
         { info_tbl: [(c2sW,
                       label: block_c2sW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2sW: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.13871783 UTC

[section ""data" . GHC.Stack.Types.srcLocEndLine_closure" {
     GHC.Stack.Types.srcLocEndLine_closure:
         const GHC.Stack.Types.srcLocEndLine_info;
 },
 GHC.Stack.Types.srcLocEndLine_entry() //  [R2]
         { info_tbl: [(c2to,
                       label: GHC.Stack.Types.srcLocEndLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2to: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2tp; else goto c2tq;
       c2tp: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2tq: // global
           I64[Sp - 8] = block_c2tl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2tu; else goto c2tm;
       u2tu: // global
           call _c2tl(R1) args: 0, res: 0, upd: 0;
       c2tm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2tl() //  [R1]
         { info_tbl: [(c2tl,
                       label: block_c2tl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2tl: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.144456485 UTC

[section ""data" . GHC.Stack.Types.srcLocStartCol_closure" {
     GHC.Stack.Types.srcLocStartCol_closure:
         const GHC.Stack.Types.srcLocStartCol_info;
 },
 GHC.Stack.Types.srcLocStartCol_entry() //  [R2]
         { info_tbl: [(c2tN,
                       label: GHC.Stack.Types.srcLocStartCol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2tN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2tO; else goto c2tP;
       c2tO: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2tP: // global
           I64[Sp - 8] = block_c2tK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2tT; else goto c2tL;
       u2tT: // global
           call _c2tK(R1) args: 0, res: 0, upd: 0;
       c2tL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2tK() //  [R1]
         { info_tbl: [(c2tK,
                       label: block_c2tK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2tK: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.149834608 UTC

[section ""data" . GHC.Stack.Types.srcLocStartLine_closure" {
     GHC.Stack.Types.srcLocStartLine_closure:
         const GHC.Stack.Types.srcLocStartLine_info;
 },
 GHC.Stack.Types.srcLocStartLine_entry() //  [R2]
         { info_tbl: [(c2uc,
                       label: GHC.Stack.Types.srcLocStartLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2uc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ud; else goto c2ue;
       c2ud: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ue: // global
           I64[Sp - 8] = block_c2u9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ui; else goto c2ua;
       u2ui: // global
           call _c2u9(R1) args: 0, res: 0, upd: 0;
       c2ua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2u9() //  [R1]
         { info_tbl: [(c2u9,
                       label: block_c2u9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2u9: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.155168952 UTC

[section ""data" . GHC.Stack.Types.srcLocFile_closure" {
     GHC.Stack.Types.srcLocFile_closure:
         const GHC.Stack.Types.srcLocFile_info;
 },
 GHC.Stack.Types.srcLocFile_entry() //  [R2]
         { info_tbl: [(c2uB,
                       label: GHC.Stack.Types.srcLocFile_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2uB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2uC; else goto c2uD;
       c2uC: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2uD: // global
           I64[Sp - 8] = block_c2uy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2uH; else goto c2uz;
       u2uH: // global
           call _c2uy(R1) args: 0, res: 0, upd: 0;
       c2uz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2uy() //  [R1]
         { info_tbl: [(c2uy,
                       label: block_c2uy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2uy: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.160366424 UTC

[section ""data" . GHC.Stack.Types.srcLocModule_closure" {
     GHC.Stack.Types.srcLocModule_closure:
         const GHC.Stack.Types.srcLocModule_info;
 },
 GHC.Stack.Types.srcLocModule_entry() //  [R2]
         { info_tbl: [(c2v0,
                       label: GHC.Stack.Types.srcLocModule_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2v0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2v1; else goto c2v2;
       c2v1: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocModule_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2v2: // global
           I64[Sp - 8] = block_c2uX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2v6; else goto c2uY;
       u2v6: // global
           call _c2uX(R1) args: 0, res: 0, upd: 0;
       c2uY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2uX() //  [R1]
         { info_tbl: [(c2uX,
                       label: block_c2uX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2uX: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.165604764 UTC

[section ""data" . GHC.Stack.Types.srcLocPackage_closure" {
     GHC.Stack.Types.srcLocPackage_closure:
         const GHC.Stack.Types.srcLocPackage_info;
 },
 GHC.Stack.Types.srcLocPackage_entry() //  [R2]
         { info_tbl: [(c2vp,
                       label: GHC.Stack.Types.srcLocPackage_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2vp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2vq; else goto c2vr;
       c2vq: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocPackage_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2vr: // global
           I64[Sp - 8] = block_c2vm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2vv; else goto c2vn;
       u2vv: // global
           call _c2vm(R1) args: 0, res: 0, upd: 0;
       c2vn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2vm() //  [R1]
         { info_tbl: [(c2vm,
                       label: block_c2vm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2vm: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.171357448 UTC

[section ""data" . GHC.Stack.Types.getCallStack_closure" {
     GHC.Stack.Types.getCallStack_closure:
         const GHC.Stack.Types.getCallStack_info;
 },
 sat_s2bU_entry() //  [R1]
         { info_tbl: [(c2vV,
                       label: sat_s2bU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2vV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2vW; else goto c2vX;
       c2vW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2vX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Stack.Types.getCallStack_entry() //  [R2]
         { info_tbl: [(c2w3,
                       label: GHC.Stack.Types.getCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2w3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2w4; else goto u2wh;
       c2w4: // global
           R2 = R2;
           R1 = GHC.Stack.Types.getCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u2wh: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c2vI() args: 0, res: 0, upd: 0;
     }
 },
 _c2vI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2vI: // global
           _s2bO::P64 = P64[Sp];
           I64[Sp] = block_c2vL_info;
           R1 = _s2bO::P64;
           if (R1 & 7 != 0) goto u2wj; else goto c2vM;
       u2wj: // global
           call _c2vL(R1) args: 0, res: 0, upd: 0;
       c2vM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2vL() //  [R1]
         { info_tbl: [(c2vL,
                       label: block_c2vL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2vL: // global
           _c2w2::P64 = R1 & 7;
           if (_c2w2::P64 < 3) goto u2wg; else goto c2w1;
       u2wg: // global
           if (_c2w2::P64 < 2) goto c2vZ; else goto c2w0;
       c2vZ: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2w0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2wc; else goto c2wb;
       c2wc: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2wb: // global
           _s2bQ::P64 = P64[R1 + 6];
           _s2bR::P64 = P64[R1 + 14];
           _s2bS::P64 = P64[R1 + 22];
           I64[Hp - 64] = sat_s2bU_info;
           P64[Hp - 48] = _s2bS::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bQ::P64;
           P64[Hp - 24] = _s2bR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2w1: // global
           P64[Sp] = P64[R1 + 5];
           call _c2vI() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.180914591 UTC

[section ""data" . GHC.Stack.Types.fromCallSiteList_closure" {
     GHC.Stack.Types.fromCallSiteList_closure:
         const GHC.Stack.Types.fromCallSiteList_info;
 },
 sat_s2c3_entry() //  [R1]
         { info_tbl: [(c2x0,
                       label: sat_s2c3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2x0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2x1; else goto c2x2;
       c2x1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2x2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Stack.Types.fromCallSiteList_entry() //  [R2]
         { info_tbl: [(c2x7,
                       label: GHC.Stack.Types.fromCallSiteList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2x7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2x8; else goto c2x9;
       c2x8: // global
           R2 = R2;
           R1 = GHC.Stack.Types.fromCallSiteList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2x9: // global
           I64[Sp - 8] = block_c2wL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2xi; else goto c2wM;
       u2xi: // global
           call _c2wL(R1) args: 0, res: 0, upd: 0;
       c2wM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2wL() //  [R1]
         { info_tbl: [(c2wL,
                       label: block_c2wL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2wL: // global
           if (R1 & 7 == 1) goto c2x4; else goto c2x5;
       c2x4: // global
           R1 = GHC.Stack.Types.EmptyCallStack_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2x5: // global
           I64[Sp - 8] = block_c2wR_info;
           _s2bZ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2bZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2xh; else goto c2wS;
       u2xh: // global
           call _c2wR(R1) args: 0, res: 0, upd: 0;
       c2wS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2wR() //  [R1]
         { info_tbl: [(c2wR,
                       label: block_c2wR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2wR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2xg; else goto c2xf;
       c2xg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2xf: // global
           _s2c1::P64 = P64[R1 + 7];
           _s2c2::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2c3_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = _s2c1::P64;
           P64[Hp - 8] = _s2c2::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.190844212 UTC

[section ""data" . GHC.Stack.Types.pushCallStack_closure" {
     GHC.Stack.Types.pushCallStack_closure:
         const GHC.Stack.Types.pushCallStack_info;
 },
 GHC.Stack.Types.pushCallStack_entry() //  [R2, R3]
         { info_tbl: [(c2xN,
                       label: GHC.Stack.Types.pushCallStack_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2xN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2xO; else goto c2xP;
       c2xO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.pushCallStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2xP: // global
           I64[Sp - 16] = block_c2xK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ya; else goto c2xL;
       u2ya: // global
           call _c2xK(R1) args: 0, res: 0, upd: 0;
       c2xL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2xK() //  [R1]
         { info_tbl: [(c2xK,
                       label: block_c2xK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2xK: // global
           I64[Sp - 8] = block_c2xS_info;
           _s2c7::P64 = P64[R1 + 7];
           _s2c8::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2c8::P64;
           P64[Sp + 8] = _s2c7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2y9; else goto c2xU;
       u2y9: // global
           call _c2xS(R1) args: 0, res: 0, upd: 0;
       c2xU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2xS() //  [R1]
         { info_tbl: [(c2xS,
                       label: block_c2xS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2xS: // global
           if (R1 & 7 == 3) goto c2y7; else goto c2y0;
       c2y7: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2y0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2y3; else goto c2y2;
       c2y3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2y2: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.199070381 UTC

[section ""data" . GHC.Stack.Types.emptyCallStack_closure" {
     GHC.Stack.Types.emptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.200883102 UTC

[section ""data" . GHC.Stack.Types.freezeCallStack_closure" {
     GHC.Stack.Types.freezeCallStack_closure:
         const GHC.Stack.Types.freezeCallStack_info;
 },
 GHC.Stack.Types.freezeCallStack_entry() //  [R2]
         { info_tbl: [(c2yB,
                       label: GHC.Stack.Types.freezeCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2yB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2yF; else goto c2yE;
       c2yF: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.freezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2yE: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.204501826 UTC

[section ""cstring" . GHC.Stack.Types.$trModule4_bytes" {
     GHC.Stack.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.206210955 UTC

[section ""data" . GHC.Stack.Types.$trModule3_closure" {
     GHC.Stack.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.207903576 UTC

[section ""cstring" . GHC.Stack.Types.$trModule2_bytes" {
     GHC.Stack.Types.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107,46,84,121,112,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.209554283 UTC

[section ""data" . GHC.Stack.Types.$trModule1_closure" {
     GHC.Stack.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.21216416 UTC

[section ""data" . GHC.Stack.Types.$trModule_closure" {
     GHC.Stack.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.Types.$trModule3_closure+1;
         const GHC.Stack.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.214013429 UTC

[section ""data" . $krep_r29X_closure" {
     $krep_r29X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.215725895 UTC

[section ""data" . $krep1_r29Y_closure" {
     $krep1_r29Y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.217587164 UTC

[section ""data" . $krep2_r29Z_closure" {
     $krep2_r29Z_closure:
         const :_con_info;
         const $krep1_r29Y_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.219231822 UTC

[section ""data" . $krep3_r2a0_closure" {
     $krep3_r2a0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r29Z_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.221086785 UTC

[section ""cstring" . GHC.Stack.Types.$tcSrcLoc2_bytes" {
     GHC.Stack.Types.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.22269838 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc1_closure" {
     GHC.Stack.Types.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcSrcLoc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.224380138 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc_closure" {
     GHC.Stack.Types.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11659135446504247116;
         const 7996606469851030013;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.226367569 UTC

[section ""data" . $krep4_r2a1_closure" {
     $krep4_r2a1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.228109674 UTC

[section ""data" . $krep5_r2a2_closure" {
     $krep5_r2a2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep4_r2a1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.230145056 UTC

[section ""data" . $krep6_r2a3_closure" {
     $krep6_r2a3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep5_r2a2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.231682523 UTC

[section ""data" . $krep7_r2a4_closure" {
     $krep7_r2a4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep6_r2a3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.233312115 UTC

[section ""data" . $krep8_r2a5_closure" {
     $krep8_r2a5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep7_r2a4_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.235060952 UTC

[section ""data" . $krep9_r2a6_closure" {
     $krep9_r2a6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep8_r2a5_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.236639137 UTC

[section ""data" . $krep10_r2a7_closure" {
     $krep10_r2a7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep9_r2a6_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.238488577 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc1_closure" {
     GHC.Stack.Types.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep10_r2a7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.240053834 UTC

[section ""cstring" . GHC.Stack.Types.$tc'SrcLoc3_bytes" {
     GHC.Stack.Types.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.241661775 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc2_closure" {
     GHC.Stack.Types.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'SrcLoc3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.243459299 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc_closure" {
     GHC.Stack.Types.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc2_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc1_closure+4;
         const 13956426263269302848;
         const 15330088913444129695;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.245231488 UTC

[section ""cstring" . GHC.Stack.Types.$tcCallStack2_bytes" {
     GHC.Stack.Types.$tcCallStack2_bytes:
         I8[] [67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.247747888 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack1_closure" {
     GHC.Stack.Types.$tcCallStack1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcCallStack2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.249455605 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack_closure" {
     GHC.Stack.Types.$tcCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcCallStack1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9079156173149315555;
         const 7592677015683705484;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.251289146 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack1_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcCallStack_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.253189224 UTC

[section ""cstring" . GHC.Stack.Types.$tc'EmptyCallStack3_bytes" {
     GHC.Stack.Types.$tc'EmptyCallStack3_bytes:
         I8[] [39,69,109,112,116,121,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.254921777 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack2_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.256765248 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack2_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 4745696424279029534;
         const 621383300069717314;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.259688662 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack1_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.261514419 UTC

[section ""cstring" . GHC.Stack.Types.$tc'FreezeCallStack3_bytes" {
     GHC.Stack.Types.$tc'FreezeCallStack3_bytes:
         I8[] [39,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.263547781 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack2_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'FreezeCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.265183394 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack2_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 13172881767820002692;
         const 8012125741085098641;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.267284812 UTC

[section ""data" . $krep11_r2a8_closure" {
     $krep11_r2a8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r2a1_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.268860927 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack1_closure" {
     GHC.Stack.Types.$tc'PushCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep11_r2a8_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.270597638 UTC

[section ""cstring" . GHC.Stack.Types.$tc'PushCallStack3_bytes" {
     GHC.Stack.Types.$tc'PushCallStack3_bytes:
         I8[] [39,80,117,115,104,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.272331343 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack2_closure" {
     GHC.Stack.Types.$tc'PushCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'PushCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.276016299 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack_closure" {
     GHC.Stack.Types.$tc'PushCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack2_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack1_closure+4;
         const 11257300383724147409;
         const 9589391422293138004;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.278138416 UTC

[section ""data" . GHC.Stack.Types.EmptyCallStack_closure" {
     GHC.Stack.Types.EmptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.280135118 UTC

[section ""data" . GHC.Stack.Types.PushCallStack_closure" {
     GHC.Stack.Types.PushCallStack_closure:
         const GHC.Stack.Types.PushCallStack_info;
 },
 GHC.Stack.Types.PushCallStack_entry() //  [R2, R3, R4]
         { info_tbl: [(c2zu,
                       label: GHC.Stack.Types.PushCallStack_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2zu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2zy; else goto c2zx;
       c2zy: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.PushCallStack_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2zx: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.284250445 UTC

[section ""data" . GHC.Stack.Types.FreezeCallStack_closure" {
     GHC.Stack.Types.FreezeCallStack_closure:
         const GHC.Stack.Types.FreezeCallStack_info;
 },
 GHC.Stack.Types.FreezeCallStack_entry() //  [R2]
         { info_tbl: [(c2zJ,
                       label: GHC.Stack.Types.FreezeCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2zJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2zN; else goto c2zM;
       c2zN: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.FreezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2zM: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.288148871 UTC

[section ""data" . GHC.Stack.Types.SrcLoc_closure" {
     GHC.Stack.Types.SrcLoc_closure:
         const GHC.Stack.Types.SrcLoc_info;
 },
 GHC.Stack.Types.SrcLoc_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2zU: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stack.Types.SrcLoc_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Stack.Types.SrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c2zZ,
                       label: GHC.Stack.Types.SrcLoc_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2zZ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2A3; else goto c2A2;
       c2A3: // global
           HpAlloc = 64;
           R1 = GHC.Stack.Types.SrcLoc_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2A2: // global
           I64[Hp - 56] = GHC.Stack.Types.SrcLoc_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.293378113 UTC

[GHC.Stack.Types.EmptyCallStack_con_entry() //  [R1]
         { info_tbl: [(c2Ad,
                       label: GHC.Stack.Types.EmptyCallStack_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,69,109,112,116,121,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ad: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.297104379 UTC

[GHC.Stack.Types.PushCallStack_con_entry() //  [R1]
         { info_tbl: [(c2Aj,
                       label: GHC.Stack.Types.PushCallStack_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,80,117,115,104,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Aj: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.300856509 UTC

[GHC.Stack.Types.FreezeCallStack_con_entry() //  [R1]
         { info_tbl: [(c2Ap,
                       label: GHC.Stack.Types.FreezeCallStack_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ap: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.3048782 UTC

[GHC.Stack.Types.SrcLoc_con_entry() //  [R1]
         { info_tbl: [(c2Av,
                       label: GHC.Stack.Types.SrcLoc_con_info
                       rep:HeapRep 7 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,83,114,99,76,111,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Av: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.308360453 UTC

[section ""relreadonly" . S2iF_srt" { S2iF_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.70603859 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:39.709691748 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c==_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c==_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c==_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c==_entry() //  [R2, R3]
         { info_tbl: [(c2CK,
                       label: GHC.Stack.Types.$fEqSrcLoc_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2CK: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2CO; else goto c2CP;
       c2CO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2CP: // global
           I64[Sp - 16] = block_c2CH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2Ew; else goto c2CI;
       u2Ew: // global
           call _c2CH(R1) args: 0, res: 0, upd: 0;
       c2CI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2CH() //  [R1]
         { info_tbl: [(c2CH,
                       label: block_c2CH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2CH: // global
           I64[Sp - 48] = block_c2CN_info;
           _s2AF::P64 = P64[R1 + 7];
           _s2AG::P64 = P64[R1 + 15];
           _s2AH::P64 = P64[R1 + 23];
           _s2AI::P64 = P64[R1 + 31];
           _s2AJ::P64 = P64[R1 + 39];
           _s2AK::P64 = P64[R1 + 47];
           _s2AL::P64 = P64[R1 + 55];
           R1 = P64[Sp + 8];
           P64[Sp - 40] = _s2AH::P64;
           P64[Sp - 32] = _s2AI::P64;
           P64[Sp - 24] = _s2AJ::P64;
           P64[Sp - 16] = _s2AK::P64;
           P64[Sp - 8] = _s2AL::P64;
           P64[Sp] = _s2AG::P64;
           P64[Sp + 8] = _s2AF::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2Ev; else goto c2CR;
       u2Ev: // global
           call _c2CN(R1) args: 0, res: 0, upd: 0;
       c2CR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2CN() //  [R1]
         { info_tbl: [(c2CN,
                       label: block_c2CN_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2CN: // global
           I64[Sp - 40] = block_c2CV_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 56];
           P64[Sp - 32] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 56] = P64[R1 + 15];
           Sp = Sp - 40;
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2CV() //  [R1]
         { info_tbl: [(c2CV,
                       label: block_c2CV_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2CV: // global
           if (R1 & 7 == 1) goto u2Ep; else goto c2D7;
       u2Ep: // global
           Sp = Sp + 104;
           call _c2Ek() args: 0, res: 0, upd: 0;
       c2D7: // global
           I64[Sp] = block_c2D5_info;
           R3 = P64[Sp + 96];
           R2 = P64[Sp + 88];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2D5() //  [R1]
         { info_tbl: [(c2D5,
                       label: block_c2D5_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False, False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2D5: // global
           if (R1 & 7 == 1) goto u2Eq; else goto c2Di;
       u2Eq: // global
           Sp = Sp + 104;
           call _c2Ek() args: 0, res: 0, upd: 0;
       c2Di: // global
           I64[Sp] = block_c2Dg_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           call GHC.Classes.$fEqModule_$s$c==_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2Dg() //  [R1]
         { info_tbl: [(c2Dg,
                       label: block_c2Dg_info
                       rep:StackRep [False, False, False, False, True, True, False, False,
                                     False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Dg: // global
           if (R1 & 7 == 1) goto u2Er; else goto c2Dy;
       u2Er: // global
           Sp = Sp + 104;
           call _c2Ek() args: 0, res: 0, upd: 0;
       c2Dy: // global
           I64[Sp] = block_c2Dr_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2Ez; else goto c2Ds;
       u2Ez: // global
           call _c2Dr(R1) args: 0, res: 0, upd: 0;
       c2Ds: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2Dr() //  [R1]
         { info_tbl: [(c2Dr,
                       label: block_c2Dr_info
                       rep:StackRep [False, False, False, False, True, True, True, False,
                                     False, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Dr: // global
           _s2AQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2Dw_info;
           _s2AY::I64 = I64[R1 + 7];
           R1 = _s2AQ::P64;
           I64[Sp + 96] = _s2AY::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2EB; else goto c2DA;
       u2EB: // global
           call _c2Dw(R1) args: 0, res: 0, upd: 0;
       c2DA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2Dw() //  [R1]
         { info_tbl: [(c2Dw,
                       label: block_c2Dw_info
                       rep:StackRep [False, False, False, True, True, True, False, False,
                                     False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Dw: // global
           if (I64[Sp + 88] == I64[R1 + 7]) goto c2DR; else goto u2Es;
       c2DR: // global
           I64[Sp] = block_c2DL_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2EC; else goto c2DM;
       u2EC: // global
           call _c2DL(R1) args: 0, res: 0, upd: 0;
       c2DM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2Es: // global
           Sp = Sp + 96;
           call _c2Ek() args: 0, res: 0, upd: 0;
     }
 },
 _c2DL() //  [R1]
         { info_tbl: [(c2DL,
                       label: block_c2DL_info
                       rep:StackRep [False, False, False, True, True, True, True, False,
                                     False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2DL: // global
           _s2AR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2DQ_info;
           _s2B3::I64 = I64[R1 + 7];
           R1 = _s2AR::P64;
           I64[Sp + 88] = _s2B3::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2EE; else goto c2DT;
       u2EE: // global
           call _c2DQ(R1) args: 0, res: 0, upd: 0;
       c2DT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2DQ() //  [R1]
         { info_tbl: [(c2DQ,
                       label: block_c2DQ_info
                       rep:StackRep [False, False, True, True, True, True, False, False,
                                     True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2DQ: // global
           if (I64[Sp + 80] == I64[R1 + 7]) goto c2Ea; else goto u2Et;
       c2Ea: // global
           I64[Sp] = block_c2E4_info;
           R1 = P64[Sp + 56];
           if (R1 & 7 != 0) goto u2EF; else goto c2E5;
       u2EF: // global
           call _c2E4(R1) args: 0, res: 0, upd: 0;
       c2E5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2Et: // global
           Sp = Sp + 88;
           call _c2Ek() args: 0, res: 0, upd: 0;
     }
 },
 _c2E4() //  [R1]
         { info_tbl: [(c2E4,
                       label: block_c2E4_info
                       rep:StackRep [False, False, True, True, True, True, True, False,
                                     True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2E4: // global
           _s2AS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2E9_info;
           _s2B8::I64 = I64[R1 + 7];
           R1 = _s2AS::P64;
           I64[Sp + 80] = _s2B8::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2EH; else goto c2Ec;
       u2EH: // global
           call _c2E9(R1) args: 0, res: 0, upd: 0;
       c2Ec: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2E9() //  [R1]
         { info_tbl: [(c2E9,
                       label: block_c2E9_info
                       rep:StackRep [False, True, True, True, True, True, False, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2E9: // global
           if (I64[Sp + 72] == I64[R1 + 7]) goto c2El; else goto u2Eu;
       c2El: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 80;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2Eu: // global
           Sp = Sp + 80;
           call _c2Ek() args: 0, res: 0, upd: 0;
     }
 },
 _c2Ek() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ek: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.739123981 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_$c/=_closure" {
     GHC.Stack.Types.$fEqSrcLoc_$c/=_closure:
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_info;
 },
 GHC.Stack.Types.$fEqSrcLoc_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c2G7,
                       label: GHC.Stack.Types.$fEqSrcLoc_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2G7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2G8; else goto c2G9;
       c2G8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.$fEqSrcLoc_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2G9: // global
           I64[Sp - 8] = block_c2G1_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.$fEqSrcLoc_$c==_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2G1() //  [R1]
         { info_tbl: [(c2G1,
                       label: block_c2G1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2G1: // global
           if (R1 & 7 == 1) goto c2G4; else goto c2G5;
       c2G4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2G5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.745630436 UTC

[section ""data" . GHC.Stack.Types.$fEqSrcLoc_closure" {
     GHC.Stack.Types.$fEqSrcLoc_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Stack.Types.$fEqSrcLoc_$c==_closure+2;
         const GHC.Stack.Types.$fEqSrcLoc_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.747920298 UTC

[section ""data" . GHC.Stack.Types.srcLocEndCol_closure" {
     GHC.Stack.Types.srcLocEndCol_closure:
         const GHC.Stack.Types.srcLocEndCol_info;
 },
 GHC.Stack.Types.srcLocEndCol_entry() //  [R2]
         { info_tbl: [(c2GD,
                       label: GHC.Stack.Types.srcLocEndCol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2GD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2GE; else goto c2GF;
       c2GE: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2GF: // global
           I64[Sp - 8] = block_c2GA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2GJ; else goto c2GB;
       u2GJ: // global
           call _c2GA(R1) args: 0, res: 0, upd: 0;
       c2GB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2GA() //  [R1]
         { info_tbl: [(c2GA,
                       label: block_c2GA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2GA: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.754696132 UTC

[section ""data" . GHC.Stack.Types.srcLocEndLine_closure" {
     GHC.Stack.Types.srcLocEndLine_closure:
         const GHC.Stack.Types.srcLocEndLine_info;
 },
 GHC.Stack.Types.srcLocEndLine_entry() //  [R2]
         { info_tbl: [(c2H3,
                       label: GHC.Stack.Types.srcLocEndLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2H3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2H4; else goto c2H5;
       c2H4: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocEndLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2H5: // global
           I64[Sp - 8] = block_c2H0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2H9; else goto c2H1;
       u2H9: // global
           call _c2H0(R1) args: 0, res: 0, upd: 0;
       c2H1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2H0() //  [R1]
         { info_tbl: [(c2H0,
                       label: block_c2H0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2H0: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.760836455 UTC

[section ""data" . GHC.Stack.Types.srcLocStartCol_closure" {
     GHC.Stack.Types.srcLocStartCol_closure:
         const GHC.Stack.Types.srcLocStartCol_info;
 },
 GHC.Stack.Types.srcLocStartCol_entry() //  [R2]
         { info_tbl: [(c2Ht,
                       label: GHC.Stack.Types.srcLocStartCol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ht: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2Hu; else goto c2Hv;
       c2Hu: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartCol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2Hv: // global
           I64[Sp - 8] = block_c2Hq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2Hz; else goto c2Hr;
       u2Hz: // global
           call _c2Hq(R1) args: 0, res: 0, upd: 0;
       c2Hr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2Hq() //  [R1]
         { info_tbl: [(c2Hq,
                       label: block_c2Hq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Hq: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.767761146 UTC

[section ""data" . GHC.Stack.Types.srcLocStartLine_closure" {
     GHC.Stack.Types.srcLocStartLine_closure:
         const GHC.Stack.Types.srcLocStartLine_info;
 },
 GHC.Stack.Types.srcLocStartLine_entry() //  [R2]
         { info_tbl: [(c2HT,
                       label: GHC.Stack.Types.srcLocStartLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2HT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2HU; else goto c2HV;
       c2HU: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocStartLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2HV: // global
           I64[Sp - 8] = block_c2HQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2HZ; else goto c2HR;
       u2HZ: // global
           call _c2HQ(R1) args: 0, res: 0, upd: 0;
       c2HR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2HQ() //  [R1]
         { info_tbl: [(c2HQ,
                       label: block_c2HQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2HQ: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.774700975 UTC

[section ""data" . GHC.Stack.Types.srcLocFile_closure" {
     GHC.Stack.Types.srcLocFile_closure:
         const GHC.Stack.Types.srcLocFile_info;
 },
 GHC.Stack.Types.srcLocFile_entry() //  [R2]
         { info_tbl: [(c2Ij,
                       label: GHC.Stack.Types.srcLocFile_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ij: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2Ik; else goto c2Il;
       c2Ik: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2Il: // global
           I64[Sp - 8] = block_c2Ig_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2Ip; else goto c2Ih;
       u2Ip: // global
           call _c2Ig(R1) args: 0, res: 0, upd: 0;
       c2Ih: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2Ig() //  [R1]
         { info_tbl: [(c2Ig,
                       label: block_c2Ig_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ig: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.781640311 UTC

[section ""data" . GHC.Stack.Types.srcLocModule_closure" {
     GHC.Stack.Types.srcLocModule_closure:
         const GHC.Stack.Types.srcLocModule_info;
 },
 GHC.Stack.Types.srcLocModule_entry() //  [R2]
         { info_tbl: [(c2IJ,
                       label: GHC.Stack.Types.srcLocModule_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2IJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2IK; else goto c2IL;
       c2IK: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocModule_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2IL: // global
           I64[Sp - 8] = block_c2IG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2IP; else goto c2IH;
       u2IP: // global
           call _c2IG(R1) args: 0, res: 0, upd: 0;
       c2IH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2IG() //  [R1]
         { info_tbl: [(c2IG,
                       label: block_c2IG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2IG: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.788028962 UTC

[section ""data" . GHC.Stack.Types.srcLocPackage_closure" {
     GHC.Stack.Types.srcLocPackage_closure:
         const GHC.Stack.Types.srcLocPackage_info;
 },
 GHC.Stack.Types.srcLocPackage_entry() //  [R2]
         { info_tbl: [(c2J9,
                       label: GHC.Stack.Types.srcLocPackage_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2J9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2Ja; else goto c2Jb;
       c2Ja: // global
           R2 = R2;
           R1 = GHC.Stack.Types.srcLocPackage_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2Jb: // global
           I64[Sp - 8] = block_c2J6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2Jf; else goto c2J7;
       u2Jf: // global
           call _c2J6(R1) args: 0, res: 0, upd: 0;
       c2J7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2J6() //  [R1]
         { info_tbl: [(c2J6,
                       label: block_c2J6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2J6: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.795422881 UTC

[section ""data" . GHC.Stack.Types.getCallStack_closure" {
     GHC.Stack.Types.getCallStack_closure:
         const GHC.Stack.Types.getCallStack_info;
 },
 sat_s2Cm_entry() //  [R1]
         { info_tbl: [(c2JG,
                       label: sat_s2Cm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2JG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2JH; else goto c2JI;
       c2JH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2JI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Stack.Types.getCallStack_entry() //  [R2]
         { info_tbl: [(c2JO,
                       label: GHC.Stack.Types.getCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2JO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2JP; else goto u2K2;
       c2JP: // global
           R2 = R2;
           R1 = GHC.Stack.Types.getCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u2K2: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c2Jt() args: 0, res: 0, upd: 0;
     }
 },
 _c2Jt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Jt: // global
           _s2Cg::P64 = P64[Sp];
           I64[Sp] = block_c2Jw_info;
           R1 = _s2Cg::P64;
           if (R1 & 7 != 0) goto u2K4; else goto c2Jx;
       u2K4: // global
           call _c2Jw(R1) args: 0, res: 0, upd: 0;
       c2Jx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2Jw() //  [R1]
         { info_tbl: [(c2Jw,
                       label: block_c2Jw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Jw: // global
           _c2JN::P64 = R1 & 7;
           if (_c2JN::P64 < 3) goto u2K1; else goto c2JM;
       u2K1: // global
           if (_c2JN::P64 < 2) goto c2JK; else goto c2JL;
       c2JK: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2JL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2JX; else goto c2JW;
       c2JX: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2JW: // global
           _s2Ci::P64 = P64[R1 + 6];
           _s2Cj::P64 = P64[R1 + 14];
           _s2Ck::P64 = P64[R1 + 22];
           I64[Hp - 64] = sat_s2Cm_info;
           P64[Hp - 48] = _s2Ck::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2Ci::P64;
           P64[Hp - 24] = _s2Cj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2JM: // global
           P64[Sp] = P64[R1 + 5];
           call _c2Jt() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.807937614 UTC

[section ""data" . GHC.Stack.Types.fromCallSiteList_closure" {
     GHC.Stack.Types.fromCallSiteList_closure:
         const GHC.Stack.Types.fromCallSiteList_info;
 },
 sat_s2Cv_entry() //  [R1]
         { info_tbl: [(c2KR,
                       label: sat_s2Cv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2KR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2KS; else goto c2KT;
       c2KS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2KT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Stack.Types.fromCallSiteList_entry() //  [R2]
         { info_tbl: [(c2KY,
                       label: GHC.Stack.Types.fromCallSiteList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2KY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2KZ; else goto c2L0;
       c2KZ: // global
           R2 = R2;
           R1 = GHC.Stack.Types.fromCallSiteList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2L0: // global
           I64[Sp - 8] = block_c2KC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2L9; else goto c2KD;
       u2L9: // global
           call _c2KC(R1) args: 0, res: 0, upd: 0;
       c2KD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2KC() //  [R1]
         { info_tbl: [(c2KC,
                       label: block_c2KC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2KC: // global
           if (R1 & 7 == 1) goto c2KV; else goto c2KW;
       c2KV: // global
           R1 = GHC.Stack.Types.EmptyCallStack_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2KW: // global
           I64[Sp - 8] = block_c2KI_info;
           _s2Cr::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2Cr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2L8; else goto c2KJ;
       u2L8: // global
           call _c2KI(R1) args: 0, res: 0, upd: 0;
       c2KJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2KI() //  [R1]
         { info_tbl: [(c2KI,
                       label: block_c2KI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2KI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2L7; else goto c2L6;
       c2L7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2L6: // global
           _s2Ct::P64 = P64[R1 + 7];
           _s2Cu::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s2Cv_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = _s2Ct::P64;
           P64[Hp - 8] = _s2Cu::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.828051609 UTC

[section ""data" . GHC.Stack.Types.pushCallStack_closure" {
     GHC.Stack.Types.pushCallStack_closure:
         const GHC.Stack.Types.pushCallStack_info;
 },
 GHC.Stack.Types.pushCallStack_entry() //  [R2, R3]
         { info_tbl: [(c2LJ,
                       label: GHC.Stack.Types.pushCallStack_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2LJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2LK; else goto c2LL;
       c2LK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.pushCallStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2LL: // global
           I64[Sp - 16] = block_c2LG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2M6; else goto c2LH;
       u2M6: // global
           call _c2LG(R1) args: 0, res: 0, upd: 0;
       c2LH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2LG() //  [R1]
         { info_tbl: [(c2LG,
                       label: block_c2LG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2LG: // global
           I64[Sp - 8] = block_c2LO_info;
           _s2Cz::P64 = P64[R1 + 7];
           _s2CA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2CA::P64;
           P64[Sp + 8] = _s2Cz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2M5; else goto c2LQ;
       u2M5: // global
           call _c2LO(R1) args: 0, res: 0, upd: 0;
       c2LQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2LO() //  [R1]
         { info_tbl: [(c2LO,
                       label: block_c2LO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2LO: // global
           if (R1 & 7 == 3) goto c2M3; else goto c2LW;
       c2M3: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2LW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2LZ; else goto c2LY;
       c2LZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2LY: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.842034021 UTC

[section ""data" . GHC.Stack.Types.emptyCallStack_closure" {
     GHC.Stack.Types.emptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.845184177 UTC

[section ""data" . GHC.Stack.Types.freezeCallStack_closure" {
     GHC.Stack.Types.freezeCallStack_closure:
         const GHC.Stack.Types.freezeCallStack_info;
 },
 GHC.Stack.Types.freezeCallStack_entry() //  [R2]
         { info_tbl: [(c2MA,
                       label: GHC.Stack.Types.freezeCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2MA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2ME; else goto c2MD;
       c2ME: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.freezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2MD: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.852227138 UTC

[section ""cstring" . GHC.Stack.Types.$trModule4_bytes" {
     GHC.Stack.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.854951991 UTC

[section ""data" . GHC.Stack.Types.$trModule3_closure" {
     GHC.Stack.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.857711238 UTC

[section ""cstring" . GHC.Stack.Types.$trModule2_bytes" {
     GHC.Stack.Types.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107,46,84,121,112,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.860476724 UTC

[section ""data" . GHC.Stack.Types.$trModule1_closure" {
     GHC.Stack.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.863772785 UTC

[section ""data" . GHC.Stack.Types.$trModule_closure" {
     GHC.Stack.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.Types.$trModule3_closure+1;
         const GHC.Stack.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.86645793 UTC

[section ""data" . $krep_r29X_closure" {
     $krep_r29X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.869116985 UTC

[section ""data" . $krep1_r29Y_closure" {
     $krep1_r29Y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.872300989 UTC

[section ""data" . $krep2_r29Z_closure" {
     $krep2_r29Z_closure:
         const :_con_info;
         const $krep1_r29Y_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.875175252 UTC

[section ""data" . $krep3_r2a0_closure" {
     $krep3_r2a0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r29Z_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.879138706 UTC

[section ""cstring" . GHC.Stack.Types.$tcSrcLoc2_bytes" {
     GHC.Stack.Types.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.881817772 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc1_closure" {
     GHC.Stack.Types.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcSrcLoc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.885193152 UTC

[section ""data" . GHC.Stack.Types.$tcSrcLoc_closure" {
     GHC.Stack.Types.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11659135446504247116;
         const 7996606469851030013;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.888014142 UTC

[section ""data" . $krep4_r2a1_closure" {
     $krep4_r2a1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.890620173 UTC

[section ""data" . $krep5_r2a2_closure" {
     $krep5_r2a2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep4_r2a1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.893288407 UTC

[section ""data" . $krep6_r2a3_closure" {
     $krep6_r2a3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep5_r2a2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.896569331 UTC

[section ""data" . $krep7_r2a4_closure" {
     $krep7_r2a4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep6_r2a3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.898691728 UTC

[section ""data" . $krep8_r2a5_closure" {
     $krep8_r2a5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r29X_closure+1;
         const $krep7_r2a4_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.900473794 UTC

[section ""data" . $krep9_r2a6_closure" {
     $krep9_r2a6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep8_r2a5_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.90224783 UTC

[section ""data" . $krep10_r2a7_closure" {
     $krep10_r2a7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep9_r2a6_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.904544631 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc1_closure" {
     GHC.Stack.Types.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep10_r2a7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.90650917 UTC

[section ""cstring" . GHC.Stack.Types.$tc'SrcLoc3_bytes" {
     GHC.Stack.Types.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.908295154 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc2_closure" {
     GHC.Stack.Types.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'SrcLoc3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.910082001 UTC

[section ""data" . GHC.Stack.Types.$tc'SrcLoc_closure" {
     GHC.Stack.Types.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc2_closure+1;
         const GHC.Stack.Types.$tc'SrcLoc1_closure+4;
         const 13956426263269302848;
         const 15330088913444129695;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.912447677 UTC

[section ""cstring" . GHC.Stack.Types.$tcCallStack2_bytes" {
     GHC.Stack.Types.$tcCallStack2_bytes:
         I8[] [67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.914262108 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack1_closure" {
     GHC.Stack.Types.$tcCallStack1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tcCallStack2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.916123183 UTC

[section ""data" . GHC.Stack.Types.$tcCallStack_closure" {
     GHC.Stack.Types.$tcCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tcCallStack1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9079156173149315555;
         const 7592677015683705484;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.918272655 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack1_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stack.Types.$tcCallStack_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.920571822 UTC

[section ""cstring" . GHC.Stack.Types.$tc'EmptyCallStack3_bytes" {
     GHC.Stack.Types.$tc'EmptyCallStack3_bytes:
         I8[] [39,69,109,112,116,121,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.922360271 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack2_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.924139813 UTC

[section ""data" . GHC.Stack.Types.$tc'EmptyCallStack_closure" {
     GHC.Stack.Types.$tc'EmptyCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack2_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 4745696424279029534;
         const 621383300069717314;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.926373625 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack1_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const GHC.Stack.Types.$tc'EmptyCallStack1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.929204044 UTC

[section ""cstring" . GHC.Stack.Types.$tc'FreezeCallStack3_bytes" {
     GHC.Stack.Types.$tc'FreezeCallStack3_bytes:
         I8[] [39,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.931239365 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack2_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'FreezeCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.933014222 UTC

[section ""data" . GHC.Stack.Types.$tc'FreezeCallStack_closure" {
     GHC.Stack.Types.$tc'FreezeCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack2_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 13172881767820002692;
         const 8012125741085098641;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.935074841 UTC

[section ""data" . $krep11_r2a8_closure" {
     $krep11_r2a8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r2a1_closure+1;
         const GHC.Stack.Types.$tc'FreezeCallStack1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.937457775 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack1_closure" {
     GHC.Stack.Types.$tc'PushCallStack1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r2a0_closure+1;
         const $krep11_r2a8_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.939187946 UTC

[section ""cstring" . GHC.Stack.Types.$tc'PushCallStack3_bytes" {
     GHC.Stack.Types.$tc'PushCallStack3_bytes:
         I8[] [39,80,117,115,104,67,97,108,108,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.940931021 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack2_closure" {
     GHC.Stack.Types.$tc'PushCallStack2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.Types.$tc'PushCallStack3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.942761825 UTC

[section ""data" . GHC.Stack.Types.$tc'PushCallStack_closure" {
     GHC.Stack.Types.$tc'PushCallStack_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stack.Types.$trModule_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack2_closure+1;
         const GHC.Stack.Types.$tc'PushCallStack1_closure+4;
         const 11257300383724147409;
         const 9589391422293138004;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.94515867 UTC

[section ""data" . GHC.Stack.Types.EmptyCallStack_closure" {
     GHC.Stack.Types.EmptyCallStack_closure:
         const GHC.Stack.Types.EmptyCallStack_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.947434318 UTC

[section ""data" . GHC.Stack.Types.PushCallStack_closure" {
     GHC.Stack.Types.PushCallStack_closure:
         const GHC.Stack.Types.PushCallStack_info;
 },
 GHC.Stack.Types.PushCallStack_entry() //  [R2, R3, R4]
         { info_tbl: [(c2Nu,
                       label: GHC.Stack.Types.PushCallStack_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Nu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2Ny; else goto c2Nx;
       c2Ny: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.Types.PushCallStack_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2Nx: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.952895986 UTC

[section ""data" . GHC.Stack.Types.FreezeCallStack_closure" {
     GHC.Stack.Types.FreezeCallStack_closure:
         const GHC.Stack.Types.FreezeCallStack_info;
 },
 GHC.Stack.Types.FreezeCallStack_entry() //  [R2]
         { info_tbl: [(c2NK,
                       label: GHC.Stack.Types.FreezeCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2NK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2NO; else goto c2NN;
       c2NO: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Stack.Types.FreezeCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2NN: // global
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.959544417 UTC

[section ""data" . GHC.Stack.Types.SrcLoc_closure" {
     GHC.Stack.Types.SrcLoc_closure:
         const GHC.Stack.Types.SrcLoc_info;
 },
 GHC.Stack.Types.SrcLoc_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2NW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stack.Types.SrcLoc_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Stack.Types.SrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c2O1,
                       label: GHC.Stack.Types.SrcLoc_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2O1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2O5; else goto c2O4;
       c2O5: // global
           HpAlloc = 64;
           R1 = GHC.Stack.Types.SrcLoc_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2O4: // global
           I64[Hp - 56] = GHC.Stack.Types.SrcLoc_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.965890054 UTC

[GHC.Stack.Types.EmptyCallStack_con_entry() //  [R1]
         { info_tbl: [(c2Og,
                       label: GHC.Stack.Types.EmptyCallStack_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,69,109,112,116,121,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Og: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.971360294 UTC

[GHC.Stack.Types.PushCallStack_con_entry() //  [R1]
         { info_tbl: [(c2On,
                       label: GHC.Stack.Types.PushCallStack_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,80,117,115,104,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2On: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.975419068 UTC

[GHC.Stack.Types.FreezeCallStack_con_entry() //  [R1]
         { info_tbl: [(c2Ou,
                       label: GHC.Stack.Types.FreezeCallStack_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,70,114,101,101,122,101,67,97,108,108,83,116,97,99,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ou: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.979071134 UTC

[GHC.Stack.Types.SrcLoc_con_entry() //  [R1]
         { info_tbl: [(c2OB,
                       label: GHC.Stack.Types.SrcLoc_con_info
                       rep:HeapRep 7 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,116,97,99,107,46,84,121,112,101,115,46,83,114,99,76,111,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2OB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:39.983105569 UTC

[section ""relreadonly" . S2OI_srt" { S2OI_srt:
 }]

