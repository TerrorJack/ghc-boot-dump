
==================== Pre unarise: ====================
2018-03-16 15:59:46.785037032 UTC

GHC.Clock.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Clock.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Clock.$trModule4];

GHC.Clock.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Clock"#;

GHC.Clock.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Clock.$trModule2];

GHC.Clock.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Clock.$trModule3
                                     GHC.Clock.$trModule1];

getMonotonicTimeNSec1_r4RZ9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s4RZb]
        case __pkg_ccall base-4.11.0.0 [ds_s4RZb] of {
          (#,#) ds1_s4RZe [Occ=Once] ds2_s4RZf [Occ=Once] ->
              let {
                sat_s4RZg [Occ=Once] :: GHC.Word.Word64
                [LclId] =
                    CCCS GHC.Word.W64#! [ds2_s4RZf];
              } in  (#,#) [ds1_s4RZe sat_s4RZg];
        };

GHC.Clock.getMonotonicTimeNSec :: GHC.Types.IO GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] getMonotonicTimeNSec1_r4RZ9 eta_B1;

GHC.Clock.getMonotonicTime1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s4RZh]
        case __pkg_ccall base-4.11.0.0 [s_s4RZh] of {
          (#,#) ds_s4RZk [Occ=Once] ds1_s4RZl [Occ=Once] ->
              case word2Double# [ds1_s4RZl] of sat_s4RZm {
                __DEFAULT ->
                    case /## [sat_s4RZm 1.0e9##] of sat_s4RZn {
                      __DEFAULT ->
                          let {
                            sat_s4RZo [Occ=Once] :: GHC.Types.Double
                            [LclId] =
                                CCCS GHC.Types.D#! [sat_s4RZn];
                          } in  (#,#) [ds_s4RZk sat_s4RZo];
                    };
              };
        };

GHC.Clock.getMonotonicTime :: GHC.Types.IO GHC.Types.Double
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Clock.getMonotonicTime1 eta_B1;


==================== STG syntax: ====================
2018-03-16 15:59:46.787957057 UTC

GHC.Clock.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Clock.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Clock.$trModule4];

GHC.Clock.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Clock"#;

GHC.Clock.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Clock.$trModule2];

GHC.Clock.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Clock.$trModule3
                                     GHC.Clock.$trModule1];

getMonotonicTimeNSec1_r4RZ9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds2_s4RZf [Occ=Once] ->
              let {
                sat_s4RZg [Occ=Once] :: GHC.Word.Word64
                [LclId] =
                    CCCS GHC.Word.W64#! [ds2_s4RZf];
              } in  Unit# [sat_s4RZg];
        };

GHC.Clock.getMonotonicTimeNSec :: GHC.Types.IO GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] getMonotonicTimeNSec1_r4RZ9 GHC.Prim.void#;

GHC.Clock.getMonotonicTime1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds1_s4RZl [Occ=Once] ->
              case word2Double# [ds1_s4RZl] of sat_s4RZm {
                __DEFAULT ->
                    case /## [sat_s4RZm 1.0e9##] of sat_s4RZn {
                      __DEFAULT ->
                          let {
                            sat_s4RZo [Occ=Once] :: GHC.Types.Double
                            [LclId] =
                                CCCS GHC.Types.D#! [sat_s4RZn];
                          } in  Unit# [sat_s4RZo];
                    };
              };
        };

GHC.Clock.getMonotonicTime :: GHC.Types.IO GHC.Types.Double
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Clock.getMonotonicTime1 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 15:59:46.897617573 UTC

GHC.Clock.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Clock.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Clock.$trModule4];

GHC.Clock.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Clock"#;

GHC.Clock.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Clock.$trModule2];

GHC.Clock.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Clock.$trModule3
                                     GHC.Clock.$trModule1];

getMonotonicTimeNSec1_r4RZ9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s4S1W]
        case __pkg_ccall base-4.11.0.0 [ds_s4S1W] of {
          (#,#) ds1_s4S1Z [Occ=Once] ds2_s4S20 [Occ=Once] ->
              let {
                sat_s4S21 [Occ=Once] :: GHC.Word.Word64
                [LclId] =
                    CCCS GHC.Word.W64#! [ds2_s4S20];
              } in  (#,#) [ds1_s4S1Z sat_s4S21];
        };

GHC.Clock.getMonotonicTimeNSec :: GHC.Types.IO GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] getMonotonicTimeNSec1_r4RZ9 eta_B1;

GHC.Clock.getMonotonicTime1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s4S22]
        case __pkg_ccall base-4.11.0.0 [s_s4S22] of {
          (#,#) ds_s4S25 [Occ=Once] ds1_s4S26 [Occ=Once] ->
              case word2Double# [ds1_s4S26] of sat_s4S27 {
                __DEFAULT ->
                    case /## [sat_s4S27 1.0e9##] of sat_s4S28 {
                      __DEFAULT ->
                          let {
                            sat_s4S29 [Occ=Once] :: GHC.Types.Double
                            [LclId] =
                                CCCS GHC.Types.D#! [sat_s4S28];
                          } in  (#,#) [ds_s4S25 sat_s4S29];
                    };
              };
        };

GHC.Clock.getMonotonicTime :: GHC.Types.IO GHC.Types.Double
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Clock.getMonotonicTime1 eta_B1;


==================== STG syntax: ====================
2018-03-16 15:59:46.900517611 UTC

GHC.Clock.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Clock.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Clock.$trModule4];

GHC.Clock.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Clock"#;

GHC.Clock.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Clock.$trModule2];

GHC.Clock.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Clock.$trModule3
                                     GHC.Clock.$trModule1];

getMonotonicTimeNSec1_r4RZ9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds2_s4S20 [Occ=Once] ->
              let {
                sat_s4S21 [Occ=Once] :: GHC.Word.Word64
                [LclId] =
                    CCCS GHC.Word.W64#! [ds2_s4S20];
              } in  Unit# [sat_s4S21];
        };

GHC.Clock.getMonotonicTimeNSec :: GHC.Types.IO GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] getMonotonicTimeNSec1_r4RZ9 GHC.Prim.void#;

GHC.Clock.getMonotonicTime1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds1_s4S26 [Occ=Once] ->
              case word2Double# [ds1_s4S26] of sat_s4S27 {
                __DEFAULT ->
                    case /## [sat_s4S27 1.0e9##] of sat_s4S28 {
                      __DEFAULT ->
                          let {
                            sat_s4S29 [Occ=Once] :: GHC.Types.Double
                            [LclId] =
                                CCCS GHC.Types.D#! [sat_s4S28];
                          } in  Unit# [sat_s4S29];
                    };
              };
        };

GHC.Clock.getMonotonicTime :: GHC.Types.IO GHC.Types.Double
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Clock.getMonotonicTime1 GHC.Prim.void#;

