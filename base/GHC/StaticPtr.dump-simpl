
==================== Tidy Core ====================
2018-03-16 16:11:12.88195282 UTC

Result size of Tidy Core
  = {terms: 671, types: 790, coercions: 19, joins: 6/15}

-- RHS size: {terms: 3, types: 6, coercions: 2, joins: 0/0}
fromStaticPtr [InlPrag=INLINE]
  :: forall (p :: * -> *). IsStatic p => forall a. StaticPtr a -> p a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ (p_afuSz :: * -> *))
                 (v_B1 [Occ=Once] :: IsStatic p_afuSz) ->
                 v_B1
                 `cast` (GHC.StaticPtr.N:IsStatic[0] <p_afuSz>_N
                         :: (IsStatic p_afuSz :: Constraint)
                            ~R# (forall a. StaticPtr a -> p_afuSz a :: *))}]
fromStaticPtr
  = \ (@ (p_afuSz :: * -> *)) (v_B1 :: IsStatic p_afuSz) ->
      v_B1
      `cast` (GHC.StaticPtr.N:IsStatic[0] <p_afuSz>_N
              :: (IsStatic p_afuSz :: Constraint)
                 ~R# (forall a. StaticPtr a -> p_afuSz a :: *))

-- RHS size: {terms: 2, types: 4, coercions: 3, joins: 0/0}
GHC.StaticPtr.$fIsStaticStaticPtr [InlPrag=INLINE (sat-args=0)]
  :: IsStatic StaticPtr
[GblId[DFunId(nt)],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= (\ (@ a_afuYb) -> id @ (StaticPtr a_afuYb))
               `cast` (Sym (GHC.StaticPtr.N:IsStatic[0] <StaticPtr>_N)
                       :: (forall a. StaticPtr a -> StaticPtr a :: *)
                          ~R# (IsStatic StaticPtr :: Constraint))}]
GHC.StaticPtr.$fIsStaticStaticPtr
  = (\ (@ a_afuYb) -> id @ (StaticPtr a_afuYb))
    `cast` (Sym (GHC.StaticPtr.N:IsStatic[0] <StaticPtr>_N)
            :: (forall a. StaticPtr a -> StaticPtr a :: *)
               ~R# (IsStatic StaticPtr :: Constraint))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.StaticPtr.$fShowStaticPtrInfo6 = "StaticPtrInfo {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.StaticPtr.$fShowStaticPtrInfo5 = "spInfoUnitId = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.StaticPtr.$fShowStaticPtrInfo4 = "spInfoModuleName = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.StaticPtr.$fShowStaticPtrInfo3 = "spInfoSrcLoc = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.StaticPtr.$fShowStaticPtrInfo2 = "}"#

-- RHS size: {terms: 85, types: 54, coercions: 0, joins: 0/1}
GHC.StaticPtr.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int# -> String -> String -> (Int, Int) -> String -> String
[GblId,
 Arity=5,
 Str=<S,U><L,1*U><L,1*U><L,1*U(U(U),U(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 20 0] 651 30}]
GHC.StaticPtr.$w$cshowsPrec
  = \ (ww_sfvf0 :: Int#)
      (ww1_sfvf4 :: String)
      (ww2_sfvf5 :: String)
      (ww3_sfvf6 :: (Int, Int))
      (w_sfveX :: String) ->
      let {
        p_sfv4B [Dmd=<L,1*C1(U)>] :: ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_sfv4B
          = \ (x_X7RyQ [OS=OneShot] :: String) ->
              GHC.CString.unpackAppendCString#
                GHC.StaticPtr.$fShowStaticPtrInfo6
                (GHC.CString.unpackAppendCString#
                   GHC.StaticPtr.$fShowStaticPtrInfo5
                   (GHC.Types.:
                      @ Char
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString
                         ww1_sfvf4
                         (GHC.Types.:
                            @ Char
                            GHC.Show.$fShow(,)3
                            (++
                               @ Char
                               GHC.Show.showCommaSpace1
                               (GHC.CString.unpackAppendCString#
                                  GHC.StaticPtr.$fShowStaticPtrInfo4
                                  (GHC.Types.:
                                     @ Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Show.showLitString
                                        ww2_sfvf5
                                        (GHC.Types.:
                                           @ Char
                                           GHC.Show.$fShow(,)3
                                           (++
                                              @ Char
                                              GHC.Show.showCommaSpace1
                                              (GHC.CString.unpackAppendCString#
                                                 GHC.StaticPtr.$fShowStaticPtrInfo3
                                                 (case ww3_sfvf6 of { (ww5_ifv12, ww6_ifv13) ->
                                                  GHC.Types.:
                                                    @ Char
                                                    GHC.Show.$fShow(,)4
                                                    (GHC.Show.$fShow(,)_go1
                                                       (GHC.Types.:
                                                          @ ShowS
                                                          (\ (w2_i7NV2 :: String) ->
                                                             case ww5_ifv12 of
                                                             { GHC.Types.I# ww8_i7NVa ->
                                                             case GHC.Show.$wshowSignedInt
                                                                    0# ww8_i7NVa w2_i7NV2
                                                             of
                                                             { (# ww10_i7NVe, ww11_i7NVf #) ->
                                                             GHC.Types.:
                                                               @ Char ww10_i7NVe ww11_i7NVf
                                                             }
                                                             })
                                                          (GHC.Types.:
                                                             @ ShowS
                                                             (\ (w2_i7NV2 :: String) ->
                                                                case ww6_ifv13 of
                                                                { GHC.Types.I# ww8_i7NVa ->
                                                                case GHC.Show.$wshowSignedInt
                                                                       0# ww8_i7NVa w2_i7NV2
                                                                of
                                                                { (# ww10_i7NVe, ww11_i7NVf #) ->
                                                                GHC.Types.:
                                                                  @ Char ww10_i7NVe ww11_i7NVf
                                                                }
                                                                })
                                                             (GHC.Types.[] @ ShowS)))
                                                       (GHC.Types.:
                                                          @ Char
                                                          GHC.Show.$fShow(,)2
                                                          (GHC.CString.unpackAppendCString#
                                                             GHC.StaticPtr.$fShowStaticPtrInfo2
                                                             x_X7RyQ)))
                                                  })))))))))))) } in
      case >=# ww_sfvf0 11# of {
        __DEFAULT -> p_sfv4B w_sfveX;
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (p_sfv4B (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_sfveX))
      }

-- RHS size: {terms: 15, types: 11, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> StaticPtrInfo -> ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sfveV [Occ=Once!] :: Int)
                 (w1_sfveW [Occ=Once!] :: StaticPtrInfo)
                 (w2_sfveX [Occ=Once] :: String) ->
                 case w_sfveV of { GHC.Types.I# ww1_sfvf0 [Occ=Once] ->
                 case w1_sfveW of
                 { StaticPtrInfo ww3_sfvf4 [Occ=Once] ww4_sfvf5 [Occ=Once]
                                 ww5_sfvf6 [Occ=Once] ->
                 GHC.StaticPtr.$w$cshowsPrec
                   ww1_sfvf0 ww3_sfvf4 ww4_sfvf5 ww5_sfvf6 w2_sfveX
                 }
                 }}]
GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec
  = \ (w_sfveV :: Int)
      (w1_sfveW :: StaticPtrInfo)
      (w2_sfveX :: String) ->
      case w_sfveV of { GHC.Types.I# ww1_sfvf0 ->
      case w1_sfveW of { StaticPtrInfo ww3_sfvf4 ww4_sfvf5 ww5_sfvf6 ->
      GHC.StaticPtr.$w$cshowsPrec
        ww1_sfvf0 ww3_sfvf4 ww4_sfvf5 ww5_sfvf6 w2_sfveX
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo7 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.StaticPtr.$fShowStaticPtrInfo7 = GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 8, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo_$cshow :: StaticPtrInfo -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: StaticPtrInfo) ->
                 GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec
                   GHC.StaticPtr.$fShowStaticPtrInfo7 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
  = \ (x_i7Jay :: StaticPtrInfo) ->
      case x_i7Jay of { StaticPtrInfo ww1_sfvf4 ww2_sfvf5 ww3_sfvf6 ->
      GHC.StaticPtr.$w$cshowsPrec
        0# ww1_sfvf4 ww2_sfvf5 ww3_sfvf6 (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 11, types: 8, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo1 :: StaticPtrInfo -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U(U(U),U(U)))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 70 0}]
GHC.StaticPtr.$fShowStaticPtrInfo1
  = \ (w_sfveW :: StaticPtrInfo) (w1_sfveX :: String) ->
      case w_sfveW of { StaticPtrInfo ww1_sfvf4 ww2_sfvf5 ww3_sfvf6 ->
      GHC.StaticPtr.$w$cshowsPrec
        0# ww1_sfvf4 ww2_sfvf5 ww3_sfvf6 w1_sfveX
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList
  :: [StaticPtrInfo] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [StaticPtrInfo])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ StaticPtrInfo
                   GHC.StaticPtr.$fShowStaticPtrInfo1
                   ls_i7JaB
                   s_i7JaC}]
GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList
  = \ (ls_i7JaB :: [StaticPtrInfo]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ StaticPtrInfo GHC.StaticPtr.$fShowStaticPtrInfo1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.StaticPtr.$fShowStaticPtrInfo [InlPrag=NOUSERINLINE CONLIKE]
  :: Show StaticPtrInfo
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: StaticPtrInfo
                       GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec
                       GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
                       GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList]
GHC.StaticPtr.$fShowStaticPtrInfo
  = GHC.Show.C:Show
      @ StaticPtrInfo
      GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec
      GHC.StaticPtr.$fShowStaticPtrInfo_$cshow
      GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
spInfoSrcLoc :: StaticPtrInfo -> (Int, Int)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U(U,U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dfv0g [Occ=Once!] :: StaticPtrInfo) ->
                 case ds_dfv0g of
                 { StaticPtrInfo _ [Occ=Dead] _ [Occ=Dead] ds3_dfv0j [Occ=Once] ->
                 ds3_dfv0j
                 }}]
spInfoSrcLoc
  = \ (ds_dfv0g :: StaticPtrInfo) ->
      case ds_dfv0g of { StaticPtrInfo ds1_dfv0h ds2_dfv0i ds3_dfv0j ->
      ds3_dfv0j
      }

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
spInfoModuleName :: StaticPtrInfo -> String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dfv0c [Occ=Once!] :: StaticPtrInfo) ->
                 case ds_dfv0c of
                 { StaticPtrInfo _ [Occ=Dead] ds2_dfv0e [Occ=Once] _ [Occ=Dead] ->
                 ds2_dfv0e
                 }}]
spInfoModuleName
  = \ (ds_dfv0c :: StaticPtrInfo) ->
      case ds_dfv0c of { StaticPtrInfo ds1_dfv0d ds2_dfv0e ds3_dfv0f ->
      ds2_dfv0e
      }

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
spInfoUnitId :: StaticPtrInfo -> String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dfv08 [Occ=Once!] :: StaticPtrInfo) ->
                 case ds_dfv08 of
                 { StaticPtrInfo ds1_dfv09 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_dfv09
                 }}]
spInfoUnitId
  = \ (ds_dfv08 :: StaticPtrInfo) ->
      case ds_dfv08 of { StaticPtrInfo ds1_dfv09 ds2_dfv0a ds3_dfv0b ->
      ds1_dfv09
      }

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
deRefStaticPtr :: forall a. StaticPtr a -> a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),1*U(A,A,A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_afuXg) (ds_dfuZV [Occ=Once!] :: StaticPtr a_afuXg) ->
                 case ds_dfuZV of
                 { StaticPtr _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                             v_afuSG [Occ=Once] ->
                 v_afuSG
                 }}]
deRefStaticPtr
  = \ (@ a_afuXg) (ds_dfuZV :: StaticPtr a_afuXg) ->
      case ds_dfuZV of
      { StaticPtr ds1_dfv05 ds2_dfv06 ds3_dfv07 v_afuSG ->
      v_afuSG
      }

-- RHS size: {terms: 8, types: 10, coercions: 0, joins: 0/0}
staticKey :: forall a. StaticPtr a -> StaticKey
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SSLL),1*U(U,U,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_afuXe) (ds_dfuZK [Occ=Once!] :: StaticPtr a_afuXe) ->
                 case ds_dfuZK of
                 { StaticPtr w0_afuSH [Occ=Once] w1_afuSI [Occ=Once] _ [Occ=Dead]
                             _ [Occ=Dead] ->
                 GHC.Fingerprint.Type.Fingerprint w0_afuSH w1_afuSI
                 }}]
staticKey
  = \ (@ a_afuXe) (ds_dfuZK :: StaticPtr a_afuXe) ->
      case ds_dfuZK of
      { StaticPtr w0_afuSH w1_afuSI ds1_dfuZT ds2_dfuZU ->
      GHC.Fingerprint.Type.Fingerprint w0_afuSH w1_afuSI
      }

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
staticPtrInfo :: forall a. StaticPtr a -> StaticPtrInfo
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_afuWF) (ds_dfuZ0 [Occ=Once!] :: StaticPtr a_afuWF) ->
                 case ds_dfuZ0 of
                 { StaticPtr _ [Occ=Dead] _ [Occ=Dead] n_afuSO [Occ=Once]
                             _ [Occ=Dead] ->
                 n_afuSO
                 }}]
staticPtrInfo
  = \ (@ a_afuWF) (ds_dfuZ0 :: StaticPtr a_afuWF) ->
      case ds_dfuZ0 of
      { StaticPtr ds1_dfuZa ds2_dfuZb n_afuSO ds3_dfuZc ->
      n_afuSO
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.StaticPtr.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.StaticPtr.$trModule3
  = GHC.Types.TrNameS GHC.StaticPtr.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.StaticPtr.$trModule2 = "GHC.StaticPtr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.StaticPtr.$trModule1
  = GHC.Types.TrNameS GHC.StaticPtr.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.StaticPtr.$trModule
  = GHC.Types.Module
      GHC.StaticPtr.$trModule3 GHC.StaticPtr.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rfvlo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rfvlo
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rfvlp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rfvlp
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rfvlq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_rfvlq
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3_rfvlr :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_rfvlr
  = GHC.Types.:
      @ GHC.Types.KindRep $krep1_rfvlp (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_rfvls :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_rfvls
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep3_rfvlr

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_rfvlt :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_rfvlt
  = GHC.Types.:
      @ GHC.Types.KindRep $krep_rfvlo (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_rfvlu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_rfvlu
  = GHC.Types.: @ GHC.Types.KindRep $krep_rfvlo $krep5_rfvlt

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_rfvlv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep7_rfvlv
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep6_rfvlu

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcIsStatic1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.StaticPtr.$tcIsStatic1
  = GHC.Types.KindRepFun GHC.Types.krep$*Arr* $krep2_rfvlq

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep8_rfvlw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_rfvlw = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep9_rfvlx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_rfvlx
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcWord# (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcStaticPtrInfo2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.StaticPtr.$tcStaticPtrInfo2 = "StaticPtrInfo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcStaticPtrInfo1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.StaticPtr.$tcStaticPtrInfo1
  = GHC.Types.TrNameS GHC.StaticPtr.$tcStaticPtrInfo2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcStaticPtrInfo :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.StaticPtr.$tcStaticPtrInfo
  = GHC.Types.TyCon
      9809180260958205610##
      5820027882667808380##
      GHC.StaticPtr.$trModule
      GHC.StaticPtr.$tcStaticPtrInfo1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep10_rfvly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_rfvly
  = GHC.Types.KindRepTyConApp
      GHC.StaticPtr.$tcStaticPtrInfo (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rfvlz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep11_rfvlz = GHC.Types.KindRepFun $krep7_rfvlv $krep10_rfvly

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rfvlA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_rfvlA = GHC.Types.KindRepFun $krep4_rfvls $krep11_rfvlz

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tc'StaticPtrInfo1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.StaticPtr.$tc'StaticPtrInfo1
  = GHC.Types.KindRepFun $krep4_rfvls $krep12_rfvlA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tc'StaticPtrInfo3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.StaticPtr.$tc'StaticPtrInfo3 = "'StaticPtrInfo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tc'StaticPtrInfo2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.StaticPtr.$tc'StaticPtrInfo2
  = GHC.Types.TrNameS GHC.StaticPtr.$tc'StaticPtrInfo3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tc'StaticPtrInfo :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.StaticPtr.$tc'StaticPtrInfo
  = GHC.Types.TyCon
      12332739532642204119##
      17636067641148941699##
      GHC.StaticPtr.$trModule
      GHC.StaticPtr.$tc'StaticPtrInfo2
      0#
      GHC.StaticPtr.$tc'StaticPtrInfo1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcStaticPtr2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.StaticPtr.$tcStaticPtr2 = "StaticPtr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcStaticPtr1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.StaticPtr.$tcStaticPtr1
  = GHC.Types.TrNameS GHC.StaticPtr.$tcStaticPtr2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcStaticPtr :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.StaticPtr.$tcStaticPtr
  = GHC.Types.TyCon
      6538784347774135987##
      451387415853290179##
      GHC.StaticPtr.$trModule
      GHC.StaticPtr.$tcStaticPtr1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep13_rfvlB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep13_rfvlB
  = GHC.Types.:
      @ GHC.Types.KindRep $krep8_rfvlw (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rfvlC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep14_rfvlC
  = GHC.Types.KindRepTyConApp
      GHC.StaticPtr.$tcStaticPtr $krep13_rfvlB

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_rfvlD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep15_rfvlD = GHC.Types.KindRepFun $krep8_rfvlw $krep14_rfvlC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_rfvlE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep16_rfvlE = GHC.Types.KindRepFun $krep10_rfvly $krep15_rfvlD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_rfvlF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep17_rfvlF = GHC.Types.KindRepFun $krep9_rfvlx $krep16_rfvlE

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tc'StaticPtr1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.StaticPtr.$tc'StaticPtr1
  = GHC.Types.KindRepFun $krep9_rfvlx $krep17_rfvlF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tc'StaticPtr3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.StaticPtr.$tc'StaticPtr3 = "'StaticPtr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tc'StaticPtr2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.StaticPtr.$tc'StaticPtr2
  = GHC.Types.TrNameS GHC.StaticPtr.$tc'StaticPtr3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tc'StaticPtr :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.StaticPtr.$tc'StaticPtr
  = GHC.Types.TyCon
      3211798574336347514##
      9816765169815661376##
      GHC.StaticPtr.$trModule
      GHC.StaticPtr.$tc'StaticPtr2
      1#
      GHC.StaticPtr.$tc'StaticPtr1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcIsStatic3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.StaticPtr.$tcIsStatic3 = "IsStatic"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcIsStatic2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.StaticPtr.$tcIsStatic2
  = GHC.Types.TrNameS GHC.StaticPtr.$tcIsStatic3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.StaticPtr.$tcIsStatic :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.StaticPtr.$tcIsStatic
  = GHC.Types.TyCon
      12653381617957437053##
      3253287492145771790##
      GHC.StaticPtr.$trModule
      GHC.StaticPtr.$tcIsStatic2
      0#
      GHC.StaticPtr.$tcIsStatic1

-- RHS size: {terms: 98, types: 134, coercions: 0, joins: 2/7}
GHC.StaticPtr.$wunsafeLookupStaticPtr [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Word#
     -> Word#
     -> State# RealWorld
     -> (# State# RealWorld, Maybe (StaticPtr a) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 234 0}]
GHC.StaticPtr.$wunsafeLookupStaticPtr
  = \ (@ a_sfvff)
      (ww_sfvfk :: Word#)
      (ww1_sfvfl :: Word#)
      (w_sfvfh :: State# RealWorld) ->
      let {
        vals_sfv86 :: Word64
        [LclId, Unf=OtherCon []]
        vals_sfv86 = GHC.Word.W64# ww_sfvfk } in
      let {
        vals1_sfv87 :: Word64
        [LclId, Unf=OtherCon []]
        vals1_sfv87 = GHC.Word.W64# ww1_sfvfl } in
      let {
        vals2_sfv88 :: [Word64]
        [LclId, Unf=OtherCon []]
        vals2_sfv88
          = GHC.Types.: @ Word64 vals1_sfv87 (GHC.Types.[] @ Word64) } in
      let {
        vals3_sfv4s [Dmd=<S,U>] :: [Word64]
        [LclId, Unf=OtherCon []]
        vals3_sfv4s = GHC.Types.: @ Word64 vals_sfv86 vals2_sfv88 } in
      case GHC.List.$wlenAcc @ Word64 vals3_sfv4s 0# of ww2_ifuZn
      { __DEFAULT ->
      case newAlignedPinnedByteArray#
             @ RealWorld (*# ww2_ifuZn 8#) 8# w_sfvfh
      of
      { (# ipv_icn6U, ipv1_icn6V #) ->
      case unsafeFreezeByteArray# @ RealWorld ipv1_icn6V ipv_icn6U of
      { (# ipv2_icn6Z, ipv3_icn70 #) ->
      let {
        ptr_sfv4t [Dmd=<S,U>] :: Addr#
        [LclId]
        ptr_sfv4t = byteArrayContents# ipv3_icn70 } in
      join {
        exit_X1p [Dmd=<C(S),C(U(U,U))>]
          :: State# RealWorld
             -> (# State# RealWorld, Maybe (StaticPtr a_sfvff) #)
        [LclId[JoinId(1)], Arity=1, Str=<S,U>]
        exit_X1p (eta1_ifv20 [OS=OneShot] :: State# RealWorld)
          = case {__pkg_ccall base-4.11.0.0 Addr#
                           -> State# RealWorld -> (# State# RealWorld, Addr# #)}_dfv0I
                   ptr_sfv4t eta1_ifv20
            of
            { (# ds_dfv0G, ds1_dfv0F #) ->
            case addrToAny# @ (StaticPtr a_sfvff) ds1_dfv0F of
            { (# spe_sfvih #) ->
            case touch#
                   @ 'GHC.Types.UnliftedRep @ ByteArray# ipv3_icn70 ds_dfv0G
            of s4_icn77
            { __DEFAULT ->
            case eqAddr# ds1_dfv0F __NULL of {
              __DEFAULT ->
                (# s4_icn77, GHC.Base.Just @ (StaticPtr a_sfvff) spe_sfvih #);
              1# -> (# s4_icn77, GHC.Base.Nothing @ (StaticPtr a_sfvff) #)
            }
            }
            }
            } } in
      joinrec {
        go_sfv4r [Occ=LoopBreaker]
          :: [Word64]
             -> Int#
             -> State# RealWorld
             -> (# State# RealWorld, Maybe (StaticPtr a_sfvff) #)
        [LclId[JoinId(3)], Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
        go_sfv4r (ds_ifv1Y :: [Word64])
                 (ds1_ifv1Z :: Int#)
                 (eta1_ifv20 :: State# RealWorld)
          = case ds_ifv1Y of {
              [] -> jump exit_X1p eta1_ifv20;
              : val_ifv25 vals4_ifv26 ->
                case val_ifv25 of { W64# x_i9htc ->
                case writeWord64OffAddr#
                       @ RealWorld ptr_sfv4t ds1_ifv1Z x_i9htc eta1_ifv20
                of s2_i9hte
                { __DEFAULT ->
                jump go_sfv4r vals4_ifv26 (+# ds1_ifv1Z 1#) s2_i9hte
                }
                }
            }; } in
      jump go_sfv4r vals3_sfv4s 0# ipv2_icn6Z
      }
      }
      }

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
GHC.StaticPtr.unsafeLookupStaticPtr1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Fingerprint
     -> State# RealWorld -> (# State# RealWorld, Maybe (StaticPtr a) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_sfvff)
                 (w_sfvfg [Occ=Once!] :: Fingerprint)
                 (w1_sfvfh [Occ=Once] :: State# RealWorld) ->
                 case w_sfvfg of
                 { Fingerprint ww1_sfvfk [Occ=Once] ww2_sfvfl [Occ=Once] ->
                 GHC.StaticPtr.$wunsafeLookupStaticPtr
                   @ a_sfvff ww1_sfvfk ww2_sfvfl w1_sfvfh
                 }}]
GHC.StaticPtr.unsafeLookupStaticPtr1
  = \ (@ a_sfvff)
      (w_sfvfg :: Fingerprint)
      (w1_sfvfh :: State# RealWorld) ->
      case w_sfvfg of { Fingerprint ww1_sfvfk ww2_sfvfl ->
      GHC.StaticPtr.$wunsafeLookupStaticPtr
        @ a_sfvff ww1_sfvfk ww2_sfvfl w1_sfvfh
      }

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
unsafeLookupStaticPtr
  :: forall a. StaticKey -> IO (Maybe (StaticPtr a))
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.StaticPtr.unsafeLookupStaticPtr1
               `cast` (forall (a :: <*>_N).
                       <Fingerprint>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Maybe (StaticPtr a)>_R)
                       :: (forall a.
                           Fingerprint
                           -> State# RealWorld
                           -> (# State# RealWorld, Maybe (StaticPtr a) #) :: *)
                          ~R# (forall a. Fingerprint -> IO (Maybe (StaticPtr a)) :: *))}]
unsafeLookupStaticPtr
  = GHC.StaticPtr.unsafeLookupStaticPtr1
    `cast` (forall (a :: <*>_N).
            <Fingerprint>_R
            ->_R Sym (GHC.Types.N:IO[0] <Maybe (StaticPtr a)>_R)
            :: (forall a.
                Fingerprint
                -> State# RealWorld
                -> (# State# RealWorld, Maybe (StaticPtr a) #) :: *)
               ~R# (forall a. Fingerprint -> IO (Maybe (StaticPtr a)) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rfvlG :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rfvlG = "GHC/StaticPtr.hs:131:41-79|lambda"#

-- RHS size: {terms: 2, types: 3, coercions: 0, joins: 0/0}
lvl1_rfvlH :: IO Fingerprint
[GblId, Str=x]
lvl1_rfvlH
  = Control.Exception.Base.patError
      @ 'GHC.Types.LiftedRep @ (IO Fingerprint) lvl_rfvlG

Rec {
-- RHS size: {terms: 81, types: 129, coercions: 0, joins: 2/2}
GHC.StaticPtr.staticPtrKeys2 [Occ=LoopBreaker]
  :: [Ptr Word64]
     -> State# RealWorld -> (# State# RealWorld, [Fingerprint] #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []]
GHC.StaticPtr.staticPtrKeys2
  = \ (ds_i7Jck :: [Ptr Word64]) (eta_B1 :: State# RealWorld) ->
      case ds_i7Jck of {
        [] -> (# eta_B1, GHC.Types.[] @ Fingerprint #);
        : y_i7Jcp ys_i7Jcq ->
          join {
            exit_icnNn [Dmd=<C(C(S)),C(C1(U(U,U)))>]
              :: [Word64]
                 -> State# RealWorld -> (# State# RealWorld, [Fingerprint] #)
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,U>]
            exit_icnNn (w3_icnNo [OS=OneShot] :: [Word64])
                       (w4_icnNp [OS=OneShot] :: State# RealWorld)
              = case y_i7Jcp of { Ptr a_i9htk ->
                case readWord64OffAddr# @ RealWorld a_i9htk 0# w4_icnNp of
                { (# ipv_i9hts, ipv1_i9htt #) ->
                case w3_icnNo of {
                  [] -> case lvl1_rfvlH of wild3_00 { };
                  : w2_afuSU ds1_dfuYS ->
                    case ds1_dfuYS of {
                      [] ->
                        case GHC.StaticPtr.staticPtrKeys2 ys_i7Jcq ipv_i9hts of
                        { (# ipv2_ic6zp, ipv3_ic6zq #) ->
                        (# ipv2_ic6zp,
                           GHC.Types.:
                             @ Fingerprint
                             (case w2_afuSU of { W64# dt1_i8htg ->
                              GHC.Fingerprint.Type.Fingerprint ipv1_i9htt dt1_i8htg
                              })
                             ipv3_ic6zq #)
                        };
                      : ipv2_sfv2I ipv3_sfv2J -> case lvl1_rfvlH of wild4_00 { }
                    }
                }
                }
                } } in
          joinrec {
            $wf_icnNv [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
              :: Int#
                 -> [Word64]
                 -> State# RealWorld
                 -> (# State# RealWorld, [Fingerprint] #)
            [LclId[JoinId(3)], Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
            $wf_icnNv (ww1_icnNw :: Int#)
                      (w3_icnNx :: [Word64])
                      (w4_icnNy :: State# RealWorld)
              = case ww1_icnNw of ds1_icnNz {
                  __DEFAULT ->
                    case y_i7Jcp of { Ptr a_i9htk ->
                    case readWord64OffAddr# @ RealWorld a_i9htk ds1_icnNz w4_icnNy of
                    { (# ipv_i9hts, ipv1_i9htt #) ->
                    jump $wf_icnNv
                      (-# ds1_icnNz 1#)
                      (GHC.Types.: @ Word64 (GHC.Word.W64# ipv1_i9htt) w3_icnNx)
                      ipv_i9hts
                    }
                    };
                  0# -> jump exit_icnNn w3_icnNx w4_icnNy
                }; } in
          jump $wf_icnNv 1# (GHC.Types.[] @ Word64) eta_B1
      }
end Rec }

-- RHS size: {terms: 109, types: 179, coercions: 0, joins: 2/5}
GHC.StaticPtr.staticPtrKeys1
  :: State# RealWorld -> (# State# RealWorld, [StaticKey] #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 220 30}]
GHC.StaticPtr.staticPtrKeys1
  = \ (s_i7IAv :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_dfv0A
             s_i7IAv
      of
      { (# ds_dfv0y, ds1_dfv0x #) ->
      let {
        ipv1_sfv67 [Dmd=<S,U>] :: Int#
        [LclId]
        ipv1_sfv67 = narrow32Int# ds1_dfv0x } in
      case newAlignedPinnedByteArray#
             @ RealWorld (*# ipv1_sfv67 8#) 8# ds_dfv0y
      of
      { (# ipv_icn6U, ipv2_icn6V #) ->
      case unsafeFreezeByteArray# @ RealWorld ipv2_icn6V ipv_icn6U of
      { (# ipv3_icn6Z, ipv4_icn70 #) ->
      let {
        p_sfv4n [Dmd=<S,U>] :: Addr#
        [LclId]
        p_sfv4n = byteArrayContents# ipv4_icn70 } in
      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Int# -> State# RealWorld -> (# State# RealWorld, Int# #)}_dfv0v
             p_sfv4n ipv1_sfv67 ipv3_icn6Z
      of
      { (# ds5_dfv0t, ds6_dfv0s #) ->
      let {
        ww_icnNj [Dmd=<S,U>] :: Int#
        [LclId]
        ww_icnNj = narrow32Int# ds6_dfv0s } in
      case <=# ww_icnNj 0# of {
        __DEFAULT ->
          join {
            exit_icnNn [Dmd=<C(C(S)),C(C1(U(U,U)))>]
              :: [Ptr Word64]
                 -> State# RealWorld -> (# State# RealWorld, [StaticKey] #)
            [LclId[JoinId(2)], Arity=2, Str=<L,U><S,U>]
            exit_icnNn (w3_icnNo [OS=OneShot] :: [Ptr Word64])
                       (w4_icnNp [OS=OneShot] :: State# RealWorld)
              = case readAddrOffAddr# @ RealWorld p_sfv4n 0# w4_icnNp of
                { (# ipv5_i9ham, ipv6_i9han #) ->
                case GHC.StaticPtr.staticPtrKeys2
                       (GHC.Types.:
                          @ (Ptr Word64) (GHC.Ptr.Ptr @ Word64 ipv6_i9han) w3_icnNo)
                       ipv5_i9ham
                of
                { (# ipv7_icn74, ipv8_icn75 #) ->
                case touch#
                       @ 'GHC.Types.UnliftedRep @ ByteArray# ipv4_icn70 ipv7_icn74
                of s4_icn77
                { __DEFAULT ->
                (# s4_icn77, ipv8_icn75 #)
                }
                }
                } } in
          joinrec {
            $wf_icnNv [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
              :: Int#
                 -> [Ptr Word64]
                 -> State# RealWorld
                 -> (# State# RealWorld, [StaticKey] #)
            [LclId[JoinId(3)], Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
            $wf_icnNv (ww1_icnNw :: Int#)
                      (w3_icnNx :: [Ptr Word64])
                      (w4_icnNy :: State# RealWorld)
              = case ww1_icnNw of ds7_icnNz {
                  __DEFAULT ->
                    case readAddrOffAddr# @ RealWorld p_sfv4n ds7_icnNz w4_icnNy of
                    { (# ipv5_i9ham, ipv6_i9han #) ->
                    jump $wf_icnNv
                      (-# ds7_icnNz 1#)
                      (GHC.Types.:
                         @ (Ptr Word64) (GHC.Ptr.Ptr @ Word64 ipv6_i9han) w3_icnNx)
                      ipv5_i9ham
                    };
                  0# -> jump exit_icnNn w3_icnNx w4_icnNy
                }; } in
          jump $wf_icnNv
            (-# ww_icnNj 1#) (GHC.Types.[] @ (Ptr Word64)) ds5_dfv0t;
        1# ->
          case GHC.StaticPtr.staticPtrKeys2
                 (GHC.Types.[] @ (Ptr Word64)) ds5_dfv0t
          of
          { (# ipv5_icn74, ipv6_icn75 #) ->
          case touch#
                 @ 'GHC.Types.UnliftedRep @ ByteArray# ipv4_icn70 ipv5_icn74
          of s4_icn77
          { __DEFAULT ->
          (# s4_icn77, ipv6_icn75 #)
          }
          }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
staticPtrKeys [InlPrag=NOINLINE] :: IO [StaticKey]
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.StaticPtr.staticPtrKeys1
               `cast` (Sym (GHC.Types.N:IO[0] <[StaticKey]>_R)
                       :: (State# RealWorld -> (# State# RealWorld, [StaticKey] #) :: *)
                          ~R# (IO [StaticKey] :: *))}]
staticPtrKeys
  = GHC.StaticPtr.staticPtrKeys1
    `cast` (Sym (GHC.Types.N:IO[0] <[StaticKey]>_R)
            :: (State# RealWorld -> (# State# RealWorld, [StaticKey] #) :: *)
               ~R# (IO [StaticKey] :: *))


