
==================== Raw Cmm ====================
2018-03-16 15:59:46.815909213 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:46.81769817 UTC

[section ""cstring" . GHC.Clock.$trModule4_bytes" {
     GHC.Clock.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.820466149 UTC

[section ""data" . GHC.Clock.$trModule3_closure" {
     GHC.Clock.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Clock.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.823076561 UTC

[section ""cstring" . GHC.Clock.$trModule2_bytes" {
     GHC.Clock.$trModule2_bytes:
         I8[] [71,72,67,46,67,108,111,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.825624255 UTC

[section ""data" . GHC.Clock.$trModule1_closure" {
     GHC.Clock.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Clock.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.82828612 UTC

[section ""data" . GHC.Clock.$trModule_closure" {
     GHC.Clock.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Clock.$trModule3_closure+1;
         const GHC.Clock.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.833040033 UTC

[section ""data" . getMonotonicTimeNSec1_r4RZ9_closure" {
     getMonotonicTimeNSec1_r4RZ9_closure:
         const getMonotonicTimeNSec1_r4RZ9_info;
 },
 getMonotonicTimeNSec1_r4RZ9_entry() //  []
         { []
         }
     {offset
       c4S0Z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4S13; else goto c4S12;
       c4S13: // global
           HpAlloc = 16;
           R1 = getMonotonicTimeNSec1_r4RZ9_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c4S12: // global
           (_s4RZf::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4RZf::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . getMonotonicTimeNSec1_r4RZ9_info" {
     getMonotonicTimeNSec1_r4RZ9_info:
         const getMonotonicTimeNSec1_r4RZ9_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.838974524 UTC

[section ""data" . GHC.Clock.getMonotonicTimeNSec_closure" {
     GHC.Clock.getMonotonicTimeNSec_closure:
         const GHC.Clock.getMonotonicTimeNSec_info;
 },
 GHC.Clock.getMonotonicTimeNSec_entry() //  []
         { []
         }
     {offset
       c4S1d: // global
           call getMonotonicTimeNSec1_r4RZ9_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Clock.getMonotonicTimeNSec_info" {
     GHC.Clock.getMonotonicTimeNSec_info:
         const GHC.Clock.getMonotonicTimeNSec_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.845115284 UTC

[section ""data" . GHC.Clock.getMonotonicTime1_closure" {
     GHC.Clock.getMonotonicTime1_closure:
         const GHC.Clock.getMonotonicTime1_info;
 },
 GHC.Clock.getMonotonicTime1_entry() //  []
         { []
         }
     {offset
       c4S1s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4S1B; else goto c4S1A;
       c4S1B: // global
           HpAlloc = 16;
           R1 = GHC.Clock.getMonotonicTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c4S1A: // global
           (_s4RZl::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           (_c4S1p::F64) = call MO_UF_Conv W64(_s4RZl::I64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(_c4S1p::F64, 1.0e9 :: W64);
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Clock.getMonotonicTime1_info" {
     GHC.Clock.getMonotonicTime1_info:
         const GHC.Clock.getMonotonicTime1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.851404177 UTC

[section ""data" . GHC.Clock.getMonotonicTime_closure" {
     GHC.Clock.getMonotonicTime_closure:
         const GHC.Clock.getMonotonicTime_info;
 },
 GHC.Clock.getMonotonicTime_entry() //  []
         { []
         }
     {offset
       c4S1O: // global
           call GHC.Clock.getMonotonicTime1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Clock.getMonotonicTime_info" {
     GHC.Clock.getMonotonicTime_info:
         const GHC.Clock.getMonotonicTime_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.857366723 UTC

[section ""relreadonly" . S4S06_srt" { S4S06_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.904006236 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:46.905649105 UTC

[section ""cstring" . GHC.Clock.$trModule4_bytes" {
     GHC.Clock.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.908333621 UTC

[section ""data" . GHC.Clock.$trModule3_closure" {
     GHC.Clock.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Clock.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.91181523 UTC

[section ""cstring" . GHC.Clock.$trModule2_bytes" {
     GHC.Clock.$trModule2_bytes:
         I8[] [71,72,67,46,67,108,111,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.914514688 UTC

[section ""data" . GHC.Clock.$trModule1_closure" {
     GHC.Clock.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Clock.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.917128856 UTC

[section ""data" . GHC.Clock.$trModule_closure" {
     GHC.Clock.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Clock.$trModule3_closure+1;
         const GHC.Clock.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.920781513 UTC

[section ""data" . getMonotonicTimeNSec1_r4RZ9_closure" {
     getMonotonicTimeNSec1_r4RZ9_closure:
         const getMonotonicTimeNSec1_r4RZ9_info;
 },
 getMonotonicTimeNSec1_r4RZ9_entry() //  []
         { []
         }
     {offset
       c4S2l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4S2p; else goto c4S2o;
       c4S2p: // global
           HpAlloc = 16;
           R1 = getMonotonicTimeNSec1_r4RZ9_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c4S2o: // global
           (_s4S20::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4S20::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . getMonotonicTimeNSec1_r4RZ9_info" {
     getMonotonicTimeNSec1_r4RZ9_info:
         const getMonotonicTimeNSec1_r4RZ9_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.92657142 UTC

[section ""data" . GHC.Clock.getMonotonicTimeNSec_closure" {
     GHC.Clock.getMonotonicTimeNSec_closure:
         const GHC.Clock.getMonotonicTimeNSec_info;
 },
 GHC.Clock.getMonotonicTimeNSec_entry() //  []
         { []
         }
     {offset
       c4S2A: // global
           call getMonotonicTimeNSec1_r4RZ9_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Clock.getMonotonicTimeNSec_info" {
     GHC.Clock.getMonotonicTimeNSec_info:
         const GHC.Clock.getMonotonicTimeNSec_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.93234199 UTC

[section ""data" . GHC.Clock.getMonotonicTime1_closure" {
     GHC.Clock.getMonotonicTime1_closure:
         const GHC.Clock.getMonotonicTime1_info;
 },
 GHC.Clock.getMonotonicTime1_entry() //  []
         { []
         }
     {offset
       c4S2P: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4S2Y; else goto c4S2X;
       c4S2Y: // global
           HpAlloc = 16;
           R1 = GHC.Clock.getMonotonicTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c4S2X: // global
           (_s4S26::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           (_c4S2M::F64) = call MO_UF_Conv W64(_s4S26::I64);
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(_c4S2M::F64, 1.0e9 :: W64);
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Clock.getMonotonicTime1_info" {
     GHC.Clock.getMonotonicTime1_info:
         const GHC.Clock.getMonotonicTime1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.938667585 UTC

[section ""data" . GHC.Clock.getMonotonicTime_closure" {
     GHC.Clock.getMonotonicTime_closure:
         const GHC.Clock.getMonotonicTime_info;
 },
 GHC.Clock.getMonotonicTime_entry() //  []
         { []
         }
     {offset
       c4S3c: // global
           call GHC.Clock.getMonotonicTime1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Clock.getMonotonicTime_info" {
     GHC.Clock.getMonotonicTime_info:
         const GHC.Clock.getMonotonicTime_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:46.943238673 UTC

[section ""relreadonly" . S4S3j_srt" { S4S3j_srt:
 }]

