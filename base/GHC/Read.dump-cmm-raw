
==================== Raw Cmm ====================
2018-03-16 15:58:29.893577395 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:58:29.895491672 UTC

[section ""data" . GHC.Read.readsPrec_closure" {
     GHC.Read.readsPrec_closure:
         const GHC.Read.readsPrec_info;
 },
 GHC.Read.readsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3SXM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3SXN; else goto c3SXO;
       c3SXN: // global
           R2 = R2;
           R1 = GHC.Read.readsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3SXO: // global
           I64[Sp - 8] = block_c3SXJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3SXS; else goto c3SXK;
       u3SXS: // global
           call _c3SXJ(R1) args: 0, res: 0, upd: 0;
       c3SXK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readsPrec_info" {
     GHC.Read.readsPrec_info:
         const GHC.Read.readsPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3SXJ() //  [R1]
         { []
         }
     {offset
       c3SXJ: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3SXJ_info" {
     block_c3SXJ_info:
         const _c3SXJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.90193948 UTC

[section ""data" . GHC.Read.readList_closure" {
     GHC.Read.readList_closure:
         const GHC.Read.readList_info;
 },
 GHC.Read.readList_entry() //  [R2]
         { []
         }
     {offset
       c3SY9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3SYa; else goto c3SYb;
       c3SYa: // global
           R2 = R2;
           R1 = GHC.Read.readList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3SYb: // global
           I64[Sp - 8] = block_c3SY6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3SYf; else goto c3SY7;
       u3SYf: // global
           call _c3SY6(R1) args: 0, res: 0, upd: 0;
       c3SY7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readList_info" {
     GHC.Read.readList_info:
         const GHC.Read.readList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3SY6() //  [R1]
         { []
         }
     {offset
       c3SY6: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3SY6_info" {
     block_c3SY6_info:
         const _c3SY6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.907900855 UTC

[section ""data" . GHC.Read.readPrec_closure" {
     GHC.Read.readPrec_closure:
         const GHC.Read.readPrec_info;
 },
 GHC.Read.readPrec_entry() //  [R2]
         { []
         }
     {offset
       c3SYw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3SYx; else goto c3SYy;
       c3SYx: // global
           R2 = R2;
           R1 = GHC.Read.readPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3SYy: // global
           I64[Sp - 8] = block_c3SYt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3SYC; else goto c3SYu;
       u3SYC: // global
           call _c3SYt(R1) args: 0, res: 0, upd: 0;
       c3SYu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readPrec_info" {
     GHC.Read.readPrec_info:
         const GHC.Read.readPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3SYt() //  [R1]
         { []
         }
     {offset
       c3SYt: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3SYt_info" {
     block_c3SYt_info:
         const _c3SYt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.913772115 UTC

[section ""data" . GHC.Read.readListPrec_closure" {
     GHC.Read.readListPrec_closure:
         const GHC.Read.readListPrec_info;
 },
 GHC.Read.readListPrec_entry() //  [R2]
         { []
         }
     {offset
       c3SYT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3SYU; else goto c3SYV;
       c3SYU: // global
           R2 = R2;
           R1 = GHC.Read.readListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3SYV: // global
           I64[Sp - 8] = block_c3SYQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3SYZ; else goto c3SYR;
       u3SYZ: // global
           call _c3SYQ(R1) args: 0, res: 0, upd: 0;
       c3SYR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readListPrec_info" {
     GHC.Read.readListPrec_info:
         const GHC.Read.readListPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3SYQ() //  [R1]
         { []
         }
     {offset
       c3SYQ: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3SYQ_info" {
     block_c3SYQ_info:
         const _c3SYQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.920015007 UTC

[section ""data" . $dmreadListPrec1_r3N5i_closure" {
     $dmreadListPrec1_r3N5i_closure:
         const $dmreadListPrec1_r3N5i_info;
 },
 sat_s3N6f_entry() //  [R1]
         { []
         }
     {offset
       c3SZh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3SZi; else goto c3SZj;
       c3SZi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3SZj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3N6f_info" {
     sat_s3N6f_info:
         const sat_s3N6f_entry;
         const 1;
         const 16;
 },
 $dmreadListPrec1_r3N5i_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3SZn: // global
           _s3N6e::P64 = R4;
           _s3N6d::P64 = R3;
           _s3N6c::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3SZo; else goto c3SZp;
       c3SZp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3SZr; else goto c3SZq;
       c3SZr: // global
           HpAlloc = 24;
           goto c3SZo;
       c3SZo: // global
           R4 = _s3N6e::P64;
           R3 = _s3N6d::P64;
           R2 = _s3N6c::P64;
           R1 = $dmreadListPrec1_r3N5i_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3SZq: // global
           I64[Hp - 16] = sat_s3N6f_info;
           P64[Hp] = _s3N6c::P64;
           I64[Sp - 8] = block_c3SZk_info;
           R3 = _s3N6e::P64;
           R2 = Hp - 16;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $dmreadListPrec1_r3N5i_info" {
     $dmreadListPrec1_r3N5i_info:
         const $dmreadListPrec1_r3N5i_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3SZk() //  [R1]
         { []
         }
     {offset
       c3SZk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3SZu; else goto c3SZt;
       c3SZu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3SZt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3SZk_info" {
     block_c3SZk_info:
         const _c3SZk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.927602446 UTC

[section ""data" . GHC.Read.$dmreadListPrec_closure" {
     GHC.Read.$dmreadListPrec_closure:
         const GHC.Read.$dmreadListPrec_info;
 },
 GHC.Read.$dmreadListPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3SZM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmreadListPrec1_r3N5i_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$dmreadListPrec_info" {
     GHC.Read.$dmreadListPrec_info:
         const GHC.Read.$dmreadListPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.932590876 UTC

[section ""data" . $dmreadPrec1_r3N5j_closure" {
     $dmreadPrec1_r3N5j_closure:
         const $dmreadPrec1_r3N5j_info;
 },
 w_s3N6k_entry() //  [R1]
         { []
         }
     {offset
       c3T01: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3T02; else goto c3T03;
       c3T02: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3T03: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Read.readsPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_s3N6k_info" {
     w_s3N6k_info:
         const w_s3N6k_entry;
         const 2;
         const 18;
 },
 sat_s3N6o_entry() //  [R1, R2]
         { []
         }
     {offset
       c3T0c: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3T0d; else goto c3T0e;
       c3T0d: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3T0e: // global
           I64[Sp - 8] = block_c3T09_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N6o_info" {
     sat_s3N6o_info:
         const sat_s3N6o_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3T09() //  [R1]
         { []
         }
     {offset
       c3T09: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3T0h; else goto c3T0g;
       c3T0h: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3T0g: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T09_info" {
     block_c3T09_info:
         const _c3T09;
         const 0;
         const 30;
 },
 $dmreadPrec1_r3N5j_entry() //  [R2, R3]
         { []
         }
     {offset
       c3T0i: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3T0m; else goto c3T0l;
       c3T0m: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = $dmreadPrec1_r3N5j_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3T0l: // global
           I64[Hp - 40] = w_s3N6k_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3N6o_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmreadPrec1_r3N5j_info" {
     $dmreadPrec1_r3N5j_info:
         const $dmreadPrec1_r3N5j_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.941672236 UTC

[section ""data" . GHC.Read.$dmreadPrec_closure" {
     GHC.Read.$dmreadPrec_closure:
         const GHC.Read.$dmreadPrec_info;
 },
 GHC.Read.$dmreadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3T0K: // global
           R3 = R3;
           R2 = R2;
           call $dmreadPrec1_r3N5j_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$dmreadPrec_info" {
     GHC.Read.$dmreadPrec_info:
         const GHC.Read.$dmreadPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.946132712 UTC

[section ""data" . GHC.Read.$dmreadsPrec_closure" {
     GHC.Read.$dmreadsPrec_closure:
         const GHC.Read.$dmreadsPrec_info;
 },
 sat_s3N6r_entry() //  [R1]
         { []
         }
     {offset
       c3T0Z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3T10; else goto c3T11;
       c3T10: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3T11: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.readPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3N6r_info" {
     sat_s3N6r_info:
         const sat_s3N6r_entry;
         const 2;
         const 18;
 },
 GHC.Read.$dmreadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3T12: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3T16; else goto c3T15;
       c3T16: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$dmreadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3T15: // global
           I64[Hp - 24] = sat_s3N6r_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$dmreadsPrec_info" {
     GHC.Read.$dmreadsPrec_info:
         const GHC.Read.$dmreadsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.951705163 UTC

[section ""data" . GHC.Read.$fRead()7_closure" {
     GHC.Read.$fRead()7_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.954466099 UTC

[section ""data" . GHC.Read.readListDefault_closure" {
     GHC.Read.readListDefault_closure:
         const GHC.Read.readListDefault_info;
 },
 sat_s3N6t_entry() //  [R1]
         { []
         }
     {offset
       c3T1p: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3T1q; else goto c3T1r;
       c3T1q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3T1r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.readListPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3N6t_info" {
     sat_s3N6t_info:
         const sat_s3N6t_entry;
         const 1;
         const 16;
 },
 GHC.Read.readListDefault_entry() //  [R2]
         { []
         }
     {offset
       c3T1s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3T1w; else goto c3T1v;
       c3T1w: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.readListDefault_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3T1v: // global
           I64[Hp - 16] = sat_s3N6t_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readListDefault_info" {
     GHC.Read.readListDefault_info:
         const GHC.Read.readListDefault_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.96116818 UTC

[section ""data" . GHC.Read.lex1_closure" {
     GHC.Read.lex1_closure:
         const GHC.Read.lex1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.lex1_entry() //  [R1]
         { []
         }
     {offset
       c3T1O: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3T1P; else goto c3T1Q;
       c3T1P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3T1Q: // global
           (_c3T1I::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3T1I::I64 == 0) goto c3T1K; else goto c3T1J;
       c3T1K: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3T1J: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3T1I::I64;
           I64[Sp - 24] = block_c3T1L_info;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 24;
           call Text.Read.Lex.$whsLex_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.lex1_info" {
     GHC.Read.lex1_info:
         const GHC.Read.lex1_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt;
 },
 _c3T1L() //  [R1]
         { []
         }
     {offset
       c3T1L: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3T1T; else goto c3T1S;
       c3T1T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3T1S: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3T1L_info" {
     block_c3T1L_info:
         const _c3T1L;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.966764195 UTC

[section ""data" . GHC.Read.lex_closure" {
     GHC.Read.lex_closure:
         const GHC.Read.lex_info;
         const 0;
 },
 GHC.Read.lex_entry() //  [R2]
         { []
         }
     {offset
       c3T29: // global
           R3 = R2;
           R2 = GHC.Read.lex1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lex_info" {
     GHC.Read.lex_info:
         const GHC.Read.lex_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:29.973960429 UTC

[section ""data" . GHC.Read.readParen1_closure" {
     GHC.Read.readParen1_closure:
         const GHC.Read.readParen1_info;
         const 0;
 },
 go_s3N6A_entry() //  [R1, R2]
         { []
         }
     {offset
       c3T2w: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3T2x; else goto u3T3s;
       c3T2x: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u3T3s: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c3T2m() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_s3N6A_info" {
     go_s3N6A_info:
         const go_s3N6A_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3T2m() //  []
         { []
         }
     {offset
       c3T2m: // global
           I64[Sp - 16] = block_c3T2p_info;
           R1 = P64[Sp + 8];
           _s3N6A::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s3N6A::P64 + 15];
           P64[Sp + 8] = P64[_s3N6A::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3T3x; else goto c3T2q;
       u3T3x: // global
           call _c3T2p(R1) args: 0, res: 0, upd: 0;
       c3T2q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3T2p() //  [R1]
         { []
         }
     {offset
       c3T2p: // global
           if (R1 & 7 == 1) goto c3T2t; else goto c3T2u;
       c3T2t: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3T2u: // global
           I64[Sp] = block_c3T2E_info;
           _s3N6E::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s3N6E::P64;
           if (R1 & 7 != 0) goto u3T3y; else goto c3T2G;
       u3T3y: // global
           call _c3T2E(R1) args: 0, res: 0, upd: 0;
       c3T2G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T2p_info" {
     block_c3T2p_info:
         const _c3T2p;
         const 3;
         const 30;
 },
 _c3T2E() //  [R1]
         { []
         }
     {offset
       c3T2E: // global
           I64[Sp - 8] = block_c3T2K_info;
           _s3N6H::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3N6H::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3T3A; else goto c3T2M;
       u3T3A: // global
           call _c3T2K(R1) args: 0, res: 0, upd: 0;
       c3T2M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T2E_info" {
     block_c3T2E_info:
         const _c3T2E;
         const 3;
         const 30;
 },
 _c3T2K() //  [R1]
         { []
         }
     {offset
       c3T2K: // global
           if (R1 & 7 == 1) goto u3T3t; else goto c3T2X;
       u3T3t: // global
           Sp = Sp + 16;
           call _c3T3p() args: 0, res: 0, upd: 0;
       c3T2X: // global
           I64[Sp - 8] = block_c3T2V_info;
           _s3N6K::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3N6K::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3T3B; else goto c3T2Y;
       u3T3B: // global
           call _c3T2V(R1) args: 0, res: 0, upd: 0;
       c3T2Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T2K_info" {
     block_c3T2K_info:
         const _c3T2K;
         const 4;
         const 30;
 },
 _c3T2V() //  [R1]
         { []
         }
     {offset
       c3T2V: // global
           if (I64[R1 + 7] == 41) goto c3T39; else goto u3T3u;
       c3T39: // global
           _s3N6K::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3T38_info;
           R1 = _s3N6K::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3T3D; else goto c3T3a;
       u3T3D: // global
           call _c3T38(R1) args: 0, res: 0, upd: 0;
       c3T3a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3T3u: // global
           Sp = Sp + 24;
           call _c3T3p() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3T2V_info" {
     block_c3T2V_info:
         const _c3T2V;
         const 5;
         const 30;
 },
 _c3T38() //  [R1]
         { []
         }
     {offset
       c3T38: // global
           if (R1 & 7 == 1) goto c3T3i; else goto u3T3v;
       c3T3i: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3T3l; else goto c3T3k;
       c3T3l: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3T3k: // global
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3T3v: // global
           Sp = Sp + 16;
           call _c3T3p() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3T38_info" {
     block_c3T38_info:
         const _c3T38;
         const 4;
         const 30;
 },
 _c3T3p() //  []
         { []
         }
     {offset
       c3T3p: // global
           P64[Sp + 16] = P64[Sp];
           Sp = Sp + 8;
           call _c3T2m() args: 0, res: 0, upd: 0;
     }
 },
 GHC.Read.readParen1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3T3J: // global
           _s3N6z::P64 = R4;
           _s3N6y::P64 = R3;
           _s3N6x::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3T3K; else goto c3T3L;
       c3T3L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3T3N; else goto c3T3M;
       c3T3N: // global
           HpAlloc = 24;
           goto c3T3K;
       c3T3K: // global
           R4 = _s3N6z::P64;
           R3 = _s3N6y::P64;
           R2 = _s3N6x::P64;
           R1 = GHC.Read.readParen1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3T3M: // global
           I64[Hp - 16] = go_s3N6A_info;
           P64[Hp - 8] = _s3N6x::P64;
           P64[Hp] = _s3N6z::P64;
           I64[Sp - 16] = block_c3T3H_info;
           R3 = _s3N6y::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readParen1_info" {
     GHC.Read.readParen1_info:
         const GHC.Read.readParen1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3NLQ_srt+8;
 },
 _c3T3H() //  [R1]
         { []
         }
     {offset
       c3T3H: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s3N6A_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T3H_info" {
     block_c3T3H_info:
         const _c3T3H;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.002099495 UTC

[section ""data" . GHC.Read.readParen_closure" {
     GHC.Read.readParen_closure:
         const GHC.Read.readParen_info;
         const 0;
 },
 go1_s3N7e_entry() //  [R1, R2]
         { []
         }
     {offset
       c3T5E: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3T5F; else goto c3T5G;
       c3T5F: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3T5G: // global
           I64[Sp - 24] = block_c3T5x_info;
           _s3N7e::P64 = R1;
           _s3N7d::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3N7d::P64;
           P64[Sp - 8] = _s3N7e::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3T5X; else goto c3T5y;
       u3T5X: // global
           call _c3T5x(R1) args: 0, res: 0, upd: 0;
       c3T5y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s3N7e_info" {
     go1_s3N7e_info:
         const go1_s3N7e_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+16;
 },
 _c3T5x() //  [R1]
         { []
         }
     {offset
       c3T5x: // global
           if (R1 & 7 == 1) goto c3T5B; else goto c3T5C;
       c3T5B: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3T5C: // global
           I64[Sp] = block_c3T5M_info;
           _s3N7i::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s3N7i::P64;
           if (R1 & 7 != 0) goto u3T5W; else goto c3T5N;
       u3T5W: // global
           call _c3T5M(R1) args: 0, res: 0, upd: 0;
       c3T5N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T5x_info" {
     block_c3T5x_info:
         const _c3T5x;
         const 2;
         const 4294967326;
         const S3NLQ_srt+16;
 },
 _c3T5M() //  [R1]
         { []
         }
     {offset
       c3T5M: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3T5V; else goto c3T5U;
       c3T5V: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3T5U: // global
           _s3N7k::P64 = P64[R1 + 7];
           _s3N7l::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R4 = Hp - 24;
           R3 = _s3N7l::P64;
           R2 = _s3N7k::P64;
           Sp = Sp + 24;
           call GHC.Read.readParen1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T5M_info" {
     block_c3T5M_info:
         const _c3T5M;
         const 2;
         const 4294967326;
         const S3NLQ_srt+16;
 },
 z_s3N7c_entry() //  [R1]
         { []
         }
     {offset
       c3T60: // global
           _s3N7c::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3T64; else goto c3T65;
       c3T65: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3T67; else goto c3T66;
       c3T67: // global
           HpAlloc = 48;
           goto c3T64;
       c3T64: // global
           R1 = _s3N7c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3T66: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3N7c::P64;
           _s3N6X::P64 = P64[_s3N7c::P64 + 16];
           _s3N71::P64 = P64[_s3N7c::P64 + 24];
           _s3N74::P64 = P64[_s3N7c::P64 + 32];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3N6X::P64;
           P64[Hp - 16] = _s3N71::P64;
           I64[Hp - 8] = go1_s3N7e_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 40] = block_c3T5Y_info;
           R3 = _s3N74::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = _s3N6X::P64;
           Sp = Sp - 40;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . z_s3N7c_info" {
     z_s3N7c_info:
         const z_s3N7c_entry;
         const 3;
         const 12884901903;
         const S3NLQ_srt+8;
 },
 _c3T5Y() //  [R1]
         { []
         }
     {offset
       c3T5Y: // global
           I64[Sp] = block_c3T63_info;
           R2 = R1;
           R1 = P64[Sp + 16];
           call go_s3N6X_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3T5Y_info" {
     block_c3T5Y_info:
         const _c3T5Y;
         const 2;
         const 12884901918;
         const S3NLQ_srt+8;
 },
 _c3T63() //  [R1]
         { []
         }
     {offset
       c3T63: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call go1_s3N7e_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3T63_info" {
     block_c3T63_info:
         const _c3T63;
         const 130;
         const 4294967326;
         const S3NLQ_srt+16;
 },
 go1_s3N7p_entry() //  [R1, R2]
         { []
         }
     {offset
       c3T6p: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3T6q; else goto c3T6r;
       c3T6q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3T6r: // global
           I64[Sp - 24] = block_c3T6i_info;
           _s3N7p::P64 = R1;
           _s3N7c::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3N7c::P64;
           P64[Sp - 8] = _s3N7p::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3T6I; else goto c3T6j;
       u3T6I: // global
           call _c3T6i(R1) args: 0, res: 0, upd: 0;
       c3T6j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s3N7p_info" {
     go1_s3N7p_info:
         const go1_s3N7p_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+16;
 },
 _c3T6i() //  [R1]
         { []
         }
     {offset
       c3T6i: // global
           if (R1 & 7 == 1) goto c3T6m; else goto c3T6n;
       c3T6m: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3T6n: // global
           I64[Sp] = block_c3T6x_info;
           _s3N7t::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s3N7t::P64;
           if (R1 & 7 != 0) goto u3T6H; else goto c3T6y;
       u3T6H: // global
           call _c3T6x(R1) args: 0, res: 0, upd: 0;
       c3T6y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T6i_info" {
     block_c3T6i_info:
         const _c3T6i;
         const 2;
         const 4294967326;
         const S3NLQ_srt+16;
 },
 _c3T6x() //  [R1]
         { []
         }
     {offset
       c3T6x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3T6G; else goto c3T6F;
       c3T6G: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3T6F: // global
           _s3N7v::P64 = P64[R1 + 7];
           _s3N7w::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R4 = Hp - 24;
           R3 = _s3N7w::P64;
           R2 = _s3N7v::P64;
           Sp = Sp + 24;
           call GHC.Read.readParen1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T6x_info" {
     block_c3T6x_info:
         const _c3T6x;
         const 2;
         const 4294967326;
         const S3NLQ_srt+16;
 },
 go_s3N6X_entry() //  [R1, R2]
         { []
         }
     {offset
       c3T6N: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3T6O; else goto u3T7k;
       c3T6O: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u3T7k: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c3T4Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_s3N6X_info" {
     go_s3N6X_info:
         const go_s3N6X_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S3NLQ_srt+8;
 },
 _c3T4Q() //  []
         { []
         }
     {offset
       c3T4Q: // global
           _s3N6V::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_c3T4T_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3N6V::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3T7p; else goto c3T4U;
       u3T7p: // global
           call _c3T4T(R1) args: 0, res: 0, upd: 0;
       c3T4U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3T4T() //  [R1]
         { []
         }
     {offset
       c3T4T: // global
           if (R1 & 7 == 1) goto c3T6K; else goto c3T6L;
       c3T6K: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3T6L: // global
           I64[Sp - 8] = block_c3T4Z_info;
           _s3N71::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3N71::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3T7q; else goto c3T50;
       u3T7q: // global
           call _c3T4Z(R1) args: 0, res: 0, upd: 0;
       c3T50: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T4T_info" {
     block_c3T4T_info:
         const _c3T4T;
         const 2;
         const 12884901918;
         const S3NLQ_srt+8;
 },
 _c3T4Z() //  [R1]
         { []
         }
     {offset
       c3T4Z: // global
           I64[Sp - 8] = block_c3T54_info;
           _s3N74::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3N74::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3T7r; else goto c3T55;
       u3T7r: // global
           call _c3T54(R1) args: 0, res: 0, upd: 0;
       c3T55: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T4Z_info" {
     block_c3T4Z_info:
         const _c3T4Z;
         const 3;
         const 12884901918;
         const S3NLQ_srt+8;
 },
 _c3T54() //  [R1]
         { []
         }
     {offset
       c3T54: // global
           if (R1 & 7 == 1) goto u3T7l; else goto c3T6Z;
       u3T7l: // global
           Sp = Sp + 16;
           call _c3T7h() args: 0, res: 0, upd: 0;
       c3T6Z: // global
           I64[Sp - 8] = block_c3T5a_info;
           _s3N77::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3N77::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3T7s; else goto c3T5b;
       u3T7s: // global
           call _c3T5a(R1) args: 0, res: 0, upd: 0;
       c3T5b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T54_info" {
     block_c3T54_info:
         const _c3T54;
         const 4;
         const 12884901918;
         const S3NLQ_srt+8;
 },
 _c3T5a() //  [R1]
         { []
         }
     {offset
       c3T5a: // global
           if (I64[R1 + 7] == 40) goto c3T73; else goto u3T7m;
       c3T73: // global
           _s3N77::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3T5i_info;
           R1 = _s3N77::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3T7u; else goto c3T5j;
       u3T7u: // global
           call _c3T5i(R1) args: 0, res: 0, upd: 0;
       c3T5j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3T7m: // global
           Sp = Sp + 24;
           call _c3T7h() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3T5a_info" {
     block_c3T5a_info:
         const _c3T5a;
         const 5;
         const 12884901918;
         const S3NLQ_srt+8;
 },
 _c3T5i() //  [R1]
         { []
         }
     {offset
       c3T5i: // global
           if (R1 & 7 == 1) goto c3T76; else goto u3T7n;
       c3T76: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3T79; else goto c3T78;
       c3T79: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3T78: // global
           I64[Hp - 48] = z_s3N7c_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           _s3N74::P64 = P64[Sp + 8];
           P64[Hp - 16] = _s3N74::P64;
           I64[Hp - 8] = go1_s3N7p_info;
           P64[Hp] = Hp - 48;
           I64[Sp + 24] = block_c3T74_info;
           R2 = _s3N74::P64;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = Hp - 7;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3T7n: // global
           Sp = Sp + 16;
           call _c3T7h() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3T5i_info" {
     block_c3T5i_info:
         const _c3T5i;
         const 4;
         const 12884901918;
         const S3NLQ_srt+8;
 },
 _c3T74() //  [R1]
         { []
         }
     {offset
       c3T74: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_s3N7p_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T74_info" {
     block_c3T74_info:
         const _c3T74;
         const 1;
         const 4294967326;
         const S3NLQ_srt+16;
 },
 _c3T7h() //  []
         { []
         }
     {offset
       c3T7h: // global
           P64[Sp + 16] = P64[Sp];
           Sp = Sp + 8;
           call _c3T4Q() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3N7E_entry() //  [R1]
         { []
         }
     {offset
       c3T7K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3T7L; else goto c3T7M;
       c3T7L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3T7M: // global
           I64[Sp - 16] = block_c3T7I_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N7E_info" {
     sat_s3N7E_info:
         const sat_s3N7E_entry;
         const 2;
         const 12884901906;
         const S3NLQ_srt+8;
 },
 _c3T7I() //  [R1]
         { []
         }
     {offset
       c3T7I: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s3N6X_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T7I_info" {
     block_c3T7I_info:
         const _c3T7I;
         const 1;
         const 12884901918;
         const S3NLQ_srt+8;
 },
 GHC.Read.readParen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3T7U: // global
           _s3N6W::P64 = R4;
           _s3N6V::P64 = R3;
           _s3N6U::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c3T7V; else goto c3T7W;
       c3T7W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3T7Y; else goto c3T7X;
       c3T7Y: // global
           HpAlloc = 16;
           goto c3T7V;
       c3T7V: // global
           R4 = _s3N6W::P64;
           R3 = _s3N6V::P64;
           R2 = _s3N6U::P64;
           R1 = GHC.Read.readParen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3T7X: // global
           I64[Hp - 8] = go_s3N6X_info;
           P64[Hp] = _s3N6V::P64;
           I64[Sp - 32] = block_c3T7z_info;
           R1 = _s3N6U::P64;
           P64[Sp - 24] = Hp - 7;
           P64[Sp - 16] = _s3N6V::P64;
           P64[Sp - 8] = _s3N6W::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3T8f; else goto c3T7A;
       u3T8f: // global
           call _c3T7z(R1) args: 0, res: 0, upd: 0;
       c3T7A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readParen_info" {
     GHC.Read.readParen_info:
         const GHC.Read.readParen_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S3NLQ_srt+8;
 },
 _c3T7z() //  [R1]
         { []
         }
     {offset
       c3T7z: // global
           _s3N6W::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3T7R; else goto c3T7S;
       c3T7R: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3T82; else goto c3T81;
       c3T82: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3T81: // global
           I64[Hp - 24] = sat_s3N7E_info;
           P64[Hp - 8] = _s3N6W::P64;
           P64[Hp] = P64[Sp + 8];
           _s3N6V::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3T7Z_info;
           R2 = _s3N6W::P64;
           R1 = _s3N6V::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3T7S: // global
           I64[Sp] = block_c3T89_info;
           R3 = _s3N6W::P64;
           R2 = GHC.Read.lex1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T7z_info" {
     block_c3T7z_info:
         const _c3T7z;
         const 3;
         const 12884901918;
         const S3NLQ_srt+8;
 },
 _c3T7Z() //  [R1]
         { []
         }
     {offset
       c3T7Z: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T7Z_info" {
     block_c3T7Z_info:
         const _c3T7Z;
         const 1;
         const 30;
 },
 _c3T89() //  [R1]
         { []
         }
     {offset
       c3T89: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call go_s3N6X_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3T89_info" {
     block_c3T89_info:
         const _c3T89;
         const 387;
         const 12884901918;
         const S3NLQ_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.044080142 UTC

[section ""data" . GHC.Read.readLitChar1_closure" {
     GHC.Read.readLitChar1_closure:
         const GHC.Read.readLitChar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.readLitChar1_entry() //  [R1]
         { []
         }
     {offset
       c3Tal: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Tam; else goto c3Tan;
       c3Tam: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Tan: // global
           (_c3Taf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Taf::I64 == 0) goto c3Tah; else goto c3Tag;
       c3Tah: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Tag: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Taf::I64;
           I64[Sp - 24] = block_c3Tai_info;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.readLitChar1_info" {
     GHC.Read.readLitChar1_info:
         const GHC.Read.readLitChar1_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+32;
 },
 _c3Tai() //  [R1]
         { []
         }
     {offset
       c3Tai: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Taq; else goto c3Tap;
       c3Taq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Tap: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Tai_info" {
     block_c3Tai_info:
         const _c3Tai;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.050090175 UTC

[section ""data" . GHC.Read.readLitChar_closure" {
     GHC.Read.readLitChar_closure:
         const GHC.Read.readLitChar_info;
         const 0;
 },
 GHC.Read.readLitChar_entry() //  [R2]
         { []
         }
     {offset
       c3TaG: // global
           R3 = R2;
           R2 = GHC.Read.readLitChar1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readLitChar_info" {
     GHC.Read.readLitChar_info:
         const GHC.Read.readLitChar_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.055385088 UTC

[section ""data" . GHC.Read.$www1_closure" {
     GHC.Read.$www1_closure:
         const GHC.Read.$www1_info;
 },
 sat_s3N7Q_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tbc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Tbg; else goto c3Tbf;
       c3Tbg: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Tbf: // global
           _s3N7N::P64 = P64[R1 + 7];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s3N7N::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N7Q_info" {
     sat_s3N7Q_info:
         const sat_s3N7Q_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Read.$www1_entry() //  [R2]
         { []
         }
     {offset
       c3Tbh: // global
           _s3N7I::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Tbi; else goto c3Tbj;
       c3Tbj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Tbl; else goto c3Tbk;
       c3Tbl: // global
           HpAlloc = 32;
           goto c3Tbi;
       c3Tbi: // global
           R2 = _s3N7I::I64;
           R1 = GHC.Read.$www1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Tbk: // global
           if ((_s3N7I::I64 + -48) > 9) goto c3Tbn; else goto c3Tbr;
       c3Tbn: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Tbr: // global
           I64[Hp - 24] = GHC.Types.C#_con_info;
           I64[Hp - 16] = _s3N7I::I64;
           I64[Hp - 8] = sat_s3N7Q_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 8] = block_c3Tbo_info;
           R3 = Hp - 7;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$www1_info" {
     GHC.Read.$www1_info:
         const GHC.Read.$www1_entry;
         const 0;
         const 14;
         const 4294967300;
 },
 _c3Tbo() //  [R1]
         { []
         }
     {offset
       c3Tbo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Tbu; else goto c3Tbt;
       c3Tbu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Tbt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tbo_info" {
     block_c3Tbo_info:
         const _c3Tbo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.06295554 UTC

[section ""data" . GHC.Read.lexDigits_ww1_closure" {
     GHC.Read.lexDigits_ww1_closure:
         const GHC.Read.lexDigits_ww1_info;
 },
 GHC.Read.lexDigits_ww1_entry() //  [R2]
         { []
         }
     {offset
       c3TbT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TbU; else goto c3TbV;
       c3TbU: // global
           R2 = R2;
           R1 = GHC.Read.lexDigits_ww1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TbV: // global
           I64[Sp - 8] = block_c3TbQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3TbZ; else goto c3TbR;
       u3TbZ: // global
           call _c3TbQ(R1) args: 0, res: 0, upd: 0;
       c3TbR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexDigits_ww1_info" {
     GHC.Read.lexDigits_ww1_info:
         const GHC.Read.lexDigits_ww1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3TbQ() //  [R1]
         { []
         }
     {offset
       c3TbQ: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Read.$www1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TbQ_info" {
     block_c3TbQ_info:
         const _c3TbQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.067731335 UTC

[section ""data" . GHC.Read.lexDigits1_closure" {
     GHC.Read.lexDigits1_closure:
         const Text.ParserCombinators.ReadP.Get_con_info;
         const GHC.Read.lexDigits_ww1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.069611459 UTC

[section ""data" . GHC.Read.lexDigits_closure" {
     GHC.Read.lexDigits_closure:
         const GHC.Read.lexDigits_info;
 },
 GHC.Read.lexDigits_entry() //  [R2]
         { []
         }
     {offset
       c3Tce: // global
           R3 = R2;
           R2 = GHC.Read.lexDigits1_closure+1;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexDigits_info" {
     GHC.Read.lexDigits_info:
         const GHC.Read.lexDigits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.07310582 UTC

[section ""data" . GHC.Read.$fReadLexeme1_closure" {
     GHC.Read.$fReadLexeme1_closure:
         const GHC.Read.$fReadLexeme1_info;
         const 0;
 },
 GHC.Read.$fReadLexeme1_entry() //  [R3]
         { []
         }
     {offset
       c3Tcp: // global
           R2 = R3;
           call Text.Read.Lex.lex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme1_info" {
     GHC.Read.$fReadLexeme1_info:
         const GHC.Read.$fReadLexeme1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.076733121 UTC

[section ""data" . GHC.Read.lexP_closure" {
     GHC.Read.lexP_closure:
         const GHC.Read.lexP_info;
         const 0;
 },
 GHC.Read.lexP_entry() //  [R2, R3]
         { []
         }
     {offset
       c3TcA: // global
           R3 = R3;
           R2 = R2;
           call GHC.Read.$fReadLexeme1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexP_info" {
     GHC.Read.lexP_info:
         const GHC.Read.lexP_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.080521058 UTC

[section ""data" . GHC.Read.$fReadChar4_closure" {
     GHC.Read.$fReadChar4_closure:
         const GHC.Read.$fReadChar4_info;
 },
 GHC.Read.$fReadChar4_entry() //  [R2]
         { []
         }
     {offset
       c3TcO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TcP; else goto c3TcQ;
       c3TcP: // global
           R2 = R2;
           R1 = GHC.Read.$fReadChar4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TcQ: // global
           I64[Sp - 8] = block_c3TcL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3TcU; else goto c3TcM;
       u3TcU: // global
           call _c3TcL() args: 0, res: 0, upd: 0;
       c3TcM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar4_info" {
     GHC.Read.$fReadChar4_info:
         const GHC.Read.$fReadChar4_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3TcL() //  []
         { []
         }
     {offset
       c3TcL: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TcL_info" {
     block_c3TcL_info:
         const _c3TcL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.085380273 UTC

[section ""data" . GHC.Read.$fReadChar3_closure" {
     GHC.Read.$fReadChar3_closure:
         const Text.ParserCombinators.ReadP.Look_con_info;
         const GHC.Read.$fReadChar4_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.093232192 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory36_closure" {
     GHC.Read.$fReadGeneralCategory36_closure:
         const GHC.Read.$fReadGeneralCategory36_info;
         const 0;
 },
 sat_s3N8g_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TdH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3TdI; else goto c3TdJ;
       c3TdI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TdJ: // global
           I64[Sp - 24] = block_c3Tdz_info;
           _s3N86::P64 = P64[R1 + 7];
           _s3N89::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3N86::P64;
           P64[Sp - 8] = _s3N89::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Teo; else goto c3TdA;
       u3Teo: // global
           call _c3Tdz(R1) args: 0, res: 0, upd: 0;
       c3TdA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N8g_info" {
     sat_s3N8g_info:
         const sat_s3N8g_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Tdz() //  [R1]
         { []
         }
     {offset
       c3Tdz: // global
           _s3N86::P64 = P64[Sp + 8];
           _c3TdG::P64 = R1 & 7;
           if (_c3TdG::P64 == 4) goto c3TdE; else goto u3Teh;
       c3TdE: // global
           I64[Sp + 8] = block_c3TdP_info;
           R3 = P64[R1 + 4];
           R2 = _s3N86::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3Teh: // global
           if (_c3TdG::P64 == 5) goto c3TdF; else goto u3Tei;
       c3TdF: // global
           I64[Sp + 8] = block_c3Te3_info;
           R3 = P64[R1 + 3];
           R2 = _s3N86::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3Tei: // global
           Sp = Sp + 24;
           call _c3Tea() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Tdz_info" {
     block_c3Tdz_info:
         const _c3Tdz;
         const 2;
         const 30;
 },
 _c3TdP() //  [R1]
         { []
         }
     {offset
       c3TdP: // global
           if (R1 & 7 == 1) goto u3Tel; else goto u3Tem;
       u3Tel: // global
           Sp = Sp + 16;
           call _c3Tea() args: 0, res: 0, upd: 0;
       u3Tem: // global
           Sp = Sp + 8;
           call _c3Tee() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3TdP_info" {
     block_c3TdP_info:
         const _c3TdP;
         const 1;
         const 30;
 },
 _c3Te3() //  [R1]
         { []
         }
     {offset
       c3Te3: // global
           if (R1 & 7 == 1) goto u3Tej; else goto u3Tek;
       u3Tej: // global
           Sp = Sp + 16;
           call _c3Tea() args: 0, res: 0, upd: 0;
       u3Tek: // global
           Sp = Sp + 8;
           call _c3Tee() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Te3_info" {
     block_c3Te3_info:
         const _c3Te3;
         const 1;
         const 30;
 },
 _c3Tee() //  []
         { []
         }
     {offset
       c3Tee: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Tea() //  []
         { []
         }
     {offset
       c3Tea: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3N8h_entry() //  [R1]
         { []
         }
     {offset
       c3Tet: // global
           _s3N8h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Teu; else goto c3Tev;
       c3Tev: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Tex; else goto c3Tew;
       c3Tex: // global
           HpAlloc = 64;
           goto c3Teu;
       c3Teu: // global
           R1 = _s3N8h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Tew: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3N8h::P64;
           _s3N82::P64 = P64[_s3N8h::P64 + 16];
           _s3N84::P64 = P64[_s3N8h::P64 + 24];
           _s3N86::P64 = P64[_s3N8h::P64 + 32];
           _s3N87::P64 = P64[_s3N8h::P64 + 40];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s3N87::P64;
           P64[Hp - 32] = _s3N82::P64;
           P64[Hp - 24] = _s3N84::P64;
           I64[Hp - 16] = sat_s3N8g_info;
           P64[Hp - 8] = _s3N86::P64;
           P64[Hp] = Hp - 56;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3N8h_info" {
     sat_s3N8h_info:
         const sat_s3N8h_entry;
         const 4;
         const 4294967311;
         const S3NLQ_srt+64;
 },
 lvl116_s3N88_entry() //  [R1]
         { []
         }
     {offset
       c3Tey: // global
           _s3N88::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Tez; else goto c3TeA;
       c3TeA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3TeC; else goto c3TeB;
       c3TeC: // global
           HpAlloc = 48;
           goto c3Tez;
       c3Tez: // global
           R1 = _s3N88::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TeB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3N88::P64;
           _s3N82::P64 = P64[_s3N88::P64 + 16];
           _s3N84::P64 = P64[_s3N88::P64 + 24];
           _s3N86::P64 = P64[_s3N88::P64 + 32];
           _s3N87::P64 = P64[_s3N88::P64 + 40];
           I64[Hp - 40] = sat_s3N8h_info;
           P64[Hp - 24] = _s3N82::P64;
           P64[Hp - 16] = _s3N84::P64;
           P64[Hp - 8] = _s3N86::P64;
           P64[Hp] = _s3N87::P64;
           R3 = Hp - 40;
           R2 = GHC.Read.$fReadChar3_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3N88_info" {
     lvl116_s3N88_info:
         const lvl116_s3N88_entry;
         const 4;
         const 12884901903;
         const S3NLQ_srt+64;
 },
 k1_s3N8i_entry() //  [R1]
         { []
         }
     {offset
       c3TeI: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3N8i_info" {
     k1_s3N8i_info:
         const k1_s3N8i_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3N8l_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TeR: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N8l_info" {
     sat_s3N8l_info:
         const sat_s3N8l_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3N8o_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TeU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3TeW; else goto c3TeX;
       c3TeW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TeX: // global
           I64[Sp - 32] = block_c3Tdg_info;
           _s3N82::P64 = P64[R1 + 15];
           _s3N83::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 24] = _s3N82::P64;
           P64[Sp - 16] = _s3N83::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Tf1; else goto c3Tdh;
       u3Tf1: // global
           call _c3Tdg(R1) args: 0, res: 0, upd: 0;
       c3Tdh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N8o_info" {
     sat_s3N8o_info:
         const sat_s3N8o_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S3NLQ_srt+64;
 },
 _c3Tdg() //  [R1]
         { []
         }
     {offset
       c3Tdg: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3Tf0; else goto c3TeZ;
       c3Tf0: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TeZ: // global
           _s3N86::P64 = P64[R1 + 7];
           _s3N87::P64 = P64[R1 + 15];
           I64[Hp - 120] = lvl116_s3N88_info;
           P64[Hp - 104] = P64[Sp + 8];
           _s3N84::P64 = P64[Sp + 24];
           P64[Hp - 96] = _s3N84::P64;
           P64[Hp - 88] = _s3N86::P64;
           P64[Hp - 80] = _s3N87::P64;
           I64[Hp - 72] = k1_s3N8i_info;
           P64[Hp - 64] = Hp - 120;
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3N84::P64;
           I64[Hp - 24] = sat_s3N8l_info;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp + 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tdg_info" {
     block_c3Tdg_info:
         const _c3Tdg;
         const 3;
         const 12884901918;
         const S3NLQ_srt+64;
 },
 GHC.Read.$fReadGeneralCategory36_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Tf2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Tf6; else goto c3Tf5;
       c3Tf6: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadGeneralCategory36_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Tf5: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3N8o_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory36_info" {
     GHC.Read.$fReadGeneralCategory36_info:
         const GHC.Read.$fReadGeneralCategory36_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S3NLQ_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.116640865 UTC

[section ""data" . lvl_r3N5k_closure" {
     lvl_r3N5k_closure:
         const lvl_r3N5k_info;
 },
 lvl_r3N5k_entry() //  []
         { []
         }
     {offset
       c3Tgb: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_r3N5k_info" {
     lvl_r3N5k_info:
         const lvl_r3N5k_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.121203993 UTC

[section ""data" . GHC.Read.choose2_closure" {
     GHC.Read.choose2_closure:
         const GHC.Read.choose2_info;
         const 0;
 },
 sat_s3N8v_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tgy: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N8v_info" {
     sat_s3N8v_info:
         const sat_s3N8v_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+88;
 },
 GHC.Read.choose2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3TgF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3TgG; else goto c3TgH;
       c3TgG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.choose2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TgH: // global
           I64[Sp - 16] = block_c3Tgn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3TgN; else goto c3Tgo;
       u3TgN: // global
           call _c3Tgn(R1) args: 0, res: 0, upd: 0;
       c3Tgo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.choose2_info" {
     GHC.Read.choose2_info:
         const GHC.Read.choose2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+80;
 },
 _c3Tgn() //  [R1]
         { []
         }
     {offset
       c3Tgn: // global
           if (R1 & 7 == 1) goto c3TgC; else goto c3TgD;
       c3TgC: // global
           R1 = lvl_r3N5k_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3TgD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TgM; else goto c3TgL;
       c3TgM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TgL: // global
           _s3N8t::P64 = P64[R1 + 6];
           _s3N8u::P64 = P64[R1 + 14];
           I64[Hp - 8] = sat_s3N8v_info;
           P64[Hp] = _s3N8u::P64;
           R4 = P64[Sp + 8];
           R3 = Hp - 7;
           R2 = _s3N8t::P64;
           Sp = Sp + 16;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tgn_info" {
     block_c3Tgn_info:
         const _c3Tgn;
         const 1;
         const 12884901918;
         const S3NLQ_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.128172347 UTC

[section ""data" . GHC.Read.choose1_closure" {
     GHC.Read.choose1_closure:
         const GHC.Read.choose1_info;
         const 0;
 },
 GHC.Read.choose1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Th7: // global
           R3 = R3;
           R2 = R2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.choose1_info" {
     GHC.Read.choose1_info:
         const GHC.Read.choose1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.131581436 UTC

[section ""data" . GHC.Read.choose_closure" {
     GHC.Read.choose_closure:
         const GHC.Read.choose_info;
         const 0;
 },
 GHC.Read.choose_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Thi: // global
           R3 = R3;
           R2 = R2;
           call GHC.Read.choose1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.choose_info" {
     GHC.Read.choose_info:
         const GHC.Read.choose_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.13484794 UTC

[section ""data" . GHC.Read.expectP1_closure" {
     GHC.Read.expectP1_closure:
         const GHC.Read.expectP1_info;
         const 0;
 },
 GHC.Read.expectP1_entry() //  [R2, R4]
         { []
         }
     {offset
       c3Tht: // global
           R3 = R4;
           R2 = R2;
           call Text.Read.Lex.expect1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.expectP1_info" {
     GHC.Read.expectP1_info:
         const GHC.Read.expectP1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3NLQ_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.138506495 UTC

[section ""data" . GHC.Read.expectP_closure" {
     GHC.Read.expectP_closure:
         const GHC.Read.expectP_info;
         const 0;
 },
 GHC.Read.expectP_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3ThE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.expectP1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.expectP_info" {
     GHC.Read.expectP_info:
         const GHC.Read.expectP_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3NLQ_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.141874565 UTC

[section ""cstring" . GHC.Read.readField3_bytes" {
     GHC.Read.readField3_bytes:
         I8[] [61]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.144109387 UTC

[section ""data" . GHC.Read.readField2_closure" {
     GHC.Read.readField2_closure:
         const GHC.Read.readField2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.readField2_entry() //  [R1]
         { []
         }
     {offset
       c3ThS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ThT; else goto c3ThU;
       c3ThT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ThU: // global
           (_c3ThP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ThP::I64 == 0) goto c3ThR; else goto c3ThQ;
       c3ThR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ThQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ThP::I64;
           R2 = GHC.Read.readField3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.readField2_info" {
     GHC.Read.readField2_info:
         const GHC.Read.readField2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.147946533 UTC

[section ""data" . GHC.Read.readField_lexeme_closure" {
     GHC.Read.readField_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.readField2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.151402398 UTC

[section ""data" . GHC.Read.$wreadField_closure" {
     GHC.Read.$wreadField_closure:
         const GHC.Read.$wreadField_info;
         const 0;
 },
 sat_s3N8I_entry() //  [R1]
         { []
         }
     {offset
       c3Tih: // global
           R3 = P64[R1 + 23];
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N8I_info" {
     sat_s3N8I_info:
         const sat_s3N8I_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3N8L_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tin: // global
           _s3N8G::P64 = R2;
           _s3N8L::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Tio; else goto c3Tip;
       c3Tip: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Tir; else goto c3Tiq;
       c3Tir: // global
           HpAlloc = 32;
           goto c3Tio;
       c3Tio: // global
           R2 = _s3N8G::P64;
           R1 = _s3N8L::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Tiq: // global
           _s3N8C::P64 = P64[_s3N8L::P64 + 7];
           _s3N8D::P64 = P64[_s3N8L::P64 + 15];
           _s3N8E::P64 = P64[_s3N8L::P64 + 23];
           I64[Hp - 24] = sat_s3N8I_info;
           P64[Hp - 16] = _s3N8C::P64;
           P64[Hp - 8] = _s3N8D::P64;
           P64[Hp] = _s3N8E::P64;
           I64[Sp - 8] = block_c3Tik_info;
           R3 = Hp - 23;
           R2 = GHC.Read.readField_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N8L_info" {
     sat_s3N8L_info:
         const sat_s3N8L_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3Tik() //  [R1]
         { []
         }
     {offset
       c3Tik: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Tiu; else goto c3Tit;
       c3Tiu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Tit: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tik_info" {
     block_c3Tik_info:
         const _c3Tik;
         const 0;
         const 30;
 },
 GHC.Read.$wreadField_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Tiw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3TiA; else goto c3Tiz;
       c3TiA: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$wreadField_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Tiz: // global
           I64[Hp - 40] = sat_s3N8L_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R2;
           R3 = Hp - 39;
           R2 = Hp - 4;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$wreadField_info" {
     GHC.Read.$wreadField_info:
         const GHC.Read.$wreadField_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const S3NLQ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.160746077 UTC

[section ""data" . GHC.Read.readField1_closure" {
     GHC.Read.readField1_closure:
         const GHC.Read.readField1_info;
         const 0;
 },
 GHC.Read.readField1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3TiX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TiY; else goto c3TiZ;
       c3TiY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.readField1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TiZ: // global
           I64[Sp - 8] = block_c3TiU_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Read.$wreadField_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readField1_info" {
     GHC.Read.readField1_info:
         const GHC.Read.readField1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3NLQ_srt+136;
 },
 _c3TiU() //  [R1]
         { []
         }
     {offset
       c3TiU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Tj2; else goto c3Tj1;
       c3Tj2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Tj1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TiU_info" {
     block_c3TiU_info:
         const _c3TiU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.166882552 UTC

[section ""data" . GHC.Read.readField_closure" {
     GHC.Read.readField_closure:
         const GHC.Read.readField_info;
         const 0;
 },
 GHC.Read.readField_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Tjg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.readField1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readField_info" {
     GHC.Read.readField_info:
         const GHC.Read.readField_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3NLQ_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.170071708 UTC

[section ""cstring" . GHC.Read.readSymField5_bytes" {
     GHC.Read.readSymField5_bytes:
         I8[] [40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.172168298 UTC

[section ""data" . GHC.Read.readSymField4_closure" {
     GHC.Read.readSymField4_closure:
         const GHC.Read.readSymField4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.readSymField4_entry() //  [R1]
         { []
         }
     {offset
       c3Tju: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Tjv; else goto c3Tjw;
       c3Tjv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Tjw: // global
           (_c3Tjr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Tjr::I64 == 0) goto c3Tjt; else goto c3Tjs;
       c3Tjt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Tjs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Tjr::I64;
           R2 = GHC.Read.readSymField5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.readSymField4_info" {
     GHC.Read.readSymField4_info:
         const GHC.Read.readSymField4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.175875731 UTC

[section ""data" . GHC.Read.readSymField_lexeme1_closure" {
     GHC.Read.readSymField_lexeme1_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.readSymField4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.177696659 UTC

[section ""cstring" . GHC.Read.readSymField3_bytes" {
     GHC.Read.readSymField3_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.180140588 UTC

[section ""data" . GHC.Read.readSymField2_closure" {
     GHC.Read.readSymField2_closure:
         const GHC.Read.readSymField2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.readSymField2_entry() //  [R1]
         { []
         }
     {offset
       c3TjM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3TjN; else goto c3TjO;
       c3TjN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TjO: // global
           (_c3TjJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3TjJ::I64 == 0) goto c3TjL; else goto c3TjK;
       c3TjL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3TjK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3TjJ::I64;
           R2 = GHC.Read.readSymField3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.readSymField2_info" {
     GHC.Read.readSymField2_info:
         const GHC.Read.readSymField2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.18409749 UTC

[section ""data" . GHC.Read.readSymField_lexeme_closure" {
     GHC.Read.readSymField_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.readSymField2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.190510497 UTC

[section ""data" . GHC.Read.$wreadSymField_closure" {
     GHC.Read.$wreadSymField_closure:
         const GHC.Read.$wreadSymField_info;
         const 0;
 },
 sat_s3N91_entry() //  [R1]
         { []
         }
     {offset
       c3Tkl: // global
           R3 = P64[R1 + 23];
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N91_info" {
     sat_s3N91_info:
         const sat_s3N91_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3N94_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tkr: // global
           _s3N8Z::P64 = R2;
           _s3N94::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Tks; else goto c3Tkt;
       c3Tkt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Tkv; else goto c3Tku;
       c3Tkv: // global
           HpAlloc = 32;
           goto c3Tks;
       c3Tks: // global
           R2 = _s3N8Z::P64;
           R1 = _s3N94::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Tku: // global
           _s3N8T::P64 = P64[_s3N94::P64 + 7];
           _s3N8U::P64 = P64[_s3N94::P64 + 15];
           _s3N8V::P64 = P64[_s3N94::P64 + 23];
           I64[Hp - 24] = sat_s3N91_info;
           P64[Hp - 16] = _s3N8T::P64;
           P64[Hp - 8] = _s3N8U::P64;
           P64[Hp] = _s3N8V::P64;
           I64[Sp - 8] = block_c3Tko_info;
           R3 = Hp - 23;
           R2 = GHC.Read.readField_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N94_info" {
     sat_s3N94_info:
         const sat_s3N94_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3Tko() //  [R1]
         { []
         }
     {offset
       c3Tko: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Tky; else goto c3Tkx;
       c3Tky: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Tkx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tko_info" {
     block_c3Tko_info:
         const _c3Tko;
         const 0;
         const 30;
 },
 sat_s3N97_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TkC: // global
           _s3N8Y::P64 = R2;
           _s3N97::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3TkD; else goto c3TkE;
       c3TkE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3TkG; else goto c3TkF;
       c3TkG: // global
           HpAlloc = 32;
           goto c3TkD;
       c3TkD: // global
           R2 = _s3N8Y::P64;
           R1 = _s3N97::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TkF: // global
           _s3N8T::P64 = P64[_s3N97::P64 + 7];
           _s3N8U::P64 = P64[_s3N97::P64 + 15];
           _s3N8V::P64 = P64[_s3N97::P64 + 23];
           I64[Hp - 24] = sat_s3N94_info;
           P64[Hp - 16] = _s3N8T::P64;
           P64[Hp - 8] = _s3N8U::P64;
           P64[Hp] = _s3N8V::P64;
           I64[Sp - 8] = block_c3Tkz_info;
           R3 = Hp - 23;
           R2 = GHC.Read.readSymField_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N97_info" {
     sat_s3N97_info:
         const sat_s3N97_entry;
         const 3;
         const 81604378632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3Tkz() //  [R1]
         { []
         }
     {offset
       c3Tkz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TkJ; else goto c3TkI;
       c3TkJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TkI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tkz_info" {
     block_c3Tkz_info:
         const _c3Tkz;
         const 0;
         const 30;
 },
 sat_s3N9a_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TkO: // global
           _s3N8W::P64 = R2;
           _s3N9a::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3TkP; else goto c3TkQ;
       c3TkQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3TkS; else goto c3TkR;
       c3TkS: // global
           HpAlloc = 48;
           goto c3TkP;
       c3TkP: // global
           R2 = _s3N8W::P64;
           R1 = _s3N9a::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TkR: // global
           _s3N8S::P64 = P64[_s3N9a::P64 + 7];
           _s3N8T::P64 = P64[_s3N9a::P64 + 15];
           _s3N8U::P64 = P64[_s3N9a::P64 + 23];
           _s3N8V::P64 = P64[_s3N9a::P64 + 31];
           I64[Hp - 40] = sat_s3N97_info;
           P64[Hp - 32] = _s3N8T::P64;
           P64[Hp - 24] = _s3N8U::P64;
           P64[Hp - 16] = _s3N8V::P64;
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = _s3N8S::P64;
           I64[Sp - 8] = block_c3TkL_info;
           R3 = Hp - 39;
           R2 = Hp - 3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9a_info" {
     sat_s3N9a_info:
         const sat_s3N9a_entry;
         const 4;
         const 81604378632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TkL() //  [R1]
         { []
         }
     {offset
       c3TkL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TkV; else goto c3TkU;
       c3TkV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TkU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TkL_info" {
     block_c3TkL_info:
         const _c3TkL;
         const 0;
         const 30;
 },
 GHC.Read.$wreadSymField_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3TkW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Tl0; else goto c3TkZ;
       c3Tl0: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$wreadSymField_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TkZ: // global
           I64[Hp - 32] = sat_s3N9a_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R3 = Hp - 31;
           R2 = GHC.Read.readSymField_lexeme1_closure+3;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$wreadSymField_info" {
     GHC.Read.$wreadSymField_info:
         const GHC.Read.$wreadSymField_entry;
         const 0;
         const 493921239054;
         const 17179869208;
         const S3NLQ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.207806575 UTC

[section ""data" . GHC.Read.readSymField1_closure" {
     GHC.Read.readSymField1_closure:
         const GHC.Read.readSymField1_info;
         const 0;
 },
 GHC.Read.readSymField1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3TlD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TlE; else goto c3TlF;
       c3TlE: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.readSymField1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TlF: // global
           I64[Sp - 8] = block_c3TlA_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Read.$wreadSymField_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readSymField1_info" {
     GHC.Read.readSymField1_info:
         const GHC.Read.readSymField1_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const S3NLQ_srt+160;
 },
 _c3TlA() //  [R1]
         { []
         }
     {offset
       c3TlA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TlI; else goto c3TlH;
       c3TlI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TlH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TlA_info" {
     block_c3TlA_info:
         const _c3TlA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.213089114 UTC

[section ""data" . GHC.Read.readSymField_closure" {
     GHC.Read.readSymField_closure:
         const GHC.Read.readSymField_info;
         const 0;
 },
 GHC.Read.readSymField_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3TlW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.readSymField1_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readSymField_info" {
     GHC.Read.readSymField_info:
         const GHC.Read.readSymField_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3NLQ_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.216236183 UTC

[section ""cstring" . GHC.Read.$fRead(,)4_bytes" {
     GHC.Read.$fRead(,)4_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.218769267 UTC

[section ""data" . GHC.Read.$fRead(,)3_closure" {
     GHC.Read.$fRead(,)3_closure:
         const GHC.Read.$fRead(,)3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead(,)3_entry() //  [R1]
         { []
         }
     {offset
       c3Tma: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Tmb; else goto c3Tmc;
       c3Tmb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Tmc: // global
           (_c3Tm7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Tm7::I64 == 0) goto c3Tm9; else goto c3Tm8;
       c3Tm9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Tm8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Tm7::I64;
           R2 = GHC.Read.$fRead(,)4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)3_info" {
     GHC.Read.$fRead(,)3_info:
         const GHC.Read.$fRead(,)3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.22262795 UTC

[section ""data" . GHC.Read.$fRead(,)_lexeme_closure" {
     GHC.Read.$fRead(,)_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.$fRead(,)3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.228076931 UTC

[section ""data" . GHC.Read.$fRead(,)2_closure" {
     GHC.Read.$fRead(,)2_closure:
         const GHC.Read.$fRead(,)2_info;
         const 0;
 },
 ds1_s3N9k_entry() //  [R1]
         { []
         }
     {offset
       c3Tmt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Tmu; else goto c3Tmv;
       c3Tmu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Tmv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3N9k_info" {
     ds1_s3N9k_info:
         const ds1_s3N9k_entry;
         const 2;
         const 18;
 },
 sat_s3N9q_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TmR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3TmV; else goto c3TmU;
       c3TmV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TmU: // global
           _s3N9l::P64 = P64[R1 + 7];
           _s3N9m::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3N9m::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3N9l::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9q_info" {
     sat_s3N9q_info:
         const sat_s3N9q_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3N9r_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TmW: // global
           _s3N9n::P64 = R2;
           _s3N9r::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3TmX; else goto c3TmY;
       c3TmY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Tn0; else goto c3TmZ;
       c3Tn0: // global
           HpAlloc = 24;
           goto c3TmX;
       c3TmX: // global
           R2 = _s3N9n::P64;
           R1 = _s3N9r::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TmZ: // global
           _s3N9i::P64 = P64[_s3N9r::P64 + 7];
           _s3N9j::P64 = P64[_s3N9r::P64 + 15];
           _s3N9l::P64 = P64[_s3N9r::P64 + 23];
           _s3N9m::P64 = P64[_s3N9r::P64 + 31];
           I64[Hp - 16] = sat_s3N9q_info;
           P64[Hp - 8] = _s3N9l::P64;
           P64[Hp] = _s3N9m::P64;
           R2 = _s3N9i::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3N9j::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9r_info" {
     sat_s3N9r_info:
         const sat_s3N9r_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_s3N9u_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tn4: // global
           _s3N9m::P64 = R2;
           _s3N9u::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Tn5; else goto c3Tn6;
       c3Tn6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Tn8; else goto c3Tn7;
       c3Tn8: // global
           HpAlloc = 40;
           goto c3Tn5;
       c3Tn5: // global
           R2 = _s3N9m::P64;
           R1 = _s3N9u::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Tn7: // global
           _s3N9i::P64 = P64[_s3N9u::P64 + 7];
           _s3N9j::P64 = P64[_s3N9u::P64 + 15];
           _s3N9l::P64 = P64[_s3N9u::P64 + 23];
           I64[Hp - 32] = sat_s3N9r_info;
           P64[Hp - 24] = _s3N9i::P64;
           P64[Hp - 16] = _s3N9j::P64;
           P64[Hp - 8] = _s3N9l::P64;
           P64[Hp] = _s3N9m::P64;
           I64[Sp - 8] = block_c3Tn1_info;
           R3 = Hp - 31;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9u_info" {
     sat_s3N9u_info:
         const sat_s3N9u_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3Tn1() //  [R1]
         { []
         }
     {offset
       c3Tn1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Tnb; else goto c3Tna;
       c3Tnb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Tna: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tn1_info" {
     block_c3Tn1_info:
         const _c3Tn1;
         const 0;
         const 30;
 },
 sat_s3N9v_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tnc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Tng; else goto c3Tnf;
       c3Tng: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Tnf: // global
           _s3N9i::P64 = P64[R1 + 7];
           _s3N9j::P64 = P64[R1 + 15];
           _s3N9k::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3N9u_info;
           P64[Hp - 16] = _s3N9i::P64;
           P64[Hp - 8] = _s3N9j::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3N9k::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9v_info" {
     sat_s3N9v_info:
         const sat_s3N9v_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 GHC.Read.$fRead(,)2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Tnh: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Tnl; else goto c3Tnk;
       c3Tnl: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Tnk: // global
           I64[Hp - 56] = ds1_s3N9k_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3N9v_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)2_info" {
     GHC.Read.$fRead(,)2_info:
         const GHC.Read.$fRead(,)2_entry;
         const 0;
         const 3302829850638;
         const 12884901911;
         const S3NLQ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.249624212 UTC

[section ""data" . GHC.Read.$fRead(,,,)2_closure" {
     GHC.Read.$fRead(,,,)2_closure:
         const GHC.Read.$fRead(,,,)2_info;
         const 0;
 },
 ds1_s3N9B_entry() //  [R1]
         { []
         }
     {offset
       c3TnY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3TnZ; else goto c3To0;
       c3TnZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3To0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3N9B_info" {
     ds1_s3N9B_info:
         const ds1_s3N9B_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+192;
 },
 sat_s3N9N_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tot: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Tox; else goto c3Toy;
       c3Tox: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Toy: // global
           I64[Sp - 32] = block_c3Toq_info;
           _s3N9C::P64 = P64[R1 + 7];
           _s3N9F::P64 = P64[R1 + 15];
           _s3N9G::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3N9C::P64;
           P64[Sp - 16] = _s3N9F::P64;
           P64[Sp - 8] = _s3N9G::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3ToC; else goto c3Tor;
       u3ToC: // global
           call _c3Toq(R1) args: 0, res: 0, upd: 0;
       c3Tor: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9N_info" {
     sat_s3N9N_info:
         const sat_s3N9N_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c3Toq() //  [R1]
         { []
         }
     {offset
       c3Toq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ToB; else goto c3ToA;
       c3ToB: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ToA: // global
           _s3N9K::P64 = P64[R1 + 7];
           _s3N9L::P64 = P64[R1 + 15];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s3N9K::P64;
           P64[Hp] = _s3N9L::P64;
           R2 = Hp - 31;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Toq_info" {
     block_c3Toq_info:
         const _c3Toq;
         const 3;
         const 30;
 },
 sat_s3N9O_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ToD: // global
           _s3N9H::P64 = R2;
           _s3N9O::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ToE; else goto c3ToF;
       c3ToF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ToH; else goto c3ToG;
       c3ToH: // global
           HpAlloc = 32;
           goto c3ToE;
       c3ToE: // global
           R2 = _s3N9H::P64;
           R1 = _s3N9O::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ToG: // global
           _s3N9y::P64 = P64[_s3N9O::P64 + 7];
           _s3N9z::P64 = P64[_s3N9O::P64 + 15];
           _s3N9A::P64 = P64[_s3N9O::P64 + 23];
           _s3N9C::P64 = P64[_s3N9O::P64 + 31];
           _s3N9F::P64 = P64[_s3N9O::P64 + 39];
           _s3N9G::P64 = P64[_s3N9O::P64 + 47];
           I64[Hp - 24] = sat_s3N9N_info;
           P64[Hp - 16] = _s3N9C::P64;
           P64[Hp - 8] = _s3N9F::P64;
           P64[Hp] = _s3N9G::P64;
           R4 = _s3N9A::P64;
           R3 = _s3N9z::P64;
           R2 = _s3N9y::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9O_info" {
     sat_s3N9O_info:
         const sat_s3N9O_entry;
         const 6;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+192;
 },
 sat_s3N9R_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ToI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ToM; else goto c3ToN;
       c3ToM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ToN: // global
           I64[Sp - 40] = block_c3Tob_info;
           _s3N9y::P64 = P64[R1 + 7];
           _s3N9z::P64 = P64[R1 + 15];
           _s3N9A::P64 = P64[R1 + 23];
           _s3N9C::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3N9y::P64;
           P64[Sp - 24] = _s3N9z::P64;
           P64[Sp - 16] = _s3N9A::P64;
           P64[Sp - 8] = _s3N9C::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3ToU; else goto c3Toc;
       u3ToU: // global
           call _c3Tob(R1) args: 0, res: 0, upd: 0;
       c3Toc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9R_info" {
     sat_s3N9R_info:
         const sat_s3N9R_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3Tob() //  [R1]
         { []
         }
     {offset
       c3Tob: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ToQ; else goto c3ToP;
       c3ToQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ToP: // global
           _s3N9F::P64 = P64[R1 + 7];
           _s3N9G::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3N9O_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s3N9F::P64;
           P64[Hp] = _s3N9G::P64;
           I64[Sp + 32] = block_c3ToJ_info;
           R3 = Hp - 47;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tob_info" {
     block_c3Tob_info:
         const _c3Tob;
         const 4;
         const 3302829850654;
         const S3NLQ_srt+120;
 },
 _c3ToJ() //  [R1]
         { []
         }
     {offset
       c3ToJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ToT; else goto c3ToS;
       c3ToT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ToS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ToJ_info" {
     block_c3ToJ_info:
         const _c3ToJ;
         const 0;
         const 30;
 },
 sat_s3N9S_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ToV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3ToZ; else goto c3ToY;
       c3ToZ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ToY: // global
           _s3N9y::P64 = P64[R1 + 7];
           _s3N9z::P64 = P64[R1 + 15];
           _s3N9A::P64 = P64[R1 + 23];
           _s3N9B::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3N9R_info;
           P64[Hp - 24] = _s3N9y::P64;
           P64[Hp - 16] = _s3N9z::P64;
           P64[Hp - 8] = _s3N9A::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3N9B::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3N9S_info" {
     sat_s3N9S_info:
         const sat_s3N9S_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 GHC.Read.$fRead(,,,)2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Tp0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Tp4; else goto c3Tp3;
       c3Tp4: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Tp3: // global
           I64[Hp - 72] = ds1_s3N9B_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R6;
           I64[Hp - 32] = sat_s3N9S_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = Hp - 72;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)2_info" {
     GHC.Read.$fRead(,,,)2_info:
         const GHC.Read.$fRead(,,,)2_entry;
         const 0;
         const 7700876361742;
         const 21474836505;
         const S3NLQ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.275217489 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)2_closure" {
     GHC.Read.$fRead(,,,,,,,)2_closure:
         const GHC.Read.$fRead(,,,,,,,)2_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)2_slow() //  [R1]
         { []
         }
     {offset
       c3TpO: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 40, res: 0, upd: 8;
     }
 },
 ds1_s3Na2_entry() //  [R1]
         { []
         }
     {offset
       c3TpW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3TpX; else goto c3TpY;
       c3TpX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TpY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Na2_info" {
     ds1_s3Na2_info:
         const ds1_s3Na2_entry;
         const 5;
         const 4294967311;
         const S3NLQ_srt+200;
 },
 sat_s3Nai_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tqr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Tqv; else goto c3Tqw;
       c3Tqv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Tqw: // global
           I64[Sp - 48] = block_c3Tqo_info;
           _s3Na3::P64 = P64[R1 + 7];
           _s3Na6::P64 = P64[R1 + 15];
           _s3Na7::P64 = P64[R1 + 23];
           _s3Na8::P64 = P64[R1 + 31];
           _s3Na9::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 40] = _s3Na3::P64;
           P64[Sp - 32] = _s3Na6::P64;
           P64[Sp - 24] = _s3Na7::P64;
           P64[Sp - 16] = _s3Na8::P64;
           P64[Sp - 8] = _s3Na9::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3TqA; else goto c3Tqp;
       u3TqA: // global
           call _c3Tqo(R1) args: 0, res: 0, upd: 0;
       c3Tqp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nai_info" {
     sat_s3Nai_info:
         const sat_s3Nai_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c3Tqo() //  [R1]
         { []
         }
     {offset
       c3Tqo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Tqz; else goto c3Tqy;
       c3Tqz: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Tqy: // global
           _s3Nad::P64 = P64[R1 + 7];
           _s3Nae::P64 = P64[R1 + 15];
           _s3Naf::P64 = P64[R1 + 23];
           _s3Nag::P64 = P64[R1 + 31];
           I64[Hp - 64] = (,,,,,,,)_con_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _s3Nad::P64;
           P64[Hp - 16] = _s3Nae::P64;
           P64[Hp - 8] = _s3Naf::P64;
           P64[Hp] = _s3Nag::P64;
           R2 = Hp - 63;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tqo_info" {
     block_c3Tqo_info:
         const _c3Tqo;
         const 5;
         const 30;
 },
 sat_s3Naj_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TqB: // global
           _s3Naa::P64 = R2;
           _s3Naj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TqC; else goto c3TqD;
       c3TqD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3TqF; else goto c3TqE;
       c3TqF: // global
           HpAlloc = 48;
           goto c3TqC;
       c3TqC: // global
           R2 = _s3Naa::P64;
           R1 = _s3Naj::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TqE: // global
           _s3N9X::P64 = P64[_s3Naj::P64 + 7];
           _s3N9Y::P64 = P64[_s3Naj::P64 + 15];
           _s3N9Z::P64 = P64[_s3Naj::P64 + 23];
           _s3Na0::P64 = P64[_s3Naj::P64 + 31];
           _s3Na1::P64 = P64[_s3Naj::P64 + 39];
           _s3Na3::P64 = P64[_s3Naj::P64 + 47];
           _s3Na6::P64 = P64[_s3Naj::P64 + 55];
           _s3Na7::P64 = P64[_s3Naj::P64 + 63];
           _s3Na8::P64 = P64[_s3Naj::P64 + 71];
           _s3Na9::P64 = P64[_s3Naj::P64 + 79];
           I64[Hp - 40] = sat_s3Nai_info;
           P64[Hp - 32] = _s3Na3::P64;
           P64[Hp - 24] = _s3Na6::P64;
           P64[Hp - 16] = _s3Na7::P64;
           P64[Hp - 8] = _s3Na8::P64;
           P64[Hp] = _s3Na9::P64;
           R6 = _s3Na1::P64;
           R5 = _s3Na0::P64;
           R4 = _s3N9Z::P64;
           R3 = _s3N9Y::P64;
           R2 = _s3N9X::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Naj_info" {
     sat_s3Naj_info:
         const sat_s3Naj_entry;
         const 10;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+200;
 },
 sat_s3Nam_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TqG: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3TqK; else goto c3TqL;
       c3TqK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TqL: // global
           I64[Sp - 56] = block_c3Tq9_info;
           _s3N9X::P64 = P64[R1 + 7];
           _s3N9Y::P64 = P64[R1 + 15];
           _s3N9Z::P64 = P64[R1 + 23];
           _s3Na0::P64 = P64[R1 + 31];
           _s3Na1::P64 = P64[R1 + 39];
           _s3Na3::P64 = P64[R1 + 47];
           R1 = R2;
           P64[Sp - 48] = _s3N9X::P64;
           P64[Sp - 40] = _s3N9Y::P64;
           P64[Sp - 32] = _s3N9Z::P64;
           P64[Sp - 24] = _s3Na0::P64;
           P64[Sp - 16] = _s3Na1::P64;
           P64[Sp - 8] = _s3Na3::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u3TqS; else goto c3Tqa;
       u3TqS: // global
           call _c3Tq9(R1) args: 0, res: 0, upd: 0;
       c3Tqa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nam_info" {
     sat_s3Nam_info:
         const sat_s3Nam_entry;
         const 6;
         const 5501853106184;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3Tq9() //  [R1]
         { []
         }
     {offset
       c3Tq9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3TqO; else goto c3TqN;
       c3TqO: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TqN: // global
           _s3Na6::P64 = P64[R1 + 7];
           _s3Na7::P64 = P64[R1 + 15];
           _s3Na8::P64 = P64[R1 + 23];
           _s3Na9::P64 = P64[R1 + 31];
           I64[Hp - 80] = sat_s3Naj_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = _s3Na6::P64;
           P64[Hp - 16] = _s3Na7::P64;
           P64[Hp - 8] = _s3Na8::P64;
           P64[Hp] = _s3Na9::P64;
           I64[Sp + 48] = block_c3TqH_info;
           R3 = Hp - 79;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 48;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tq9_info" {
     block_c3Tq9_info:
         const _c3Tq9;
         const 6;
         const 5501853106206;
         const S3NLQ_srt+120;
 },
 _c3TqH() //  [R1]
         { []
         }
     {offset
       c3TqH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TqR; else goto c3TqQ;
       c3TqR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TqQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TqH_info" {
     block_c3TqH_info:
         const _c3TqH;
         const 0;
         const 30;
 },
 sat_s3Nan_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TqT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3TqX; else goto c3TqW;
       c3TqX: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TqW: // global
           _s3N9X::P64 = P64[R1 + 7];
           _s3N9Y::P64 = P64[R1 + 15];
           _s3N9Z::P64 = P64[R1 + 23];
           _s3Na0::P64 = P64[R1 + 31];
           _s3Na1::P64 = P64[R1 + 39];
           _s3Na2::P64 = P64[R1 + 47];
           I64[Hp - 48] = sat_s3Nam_info;
           P64[Hp - 40] = _s3N9X::P64;
           P64[Hp - 32] = _s3N9Y::P64;
           P64[Hp - 24] = _s3N9Z::P64;
           P64[Hp - 16] = _s3Na0::P64;
           P64[Hp - 8] = _s3Na1::P64;
           P64[Hp] = R2;
           R2 = Hp - 47;
           R1 = _s3Na2::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nan_info" {
     sat_s3Nan_info:
         const sat_s3Nan_entry;
         const 6;
         const 5501853106184;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 GHC.Read.$fRead(,,,,,,,)2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3TqY: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3Tr2; else goto c3Tr1;
       c3Tr2: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,)2_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3Tr1: // global
           I64[Hp - 104] = ds1_s3Na2_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           _s3Na1::P64 = P64[Sp + 24];
           P64[Hp - 56] = _s3Na1::P64;
           I64[Hp - 48] = sat_s3Nan_info;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s3Na1::P64;
           P64[Hp] = Hp - 104;
           R1 = Hp - 47;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)2_info" {
     GHC.Read.$fRead(,,,,,,,)2_info:
         const GHC.Read.$fRead(,,,,,,,)2_entry;
         const 0;
         const 14297946128398;
         const 38654705664;
         const S3NLQ_srt+120;
         const 9;
         const GHC.Read.$fRead(,,,,,,,)2_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.301821671 UTC

[section ""data" . GHC.Read.$wskipSpacesThenP_closure" {
     GHC.Read.$wskipSpacesThenP_closure:
         const GHC.Read.$wskipSpacesThenP_info;
 },
 sat_s3NaF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tsy: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NaF_info" {
     sat_s3NaF_info:
         const sat_s3NaF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl2_s3NaD_entry() //  [R1]
         { []
         }
     {offset
       c3TsB: // global
           _s3NaD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TsC; else goto c3TsD;
       c3TsD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TsF; else goto c3TsE;
       c3TsF: // global
           HpAlloc = 16;
           goto c3TsC;
       c3TsC: // global
           R1 = _s3NaD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TsE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NaD::P64;
           _s3Nar::P64 = P64[_s3NaD::P64 + 16];
           _s3Nat::P64 = P64[_s3NaD::P64 + 24];
           _s3Nau::P64 = P64[_s3NaD::P64 + 32];
           _s3Nax::P64 = P64[_s3NaD::P64 + 40];
           I64[Hp - 8] = sat_s3NaF_info;
           P64[Hp] = _s3Nau::P64;
           R4 = Hp - 7;
           R3 = _s3Nat::P64;
           R2 = _s3Nax::P64;
           R1 = _s3Nar::P64;
           Sp = Sp - 16;
           call skip_s3Nar_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3NaD_info" {
     lvl2_s3NaD_info:
         const lvl2_s3NaD_entry;
         const 4;
         const 15;
 },
 sat_s3NaH_entry() //  [R1]
         { []
         }
     {offset
       c3TsL: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NaH_info" {
     sat_s3NaH_info:
         const sat_s3NaH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 skip_s3Nar_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3TsS: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TsT; else goto c3TsU;
       c3TsT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TsU: // global
           I64[Sp - 40] = block_c3Ts3_info;
           _s3Nar::P64 = R1;
           _s3Nao::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3Nao::P64;
           P64[Sp - 24] = _s3Nar::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3TtM; else goto c3Ts4;
       u3TtM: // global
           call _c3Ts3(R1) args: 0, res: 0, upd: 0;
       c3Ts4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . skip_s3Nar_info" {
     skip_s3Nar_info:
         const skip_s3Nar_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c3Ts3() //  [R1]
         { []
         }
     {offset
       c3Ts3: // global
           if (R1 & 7 == 1) goto u3TtB; else goto c3TsQ;
       u3TtB: // global
           Sp = Sp + 8;
           call _c3Tts() args: 0, res: 0, upd: 0;
       c3TsQ: // global
           I64[Sp - 8] = block_c3Ts9_info;
           _s3Nax::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Nax::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3TtE; else goto c3Tsa;
       u3TtE: // global
           call _c3Ts9(R1) args: 0, res: 0, upd: 0;
       c3Tsa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ts3_info" {
     block_c3Ts3_info:
         const _c3Ts3;
         const 4;
         const 30;
 },
 _c3Ts9() //  [R1]
         { []
         }
     {offset
       c3Ts9: // global
           _s3Naz::I64 = I64[R1 + 7];
           if (_s3Naz::I64 > 887) goto c3Ttg; else goto c3TtA;
       c3Ttg: // global
           (_s3NaN::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(_s3Naz::I64);
           if (_s3NaN::I64 != 0) goto u3TtJ; else goto u3TtC;
       u3TtC: // global
           Sp = Sp + 16;
           goto u3TtL;
       c3TtA: // global
           if (_s3Naz::I64 == 32) goto u3TtJ; else goto c3Tty;
       c3Tty: // global
           if ((_s3Naz::I64 + -9) <= 4) goto u3TtJ; else goto c3Ttv;
       c3Ttv: // global
           if (_s3Naz::I64 == 160) goto u3TtJ; else goto u3TtD;
       u3TtJ: // global
           call _c3Tsn() args: 0, res: 0, upd: 0;
       u3TtD: // global
           Sp = Sp + 16;
           goto u3TtL;
       u3TtL: // global
           call _c3Tts() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Ts9_info" {
     block_c3Ts9_info:
         const _c3Ts9;
         const 5;
         const 30;
 },
 _c3Tts() //  []
         { []
         }
     {offset
       c3Tts: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Tsn() //  []
         { []
         }
     {offset
       c3Tsn: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Tt2; else goto c3Tt1;
       c3Tt2: // global
           HpAlloc = 80;
           I64[Sp] = block_c3Tsn_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3Tt1: // global
           I64[Hp - 72] = lvl2_s3NaD_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = sat_s3NaH_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tsn_info" {
     block_c3Tsn_info:
         const _c3Tsn;
         const 133;
         const 30;
 },
 sat_s3NaU_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TtS: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 23];
           call skip_s3Nar_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NaU_info" {
     sat_s3NaU_info:
         const sat_s3NaU_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 GHC.Read.$wskipSpacesThenP_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3TtV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3TtZ; else goto c3TtY;
       c3TtZ: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$wskipSpacesThenP_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TtY: // global
           I64[Hp - 40] = skip_s3Nar_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3NaU_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 37;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$wskipSpacesThenP_info" {
     GHC.Read.$wskipSpacesThenP_info:
         const GHC.Read.$wskipSpacesThenP_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.322458567 UTC

[section ""data" . GHC.Read.$fRead()5_closure" {
     GHC.Read.$fRead()5_closure:
         const GHC.Read.$fRead()5_info;
 },
 GHC.Read.$fRead()5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3TuT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TuU; else goto c3TuV;
       c3TuU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead()5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TuV: // global
           I64[Sp - 8] = block_c3TuQ_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()5_info" {
     GHC.Read.$fRead()5_info:
         const GHC.Read.$fRead()5_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3TuQ() //  [R1]
         { []
         }
     {offset
       c3TuQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TuY; else goto c3TuX;
       c3TuY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TuX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TuQ_info" {
     block_c3TuQ_info:
         const _c3TuQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.332429639 UTC

[section ""data" . GHC.Read.$wparen'_closure" {
     GHC.Read.$wparen'_closure:
         const GHC.Read.$wparen'_info;
 },
 sat_s3Nbc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Tvz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3TvA; else goto c3TvB;
       c3TvA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TvB: // global
           I64[Sp - 16] = block_c3Tvw_info;
           _s3Nb7::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Nb7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3TvJ; else goto c3Tvx;
       u3TvJ: // global
           call _c3Tvw(R1) args: 0, res: 0, upd: 0;
       c3Tvx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nbc_info" {
     sat_s3Nbc_info:
         const sat_s3Nbc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Tvw() //  [R1]
         { []
         }
     {offset
       c3Tvw: // global
           if (I64[R1 + 7] == 41) goto c3TvI; else goto c3TvH;
       c3TvI: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3TvH: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tvw_info" {
     block_c3Tvw_info:
         const _c3Tvw;
         const 1;
         const 30;
 },
 sat_s3Nbd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TvL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3TvP; else goto c3TvO;
       c3TvP: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TvO: // global
           _s3Nb4::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = _s3Nb4::P64;
           I64[Hp - 24] = sat_s3Nbc_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nbd_info" {
     sat_s3Nbd_info:
         const sat_s3Nbd_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s3Nbg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TvT: // global
           _s3Nb4::P64 = R2;
           _s3Nbg::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3TvU; else goto c3TvV;
       c3TvV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TvX; else goto c3TvW;
       c3TvX: // global
           HpAlloc = 16;
           goto c3TvU;
       c3TvU: // global
           R2 = _s3Nb4::P64;
           R1 = _s3Nbg::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TvW: // global
           _s3Nb1::P64 = P64[_s3Nbg::P64 + 7];
           _s3Nb2::P64 = P64[_s3Nbg::P64 + 15];
           I64[Hp - 8] = sat_s3Nbd_info;
           P64[Hp] = _s3Nb4::P64;
           I64[Sp - 8] = block_c3TvQ_info;
           R4 = _s3Nb2::P64;
           R3 = _s3Nb1::P64;
           R2 = Hp - 6;
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nbg_info" {
     sat_s3Nbg_info:
         const sat_s3Nbg_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3TvQ() //  [R1]
         { []
         }
     {offset
       c3TvQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Tw0; else goto c3TvZ;
       c3Tw0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TvZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TvQ_info" {
     block_c3TvQ_info:
         const _c3TvQ;
         const 0;
         const 30;
 },
 lvl2_s3Nb3_entry() //  [R1]
         { []
         }
     {offset
       c3Tw1: // global
           _s3Nb3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Tw2; else goto c3Tw3;
       c3Tw3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Tw5; else goto c3Tw4;
       c3Tw5: // global
           HpAlloc = 24;
           goto c3Tw2;
       c3Tw2: // global
           R1 = _s3Nb3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Tw4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nb3::P64;
           _s3Nb0::P64 = P64[_s3Nb3::P64 + 16];
           _s3Nb1::P64 = P64[_s3Nb3::P64 + 24];
           _s3Nb2::P64 = P64[_s3Nb3::P64 + 32];
           I64[Hp - 16] = sat_s3Nbg_info;
           P64[Hp - 8] = _s3Nb1::P64;
           P64[Hp] = _s3Nb2::P64;
           R3 = Hp - 15;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R1 = _s3Nb0::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3Nb3_info" {
     lvl2_s3Nb3_info:
         const lvl2_s3Nb3_entry;
         const 3;
         const 15;
 },
 sat_s3Nbl_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Twe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Twf; else goto c3Twg;
       c3Twf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Twg: // global
           I64[Sp - 16] = block_c3Twb_info;
           _s3Nb3::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Nb3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Two; else goto c3Twc;
       u3Two: // global
           call _c3Twb(R1) args: 0, res: 0, upd: 0;
       c3Twc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nbl_info" {
     sat_s3Nbl_info:
         const sat_s3Nbl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Twb() //  [R1]
         { []
         }
     {offset
       c3Twb: // global
           if (I64[R1 + 7] == 40) goto c3Twn; else goto c3Twm;
       c3Twn: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Twm: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Twb_info" {
     block_c3Twb_info:
         const _c3Twb;
         const 1;
         const 30;
 },
 GHC.Read.$wparen'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Twp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Twt; else goto c3Tws;
       c3Twt: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$wparen'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Tws: // global
           I64[Hp - 48] = lvl2_s3Nb3_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3Nbl_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$wparen'_info" {
     GHC.Read.$wparen'_info:
         const GHC.Read.$wparen'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.352096233 UTC

[section ""data" . GHC.Read.paren2_closure" {
     GHC.Read.paren2_closure:
         const GHC.Read.paren2_info;
 },
 GHC.Read.paren2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Txl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Txm; else goto c3Txn;
       c3Txm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.paren2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Txn: // global
           I64[Sp - 8] = block_c3Txi_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.paren2_info" {
     GHC.Read.paren2_info:
         const GHC.Read.paren2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3Txi() //  [R1]
         { []
         }
     {offset
       c3Txi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Txq; else goto c3Txp;
       c3Txq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Txp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Txi_info" {
     block_c3Txi_info:
         const _c3Txi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.359301098 UTC

[section ""data" . GHC.Read.paren1_closure" {
     GHC.Read.paren1_closure:
         const GHC.Read.paren1_info;
 },
 sat_s3Nbu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TxJ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.paren2_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nbu_info" {
     sat_s3Nbu_info:
         const sat_s3Nbu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.paren1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3TxP: // global
           _s3Nbt::P64 = R4;
           _s3Nbs::P64 = R3;
           _s3Nbr::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3TxQ; else goto c3TxR;
       c3TxR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TxT; else goto c3TxS;
       c3TxT: // global
           HpAlloc = 16;
           goto c3TxQ;
       c3TxQ: // global
           R4 = _s3Nbt::P64;
           R3 = _s3Nbs::P64;
           R2 = _s3Nbr::P64;
           R1 = GHC.Read.paren1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TxS: // global
           I64[Hp - 8] = sat_s3Nbu_info;
           P64[Hp] = _s3Nbr::P64;
           I64[Sp - 8] = block_c3TxM_info;
           R4 = _s3Nbt::P64;
           R3 = _s3Nbs::P64;
           R2 = Hp - 6;
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.paren1_info" {
     GHC.Read.paren1_info:
         const GHC.Read.paren1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3TxM() //  [R1]
         { []
         }
     {offset
       c3TxM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TxW; else goto c3TxV;
       c3TxW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TxV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TxM_info" {
     block_c3TxM_info:
         const _c3TxM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.367319453 UTC

[section ""data" . GHC.Read.paren_closure" {
     GHC.Read.paren_closure:
         const GHC.Read.paren_info;
 },
 GHC.Read.paren_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Tyd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.paren1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.paren_info" {
     GHC.Read.paren_info:
         const GHC.Read.paren_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.374580297 UTC

[section ""data" . GHC.Read.list3_closure" {
     GHC.Read.list3_closure:
         const GHC.Read.list3_info;
         const 0;
 },
 sat_s3NbI_entry() //  [R1]
         { []
         }
     {offset
       c3TyH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3TyI; else goto c3TyJ;
       c3TyI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TyJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3TyE_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NbI_info" {
     sat_s3NbI_info:
         const sat_s3NbI_entry;
         const 3;
         const 15;
 },
 _c3TyE() //  [R1]
         { []
         }
     {offset
       c3TyE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TyM; else goto c3TyL;
       c3TyM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3TyL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3TyE_info" {
     block_c3TyE_info:
         const _c3TyE;
         const 0;
         const 30;
 },
 sat_s3NbJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TyP: // global
           _s3NbE::P64 = R2;
           _s3NbJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TyQ; else goto c3TyR;
       c3TyR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3TyT; else goto c3TyS;
       c3TyT: // global
           HpAlloc = 40;
           goto c3TyQ;
       c3TyQ: // global
           R2 = _s3NbE::P64;
           R1 = _s3NbJ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TyS: // global
           _s3NbB::P64 = P64[_s3NbJ::P64 + 7];
           _s3NbC::P64 = P64[_s3NbJ::P64 + 15];
           _s3NbD::P64 = P64[_s3NbJ::P64 + 23];
           I64[Hp - 32] = sat_s3NbI_info;
           P64[Hp - 16] = _s3NbB::P64;
           P64[Hp - 8] = _s3NbC::P64;
           P64[Hp] = _s3NbE::P64;
           I64[Sp - 16] = block_c3TyN_info;
           R2 = _s3NbE::P64;
           R1 = _s3NbD::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NbJ_info" {
     sat_s3NbJ_info:
         const sat_s3NbJ_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+72;
 },
 _c3TyN() //  [R1]
         { []
         }
     {offset
       c3TyN: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TyN_info" {
     block_c3TyN_info:
         const _c3TyN;
         const 1;
         const 4294967326;
         const S3NLQ_srt+72;
 },
 optional_s3NbA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TyX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Tz1; else goto c3Tz0;
       c3Tz1: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Tz0: // global
           _s3Nbx::P64 = P64[R1 + 7];
           _s3NbB::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3Nbx::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3NbJ_info;
           P64[Hp - 16] = _s3NbB::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . optional_s3NbA_info" {
     optional_s3NbA_info:
         const optional_s3NbA_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3NLQ_srt+72;
 },
 optional1_s3NbB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Tz9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Tza; else goto c3Tzb;
       c3Tza: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Tzb: // global
           I64[Sp - 8] = block_c3Tz6_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . optional1_s3NbB_info" {
     optional1_s3NbB_info:
         const optional1_s3NbB_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Tz6() //  [R1]
         { []
         }
     {offset
       c3Tz6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Tze; else goto c3Tzd;
       c3Tze: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Tzd: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Tz6_info" {
     block_c3Tz6_info:
         const _c3Tz6;
         const 0;
         const 30;
 },
 GHC.Read.list3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Tzf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Tzj; else goto c3Tzi;
       c3Tzj: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.list3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Tzi: // global
           I64[Hp - 32] = optional_s3NbA_info;
           P64[Hp - 24] = R2;
           _c3Typ::P64 = Hp - 6;
           P64[Hp - 16] = _c3Typ::P64;
           I64[Hp - 8] = optional1_s3NbB_info;
           P64[Hp] = Hp - 31;
           _s3Nby::P64 = R3;
           R3 = R4;
           R2 = _s3Nby::P64;
           R1 = _c3Typ::P64;
           call optional1_s3NbB_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.list3_info" {
     GHC.Read.list3_info:
         const GHC.Read.list3_entry;
         const 0;
         const 1125904201809934;
         const 12884901911;
         const S3NLQ_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.391732494 UTC

[section ""data" . GHC.Read.parens_closure" {
     GHC.Read.parens_closure:
         const GHC.Read.parens_info;
         const 0;
 },
 GHC.Read.parens_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3TzW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.parens_info" {
     GHC.Read.parens_info:
         const GHC.Read.parens_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3NLQ_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.411436675 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3TA4: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 104, res: 0, upd: 8;
     }
 },
 ds1_s3Nc7_entry() //  [R1]
         { []
         }
     {offset
       c3TAh: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TAi; else goto c3TAj;
       c3TAi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TAj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Nc7_info" {
     ds1_s3Nc7_info:
         const ds1_s3Nc7_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+208;
 },
 sat_s3Ncy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TBe: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3TBi; else goto c3TBh;
       c3TBi: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TBh: // global
           _s3Nc8::P64 = P64[R1 + 7];
           _s3Ncb::P64 = P64[R1 + 15];
           _s3Ncc::P64 = P64[R1 + 23];
           _s3Ncd::P64 = P64[R1 + 31];
           _s3Nce::P64 = P64[R1 + 39];
           _s3Ncf::P64 = P64[R1 + 47];
           _s3Ncg::P64 = P64[R1 + 55];
           _s3Nch::P64 = P64[R1 + 63];
           _s3Nci::P64 = P64[R1 + 71];
           _s3Ncm::P64 = P64[R1 + 79];
           _s3Ncn::P64 = P64[R1 + 87];
           _s3Nco::P64 = P64[R1 + 95];
           _s3Ncp::P64 = P64[R1 + 103];
           _s3Nct::P64 = P64[R1 + 111];
           _s3Ncu::P64 = P64[R1 + 119];
           I64[Hp - 120] = (,,,,,,,,,,,,,,)_con_info;
           P64[Hp - 112] = _s3Ncb::P64;
           P64[Hp - 104] = _s3Ncc::P64;
           P64[Hp - 96] = _s3Ncd::P64;
           P64[Hp - 88] = _s3Nce::P64;
           P64[Hp - 80] = _s3Ncf::P64;
           P64[Hp - 72] = _s3Ncg::P64;
           P64[Hp - 64] = _s3Nch::P64;
           P64[Hp - 56] = _s3Nci::P64;
           P64[Hp - 48] = _s3Ncm::P64;
           P64[Hp - 40] = _s3Ncn::P64;
           P64[Hp - 32] = _s3Nco::P64;
           P64[Hp - 24] = _s3Ncp::P64;
           P64[Hp - 16] = _s3Nct::P64;
           P64[Hp - 8] = _s3Ncu::P64;
           P64[Hp] = R2;
           R2 = Hp - 119;
           R1 = _s3Nc8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ncy_info" {
     sat_s3Ncy_info:
         const sat_s3Ncy_entry;
         const 15;
         const 8;
         const 4294967301;
 },
 sat_s3Ncz_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TBj: // global
           _s3Ncv::P64 = R2;
           _s3Ncz::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3TBk; else goto c3TBl;
       c3TBl: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3TBn; else goto c3TBm;
       c3TBn: // global
           HpAlloc = 128;
           goto c3TBk;
       c3TBk: // global
           R2 = _s3Ncv::P64;
           R1 = _s3Ncz::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TBm: // global
           _s3Nc2::P64 = P64[_s3Ncz::P64 + 7];
           _s3Nc6::P64 = P64[_s3Ncz::P64 + 15];
           _s3Nc8::P64 = P64[_s3Ncz::P64 + 23];
           _s3Ncb::P64 = P64[_s3Ncz::P64 + 31];
           _s3Ncc::P64 = P64[_s3Ncz::P64 + 39];
           _s3Ncd::P64 = P64[_s3Ncz::P64 + 47];
           _s3Nce::P64 = P64[_s3Ncz::P64 + 55];
           _s3Ncf::P64 = P64[_s3Ncz::P64 + 63];
           _s3Ncg::P64 = P64[_s3Ncz::P64 + 71];
           _s3Nch::P64 = P64[_s3Ncz::P64 + 79];
           _s3Nci::P64 = P64[_s3Ncz::P64 + 87];
           _s3Ncm::P64 = P64[_s3Ncz::P64 + 95];
           _s3Ncn::P64 = P64[_s3Ncz::P64 + 103];
           _s3Nco::P64 = P64[_s3Ncz::P64 + 111];
           _s3Ncp::P64 = P64[_s3Ncz::P64 + 119];
           _s3Nct::P64 = P64[_s3Ncz::P64 + 127];
           _s3Ncu::P64 = P64[_s3Ncz::P64 + 135];
           I64[Hp - 120] = sat_s3Ncy_info;
           P64[Hp - 112] = _s3Nc8::P64;
           P64[Hp - 104] = _s3Ncb::P64;
           P64[Hp - 96] = _s3Ncc::P64;
           P64[Hp - 88] = _s3Ncd::P64;
           P64[Hp - 80] = _s3Nce::P64;
           P64[Hp - 72] = _s3Ncf::P64;
           P64[Hp - 64] = _s3Ncg::P64;
           P64[Hp - 56] = _s3Nch::P64;
           P64[Hp - 48] = _s3Nci::P64;
           P64[Hp - 40] = _s3Ncm::P64;
           P64[Hp - 32] = _s3Ncn::P64;
           P64[Hp - 24] = _s3Nco::P64;
           P64[Hp - 16] = _s3Ncp::P64;
           P64[Hp - 8] = _s3Nct::P64;
           P64[Hp] = _s3Ncu::P64;
           R2 = _s3Nc2::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3Nc6::P64;
           P64[Sp - 8] = Hp - 119;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ncz_info" {
     sat_s3Ncz_info:
         const sat_s3Ncz_entry;
         const 17;
         const 8;
         const 4294967301;
 },
 sat_s3NcC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TBo: // global
           if ((Sp + -128) < SpLim) (likely: False) goto c3TBs; else goto c3TBt;
       c3TBs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TBt: // global
           I64[Sp - 128] = block_c3TAY_info;
           _s3Nc2::P64 = P64[R1 + 7];
           _s3Nc6::P64 = P64[R1 + 15];
           _s3Nc8::P64 = P64[R1 + 23];
           _s3Ncb::P64 = P64[R1 + 31];
           _s3Ncc::P64 = P64[R1 + 39];
           _s3Ncd::P64 = P64[R1 + 47];
           _s3Nce::P64 = P64[R1 + 55];
           _s3Ncf::P64 = P64[R1 + 63];
           _s3Ncg::P64 = P64[R1 + 71];
           _s3Nch::P64 = P64[R1 + 79];
           _s3Nci::P64 = P64[R1 + 87];
           _s3Ncm::P64 = P64[R1 + 95];
           _s3Ncn::P64 = P64[R1 + 103];
           _s3Nco::P64 = P64[R1 + 111];
           _s3Ncp::P64 = P64[R1 + 119];
           R1 = R2;
           P64[Sp - 120] = _s3Nc2::P64;
           P64[Sp - 112] = _s3Nc6::P64;
           P64[Sp - 104] = _s3Nc8::P64;
           P64[Sp - 96] = _s3Ncb::P64;
           P64[Sp - 88] = _s3Ncc::P64;
           P64[Sp - 80] = _s3Ncd::P64;
           P64[Sp - 72] = _s3Nce::P64;
           P64[Sp - 64] = _s3Ncf::P64;
           P64[Sp - 56] = _s3Ncg::P64;
           P64[Sp - 48] = _s3Nch::P64;
           P64[Sp - 40] = _s3Nci::P64;
           P64[Sp - 32] = _s3Ncm::P64;
           P64[Sp - 24] = _s3Ncn::P64;
           P64[Sp - 16] = _s3Nco::P64;
           P64[Sp - 8] = _s3Ncp::P64;
           Sp = Sp - 128;
           if (R1 & 7 != 0) goto u3TBA; else goto c3TAZ;
       u3TBA: // global
           call _c3TAY(R1) args: 0, res: 0, upd: 0;
       c3TAZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NcC_info" {
     sat_s3NcC_info:
         const sat_s3NcC_entry;
         const 15;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TAY() //  [R1]
         { []
         }
     {offset
       c3TAY: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3TBw; else goto c3TBv;
       c3TBw: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TBv: // global
           _s3Nct::P64 = P64[R1 + 7];
           _s3Ncu::P64 = P64[R1 + 15];
           I64[Hp - 136] = sat_s3Ncz_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = _s3Nct::P64;
           P64[Hp] = _s3Ncu::P64;
           I64[Sp + 120] = block_c3TBp_info;
           R3 = Hp - 135;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 120;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TAY_info" {
     block_c3TAY_info:
         const _c3TAY;
         const 15;
         const 1103806595102;
         const S3NLQ_srt+120;
 },
 _c3TBp() //  [R1]
         { []
         }
     {offset
       c3TBp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TBz; else goto c3TBy;
       c3TBz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TBy: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TBp_info" {
     block_c3TBp_info:
         const _c3TBp;
         const 0;
         const 30;
 },
 sat_s3NcD_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TBB: // global
           _s3Ncq::P64 = R2;
           _s3NcD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TBC; else goto c3TBD;
       c3TBD: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3TBF; else goto c3TBE;
       c3TBF: // global
           HpAlloc = 128;
           goto c3TBC;
       c3TBC: // global
           R2 = _s3Ncq::P64;
           R1 = _s3NcD::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TBE: // global
           _s3Nc0::P64 = P64[_s3NcD::P64 + 7];
           _s3Nc1::P64 = P64[_s3NcD::P64 + 15];
           _s3Nc2::P64 = P64[_s3NcD::P64 + 23];
           _s3Nc6::P64 = P64[_s3NcD::P64 + 31];
           _s3Nc8::P64 = P64[_s3NcD::P64 + 39];
           _s3Ncb::P64 = P64[_s3NcD::P64 + 47];
           _s3Ncc::P64 = P64[_s3NcD::P64 + 55];
           _s3Ncd::P64 = P64[_s3NcD::P64 + 63];
           _s3Nce::P64 = P64[_s3NcD::P64 + 71];
           _s3Ncf::P64 = P64[_s3NcD::P64 + 79];
           _s3Ncg::P64 = P64[_s3NcD::P64 + 87];
           _s3Nch::P64 = P64[_s3NcD::P64 + 95];
           _s3Nci::P64 = P64[_s3NcD::P64 + 103];
           _s3Ncm::P64 = P64[_s3NcD::P64 + 111];
           _s3Ncn::P64 = P64[_s3NcD::P64 + 119];
           _s3Nco::P64 = P64[_s3NcD::P64 + 127];
           _s3Ncp::P64 = P64[_s3NcD::P64 + 135];
           I64[Hp - 120] = sat_s3NcC_info;
           P64[Hp - 112] = _s3Nc2::P64;
           P64[Hp - 104] = _s3Nc6::P64;
           P64[Hp - 96] = _s3Nc8::P64;
           P64[Hp - 88] = _s3Ncb::P64;
           P64[Hp - 80] = _s3Ncc::P64;
           P64[Hp - 72] = _s3Ncd::P64;
           P64[Hp - 64] = _s3Nce::P64;
           P64[Hp - 56] = _s3Ncf::P64;
           P64[Hp - 48] = _s3Ncg::P64;
           P64[Hp - 40] = _s3Nch::P64;
           P64[Hp - 32] = _s3Nci::P64;
           P64[Hp - 24] = _s3Ncm::P64;
           P64[Hp - 16] = _s3Ncn::P64;
           P64[Hp - 8] = _s3Nco::P64;
           P64[Hp] = _s3Ncp::P64;
           R4 = _s3Nc6::P64;
           R3 = _s3Nc1::P64;
           R2 = _s3Nc0::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 119;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NcD_info" {
     sat_s3NcD_info:
         const sat_s3NcD_entry;
         const 17;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 sat_s3NcG_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TBG: // global
           if ((Sp + -112) < SpLim) (likely: False) goto c3TBK; else goto c3TBL;
       c3TBK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TBL: // global
           I64[Sp - 112] = block_c3TAJ_info;
           _s3Nc0::P64 = P64[R1 + 7];
           _s3Nc1::P64 = P64[R1 + 15];
           _s3Nc2::P64 = P64[R1 + 23];
           _s3Nc6::P64 = P64[R1 + 31];
           _s3Nc8::P64 = P64[R1 + 39];
           _s3Ncb::P64 = P64[R1 + 47];
           _s3Ncc::P64 = P64[R1 + 55];
           _s3Ncd::P64 = P64[R1 + 63];
           _s3Nce::P64 = P64[R1 + 71];
           _s3Ncf::P64 = P64[R1 + 79];
           _s3Ncg::P64 = P64[R1 + 87];
           _s3Nch::P64 = P64[R1 + 95];
           _s3Nci::P64 = P64[R1 + 103];
           R1 = R2;
           P64[Sp - 104] = _s3Nc0::P64;
           P64[Sp - 96] = _s3Nc1::P64;
           P64[Sp - 88] = _s3Nc2::P64;
           P64[Sp - 80] = _s3Nc6::P64;
           P64[Sp - 72] = _s3Nc8::P64;
           P64[Sp - 64] = _s3Ncb::P64;
           P64[Sp - 56] = _s3Ncc::P64;
           P64[Sp - 48] = _s3Ncd::P64;
           P64[Sp - 40] = _s3Nce::P64;
           P64[Sp - 32] = _s3Ncf::P64;
           P64[Sp - 24] = _s3Ncg::P64;
           P64[Sp - 16] = _s3Nch::P64;
           P64[Sp - 8] = _s3Nci::P64;
           Sp = Sp - 112;
           if (R1 & 7 != 0) goto u3TBS; else goto c3TAK;
       u3TBS: // global
           call _c3TAJ(R1) args: 0, res: 0, upd: 0;
       c3TAK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NcG_info" {
     sat_s3NcG_info:
         const sat_s3NcG_entry;
         const 13;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TAJ() //  [R1]
         { []
         }
     {offset
       c3TAJ: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3TBO; else goto c3TBN;
       c3TBO: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TBN: // global
           _s3Ncm::P64 = P64[R1 + 7];
           _s3Ncn::P64 = P64[R1 + 15];
           _s3Nco::P64 = P64[R1 + 23];
           _s3Ncp::P64 = P64[R1 + 31];
           I64[Hp - 136] = sat_s3NcD_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = _s3Ncm::P64;
           P64[Hp - 16] = _s3Ncn::P64;
           P64[Hp - 8] = _s3Nco::P64;
           P64[Hp] = _s3Ncp::P64;
           I64[Sp + 104] = block_c3TBH_info;
           R3 = Hp - 135;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 104;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TAJ_info" {
     block_c3TAJ_info:
         const _c3TAJ;
         const 13;
         const 3302829850654;
         const S3NLQ_srt+120;
 },
 _c3TBH() //  [R1]
         { []
         }
     {offset
       c3TBH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TBR; else goto c3TBQ;
       c3TBR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TBQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TBH_info" {
     block_c3TBH_info:
         const _c3TBH;
         const 0;
         const 30;
 },
 sat_s3NcH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TBT: // global
           _s3Ncj::P64 = R2;
           _s3NcH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TBU; else goto c3TBV;
       c3TBV: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3TBX; else goto c3TBW;
       c3TBX: // global
           HpAlloc = 112;
           goto c3TBU;
       c3TBU: // global
           R2 = _s3Ncj::P64;
           R1 = _s3NcH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TBW: // global
           _s3NbW::P64 = P64[_s3NcH::P64 + 7];
           _s3NbX::P64 = P64[_s3NcH::P64 + 15];
           _s3NbY::P64 = P64[_s3NcH::P64 + 23];
           _s3NbZ::P64 = P64[_s3NcH::P64 + 31];
           _s3Nc0::P64 = P64[_s3NcH::P64 + 39];
           _s3Nc1::P64 = P64[_s3NcH::P64 + 47];
           _s3Nc2::P64 = P64[_s3NcH::P64 + 55];
           _s3Nc6::P64 = P64[_s3NcH::P64 + 63];
           _s3Nc8::P64 = P64[_s3NcH::P64 + 71];
           _s3Ncb::P64 = P64[_s3NcH::P64 + 79];
           _s3Ncc::P64 = P64[_s3NcH::P64 + 87];
           _s3Ncd::P64 = P64[_s3NcH::P64 + 95];
           _s3Nce::P64 = P64[_s3NcH::P64 + 103];
           _s3Ncf::P64 = P64[_s3NcH::P64 + 111];
           _s3Ncg::P64 = P64[_s3NcH::P64 + 119];
           _s3Nch::P64 = P64[_s3NcH::P64 + 127];
           _s3Nci::P64 = P64[_s3NcH::P64 + 135];
           I64[Hp - 104] = sat_s3NcG_info;
           P64[Hp - 96] = _s3Nc0::P64;
           P64[Hp - 88] = _s3Nc1::P64;
           P64[Hp - 80] = _s3Nc2::P64;
           P64[Hp - 72] = _s3Nc6::P64;
           P64[Hp - 64] = _s3Nc8::P64;
           P64[Hp - 56] = _s3Ncb::P64;
           P64[Hp - 48] = _s3Ncc::P64;
           P64[Hp - 40] = _s3Ncd::P64;
           P64[Hp - 32] = _s3Nce::P64;
           P64[Hp - 24] = _s3Ncf::P64;
           P64[Hp - 16] = _s3Ncg::P64;
           P64[Hp - 8] = _s3Nch::P64;
           P64[Hp] = _s3Nci::P64;
           R6 = _s3Nc6::P64;
           R5 = _s3NbZ::P64;
           R4 = _s3NbY::P64;
           R3 = _s3NbX::P64;
           R2 = _s3NbW::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 103;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NcH_info" {
     sat_s3NcH_info:
         const sat_s3NcH_entry;
         const 17;
         const 7700876361736;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 sat_s3NcK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TBY: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3TC2; else goto c3TC3;
       c3TC2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TC3: // global
           I64[Sp - 80] = block_c3TAu_info;
           _s3NbW::P64 = P64[R1 + 7];
           _s3NbX::P64 = P64[R1 + 15];
           _s3NbY::P64 = P64[R1 + 23];
           _s3NbZ::P64 = P64[R1 + 31];
           _s3Nc0::P64 = P64[R1 + 39];
           _s3Nc1::P64 = P64[R1 + 47];
           _s3Nc2::P64 = P64[R1 + 55];
           _s3Nc6::P64 = P64[R1 + 63];
           _s3Nc8::P64 = P64[R1 + 71];
           R1 = R2;
           P64[Sp - 72] = _s3NbW::P64;
           P64[Sp - 64] = _s3NbX::P64;
           P64[Sp - 56] = _s3NbY::P64;
           P64[Sp - 48] = _s3NbZ::P64;
           P64[Sp - 40] = _s3Nc0::P64;
           P64[Sp - 32] = _s3Nc1::P64;
           P64[Sp - 24] = _s3Nc2::P64;
           P64[Sp - 16] = _s3Nc6::P64;
           P64[Sp - 8] = _s3Nc8::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto u3TCa; else goto c3TAv;
       u3TCa: // global
           call _c3TAu(R1) args: 0, res: 0, upd: 0;
       c3TAv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NcK_info" {
     sat_s3NcK_info:
         const sat_s3NcK_entry;
         const 9;
         const 7700876361736;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TAu() //  [R1]
         { []
         }
     {offset
       c3TAu: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3TC6; else goto c3TC5;
       c3TC6: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TC5: // global
           _s3Ncb::P64 = P64[R1 + 7];
           _s3Ncc::P64 = P64[R1 + 15];
           _s3Ncd::P64 = P64[R1 + 23];
           _s3Nce::P64 = P64[R1 + 31];
           _s3Ncf::P64 = P64[R1 + 39];
           _s3Ncg::P64 = P64[R1 + 47];
           _s3Nch::P64 = P64[R1 + 55];
           _s3Nci::P64 = P64[R1 + 63];
           I64[Hp - 136] = sat_s3NcH_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = _s3Ncb::P64;
           P64[Hp - 48] = _s3Ncc::P64;
           P64[Hp - 40] = _s3Ncd::P64;
           P64[Hp - 32] = _s3Nce::P64;
           P64[Hp - 24] = _s3Ncf::P64;
           P64[Hp - 16] = _s3Ncg::P64;
           P64[Hp - 8] = _s3Nch::P64;
           P64[Hp] = _s3Nci::P64;
           I64[Sp + 72] = block_c3TBZ_info;
           R3 = Hp - 135;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 72;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TAu_info" {
     block_c3TAu_info:
         const _c3TAu;
         const 9;
         const 7700876361758;
         const S3NLQ_srt+120;
 },
 _c3TBZ() //  [R1]
         { []
         }
     {offset
       c3TBZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TC9; else goto c3TC8;
       c3TC9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TC8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TBZ_info" {
     block_c3TBZ_info:
         const _c3TBZ;
         const 0;
         const 30;
 },
 sat_s3NcL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TCb: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3TCf; else goto c3TCe;
       c3TCf: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TCe: // global
           _s3NbW::P64 = P64[R1 + 7];
           _s3NbX::P64 = P64[R1 + 15];
           _s3NbY::P64 = P64[R1 + 23];
           _s3NbZ::P64 = P64[R1 + 31];
           _s3Nc0::P64 = P64[R1 + 39];
           _s3Nc1::P64 = P64[R1 + 47];
           _s3Nc2::P64 = P64[R1 + 55];
           _s3Nc6::P64 = P64[R1 + 63];
           _s3Nc7::P64 = P64[R1 + 71];
           I64[Hp - 72] = sat_s3NcK_info;
           P64[Hp - 64] = _s3NbW::P64;
           P64[Hp - 56] = _s3NbX::P64;
           P64[Hp - 48] = _s3NbY::P64;
           P64[Hp - 40] = _s3NbZ::P64;
           P64[Hp - 32] = _s3Nc0::P64;
           P64[Hp - 24] = _s3Nc1::P64;
           P64[Hp - 16] = _s3Nc2::P64;
           P64[Hp - 8] = _s3Nc6::P64;
           P64[Hp] = R2;
           R2 = Hp - 71;
           R1 = _s3Nc7::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NcL_info" {
     sat_s3NcL_info:
         const sat_s3NcL_entry;
         const 9;
         const 7700876361736;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3Nc5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TCg: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c3TCk; else goto c3TCj;
       c3TCk: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TCj: // global
           _s3NbO::P64 = P64[R1 + 7];
           _s3NbP::P64 = P64[R1 + 15];
           _s3NbQ::P64 = P64[R1 + 23];
           _s3NbR::P64 = P64[R1 + 31];
           _s3NbS::P64 = P64[R1 + 39];
           _s3NbT::P64 = P64[R1 + 47];
           _s3NbU::P64 = P64[R1 + 55];
           _s3NbV::P64 = P64[R1 + 63];
           _s3NbW::P64 = P64[R1 + 71];
           _s3NbX::P64 = P64[R1 + 79];
           _s3NbY::P64 = P64[R1 + 87];
           _s3NbZ::P64 = P64[R1 + 95];
           _s3Nc0::P64 = P64[R1 + 103];
           _s3Nc1::P64 = P64[R1 + 111];
           _s3Nc2::P64 = P64[R1 + 119];
           I64[Hp - 160] = ds1_s3Nc7_info;
           P64[Hp - 144] = _s3NbO::P64;
           P64[Hp - 136] = _s3NbP::P64;
           P64[Hp - 128] = _s3NbQ::P64;
           P64[Hp - 120] = _s3NbR::P64;
           P64[Hp - 112] = _s3NbS::P64;
           P64[Hp - 104] = _s3NbT::P64;
           P64[Hp - 96] = _s3NbU::P64;
           P64[Hp - 88] = _s3NbV::P64;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s3NcL_info;
           P64[Hp - 64] = _s3NbW::P64;
           P64[Hp - 56] = _s3NbX::P64;
           P64[Hp - 48] = _s3NbY::P64;
           P64[Hp - 40] = _s3NbZ::P64;
           P64[Hp - 32] = _s3Nc0::P64;
           P64[Hp - 24] = _s3Nc1::P64;
           P64[Hp - 16] = _s3Nc2::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 160;
           R1 = Hp - 71;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Nc5_info" {
     p_s3Nc5_info:
         const p_s3Nc5_entry;
         const 15;
         const 16496969383944;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3NcM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TCt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TCu; else goto c3TCv;
       c3TCu: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TCv: // global
           I64[Sp - 8] = block_c3TCq_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3NcM_info" {
     lvl2_s3NcM_info:
         const lvl2_s3NcM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TCq() //  [R1]
         { []
         }
     {offset
       c3TCq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TCy; else goto c3TCx;
       c3TCy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TCx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TCq_info" {
     block_c3TCq_info:
         const _c3TCq;
         const 0;
         const 30;
 },
 sat_s3NcV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TCH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TCI; else goto c3TCJ;
       c3TCI: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TCJ: // global
           I64[Sp - 8] = block_c3TCE_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NcV_info" {
     sat_s3NcV_info:
         const sat_s3NcV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TCE() //  [R1]
         { []
         }
     {offset
       c3TCE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TCM; else goto c3TCL;
       c3TCM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TCL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TCE_info" {
     block_c3TCE_info:
         const _c3TCE;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3TCN: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto c3TCR; else goto c3TCQ;
       c3TCR: // global
           HpAlloc = 160;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 144, res: 0, upd: 8;
       c3TCQ: // global
           I64[Hp - 152] = p_s3Nc5_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           P64[Hp - 104] = P64[Sp];
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           I64[Hp - 24] = lvl2_s3NcM_info;
           P64[Hp - 16] = Hp - 151;
           I64[Hp - 8] = sat_s3NcV_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 88];
           R3 = P64[Sp + 80];
           R2 = Hp - 6;
           Sp = Sp + 96;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry;
         const 0;
         const 69273527517198;
         const 73014444032;
         const S3NLQ_srt+120;
         const 17;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.472715103 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3TFa: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 96, res: 0, upd: 8;
     }
 },
 ds1_s3Nde_entry() //  [R1]
         { []
         }
     {offset
       c3TFn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TFo; else goto c3TFp;
       c3TFo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TFp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Nde_info" {
     ds1_s3Nde_info:
         const ds1_s3Nde_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+208;
 },
 sat_s3NdD_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TG7: // global
           if ((Sp + -112) < SpLim) (likely: False) goto c3TGb; else goto c3TGc;
       c3TGb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TGc: // global
           I64[Sp - 112] = block_c3TG4_info;
           _s3Ndf::P64 = P64[R1 + 7];
           _s3Ndi::P64 = P64[R1 + 15];
           _s3Ndj::P64 = P64[R1 + 23];
           _s3Ndk::P64 = P64[R1 + 31];
           _s3Ndl::P64 = P64[R1 + 39];
           _s3Ndm::P64 = P64[R1 + 47];
           _s3Ndn::P64 = P64[R1 + 55];
           _s3Ndo::P64 = P64[R1 + 63];
           _s3Ndp::P64 = P64[R1 + 71];
           _s3Ndt::P64 = P64[R1 + 79];
           _s3Ndu::P64 = P64[R1 + 87];
           _s3Ndv::P64 = P64[R1 + 95];
           _s3Ndw::P64 = P64[R1 + 103];
           R1 = R2;
           P64[Sp - 104] = _s3Ndf::P64;
           P64[Sp - 96] = _s3Ndi::P64;
           P64[Sp - 88] = _s3Ndj::P64;
           P64[Sp - 80] = _s3Ndk::P64;
           P64[Sp - 72] = _s3Ndl::P64;
           P64[Sp - 64] = _s3Ndm::P64;
           P64[Sp - 56] = _s3Ndn::P64;
           P64[Sp - 48] = _s3Ndo::P64;
           P64[Sp - 40] = _s3Ndp::P64;
           P64[Sp - 32] = _s3Ndt::P64;
           P64[Sp - 24] = _s3Ndu::P64;
           P64[Sp - 16] = _s3Ndv::P64;
           P64[Sp - 8] = _s3Ndw::P64;
           Sp = Sp - 112;
           if (R1 & 7 != 0) goto u3TGg; else goto c3TG5;
       u3TGg: // global
           call _c3TG4(R1) args: 0, res: 0, upd: 0;
       c3TG5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NdD_info" {
     sat_s3NdD_info:
         const sat_s3NdD_entry;
         const 13;
         const 8;
         const 4294967301;
 },
 _c3TG4() //  [R1]
         { []
         }
     {offset
       c3TG4: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3TGf; else goto c3TGe;
       c3TGf: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TGe: // global
           _s3NdA::P64 = P64[R1 + 7];
           _s3NdB::P64 = P64[R1 + 15];
           I64[Hp - 112] = (,,,,,,,,,,,,,)_con_info;
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = P64[Sp + 104];
           P64[Hp - 8] = _s3NdA::P64;
           P64[Hp] = _s3NdB::P64;
           R2 = Hp - 111;
           R1 = P64[Sp + 8];
           Sp = Sp + 112;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TG4_info" {
     block_c3TG4_info:
         const _c3TG4;
         const 13;
         const 30;
 },
 sat_s3NdE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TGh: // global
           _s3Ndx::P64 = R2;
           _s3NdE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TGi; else goto c3TGj;
       c3TGj: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3TGl; else goto c3TGk;
       c3TGl: // global
           HpAlloc = 112;
           goto c3TGi;
       c3TGi: // global
           R2 = _s3Ndx::P64;
           R1 = _s3NdE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TGk: // global
           _s3Nd8::P64 = P64[_s3NdE::P64 + 7];
           _s3Nd9::P64 = P64[_s3NdE::P64 + 15];
           _s3Ndd::P64 = P64[_s3NdE::P64 + 23];
           _s3Ndf::P64 = P64[_s3NdE::P64 + 31];
           _s3Ndi::P64 = P64[_s3NdE::P64 + 39];
           _s3Ndj::P64 = P64[_s3NdE::P64 + 47];
           _s3Ndk::P64 = P64[_s3NdE::P64 + 55];
           _s3Ndl::P64 = P64[_s3NdE::P64 + 63];
           _s3Ndm::P64 = P64[_s3NdE::P64 + 71];
           _s3Ndn::P64 = P64[_s3NdE::P64 + 79];
           _s3Ndo::P64 = P64[_s3NdE::P64 + 87];
           _s3Ndp::P64 = P64[_s3NdE::P64 + 95];
           _s3Ndt::P64 = P64[_s3NdE::P64 + 103];
           _s3Ndu::P64 = P64[_s3NdE::P64 + 111];
           _s3Ndv::P64 = P64[_s3NdE::P64 + 119];
           _s3Ndw::P64 = P64[_s3NdE::P64 + 127];
           I64[Hp - 104] = sat_s3NdD_info;
           P64[Hp - 96] = _s3Ndf::P64;
           P64[Hp - 88] = _s3Ndi::P64;
           P64[Hp - 80] = _s3Ndj::P64;
           P64[Hp - 72] = _s3Ndk::P64;
           P64[Hp - 64] = _s3Ndl::P64;
           P64[Hp - 56] = _s3Ndm::P64;
           P64[Hp - 48] = _s3Ndn::P64;
           P64[Hp - 40] = _s3Ndo::P64;
           P64[Hp - 32] = _s3Ndp::P64;
           P64[Hp - 24] = _s3Ndt::P64;
           P64[Hp - 16] = _s3Ndu::P64;
           P64[Hp - 8] = _s3Ndv::P64;
           P64[Hp] = _s3Ndw::P64;
           R4 = _s3Ndd::P64;
           R3 = _s3Nd9::P64;
           R2 = _s3Nd8::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 103;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NdE_info" {
     sat_s3NdE_info:
         const sat_s3NdE_entry;
         const 16;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+192;
 },
 sat_s3NdH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TGm: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c3TGq; else goto c3TGr;
       c3TGq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TGr: // global
           I64[Sp - 104] = block_c3TFP_info;
           _s3Nd8::P64 = P64[R1 + 7];
           _s3Nd9::P64 = P64[R1 + 15];
           _s3Ndd::P64 = P64[R1 + 23];
           _s3Ndf::P64 = P64[R1 + 31];
           _s3Ndi::P64 = P64[R1 + 39];
           _s3Ndj::P64 = P64[R1 + 47];
           _s3Ndk::P64 = P64[R1 + 55];
           _s3Ndl::P64 = P64[R1 + 63];
           _s3Ndm::P64 = P64[R1 + 71];
           _s3Ndn::P64 = P64[R1 + 79];
           _s3Ndo::P64 = P64[R1 + 87];
           _s3Ndp::P64 = P64[R1 + 95];
           R1 = R2;
           P64[Sp - 96] = _s3Nd8::P64;
           P64[Sp - 88] = _s3Nd9::P64;
           P64[Sp - 80] = _s3Ndd::P64;
           P64[Sp - 72] = _s3Ndf::P64;
           P64[Sp - 64] = _s3Ndi::P64;
           P64[Sp - 56] = _s3Ndj::P64;
           P64[Sp - 48] = _s3Ndk::P64;
           P64[Sp - 40] = _s3Ndl::P64;
           P64[Sp - 32] = _s3Ndm::P64;
           P64[Sp - 24] = _s3Ndn::P64;
           P64[Sp - 16] = _s3Ndo::P64;
           P64[Sp - 8] = _s3Ndp::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto u3TGy; else goto c3TFQ;
       u3TGy: // global
           call _c3TFP(R1) args: 0, res: 0, upd: 0;
       c3TFQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NdH_info" {
     sat_s3NdH_info:
         const sat_s3NdH_entry;
         const 12;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TFP() //  [R1]
         { []
         }
     {offset
       c3TFP: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3TGu; else goto c3TGt;
       c3TGu: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TGt: // global
           _s3Ndt::P64 = P64[R1 + 7];
           _s3Ndu::P64 = P64[R1 + 15];
           _s3Ndv::P64 = P64[R1 + 23];
           _s3Ndw::P64 = P64[R1 + 31];
           I64[Hp - 128] = sat_s3NdE_info;
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 40];
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = P64[Sp + 56];
           P64[Hp - 64] = P64[Sp + 64];
           P64[Hp - 56] = P64[Sp + 72];
           P64[Hp - 48] = P64[Sp + 80];
           P64[Hp - 40] = P64[Sp + 88];
           P64[Hp - 32] = P64[Sp + 96];
           P64[Hp - 24] = _s3Ndt::P64;
           P64[Hp - 16] = _s3Ndu::P64;
           P64[Hp - 8] = _s3Ndv::P64;
           P64[Hp] = _s3Ndw::P64;
           I64[Sp + 96] = block_c3TGn_info;
           R3 = Hp - 127;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 96;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TFP_info" {
     block_c3TFP_info:
         const _c3TFP;
         const 12;
         const 3302829850654;
         const S3NLQ_srt+120;
 },
 _c3TGn() //  [R1]
         { []
         }
     {offset
       c3TGn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TGx; else goto c3TGw;
       c3TGx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TGw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TGn_info" {
     block_c3TGn_info:
         const _c3TGn;
         const 0;
         const 30;
 },
 sat_s3NdI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TGz: // global
           _s3Ndq::P64 = R2;
           _s3NdI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TGA; else goto c3TGB;
       c3TGB: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3TGD; else goto c3TGC;
       c3TGD: // global
           HpAlloc = 104;
           goto c3TGA;
       c3TGA: // global
           R2 = _s3Ndq::P64;
           R1 = _s3NdI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TGC: // global
           _s3Nd4::P64 = P64[_s3NdI::P64 + 7];
           _s3Nd5::P64 = P64[_s3NdI::P64 + 15];
           _s3Nd6::P64 = P64[_s3NdI::P64 + 23];
           _s3Nd7::P64 = P64[_s3NdI::P64 + 31];
           _s3Nd8::P64 = P64[_s3NdI::P64 + 39];
           _s3Nd9::P64 = P64[_s3NdI::P64 + 47];
           _s3Ndd::P64 = P64[_s3NdI::P64 + 55];
           _s3Ndf::P64 = P64[_s3NdI::P64 + 63];
           _s3Ndi::P64 = P64[_s3NdI::P64 + 71];
           _s3Ndj::P64 = P64[_s3NdI::P64 + 79];
           _s3Ndk::P64 = P64[_s3NdI::P64 + 87];
           _s3Ndl::P64 = P64[_s3NdI::P64 + 95];
           _s3Ndm::P64 = P64[_s3NdI::P64 + 103];
           _s3Ndn::P64 = P64[_s3NdI::P64 + 111];
           _s3Ndo::P64 = P64[_s3NdI::P64 + 119];
           _s3Ndp::P64 = P64[_s3NdI::P64 + 127];
           I64[Hp - 96] = sat_s3NdH_info;
           P64[Hp - 88] = _s3Nd8::P64;
           P64[Hp - 80] = _s3Nd9::P64;
           P64[Hp - 72] = _s3Ndd::P64;
           P64[Hp - 64] = _s3Ndf::P64;
           P64[Hp - 56] = _s3Ndi::P64;
           P64[Hp - 48] = _s3Ndj::P64;
           P64[Hp - 40] = _s3Ndk::P64;
           P64[Hp - 32] = _s3Ndl::P64;
           P64[Hp - 24] = _s3Ndm::P64;
           P64[Hp - 16] = _s3Ndn::P64;
           P64[Hp - 8] = _s3Ndo::P64;
           P64[Hp] = _s3Ndp::P64;
           R6 = _s3Ndd::P64;
           R5 = _s3Nd7::P64;
           R4 = _s3Nd6::P64;
           R3 = _s3Nd5::P64;
           R2 = _s3Nd4::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 95;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NdI_info" {
     sat_s3NdI_info:
         const sat_s3NdI_entry;
         const 16;
         const 7700876361736;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 sat_s3NdL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TGE: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3TGI; else goto c3TGJ;
       c3TGI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TGJ: // global
           I64[Sp - 72] = block_c3TFA_info;
           _s3Nd4::P64 = P64[R1 + 7];
           _s3Nd5::P64 = P64[R1 + 15];
           _s3Nd6::P64 = P64[R1 + 23];
           _s3Nd7::P64 = P64[R1 + 31];
           _s3Nd8::P64 = P64[R1 + 39];
           _s3Nd9::P64 = P64[R1 + 47];
           _s3Ndd::P64 = P64[R1 + 55];
           _s3Ndf::P64 = P64[R1 + 63];
           R1 = R2;
           P64[Sp - 64] = _s3Nd4::P64;
           P64[Sp - 56] = _s3Nd5::P64;
           P64[Sp - 48] = _s3Nd6::P64;
           P64[Sp - 40] = _s3Nd7::P64;
           P64[Sp - 32] = _s3Nd8::P64;
           P64[Sp - 24] = _s3Nd9::P64;
           P64[Sp - 16] = _s3Ndd::P64;
           P64[Sp - 8] = _s3Ndf::P64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u3TGQ; else goto c3TFB;
       u3TGQ: // global
           call _c3TFA(R1) args: 0, res: 0, upd: 0;
       c3TFB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NdL_info" {
     sat_s3NdL_info:
         const sat_s3NdL_entry;
         const 8;
         const 7700876361736;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TFA() //  [R1]
         { []
         }
     {offset
       c3TFA: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3TGM; else goto c3TGL;
       c3TGM: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TGL: // global
           _s3Ndi::P64 = P64[R1 + 7];
           _s3Ndj::P64 = P64[R1 + 15];
           _s3Ndk::P64 = P64[R1 + 23];
           _s3Ndl::P64 = P64[R1 + 31];
           _s3Ndm::P64 = P64[R1 + 39];
           _s3Ndn::P64 = P64[R1 + 47];
           _s3Ndo::P64 = P64[R1 + 55];
           _s3Ndp::P64 = P64[R1 + 63];
           I64[Hp - 128] = sat_s3NdI_info;
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 40];
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = P64[Sp + 56];
           P64[Hp - 64] = P64[Sp + 64];
           P64[Hp - 56] = _s3Ndi::P64;
           P64[Hp - 48] = _s3Ndj::P64;
           P64[Hp - 40] = _s3Ndk::P64;
           P64[Hp - 32] = _s3Ndl::P64;
           P64[Hp - 24] = _s3Ndm::P64;
           P64[Hp - 16] = _s3Ndn::P64;
           P64[Hp - 8] = _s3Ndo::P64;
           P64[Hp] = _s3Ndp::P64;
           I64[Sp + 64] = block_c3TGF_info;
           R3 = Hp - 127;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 64;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TFA_info" {
     block_c3TFA_info:
         const _c3TFA;
         const 8;
         const 7700876361758;
         const S3NLQ_srt+120;
 },
 _c3TGF() //  [R1]
         { []
         }
     {offset
       c3TGF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TGP; else goto c3TGO;
       c3TGP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TGO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TGF_info" {
     block_c3TGF_info:
         const _c3TGF;
         const 0;
         const 30;
 },
 sat_s3NdM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TGR: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3TGV; else goto c3TGU;
       c3TGV: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TGU: // global
           _s3Nd4::P64 = P64[R1 + 7];
           _s3Nd5::P64 = P64[R1 + 15];
           _s3Nd6::P64 = P64[R1 + 23];
           _s3Nd7::P64 = P64[R1 + 31];
           _s3Nd8::P64 = P64[R1 + 39];
           _s3Nd9::P64 = P64[R1 + 47];
           _s3Ndd::P64 = P64[R1 + 55];
           _s3Nde::P64 = P64[R1 + 63];
           I64[Hp - 64] = sat_s3NdL_info;
           P64[Hp - 56] = _s3Nd4::P64;
           P64[Hp - 48] = _s3Nd5::P64;
           P64[Hp - 40] = _s3Nd6::P64;
           P64[Hp - 32] = _s3Nd7::P64;
           P64[Hp - 24] = _s3Nd8::P64;
           P64[Hp - 16] = _s3Nd9::P64;
           P64[Hp - 8] = _s3Ndd::P64;
           P64[Hp] = R2;
           R2 = Hp - 63;
           R1 = _s3Nde::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NdM_info" {
     sat_s3NdM_info:
         const sat_s3NdM_entry;
         const 8;
         const 7700876361736;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3Ndc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TGW: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto c3TH0; else goto c3TGZ;
       c3TH0: // global
           HpAlloc = 160;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TGZ: // global
           _s3NcW::P64 = P64[R1 + 7];
           _s3NcX::P64 = P64[R1 + 15];
           _s3NcY::P64 = P64[R1 + 23];
           _s3NcZ::P64 = P64[R1 + 31];
           _s3Nd0::P64 = P64[R1 + 39];
           _s3Nd1::P64 = P64[R1 + 47];
           _s3Nd2::P64 = P64[R1 + 55];
           _s3Nd3::P64 = P64[R1 + 63];
           _s3Nd4::P64 = P64[R1 + 71];
           _s3Nd5::P64 = P64[R1 + 79];
           _s3Nd6::P64 = P64[R1 + 87];
           _s3Nd7::P64 = P64[R1 + 95];
           _s3Nd8::P64 = P64[R1 + 103];
           _s3Nd9::P64 = P64[R1 + 111];
           I64[Hp - 152] = ds1_s3Nde_info;
           P64[Hp - 136] = _s3NcW::P64;
           P64[Hp - 128] = _s3NcX::P64;
           P64[Hp - 120] = _s3NcY::P64;
           P64[Hp - 112] = _s3NcZ::P64;
           P64[Hp - 104] = _s3Nd0::P64;
           P64[Hp - 96] = _s3Nd1::P64;
           P64[Hp - 88] = _s3Nd2::P64;
           P64[Hp - 80] = _s3Nd3::P64;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s3NdM_info;
           P64[Hp - 56] = _s3Nd4::P64;
           P64[Hp - 48] = _s3Nd5::P64;
           P64[Hp - 40] = _s3Nd6::P64;
           P64[Hp - 32] = _s3Nd7::P64;
           P64[Hp - 24] = _s3Nd8::P64;
           P64[Hp - 16] = _s3Nd9::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 152;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Ndc_info" {
     p_s3Ndc_info:
         const p_s3Ndc_entry;
         const 14;
         const 16496969383944;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3NdN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TH9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3THa; else goto c3THb;
       c3THa: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3THb: // global
           I64[Sp - 8] = block_c3TH6_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3NdN_info" {
     lvl2_s3NdN_info:
         const lvl2_s3NdN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TH6() //  [R1]
         { []
         }
     {offset
       c3TH6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3THe; else goto c3THd;
       c3THe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3THd: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TH6_info" {
     block_c3TH6_info:
         const _c3TH6;
         const 0;
         const 30;
 },
 sat_s3NdW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3THn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3THo; else goto c3THp;
       c3THo: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3THp: // global
           I64[Sp - 8] = block_c3THk_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NdW_info" {
     sat_s3NdW_info:
         const sat_s3NdW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3THk() //  [R1]
         { []
         }
     {offset
       c3THk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3THs; else goto c3THr;
       c3THs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3THr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3THk_info" {
     block_c3THk_info:
         const _c3THk;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3THt: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3THx; else goto c3THw;
       c3THx: // global
           HpAlloc = 152;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c3THw: // global
           I64[Hp - 144] = p_s3Ndc_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = P64[Sp];
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 40];
           P64[Hp - 48] = P64[Sp + 48];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 64];
           I64[Hp - 24] = lvl2_s3NdN_info;
           P64[Hp - 16] = Hp - 143;
           I64[Hp - 8] = sat_s3NdW_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 80];
           R3 = P64[Sp + 72];
           R2 = Hp - 6;
           Sp = Sp + 88;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry;
         const 0;
         const 104457899606030;
         const 68719476736;
         const S3NLQ_srt+120;
         const 16;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.525223742 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3TJy: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 88, res: 0, upd: 8;
     }
 },
 ds1_s3Nee_entry() //  [R1]
         { []
         }
     {offset
       c3TJL: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TJM; else goto c3TJN;
       c3TJM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TJN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Nee_info" {
     ds1_s3Nee_info:
         const ds1_s3Nee_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+208;
 },
 sat_s3NeA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TKt: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3TKx; else goto c3TKw;
       c3TKx: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TKw: // global
           _s3Nef::P64 = P64[R1 + 7];
           _s3Nei::P64 = P64[R1 + 15];
           _s3Nej::P64 = P64[R1 + 23];
           _s3Nek::P64 = P64[R1 + 31];
           _s3Nel::P64 = P64[R1 + 39];
           _s3Nem::P64 = P64[R1 + 47];
           _s3Nen::P64 = P64[R1 + 55];
           _s3Neo::P64 = P64[R1 + 63];
           _s3Nep::P64 = P64[R1 + 71];
           _s3Net::P64 = P64[R1 + 79];
           _s3Neu::P64 = P64[R1 + 87];
           _s3Nev::P64 = P64[R1 + 95];
           _s3New::P64 = P64[R1 + 103];
           I64[Hp - 104] = (,,,,,,,,,,,,)_con_info;
           P64[Hp - 96] = _s3Nei::P64;
           P64[Hp - 88] = _s3Nej::P64;
           P64[Hp - 80] = _s3Nek::P64;
           P64[Hp - 72] = _s3Nel::P64;
           P64[Hp - 64] = _s3Nem::P64;
           P64[Hp - 56] = _s3Nen::P64;
           P64[Hp - 48] = _s3Neo::P64;
           P64[Hp - 40] = _s3Nep::P64;
           P64[Hp - 32] = _s3Net::P64;
           P64[Hp - 24] = _s3Neu::P64;
           P64[Hp - 16] = _s3Nev::P64;
           P64[Hp - 8] = _s3New::P64;
           P64[Hp] = R2;
           R2 = Hp - 103;
           R1 = _s3Nef::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NeA_info" {
     sat_s3NeA_info:
         const sat_s3NeA_entry;
         const 13;
         const 8;
         const 4294967301;
 },
 sat_s3NeB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TKy: // global
           _s3Nex::P64 = R2;
           _s3NeB::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3TKz; else goto c3TKA;
       c3TKA: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3TKC; else goto c3TKB;
       c3TKC: // global
           HpAlloc = 112;
           goto c3TKz;
       c3TKz: // global
           R2 = _s3Nex::P64;
           R1 = _s3NeB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TKB: // global
           _s3Ne9::P64 = P64[_s3NeB::P64 + 7];
           _s3Ned::P64 = P64[_s3NeB::P64 + 15];
           _s3Nef::P64 = P64[_s3NeB::P64 + 23];
           _s3Nei::P64 = P64[_s3NeB::P64 + 31];
           _s3Nej::P64 = P64[_s3NeB::P64 + 39];
           _s3Nek::P64 = P64[_s3NeB::P64 + 47];
           _s3Nel::P64 = P64[_s3NeB::P64 + 55];
           _s3Nem::P64 = P64[_s3NeB::P64 + 63];
           _s3Nen::P64 = P64[_s3NeB::P64 + 71];
           _s3Neo::P64 = P64[_s3NeB::P64 + 79];
           _s3Nep::P64 = P64[_s3NeB::P64 + 87];
           _s3Net::P64 = P64[_s3NeB::P64 + 95];
           _s3Neu::P64 = P64[_s3NeB::P64 + 103];
           _s3Nev::P64 = P64[_s3NeB::P64 + 111];
           _s3New::P64 = P64[_s3NeB::P64 + 119];
           I64[Hp - 104] = sat_s3NeA_info;
           P64[Hp - 96] = _s3Nef::P64;
           P64[Hp - 88] = _s3Nei::P64;
           P64[Hp - 80] = _s3Nej::P64;
           P64[Hp - 72] = _s3Nek::P64;
           P64[Hp - 64] = _s3Nel::P64;
           P64[Hp - 56] = _s3Nem::P64;
           P64[Hp - 48] = _s3Nen::P64;
           P64[Hp - 40] = _s3Neo::P64;
           P64[Hp - 32] = _s3Nep::P64;
           P64[Hp - 24] = _s3Net::P64;
           P64[Hp - 16] = _s3Neu::P64;
           P64[Hp - 8] = _s3Nev::P64;
           P64[Hp] = _s3New::P64;
           R2 = _s3Ne9::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3Ned::P64;
           P64[Sp - 8] = Hp - 103;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NeB_info" {
     sat_s3NeB_info:
         const sat_s3NeB_entry;
         const 15;
         const 8;
         const 4294967301;
 },
 sat_s3NeE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TKD: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3TKH; else goto c3TKI;
       c3TKH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TKI: // global
           I64[Sp - 96] = block_c3TKd_info;
           _s3Ne9::P64 = P64[R1 + 7];
           _s3Ned::P64 = P64[R1 + 15];
           _s3Nef::P64 = P64[R1 + 23];
           _s3Nei::P64 = P64[R1 + 31];
           _s3Nej::P64 = P64[R1 + 39];
           _s3Nek::P64 = P64[R1 + 47];
           _s3Nel::P64 = P64[R1 + 55];
           _s3Nem::P64 = P64[R1 + 63];
           _s3Nen::P64 = P64[R1 + 71];
           _s3Neo::P64 = P64[R1 + 79];
           _s3Nep::P64 = P64[R1 + 87];
           R1 = R2;
           P64[Sp - 88] = _s3Ne9::P64;
           P64[Sp - 80] = _s3Ned::P64;
           P64[Sp - 72] = _s3Nef::P64;
           P64[Sp - 64] = _s3Nei::P64;
           P64[Sp - 56] = _s3Nej::P64;
           P64[Sp - 48] = _s3Nek::P64;
           P64[Sp - 40] = _s3Nel::P64;
           P64[Sp - 32] = _s3Nem::P64;
           P64[Sp - 24] = _s3Nen::P64;
           P64[Sp - 16] = _s3Neo::P64;
           P64[Sp - 8] = _s3Nep::P64;
           Sp = Sp - 96;
           if (R1 & 7 != 0) goto u3TKP; else goto c3TKe;
       u3TKP: // global
           call _c3TKd(R1) args: 0, res: 0, upd: 0;
       c3TKe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NeE_info" {
     sat_s3NeE_info:
         const sat_s3NeE_entry;
         const 11;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TKd() //  [R1]
         { []
         }
     {offset
       c3TKd: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3TKL; else goto c3TKK;
       c3TKL: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TKK: // global
           _s3Net::P64 = P64[R1 + 7];
           _s3Neu::P64 = P64[R1 + 15];
           _s3Nev::P64 = P64[R1 + 23];
           _s3New::P64 = P64[R1 + 31];
           I64[Hp - 120] = sat_s3NeB_info;
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = _s3Net::P64;
           P64[Hp - 16] = _s3Neu::P64;
           P64[Hp - 8] = _s3Nev::P64;
           P64[Hp] = _s3New::P64;
           I64[Sp + 88] = block_c3TKE_info;
           R3 = Hp - 119;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 88;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TKd_info" {
     block_c3TKd_info:
         const _c3TKd;
         const 11;
         const 1103806595102;
         const S3NLQ_srt+120;
 },
 _c3TKE() //  [R1]
         { []
         }
     {offset
       c3TKE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TKO; else goto c3TKN;
       c3TKO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TKN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TKE_info" {
     block_c3TKE_info:
         const _c3TKE;
         const 0;
         const 30;
 },
 sat_s3NeF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TKQ: // global
           _s3Neq::P64 = R2;
           _s3NeF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TKR; else goto c3TKS;
       c3TKS: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3TKU; else goto c3TKT;
       c3TKU: // global
           HpAlloc = 96;
           goto c3TKR;
       c3TKR: // global
           R2 = _s3Neq::P64;
           R1 = _s3NeF::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TKT: // global
           _s3Ne5::P64 = P64[_s3NeF::P64 + 7];
           _s3Ne6::P64 = P64[_s3NeF::P64 + 15];
           _s3Ne7::P64 = P64[_s3NeF::P64 + 23];
           _s3Ne8::P64 = P64[_s3NeF::P64 + 31];
           _s3Ne9::P64 = P64[_s3NeF::P64 + 39];
           _s3Ned::P64 = P64[_s3NeF::P64 + 47];
           _s3Nef::P64 = P64[_s3NeF::P64 + 55];
           _s3Nei::P64 = P64[_s3NeF::P64 + 63];
           _s3Nej::P64 = P64[_s3NeF::P64 + 71];
           _s3Nek::P64 = P64[_s3NeF::P64 + 79];
           _s3Nel::P64 = P64[_s3NeF::P64 + 87];
           _s3Nem::P64 = P64[_s3NeF::P64 + 95];
           _s3Nen::P64 = P64[_s3NeF::P64 + 103];
           _s3Neo::P64 = P64[_s3NeF::P64 + 111];
           _s3Nep::P64 = P64[_s3NeF::P64 + 119];
           I64[Hp - 88] = sat_s3NeE_info;
           P64[Hp - 80] = _s3Ne9::P64;
           P64[Hp - 72] = _s3Ned::P64;
           P64[Hp - 64] = _s3Nef::P64;
           P64[Hp - 56] = _s3Nei::P64;
           P64[Hp - 48] = _s3Nej::P64;
           P64[Hp - 40] = _s3Nek::P64;
           P64[Hp - 32] = _s3Nel::P64;
           P64[Hp - 24] = _s3Nem::P64;
           P64[Hp - 16] = _s3Nen::P64;
           P64[Hp - 8] = _s3Neo::P64;
           P64[Hp] = _s3Nep::P64;
           R6 = _s3Ned::P64;
           R5 = _s3Ne8::P64;
           R4 = _s3Ne7::P64;
           R3 = _s3Ne6::P64;
           R2 = _s3Ne5::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 87;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NeF_info" {
     sat_s3NeF_info:
         const sat_s3NeF_entry;
         const 15;
         const 5501853106184;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 sat_s3NeI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TKV: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3TKZ; else goto c3TL0;
       c3TKZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TL0: // global
           I64[Sp - 64] = block_c3TJY_info;
           _s3Ne5::P64 = P64[R1 + 7];
           _s3Ne6::P64 = P64[R1 + 15];
           _s3Ne7::P64 = P64[R1 + 23];
           _s3Ne8::P64 = P64[R1 + 31];
           _s3Ne9::P64 = P64[R1 + 39];
           _s3Ned::P64 = P64[R1 + 47];
           _s3Nef::P64 = P64[R1 + 55];
           R1 = R2;
           P64[Sp - 56] = _s3Ne5::P64;
           P64[Sp - 48] = _s3Ne6::P64;
           P64[Sp - 40] = _s3Ne7::P64;
           P64[Sp - 32] = _s3Ne8::P64;
           P64[Sp - 24] = _s3Ne9::P64;
           P64[Sp - 16] = _s3Ned::P64;
           P64[Sp - 8] = _s3Nef::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u3TL7; else goto c3TJZ;
       u3TL7: // global
           call _c3TJY(R1) args: 0, res: 0, upd: 0;
       c3TJZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NeI_info" {
     sat_s3NeI_info:
         const sat_s3NeI_entry;
         const 7;
         const 5501853106184;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TJY() //  [R1]
         { []
         }
     {offset
       c3TJY: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3TL3; else goto c3TL2;
       c3TL3: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TL2: // global
           _s3Nei::P64 = P64[R1 + 7];
           _s3Nej::P64 = P64[R1 + 15];
           _s3Nek::P64 = P64[R1 + 23];
           _s3Nel::P64 = P64[R1 + 31];
           _s3Nem::P64 = P64[R1 + 39];
           _s3Nen::P64 = P64[R1 + 47];
           _s3Neo::P64 = P64[R1 + 55];
           _s3Nep::P64 = P64[R1 + 63];
           I64[Hp - 120] = sat_s3NeF_info;
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = _s3Nei::P64;
           P64[Hp - 48] = _s3Nej::P64;
           P64[Hp - 40] = _s3Nek::P64;
           P64[Hp - 32] = _s3Nel::P64;
           P64[Hp - 24] = _s3Nem::P64;
           P64[Hp - 16] = _s3Nen::P64;
           P64[Hp - 8] = _s3Neo::P64;
           P64[Hp] = _s3Nep::P64;
           I64[Sp + 56] = block_c3TKW_info;
           R3 = Hp - 119;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 56;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TJY_info" {
     block_c3TJY_info:
         const _c3TJY;
         const 7;
         const 5501853106206;
         const S3NLQ_srt+120;
 },
 _c3TKW() //  [R1]
         { []
         }
     {offset
       c3TKW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TL6; else goto c3TL5;
       c3TL6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TL5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TKW_info" {
     block_c3TKW_info:
         const _c3TKW;
         const 0;
         const 30;
 },
 sat_s3NeJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TL8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3TLc; else goto c3TLb;
       c3TLc: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TLb: // global
           _s3Ne5::P64 = P64[R1 + 7];
           _s3Ne6::P64 = P64[R1 + 15];
           _s3Ne7::P64 = P64[R1 + 23];
           _s3Ne8::P64 = P64[R1 + 31];
           _s3Ne9::P64 = P64[R1 + 39];
           _s3Ned::P64 = P64[R1 + 47];
           _s3Nee::P64 = P64[R1 + 55];
           I64[Hp - 56] = sat_s3NeI_info;
           P64[Hp - 48] = _s3Ne5::P64;
           P64[Hp - 40] = _s3Ne6::P64;
           P64[Hp - 32] = _s3Ne7::P64;
           P64[Hp - 24] = _s3Ne8::P64;
           P64[Hp - 16] = _s3Ne9::P64;
           P64[Hp - 8] = _s3Ned::P64;
           P64[Hp] = R2;
           R2 = Hp - 55;
           R1 = _s3Nee::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NeJ_info" {
     sat_s3NeJ_info:
         const sat_s3NeJ_entry;
         const 7;
         const 5501853106184;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3Nec_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TLd: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3TLh; else goto c3TLg;
       c3TLh: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TLg: // global
           _s3NdX::P64 = P64[R1 + 7];
           _s3NdY::P64 = P64[R1 + 15];
           _s3NdZ::P64 = P64[R1 + 23];
           _s3Ne0::P64 = P64[R1 + 31];
           _s3Ne1::P64 = P64[R1 + 39];
           _s3Ne2::P64 = P64[R1 + 47];
           _s3Ne3::P64 = P64[R1 + 55];
           _s3Ne4::P64 = P64[R1 + 63];
           _s3Ne5::P64 = P64[R1 + 71];
           _s3Ne6::P64 = P64[R1 + 79];
           _s3Ne7::P64 = P64[R1 + 87];
           _s3Ne8::P64 = P64[R1 + 95];
           _s3Ne9::P64 = P64[R1 + 103];
           I64[Hp - 144] = ds1_s3Nee_info;
           P64[Hp - 128] = _s3NdX::P64;
           P64[Hp - 120] = _s3NdY::P64;
           P64[Hp - 112] = _s3NdZ::P64;
           P64[Hp - 104] = _s3Ne0::P64;
           P64[Hp - 96] = _s3Ne1::P64;
           P64[Hp - 88] = _s3Ne2::P64;
           P64[Hp - 80] = _s3Ne3::P64;
           P64[Hp - 72] = _s3Ne4::P64;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s3NeJ_info;
           P64[Hp - 48] = _s3Ne5::P64;
           P64[Hp - 40] = _s3Ne6::P64;
           P64[Hp - 32] = _s3Ne7::P64;
           P64[Hp - 24] = _s3Ne8::P64;
           P64[Hp - 16] = _s3Ne9::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 144;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Nec_info" {
     p_s3Nec_info:
         const p_s3Nec_entry;
         const 13;
         const 14297946128392;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3NeK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TLq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TLr; else goto c3TLs;
       c3TLr: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TLs: // global
           I64[Sp - 8] = block_c3TLn_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3NeK_info" {
     lvl2_s3NeK_info:
         const lvl2_s3NeK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TLn() //  [R1]
         { []
         }
     {offset
       c3TLn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TLv; else goto c3TLu;
       c3TLv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TLu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TLn_info" {
     block_c3TLn_info:
         const _c3TLn;
         const 0;
         const 30;
 },
 sat_s3NeT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TLE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TLF; else goto c3TLG;
       c3TLF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TLG: // global
           I64[Sp - 8] = block_c3TLB_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NeT_info" {
     sat_s3NeT_info:
         const sat_s3NeT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TLB() //  [R1]
         { []
         }
     {offset
       c3TLB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TLJ; else goto c3TLI;
       c3TLJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TLI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TLB_info" {
     block_c3TLB_info:
         const _c3TLB;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3TLK: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3TLO; else goto c3TLN;
       c3TLO: // global
           HpAlloc = 144;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3TLN: // global
           I64[Hp - 136] = p_s3Nec_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = P64[Sp];
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           I64[Hp - 24] = lvl2_s3NeK_info;
           P64[Hp - 16] = Hp - 135;
           I64[Hp - 8] = sat_s3NeT_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 72];
           R3 = P64[Sp + 64];
           R2 = Hp - 6;
           Sp = Sp + 80;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)1_entry;
         const 0;
         const 172627620528142;
         const 64424509440;
         const S3NLQ_srt+120;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.574469417 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3TNv: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 80, res: 0, upd: 8;
     }
 },
 ds1_s3Nfa_entry() //  [R1]
         { []
         }
     {offset
       c3TNI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TNJ; else goto c3TNK;
       c3TNJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TNK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Nfa_info" {
     ds1_s3Nfa_info:
         const ds1_s3Nfa_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+208;
 },
 sat_s3Nfu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TOd: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3TOh; else goto c3TOi;
       c3TOh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TOi: // global
           I64[Sp - 80] = block_c3TOa_info;
           _s3Nfb::P64 = P64[R1 + 7];
           _s3Nfe::P64 = P64[R1 + 15];
           _s3Nff::P64 = P64[R1 + 23];
           _s3Nfg::P64 = P64[R1 + 31];
           _s3Nfh::P64 = P64[R1 + 39];
           _s3Nfi::P64 = P64[R1 + 47];
           _s3Nfj::P64 = P64[R1 + 55];
           _s3Nfk::P64 = P64[R1 + 63];
           _s3Nfl::P64 = P64[R1 + 71];
           R1 = R2;
           P64[Sp - 72] = _s3Nfb::P64;
           P64[Sp - 64] = _s3Nfe::P64;
           P64[Sp - 56] = _s3Nff::P64;
           P64[Sp - 48] = _s3Nfg::P64;
           P64[Sp - 40] = _s3Nfh::P64;
           P64[Sp - 32] = _s3Nfi::P64;
           P64[Sp - 24] = _s3Nfj::P64;
           P64[Sp - 16] = _s3Nfk::P64;
           P64[Sp - 8] = _s3Nfl::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto u3TOm; else goto c3TOb;
       u3TOm: // global
           call _c3TOa(R1) args: 0, res: 0, upd: 0;
       c3TOb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nfu_info" {
     sat_s3Nfu_info:
         const sat_s3Nfu_entry;
         const 9;
         const 8;
         const 4294967301;
 },
 _c3TOa() //  [R1]
         { []
         }
     {offset
       c3TOa: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3TOl; else goto c3TOk;
       c3TOl: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TOk: // global
           _s3Nfp::P64 = P64[R1 + 7];
           _s3Nfq::P64 = P64[R1 + 15];
           _s3Nfr::P64 = P64[R1 + 23];
           _s3Nfs::P64 = P64[R1 + 31];
           I64[Hp - 96] = (,,,,,,,,,,,)_con_info;
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = _s3Nfp::P64;
           P64[Hp - 16] = _s3Nfq::P64;
           P64[Hp - 8] = _s3Nfr::P64;
           P64[Hp] = _s3Nfs::P64;
           R2 = Hp - 95;
           R1 = P64[Sp + 8];
           Sp = Sp + 80;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TOa_info" {
     block_c3TOa_info:
         const _c3TOa;
         const 9;
         const 30;
 },
 sat_s3Nfv_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TOn: // global
           _s3Nfm::P64 = R2;
           _s3Nfv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TOo; else goto c3TOp;
       c3TOp: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3TOr; else goto c3TOq;
       c3TOr: // global
           HpAlloc = 80;
           goto c3TOo;
       c3TOo: // global
           R2 = _s3Nfm::P64;
           R1 = _s3Nfv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TOq: // global
           _s3Nf2::P64 = P64[_s3Nfv::P64 + 7];
           _s3Nf3::P64 = P64[_s3Nfv::P64 + 15];
           _s3Nf4::P64 = P64[_s3Nfv::P64 + 23];
           _s3Nf5::P64 = P64[_s3Nfv::P64 + 31];
           _s3Nf9::P64 = P64[_s3Nfv::P64 + 39];
           _s3Nfb::P64 = P64[_s3Nfv::P64 + 47];
           _s3Nfe::P64 = P64[_s3Nfv::P64 + 55];
           _s3Nff::P64 = P64[_s3Nfv::P64 + 63];
           _s3Nfg::P64 = P64[_s3Nfv::P64 + 71];
           _s3Nfh::P64 = P64[_s3Nfv::P64 + 79];
           _s3Nfi::P64 = P64[_s3Nfv::P64 + 87];
           _s3Nfj::P64 = P64[_s3Nfv::P64 + 95];
           _s3Nfk::P64 = P64[_s3Nfv::P64 + 103];
           _s3Nfl::P64 = P64[_s3Nfv::P64 + 111];
           I64[Hp - 72] = sat_s3Nfu_info;
           P64[Hp - 64] = _s3Nfb::P64;
           P64[Hp - 56] = _s3Nfe::P64;
           P64[Hp - 48] = _s3Nff::P64;
           P64[Hp - 40] = _s3Nfg::P64;
           P64[Hp - 32] = _s3Nfh::P64;
           P64[Hp - 24] = _s3Nfi::P64;
           P64[Hp - 16] = _s3Nfj::P64;
           P64[Hp - 8] = _s3Nfk::P64;
           P64[Hp] = _s3Nfl::P64;
           R6 = _s3Nf9::P64;
           R5 = _s3Nf5::P64;
           R4 = _s3Nf4::P64;
           R3 = _s3Nf3::P64;
           R2 = _s3Nf2::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 71;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nfv_info" {
     sat_s3Nfv_info:
         const sat_s3Nfv_entry;
         const 14;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+200;
 },
 sat_s3Nfy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TOs: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3TOw; else goto c3TOx;
       c3TOw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TOx: // global
           I64[Sp - 56] = block_c3TNV_info;
           _s3Nf2::P64 = P64[R1 + 7];
           _s3Nf3::P64 = P64[R1 + 15];
           _s3Nf4::P64 = P64[R1 + 23];
           _s3Nf5::P64 = P64[R1 + 31];
           _s3Nf9::P64 = P64[R1 + 39];
           _s3Nfb::P64 = P64[R1 + 47];
           R1 = R2;
           P64[Sp - 48] = _s3Nf2::P64;
           P64[Sp - 40] = _s3Nf3::P64;
           P64[Sp - 32] = _s3Nf4::P64;
           P64[Sp - 24] = _s3Nf5::P64;
           P64[Sp - 16] = _s3Nf9::P64;
           P64[Sp - 8] = _s3Nfb::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u3TOE; else goto c3TNW;
       u3TOE: // global
           call _c3TNV(R1) args: 0, res: 0, upd: 0;
       c3TNW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nfy_info" {
     sat_s3Nfy_info:
         const sat_s3Nfy_entry;
         const 6;
         const 5501853106184;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TNV() //  [R1]
         { []
         }
     {offset
       c3TNV: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3TOA; else goto c3TOz;
       c3TOA: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TOz: // global
           _s3Nfe::P64 = P64[R1 + 7];
           _s3Nff::P64 = P64[R1 + 15];
           _s3Nfg::P64 = P64[R1 + 23];
           _s3Nfh::P64 = P64[R1 + 31];
           _s3Nfi::P64 = P64[R1 + 39];
           _s3Nfj::P64 = P64[R1 + 47];
           _s3Nfk::P64 = P64[R1 + 55];
           _s3Nfl::P64 = P64[R1 + 63];
           I64[Hp - 112] = sat_s3Nfv_info;
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 48];
           P64[Hp - 56] = _s3Nfe::P64;
           P64[Hp - 48] = _s3Nff::P64;
           P64[Hp - 40] = _s3Nfg::P64;
           P64[Hp - 32] = _s3Nfh::P64;
           P64[Hp - 24] = _s3Nfi::P64;
           P64[Hp - 16] = _s3Nfj::P64;
           P64[Hp - 8] = _s3Nfk::P64;
           P64[Hp] = _s3Nfl::P64;
           I64[Sp + 48] = block_c3TOt_info;
           R3 = Hp - 111;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 48;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TNV_info" {
     block_c3TNV_info:
         const _c3TNV;
         const 6;
         const 5501853106206;
         const S3NLQ_srt+120;
 },
 _c3TOt() //  [R1]
         { []
         }
     {offset
       c3TOt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TOD; else goto c3TOC;
       c3TOD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TOC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TOt_info" {
     block_c3TOt_info:
         const _c3TOt;
         const 0;
         const 30;
 },
 sat_s3Nfz_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TOF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3TOJ; else goto c3TOI;
       c3TOJ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TOI: // global
           _s3Nf2::P64 = P64[R1 + 7];
           _s3Nf3::P64 = P64[R1 + 15];
           _s3Nf4::P64 = P64[R1 + 23];
           _s3Nf5::P64 = P64[R1 + 31];
           _s3Nf9::P64 = P64[R1 + 39];
           _s3Nfa::P64 = P64[R1 + 47];
           I64[Hp - 48] = sat_s3Nfy_info;
           P64[Hp - 40] = _s3Nf2::P64;
           P64[Hp - 32] = _s3Nf3::P64;
           P64[Hp - 24] = _s3Nf4::P64;
           P64[Hp - 16] = _s3Nf5::P64;
           P64[Hp - 8] = _s3Nf9::P64;
           P64[Hp] = R2;
           R2 = Hp - 47;
           R1 = _s3Nfa::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nfz_info" {
     sat_s3Nfz_info:
         const sat_s3Nfz_entry;
         const 6;
         const 5501853106184;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3Nf8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TOK: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3TOO; else goto c3TON;
       c3TOO: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TON: // global
           _s3NeU::P64 = P64[R1 + 7];
           _s3NeV::P64 = P64[R1 + 15];
           _s3NeW::P64 = P64[R1 + 23];
           _s3NeX::P64 = P64[R1 + 31];
           _s3NeY::P64 = P64[R1 + 39];
           _s3NeZ::P64 = P64[R1 + 47];
           _s3Nf0::P64 = P64[R1 + 55];
           _s3Nf1::P64 = P64[R1 + 63];
           _s3Nf2::P64 = P64[R1 + 71];
           _s3Nf3::P64 = P64[R1 + 79];
           _s3Nf4::P64 = P64[R1 + 87];
           _s3Nf5::P64 = P64[R1 + 95];
           I64[Hp - 136] = ds1_s3Nfa_info;
           P64[Hp - 120] = _s3NeU::P64;
           P64[Hp - 112] = _s3NeV::P64;
           P64[Hp - 104] = _s3NeW::P64;
           P64[Hp - 96] = _s3NeX::P64;
           P64[Hp - 88] = _s3NeY::P64;
           P64[Hp - 80] = _s3NeZ::P64;
           P64[Hp - 72] = _s3Nf0::P64;
           P64[Hp - 64] = _s3Nf1::P64;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3Nfz_info;
           P64[Hp - 40] = _s3Nf2::P64;
           P64[Hp - 32] = _s3Nf3::P64;
           P64[Hp - 24] = _s3Nf4::P64;
           P64[Hp - 16] = _s3Nf5::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 136;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Nf8_info" {
     p_s3Nf8_info:
         const p_s3Nf8_entry;
         const 12;
         const 14297946128392;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3NfA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TOX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TOY; else goto c3TOZ;
       c3TOY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TOZ: // global
           I64[Sp - 8] = block_c3TOU_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3NfA_info" {
     lvl2_s3NfA_info:
         const lvl2_s3NfA_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TOU() //  [R1]
         { []
         }
     {offset
       c3TOU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TP2; else goto c3TP1;
       c3TP2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TP1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TOU_info" {
     block_c3TOU_info:
         const _c3TOU;
         const 0;
         const 30;
 },
 sat_s3NfJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TPb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TPc; else goto c3TPd;
       c3TPc: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TPd: // global
           I64[Sp - 8] = block_c3TP8_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NfJ_info" {
     sat_s3NfJ_info:
         const sat_s3NfJ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TP8() //  [R1]
         { []
         }
     {offset
       c3TP8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TPg; else goto c3TPf;
       c3TPg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TPf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TP8_info" {
     block_c3TP8_info:
         const _c3TP8;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3TPh: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3TPl; else goto c3TPk;
       c3TPl: // global
           HpAlloc = 136;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3TPk: // global
           I64[Hp - 128] = p_s3Nf8_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           I64[Hp - 24] = lvl2_s3NfA_info;
           P64[Hp - 16] = Hp - 127;
           I64[Hp - 8] = sat_s3NfJ_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 64];
           R3 = P64[Sp + 56];
           R2 = Hp - 6;
           Sp = Sp + 72;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)1_entry;
         const 0;
         const 313365108883470;
         const 60129542144;
         const S3NLQ_srt+120;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.619101002 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3TQL: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 72, res: 0, upd: 8;
     }
 },
 ds1_s3NfZ_entry() //  [R1]
         { []
         }
     {offset
       c3TQY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TQZ; else goto c3TR0;
       c3TQZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TR0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3NfZ_info" {
     ds1_s3NfZ_info:
         const ds1_s3NfZ_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+208;
 },
 sat_s3Ngj_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TRG: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3TRK; else goto c3TRJ;
       c3TRK: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TRJ: // global
           _s3Ng0::P64 = P64[R1 + 7];
           _s3Ng3::P64 = P64[R1 + 15];
           _s3Ng4::P64 = P64[R1 + 23];
           _s3Ng5::P64 = P64[R1 + 31];
           _s3Ng6::P64 = P64[R1 + 39];
           _s3Ng7::P64 = P64[R1 + 47];
           _s3Ng8::P64 = P64[R1 + 55];
           _s3Ng9::P64 = P64[R1 + 63];
           _s3Nga::P64 = P64[R1 + 71];
           _s3Nge::P64 = P64[R1 + 79];
           _s3Ngf::P64 = P64[R1 + 87];
           I64[Hp - 88] = (,,,,,,,,,,)_con_info;
           P64[Hp - 80] = _s3Ng3::P64;
           P64[Hp - 72] = _s3Ng4::P64;
           P64[Hp - 64] = _s3Ng5::P64;
           P64[Hp - 56] = _s3Ng6::P64;
           P64[Hp - 48] = _s3Ng7::P64;
           P64[Hp - 40] = _s3Ng8::P64;
           P64[Hp - 32] = _s3Ng9::P64;
           P64[Hp - 24] = _s3Nga::P64;
           P64[Hp - 16] = _s3Nge::P64;
           P64[Hp - 8] = _s3Ngf::P64;
           P64[Hp] = R2;
           R2 = Hp - 87;
           R1 = _s3Ng0::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ngj_info" {
     sat_s3Ngj_info:
         const sat_s3Ngj_entry;
         const 11;
         const 8;
         const 4294967301;
 },
 sat_s3Ngk_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TRL: // global
           _s3Ngg::P64 = R2;
           _s3Ngk::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3TRM; else goto c3TRN;
       c3TRN: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3TRP; else goto c3TRO;
       c3TRP: // global
           HpAlloc = 96;
           goto c3TRM;
       c3TRM: // global
           R2 = _s3Ngg::P64;
           R1 = _s3Ngk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TRO: // global
           _s3NfU::P64 = P64[_s3Ngk::P64 + 7];
           _s3NfY::P64 = P64[_s3Ngk::P64 + 15];
           _s3Ng0::P64 = P64[_s3Ngk::P64 + 23];
           _s3Ng3::P64 = P64[_s3Ngk::P64 + 31];
           _s3Ng4::P64 = P64[_s3Ngk::P64 + 39];
           _s3Ng5::P64 = P64[_s3Ngk::P64 + 47];
           _s3Ng6::P64 = P64[_s3Ngk::P64 + 55];
           _s3Ng7::P64 = P64[_s3Ngk::P64 + 63];
           _s3Ng8::P64 = P64[_s3Ngk::P64 + 71];
           _s3Ng9::P64 = P64[_s3Ngk::P64 + 79];
           _s3Nga::P64 = P64[_s3Ngk::P64 + 87];
           _s3Nge::P64 = P64[_s3Ngk::P64 + 95];
           _s3Ngf::P64 = P64[_s3Ngk::P64 + 103];
           I64[Hp - 88] = sat_s3Ngj_info;
           P64[Hp - 80] = _s3Ng0::P64;
           P64[Hp - 72] = _s3Ng3::P64;
           P64[Hp - 64] = _s3Ng4::P64;
           P64[Hp - 56] = _s3Ng5::P64;
           P64[Hp - 48] = _s3Ng6::P64;
           P64[Hp - 40] = _s3Ng7::P64;
           P64[Hp - 32] = _s3Ng8::P64;
           P64[Hp - 24] = _s3Ng9::P64;
           P64[Hp - 16] = _s3Nga::P64;
           P64[Hp - 8] = _s3Nge::P64;
           P64[Hp] = _s3Ngf::P64;
           R2 = _s3NfU::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3NfY::P64;
           P64[Sp - 8] = Hp - 87;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ngk_info" {
     sat_s3Ngk_info:
         const sat_s3Ngk_entry;
         const 13;
         const 8;
         const 4294967301;
 },
 sat_s3Ngn_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TRQ: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3TRU; else goto c3TRV;
       c3TRU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TRV: // global
           I64[Sp - 96] = block_c3TRq_info;
           _s3NfU::P64 = P64[R1 + 7];
           _s3NfY::P64 = P64[R1 + 15];
           _s3Ng0::P64 = P64[R1 + 23];
           _s3Ng3::P64 = P64[R1 + 31];
           _s3Ng4::P64 = P64[R1 + 39];
           _s3Ng5::P64 = P64[R1 + 47];
           _s3Ng6::P64 = P64[R1 + 55];
           _s3Ng7::P64 = P64[R1 + 63];
           _s3Ng8::P64 = P64[R1 + 71];
           _s3Ng9::P64 = P64[R1 + 79];
           _s3Nga::P64 = P64[R1 + 87];
           R1 = R2;
           P64[Sp - 88] = _s3NfU::P64;
           P64[Sp - 80] = _s3NfY::P64;
           P64[Sp - 72] = _s3Ng0::P64;
           P64[Sp - 64] = _s3Ng3::P64;
           P64[Sp - 56] = _s3Ng4::P64;
           P64[Sp - 48] = _s3Ng5::P64;
           P64[Sp - 40] = _s3Ng6::P64;
           P64[Sp - 32] = _s3Ng7::P64;
           P64[Sp - 24] = _s3Ng8::P64;
           P64[Sp - 16] = _s3Ng9::P64;
           P64[Sp - 8] = _s3Nga::P64;
           Sp = Sp - 96;
           if (R1 & 7 != 0) goto u3TS2; else goto c3TRr;
       u3TS2: // global
           call _c3TRq(R1) args: 0, res: 0, upd: 0;
       c3TRr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ngn_info" {
     sat_s3Ngn_info:
         const sat_s3Ngn_entry;
         const 11;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TRq() //  [R1]
         { []
         }
     {offset
       c3TRq: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3TRY; else goto c3TRX;
       c3TRY: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TRX: // global
           _s3Nge::P64 = P64[R1 + 7];
           _s3Ngf::P64 = P64[R1 + 15];
           I64[Hp - 104] = sat_s3Ngk_info;
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = P64[Sp + 80];
           P64[Hp - 16] = P64[Sp + 88];
           P64[Hp - 8] = _s3Nge::P64;
           P64[Hp] = _s3Ngf::P64;
           I64[Sp + 88] = block_c3TRR_info;
           R3 = Hp - 103;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 88;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TRq_info" {
     block_c3TRq_info:
         const _c3TRq;
         const 11;
         const 1103806595102;
         const S3NLQ_srt+120;
 },
 _c3TRR() //  [R1]
         { []
         }
     {offset
       c3TRR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TS1; else goto c3TS0;
       c3TS1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TS0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TRR_info" {
     block_c3TRR_info:
         const _c3TRR;
         const 0;
         const 30;
 },
 sat_s3Ngo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TS3: // global
           _s3Ngb::P64 = R2;
           _s3Ngo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TS4; else goto c3TS5;
       c3TS5: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3TS7; else goto c3TS6;
       c3TS7: // global
           HpAlloc = 96;
           goto c3TS4;
       c3TS4: // global
           R2 = _s3Ngb::P64;
           R1 = _s3Ngo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TS6: // global
           _s3NfS::P64 = P64[_s3Ngo::P64 + 7];
           _s3NfT::P64 = P64[_s3Ngo::P64 + 15];
           _s3NfU::P64 = P64[_s3Ngo::P64 + 23];
           _s3NfY::P64 = P64[_s3Ngo::P64 + 31];
           _s3Ng0::P64 = P64[_s3Ngo::P64 + 39];
           _s3Ng3::P64 = P64[_s3Ngo::P64 + 47];
           _s3Ng4::P64 = P64[_s3Ngo::P64 + 55];
           _s3Ng5::P64 = P64[_s3Ngo::P64 + 63];
           _s3Ng6::P64 = P64[_s3Ngo::P64 + 71];
           _s3Ng7::P64 = P64[_s3Ngo::P64 + 79];
           _s3Ng8::P64 = P64[_s3Ngo::P64 + 87];
           _s3Ng9::P64 = P64[_s3Ngo::P64 + 95];
           _s3Nga::P64 = P64[_s3Ngo::P64 + 103];
           I64[Hp - 88] = sat_s3Ngn_info;
           P64[Hp - 80] = _s3NfU::P64;
           P64[Hp - 72] = _s3NfY::P64;
           P64[Hp - 64] = _s3Ng0::P64;
           P64[Hp - 56] = _s3Ng3::P64;
           P64[Hp - 48] = _s3Ng4::P64;
           P64[Hp - 40] = _s3Ng5::P64;
           P64[Hp - 32] = _s3Ng6::P64;
           P64[Hp - 24] = _s3Ng7::P64;
           P64[Hp - 16] = _s3Ng8::P64;
           P64[Hp - 8] = _s3Ng9::P64;
           P64[Hp] = _s3Nga::P64;
           R4 = _s3NfY::P64;
           R3 = _s3NfT::P64;
           R2 = _s3NfS::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 87;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ngo_info" {
     sat_s3Ngo_info:
         const sat_s3Ngo_entry;
         const 13;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 sat_s3Ngr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TS8: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TSc; else goto c3TSd;
       c3TSc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TSd: // global
           I64[Sp - 48] = block_c3TRb_info;
           _s3NfS::P64 = P64[R1 + 7];
           _s3NfT::P64 = P64[R1 + 15];
           _s3NfU::P64 = P64[R1 + 23];
           _s3NfY::P64 = P64[R1 + 31];
           _s3Ng0::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 40] = _s3NfS::P64;
           P64[Sp - 32] = _s3NfT::P64;
           P64[Sp - 24] = _s3NfU::P64;
           P64[Sp - 16] = _s3NfY::P64;
           P64[Sp - 8] = _s3Ng0::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3TSk; else goto c3TRc;
       u3TSk: // global
           call _c3TRb(R1) args: 0, res: 0, upd: 0;
       c3TRc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ngr_info" {
     sat_s3Ngr_info:
         const sat_s3Ngr_entry;
         const 5;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TRb() //  [R1]
         { []
         }
     {offset
       c3TRb: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3TSg; else goto c3TSf;
       c3TSg: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TSf: // global
           _s3Ng3::P64 = P64[R1 + 7];
           _s3Ng4::P64 = P64[R1 + 15];
           _s3Ng5::P64 = P64[R1 + 23];
           _s3Ng6::P64 = P64[R1 + 31];
           _s3Ng7::P64 = P64[R1 + 39];
           _s3Ng8::P64 = P64[R1 + 47];
           _s3Ng9::P64 = P64[R1 + 55];
           _s3Nga::P64 = P64[R1 + 63];
           I64[Hp - 104] = sat_s3Ngo_info;
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = _s3Ng3::P64;
           P64[Hp - 48] = _s3Ng4::P64;
           P64[Hp - 40] = _s3Ng5::P64;
           P64[Hp - 32] = _s3Ng6::P64;
           P64[Hp - 24] = _s3Ng7::P64;
           P64[Hp - 16] = _s3Ng8::P64;
           P64[Hp - 8] = _s3Ng9::P64;
           P64[Hp] = _s3Nga::P64;
           I64[Sp + 40] = block_c3TS9_info;
           R3 = Hp - 103;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 40;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TRb_info" {
     block_c3TRb_info:
         const _c3TRb;
         const 5;
         const 3302829850654;
         const S3NLQ_srt+120;
 },
 _c3TS9() //  [R1]
         { []
         }
     {offset
       c3TS9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TSj; else goto c3TSi;
       c3TSj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TSi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TS9_info" {
     block_c3TS9_info:
         const _c3TS9;
         const 0;
         const 30;
 },
 sat_s3Ngs_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TSl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3TSp; else goto c3TSo;
       c3TSp: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TSo: // global
           _s3NfS::P64 = P64[R1 + 7];
           _s3NfT::P64 = P64[R1 + 15];
           _s3NfU::P64 = P64[R1 + 23];
           _s3NfY::P64 = P64[R1 + 31];
           _s3NfZ::P64 = P64[R1 + 39];
           I64[Hp - 40] = sat_s3Ngr_info;
           P64[Hp - 32] = _s3NfS::P64;
           P64[Hp - 24] = _s3NfT::P64;
           P64[Hp - 16] = _s3NfU::P64;
           P64[Hp - 8] = _s3NfY::P64;
           P64[Hp] = R2;
           R2 = Hp - 39;
           R1 = _s3NfZ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ngs_info" {
     sat_s3Ngs_info:
         const sat_s3Ngs_entry;
         const 5;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3NfX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TSq: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3TSu; else goto c3TSt;
       c3TSu: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TSt: // global
           _s3NfK::P64 = P64[R1 + 7];
           _s3NfL::P64 = P64[R1 + 15];
           _s3NfM::P64 = P64[R1 + 23];
           _s3NfN::P64 = P64[R1 + 31];
           _s3NfO::P64 = P64[R1 + 39];
           _s3NfP::P64 = P64[R1 + 47];
           _s3NfQ::P64 = P64[R1 + 55];
           _s3NfR::P64 = P64[R1 + 63];
           _s3NfS::P64 = P64[R1 + 71];
           _s3NfT::P64 = P64[R1 + 79];
           _s3NfU::P64 = P64[R1 + 87];
           I64[Hp - 128] = ds1_s3NfZ_info;
           P64[Hp - 112] = _s3NfK::P64;
           P64[Hp - 104] = _s3NfL::P64;
           P64[Hp - 96] = _s3NfM::P64;
           P64[Hp - 88] = _s3NfN::P64;
           P64[Hp - 80] = _s3NfO::P64;
           P64[Hp - 72] = _s3NfP::P64;
           P64[Hp - 64] = _s3NfQ::P64;
           P64[Hp - 56] = _s3NfR::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s3Ngs_info;
           P64[Hp - 32] = _s3NfS::P64;
           P64[Hp - 24] = _s3NfT::P64;
           P64[Hp - 16] = _s3NfU::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 128;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3NfX_info" {
     p_s3NfX_info:
         const p_s3NfX_entry;
         const 11;
         const 12098922872840;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3Ngt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TSD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TSE; else goto c3TSF;
       c3TSE: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TSF: // global
           I64[Sp - 8] = block_c3TSA_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Ngt_info" {
     lvl2_s3Ngt_info:
         const lvl2_s3Ngt_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TSA() //  [R1]
         { []
         }
     {offset
       c3TSA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TSI; else goto c3TSH;
       c3TSI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TSH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TSA_info" {
     block_c3TSA_info:
         const _c3TSA;
         const 0;
         const 30;
 },
 sat_s3NgC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TSR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TSS; else goto c3TST;
       c3TSS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TST: // global
           I64[Sp - 8] = block_c3TSO_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NgC_info" {
     sat_s3NgC_info:
         const sat_s3NgC_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TSO() //  [R1]
         { []
         }
     {offset
       c3TSO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TSW; else goto c3TSV;
       c3TSW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TSV: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TSO_info" {
     block_c3TSO_info:
         const _c3TSO;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3TSX: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3TT1; else goto c3TT0;
       c3TT1: // global
           HpAlloc = 128;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3TT0: // global
           I64[Hp - 120] = p_s3NfX_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = lvl2_s3Ngt_info;
           P64[Hp - 16] = Hp - 119;
           I64[Hp - 8] = sat_s3NgC_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 56];
           R3 = P64[Sp + 48];
           R2 = Hp - 6;
           Sp = Sp + 64;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,)1_entry;
         const 0;
         const 592641062338574;
         const 55834574848;
         const S3NLQ_srt+120;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.664988221 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3TUE: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 64, res: 0, upd: 8;
     }
 },
 ds1_s3NgR_entry() //  [R1]
         { []
         }
     {offset
       c3TUR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TUS; else goto c3TUT;
       c3TUS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TUT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3NgR_info" {
     ds1_s3NgR_info:
         const ds1_s3NgR_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+208;
 },
 sat_s3Nh9_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TVm: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3TVq; else goto c3TVr;
       c3TVq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TVr: // global
           I64[Sp - 80] = block_c3TVj_info;
           _s3NgS::P64 = P64[R1 + 7];
           _s3NgV::P64 = P64[R1 + 15];
           _s3NgW::P64 = P64[R1 + 23];
           _s3NgX::P64 = P64[R1 + 31];
           _s3NgY::P64 = P64[R1 + 39];
           _s3NgZ::P64 = P64[R1 + 47];
           _s3Nh0::P64 = P64[R1 + 55];
           _s3Nh1::P64 = P64[R1 + 63];
           _s3Nh2::P64 = P64[R1 + 71];
           R1 = R2;
           P64[Sp - 72] = _s3NgS::P64;
           P64[Sp - 64] = _s3NgV::P64;
           P64[Sp - 56] = _s3NgW::P64;
           P64[Sp - 48] = _s3NgX::P64;
           P64[Sp - 40] = _s3NgY::P64;
           P64[Sp - 32] = _s3NgZ::P64;
           P64[Sp - 24] = _s3Nh0::P64;
           P64[Sp - 16] = _s3Nh1::P64;
           P64[Sp - 8] = _s3Nh2::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto u3TVv; else goto c3TVk;
       u3TVv: // global
           call _c3TVj(R1) args: 0, res: 0, upd: 0;
       c3TVk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nh9_info" {
     sat_s3Nh9_info:
         const sat_s3Nh9_entry;
         const 9;
         const 8;
         const 4294967301;
 },
 _c3TVj() //  [R1]
         { []
         }
     {offset
       c3TVj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3TVu; else goto c3TVt;
       c3TVu: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TVt: // global
           _s3Nh6::P64 = P64[R1 + 7];
           _s3Nh7::P64 = P64[R1 + 15];
           I64[Hp - 80] = (,,,,,,,,,)_con_info;
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           P64[Hp - 8] = _s3Nh6::P64;
           P64[Hp] = _s3Nh7::P64;
           R2 = Hp - 79;
           R1 = P64[Sp + 8];
           Sp = Sp + 80;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TVj_info" {
     block_c3TVj_info:
         const _c3TVj;
         const 9;
         const 30;
 },
 sat_s3Nha_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TVw: // global
           _s3Nh3::P64 = R2;
           _s3Nha::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3TVx; else goto c3TVy;
       c3TVy: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3TVA; else goto c3TVz;
       c3TVA: // global
           HpAlloc = 80;
           goto c3TVx;
       c3TVx: // global
           R2 = _s3Nh3::P64;
           R1 = _s3Nha::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TVz: // global
           _s3NgL::P64 = P64[_s3Nha::P64 + 7];
           _s3NgM::P64 = P64[_s3Nha::P64 + 15];
           _s3NgQ::P64 = P64[_s3Nha::P64 + 23];
           _s3NgS::P64 = P64[_s3Nha::P64 + 31];
           _s3NgV::P64 = P64[_s3Nha::P64 + 39];
           _s3NgW::P64 = P64[_s3Nha::P64 + 47];
           _s3NgX::P64 = P64[_s3Nha::P64 + 55];
           _s3NgY::P64 = P64[_s3Nha::P64 + 63];
           _s3NgZ::P64 = P64[_s3Nha::P64 + 71];
           _s3Nh0::P64 = P64[_s3Nha::P64 + 79];
           _s3Nh1::P64 = P64[_s3Nha::P64 + 87];
           _s3Nh2::P64 = P64[_s3Nha::P64 + 95];
           I64[Hp - 72] = sat_s3Nh9_info;
           P64[Hp - 64] = _s3NgS::P64;
           P64[Hp - 56] = _s3NgV::P64;
           P64[Hp - 48] = _s3NgW::P64;
           P64[Hp - 40] = _s3NgX::P64;
           P64[Hp - 32] = _s3NgY::P64;
           P64[Hp - 24] = _s3NgZ::P64;
           P64[Hp - 16] = _s3Nh0::P64;
           P64[Hp - 8] = _s3Nh1::P64;
           P64[Hp] = _s3Nh2::P64;
           R4 = _s3NgQ::P64;
           R3 = _s3NgM::P64;
           R2 = _s3NgL::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 71;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nha_info" {
     sat_s3Nha_info:
         const sat_s3Nha_entry;
         const 12;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+192;
 },
 sat_s3Nhd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TVB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3TVF; else goto c3TVG;
       c3TVF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TVG: // global
           I64[Sp - 40] = block_c3TV4_info;
           _s3NgL::P64 = P64[R1 + 7];
           _s3NgM::P64 = P64[R1 + 15];
           _s3NgQ::P64 = P64[R1 + 23];
           _s3NgS::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3NgL::P64;
           P64[Sp - 24] = _s3NgM::P64;
           P64[Sp - 16] = _s3NgQ::P64;
           P64[Sp - 8] = _s3NgS::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3TVN; else goto c3TV5;
       u3TVN: // global
           call _c3TV4(R1) args: 0, res: 0, upd: 0;
       c3TV5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nhd_info" {
     sat_s3Nhd_info:
         const sat_s3Nhd_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TV4() //  [R1]
         { []
         }
     {offset
       c3TV4: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3TVJ; else goto c3TVI;
       c3TVJ: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TVI: // global
           _s3NgV::P64 = P64[R1 + 7];
           _s3NgW::P64 = P64[R1 + 15];
           _s3NgX::P64 = P64[R1 + 23];
           _s3NgY::P64 = P64[R1 + 31];
           _s3NgZ::P64 = P64[R1 + 39];
           _s3Nh0::P64 = P64[R1 + 47];
           _s3Nh1::P64 = P64[R1 + 55];
           _s3Nh2::P64 = P64[R1 + 63];
           I64[Hp - 96] = sat_s3Nha_info;
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s3NgV::P64;
           P64[Hp - 48] = _s3NgW::P64;
           P64[Hp - 40] = _s3NgX::P64;
           P64[Hp - 32] = _s3NgY::P64;
           P64[Hp - 24] = _s3NgZ::P64;
           P64[Hp - 16] = _s3Nh0::P64;
           P64[Hp - 8] = _s3Nh1::P64;
           P64[Hp] = _s3Nh2::P64;
           I64[Sp + 32] = block_c3TVC_info;
           R3 = Hp - 95;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TV4_info" {
     block_c3TV4_info:
         const _c3TV4;
         const 4;
         const 3302829850654;
         const S3NLQ_srt+120;
 },
 _c3TVC() //  [R1]
         { []
         }
     {offset
       c3TVC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TVM; else goto c3TVL;
       c3TVM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TVL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TVC_info" {
     block_c3TVC_info:
         const _c3TVC;
         const 0;
         const 30;
 },
 sat_s3Nhe_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TVO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3TVS; else goto c3TVR;
       c3TVS: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TVR: // global
           _s3NgL::P64 = P64[R1 + 7];
           _s3NgM::P64 = P64[R1 + 15];
           _s3NgQ::P64 = P64[R1 + 23];
           _s3NgR::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3Nhd_info;
           P64[Hp - 24] = _s3NgL::P64;
           P64[Hp - 16] = _s3NgM::P64;
           P64[Hp - 8] = _s3NgQ::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3NgR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nhe_info" {
     sat_s3Nhe_info:
         const sat_s3Nhe_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3NgP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TVT: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3TVX; else goto c3TVW;
       c3TVX: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TVW: // global
           _s3NgD::P64 = P64[R1 + 7];
           _s3NgE::P64 = P64[R1 + 15];
           _s3NgF::P64 = P64[R1 + 23];
           _s3NgG::P64 = P64[R1 + 31];
           _s3NgH::P64 = P64[R1 + 39];
           _s3NgI::P64 = P64[R1 + 47];
           _s3NgJ::P64 = P64[R1 + 55];
           _s3NgK::P64 = P64[R1 + 63];
           _s3NgL::P64 = P64[R1 + 71];
           _s3NgM::P64 = P64[R1 + 79];
           I64[Hp - 120] = ds1_s3NgR_info;
           P64[Hp - 104] = _s3NgD::P64;
           P64[Hp - 96] = _s3NgE::P64;
           P64[Hp - 88] = _s3NgF::P64;
           P64[Hp - 80] = _s3NgG::P64;
           P64[Hp - 72] = _s3NgH::P64;
           P64[Hp - 64] = _s3NgI::P64;
           P64[Hp - 56] = _s3NgJ::P64;
           P64[Hp - 48] = _s3NgK::P64;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3Nhe_info;
           P64[Hp - 24] = _s3NgL::P64;
           P64[Hp - 16] = _s3NgM::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 120;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3NgP_info" {
     p_s3NgP_info:
         const p_s3NgP_entry;
         const 10;
         const 12098922872840;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3Nhf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TW6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TW7; else goto c3TW8;
       c3TW7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TW8: // global
           I64[Sp - 8] = block_c3TW3_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Nhf_info" {
     lvl2_s3Nhf_info:
         const lvl2_s3Nhf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TW3() //  [R1]
         { []
         }
     {offset
       c3TW3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TWb; else goto c3TWa;
       c3TWb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TWa: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TW3_info" {
     block_c3TW3_info:
         const _c3TW3;
         const 0;
         const 30;
 },
 sat_s3Nho_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TWk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TWl; else goto c3TWm;
       c3TWl: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TWm: // global
           I64[Sp - 8] = block_c3TWh_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nho_info" {
     sat_s3Nho_info:
         const sat_s3Nho_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TWh() //  [R1]
         { []
         }
     {offset
       c3TWh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TWp; else goto c3TWo;
       c3TWp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TWo: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TWh_info" {
     block_c3TWh_info:
         const _c3TWh;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3TWq: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3TWu; else goto c3TWt;
       c3TWu: // global
           HpAlloc = 120;
           R1 = GHC.Read.$fRead(,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3TWt: // global
           I64[Hp - 112] = p_s3NgP_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           I64[Hp - 24] = lvl2_s3Nhf_info;
           P64[Hp - 16] = Hp - 111;
           I64[Hp - 8] = sat_s3Nho_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = Hp - 6;
           Sp = Sp + 56;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,)1_entry;
         const 0;
         const 1155591015759886;
         const 51539607552;
         const S3NLQ_srt+120;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.705143503 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3TXQ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 56, res: 0, upd: 8;
     }
 },
 ds1_s3NhC_entry() //  [R1]
         { []
         }
     {offset
       c3TY3: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3TY4; else goto c3TY5;
       c3TY4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3TY5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3NhC_info" {
     ds1_s3NhC_info:
         const ds1_s3NhC_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+208;
 },
 sat_s3NhR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TYw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3TYA; else goto c3TYz;
       c3TYA: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TYz: // global
           _s3NhD::P64 = P64[R1 + 7];
           _s3NhG::P64 = P64[R1 + 15];
           _s3NhH::P64 = P64[R1 + 23];
           _s3NhI::P64 = P64[R1 + 31];
           _s3NhJ::P64 = P64[R1 + 39];
           _s3NhK::P64 = P64[R1 + 47];
           _s3NhL::P64 = P64[R1 + 55];
           _s3NhM::P64 = P64[R1 + 63];
           _s3NhN::P64 = P64[R1 + 71];
           I64[Hp - 72] = (,,,,,,,,)_con_info;
           P64[Hp - 64] = _s3NhG::P64;
           P64[Hp - 56] = _s3NhH::P64;
           P64[Hp - 48] = _s3NhI::P64;
           P64[Hp - 40] = _s3NhJ::P64;
           P64[Hp - 32] = _s3NhK::P64;
           P64[Hp - 24] = _s3NhL::P64;
           P64[Hp - 16] = _s3NhM::P64;
           P64[Hp - 8] = _s3NhN::P64;
           P64[Hp] = R2;
           R2 = Hp - 71;
           R1 = _s3NhD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NhR_info" {
     sat_s3NhR_info:
         const sat_s3NhR_entry;
         const 9;
         const 8;
         const 4294967301;
 },
 sat_s3NhS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TYB: // global
           _s3NhO::P64 = R2;
           _s3NhS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3TYC; else goto c3TYD;
       c3TYD: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3TYF; else goto c3TYE;
       c3TYF: // global
           HpAlloc = 80;
           goto c3TYC;
       c3TYC: // global
           R2 = _s3NhO::P64;
           R1 = _s3NhS::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TYE: // global
           _s3Nhx::P64 = P64[_s3NhS::P64 + 7];
           _s3NhB::P64 = P64[_s3NhS::P64 + 15];
           _s3NhD::P64 = P64[_s3NhS::P64 + 23];
           _s3NhG::P64 = P64[_s3NhS::P64 + 31];
           _s3NhH::P64 = P64[_s3NhS::P64 + 39];
           _s3NhI::P64 = P64[_s3NhS::P64 + 47];
           _s3NhJ::P64 = P64[_s3NhS::P64 + 55];
           _s3NhK::P64 = P64[_s3NhS::P64 + 63];
           _s3NhL::P64 = P64[_s3NhS::P64 + 71];
           _s3NhM::P64 = P64[_s3NhS::P64 + 79];
           _s3NhN::P64 = P64[_s3NhS::P64 + 87];
           I64[Hp - 72] = sat_s3NhR_info;
           P64[Hp - 64] = _s3NhD::P64;
           P64[Hp - 56] = _s3NhG::P64;
           P64[Hp - 48] = _s3NhH::P64;
           P64[Hp - 40] = _s3NhI::P64;
           P64[Hp - 32] = _s3NhJ::P64;
           P64[Hp - 24] = _s3NhK::P64;
           P64[Hp - 16] = _s3NhL::P64;
           P64[Hp - 8] = _s3NhM::P64;
           P64[Hp] = _s3NhN::P64;
           R2 = _s3Nhx::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3NhB::P64;
           P64[Sp - 8] = Hp - 71;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NhS_info" {
     sat_s3NhS_info:
         const sat_s3NhS_entry;
         const 11;
         const 8;
         const 4294967301;
 },
 sat_s3NhV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TYG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3TYK; else goto c3TYL;
       c3TYK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TYL: // global
           I64[Sp - 32] = block_c3TYg_info;
           _s3Nhx::P64 = P64[R1 + 7];
           _s3NhB::P64 = P64[R1 + 15];
           _s3NhD::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Nhx::P64;
           P64[Sp - 16] = _s3NhB::P64;
           P64[Sp - 8] = _s3NhD::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3TYS; else goto c3TYh;
       u3TYS: // global
           call _c3TYg(R1) args: 0, res: 0, upd: 0;
       c3TYh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NhV_info" {
     sat_s3NhV_info:
         const sat_s3NhV_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3TYg() //  [R1]
         { []
         }
     {offset
       c3TYg: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3TYO; else goto c3TYN;
       c3TYO: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TYN: // global
           _s3NhG::P64 = P64[R1 + 7];
           _s3NhH::P64 = P64[R1 + 15];
           _s3NhI::P64 = P64[R1 + 23];
           _s3NhJ::P64 = P64[R1 + 31];
           _s3NhK::P64 = P64[R1 + 39];
           _s3NhL::P64 = P64[R1 + 47];
           _s3NhM::P64 = P64[R1 + 55];
           _s3NhN::P64 = P64[R1 + 63];
           I64[Hp - 88] = sat_s3NhS_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = _s3NhG::P64;
           P64[Hp - 48] = _s3NhH::P64;
           P64[Hp - 40] = _s3NhI::P64;
           P64[Hp - 32] = _s3NhJ::P64;
           P64[Hp - 24] = _s3NhK::P64;
           P64[Hp - 16] = _s3NhL::P64;
           P64[Hp - 8] = _s3NhM::P64;
           P64[Hp] = _s3NhN::P64;
           I64[Sp + 24] = block_c3TYH_info;
           R3 = Hp - 87;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TYg_info" {
     block_c3TYg_info:
         const _c3TYg;
         const 3;
         const 1103806595102;
         const S3NLQ_srt+120;
 },
 _c3TYH() //  [R1]
         { []
         }
     {offset
       c3TYH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TYR; else goto c3TYQ;
       c3TYR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TYQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TYH_info" {
     block_c3TYH_info:
         const _c3TYH;
         const 0;
         const 30;
 },
 sat_s3NhW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TYT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3TYX; else goto c3TYW;
       c3TYX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TYW: // global
           _s3Nhx::P64 = P64[R1 + 7];
           _s3NhB::P64 = P64[R1 + 15];
           _s3NhC::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3NhV_info;
           P64[Hp - 16] = _s3Nhx::P64;
           P64[Hp - 8] = _s3NhB::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3NhC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NhW_info" {
     sat_s3NhW_info:
         const sat_s3NhW_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3NhA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3TYY: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3TZ2; else goto c3TZ1;
       c3TZ2: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3TZ1: // global
           _s3Nhp::P64 = P64[R1 + 7];
           _s3Nhq::P64 = P64[R1 + 15];
           _s3Nhr::P64 = P64[R1 + 23];
           _s3Nhs::P64 = P64[R1 + 31];
           _s3Nht::P64 = P64[R1 + 39];
           _s3Nhu::P64 = P64[R1 + 47];
           _s3Nhv::P64 = P64[R1 + 55];
           _s3Nhw::P64 = P64[R1 + 63];
           _s3Nhx::P64 = P64[R1 + 71];
           I64[Hp - 112] = ds1_s3NhC_info;
           P64[Hp - 96] = _s3Nhp::P64;
           P64[Hp - 88] = _s3Nhq::P64;
           P64[Hp - 80] = _s3Nhr::P64;
           P64[Hp - 72] = _s3Nhs::P64;
           P64[Hp - 64] = _s3Nht::P64;
           P64[Hp - 56] = _s3Nhu::P64;
           P64[Hp - 48] = _s3Nhv::P64;
           P64[Hp - 40] = _s3Nhw::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3NhW_info;
           P64[Hp - 16] = _s3Nhx::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 112;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3NhA_info" {
     p_s3NhA_info:
         const p_s3NhA_entry;
         const 9;
         const 9899899617288;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3NhX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TZb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TZc; else goto c3TZd;
       c3TZc: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TZd: // global
           I64[Sp - 8] = block_c3TZ8_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3NhX_info" {
     lvl2_s3NhX_info:
         const lvl2_s3NhX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TZ8() //  [R1]
         { []
         }
     {offset
       c3TZ8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TZg; else goto c3TZf;
       c3TZg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TZf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TZ8_info" {
     block_c3TZ8_info:
         const _c3TZ8;
         const 0;
         const 30;
 },
 sat_s3Ni6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3TZp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3TZq; else goto c3TZr;
       c3TZq: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3TZr: // global
           I64[Sp - 8] = block_c3TZm_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ni6_info" {
     sat_s3Ni6_info:
         const sat_s3Ni6_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3TZm() //  [R1]
         { []
         }
     {offset
       c3TZm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3TZu; else goto c3TZt;
       c3TZu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3TZt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3TZm_info" {
     block_c3TZm_info:
         const _c3TZm;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3TZv: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3TZz; else goto c3TZy;
       c3TZz: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3TZy: // global
           I64[Hp - 104] = p_s3NhA_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = lvl2_s3NhX_info;
           P64[Hp - 16] = Hp - 103;
           I64[Hp - 8] = sat_s3Ni6_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 6;
           Sp = Sp + 48;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,)1_entry;
         const 0;
         const 2279291899346958;
         const 47244640256;
         const S3NLQ_srt+120;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.739005232 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3U0G: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 48, res: 0, upd: 8;
     }
 },
 p_s3Nih_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U0P: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3U0Q; else goto c3U0R;
       c3U0Q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U0R: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 47];
           P64[Sp - 24] = P64[R1 + 55];
           P64[Sp - 16] = P64[R1 + 63];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Nih_info" {
     p_s3Nih_info:
         const p_s3Nih_entry;
         const 8;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+208;
 },
 lvl2_s3Nii_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3U10: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3U11; else goto c3U12;
       c3U11: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3U12: // global
           I64[Sp - 8] = block_c3U0X_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Nii_info" {
     lvl2_s3Nii_info:
         const lvl2_s3Nii_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3U0X() //  [R1]
         { []
         }
     {offset
       c3U0X: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U15; else goto c3U14;
       c3U15: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U14: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U0X_info" {
     block_c3U0X_info:
         const _c3U0X;
         const 0;
         const 30;
 },
 sat_s3Nir_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3U1e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3U1f; else goto c3U1g;
       c3U1f: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3U1g: // global
           I64[Sp - 8] = block_c3U1b_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nir_info" {
     sat_s3Nir_info:
         const sat_s3Nir_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3U1b() //  [R1]
         { []
         }
     {offset
       c3U1b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U1j; else goto c3U1i;
       c3U1j: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U1i: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U1b_info" {
     block_c3U1b_info:
         const _c3U1b;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3U1k: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3U1o; else goto c3U1n;
       c3U1o: // global
           HpAlloc = 104;
           R1 = GHC.Read.$fRead(,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3U1n: // global
           I64[Hp - 96] = p_s3Nih_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = lvl2_s3Nii_info;
           P64[Hp - 16] = Hp - 95;
           I64[Hp - 8] = sat_s3Nir_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 6;
           Sp = Sp + 40;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,)1_entry;
         const 0;
         const 2211908157454;
         const 42949672960;
         const S3NLQ_srt+208;
         const 10;
         const GHC.Read.$fRead(,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.76339649 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3U1Y: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 40, res: 0, upd: 8;
     }
 },
 ds1_s3NiD_entry() //  [R1]
         { []
         }
     {offset
       c3U2b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3U2c; else goto c3U2d;
       c3U2c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3U2d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3NiD_info" {
     ds1_s3NiD_info:
         const ds1_s3NiD_entry;
         const 5;
         const 4294967311;
         const S3NLQ_srt+200;
 },
 sat_s3NiT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U2T: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3U2X; else goto c3U2W;
       c3U2X: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U2W: // global
           _s3NiE::P64 = P64[R1 + 7];
           _s3NiH::P64 = P64[R1 + 15];
           _s3NiI::P64 = P64[R1 + 23];
           _s3NiJ::P64 = P64[R1 + 31];
           _s3NiK::P64 = P64[R1 + 39];
           _s3NiO::P64 = P64[R1 + 47];
           _s3NiP::P64 = P64[R1 + 55];
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = _s3NiH::P64;
           P64[Hp - 40] = _s3NiI::P64;
           P64[Hp - 32] = _s3NiJ::P64;
           P64[Hp - 24] = _s3NiK::P64;
           P64[Hp - 16] = _s3NiO::P64;
           P64[Hp - 8] = _s3NiP::P64;
           P64[Hp] = R2;
           R2 = Hp - 55;
           R1 = _s3NiE::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NiT_info" {
     sat_s3NiT_info:
         const sat_s3NiT_entry;
         const 7;
         const 8;
         const 4294967301;
 },
 sat_s3NiU_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U2Y: // global
           _s3NiQ::P64 = R2;
           _s3NiU::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3U2Z; else goto c3U30;
       c3U30: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3U32; else goto c3U31;
       c3U32: // global
           HpAlloc = 64;
           goto c3U2Z;
       c3U2Z: // global
           R2 = _s3NiQ::P64;
           R1 = _s3NiU::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U31: // global
           _s3Niy::P64 = P64[_s3NiU::P64 + 7];
           _s3NiC::P64 = P64[_s3NiU::P64 + 15];
           _s3NiE::P64 = P64[_s3NiU::P64 + 23];
           _s3NiH::P64 = P64[_s3NiU::P64 + 31];
           _s3NiI::P64 = P64[_s3NiU::P64 + 39];
           _s3NiJ::P64 = P64[_s3NiU::P64 + 47];
           _s3NiK::P64 = P64[_s3NiU::P64 + 55];
           _s3NiO::P64 = P64[_s3NiU::P64 + 63];
           _s3NiP::P64 = P64[_s3NiU::P64 + 71];
           I64[Hp - 56] = sat_s3NiT_info;
           P64[Hp - 48] = _s3NiE::P64;
           P64[Hp - 40] = _s3NiH::P64;
           P64[Hp - 32] = _s3NiI::P64;
           P64[Hp - 24] = _s3NiJ::P64;
           P64[Hp - 16] = _s3NiK::P64;
           P64[Hp - 8] = _s3NiO::P64;
           P64[Hp] = _s3NiP::P64;
           R2 = _s3Niy::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3NiC::P64;
           P64[Sp - 8] = Hp - 55;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NiU_info" {
     sat_s3NiU_info:
         const sat_s3NiU_entry;
         const 9;
         const 8;
         const 4294967301;
 },
 sat_s3NiX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U33: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3U37; else goto c3U38;
       c3U37: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U38: // global
           I64[Sp - 64] = block_c3U2D_info;
           _s3Niy::P64 = P64[R1 + 7];
           _s3NiC::P64 = P64[R1 + 15];
           _s3NiE::P64 = P64[R1 + 23];
           _s3NiH::P64 = P64[R1 + 31];
           _s3NiI::P64 = P64[R1 + 39];
           _s3NiJ::P64 = P64[R1 + 47];
           _s3NiK::P64 = P64[R1 + 55];
           R1 = R2;
           P64[Sp - 56] = _s3Niy::P64;
           P64[Sp - 48] = _s3NiC::P64;
           P64[Sp - 40] = _s3NiE::P64;
           P64[Sp - 32] = _s3NiH::P64;
           P64[Sp - 24] = _s3NiI::P64;
           P64[Sp - 16] = _s3NiJ::P64;
           P64[Sp - 8] = _s3NiK::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u3U3f; else goto c3U2E;
       u3U3f: // global
           call _c3U2D(R1) args: 0, res: 0, upd: 0;
       c3U2E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NiX_info" {
     sat_s3NiX_info:
         const sat_s3NiX_entry;
         const 7;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3U2D() //  [R1]
         { []
         }
     {offset
       c3U2D: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3U3b; else goto c3U3a;
       c3U3b: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U3a: // global
           _s3NiO::P64 = P64[R1 + 7];
           _s3NiP::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_s3NiU_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = _s3NiO::P64;
           P64[Hp] = _s3NiP::P64;
           I64[Sp + 56] = block_c3U34_info;
           R3 = Hp - 71;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 56;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U2D_info" {
     block_c3U2D_info:
         const _c3U2D;
         const 7;
         const 1103806595102;
         const S3NLQ_srt+120;
 },
 _c3U34() //  [R1]
         { []
         }
     {offset
       c3U34: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U3e; else goto c3U3d;
       c3U3e: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U3d: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U34_info" {
     block_c3U34_info:
         const _c3U34;
         const 0;
         const 30;
 },
 sat_s3NiY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U3g: // global
           _s3NiL::P64 = R2;
           _s3NiY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3U3h; else goto c3U3i;
       c3U3i: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3U3k; else goto c3U3j;
       c3U3k: // global
           HpAlloc = 64;
           goto c3U3h;
       c3U3h: // global
           R2 = _s3NiL::P64;
           R1 = _s3NiY::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U3j: // global
           _s3Niw::P64 = P64[_s3NiY::P64 + 7];
           _s3Nix::P64 = P64[_s3NiY::P64 + 15];
           _s3Niy::P64 = P64[_s3NiY::P64 + 23];
           _s3NiC::P64 = P64[_s3NiY::P64 + 31];
           _s3NiE::P64 = P64[_s3NiY::P64 + 39];
           _s3NiH::P64 = P64[_s3NiY::P64 + 47];
           _s3NiI::P64 = P64[_s3NiY::P64 + 55];
           _s3NiJ::P64 = P64[_s3NiY::P64 + 63];
           _s3NiK::P64 = P64[_s3NiY::P64 + 71];
           I64[Hp - 56] = sat_s3NiX_info;
           P64[Hp - 48] = _s3Niy::P64;
           P64[Hp - 40] = _s3NiC::P64;
           P64[Hp - 32] = _s3NiE::P64;
           P64[Hp - 24] = _s3NiH::P64;
           P64[Hp - 16] = _s3NiI::P64;
           P64[Hp - 8] = _s3NiJ::P64;
           P64[Hp] = _s3NiK::P64;
           R4 = _s3NiC::P64;
           R3 = _s3Nix::P64;
           R2 = _s3Niw::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 55;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NiY_info" {
     sat_s3NiY_info:
         const sat_s3NiY_entry;
         const 9;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 sat_s3Nj1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U3l: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3U3p; else goto c3U3q;
       c3U3p: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U3q: // global
           I64[Sp - 48] = block_c3U2o_info;
           _s3Niw::P64 = P64[R1 + 7];
           _s3Nix::P64 = P64[R1 + 15];
           _s3Niy::P64 = P64[R1 + 23];
           _s3NiC::P64 = P64[R1 + 31];
           _s3NiE::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 40] = _s3Niw::P64;
           P64[Sp - 32] = _s3Nix::P64;
           P64[Sp - 24] = _s3Niy::P64;
           P64[Sp - 16] = _s3NiC::P64;
           P64[Sp - 8] = _s3NiE::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3U3x; else goto c3U2p;
       u3U3x: // global
           call _c3U2o(R1) args: 0, res: 0, upd: 0;
       c3U2p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nj1_info" {
     sat_s3Nj1_info:
         const sat_s3Nj1_entry;
         const 5;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3U2o() //  [R1]
         { []
         }
     {offset
       c3U2o: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3U3t; else goto c3U3s;
       c3U3t: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U3s: // global
           _s3NiH::P64 = P64[R1 + 7];
           _s3NiI::P64 = P64[R1 + 15];
           _s3NiJ::P64 = P64[R1 + 23];
           _s3NiK::P64 = P64[R1 + 31];
           I64[Hp - 72] = sat_s3NiY_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _s3NiH::P64;
           P64[Hp - 16] = _s3NiI::P64;
           P64[Hp - 8] = _s3NiJ::P64;
           P64[Hp] = _s3NiK::P64;
           I64[Sp + 40] = block_c3U3m_info;
           R3 = Hp - 71;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 40;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U2o_info" {
     block_c3U2o_info:
         const _c3U2o;
         const 5;
         const 3302829850654;
         const S3NLQ_srt+120;
 },
 _c3U3m() //  [R1]
         { []
         }
     {offset
       c3U3m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U3w; else goto c3U3v;
       c3U3w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U3v: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U3m_info" {
     block_c3U3m_info:
         const _c3U3m;
         const 0;
         const 30;
 },
 sat_s3Nj2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U3y: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3U3C; else goto c3U3B;
       c3U3C: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U3B: // global
           _s3Niw::P64 = P64[R1 + 7];
           _s3Nix::P64 = P64[R1 + 15];
           _s3Niy::P64 = P64[R1 + 23];
           _s3NiC::P64 = P64[R1 + 31];
           _s3NiD::P64 = P64[R1 + 39];
           I64[Hp - 40] = sat_s3Nj1_info;
           P64[Hp - 32] = _s3Niw::P64;
           P64[Hp - 24] = _s3Nix::P64;
           P64[Hp - 16] = _s3Niy::P64;
           P64[Hp - 8] = _s3NiC::P64;
           P64[Hp] = R2;
           R2 = Hp - 39;
           R1 = _s3NiD::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nj2_info" {
     sat_s3Nj2_info:
         const sat_s3Nj2_entry;
         const 5;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3NiB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U3D: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3U3H; else goto c3U3G;
       c3U3H: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U3G: // global
           _s3Nis::P64 = P64[R1 + 7];
           _s3Nit::P64 = P64[R1 + 15];
           _s3Niu::P64 = P64[R1 + 23];
           _s3Niv::P64 = P64[R1 + 31];
           _s3Niw::P64 = P64[R1 + 39];
           _s3Nix::P64 = P64[R1 + 47];
           _s3Niy::P64 = P64[R1 + 55];
           I64[Hp - 96] = ds1_s3NiD_info;
           P64[Hp - 80] = _s3Nis::P64;
           P64[Hp - 72] = _s3Nit::P64;
           P64[Hp - 64] = _s3Niu::P64;
           P64[Hp - 56] = _s3Niv::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s3Nj2_info;
           P64[Hp - 32] = _s3Niw::P64;
           P64[Hp - 24] = _s3Nix::P64;
           P64[Hp - 16] = _s3Niy::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 96;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3NiB_info" {
     p_s3NiB_info:
         const p_s3NiB_entry;
         const 7;
         const 7700876361736;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3Nj3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3U3Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3U3R; else goto c3U3S;
       c3U3R: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3U3S: // global
           I64[Sp - 8] = block_c3U3N_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Nj3_info" {
     lvl2_s3Nj3_info:
         const lvl2_s3Nj3_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3U3N() //  [R1]
         { []
         }
     {offset
       c3U3N: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U3V; else goto c3U3U;
       c3U3V: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U3U: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U3N_info" {
     block_c3U3N_info:
         const _c3U3N;
         const 0;
         const 30;
 },
 sat_s3Njc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3U44: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3U45; else goto c3U46;
       c3U45: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3U46: // global
           I64[Sp - 8] = block_c3U41_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Njc_info" {
     sat_s3Njc_info:
         const sat_s3Njc_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3U41() //  [R1]
         { []
         }
     {offset
       c3U41: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U49; else goto c3U48;
       c3U49: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U48: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U41_info" {
     block_c3U41_info:
         const _c3U41;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3U4a: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3U4e; else goto c3U4d;
       c3U4e: // global
           HpAlloc = 96;
           R1 = GHC.Read.$fRead(,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3U4d: // global
           I64[Hp - 88] = p_s3NiB_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = lvl2_s3Nj3_info;
           P64[Hp - 16] = Hp - 87;
           I64[Hp - 8] = sat_s3Njc_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 6;
           Sp = Sp + 32;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,)1_entry;
         const 0;
         const 9032492317147150;
         const 38654705664;
         const S3NLQ_srt+120;
         const 9;
         const GHC.Read.$fRead(,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.808115519 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3U5F: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 ds1_s3Njn_entry() //  [R1]
         { []
         }
     {offset
       c3U5S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3U5T; else goto c3U5U;
       c3U5T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3U5U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Njn_info" {
     ds1_s3Njn_info:
         const ds1_s3Njn_entry;
         const 5;
         const 4294967311;
         const S3NLQ_srt+200;
 },
 sat_s3NjB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U6n: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3U6r; else goto c3U6s;
       c3U6r: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U6s: // global
           I64[Sp - 48] = block_c3U6k_info;
           _s3Njo::P64 = P64[R1 + 7];
           _s3Njr::P64 = P64[R1 + 15];
           _s3Njs::P64 = P64[R1 + 23];
           _s3Njt::P64 = P64[R1 + 31];
           _s3Nju::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 40] = _s3Njo::P64;
           P64[Sp - 32] = _s3Njr::P64;
           P64[Sp - 24] = _s3Njs::P64;
           P64[Sp - 16] = _s3Njt::P64;
           P64[Sp - 8] = _s3Nju::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3U6w; else goto c3U6l;
       u3U6w: // global
           call _c3U6k(R1) args: 0, res: 0, upd: 0;
       c3U6l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NjB_info" {
     sat_s3NjB_info:
         const sat_s3NjB_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c3U6k() //  [R1]
         { []
         }
     {offset
       c3U6k: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3U6v; else goto c3U6u;
       c3U6v: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U6u: // global
           _s3Njy::P64 = P64[R1 + 7];
           _s3Njz::P64 = P64[R1 + 15];
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = _s3Njy::P64;
           P64[Hp] = _s3Njz::P64;
           R2 = Hp - 47;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U6k_info" {
     block_c3U6k_info:
         const _c3U6k;
         const 5;
         const 30;
 },
 sat_s3NjC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U6x: // global
           _s3Njv::P64 = R2;
           _s3NjC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3U6y; else goto c3U6z;
       c3U6z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3U6B; else goto c3U6A;
       c3U6B: // global
           HpAlloc = 48;
           goto c3U6y;
       c3U6y: // global
           R2 = _s3Njv::P64;
           R1 = _s3NjC::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U6A: // global
           _s3Njh::P64 = P64[_s3NjC::P64 + 7];
           _s3Nji::P64 = P64[_s3NjC::P64 + 15];
           _s3Njm::P64 = P64[_s3NjC::P64 + 23];
           _s3Njo::P64 = P64[_s3NjC::P64 + 31];
           _s3Njr::P64 = P64[_s3NjC::P64 + 39];
           _s3Njs::P64 = P64[_s3NjC::P64 + 47];
           _s3Njt::P64 = P64[_s3NjC::P64 + 55];
           _s3Nju::P64 = P64[_s3NjC::P64 + 63];
           I64[Hp - 40] = sat_s3NjB_info;
           P64[Hp - 32] = _s3Njo::P64;
           P64[Hp - 24] = _s3Njr::P64;
           P64[Hp - 16] = _s3Njs::P64;
           P64[Hp - 8] = _s3Njt::P64;
           P64[Hp] = _s3Nju::P64;
           R4 = _s3Njm::P64;
           R3 = _s3Nji::P64;
           R2 = _s3Njh::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NjC_info" {
     sat_s3NjC_info:
         const sat_s3NjC_entry;
         const 8;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+192;
 },
 sat_s3NjF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U6C: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3U6G; else goto c3U6H;
       c3U6G: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U6H: // global
           I64[Sp - 40] = block_c3U65_info;
           _s3Njh::P64 = P64[R1 + 7];
           _s3Nji::P64 = P64[R1 + 15];
           _s3Njm::P64 = P64[R1 + 23];
           _s3Njo::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3Njh::P64;
           P64[Sp - 24] = _s3Nji::P64;
           P64[Sp - 16] = _s3Njm::P64;
           P64[Sp - 8] = _s3Njo::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3U6O; else goto c3U66;
       u3U6O: // global
           call _c3U65(R1) args: 0, res: 0, upd: 0;
       c3U66: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NjF_info" {
     sat_s3NjF_info:
         const sat_s3NjF_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3U65() //  [R1]
         { []
         }
     {offset
       c3U65: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3U6K; else goto c3U6J;
       c3U6K: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U6J: // global
           _s3Njr::P64 = P64[R1 + 7];
           _s3Njs::P64 = P64[R1 + 15];
           _s3Njt::P64 = P64[R1 + 23];
           _s3Nju::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_s3NjC_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _s3Njr::P64;
           P64[Hp - 16] = _s3Njs::P64;
           P64[Hp - 8] = _s3Njt::P64;
           P64[Hp] = _s3Nju::P64;
           I64[Sp + 32] = block_c3U6D_info;
           R3 = Hp - 63;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U65_info" {
     block_c3U65_info:
         const _c3U65;
         const 4;
         const 3302829850654;
         const S3NLQ_srt+120;
 },
 _c3U6D() //  [R1]
         { []
         }
     {offset
       c3U6D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U6N; else goto c3U6M;
       c3U6N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U6M: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U6D_info" {
     block_c3U6D_info:
         const _c3U6D;
         const 0;
         const 30;
 },
 sat_s3NjG_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U6P: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3U6T; else goto c3U6S;
       c3U6T: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U6S: // global
           _s3Njh::P64 = P64[R1 + 7];
           _s3Nji::P64 = P64[R1 + 15];
           _s3Njm::P64 = P64[R1 + 23];
           _s3Njn::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3NjF_info;
           P64[Hp - 24] = _s3Njh::P64;
           P64[Hp - 16] = _s3Nji::P64;
           P64[Hp - 8] = _s3Njm::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3Njn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NjG_info" {
     sat_s3NjG_info:
         const sat_s3NjG_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3Njl_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U6U: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3U6Y; else goto c3U6X;
       c3U6Y: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U6X: // global
           _s3Njd::P64 = P64[R1 + 7];
           _s3Nje::P64 = P64[R1 + 15];
           _s3Njf::P64 = P64[R1 + 23];
           _s3Njg::P64 = P64[R1 + 31];
           _s3Njh::P64 = P64[R1 + 39];
           _s3Nji::P64 = P64[R1 + 47];
           I64[Hp - 88] = ds1_s3Njn_info;
           P64[Hp - 72] = _s3Njd::P64;
           P64[Hp - 64] = _s3Nje::P64;
           P64[Hp - 56] = _s3Njf::P64;
           P64[Hp - 48] = _s3Njg::P64;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3NjG_info;
           P64[Hp - 24] = _s3Njh::P64;
           P64[Hp - 16] = _s3Nji::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 88;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Njl_info" {
     p_s3Njl_info:
         const p_s3Njl_entry;
         const 6;
         const 7700876361736;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3NjH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3U77: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3U78; else goto c3U79;
       c3U78: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3U79: // global
           I64[Sp - 8] = block_c3U74_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3NjH_info" {
     lvl2_s3NjH_info:
         const lvl2_s3NjH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3U74() //  [R1]
         { []
         }
     {offset
       c3U74: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U7c; else goto c3U7b;
       c3U7c: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U7b: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U74_info" {
     block_c3U74_info:
         const _c3U74;
         const 0;
         const 30;
 },
 sat_s3NjQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3U7l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3U7m; else goto c3U7n;
       c3U7m: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3U7n: // global
           I64[Sp - 8] = block_c3U7i_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NjQ_info" {
     sat_s3NjQ_info:
         const sat_s3NjQ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3U7i() //  [R1]
         { []
         }
     {offset
       c3U7i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U7q; else goto c3U7p;
       c3U7q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U7p: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U7i_info" {
     block_c3U7i_info:
         const _c3U7i;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3U7r: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3U7v; else goto c3U7u;
       c3U7v: // global
           HpAlloc = 88;
           R1 = GHC.Read.$fRead(,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3U7u: // global
           I64[Hp - 80] = p_s3Njl_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           I64[Hp - 24] = lvl2_s3NjH_info;
           P64[Hp - 16] = Hp - 79;
           I64[Hp - 8] = sat_s3NjQ_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,)1_entry;
         const 0;
         const 18039691571888142;
         const 34359738368;
         const S3NLQ_srt+120;
         const 8;
         const GHC.Read.$fRead(,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.847328202 UTC

[section ""data" . GHC.Read.$fRead(,,,,)1_closure" {
     GHC.Read.$fRead(,,,,)1_closure:
         const GHC.Read.$fRead(,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3U8F: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 ds1_s3Nk0_entry() //  [R1]
         { []
         }
     {offset
       c3U8S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3U8T; else goto c3U8U;
       c3U8T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3U8U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Nk0_info" {
     ds1_s3Nk0_info:
         const ds1_s3Nk0_entry;
         const 5;
         const 4294967311;
         const S3NLQ_srt+200;
 },
 sat_s3Nkb_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U9l: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3U9p; else goto c3U9o;
       c3U9p: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U9o: // global
           _s3Nk1::P64 = P64[R1 + 7];
           _s3Nk4::P64 = P64[R1 + 15];
           _s3Nk5::P64 = P64[R1 + 23];
           _s3Nk6::P64 = P64[R1 + 31];
           _s3Nk7::P64 = P64[R1 + 39];
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = _s3Nk4::P64;
           P64[Hp - 24] = _s3Nk5::P64;
           P64[Hp - 16] = _s3Nk6::P64;
           P64[Hp - 8] = _s3Nk7::P64;
           P64[Hp] = R2;
           R2 = Hp - 39;
           R1 = _s3Nk1::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nkb_info" {
     sat_s3Nkb_info:
         const sat_s3Nkb_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s3Nkc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U9q: // global
           _s3Nk8::P64 = R2;
           _s3Nkc::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3U9r; else goto c3U9s;
       c3U9s: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3U9u; else goto c3U9t;
       c3U9u: // global
           HpAlloc = 48;
           goto c3U9r;
       c3U9r: // global
           R2 = _s3Nk8::P64;
           R1 = _s3Nkc::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U9t: // global
           _s3NjV::P64 = P64[_s3Nkc::P64 + 7];
           _s3NjZ::P64 = P64[_s3Nkc::P64 + 15];
           _s3Nk1::P64 = P64[_s3Nkc::P64 + 23];
           _s3Nk4::P64 = P64[_s3Nkc::P64 + 31];
           _s3Nk5::P64 = P64[_s3Nkc::P64 + 39];
           _s3Nk6::P64 = P64[_s3Nkc::P64 + 47];
           _s3Nk7::P64 = P64[_s3Nkc::P64 + 55];
           I64[Hp - 40] = sat_s3Nkb_info;
           P64[Hp - 32] = _s3Nk1::P64;
           P64[Hp - 24] = _s3Nk4::P64;
           P64[Hp - 16] = _s3Nk5::P64;
           P64[Hp - 8] = _s3Nk6::P64;
           P64[Hp] = _s3Nk7::P64;
           R2 = _s3NjV::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3NjZ::P64;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nkc_info" {
     sat_s3Nkc_info:
         const sat_s3Nkc_entry;
         const 7;
         const 8;
         const 4294967301;
 },
 sat_s3Nkf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U9v: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3U9z; else goto c3U9A;
       c3U9z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U9A: // global
           I64[Sp - 32] = block_c3U95_info;
           _s3NjV::P64 = P64[R1 + 7];
           _s3NjZ::P64 = P64[R1 + 15];
           _s3Nk1::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3NjV::P64;
           P64[Sp - 16] = _s3NjZ::P64;
           P64[Sp - 8] = _s3Nk1::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3U9H; else goto c3U96;
       u3U9H: // global
           call _c3U95(R1) args: 0, res: 0, upd: 0;
       c3U96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nkf_info" {
     sat_s3Nkf_info:
         const sat_s3Nkf_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3U95() //  [R1]
         { []
         }
     {offset
       c3U95: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3U9D; else goto c3U9C;
       c3U9D: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U9C: // global
           _s3Nk4::P64 = P64[R1 + 7];
           _s3Nk5::P64 = P64[R1 + 15];
           _s3Nk6::P64 = P64[R1 + 23];
           _s3Nk7::P64 = P64[R1 + 31];
           I64[Hp - 56] = sat_s3Nkc_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _s3Nk4::P64;
           P64[Hp - 16] = _s3Nk5::P64;
           P64[Hp - 8] = _s3Nk6::P64;
           P64[Hp] = _s3Nk7::P64;
           I64[Sp + 24] = block_c3U9w_info;
           R3 = Hp - 55;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U95_info" {
     block_c3U95_info:
         const _c3U95;
         const 3;
         const 1103806595102;
         const S3NLQ_srt+120;
 },
 _c3U9w() //  [R1]
         { []
         }
     {offset
       c3U9w: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3U9G; else goto c3U9F;
       c3U9G: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3U9F: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U9w_info" {
     block_c3U9w_info:
         const _c3U9w;
         const 0;
         const 30;
 },
 sat_s3Nkg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U9I: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3U9M; else goto c3U9L;
       c3U9M: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U9L: // global
           _s3NjV::P64 = P64[R1 + 7];
           _s3NjZ::P64 = P64[R1 + 15];
           _s3Nk0::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3Nkf_info;
           P64[Hp - 16] = _s3NjV::P64;
           P64[Hp - 8] = _s3NjZ::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3Nk0::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nkg_info" {
     sat_s3Nkg_info:
         const sat_s3Nkg_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3NjY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3U9N: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3U9R; else goto c3U9Q;
       c3U9R: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3U9Q: // global
           _s3NjR::P64 = P64[R1 + 7];
           _s3NjS::P64 = P64[R1 + 15];
           _s3NjT::P64 = P64[R1 + 23];
           _s3NjU::P64 = P64[R1 + 31];
           _s3NjV::P64 = P64[R1 + 39];
           I64[Hp - 80] = ds1_s3Nk0_info;
           P64[Hp - 64] = _s3NjR::P64;
           P64[Hp - 56] = _s3NjS::P64;
           P64[Hp - 48] = _s3NjT::P64;
           P64[Hp - 40] = _s3NjU::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3Nkg_info;
           P64[Hp - 16] = _s3NjV::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 80;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3NjY_info" {
     p_s3NjY_info:
         const p_s3NjY_entry;
         const 5;
         const 5501853106184;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3Nkh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Ua0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ua1; else goto c3Ua2;
       c3Ua1: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ua2: // global
           I64[Sp - 8] = block_c3U9X_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Nkh_info" {
     lvl2_s3Nkh_info:
         const lvl2_s3Nkh_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3U9X() //  [R1]
         { []
         }
     {offset
       c3U9X: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ua5; else goto c3Ua4;
       c3Ua5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ua4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3U9X_info" {
     block_c3U9X_info:
         const _c3U9X;
         const 0;
         const 30;
 },
 sat_s3Nkq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Uae: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Uaf; else goto c3Uag;
       c3Uaf: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Uag: // global
           I64[Sp - 8] = block_c3Uab_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nkq_info" {
     sat_s3Nkq_info:
         const sat_s3Nkq_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Uab() //  [R1]
         { []
         }
     {offset
       c3Uab: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Uaj; else goto c3Uai;
       c3Uaj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Uai: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Uab_info" {
     block_c3Uab_info:
         const _c3Uab;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Uak: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Uao; else goto c3Uan;
       c3Uao: // global
           HpAlloc = 80;
           R1 = GHC.Read.$fRead(,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c3Uan: // global
           I64[Hp - 72] = p_s3NjY_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           I64[Hp - 24] = lvl2_s3Nkh_info;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = sat_s3Nkq_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)1_info" {
     GHC.Read.$fRead(,,,,)1_info:
         const GHC.Read.$fRead(,,,,)1_entry;
         const 0;
         const 36051891058114574;
         const 30064771072;
         const S3NLQ_srt+120;
         const 7;
         const GHC.Read.$fRead(,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.879106837 UTC

[section ""data" . GHC.Read.$fRead(,,,)1_closure" {
     GHC.Read.$fRead(,,,)1_closure:
         const GHC.Read.$fRead(,,,)1_info;
         const 0;
 },
 p_s3Nkx_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ubv: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Nkx_info" {
     p_s3Nkx_info:
         const p_s3Nkx_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+200;
 },
 lvl2_s3Nky_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UbG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3UbH; else goto c3UbI;
       c3UbH: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UbI: // global
           I64[Sp - 8] = block_c3UbD_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Nky_info" {
     lvl2_s3Nky_info:
         const lvl2_s3Nky_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3UbD() //  [R1]
         { []
         }
     {offset
       c3UbD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3UbL; else goto c3UbK;
       c3UbL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3UbK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3UbD_info" {
     block_c3UbD_info:
         const _c3UbD;
         const 0;
         const 30;
 },
 sat_s3NkH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UbU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3UbV; else goto c3UbW;
       c3UbV: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UbW: // global
           I64[Sp - 8] = block_c3UbR_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NkH_info" {
     sat_s3NkH_info:
         const sat_s3NkH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3UbR() //  [R1]
         { []
         }
     {offset
       c3UbR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3UbZ; else goto c3UbY;
       c3UbZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3UbY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3UbR_info" {
     block_c3UbR_info:
         const _c3UbR;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Uc0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Uc4; else goto c3Uc3;
       c3Uc4: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3Uc3: // global
           I64[Hp - 64] = p_s3Nkx_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = lvl2_s3Nky_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = sat_s3NkH_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 6;
           Sp = Sp + 8;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)1_info" {
     GHC.Read.$fRead(,,,)1_info:
         const GHC.Read.$fRead(,,,)1_entry;
         const 0;
         const 70390219014158;
         const 25769803802;
         const S3NLQ_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.899491643 UTC

[section ""data" . GHC.Read.$fRead(,,)1_closure" {
     GHC.Read.$fRead(,,)1_closure:
         const GHC.Read.$fRead(,,)1_info;
         const 0;
 },
 ds1_s3NkP_entry() //  [R1]
         { []
         }
     {offset
       c3UcH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UcI; else goto c3UcJ;
       c3UcI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UcJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3NkP_info" {
     ds1_s3NkP_info:
         const ds1_s3NkP_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+192;
 },
 sat_s3NkY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Uda: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Ude; else goto c3Udd;
       c3Ude: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Udd: // global
           _s3NkQ::P64 = P64[R1 + 7];
           _s3NkT::P64 = P64[R1 + 15];
           _s3NkU::P64 = P64[R1 + 23];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = _s3NkT::P64;
           P64[Hp - 8] = _s3NkU::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3NkQ::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NkY_info" {
     sat_s3NkY_info:
         const sat_s3NkY_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3NkZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Udf: // global
           _s3NkV::P64 = R2;
           _s3NkZ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Udg; else goto c3Udh;
       c3Udh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Udj; else goto c3Udi;
       c3Udj: // global
           HpAlloc = 32;
           goto c3Udg;
       c3Udg: // global
           R2 = _s3NkV::P64;
           R1 = _s3NkZ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Udi: // global
           _s3NkK::P64 = P64[_s3NkZ::P64 + 7];
           _s3NkO::P64 = P64[_s3NkZ::P64 + 15];
           _s3NkQ::P64 = P64[_s3NkZ::P64 + 23];
           _s3NkT::P64 = P64[_s3NkZ::P64 + 31];
           _s3NkU::P64 = P64[_s3NkZ::P64 + 39];
           I64[Hp - 24] = sat_s3NkY_info;
           P64[Hp - 16] = _s3NkQ::P64;
           P64[Hp - 8] = _s3NkT::P64;
           P64[Hp] = _s3NkU::P64;
           R2 = _s3NkK::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3NkO::P64;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NkZ_info" {
     sat_s3NkZ_info:
         const sat_s3NkZ_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s3Nl2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Udk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Udo; else goto c3Udp;
       c3Udo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Udp: // global
           I64[Sp - 32] = block_c3UcU_info;
           _s3NkK::P64 = P64[R1 + 7];
           _s3NkO::P64 = P64[R1 + 15];
           _s3NkQ::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3NkK::P64;
           P64[Sp - 16] = _s3NkO::P64;
           P64[Sp - 8] = _s3NkQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Udw; else goto c3UcV;
       u3Udw: // global
           call _c3UcU(R1) args: 0, res: 0, upd: 0;
       c3UcV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nl2_info" {
     sat_s3Nl2_info:
         const sat_s3Nl2_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 _c3UcU() //  [R1]
         { []
         }
     {offset
       c3UcU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Uds; else goto c3Udr;
       c3Uds: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Udr: // global
           _s3NkT::P64 = P64[R1 + 7];
           _s3NkU::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3NkZ_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s3NkT::P64;
           P64[Hp] = _s3NkU::P64;
           I64[Sp + 24] = block_c3Udl_info;
           R3 = Hp - 39;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3UcU_info" {
     block_c3UcU_info:
         const _c3UcU;
         const 3;
         const 1103806595102;
         const S3NLQ_srt+120;
 },
 _c3Udl() //  [R1]
         { []
         }
     {offset
       c3Udl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Udv; else goto c3Udu;
       c3Udv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Udu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Udl_info" {
     block_c3Udl_info:
         const _c3Udl;
         const 0;
         const 30;
 },
 sat_s3Nl3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Udx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3UdB; else goto c3UdA;
       c3UdB: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UdA: // global
           _s3NkK::P64 = P64[R1 + 7];
           _s3NkO::P64 = P64[R1 + 15];
           _s3NkP::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3Nl2_info;
           P64[Hp - 16] = _s3NkK::P64;
           P64[Hp - 8] = _s3NkO::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3NkP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nl3_info" {
     sat_s3Nl3_info:
         const sat_s3Nl3_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 p_s3NkN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UdC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3UdG; else goto c3UdF;
       c3UdG: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UdF: // global
           _s3NkI::P64 = P64[R1 + 7];
           _s3NkJ::P64 = P64[R1 + 15];
           _s3NkK::P64 = P64[R1 + 23];
           I64[Hp - 64] = ds1_s3NkP_info;
           P64[Hp - 48] = _s3NkI::P64;
           P64[Hp - 40] = _s3NkJ::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3Nl3_info;
           P64[Hp - 16] = _s3NkK::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 64;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3NkN_info" {
     p_s3NkN_info:
         const p_s3NkN_entry;
         const 3;
         const 3302829850632;
         const 4294967301;
         const S3NLQ_srt+120;
 },
 lvl2_s3Nl4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UdP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3UdQ; else goto c3UdR;
       c3UdQ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UdR: // global
           I64[Sp - 8] = block_c3UdM_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Nl4_info" {
     lvl2_s3Nl4_info:
         const lvl2_s3Nl4_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3UdM() //  [R1]
         { []
         }
     {offset
       c3UdM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3UdU; else goto c3UdT;
       c3UdU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3UdT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3UdM_info" {
     block_c3UdM_info:
         const _c3UdM;
         const 0;
         const 30;
 },
 sat_s3Nld_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Ue3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ue4; else goto c3Ue5;
       c3Ue4: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ue5: // global
           I64[Sp - 8] = block_c3Ue0_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nld_info" {
     sat_s3Nld_info:
         const sat_s3Nld_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Ue0() //  [R1]
         { []
         }
     {offset
       c3Ue0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ue8; else goto c3Ue7;
       c3Ue8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ue7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ue0_info" {
     block_c3Ue0_info:
         const _c3Ue0;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Ue9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Ued; else goto c3Uec;
       c3Ued: // global
           HpAlloc = 64;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Uec: // global
           I64[Hp - 56] = p_s3NkN_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = lvl2_s3Nl4_info;
           P64[Hp - 16] = Hp - 55;
           I64[Hp - 8] = sat_s3Nld_info;
           P64[Hp] = Hp - 22;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)1_info" {
     GHC.Read.$fRead(,,)1_info:
         const GHC.Read.$fRead(,,)1_entry;
         const 0;
         const 144136083091750926;
         const 21474836505;
         const S3NLQ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.929539813 UTC

[section ""data" . GHC.Read.$fRead(,)1_closure" {
     GHC.Read.$fRead(,)1_closure:
         const GHC.Read.$fRead(,)1_info;
         const 0;
 },
 p_s3Nli_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ufi: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,)2_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Nli_info" {
     p_s3Nli_info:
         const p_s3Nli_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3NLQ_srt+192;
 },
 lvl2_s3Nlj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Uft: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ufu; else goto c3Ufv;
       c3Ufu: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ufv: // global
           I64[Sp - 8] = block_c3Ufq_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Nlj_info" {
     lvl2_s3Nlj_info:
         const lvl2_s3Nlj_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Ufq() //  [R1]
         { []
         }
     {offset
       c3Ufq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ufy; else goto c3Ufx;
       c3Ufy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ufx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ufq_info" {
     block_c3Ufq_info:
         const _c3Ufq;
         const 0;
         const 30;
 },
 sat_s3Nls_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UfH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3UfI; else goto c3UfJ;
       c3UfI: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UfJ: // global
           I64[Sp - 8] = block_c3UfE_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nls_info" {
     sat_s3Nls_info:
         const sat_s3Nls_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3UfE() //  [R1]
         { []
         }
     {offset
       c3UfE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3UfM; else goto c3UfL;
       c3UfM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3UfL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3UfE_info" {
     block_c3UfE_info:
         const _c3UfE;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,)1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3UfN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3UfR; else goto c3UfQ;
       c3UfR: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UfQ: // global
           I64[Hp - 48] = p_s3Nli_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = lvl2_s3Nlj_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = sat_s3Nls_info;
           P64[Hp] = Hp - 22;
           _s3Nlg::P64 = R4;
           R4 = R5;
           R3 = _s3Nlg::P64;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)1_info" {
     GHC.Read.$fRead(,)1_info:
         const GHC.Read.$fRead(,)1_entry;
         const 0;
         const 562988608126990;
         const 17179869208;
         const S3NLQ_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.942279088 UTC

[section ""cstring" . GHC.Read.list2_bytes" {
     GHC.Read.list2_bytes:
         I8[] [91]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.945094451 UTC

[section ""data" . GHC.Read.list1_closure" {
     GHC.Read.list1_closure:
         const GHC.Read.list1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.list1_entry() //  [R1]
         { []
         }
     {offset
       c3Ugo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ugp; else goto c3Ugq;
       c3Ugp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ugq: // global
           (_c3Ugl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Ugl::I64 == 0) goto c3Ugn; else goto c3Ugm;
       c3Ugn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ugm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Ugl::I64;
           R2 = GHC.Read.list2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.list1_info" {
     GHC.Read.list1_info:
         const GHC.Read.list1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.94910415 UTC

[section ""data" . GHC.Read.list_lexeme_closure" {
     GHC.Read.list_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.list1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:30.96686527 UTC

[section ""data" . GHC.Read.list_closure" {
     GHC.Read.list_closure:
         const GHC.Read.list_info;
         const 0;
 },
 ds1_s3Nlu_entry() //  [R1]
         { []
         }
     {offset
       c3UgH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UgI; else goto c3UgJ;
       c3UgI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UgJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Nlu_info" {
     ds1_s3Nlu_info:
         const ds1_s3Nlu_entry;
         const 1;
         const 16;
 },
 lvl2_s3Nlz_entry() //  [R1]
         { []
         }
     {offset
       c3UgX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UgY; else goto c3UgZ;
       c3UgY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UgZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3Nlz_info" {
     lvl2_s3Nlz_info:
         const lvl2_s3Nlz_entry;
         const 1;
         const 16;
 },
 sat_s3NlE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Uhf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Uhj; else goto c3Uhi;
       c3Uhj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Uhi: // global
           _s3Nlx::P64 = P64[R1 + 7];
           _s3NlB::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3NlB::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3Nlx::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NlE_info" {
     sat_s3NlE_info:
         const sat_s3NlE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3NlF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Uhk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Uho; else goto c3Uhn;
       c3Uho: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Uhn: // global
           _s3Nlv::P64 = P64[R1 + 7];
           _s3Nlx::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3NlE_info;
           P64[Hp - 8] = _s3Nlx::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = GHC.Types.True_closure+2;
           R1 = _s3Nlv::P64;
           call $wlistRest_s3Nlv_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NlF_info" {
     sat_s3NlF_info:
         const sat_s3NlF_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3NLQ_srt+336;
 },
 lvl3_s3NlA_entry() //  [R1]
         { []
         }
     {offset
       c3Uhp: // global
           _s3NlA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Uhq; else goto c3Uhr;
       c3Uhr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Uht; else goto c3Uhs;
       c3Uht: // global
           HpAlloc = 24;
           goto c3Uhq;
       c3Uhq: // global
           R1 = _s3NlA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Uhs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NlA::P64;
           _s3Nlu::P64 = P64[_s3NlA::P64 + 16];
           _s3Nlv::P64 = P64[_s3NlA::P64 + 24];
           _s3Nlx::P64 = P64[_s3NlA::P64 + 32];
           I64[Hp - 16] = sat_s3NlF_info;
           P64[Hp - 8] = _s3Nlv::P64;
           P64[Hp] = _s3Nlx::P64;
           R2 = Hp - 15;
           R1 = _s3Nlu::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_s3NlA_info" {
     lvl3_s3NlA_info:
         const lvl3_s3NlA_entry;
         const 3;
         const 12884901903;
         const S3NLQ_srt+336;
 },
 sat_s3Nm0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UhK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3UhL; else goto c3UhM;
       c3UhL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UhM: // global
           I64[Sp - 32] = block_c3UhD_info;
           _s3Nlw::P64 = P64[R1 + 7];
           _s3Nlz::P64 = P64[R1 + 15];
           _s3NlA::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Nlw::P64;
           P64[Sp - 16] = _s3Nlz::P64;
           P64[Sp - 8] = _s3NlA::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Uj6; else goto c3UhE;
       u3Uj6: // global
           call _c3UhD(R1) args: 0, res: 0, upd: 0;
       c3UhE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nm0_info" {
     sat_s3Nm0_info:
         const sat_s3Nm0_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c3UhD() //  [R1]
         { []
         }
     {offset
       c3UhD: // global
           if (R1 & 7 == 3) goto c3UhI; else goto u3UiY;
       c3UhI: // global
           I64[Sp] = block_c3UhS_info;
           R1 = P64[R1 + 5];
           if (R1 & 7 != 0) goto u3Uj4; else goto c3UhU;
       u3Uj4: // global
           call _c3UhS(R1) args: 0, res: 0, upd: 0;
       c3UhU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3UiY: // global
           Sp = Sp + 32;
           call _c3UiS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3UhD_info" {
     block_c3UhD_info:
         const _c3UhD;
         const 3;
         const 30;
 },
 _c3UhS() //  [R1]
         { []
         }
     {offset
       c3UhS: // global
           if (R1 & 7 == 1) goto u3UiZ; else goto c3Ui5;
       u3UiZ: // global
           Sp = Sp + 32;
           call _c3UiS() args: 0, res: 0, upd: 0;
       c3Ui5: // global
           I64[Sp - 8] = block_c3Ui3_info;
           _s3NlP::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NlP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Uj7; else goto c3Ui6;
       u3Uj7: // global
           call _c3Ui3(R1) args: 0, res: 0, upd: 0;
       c3Ui6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3UhS_info" {
     block_c3UhS_info:
         const _c3UhS;
         const 3;
         const 30;
 },
 _c3Ui3() //  [R1]
         { []
         }
     {offset
       c3Ui3: // global
           _s3NlP::P64 = P64[Sp + 8];
           _s3NlS::I64 = I64[R1 + 7];
           if (_s3NlS::I64 != 44) goto u3UiX; else goto c3Uih;
       u3UiX: // global
           if (_s3NlS::I64 != 93) goto u3Uj0; else goto c3UiH;
       u3Uj0: // global
           Sp = Sp + 40;
           call _c3UiS() args: 0, res: 0, upd: 0;
       c3UiH: // global
           I64[Sp + 16] = block_c3UiG_info;
           R1 = _s3NlP::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u3Uja; else goto c3UiI;
       u3Uja: // global
           call _c3UiG(R1) args: 0, res: 0, upd: 0;
       c3UiI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Uih: // global
           I64[Sp + 8] = block_c3Uig_info;
           R1 = _s3NlP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Uj9; else goto c3Uii;
       u3Uj9: // global
           call _c3Uig(R1) args: 0, res: 0, upd: 0;
       c3Uii: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ui3_info" {
     block_c3Ui3_info:
         const _c3Ui3;
         const 4;
         const 30;
 },
 _c3UiG() //  [R1]
         { []
         }
     {offset
       c3UiG: // global
           if (R1 & 7 == 1) goto c3UiO; else goto u3Uj1;
       c3UiO: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Uj1: // global
           Sp = Sp + 24;
           call _c3UiS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3UiG_info" {
     block_c3UiG_info:
         const _c3UiG;
         const 130;
         const 30;
 },
 _c3Uig() //  [R1]
         { []
         }
     {offset
       c3Uig: // global
           if (R1 & 7 == 1) goto c3Uip; else goto u3Uj2;
       c3Uip: // global
           I64[Sp + 16] = block_c3Uim_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u3Ujc; else goto c3Uiq;
       u3Ujc: // global
           call _c3Uim(R1) args: 0, res: 0, upd: 0;
       c3Uiq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Uj2: // global
           Sp = Sp + 32;
           call _c3UiS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Uig_info" {
     block_c3Uig_info:
         const _c3Uig;
         const 131;
         const 30;
 },
 _c3Uim() //  [R1]
         { []
         }
     {offset
       c3Uim: // global
           if (R1 & 7 == 1) goto u3Uj3; else goto c3UiA;
       u3Uj3: // global
           Sp = Sp + 16;
           call _c3UiS() args: 0, res: 0, upd: 0;
       c3UiA: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Uim_info" {
     block_c3Uim_info:
         const _c3Uim;
         const 1;
         const 30;
 },
 _c3UiS() //  []
         { []
         }
     {offset
       c3UiS: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Nm1_entry() //  [R1]
         { []
         }
     {offset
       c3Ujg: // global
           _s3Nm1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ujh; else goto c3Uji;
       c3Uji: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Ujk; else goto c3Ujj;
       c3Ujk: // global
           HpAlloc = 32;
           goto c3Ujh;
       c3Ujh: // global
           R1 = _s3Nm1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ujj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nm1::P64;
           _s3Nlw::P64 = P64[_s3Nm1::P64 + 16];
           _s3Nlz::P64 = P64[_s3Nm1::P64 + 24];
           _s3NlA::P64 = P64[_s3Nm1::P64 + 32];
           I64[Hp - 24] = sat_s3Nm0_info;
           P64[Hp - 16] = _s3Nlw::P64;
           P64[Hp - 8] = _s3Nlz::P64;
           P64[Hp] = _s3NlA::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nm1_info" {
     sat_s3Nm1_info:
         const sat_s3Nm1_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+344;
 },
 sat_s3NlI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ujt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Uju; else goto c3Ujv;
       c3Uju: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ujv: // global
           I64[Sp - 8] = block_c3Ujq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Ujz; else goto c3Ujr;
       u3Ujz: // global
           call _c3Ujq() args: 0, res: 0, upd: 0;
       c3Ujr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NlI_info" {
     sat_s3NlI_info:
         const sat_s3NlI_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _c3Ujq() //  []
         { []
         }
     {offset
       c3Ujq: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ujq_info" {
     block_c3Ujq_info:
         const _c3Ujq;
         const 0;
         const 30;
 },
 lvl116_s3Nly_entry() //  [R1]
         { []
         }
     {offset
       c3UjB: // global
           _s3Nly::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3UjC; else goto c3UjD;
       c3UjD: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3UjF; else goto c3UjE;
       c3UjF: // global
           HpAlloc = 136;
           goto c3UjC;
       c3UjC: // global
           R1 = _s3Nly::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UjE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nly::P64;
           _s3Nlu::P64 = P64[_s3Nly::P64 + 16];
           _s3Nlv::P64 = P64[_s3Nly::P64 + 24];
           _s3Nlw::P64 = P64[_s3Nly::P64 + 32];
           _s3Nlx::P64 = P64[_s3Nly::P64 + 40];
           I64[Hp - 128] = lvl2_s3Nlz_info;
           P64[Hp - 112] = _s3Nlx::P64;
           I64[Hp - 104] = lvl3_s3NlA_info;
           P64[Hp - 88] = _s3Nlu::P64;
           P64[Hp - 80] = _s3Nlv::P64;
           P64[Hp - 72] = _s3Nlx::P64;
           I64[Hp - 64] = sat_s3Nm1_info;
           P64[Hp - 48] = _s3Nlw::P64;
           P64[Hp - 40] = Hp - 128;
           P64[Hp - 32] = Hp - 104;
           I64[Hp - 24] = sat_s3NlI_info;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Nly_info" {
     lvl116_s3Nly_info:
         const lvl116_s3Nly_entry;
         const 4;
         const 12884901903;
         const S3NLQ_srt+336;
 },
 k_s3Nm2_entry() //  [R1]
         { []
         }
     {offset
       c3UjL: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Nm2_info" {
     k_s3Nm2_info:
         const k_s3Nm2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Nm5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UjT: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nm5_info" {
     sat_s3Nm5_info:
         const sat_s3Nm5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 $wlistRest_s3Nlv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UjX: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Uk1; else goto c3Uk0;
       c3Uk1: // global
           HpAlloc = 96;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Uk0: // global
           _s3Nlu::P64 = P64[R1 + 6];
           I64[Hp - 88] = lvl116_s3Nly_info;
           P64[Hp - 72] = _s3Nlu::P64;
           P64[Hp - 64] = R1;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3Nm2_info;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = sat_s3Nm5_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlistRest_s3Nlv_info" {
     $wlistRest_s3Nlv_info:
         const $wlistRest_s3Nlv_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const S3NLQ_srt+336;
 },
 sat_s3Nmd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ukr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Ukv; else goto c3Uku;
       c3Ukv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Uku: // global
           _s3Nm7::P64 = P64[R1 + 7];
           _s3Nma::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3Nma::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3Nm7::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nmd_info" {
     sat_s3Nmd_info:
         const sat_s3Nmd_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3Nme_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ukw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3UkA; else goto c3Ukz;
       c3UkA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ukz: // global
           _s3Nlv::P64 = P64[R1 + 7];
           _s3Nm7::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3Nmd_info;
           P64[Hp - 8] = _s3Nm7::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = GHC.Types.True_closure+2;
           R1 = _s3Nlv::P64;
           call $wlistRest_s3Nlv_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nme_info" {
     sat_s3Nme_info:
         const sat_s3Nme_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3NLQ_srt+336;
 },
 sat_s3Nmf_entry() //  [R1]
         { []
         }
     {offset
       c3UkB: // global
           _s3Nmf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3UkC; else goto c3UkD;
       c3UkD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3UkF; else goto c3UkE;
       c3UkF: // global
           HpAlloc = 24;
           goto c3UkC;
       c3UkC: // global
           R1 = _s3Nmf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UkE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nmf::P64;
           _s3Nlu::P64 = P64[_s3Nmf::P64 + 16];
           _s3Nlv::P64 = P64[_s3Nmf::P64 + 24];
           _s3Nm7::P64 = P64[_s3Nmf::P64 + 32];
           I64[Hp - 16] = sat_s3Nme_info;
           P64[Hp - 8] = _s3Nlv::P64;
           P64[Hp] = _s3Nm7::P64;
           R2 = Hp - 15;
           R1 = _s3Nlu::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nmf_info" {
     sat_s3Nmf_info:
         const sat_s3Nmf_entry;
         const 3;
         const 12884901903;
         const S3NLQ_srt+336;
 },
 sat_s3Nmg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UkI: // global
           _s3Nm8::P64 = R2;
           _s3Nmg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3UkJ; else goto c3UkK;
       c3UkK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3UkM; else goto c3UkL;
       c3UkM: // global
           HpAlloc = 40;
           goto c3UkJ;
       c3UkJ: // global
           R2 = _s3Nm8::P64;
           R1 = _s3Nmg::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UkL: // global
           _s3Nlu::P64 = P64[_s3Nmg::P64 + 7];
           _s3Nlv::P64 = P64[_s3Nmg::P64 + 15];
           _s3Nm7::P64 = P64[_s3Nmg::P64 + 23];
           I64[Hp - 32] = sat_s3Nmf_info;
           P64[Hp - 16] = _s3Nlu::P64;
           P64[Hp - 8] = _s3Nlv::P64;
           P64[Hp] = _s3Nm7::P64;
           I64[Sp - 16] = block_c3UkG_info;
           R3 = _s3Nm7::P64;
           R2 = GHC.Types.False_closure+1;
           R1 = _s3Nlv::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call $wlistRest_s3Nlv_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nmg_info" {
     sat_s3Nmg_info:
         const sat_s3Nmg_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S3NLQ_srt+336;
 },
 _c3UkG() //  [R1]
         { []
         }
     {offset
       c3UkG: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3UkG_info" {
     block_c3UkG_info:
         const _c3UkG;
         const 1;
         const 4294967326;
         const S3NLQ_srt+336;
 },
 sat_s3Nmj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UkT: // global
           _s3Nm7::P64 = R3;
           _s3Nm6::P64 = R2;
           _s3Nmj::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3UkU; else goto c3UkV;
       c3UkV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3UkX; else goto c3UkW;
       c3UkX: // global
           HpAlloc = 32;
           goto c3UkU;
       c3UkU: // global
           R3 = _s3Nm7::P64;
           R2 = _s3Nm6::P64;
           R1 = _s3Nmj::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UkW: // global
           _s3Nlu::P64 = P64[_s3Nmj::P64 + 6];
           _s3Nlv::P64 = P64[_s3Nmj::P64 + 14];
           I64[Hp - 24] = sat_s3Nmg_info;
           P64[Hp - 16] = _s3Nlu::P64;
           P64[Hp - 8] = _s3Nlv::P64;
           P64[Hp] = _s3Nm7::P64;
           I64[Sp - 8] = block_c3UkQ_info;
           R3 = Hp - 23;
           R2 = GHC.Read.list_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nmj_info" {
     sat_s3Nmj_info:
         const sat_s3Nmj_entry;
         const 2;
         const 4035225270418931723;
         const 8589934607;
         const S3NLQ_srt+120;
 },
 _c3UkQ() //  [R1]
         { []
         }
     {offset
       c3UkQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ul0; else goto c3UkZ;
       c3Ul0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3UkZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3UkQ_info" {
     block_c3UkQ_info:
         const _c3UkQ;
         const 0;
         const 30;
 },
 GHC.Read.list_entry() //  [R2]
         { []
         }
     {offset
       c3Ul1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Ul5; else goto c3Ul4;
       c3Ul5: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = GHC.Read.list_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ul4: // global
           I64[Hp - 56] = ds1_s3Nlu_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = $wlistRest_s3Nlv_info;
           _c3UgD::P64 = Hp - 56;
           P64[Hp - 24] = _c3UgD::P64;
           I64[Hp - 16] = sat_s3Nmj_info;
           P64[Hp - 8] = _c3UgD::P64;
           P64[Hp] = Hp - 30;
           R2 = Hp - 14;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.list_info" {
     GHC.Read.list_info:
         const GHC.Read.list_entry;
         const 0;
         const 8646928881032364046;
         const 4294967301;
         const S3NLQ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.018908435 UTC

[section ""data" . GHC.Read.readListPrecDefault_closure" {
     GHC.Read.readListPrecDefault_closure:
         const GHC.Read.readListPrecDefault_info;
         const 0;
 },
 sat_s3Nml_entry() //  [R1]
         { []
         }
     {offset
       c3Unj: // global
           R2 = P64[R1 + 16];
           call GHC.Read.readPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nml_info" {
     sat_s3Nml_info:
         const sat_s3Nml_entry;
         const 1;
         const 16;
 },
 GHC.Read.readListPrecDefault_entry() //  [R2]
         { []
         }
     {offset
       c3Unm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Unq; else goto c3Unp;
       c3Unq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.readListPrecDefault_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Unp: // global
           I64[Hp - 16] = sat_s3Nml_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readListPrecDefault_info" {
     GHC.Read.readListPrecDefault_info:
         const GHC.Read.readListPrecDefault_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3NLQ_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.026503891 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3Unz: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2,
                                                                     R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s3NmB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UnI: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3UnJ; else goto c3UnK;
       c3UnJ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UnK: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = P64[R1 + 118];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NmB_info" {
     sat_s3NmB_info:
         const sat_s3NmB_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+224;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       c3UnL: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3UnP; else goto c3UnO;
       c3UnP: // global
           HpAlloc = 128;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3UnO: // global
           I64[Hp - 120] = sat_s3NmB_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R2 = Hp - 118;
           Sp = Sp + 80;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 2814754062073870;
         const 64424509440;
         const S3NLQ_srt+224;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.036188032 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3Uol: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 96, res: 0, upd: 8;
     }
 },
 sat_s3NmS_entry() //  [R1]
         { []
         }
     {offset
       c3Uot: // global
           if ((Sp + -112) < SpLim) (likely: False) goto c3Uou; else goto c3Uov;
       c3Uou: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Uov: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 112] = P64[R1 + 56];
           P64[Sp - 104] = P64[R1 + 64];
           P64[Sp - 96] = P64[R1 + 72];
           P64[Sp - 88] = P64[R1 + 80];
           P64[Sp - 80] = P64[R1 + 88];
           P64[Sp - 72] = P64[R1 + 96];
           P64[Sp - 64] = P64[R1 + 104];
           P64[Sp - 56] = P64[R1 + 112];
           P64[Sp - 48] = P64[R1 + 120];
           P64[Sp - 40] = P64[R1 + 128];
           P64[Sp - 32] = P64[R1 + 136];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 112;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 120, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NmS_info" {
     sat_s3NmS_info:
         const sat_s3NmS_entry;
         const 16;
         const 4294967311;
         const S3NLQ_srt+224;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       c3Uow: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3UoA; else goto c3Uoz;
       c3UoA: // global
           HpAlloc = 144;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c3Uoz: // global
           I64[Hp - 136] = sat_s3NmS_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           R2 = Hp - 136;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 4503603922337806;
         const 68719476736;
         const S3NLQ_srt+224;
         const 16;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.046986136 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3Up8: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s3Nn8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Upl: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3Upm; else goto c3Upn;
       c3Upm: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Upn: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = P64[R1 + 118];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nn8_info" {
     sat_s3Nn8_info:
         const sat_s3Nn8_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+224;
 },
 sat_s3Nn9_entry() //  [R1]
         { []
         }
     {offset
       c3Upo: // global
           _s3Nn9::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Upp; else goto c3Upq;
       c3Upq: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3Ups; else goto c3Upr;
       c3Ups: // global
           HpAlloc = 128;
           goto c3Upp;
       c3Upp: // global
           R1 = _s3Nn9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Upr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nn9::P64;
           _s3NmT::P64 = P64[_s3Nn9::P64 + 16];
           _s3NmU::P64 = P64[_s3Nn9::P64 + 24];
           _s3NmV::P64 = P64[_s3Nn9::P64 + 32];
           _s3NmW::P64 = P64[_s3Nn9::P64 + 40];
           _s3NmX::P64 = P64[_s3Nn9::P64 + 48];
           _s3NmY::P64 = P64[_s3Nn9::P64 + 56];
           _s3NmZ::P64 = P64[_s3Nn9::P64 + 64];
           _s3Nn0::P64 = P64[_s3Nn9::P64 + 72];
           _s3Nn1::P64 = P64[_s3Nn9::P64 + 80];
           _s3Nn2::P64 = P64[_s3Nn9::P64 + 88];
           _s3Nn3::P64 = P64[_s3Nn9::P64 + 96];
           _s3Nn4::P64 = P64[_s3Nn9::P64 + 104];
           _s3Nn5::P64 = P64[_s3Nn9::P64 + 112];
           _s3Nn6::P64 = P64[_s3Nn9::P64 + 120];
           _s3Nn7::P64 = P64[_s3Nn9::P64 + 128];
           I64[Hp - 120] = sat_s3Nn8_info;
           P64[Hp - 112] = _s3NmT::P64;
           P64[Hp - 104] = _s3NmU::P64;
           P64[Hp - 96] = _s3NmV::P64;
           P64[Hp - 88] = _s3NmW::P64;
           P64[Hp - 80] = _s3NmX::P64;
           P64[Hp - 72] = _s3NmY::P64;
           P64[Hp - 64] = _s3NmZ::P64;
           P64[Hp - 56] = _s3Nn0::P64;
           P64[Hp - 48] = _s3Nn1::P64;
           P64[Hp - 40] = _s3Nn2::P64;
           P64[Hp - 32] = _s3Nn3::P64;
           P64[Hp - 24] = _s3Nn4::P64;
           P64[Hp - 16] = _s3Nn5::P64;
           P64[Hp - 8] = _s3Nn6::P64;
           P64[Hp] = _s3Nn7::P64;
           R2 = Hp - 118;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nn9_info" {
     sat_s3Nn9_info:
         const sat_s3Nn9_entry;
         const 15;
         const 562954248388623;
         const S3NLQ_srt+224;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c3Upt: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3Upx; else goto c3Upw;
       c3Upx: // global
           HpAlloc = 136;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3Upw: // global
           I64[Hp - 128] = sat_s3Nn9_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R2 = Hp - 128;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 80;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 9570153503129614;
         const 64424509440;
         const S3NLQ_srt+224;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.062684521 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3Uq7: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s3Nns_entry() //  [R1]
         { []
         }
     {offset
       c3Uqf: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3Uqg; else goto c3Uqh;
       c3Uqg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Uqh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = P64[R1 + 128];
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nns_info" {
     sat_s3Nns_info:
         const sat_s3Nns_entry;
         const 15;
         const 4294967311;
         const S3NLQ_srt+376;
 },
 sat_s3Nnr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Uqn: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3Uqo; else goto c3Uqp;
       c3Uqo: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Uqp: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = P64[R1 + 118];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nnr_info" {
     sat_s3Nnr_info:
         const sat_s3Nnr_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+224;
 },
 sat_s3Nnq_entry() //  [R1]
         { []
         }
     {offset
       c3Uqu: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3Uqv; else goto c3Uqw;
       c3Uqv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Uqw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = P64[R1 + 128];
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nnq_info" {
     sat_s3Nnq_info:
         const sat_s3Nnq_entry;
         const 15;
         const 4294967311;
         const S3NLQ_srt+392;
 },
 sat_s3Nnp_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UqC: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3UqD; else goto c3UqE;
       c3UqD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UqE: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 88] = P64[R1 + 47];
           P64[Sp - 80] = P64[R1 + 55];
           P64[Sp - 72] = P64[R1 + 63];
           P64[Sp - 64] = P64[R1 + 71];
           P64[Sp - 56] = P64[R1 + 79];
           P64[Sp - 48] = P64[R1 + 87];
           P64[Sp - 40] = P64[R1 + 95];
           P64[Sp - 32] = P64[R1 + 103];
           P64[Sp - 24] = P64[R1 + 111];
           P64[Sp - 16] = P64[R1 + 119];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nnp_info" {
     sat_s3Nnp_info:
         const sat_s3Nnp_entry;
         const 15;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+384;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UqG: // global
           Hp = Hp + 568;
           if (Hp > HpLim) (likely: False) goto c3UqK; else goto c3UqJ;
       c3UqK: // global
           HpAlloc = 568;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3UqJ: // global
           I64[Hp - 560] = sat_s3Nns_info;
           P64[Hp - 544] = R2;
           P64[Hp - 536] = R3;
           P64[Hp - 528] = R4;
           P64[Hp - 520] = R5;
           P64[Hp - 512] = R6;
           _s3Nnf::P64 = P64[Sp];
           P64[Hp - 504] = _s3Nnf::P64;
           _s3Nng::P64 = P64[Sp + 8];
           P64[Hp - 496] = _s3Nng::P64;
           _s3Nnh::P64 = P64[Sp + 16];
           P64[Hp - 488] = _s3Nnh::P64;
           _s3Nni::P64 = P64[Sp + 24];
           P64[Hp - 480] = _s3Nni::P64;
           _s3Nnj::P64 = P64[Sp + 32];
           P64[Hp - 472] = _s3Nnj::P64;
           _s3Nnk::P64 = P64[Sp + 40];
           P64[Hp - 464] = _s3Nnk::P64;
           _s3Nnl::P64 = P64[Sp + 48];
           P64[Hp - 456] = _s3Nnl::P64;
           _s3Nnm::P64 = P64[Sp + 56];
           P64[Hp - 448] = _s3Nnm::P64;
           _s3Nnn::P64 = P64[Sp + 64];
           P64[Hp - 440] = _s3Nnn::P64;
           _s3Nno::P64 = P64[Sp + 72];
           P64[Hp - 432] = _s3Nno::P64;
           I64[Hp - 424] = sat_s3Nnr_info;
           P64[Hp - 416] = R2;
           P64[Hp - 408] = R3;
           P64[Hp - 400] = R4;
           P64[Hp - 392] = R5;
           P64[Hp - 384] = R6;
           P64[Hp - 376] = _s3Nnf::P64;
           P64[Hp - 368] = _s3Nng::P64;
           P64[Hp - 360] = _s3Nnh::P64;
           P64[Hp - 352] = _s3Nni::P64;
           P64[Hp - 344] = _s3Nnj::P64;
           P64[Hp - 336] = _s3Nnk::P64;
           P64[Hp - 328] = _s3Nnl::P64;
           P64[Hp - 320] = _s3Nnm::P64;
           P64[Hp - 312] = _s3Nnn::P64;
           P64[Hp - 304] = _s3Nno::P64;
           I64[Hp - 296] = sat_s3Nnq_info;
           P64[Hp - 280] = R2;
           P64[Hp - 272] = R3;
           P64[Hp - 264] = R4;
           P64[Hp - 256] = R5;
           P64[Hp - 248] = R6;
           P64[Hp - 240] = _s3Nnf::P64;
           P64[Hp - 232] = _s3Nng::P64;
           P64[Hp - 224] = _s3Nnh::P64;
           P64[Hp - 216] = _s3Nni::P64;
           P64[Hp - 208] = _s3Nnj::P64;
           P64[Hp - 200] = _s3Nnk::P64;
           P64[Hp - 192] = _s3Nnl::P64;
           P64[Hp - 184] = _s3Nnm::P64;
           P64[Hp - 176] = _s3Nnn::P64;
           P64[Hp - 168] = _s3Nno::P64;
           I64[Hp - 160] = sat_s3Nnp_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           P64[Hp - 120] = R6;
           P64[Hp - 112] = _s3Nnf::P64;
           P64[Hp - 104] = _s3Nng::P64;
           P64[Hp - 96] = _s3Nnh::P64;
           P64[Hp - 88] = _s3Nni::P64;
           P64[Hp - 80] = _s3Nnj::P64;
           P64[Hp - 72] = _s3Nnk::P64;
           P64[Hp - 64] = _s3Nnl::P64;
           P64[Hp - 56] = _s3Nnm::P64;
           P64[Hp - 48] = _s3Nnn::P64;
           P64[Hp - 40] = _s3Nno::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 159;
           P64[Hp - 16] = Hp - 296;
           P64[Hp - 8] = Hp - 422;
           P64[Hp] = Hp - 560;
           R1 = Hp - 31;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_entry;
         const 0;
         const 33777001500246030;
         const 64424509440;
         const S3NLQ_srt+224;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.080787677 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UrR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2,
                                                                    R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s3NnH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Us0: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3Us1; else goto c3Us2;
       c3Us1: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Us2: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = P64[R1 + 110];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NnH_info" {
     sat_s3NnH_info:
         const sat_s3NnH_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+232;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       c3Us3: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3Us7; else goto c3Us6;
       c3Us7: // global
           HpAlloc = 120;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3Us6: // global
           I64[Hp - 112] = sat_s3NnH_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R2 = Hp - 110;
           Sp = Sp + 72;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 18295877781159950;
         const 60129542144;
         const S3NLQ_srt+232;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.090734924 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UsB: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s3NnX_entry() //  [R1]
         { []
         }
     {offset
       c3UsJ: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c3UsK; else goto c3UsL;
       c3UsK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UsL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 104] = P64[R1 + 56];
           P64[Sp - 96] = P64[R1 + 64];
           P64[Sp - 88] = P64[R1 + 72];
           P64[Sp - 80] = P64[R1 + 80];
           P64[Sp - 72] = P64[R1 + 88];
           P64[Sp - 64] = P64[R1 + 96];
           P64[Sp - 56] = P64[R1 + 104];
           P64[Sp - 48] = P64[R1 + 112];
           P64[Sp - 40] = P64[R1 + 120];
           P64[Sp - 32] = P64[R1 + 128];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 104;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 112, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NnX_info" {
     sat_s3NnX_info:
         const sat_s3NnX_entry;
         const 15;
         const 4294967311;
         const S3NLQ_srt+232;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c3UsM: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3UsQ; else goto c3UsP;
       c3UsQ: // global
           HpAlloc = 136;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3UsP: // global
           I64[Hp - 128] = sat_s3NnX_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R2 = Hp - 128;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 80;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 36028801313931278;
         const 64424509440;
         const S3NLQ_srt+232;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.101728255 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3Utm: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s3Noc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Utz: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3UtA; else goto c3UtB;
       c3UtA: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UtB: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = P64[R1 + 110];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Noc_info" {
     sat_s3Noc_info:
         const sat_s3Noc_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+232;
 },
 sat_s3Nod_entry() //  [R1]
         { []
         }
     {offset
       c3UtC: // global
           _s3Nod::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UtD; else goto c3UtE;
       c3UtE: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3UtG; else goto c3UtF;
       c3UtG: // global
           HpAlloc = 120;
           goto c3UtD;
       c3UtD: // global
           R1 = _s3Nod::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UtF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nod::P64;
           _s3NnY::P64 = P64[_s3Nod::P64 + 16];
           _s3NnZ::P64 = P64[_s3Nod::P64 + 24];
           _s3No0::P64 = P64[_s3Nod::P64 + 32];
           _s3No1::P64 = P64[_s3Nod::P64 + 40];
           _s3No2::P64 = P64[_s3Nod::P64 + 48];
           _s3No3::P64 = P64[_s3Nod::P64 + 56];
           _s3No4::P64 = P64[_s3Nod::P64 + 64];
           _s3No5::P64 = P64[_s3Nod::P64 + 72];
           _s3No6::P64 = P64[_s3Nod::P64 + 80];
           _s3No7::P64 = P64[_s3Nod::P64 + 88];
           _s3No8::P64 = P64[_s3Nod::P64 + 96];
           _s3No9::P64 = P64[_s3Nod::P64 + 104];
           _s3Noa::P64 = P64[_s3Nod::P64 + 112];
           _s3Nob::P64 = P64[_s3Nod::P64 + 120];
           I64[Hp - 112] = sat_s3Noc_info;
           P64[Hp - 104] = _s3NnY::P64;
           P64[Hp - 96] = _s3NnZ::P64;
           P64[Hp - 88] = _s3No0::P64;
           P64[Hp - 80] = _s3No1::P64;
           P64[Hp - 72] = _s3No2::P64;
           P64[Hp - 64] = _s3No3::P64;
           P64[Hp - 56] = _s3No4::P64;
           P64[Hp - 48] = _s3No5::P64;
           P64[Hp - 40] = _s3No6::P64;
           P64[Hp - 32] = _s3No7::P64;
           P64[Hp - 24] = _s3No8::P64;
           P64[Hp - 16] = _s3No9::P64;
           P64[Hp - 8] = _s3Noa::P64;
           P64[Hp] = _s3Nob::P64;
           R2 = Hp - 110;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nod_info" {
     sat_s3Nod_info:
         const sat_s3Nod_entry;
         const 14;
         const 281479271677967;
         const S3NLQ_srt+232;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c3UtH: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3UtL; else goto c3UtK;
       c3UtL: // global
           HpAlloc = 128;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3UtK: // global
           I64[Hp - 120] = sat_s3Nod_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R2 = Hp - 120;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 72;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 72339073309605902;
         const 60129542144;
         const S3NLQ_srt+232;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.117197006 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3Uuj: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s3Nov_entry() //  [R1]
         { []
         }
     {offset
       c3Uur: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3Uus; else goto c3Uut;
       c3Uus: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Uut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = P64[R1 + 120];
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nov_info" {
     sat_s3Nov_info:
         const sat_s3Nov_entry;
         const 14;
         const 4294967311;
         const S3NLQ_srt+408;
 },
 sat_s3Nou_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Uuz: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3UuA; else goto c3UuB;
       c3UuA: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UuB: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = P64[R1 + 110];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nou_info" {
     sat_s3Nou_info:
         const sat_s3Nou_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+232;
 },
 sat_s3Not_entry() //  [R1]
         { []
         }
     {offset
       c3UuG: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3UuH; else goto c3UuI;
       c3UuH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UuI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = P64[R1 + 120];
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Not_info" {
     sat_s3Not_info:
         const sat_s3Not_entry;
         const 14;
         const 4294967311;
         const S3NLQ_srt+424;
 },
 sat_s3Nos_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UuO: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3UuP; else goto c3UuQ;
       c3UuP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UuQ: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 80] = P64[R1 + 47];
           P64[Sp - 72] = P64[R1 + 55];
           P64[Sp - 64] = P64[R1 + 63];
           P64[Sp - 56] = P64[R1 + 71];
           P64[Sp - 48] = P64[R1 + 79];
           P64[Sp - 40] = P64[R1 + 87];
           P64[Sp - 32] = P64[R1 + 95];
           P64[Sp - 24] = P64[R1 + 103];
           P64[Sp - 16] = P64[R1 + 111];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nos_info" {
     sat_s3Nos_info:
         const sat_s3Nos_entry;
         const 14;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+416;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UuS: // global
           Hp = Hp + 536;
           if (Hp > HpLim) (likely: False) goto c3UuW; else goto c3UuV;
       c3UuW: // global
           HpAlloc = 536;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3UuV: // global
           I64[Hp - 528] = sat_s3Nov_info;
           P64[Hp - 512] = R2;
           P64[Hp - 504] = R3;
           P64[Hp - 496] = R4;
           P64[Hp - 488] = R5;
           P64[Hp - 480] = R6;
           _s3Noj::P64 = P64[Sp];
           P64[Hp - 472] = _s3Noj::P64;
           _s3Nok::P64 = P64[Sp + 8];
           P64[Hp - 464] = _s3Nok::P64;
           _s3Nol::P64 = P64[Sp + 16];
           P64[Hp - 456] = _s3Nol::P64;
           _s3Nom::P64 = P64[Sp + 24];
           P64[Hp - 448] = _s3Nom::P64;
           _s3Non::P64 = P64[Sp + 32];
           P64[Hp - 440] = _s3Non::P64;
           _s3Noo::P64 = P64[Sp + 40];
           P64[Hp - 432] = _s3Noo::P64;
           _s3Nop::P64 = P64[Sp + 48];
           P64[Hp - 424] = _s3Nop::P64;
           _s3Noq::P64 = P64[Sp + 56];
           P64[Hp - 416] = _s3Noq::P64;
           _s3Nor::P64 = P64[Sp + 64];
           P64[Hp - 408] = _s3Nor::P64;
           I64[Hp - 400] = sat_s3Nou_info;
           P64[Hp - 392] = R2;
           P64[Hp - 384] = R3;
           P64[Hp - 376] = R4;
           P64[Hp - 368] = R5;
           P64[Hp - 360] = R6;
           P64[Hp - 352] = _s3Noj::P64;
           P64[Hp - 344] = _s3Nok::P64;
           P64[Hp - 336] = _s3Nol::P64;
           P64[Hp - 328] = _s3Nom::P64;
           P64[Hp - 320] = _s3Non::P64;
           P64[Hp - 312] = _s3Noo::P64;
           P64[Hp - 304] = _s3Nop::P64;
           P64[Hp - 296] = _s3Noq::P64;
           P64[Hp - 288] = _s3Nor::P64;
           I64[Hp - 280] = sat_s3Not_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           P64[Hp - 248] = R4;
           P64[Hp - 240] = R5;
           P64[Hp - 232] = R6;
           P64[Hp - 224] = _s3Noj::P64;
           P64[Hp - 216] = _s3Nok::P64;
           P64[Hp - 208] = _s3Nol::P64;
           P64[Hp - 200] = _s3Nom::P64;
           P64[Hp - 192] = _s3Non::P64;
           P64[Hp - 184] = _s3Noo::P64;
           P64[Hp - 176] = _s3Nop::P64;
           P64[Hp - 168] = _s3Noq::P64;
           P64[Hp - 160] = _s3Nor::P64;
           I64[Hp - 152] = sat_s3Nos_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           P64[Hp - 104] = _s3Noj::P64;
           P64[Hp - 96] = _s3Nok::P64;
           P64[Hp - 88] = _s3Nol::P64;
           P64[Hp - 80] = _s3Nom::P64;
           P64[Hp - 72] = _s3Non::P64;
           P64[Hp - 64] = _s3Noo::P64;
           P64[Hp - 56] = _s3Nop::P64;
           P64[Hp - 48] = _s3Noq::P64;
           P64[Hp - 40] = _s3Nor::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 151;
           P64[Hp - 16] = Hp - 280;
           P64[Hp - 8] = Hp - 398;
           P64[Hp] = Hp - 528;
           R1 = Hp - 31;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_entry;
         const 0;
         const 270215981937197070;
         const 60129542144;
         const S3NLQ_srt+232;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.134737244 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UvZ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2,
                                                                   R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s3NoJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Uw8: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3Uw9; else goto c3Uwa;
       c3Uw9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Uwa: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = P64[R1 + 102];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NoJ_info" {
     sat_s3NoJ_info:
         const sat_s3NoJ_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+240;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       c3Uwb: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3Uwf; else goto c3Uwe;
       c3Uwf: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3Uwe: // global
           I64[Hp - 104] = sat_s3NoJ_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R2 = Hp - 102;
           Sp = Sp + 64;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 144255929859178510;
         const 55834574848;
         const S3NLQ_srt+240;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.143769763 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UwH: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s3NoY_entry() //  [R1]
         { []
         }
     {offset
       c3UwP: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3UwQ; else goto c3UwR;
       c3UwQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UwR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NoY_info" {
     sat_s3NoY_info:
         const sat_s3NoY_entry;
         const 14;
         const 4294967311;
         const S3NLQ_srt+240;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c3UwS: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3UwW; else goto c3UwV;
       c3UwW: // global
           HpAlloc = 128;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3UwV: // global
           I64[Hp - 120] = sat_s3NoY_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R2 = Hp - 120;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 72;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 288230380446679054;
         const 60129542144;
         const S3NLQ_srt+240;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.155051842 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3Uxq: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s3Npc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UxD: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3UxE; else goto c3UxF;
       c3UxE: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UxF: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = P64[R1 + 102];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Npc_info" {
     sat_s3Npc_info:
         const sat_s3Npc_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+240;
 },
 sat_s3Npd_entry() //  [R1]
         { []
         }
     {offset
       c3UxG: // global
           _s3Npd::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UxH; else goto c3UxI;
       c3UxI: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3UxK; else goto c3UxJ;
       c3UxK: // global
           HpAlloc = 112;
           goto c3UxH;
       c3UxH: // global
           R1 = _s3Npd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UxJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Npd::P64;
           _s3NoZ::P64 = P64[_s3Npd::P64 + 16];
           _s3Np0::P64 = P64[_s3Npd::P64 + 24];
           _s3Np1::P64 = P64[_s3Npd::P64 + 32];
           _s3Np2::P64 = P64[_s3Npd::P64 + 40];
           _s3Np3::P64 = P64[_s3Npd::P64 + 48];
           _s3Np4::P64 = P64[_s3Npd::P64 + 56];
           _s3Np5::P64 = P64[_s3Npd::P64 + 64];
           _s3Np6::P64 = P64[_s3Npd::P64 + 72];
           _s3Np7::P64 = P64[_s3Npd::P64 + 80];
           _s3Np8::P64 = P64[_s3Npd::P64 + 88];
           _s3Np9::P64 = P64[_s3Npd::P64 + 96];
           _s3Npa::P64 = P64[_s3Npd::P64 + 104];
           _s3Npb::P64 = P64[_s3Npd::P64 + 112];
           I64[Hp - 104] = sat_s3Npc_info;
           P64[Hp - 96] = _s3NoZ::P64;
           P64[Hp - 88] = _s3Np0::P64;
           P64[Hp - 80] = _s3Np1::P64;
           P64[Hp - 72] = _s3Np2::P64;
           P64[Hp - 64] = _s3Np3::P64;
           P64[Hp - 56] = _s3Np4::P64;
           P64[Hp - 48] = _s3Np5::P64;
           P64[Hp - 40] = _s3Np6::P64;
           P64[Hp - 32] = _s3Np7::P64;
           P64[Hp - 24] = _s3Np8::P64;
           P64[Hp - 16] = _s3Np9::P64;
           P64[Hp - 8] = _s3Npa::P64;
           P64[Hp] = _s3Npb::P64;
           R2 = Hp - 102;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Npd_info" {
     sat_s3Npd_info:
         const sat_s3Npd_entry;
         const 13;
         const 140741783322639;
         const S3NLQ_srt+240;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c3UxL: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3UxP; else goto c3UxO;
       c3UxP: // global
           HpAlloc = 120;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3UxO: // global
           I64[Hp - 112] = sat_s3Npd_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R2 = Hp - 112;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 576601494086746126;
         const 55834574848;
         const S3NLQ_srt+240;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.171492102 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3Uyl: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s3Npu_entry() //  [R1]
         { []
         }
     {offset
       c3Uyt: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3Uyu; else goto c3Uyv;
       c3Uyu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Uyv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = P64[R1 + 112];
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Npu_info" {
     sat_s3Npu_info:
         const sat_s3Npu_entry;
         const 13;
         const 4294967311;
         const S3NLQ_srt+440;
 },
 sat_s3Npt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UyB: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3UyC; else goto c3UyD;
       c3UyC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UyD: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = P64[R1 + 102];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Npt_info" {
     sat_s3Npt_info:
         const sat_s3Npt_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+240;
 },
 sat_s3Nps_entry() //  [R1]
         { []
         }
     {offset
       c3UyI: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3UyJ; else goto c3UyK;
       c3UyJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UyK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = P64[R1 + 112];
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nps_info" {
     sat_s3Nps_info:
         const sat_s3Nps_entry;
         const 13;
         const 4294967311;
         const S3NLQ_srt+456;
 },
 sat_s3Npr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UyQ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3UyR; else goto c3UyS;
       c3UyR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UyS: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 72] = P64[R1 + 47];
           P64[Sp - 64] = P64[R1 + 55];
           P64[Sp - 56] = P64[R1 + 63];
           P64[Sp - 48] = P64[R1 + 71];
           P64[Sp - 40] = P64[R1 + 79];
           P64[Sp - 32] = P64[R1 + 87];
           P64[Sp - 24] = P64[R1 + 95];
           P64[Sp - 16] = P64[R1 + 103];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Npr_info" {
     sat_s3Npr_info:
         const sat_s3Npr_entry;
         const 13;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+448;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UyU: // global
           Hp = Hp + 504;
           if (Hp > HpLim) (likely: False) goto c3UyY; else goto c3UyX;
       c3UyY: // global
           HpAlloc = 504;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3UyX: // global
           I64[Hp - 496] = sat_s3Npu_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           P64[Hp - 464] = R4;
           P64[Hp - 456] = R5;
           P64[Hp - 448] = R6;
           _s3Npj::P64 = P64[Sp];
           P64[Hp - 440] = _s3Npj::P64;
           _s3Npk::P64 = P64[Sp + 8];
           P64[Hp - 432] = _s3Npk::P64;
           _s3Npl::P64 = P64[Sp + 16];
           P64[Hp - 424] = _s3Npl::P64;
           _s3Npm::P64 = P64[Sp + 24];
           P64[Hp - 416] = _s3Npm::P64;
           _s3Npn::P64 = P64[Sp + 32];
           P64[Hp - 408] = _s3Npn::P64;
           _s3Npo::P64 = P64[Sp + 40];
           P64[Hp - 400] = _s3Npo::P64;
           _s3Npp::P64 = P64[Sp + 48];
           P64[Hp - 392] = _s3Npp::P64;
           _s3Npq::P64 = P64[Sp + 56];
           P64[Hp - 384] = _s3Npq::P64;
           I64[Hp - 376] = sat_s3Npt_info;
           P64[Hp - 368] = R2;
           P64[Hp - 360] = R3;
           P64[Hp - 352] = R4;
           P64[Hp - 344] = R5;
           P64[Hp - 336] = R6;
           P64[Hp - 328] = _s3Npj::P64;
           P64[Hp - 320] = _s3Npk::P64;
           P64[Hp - 312] = _s3Npl::P64;
           P64[Hp - 304] = _s3Npm::P64;
           P64[Hp - 296] = _s3Npn::P64;
           P64[Hp - 288] = _s3Npo::P64;
           P64[Hp - 280] = _s3Npp::P64;
           P64[Hp - 272] = _s3Npq::P64;
           I64[Hp - 264] = sat_s3Nps_info;
           P64[Hp - 248] = R2;
           P64[Hp - 240] = R3;
           P64[Hp - 232] = R4;
           P64[Hp - 224] = R5;
           P64[Hp - 216] = R6;
           P64[Hp - 208] = _s3Npj::P64;
           P64[Hp - 200] = _s3Npk::P64;
           P64[Hp - 192] = _s3Npl::P64;
           P64[Hp - 184] = _s3Npm::P64;
           P64[Hp - 176] = _s3Npn::P64;
           P64[Hp - 168] = _s3Npo::P64;
           P64[Hp - 160] = _s3Npp::P64;
           P64[Hp - 152] = _s3Npq::P64;
           I64[Hp - 144] = sat_s3Npr_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = _s3Npj::P64;
           P64[Hp - 88] = _s3Npk::P64;
           P64[Hp - 80] = _s3Npl::P64;
           P64[Hp - 72] = _s3Npm::P64;
           P64[Hp - 64] = _s3Npn::P64;
           P64[Hp - 56] = _s3Npo::P64;
           P64[Hp - 48] = _s3Npp::P64;
           P64[Hp - 40] = _s3Npq::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 264;
           P64[Hp - 8] = Hp - 374;
           P64[Hp] = Hp - 496;
           R1 = Hp - 31;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_entry;
         const 0;
         const 2161727825432805390;
         const 55834574848;
         const S3NLQ_srt+240;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.189008084 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UzX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s3NpH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UA6: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3UA7; else goto c3UA8;
       c3UA7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UA8: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = P64[R1 + 94];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NpH_info" {
     sat_s3NpH_info:
         const sat_s3NpH_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+248;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       c3UA9: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3UAd; else goto c3UAc;
       c3UAd: // global
           HpAlloc = 104;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3UAc: // global
           I64[Hp - 96] = sat_s3NpH_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R2 = Hp - 94;
           Sp = Sp + 56;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 1152991877645991950;
         const 51539607552;
         const S3NLQ_srt+248;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.198605215 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UAD: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s3NpV_entry() //  [R1]
         { []
         }
     {offset
       c3UAL: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3UAM; else goto c3UAN;
       c3UAM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UAN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NpV_info" {
     sat_s3NpV_info:
         const sat_s3NpV_entry;
         const 13;
         const 4294967311;
         const S3NLQ_srt+248;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c3UAO: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3UAS; else goto c3UAR;
       c3UAS: // global
           HpAlloc = 120;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3UAR: // global
           I64[Hp - 112] = sat_s3NpV_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R2 = Hp - 112;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 2305843013508661262;
         const 55834574848;
         const S3NLQ_srt+248;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.209315102 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3UBk: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s3Nq8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UBx: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3UBy; else goto c3UBz;
       c3UBy: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UBz: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = P64[R1 + 94];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nq8_info" {
     sat_s3Nq8_info:
         const sat_s3Nq8_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+248;
 },
 sat_s3Nq9_entry() //  [R1]
         { []
         }
     {offset
       c3UBA: // global
           _s3Nq9::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UBB; else goto c3UBC;
       c3UBC: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3UBE; else goto c3UBD;
       c3UBE: // global
           HpAlloc = 104;
           goto c3UBB;
       c3UBB: // global
           R1 = _s3Nq9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UBD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nq9::P64;
           _s3NpW::P64 = P64[_s3Nq9::P64 + 16];
           _s3NpX::P64 = P64[_s3Nq9::P64 + 24];
           _s3NpY::P64 = P64[_s3Nq9::P64 + 32];
           _s3NpZ::P64 = P64[_s3Nq9::P64 + 40];
           _s3Nq0::P64 = P64[_s3Nq9::P64 + 48];
           _s3Nq1::P64 = P64[_s3Nq9::P64 + 56];
           _s3Nq2::P64 = P64[_s3Nq9::P64 + 64];
           _s3Nq3::P64 = P64[_s3Nq9::P64 + 72];
           _s3Nq4::P64 = P64[_s3Nq9::P64 + 80];
           _s3Nq5::P64 = P64[_s3Nq9::P64 + 88];
           _s3Nq6::P64 = P64[_s3Nq9::P64 + 96];
           _s3Nq7::P64 = P64[_s3Nq9::P64 + 104];
           I64[Hp - 96] = sat_s3Nq8_info;
           P64[Hp - 88] = _s3NpW::P64;
           P64[Hp - 80] = _s3NpX::P64;
           P64[Hp - 72] = _s3NpY::P64;
           P64[Hp - 64] = _s3NpZ::P64;
           P64[Hp - 56] = _s3Nq0::P64;
           P64[Hp - 48] = _s3Nq1::P64;
           P64[Hp - 40] = _s3Nq2::P64;
           P64[Hp - 32] = _s3Nq3::P64;
           P64[Hp - 24] = _s3Nq4::P64;
           P64[Hp - 16] = _s3Nq5::P64;
           P64[Hp - 8] = _s3Nq6::P64;
           P64[Hp] = _s3Nq7::P64;
           R2 = Hp - 94;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nq9_info" {
     sat_s3Nq9_info:
         const sat_s3Nq9_entry;
         const 12;
         const 70373039144975;
         const S3NLQ_srt+248;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c3UBF: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3UBJ; else goto c3UBI;
       c3UBJ: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3UBI: // global
           I64[Hp - 104] = sat_s3Nq9_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R2 = Hp - 104;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 56;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 4611756391466532878;
         const 51539607552;
         const S3NLQ_srt+248;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.224578876 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3UCd: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s3Nqp_entry() //  [R1]
         { []
         }
     {offset
       c3UCl: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3UCm; else goto c3UCn;
       c3UCm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UCn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = P64[R1 + 104];
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nqp_info" {
     sat_s3Nqp_info:
         const sat_s3Nqp_entry;
         const 12;
         const 4294967311;
         const S3NLQ_srt+472;
 },
 sat_s3Nqo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UCt: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3UCu; else goto c3UCv;
       c3UCu: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UCv: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = P64[R1 + 94];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nqo_info" {
     sat_s3Nqo_info:
         const sat_s3Nqo_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+248;
 },
 sat_s3Nqn_entry() //  [R1]
         { []
         }
     {offset
       c3UCA: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3UCB; else goto c3UCC;
       c3UCB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UCC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = P64[R1 + 104];
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nqn_info" {
     sat_s3Nqn_info:
         const sat_s3Nqn_entry;
         const 12;
         const 4294967311;
         const S3NLQ_srt+488;
 },
 sat_s3Nqm_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UCI: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3UCJ; else goto c3UCK;
       c3UCJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UCK: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 64] = P64[R1 + 47];
           P64[Sp - 56] = P64[R1 + 55];
           P64[Sp - 48] = P64[R1 + 63];
           P64[Sp - 40] = P64[R1 + 71];
           P64[Sp - 32] = P64[R1 + 79];
           P64[Sp - 24] = P64[R1 + 87];
           P64[Sp - 16] = P64[R1 + 95];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nqm_info" {
     sat_s3Nqm_info:
         const sat_s3Nqm_entry;
         const 12;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+480;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UCM: // global
           Hp = Hp + 472;
           if (Hp > HpLim) (likely: False) goto c3UCQ; else goto c3UCP;
       c3UCQ: // global
           HpAlloc = 472;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3UCP: // global
           I64[Hp - 464] = sat_s3Nqp_info;
           P64[Hp - 448] = R2;
           P64[Hp - 440] = R3;
           P64[Hp - 432] = R4;
           P64[Hp - 424] = R5;
           P64[Hp - 416] = R6;
           _s3Nqf::P64 = P64[Sp];
           P64[Hp - 408] = _s3Nqf::P64;
           _s3Nqg::P64 = P64[Sp + 8];
           P64[Hp - 400] = _s3Nqg::P64;
           _s3Nqh::P64 = P64[Sp + 16];
           P64[Hp - 392] = _s3Nqh::P64;
           _s3Nqi::P64 = P64[Sp + 24];
           P64[Hp - 384] = _s3Nqi::P64;
           _s3Nqj::P64 = P64[Sp + 32];
           P64[Hp - 376] = _s3Nqj::P64;
           _s3Nqk::P64 = P64[Sp + 40];
           P64[Hp - 368] = _s3Nqk::P64;
           _s3Nql::P64 = P64[Sp + 48];
           P64[Hp - 360] = _s3Nql::P64;
           I64[Hp - 352] = sat_s3Nqo_info;
           P64[Hp - 344] = R2;
           P64[Hp - 336] = R3;
           P64[Hp - 328] = R4;
           P64[Hp - 320] = R5;
           P64[Hp - 312] = R6;
           P64[Hp - 304] = _s3Nqf::P64;
           P64[Hp - 296] = _s3Nqg::P64;
           P64[Hp - 288] = _s3Nqh::P64;
           P64[Hp - 280] = _s3Nqi::P64;
           P64[Hp - 272] = _s3Nqj::P64;
           P64[Hp - 264] = _s3Nqk::P64;
           P64[Hp - 256] = _s3Nql::P64;
           I64[Hp - 248] = sat_s3Nqn_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           P64[Hp - 216] = R4;
           P64[Hp - 208] = R5;
           P64[Hp - 200] = R6;
           P64[Hp - 192] = _s3Nqf::P64;
           P64[Hp - 184] = _s3Nqg::P64;
           P64[Hp - 176] = _s3Nqh::P64;
           P64[Hp - 168] = _s3Nqi::P64;
           P64[Hp - 160] = _s3Nqj::P64;
           P64[Hp - 152] = _s3Nqk::P64;
           P64[Hp - 144] = _s3Nql::P64;
           I64[Hp - 136] = sat_s3Nqm_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = _s3Nqf::P64;
           P64[Hp - 80] = _s3Nqg::P64;
           P64[Hp - 72] = _s3Nqh::P64;
           P64[Hp - 64] = _s3Nqi::P64;
           P64[Hp - 56] = _s3Nqj::P64;
           P64[Hp - 48] = _s3Nqk::P64;
           P64[Hp - 40] = _s3Nql::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 135;
           P64[Hp - 16] = Hp - 248;
           P64[Hp - 8] = Hp - 350;
           P64[Hp] = Hp - 464;
           R1 = Hp - 31;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)_entry;
         const 0;
         const 17293822573397671950;
         const 51539607552;
         const S3NLQ_srt+248;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.242640562 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UDL: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s3NqB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UDU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3UDV; else goto c3UDW;
       c3UDV: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UDW: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = P64[R1 + 86];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NqB_info" {
     sat_s3NqB_info:
         const sat_s3NqB_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+256;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c3UDX: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3UE1; else goto c3UE0;
       c3UE1: // global
           HpAlloc = 96;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3UE0: // global
           I64[Hp - 88] = sat_s3NqB_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R2 = Hp - 86;
           Sp = Sp + 48;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 9223407225521831950;
         const 47244640256;
         const S3NLQ_srt+256;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.252025223 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UEp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s3NqO_entry() //  [R1]
         { []
         }
     {offset
       c3UEx: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3UEy; else goto c3UEz;
       c3UEy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UEz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NqO_info" {
     sat_s3NqO_info:
         const sat_s3NqO_entry;
         const 12;
         const 4294967311;
         const S3NLQ_srt+256;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c3UEA: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3UEE; else goto c3UED;
       c3UEE: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3UED: // global
           I64[Hp - 104] = sat_s3NqO_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R2 = Hp - 104;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 56;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 51539607552;
         const S3NLQ_srt+512;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.262236499 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3UF4: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadList_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s3Nr0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UFh: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3UFi; else goto c3UFj;
       c3UFi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UFj: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = P64[R1 + 86];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nr0_info" {
     sat_s3Nr0_info:
         const sat_s3Nr0_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+520;
 },
 sat_s3Nr1_entry() //  [R1]
         { []
         }
     {offset
       c3UFk: // global
           _s3Nr1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UFl; else goto c3UFm;
       c3UFm: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3UFo; else goto c3UFn;
       c3UFo: // global
           HpAlloc = 96;
           goto c3UFl;
       c3UFl: // global
           R1 = _s3Nr1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UFn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nr1::P64;
           _s3NqP::P64 = P64[_s3Nr1::P64 + 16];
           _s3NqQ::P64 = P64[_s3Nr1::P64 + 24];
           _s3NqR::P64 = P64[_s3Nr1::P64 + 32];
           _s3NqS::P64 = P64[_s3Nr1::P64 + 40];
           _s3NqT::P64 = P64[_s3Nr1::P64 + 48];
           _s3NqU::P64 = P64[_s3Nr1::P64 + 56];
           _s3NqV::P64 = P64[_s3Nr1::P64 + 64];
           _s3NqW::P64 = P64[_s3Nr1::P64 + 72];
           _s3NqX::P64 = P64[_s3Nr1::P64 + 80];
           _s3NqY::P64 = P64[_s3Nr1::P64 + 88];
           _s3NqZ::P64 = P64[_s3Nr1::P64 + 96];
           I64[Hp - 88] = sat_s3Nr0_info;
           P64[Hp - 80] = _s3NqP::P64;
           P64[Hp - 72] = _s3NqQ::P64;
           P64[Hp - 64] = _s3NqR::P64;
           P64[Hp - 56] = _s3NqS::P64;
           P64[Hp - 48] = _s3NqT::P64;
           P64[Hp - 40] = _s3NqU::P64;
           P64[Hp - 32] = _s3NqV::P64;
           P64[Hp - 24] = _s3NqW::P64;
           P64[Hp - 16] = _s3NqX::P64;
           P64[Hp - 8] = _s3NqY::P64;
           P64[Hp] = _s3NqZ::P64;
           R2 = Hp - 86;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nr1_info" {
     sat_s3Nr1_info:
         const sat_s3Nr1_entry;
         const 11;
         const 4503603922337807;
         const S3NLQ_srt+360;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c3UFp: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3UFt; else goto c3UFs;
       c3UFt: // global
           HpAlloc = 104;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3UFs: // global
           I64[Hp - 96] = sat_s3Nr1_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R2 = Hp - 96;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 13510803177078798;
         const 47244640256;
         const S3NLQ_srt+360;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.276943947 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3UFV: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s3Nrg_entry() //  [R1]
         { []
         }
     {offset
       c3UG3: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3UG4; else goto c3UG5;
       c3UG4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UG5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = P64[R1 + 96];
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nrg_info" {
     sat_s3Nrg_info:
         const sat_s3Nrg_entry;
         const 11;
         const 4294967311;
         const S3NLQ_srt+504;
 },
 sat_s3Nrf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UGb: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3UGc; else goto c3UGd;
       c3UGc: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UGd: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = P64[R1 + 86];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nrf_info" {
     sat_s3Nrf_info:
         const sat_s3Nrf_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+520;
 },
 sat_s3Nre_entry() //  [R1]
         { []
         }
     {offset
       c3UGi: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3UGj; else goto c3UGk;
       c3UGj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UGk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = P64[R1 + 96];
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadList_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nre_info" {
     sat_s3Nre_info:
         const sat_s3Nre_entry;
         const 11;
         const 4294967311;
         const S3NLQ_srt+528;
 },
 sat_s3Nrd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UGq: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3UGr; else goto c3UGs;
       c3UGr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UGs: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 56] = P64[R1 + 47];
           P64[Sp - 48] = P64[R1 + 55];
           P64[Sp - 40] = P64[R1 + 63];
           P64[Sp - 32] = P64[R1 + 71];
           P64[Sp - 24] = P64[R1 + 79];
           P64[Sp - 16] = P64[R1 + 87];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nrd_info" {
     sat_s3Nrd_info:
         const sat_s3Nrd_entry;
         const 11;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+512;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UGu: // global
           Hp = Hp + 440;
           if (Hp > HpLim) (likely: False) goto c3UGy; else goto c3UGx;
       c3UGy: // global
           HpAlloc = 440;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3UGx: // global
           I64[Hp - 432] = sat_s3Nrg_info;
           P64[Hp - 416] = R2;
           P64[Hp - 408] = R3;
           P64[Hp - 400] = R4;
           P64[Hp - 392] = R5;
           P64[Hp - 384] = R6;
           _s3Nr7::P64 = P64[Sp];
           P64[Hp - 376] = _s3Nr7::P64;
           _s3Nr8::P64 = P64[Sp + 8];
           P64[Hp - 368] = _s3Nr8::P64;
           _s3Nr9::P64 = P64[Sp + 16];
           P64[Hp - 360] = _s3Nr9::P64;
           _s3Nra::P64 = P64[Sp + 24];
           P64[Hp - 352] = _s3Nra::P64;
           _s3Nrb::P64 = P64[Sp + 32];
           P64[Hp - 344] = _s3Nrb::P64;
           _s3Nrc::P64 = P64[Sp + 40];
           P64[Hp - 336] = _s3Nrc::P64;
           I64[Hp - 328] = sat_s3Nrf_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           P64[Hp - 296] = R5;
           P64[Hp - 288] = R6;
           P64[Hp - 280] = _s3Nr7::P64;
           P64[Hp - 272] = _s3Nr8::P64;
           P64[Hp - 264] = _s3Nr9::P64;
           P64[Hp - 256] = _s3Nra::P64;
           P64[Hp - 248] = _s3Nrb::P64;
           P64[Hp - 240] = _s3Nrc::P64;
           I64[Hp - 232] = sat_s3Nre_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           P64[Hp - 192] = R5;
           P64[Hp - 184] = R6;
           P64[Hp - 176] = _s3Nr7::P64;
           P64[Hp - 168] = _s3Nr8::P64;
           P64[Hp - 160] = _s3Nr9::P64;
           P64[Hp - 152] = _s3Nra::P64;
           P64[Hp - 144] = _s3Nrb::P64;
           P64[Hp - 136] = _s3Nrc::P64;
           I64[Hp - 128] = sat_s3Nrd_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = _s3Nr7::P64;
           P64[Hp - 72] = _s3Nr8::P64;
           P64[Hp - 64] = _s3Nr9::P64;
           P64[Hp - 56] = _s3Nra::P64;
           P64[Hp - 48] = _s3Nrb::P64;
           P64[Hp - 40] = _s3Nrc::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 127;
           P64[Hp - 16] = Hp - 232;
           P64[Hp - 8] = Hp - 326;
           P64[Hp] = Hp - 432;
           R1 = Hp - 31;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 47244640256;
         const S3NLQ_srt+504;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.293574755 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UHp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s3Nrr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UHy: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3UHz; else goto c3UHA;
       c3UHz: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UHA: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = P64[R1 + 78];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nrr_info" {
     sat_s3Nrr_info:
         const sat_s3Nrr_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+544;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c3UHB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3UHF; else goto c3UHE;
       c3UHF: // global
           HpAlloc = 88;
           R1 = GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3UHE: // global
           I64[Hp - 80] = sat_s3Nrr_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R2 = Hp - 78;
           Sp = Sp + 40;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 108086395351859214;
         const 42949672960;
         const S3NLQ_srt+360;
         const 10;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.302551318 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UI1: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s3NrD_entry() //  [R1]
         { []
         }
     {offset
       c3UI9: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3UIa; else goto c3UIb;
       c3UIa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UIb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NrD_info" {
     sat_s3NrD_info:
         const sat_s3NrD_entry;
         const 11;
         const 4294967311;
         const S3NLQ_srt+544;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c3UIc: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3UIg; else goto c3UIf;
       c3UIg: // global
           HpAlloc = 104;
           R1 = GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3UIf: // global
           I64[Hp - 96] = sat_s3NrD_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R2 = Hp - 96;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 47244640256;
         const S3NLQ_srt+544;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.31229756 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3UIE: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s3NrO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UIR: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3UIS; else goto c3UIT;
       c3UIS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UIT: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = P64[R1 + 78];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NrO_info" {
     sat_s3NrO_info:
         const sat_s3NrO_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+544;
 },
 sat_s3NrP_entry() //  [R1]
         { []
         }
     {offset
       c3UIU: // global
           _s3NrP::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UIV; else goto c3UIW;
       c3UIW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3UIY; else goto c3UIX;
       c3UIY: // global
           HpAlloc = 88;
           goto c3UIV;
       c3UIV: // global
           R1 = _s3NrP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UIX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NrP::P64;
           _s3NrE::P64 = P64[_s3NrP::P64 + 16];
           _s3NrF::P64 = P64[_s3NrP::P64 + 24];
           _s3NrG::P64 = P64[_s3NrP::P64 + 32];
           _s3NrH::P64 = P64[_s3NrP::P64 + 40];
           _s3NrI::P64 = P64[_s3NrP::P64 + 48];
           _s3NrJ::P64 = P64[_s3NrP::P64 + 56];
           _s3NrK::P64 = P64[_s3NrP::P64 + 64];
           _s3NrL::P64 = P64[_s3NrP::P64 + 72];
           _s3NrM::P64 = P64[_s3NrP::P64 + 80];
           _s3NrN::P64 = P64[_s3NrP::P64 + 88];
           I64[Hp - 80] = sat_s3NrO_info;
           P64[Hp - 72] = _s3NrE::P64;
           P64[Hp - 64] = _s3NrF::P64;
           P64[Hp - 56] = _s3NrG::P64;
           P64[Hp - 48] = _s3NrH::P64;
           P64[Hp - 40] = _s3NrI::P64;
           P64[Hp - 32] = _s3NrJ::P64;
           P64[Hp - 24] = _s3NrK::P64;
           P64[Hp - 16] = _s3NrL::P64;
           P64[Hp - 8] = _s3NrM::P64;
           P64[Hp] = _s3NrN::P64;
           R2 = Hp - 78;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NrP_info" {
     sat_s3NrP_info:
         const sat_s3NrP_entry;
         const 10;
         const 36028801313931279;
         const S3NLQ_srt+360;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c3UIZ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3UJ3; else goto c3UJ2;
       c3UJ3: // global
           HpAlloc = 96;
           R1 = GHC.Read.$fRead(,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3UJ2: // global
           I64[Hp - 88] = sat_s3NrP_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R2 = Hp - 88;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadList_entry;
         const 0;
         const 324259177465643022;
         const 42949672960;
         const S3NLQ_srt+360;
         const 10;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.325708781 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3UJt: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s3Ns3_entry() //  [R1]
         { []
         }
     {offset
       c3UJB: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3UJC; else goto c3UJD;
       c3UJC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UJD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = P64[R1 + 88];
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Ns3_info" {
     sat_s3Ns3_info:
         const sat_s3Ns3_entry;
         const 10;
         const 4294967311;
         const S3NLQ_srt+552;
 },
 sat_s3Ns2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UJJ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3UJK; else goto c3UJL;
       c3UJK: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UJL: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = P64[R1 + 78];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ns2_info" {
     sat_s3Ns2_info:
         const sat_s3Ns2_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+544;
 },
 sat_s3Ns1_entry() //  [R1]
         { []
         }
     {offset
       c3UJQ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3UJR; else goto c3UJS;
       c3UJR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UJS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = P64[R1 + 88];
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Ns1_info" {
     sat_s3Ns1_info:
         const sat_s3Ns1_entry;
         const 10;
         const 4294967311;
         const S3NLQ_srt+568;
 },
 sat_s3Ns0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UJY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3UJZ; else goto c3UK0;
       c3UJZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UK0: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 48] = P64[R1 + 47];
           P64[Sp - 40] = P64[R1 + 55];
           P64[Sp - 32] = P64[R1 + 63];
           P64[Sp - 24] = P64[R1 + 71];
           P64[Sp - 16] = P64[R1 + 79];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ns0_info" {
     sat_s3Ns0_info:
         const sat_s3Ns0_entry;
         const 10;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+560;
 },
 GHC.Read.$fRead(,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UK2: // global
           Hp = Hp + 408;
           if (Hp > HpLim) (likely: False) goto c3UK6; else goto c3UK5;
       c3UK6: // global
           HpAlloc = 408;
           R1 = GHC.Read.$fRead(,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3UK5: // global
           I64[Hp - 400] = sat_s3Ns3_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           P64[Hp - 368] = R4;
           P64[Hp - 360] = R5;
           P64[Hp - 352] = R6;
           _s3NrV::P64 = P64[Sp];
           P64[Hp - 344] = _s3NrV::P64;
           _s3NrW::P64 = P64[Sp + 8];
           P64[Hp - 336] = _s3NrW::P64;
           _s3NrX::P64 = P64[Sp + 16];
           P64[Hp - 328] = _s3NrX::P64;
           _s3NrY::P64 = P64[Sp + 24];
           P64[Hp - 320] = _s3NrY::P64;
           _s3NrZ::P64 = P64[Sp + 32];
           P64[Hp - 312] = _s3NrZ::P64;
           I64[Hp - 304] = sat_s3Ns2_info;
           P64[Hp - 296] = R2;
           P64[Hp - 288] = R3;
           P64[Hp - 280] = R4;
           P64[Hp - 272] = R5;
           P64[Hp - 264] = R6;
           P64[Hp - 256] = _s3NrV::P64;
           P64[Hp - 248] = _s3NrW::P64;
           P64[Hp - 240] = _s3NrX::P64;
           P64[Hp - 232] = _s3NrY::P64;
           P64[Hp - 224] = _s3NrZ::P64;
           I64[Hp - 216] = sat_s3Ns1_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           P64[Hp - 184] = R4;
           P64[Hp - 176] = R5;
           P64[Hp - 168] = R6;
           P64[Hp - 160] = _s3NrV::P64;
           P64[Hp - 152] = _s3NrW::P64;
           P64[Hp - 144] = _s3NrX::P64;
           P64[Hp - 136] = _s3NrY::P64;
           P64[Hp - 128] = _s3NrZ::P64;
           I64[Hp - 120] = sat_s3Ns0_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = _s3NrV::P64;
           P64[Hp - 64] = _s3NrW::P64;
           P64[Hp - 56] = _s3NrX::P64;
           P64[Hp - 48] = _s3NrY::P64;
           P64[Hp - 40] = _s3NrZ::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 216;
           P64[Hp - 8] = Hp - 302;
           P64[Hp] = Hp - 400;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 42949672960;
         const S3NLQ_srt+544;
         const 10;
         const GHC.Read.$fRead(,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.341008118 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UKT: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s3Nsd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UL2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3UL3; else goto c3UL4;
       c3UL3: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UL4: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = P64[R1 + 70];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nsd_info" {
     sat_s3Nsd_info:
         const sat_s3Nsd_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+584;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c3UL5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3UL9; else goto c3UL8;
       c3UL9: // global
           HpAlloc = 80;
           R1 = GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3UL8: // global
           I64[Hp - 72] = sat_s3Nsd_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 70;
           Sp = Sp + 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 3458764518115508238;
         const 38654705664;
         const S3NLQ_srt+360;
         const 9;
         const GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.349816114 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ULt: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s3Nso_entry() //  [R1]
         { []
         }
     {offset
       c3ULB: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3ULC; else goto c3ULD;
       c3ULC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ULD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nso_info" {
     sat_s3Nso_info:
         const sat_s3Nso_entry;
         const 10;
         const 4294967311;
         const S3NLQ_srt+584;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c3ULE: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3ULI; else goto c3ULH;
       c3ULI: // global
           HpAlloc = 96;
           R1 = GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3ULH: // global
           I64[Hp - 88] = sat_s3Nso_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R2 = Hp - 88;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 42949672960;
         const S3NLQ_srt+584;
         const 10;
         const GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.359323741 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3UM4: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)_$creadList_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s3Nsy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UMh: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3UMi; else goto c3UMj;
       c3UMi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UMj: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = P64[R1 + 70];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nsy_info" {
     sat_s3Nsy_info:
         const sat_s3Nsy_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+584;
 },
 sat_s3Nsz_entry() //  [R1]
         { []
         }
     {offset
       c3UMk: // global
           _s3Nsz::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UMl; else goto c3UMm;
       c3UMm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3UMo; else goto c3UMn;
       c3UMo: // global
           HpAlloc = 80;
           goto c3UMl;
       c3UMl: // global
           R1 = _s3Nsz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UMn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nsz::P64;
           _s3Nsp::P64 = P64[_s3Nsz::P64 + 16];
           _s3Nsq::P64 = P64[_s3Nsz::P64 + 24];
           _s3Nsr::P64 = P64[_s3Nsz::P64 + 32];
           _s3Nss::P64 = P64[_s3Nsz::P64 + 40];
           _s3Nst::P64 = P64[_s3Nsz::P64 + 48];
           _s3Nsu::P64 = P64[_s3Nsz::P64 + 56];
           _s3Nsv::P64 = P64[_s3Nsz::P64 + 64];
           _s3Nsw::P64 = P64[_s3Nsz::P64 + 72];
           _s3Nsx::P64 = P64[_s3Nsz::P64 + 80];
           I64[Hp - 72] = sat_s3Nsy_info;
           P64[Hp - 64] = _s3Nsp::P64;
           P64[Hp - 56] = _s3Nsq::P64;
           P64[Hp - 48] = _s3Nsr::P64;
           P64[Hp - 40] = _s3Nss::P64;
           P64[Hp - 32] = _s3Nst::P64;
           P64[Hp - 24] = _s3Nsu::P64;
           P64[Hp - 16] = _s3Nsv::P64;
           P64[Hp - 8] = _s3Nsw::P64;
           P64[Hp] = _s3Nsx::P64;
           R2 = Hp - 70;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nsz_info" {
     sat_s3Nsz_info:
         const sat_s3Nsz_entry;
         const 9;
         const 1152921508901814287;
         const S3NLQ_srt+360;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c3UMp: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3UMt; else goto c3UMs;
       c3UMt: // global
           HpAlloc = 88;
           R1 = GHC.Read.$fRead(,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3UMs: // global
           I64[Hp - 80] = sat_s3Nsz_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,)_$creadList_entry;
         const 0;
         const 10376293545756590094;
         const 38654705664;
         const S3NLQ_srt+360;
         const 9;
         const GHC.Read.$fRead(,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.372924705 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3UMR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s3NsM_entry() //  [R1]
         { []
         }
     {offset
       c3UMZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3UN0; else goto c3UN1;
       c3UN0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UN1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NsM_info" {
     sat_s3NsM_info:
         const sat_s3NsM_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+592;
 },
 sat_s3NsL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UN7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3UN8; else goto c3UN9;
       c3UN8: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UN9: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = P64[R1 + 70];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NsL_info" {
     sat_s3NsL_info:
         const sat_s3NsL_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+584;
 },
 sat_s3NsK_entry() //  [R1]
         { []
         }
     {offset
       c3UNe: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3UNf; else goto c3UNg;
       c3UNf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UNg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)_$creadList_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NsK_info" {
     sat_s3NsK_info:
         const sat_s3NsK_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+608;
 },
 sat_s3NsJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UNm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3UNn; else goto c3UNo;
       c3UNn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UNo: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 40] = P64[R1 + 47];
           P64[Sp - 32] = P64[R1 + 55];
           P64[Sp - 24] = P64[R1 + 63];
           P64[Sp - 16] = P64[R1 + 71];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NsJ_info" {
     sat_s3NsJ_info:
         const sat_s3NsJ_entry;
         const 9;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+600;
 },
 GHC.Read.$fRead(,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UNq: // global
           Hp = Hp + 376;
           if (Hp > HpLim) (likely: False) goto c3UNu; else goto c3UNt;
       c3UNu: // global
           HpAlloc = 376;
           R1 = GHC.Read.$fRead(,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3UNt: // global
           I64[Hp - 368] = sat_s3NsM_info;
           P64[Hp - 352] = R2;
           P64[Hp - 344] = R3;
           P64[Hp - 336] = R4;
           P64[Hp - 328] = R5;
           P64[Hp - 320] = R6;
           _s3NsF::P64 = P64[Sp];
           P64[Hp - 312] = _s3NsF::P64;
           _s3NsG::P64 = P64[Sp + 8];
           P64[Hp - 304] = _s3NsG::P64;
           _s3NsH::P64 = P64[Sp + 16];
           P64[Hp - 296] = _s3NsH::P64;
           _s3NsI::P64 = P64[Sp + 24];
           P64[Hp - 288] = _s3NsI::P64;
           I64[Hp - 280] = sat_s3NsL_info;
           P64[Hp - 272] = R2;
           P64[Hp - 264] = R3;
           P64[Hp - 256] = R4;
           P64[Hp - 248] = R5;
           P64[Hp - 240] = R6;
           P64[Hp - 232] = _s3NsF::P64;
           P64[Hp - 224] = _s3NsG::P64;
           P64[Hp - 216] = _s3NsH::P64;
           P64[Hp - 208] = _s3NsI::P64;
           I64[Hp - 200] = sat_s3NsK_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           P64[Hp - 168] = R4;
           P64[Hp - 160] = R5;
           P64[Hp - 152] = R6;
           P64[Hp - 144] = _s3NsF::P64;
           P64[Hp - 136] = _s3NsG::P64;
           P64[Hp - 128] = _s3NsH::P64;
           P64[Hp - 120] = _s3NsI::P64;
           I64[Hp - 112] = sat_s3NsJ_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = _s3NsF::P64;
           P64[Hp - 56] = _s3NsG::P64;
           P64[Hp - 48] = _s3NsH::P64;
           P64[Hp - 40] = _s3NsI::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 111;
           P64[Hp - 16] = Hp - 200;
           P64[Hp - 8] = Hp - 278;
           P64[Hp] = Hp - 368;
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 38654705664;
         const S3NLQ_srt+584;
         const 9;
         const GHC.Read.$fRead(,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.387718387 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UOd: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadListPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s3NsV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UOm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3UOn; else goto c3UOo;
       c3UOn: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UOo: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = P64[R1 + 62];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NsV_info" {
     sat_s3NsV_info:
         const sat_s3NsV_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+624;
 },
 section ""relreadonly" . u3UOu_srtd" {
     u3UOu_srtd:
         const S3NLQ_srt+360;
         const 35;
         const 25769803777;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c3UOp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3UOt; else goto c3UOs;
       c3UOt: // global
           HpAlloc = 72;
           R1 = GHC.Read.$fRead(,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3UOs: // global
           I64[Hp - 64] = sat_s3NsV_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 62;
           Sp = Sp + 24;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const u3UOu_srtd;
         const 8;
         const GHC.Read.$fRead(,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.396977195 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UON: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s3Nt5_entry() //  [R1]
         { []
         }
     {offset
       c3UOV: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3UOW; else goto c3UOX;
       c3UOW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UOX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nt5_info" {
     sat_s3Nt5_info:
         const sat_s3Nt5_entry;
         const 9;
         const 4294967311;
         const S3NLQ_srt+624;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c3UOY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3UP2; else goto c3UP1;
       c3UP2: // global
           HpAlloc = 88;
           R1 = GHC.Read.$fRead(,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3UP1: // global
           I64[Hp - 80] = sat_s3Nt5_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 38654705664;
         const S3NLQ_srt+624;
         const 9;
         const GHC.Read.$fRead(,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.406867399 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3UPm: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadList_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s3Nte_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UPz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3UPA; else goto c3UPB;
       c3UPA: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UPB: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = P64[R1 + 62];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nte_info" {
     sat_s3Nte_info:
         const sat_s3Nte_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+624;
 },
 section ""relreadonly" . u3UPM_srtd" {
     u3UPM_srtd:
         const S3NLQ_srt+360;
         const 34;
         const 8589934593;
 },
 sat_s3Ntf_entry() //  [R1]
         { []
         }
     {offset
       c3UPC: // global
           _s3Ntf::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UPD; else goto c3UPE;
       c3UPE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3UPG; else goto c3UPF;
       c3UPG: // global
           HpAlloc = 72;
           goto c3UPD;
       c3UPD: // global
           R1 = _s3Ntf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UPF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Ntf::P64;
           _s3Nt6::P64 = P64[_s3Ntf::P64 + 16];
           _s3Nt7::P64 = P64[_s3Ntf::P64 + 24];
           _s3Nt8::P64 = P64[_s3Ntf::P64 + 32];
           _s3Nt9::P64 = P64[_s3Ntf::P64 + 40];
           _s3Nta::P64 = P64[_s3Ntf::P64 + 48];
           _s3Ntb::P64 = P64[_s3Ntf::P64 + 56];
           _s3Ntc::P64 = P64[_s3Ntf::P64 + 64];
           _s3Ntd::P64 = P64[_s3Ntf::P64 + 72];
           I64[Hp - 64] = sat_s3Nte_info;
           P64[Hp - 56] = _s3Nt6::P64;
           P64[Hp - 48] = _s3Nt7::P64;
           P64[Hp - 40] = _s3Nt8::P64;
           P64[Hp - 32] = _s3Nt9::P64;
           P64[Hp - 24] = _s3Nta::P64;
           P64[Hp - 16] = _s3Ntb::P64;
           P64[Hp - 8] = _s3Ntc::P64;
           P64[Hp] = _s3Ntd::P64;
           R2 = Hp - 62;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Ntf_info" {
     sat_s3Ntf_info:
         const sat_s3Ntf_entry;
         const 8;
         const 18446744069414584335;
         const u3UPM_srtd;
 },
 section ""relreadonly" . u3UPN_srtd" {
     u3UPN_srtd:
         const S3NLQ_srt+360;
         const 37;
         const 77309411329;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c3UPH: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3UPL; else goto c3UPK;
       c3UPL: // global
           HpAlloc = 80;
           R1 = GHC.Read.$fRead(,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3UPK: // global
           I64[Hp - 72] = sat_s3Ntf_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 72;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const u3UPN_srtd;
         const 8;
         const GHC.Read.$fRead(,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.420905825 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3UQb: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s3Ntr_entry() //  [R1]
         { []
         }
     {offset
       c3UQj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3UQk; else goto c3UQl;
       c3UQk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UQl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadListPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Ntr_info" {
     sat_s3Ntr_info:
         const sat_s3Ntr_entry;
         const 8;
         const 4294967311;
         const S3NLQ_srt+632;
 },
 sat_s3Ntq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UQr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3UQs; else goto c3UQt;
       c3UQs: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UQt: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = P64[R1 + 62];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ntq_info" {
     sat_s3Ntq_info:
         const sat_s3Ntq_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+624;
 },
 sat_s3Ntp_entry() //  [R1]
         { []
         }
     {offset
       c3UQy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3UQz; else goto c3UQA;
       c3UQz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UQA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadList_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Ntp_info" {
     sat_s3Ntp_info:
         const sat_s3Ntp_entry;
         const 8;
         const 4294967311;
         const S3NLQ_srt+648;
 },
 sat_s3Nto_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UQG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3UQH; else goto c3UQI;
       c3UQH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UQI: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 47];
           P64[Sp - 24] = P64[R1 + 55];
           P64[Sp - 16] = P64[R1 + 63];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,,)_$creadsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nto_info" {
     sat_s3Nto_info:
         const sat_s3Nto_entry;
         const 8;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+640;
 },
 GHC.Read.$fRead(,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UQK: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto c3UQO; else goto c3UQN;
       c3UQO: // global
           HpAlloc = 344;
           R1 = GHC.Read.$fRead(,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3UQN: // global
           I64[Hp - 336] = sat_s3Ntr_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           P64[Hp - 296] = R5;
           P64[Hp - 288] = R6;
           _s3Ntl::P64 = P64[Sp];
           P64[Hp - 280] = _s3Ntl::P64;
           _s3Ntm::P64 = P64[Sp + 8];
           P64[Hp - 272] = _s3Ntm::P64;
           _s3Ntn::P64 = P64[Sp + 16];
           P64[Hp - 264] = _s3Ntn::P64;
           I64[Hp - 256] = sat_s3Ntq_info;
           P64[Hp - 248] = R2;
           P64[Hp - 240] = R3;
           P64[Hp - 232] = R4;
           P64[Hp - 224] = R5;
           P64[Hp - 216] = R6;
           P64[Hp - 208] = _s3Ntl::P64;
           P64[Hp - 200] = _s3Ntm::P64;
           P64[Hp - 192] = _s3Ntn::P64;
           I64[Hp - 184] = sat_s3Ntp_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           P64[Hp - 152] = R4;
           P64[Hp - 144] = R5;
           P64[Hp - 136] = R6;
           P64[Hp - 128] = _s3Ntl::P64;
           P64[Hp - 120] = _s3Ntm::P64;
           P64[Hp - 112] = _s3Ntn::P64;
           I64[Hp - 104] = sat_s3Nto_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = _s3Ntl::P64;
           P64[Hp - 48] = _s3Ntm::P64;
           P64[Hp - 40] = _s3Ntn::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 103;
           P64[Hp - 16] = Hp - 184;
           P64[Hp - 8] = Hp - 254;
           P64[Hp] = Hp - 336;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 34359738368;
         const S3NLQ_srt+624;
         const 8;
         const GHC.Read.$fRead(,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.435350353 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3URt: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)_$creadListPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3Ntz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3URC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3URD; else goto c3URE;
       c3URD: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3URE: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = P64[R1 + 54];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ntz_info" {
     sat_s3Ntz_info:
         const sat_s3Ntz_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+664;
 },
 section ""relreadonly" . u3URK_srtd" {
     u3URK_srtd:
         const S3NLQ_srt+360;
         const 40;
         const 824633720833;
 },
 GHC.Read.$fRead(,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c3URF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3URJ; else goto c3URI;
       c3URJ: // global
           HpAlloc = 64;
           R1 = GHC.Read.$fRead(,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c3URI: // global
           I64[Hp - 56] = sat_s3Ntz_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 54;
           Sp = Sp + 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 30064771072;
         const u3URK_srtd;
         const 7;
         const GHC.Read.$fRead(,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.4439586 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3US1: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)_$creadsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s3NtI_entry() //  [R1]
         { []
         }
     {offset
       c3US9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3USa; else goto c3USb;
       c3USa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3USb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NtI_info" {
     sat_s3NtI_info:
         const sat_s3NtI_entry;
         const 8;
         const 4294967311;
         const S3NLQ_srt+664;
 },
 GHC.Read.$fRead(,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c3USc: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3USg; else goto c3USf;
       c3USg: // global
           HpAlloc = 80;
           R1 = GHC.Read.$fRead(,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3USf: // global
           I64[Hp - 72] = sat_s3NtI_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 72;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 34359738368;
         const S3NLQ_srt+664;
         const 8;
         const GHC.Read.$fRead(,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.452763759 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3USy: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)_$creadList_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3NtQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3USL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3USM; else goto c3USN;
       c3USM: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3USN: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = P64[R1 + 54];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NtQ_info" {
     sat_s3NtQ_info:
         const sat_s3NtQ_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+664;
 },
 section ""relreadonly" . u3USY_srtd" {
     u3USY_srtd:
         const S3NLQ_srt+360;
         const 39;
         const 274877906945;
 },
 sat_s3NtR_entry() //  [R1]
         { []
         }
     {offset
       c3USO: // global
           _s3NtR::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3USP; else goto c3USQ;
       c3USQ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3USS; else goto c3USR;
       c3USS: // global
           HpAlloc = 64;
           goto c3USP;
       c3USP: // global
           R1 = _s3NtR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3USR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NtR::P64;
           _s3NtJ::P64 = P64[_s3NtR::P64 + 16];
           _s3NtK::P64 = P64[_s3NtR::P64 + 24];
           _s3NtL::P64 = P64[_s3NtR::P64 + 32];
           _s3NtM::P64 = P64[_s3NtR::P64 + 40];
           _s3NtN::P64 = P64[_s3NtR::P64 + 48];
           _s3NtO::P64 = P64[_s3NtR::P64 + 56];
           _s3NtP::P64 = P64[_s3NtR::P64 + 64];
           I64[Hp - 56] = sat_s3NtQ_info;
           P64[Hp - 48] = _s3NtJ::P64;
           P64[Hp - 40] = _s3NtK::P64;
           P64[Hp - 32] = _s3NtL::P64;
           P64[Hp - 24] = _s3NtM::P64;
           P64[Hp - 16] = _s3NtN::P64;
           P64[Hp - 8] = _s3NtO::P64;
           P64[Hp] = _s3NtP::P64;
           R2 = Hp - 54;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NtR_info" {
     sat_s3NtR_info:
         const sat_s3NtR_entry;
         const 7;
         const 18446744069414584335;
         const u3USY_srtd;
 },
 section ""relreadonly" . u3USZ_srtd" {
     u3USZ_srtd:
         const S3NLQ_srt+360;
         const 42;
         const 2473901162497;
 },
 GHC.Read.$fRead(,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UST: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3USX; else goto c3USW;
       c3USX: // global
           HpAlloc = 72;
           R1 = GHC.Read.$fRead(,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c3USW: // global
           I64[Hp - 64] = sat_s3NtR_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 30064771072;
         const u3USZ_srtd;
         const 7;
         const GHC.Read.$fRead(,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.466047581 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3UTl: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3Nu2_entry() //  [R1]
         { []
         }
     {offset
       c3UTt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3UTu; else goto c3UTv;
       c3UTu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UTv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)_$creadListPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nu2_info" {
     sat_s3Nu2_info:
         const sat_s3Nu2_entry;
         const 7;
         const 4294967311;
         const S3NLQ_srt+672;
 },
 sat_s3Nu1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UTB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3UTC; else goto c3UTD;
       c3UTC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UTD: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = P64[R1 + 54];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nu1_info" {
     sat_s3Nu1_info:
         const sat_s3Nu1_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+664;
 },
 sat_s3Nu0_entry() //  [R1]
         { []
         }
     {offset
       c3UTI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3UTJ; else goto c3UTK;
       c3UTJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UTK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)_$creadList_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nu0_info" {
     sat_s3Nu0_info:
         const sat_s3Nu0_entry;
         const 7;
         const 4294967311;
         const S3NLQ_srt+688;
 },
 sat_s3NtZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UTQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3UTR; else goto c3UTS;
       c3UTR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UTS: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 55];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,,)_$creadsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NtZ_info" {
     sat_s3NtZ_info:
         const sat_s3NtZ_entry;
         const 7;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+680;
 },
 GHC.Read.$fRead(,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UTU: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c3UTY; else goto c3UTX;
       c3UTY: // global
           HpAlloc = 312;
           R1 = GHC.Read.$fRead(,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c3UTX: // global
           I64[Hp - 304] = sat_s3Nu2_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           P64[Hp - 272] = R4;
           P64[Hp - 264] = R5;
           P64[Hp - 256] = R6;
           _s3NtX::P64 = P64[Sp];
           P64[Hp - 248] = _s3NtX::P64;
           _s3NtY::P64 = P64[Sp + 8];
           P64[Hp - 240] = _s3NtY::P64;
           I64[Hp - 232] = sat_s3Nu1_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           P64[Hp - 200] = R5;
           P64[Hp - 192] = R6;
           P64[Hp - 184] = _s3NtX::P64;
           P64[Hp - 176] = _s3NtY::P64;
           I64[Hp - 168] = sat_s3Nu0_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           P64[Hp - 120] = R6;
           P64[Hp - 112] = _s3NtX::P64;
           P64[Hp - 104] = _s3NtY::P64;
           I64[Hp - 96] = sat_s3NtZ_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = _s3NtX::P64;
           P64[Hp - 40] = _s3NtY::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 95;
           P64[Hp - 16] = Hp - 168;
           P64[Hp - 8] = Hp - 230;
           P64[Hp] = Hp - 304;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 30064771072;
         const S3NLQ_srt+664;
         const 7;
         const GHC.Read.$fRead(,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.479256905 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,)_$creadListPrec_info;
         const 0;
 },
 sat_s3Nu9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UUH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3UUI; else goto c3UUJ;
       c3UUI: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UUJ: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nu9_info" {
     sat_s3Nu9_info:
         const sat_s3Nu9_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+704;
 },
 section ""relreadonly" . u3UUP_srtd" {
     u3UUP_srtd:
         const S3NLQ_srt+360;
         const 45;
         const 26388279066625;
 },
 GHC.Read.$fRead(,,,,,)_$creadListPrec_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c3UUK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3UUO; else goto c3UUN;
       c3UUO: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,,)_$creadListPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3UUN: // global
           I64[Hp - 48] = sat_s3Nu9_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R2 = Hp - 46;
           Sp = Sp + 8;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 25769803802;
         const u3UUP_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.486715113 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3UV2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,)_$creadsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3Nuh_entry() //  [R1]
         { []
         }
     {offset
       c3UVa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3UVb; else goto c3UVc;
       c3UVb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UVc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nuh_info" {
     sat_s3Nuh_info:
         const sat_s3Nuh_entry;
         const 7;
         const 4294967311;
         const S3NLQ_srt+704;
 },
 GHC.Read.$fRead(,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UVd: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3UVh; else goto c3UVg;
       c3UVh: // global
           HpAlloc = 72;
           R1 = GHC.Read.$fRead(,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c3UVg: // global
           I64[Hp - 64] = sat_s3Nuh_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 30064771072;
         const S3NLQ_srt+704;
         const 7;
         const GHC.Read.$fRead(,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.494772726 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,)_$creadList_info;
         const 0;
 },
 sat_s3Nuo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UVJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3UVK; else goto c3UVL;
       c3UVK: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UVL: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nuo_info" {
     sat_s3Nuo_info:
         const sat_s3Nuo_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+704;
 },
 section ""relreadonly" . u3UVW_srtd" {
     u3UVW_srtd:
         const S3NLQ_srt+360;
         const 44;
         const 8796093022209;
 },
 sat_s3Nup_entry() //  [R1]
         { []
         }
     {offset
       c3UVM: // global
           _s3Nup::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UVN; else goto c3UVO;
       c3UVO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3UVQ; else goto c3UVP;
       c3UVQ: // global
           HpAlloc = 56;
           goto c3UVN;
       c3UVN: // global
           R1 = _s3Nup::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UVP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nup::P64;
           _s3Nui::P64 = P64[_s3Nup::P64 + 16];
           _s3Nuj::P64 = P64[_s3Nup::P64 + 24];
           _s3Nuk::P64 = P64[_s3Nup::P64 + 32];
           _s3Nul::P64 = P64[_s3Nup::P64 + 40];
           _s3Num::P64 = P64[_s3Nup::P64 + 48];
           _s3Nun::P64 = P64[_s3Nup::P64 + 56];
           I64[Hp - 48] = sat_s3Nuo_info;
           P64[Hp - 40] = _s3Nui::P64;
           P64[Hp - 32] = _s3Nuj::P64;
           P64[Hp - 24] = _s3Nuk::P64;
           P64[Hp - 16] = _s3Nul::P64;
           P64[Hp - 8] = _s3Num::P64;
           P64[Hp] = _s3Nun::P64;
           R2 = Hp - 46;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nup_info" {
     sat_s3Nup_info:
         const sat_s3Nup_entry;
         const 6;
         const 18446744069414584335;
         const u3UVW_srtd;
 },
 section ""relreadonly" . u3UVX_srtd" {
     u3UVX_srtd:
         const S3NLQ_srt+360;
         const 47;
         const 79164837199873;
 },
 GHC.Read.$fRead(,,,,,)_$creadList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UVR: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3UVV; else goto c3UVU;
       c3UVV: // global
           HpAlloc = 64;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,,)_$creadList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3UVU: // global
           I64[Hp - 56] = sat_s3Nup_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R2 = Hp - 56;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 25769803802;
         const u3UVX_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.506444692 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,)_info;
         const 0;
 },
 sat_s3Nuz_entry() //  [R1]
         { []
         }
     {offset
       c3UWm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3UWn; else goto c3UWo;
       c3UWn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UWo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)_$creadListPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nuz_info" {
     sat_s3Nuz_info:
         const sat_s3Nuz_entry;
         const 6;
         const 4294967311;
         const S3NLQ_srt+712;
 },
 sat_s3Nuy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UWu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3UWv; else goto c3UWw;
       c3UWv: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UWw: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nuy_info" {
     sat_s3Nuy_info:
         const sat_s3Nuy_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+704;
 },
 sat_s3Nux_entry() //  [R1]
         { []
         }
     {offset
       c3UWB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3UWC; else goto c3UWD;
       c3UWC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UWD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)_$creadList_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nux_info" {
     sat_s3Nux_info:
         const sat_s3Nux_entry;
         const 6;
         const 4294967311;
         const S3NLQ_srt+728;
 },
 sat_s3Nuw_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UWJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UWK; else goto c3UWL;
       c3UWK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UWL: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,,)_$creadsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nuw_info" {
     sat_s3Nuw_info:
         const sat_s3Nuw_entry;
         const 6;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+720;
 },
 GHC.Read.$fRead(,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UWN: // global
           Hp = Hp + 280;
           if (Hp > HpLim) (likely: False) goto c3UWR; else goto c3UWQ;
       c3UWR: // global
           HpAlloc = 280;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3UWQ: // global
           I64[Hp - 272] = sat_s3Nuz_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           P64[Hp - 224] = R6;
           _s3Nuv::P64 = P64[Sp];
           P64[Hp - 216] = _s3Nuv::P64;
           I64[Hp - 208] = sat_s3Nuy_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           P64[Hp - 184] = R4;
           P64[Hp - 176] = R5;
           P64[Hp - 168] = R6;
           P64[Hp - 160] = _s3Nuv::P64;
           I64[Hp - 152] = sat_s3Nux_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = _s3Nuv::P64;
           I64[Hp - 88] = sat_s3Nuw_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = _s3Nuv::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 87;
           P64[Hp - 16] = Hp - 152;
           P64[Hp - 8] = Hp - 206;
           P64[Hp] = Hp - 272;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)_info" {
     GHC.Read.$fRead(,,,,,)_info:
         const GHC.Read.$fRead(,,,,,)_entry;
         const 0;
         const 133143986190;
         const 25769803802;
         const S3NLQ_srt+704;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.518075993 UTC

[section ""data" . GHC.Read.$fRead(,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,)_$creadListPrec_info;
         const 0;
 },
 sat_s3NuF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UXu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UXv; else goto c3UXw;
       c3UXv: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UXw: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NuF_info" {
     sat_s3NuF_info:
         const sat_s3NuF_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+744;
 },
 section ""relreadonly" . u3UXC_srtd" {
     u3UXC_srtd:
         const S3NLQ_srt+360;
         const 50;
         const 844424930131969;
 },
 GHC.Read.$fRead(,,,,)_$creadListPrec_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c3UXx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3UXB; else goto c3UXA;
       c3UXB: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,)_$creadListPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UXA: // global
           I64[Hp - 40] = sat_s3NuF_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 38;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u3UXC_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.525882526 UTC

[section ""data" . GHC.Read.$fRead(,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,)_$creadsPrec_info;
         const 0;
 },
 sat_s3NuM_entry() //  [R1]
         { []
         }
     {offset
       c3UXU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3UXV; else goto c3UXW;
       c3UXV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UXW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NuM_info" {
     sat_s3NuM_info:
         const sat_s3NuM_entry;
         const 6;
         const 4294967311;
         const S3NLQ_srt+744;
 },
 GHC.Read.$fRead(,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UXX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3UY1; else goto c3UY0;
       c3UY1: // global
           HpAlloc = 64;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,)_$creadsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3UY0: // global
           I64[Hp - 56] = sat_s3NuM_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R2 = Hp - 56;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const S3NLQ_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.533054384 UTC

[section ""data" . GHC.Read.$fRead(,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,)_$creadList_info;
         const 0;
 },
 sat_s3NuS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UYp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UYq; else goto c3UYr;
       c3UYq: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UYr: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NuS_info" {
     sat_s3NuS_info:
         const sat_s3NuS_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+744;
 },
 section ""relreadonly" . u3UYC_srtd" {
     u3UYC_srtd:
         const S3NLQ_srt+360;
         const 49;
         const 281474976710657;
 },
 sat_s3NuT_entry() //  [R1]
         { []
         }
     {offset
       c3UYs: // global
           _s3NuT::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3UYt; else goto c3UYu;
       c3UYu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3UYw; else goto c3UYv;
       c3UYw: // global
           HpAlloc = 48;
           goto c3UYt;
       c3UYt: // global
           R1 = _s3NuT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UYv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NuT::P64;
           _s3NuN::P64 = P64[_s3NuT::P64 + 16];
           _s3NuO::P64 = P64[_s3NuT::P64 + 24];
           _s3NuP::P64 = P64[_s3NuT::P64 + 32];
           _s3NuQ::P64 = P64[_s3NuT::P64 + 40];
           _s3NuR::P64 = P64[_s3NuT::P64 + 48];
           I64[Hp - 40] = sat_s3NuS_info;
           P64[Hp - 32] = _s3NuN::P64;
           P64[Hp - 24] = _s3NuO::P64;
           P64[Hp - 16] = _s3NuP::P64;
           P64[Hp - 8] = _s3NuQ::P64;
           P64[Hp] = _s3NuR::P64;
           R2 = Hp - 38;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NuT_info" {
     sat_s3NuT_info:
         const sat_s3NuT_entry;
         const 5;
         const 18446744069414584335;
         const u3UYC_srtd;
 },
 section ""relreadonly" . u3UYD_srtd" {
     u3UYD_srtd:
         const S3NLQ_srt+360;
         const 52;
         const 2533274790395905;
 },
 GHC.Read.$fRead(,,,,)_$creadList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UYx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3UYB; else goto c3UYA;
       c3UYB: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,)_$creadList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UYA: // global
           I64[Hp - 48] = sat_s3NuT_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u3UYD_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.545299273 UTC

[section ""data" . GHC.Read.$fRead(,,,,)_closure" {
     GHC.Read.$fRead(,,,,)_closure:
         const GHC.Read.$fRead(,,,,)_info;
         const 0;
 },
 sat_s3Nv2_entry() //  [R1]
         { []
         }
     {offset
       c3UZ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UZ1; else goto c3UZ2;
       c3UZ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UZ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)_$creadListPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nv2_info" {
     sat_s3Nv2_info:
         const sat_s3Nv2_entry;
         const 5;
         const 4294967311;
         const S3NLQ_srt+752;
 },
 sat_s3Nv1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3UZ8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UZ9; else goto c3UZa;
       c3UZ9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UZa: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nv1_info" {
     sat_s3Nv1_info:
         const sat_s3Nv1_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+744;
 },
 sat_s3Nv0_entry() //  [R1]
         { []
         }
     {offset
       c3UZf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3UZg; else goto c3UZh;
       c3UZg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3UZh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)_$creadList_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nv0_info" {
     sat_s3Nv0_info:
         const sat_s3Nv0_entry;
         const 5;
         const 4294967311;
         const S3NLQ_srt+768;
 },
 sat_s3NuZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3UZn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3UZo; else goto c3UZp;
       c3UZo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3UZp: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Read.$fRead(,,,,)_$creadsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NuZ_info" {
     sat_s3NuZ_info:
         const sat_s3NuZ_entry;
         const 5;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+760;
 },
 GHC.Read.$fRead(,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3UZr: // global
           Hp = Hp + 248;
           if (Hp > HpLim) (likely: False) goto c3UZv; else goto c3UZu;
       c3UZv: // global
           HpAlloc = 248;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3UZu: // global
           I64[Hp - 240] = sat_s3Nv2_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           P64[Hp - 200] = R5;
           P64[Hp - 192] = R6;
           I64[Hp - 184] = sat_s3Nv1_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           I64[Hp - 136] = sat_s3Nv0_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           I64[Hp - 80] = sat_s3NuZ_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 79;
           P64[Hp - 16] = Hp - 136;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 240;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)_info" {
     GHC.Read.$fRead(,,,,)_info:
         const GHC.Read.$fRead(,,,,)_entry;
         const 0;
         const 133143986190;
         const 21474836505;
         const S3NLQ_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.558215253 UTC

[section ""data" . GHC.Read.$fRead(,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,)_$creadListPrec_info;
         const 0;
 },
 sat_s3Nv7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V04: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3V05; else goto c3V06;
       c3V05: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V06: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Read.$fRead(,,,)1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nv7_info" {
     sat_s3Nv7_info:
         const sat_s3Nv7_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+784;
 },
 section ""relreadonly" . u3V0c_srtd" {
     u3V0c_srtd:
         const S3NLQ_srt+360;
         const 55;
         const 27021597764222977;
 },
 GHC.Read.$fRead(,,,)_$creadListPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3V07: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3V0b; else goto c3V0a;
       c3V0b: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)_$creadListPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V0a: // global
           I64[Hp - 32] = sat_s3Nv7_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 30;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u3V0c_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.565763756 UTC

[section ""data" . GHC.Read.$fRead(,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,)_$creadsPrec_info;
         const 0;
 },
 sat_s3Nvd_entry() //  [R1]
         { []
         }
     {offset
       c3V0u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3V0v; else goto c3V0w;
       c3V0v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V0w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,)1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nvd_info" {
     sat_s3Nvd_info:
         const sat_s3Nvd_entry;
         const 5;
         const 4294967311;
         const S3NLQ_srt+784;
 },
 GHC.Read.$fRead(,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3V0x: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3V0B; else goto c3V0A;
       c3V0B: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)_$creadsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V0A: // global
           I64[Hp - 48] = sat_s3Nvd_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 21474836505;
         const S3NLQ_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.573693957 UTC

[section ""data" . GHC.Read.$fRead(,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,)_$creadList_info;
         const 0;
 },
 sat_s3Nvi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V0X: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3V0Y; else goto c3V0Z;
       c3V0Y: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V0Z: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Read.$fRead(,,,)1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nvi_info" {
     sat_s3Nvi_info:
         const sat_s3Nvi_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+784;
 },
 section ""relreadonly" . u3V1a_srtd" {
     u3V1a_srtd:
         const S3NLQ_srt+360;
         const 54;
         const 9007199254740993;
 },
 sat_s3Nvj_entry() //  [R1]
         { []
         }
     {offset
       c3V10: // global
           _s3Nvj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3V11; else goto c3V12;
       c3V12: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3V14; else goto c3V13;
       c3V14: // global
           HpAlloc = 40;
           goto c3V11;
       c3V11: // global
           R1 = _s3Nvj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V13: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nvj::P64;
           _s3Nve::P64 = P64[_s3Nvj::P64 + 16];
           _s3Nvf::P64 = P64[_s3Nvj::P64 + 24];
           _s3Nvg::P64 = P64[_s3Nvj::P64 + 32];
           _s3Nvh::P64 = P64[_s3Nvj::P64 + 40];
           I64[Hp - 32] = sat_s3Nvi_info;
           P64[Hp - 24] = _s3Nve::P64;
           P64[Hp - 16] = _s3Nvf::P64;
           P64[Hp - 8] = _s3Nvg::P64;
           P64[Hp] = _s3Nvh::P64;
           R2 = Hp - 30;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nvj_info" {
     sat_s3Nvj_info:
         const sat_s3Nvj_entry;
         const 4;
         const 18446744069414584335;
         const u3V1a_srtd;
 },
 section ""relreadonly" . u3V1b_srtd" {
     u3V1b_srtd:
         const S3NLQ_srt+360;
         const 57;
         const 81064793292668929;
 },
 GHC.Read.$fRead(,,,)_$creadList_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3V15: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3V19; else goto c3V18;
       c3V19: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)_$creadList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V18: // global
           I64[Hp - 40] = sat_s3Nvj_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u3V1b_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.585638413 UTC

[section ""data" . GHC.Read.$fRead(,,,)_closure" {
     GHC.Read.$fRead(,,,)_closure:
         const GHC.Read.$fRead(,,,)_info;
         const 0;
 },
 sat_s3Nvr_entry() //  [R1]
         { []
         }
     {offset
       c3V1y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V1z; else goto c3V1A;
       c3V1z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V1A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)_$creadListPrec_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nvr_info" {
     sat_s3Nvr_info:
         const sat_s3Nvr_entry;
         const 4;
         const 4294967311;
         const S3NLQ_srt+792;
 },
 sat_s3Nvq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V1G: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3V1H; else goto c3V1I;
       c3V1H: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V1I: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Read.$fRead(,,,)1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nvq_info" {
     sat_s3Nvq_info:
         const sat_s3Nvq_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+784;
 },
 sat_s3Nvp_entry() //  [R1]
         { []
         }
     {offset
       c3V1N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V1O; else goto c3V1P;
       c3V1O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V1P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)_$creadList_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nvp_info" {
     sat_s3Nvp_info:
         const sat_s3Nvp_entry;
         const 4;
         const 4294967311;
         const S3NLQ_srt+808;
 },
 sat_s3Nvo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3V1V: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,,,)_$creadsPrec_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nvo_info" {
     sat_s3Nvo_info:
         const sat_s3Nvo_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+800;
 },
 GHC.Read.$fRead(,,,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3V1Z: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c3V23; else goto c3V22;
       c3V23: // global
           HpAlloc = 216;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V22: // global
           I64[Hp - 208] = sat_s3Nvr_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           P64[Hp - 168] = R5;
           I64[Hp - 160] = sat_s3Nvq_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = sat_s3Nvp_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           I64[Hp - 72] = sat_s3Nvo_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 71;
           P64[Hp - 16] = Hp - 120;
           P64[Hp - 8] = Hp - 158;
           P64[Hp] = Hp - 208;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)_info" {
     GHC.Read.$fRead(,,,)_info:
         const GHC.Read.$fRead(,,,)_entry;
         const 0;
         const 133143986190;
         const 17179869208;
         const S3NLQ_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.598813096 UTC

[section ""data" . GHC.Read.$fRead(,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,)_$creadListPrec_info;
         const 0;
 },
 sat_s3Nvv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V2B: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,,)1_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nvv_info" {
     sat_s3Nvv_info:
         const sat_s3Nvv_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+824;
 },
 section ""relreadonly" . u3V2J_srtd" {
     u3V2J_srtd:
         const S3NLQ_srt+360;
         const 60;
         const 864691128455135233;
 },
 GHC.Read.$fRead(,,)_$creadListPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3V2E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3V2I; else goto c3V2H;
       c3V2I: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V2H: // global
           I64[Hp - 24] = sat_s3Nvv_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 22;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3V2J_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.605995981 UTC

[section ""data" . GHC.Read.$fRead(,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,)_$creadsPrec_info;
         const 0;
 },
 sat_s3NvA_entry() //  [R1]
         { []
         }
     {offset
       c3V30: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V31; else goto c3V32;
       c3V31: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V32: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,)1_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NvA_info" {
     sat_s3NvA_info:
         const sat_s3NvA_entry;
         const 4;
         const 4294967311;
         const S3NLQ_srt+824;
 },
 GHC.Read.$fRead(,,)_$creadsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3V33: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3V37; else goto c3V36;
       c3V37: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)_$creadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V36: // global
           I64[Hp - 40] = sat_s3NvA_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const S3NLQ_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.613459494 UTC

[section ""data" . GHC.Read.$fRead(,,)_$creadList_closure" {
     GHC.Read.$fRead(,,)_$creadList_closure:
         const GHC.Read.$fRead(,,)_$creadList_info;
         const 0;
 },
 sat_s3NvE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V3t: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,,)1_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NvE_info" {
     sat_s3NvE_info:
         const sat_s3NvE_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+824;
 },
 section ""relreadonly" . u3V3G_srtd" {
     u3V3G_srtd:
         const S3NLQ_srt+360;
         const 59;
         const 288230376151711745;
 },
 sat_s3NvF_entry() //  [R1]
         { []
         }
     {offset
       c3V3w: // global
           _s3NvF::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3V3x; else goto c3V3y;
       c3V3y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3V3A; else goto c3V3z;
       c3V3A: // global
           HpAlloc = 32;
           goto c3V3x;
       c3V3x: // global
           R1 = _s3NvF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V3z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NvF::P64;
           _s3NvB::P64 = P64[_s3NvF::P64 + 16];
           _s3NvC::P64 = P64[_s3NvF::P64 + 24];
           _s3NvD::P64 = P64[_s3NvF::P64 + 32];
           I64[Hp - 24] = sat_s3NvE_info;
           P64[Hp - 16] = _s3NvB::P64;
           P64[Hp - 8] = _s3NvC::P64;
           P64[Hp] = _s3NvD::P64;
           R2 = Hp - 22;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NvF_info" {
     sat_s3NvF_info:
         const sat_s3NvF_entry;
         const 3;
         const 18446744069414584335;
         const u3V3G_srtd;
 },
 section ""relreadonly" . u3V3H_srtd" {
     u3V3H_srtd:
         const S3NLQ_srt+360;
         const 62;
         const 2594073385365405697;
 },
 GHC.Read.$fRead(,,)_$creadList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3V3B: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3V3F; else goto c3V3E;
       c3V3F: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V3E: // global
           I64[Hp - 32] = sat_s3NvF_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)_$creadList_info" {
     GHC.Read.$fRead(,,)_$creadList_info:
         const GHC.Read.$fRead(,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3V3H_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.624755593 UTC

[section ""data" . GHC.Read.$fRead(,,)_closure" {
     GHC.Read.$fRead(,,)_closure:
         const GHC.Read.$fRead(,,)_info;
         const 0;
 },
 sat_s3NvM_entry() //  [R1]
         { []
         }
     {offset
       c3V43: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V44; else goto c3V45;
       c3V44: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V45: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,)_$creadListPrec_entry(R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NvM_info" {
     sat_s3NvM_info:
         const sat_s3NvM_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+832;
 },
 sat_s3NvL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V4b: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,,)1_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NvL_info" {
     sat_s3NvL_info:
         const sat_s3NvL_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+824;
 },
 sat_s3NvK_entry() //  [R1]
         { []
         }
     {offset
       c3V4i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V4j; else goto c3V4k;
       c3V4j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V4k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,)_$creadList_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NvK_info" {
     sat_s3NvK_info:
         const sat_s3NvK_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+848;
 },
 sat_s3NvJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3V4q: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,,)_$creadsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NvJ_info" {
     sat_s3NvJ_info:
         const sat_s3NvJ_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+840;
 },
 GHC.Read.$fRead(,,)_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3V4u: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c3V4y; else goto c3V4x;
       c3V4y: // global
           HpAlloc = 184;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V4x: // global
           I64[Hp - 176] = sat_s3NvM_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_s3NvL_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_s3NvK_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = sat_s3NvJ_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           P64[Hp - 8] = Hp - 134;
           P64[Hp] = Hp - 176;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)_info" {
     GHC.Read.$fRead(,,)_info:
         const GHC.Read.$fRead(,,)_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const S3NLQ_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.637877063 UTC

[section ""data" . GHC.Read.$fRead(,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,)_$creadListPrec_info;
         const 0;
 },
 sat_s3NvP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V55: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NvP_info" {
     sat_s3NvP_info:
         const sat_s3NvP_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3NLQ_srt+864;
 },
 section ""relreadonly" . u3V5d_srtd" {
     u3V5d_srtd:
         const S3NLQ_srt+360;
         const 65;
         const 9223372036854775809;
         const 1;
 },
 GHC.Read.$fRead(,)_$creadListPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3V58: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3V5c; else goto c3V5b;
       c3V5c: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V5b: // global
           I64[Hp - 16] = sat_s3NvP_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)_$creadListPrec_info" {
     GHC.Read.$fRead(,)_$creadListPrec_info:
         const GHC.Read.$fRead(,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3V5d_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.645808036 UTC

[section ""data" . GHC.Read.$fRead(,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,)_$creadsPrec_info;
         const 0;
 },
 sat_s3NvT_entry() //  [R1]
         { []
         }
     {offset
       c3V5u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V5v; else goto c3V5w;
       c3V5v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V5w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NvT_info" {
     sat_s3NvT_info:
         const sat_s3NvT_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+864;
 },
 GHC.Read.$fRead(,)_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3V5x: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3V5B; else goto c3V5A;
       c3V5B: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V5A: // global
           I64[Hp - 32] = sat_s3NvT_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)_$creadsPrec_info" {
     GHC.Read.$fRead(,)_$creadsPrec_info:
         const GHC.Read.$fRead(,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3NLQ_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.653409163 UTC

[section ""data" . GHC.Read.$fRead(,)_$creadList_closure" {
     GHC.Read.$fRead(,)_$creadList_closure:
         const GHC.Read.$fRead(,)_$creadList_info;
         const 0;
 },
 sat_s3NvW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V5X: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NvW_info" {
     sat_s3NvW_info:
         const sat_s3NvW_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3NLQ_srt+864;
 },
 section ""relreadonly" . u3V6a_srtd" {
     u3V6a_srtd:
         const S3NLQ_srt+360;
         const 64;
         const 9223372036854775809;
 },
 sat_s3NvX_entry() //  [R1]
         { []
         }
     {offset
       c3V60: // global
           _s3NvX::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3V61; else goto c3V62;
       c3V62: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3V64; else goto c3V63;
       c3V64: // global
           HpAlloc = 24;
           goto c3V61;
       c3V61: // global
           R1 = _s3NvX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V63: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NvX::P64;
           _s3NvU::P64 = P64[_s3NvX::P64 + 16];
           _s3NvV::P64 = P64[_s3NvX::P64 + 24];
           I64[Hp - 16] = sat_s3NvW_info;
           P64[Hp - 8] = _s3NvU::P64;
           P64[Hp] = _s3NvV::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NvX_info" {
     sat_s3NvX_info:
         const sat_s3NvX_entry;
         const 2;
         const 18446744069414584338;
         const u3V6a_srtd;
 },
 section ""relreadonly" . u3V6b_srtd" {
     u3V6b_srtd:
         const S3NLQ_srt+360;
         const 67;
         const 9223372036854775809;
         const 4;
 },
 GHC.Read.$fRead(,)_$creadList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3V65: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3V69; else goto c3V68;
       c3V69: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V68: // global
           I64[Hp - 24] = sat_s3NvX_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)_$creadList_info" {
     GHC.Read.$fRead(,)_$creadList_info:
         const GHC.Read.$fRead(,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3V6b_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.663895324 UTC

[section ""data" . GHC.Read.$fRead(,)_closure" {
     GHC.Read.$fRead(,)_closure:
         const GHC.Read.$fRead(,)_info;
         const 0;
 },
 sat_s3Nw3_entry() //  [R1]
         { []
         }
     {offset
       c3V6x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V6y; else goto c3V6z;
       c3V6y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V6z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)_$creadListPrec_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nw3_info" {
     sat_s3Nw3_info:
         const sat_s3Nw3_entry;
         const 2;
         const 4294967314;
         const S3NLQ_srt+872;
 },
 sat_s3Nw2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3V6F: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nw2_info" {
     sat_s3Nw2_info:
         const sat_s3Nw2_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3NLQ_srt+864;
 },
 sat_s3Nw1_entry() //  [R1]
         { []
         }
     {offset
       c3V6M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V6N; else goto c3V6O;
       c3V6N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V6O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)_$creadList_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nw1_info" {
     sat_s3Nw1_info:
         const sat_s3Nw1_entry;
         const 2;
         const 4294967314;
         const S3NLQ_srt+888;
 },
 sat_s3Nw0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3V6U: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,)_$creadsPrec_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nw0_info" {
     sat_s3Nw0_info:
         const sat_s3Nw0_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3NLQ_srt+880;
 },
 GHC.Read.$fRead(,)_entry() //  [R2, R3]
         { []
         }
     {offset
       c3V6Y: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3V72; else goto c3V71;
       c3V72: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3V71: // global
           I64[Hp - 144] = sat_s3Nw3_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s3Nw2_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s3Nw1_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s3Nw0_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)_info" {
     GHC.Read.$fRead(,)_info:
         const GHC.Read.$fRead(,)_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S3NLQ_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.675009935 UTC

[section ""data" . GHC.Read.$fReadLexeme_$creadListPrec_closure" {
     GHC.Read.$fReadLexeme_$creadListPrec_closure:
         const GHC.Read.$fReadLexeme_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadLexeme_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3V7w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V7x; else goto c3V7y;
       c3V7x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V7y: // global
           (_c3V7t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3V7t::I64 == 0) goto c3V7v; else goto c3V7u;
       c3V7v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3V7u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3V7t::I64;
           R2 = GHC.Read.$fReadLexeme1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_$creadListPrec_info" {
     GHC.Read.$fReadLexeme_$creadListPrec_info:
         const GHC.Read.$fReadLexeme_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S3NLQ_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.678814243 UTC

[section ""data" . GHC.Read.$fReadLexeme_lvl117_closure" {
     GHC.Read.$fReadLexeme_lvl117_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const Text.Read.Lex.EOF_closure+7;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.68190144 UTC

[section ""data" . GHC.Read.$fReadLexeme8_closure" {
     GHC.Read.$fReadLexeme8_closure:
         const GHC.Read.$fReadLexeme8_info;
 },
 GHC.Read.$fReadLexeme8_entry() //  [R2]
         { []
         }
     {offset
       c3V7S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3V7T; else goto c3V7U;
       c3V7T: // global
           R2 = R2;
           R1 = GHC.Read.$fReadLexeme8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3V7U: // global
           I64[Sp - 8] = block_c3V7L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3V81; else goto c3V7M;
       u3V81: // global
           call _c3V7L(R1) args: 0, res: 0, upd: 0;
       c3V7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme8_info" {
     GHC.Read.$fReadLexeme8_info:
         const GHC.Read.$fReadLexeme8_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3V7L() //  [R1]
         { []
         }
     {offset
       c3V7L: // global
           if (R1 & 7 == 1) goto c3V7P; else goto c3V7Q;
       c3V7P: // global
           R1 = GHC.Read.$fReadLexeme_lvl117_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3V7Q: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3V7L_info" {
     block_c3V7L_info:
         const _c3V7L;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.687578707 UTC

[section ""data" . GHC.Read.$fReadLexeme7_closure" {
     GHC.Read.$fReadLexeme7_closure:
         const Text.ParserCombinators.ReadP.Look_con_info;
         const GHC.Read.$fReadLexeme8_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.690417369 UTC

[section ""data" . GHC.Read.$fReadLexeme6_closure" {
     GHC.Read.$fReadLexeme6_closure:
         const GHC.Read.$fReadLexeme6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadLexeme6_entry() //  [R1]
         { []
         }
     {offset
       c3V8m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V8n; else goto c3V8o;
       c3V8n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V8o: // global
           (_c3V8j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3V8j::I64 == 0) goto c3V8l; else goto c3V8k;
       c3V8l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3V8k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3V8j::I64;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme6_info" {
     GHC.Read.$fReadLexeme6_info:
         const GHC.Read.$fReadLexeme6_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.695189721 UTC

[section ""data" . GHC.Read.$fReadLexeme_lvl116_closure" {
     GHC.Read.$fReadLexeme_lvl116_closure:
         const GHC.Read.$fReadLexeme_lvl116_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadLexeme_lvl116_entry() //  [R1]
         { []
         }
     {offset
       c3V8C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V8D; else goto c3V8E;
       c3V8D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V8E: // global
           (_c3V8z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3V8z::I64 == 0) goto c3V8B; else goto c3V8A;
       c3V8B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3V8A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3V8z::I64;
           R3 = GHC.Read.$fReadLexeme6_closure;
           R2 = GHC.Read.$fReadLexeme7_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_lvl116_info" {
     GHC.Read.$fReadLexeme_lvl116_info:
         const GHC.Read.$fReadLexeme_lvl116_entry;
         const 0;
         const 12884901909;
         const S3NLQ_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.700085085 UTC

[section ""data" . GHC.Read.$fReadLexeme_k_closure" {
     GHC.Read.$fReadLexeme_k_closure:
         const GHC.Read.$fReadLexeme_k_info;
         const 0;
 },
 GHC.Read.$fReadLexeme_k_entry() //  []
         { []
         }
     {offset
       c3V8Q: // global
           R1 = GHC.Read.$fReadLexeme_lvl116_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_k_info" {
     GHC.Read.$fReadLexeme_k_info:
         const GHC.Read.$fReadLexeme_k_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+944;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.704073732 UTC

[section ""data" . GHC.Read.$fReadLexeme5_closure" {
     GHC.Read.$fReadLexeme5_closure:
         const GHC.Read.$fReadLexeme5_info;
         const 0;
 },
 GHC.Read.$fReadLexeme5_entry() //  [R2]
         { []
         }
     {offset
       c3V92: // global
           R3 = GHC.Read.$fReadLexeme_k_closure+1;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme5_info" {
     GHC.Read.$fReadLexeme5_info:
         const GHC.Read.$fReadLexeme5_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+952;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.70764907 UTC

[section ""data" . GHC.Read.$fReadLexeme4_closure" {
     GHC.Read.$fReadLexeme4_closure:
         const Text.ParserCombinators.ReadP.Look_con_info;
         const GHC.Read.$fReadLexeme5_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.710379581 UTC

[section ""data" . GHC.Read.$fReadLexeme3_closure" {
     GHC.Read.$fReadLexeme3_closure:
         const GHC.Read.$fReadLexeme3_info;
         const 0;
 },
 GHC.Read.$fReadLexeme3_entry() //  [R2]
         { []
         }
     {offset
       c3V9e: // global
           R3 = R2;
           R2 = GHC.Read.$fReadLexeme4_closure+2;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme3_info" {
     GHC.Read.$fReadLexeme3_info:
         const GHC.Read.$fReadLexeme3_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.714051281 UTC

[section ""data" . GHC.Read.$fReadLexeme_$creadsPrec_closure" {
     GHC.Read.$fReadLexeme_$creadsPrec_closure:
         const GHC.Read.$fReadLexeme_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fReadLexeme_$creadsPrec_entry() //  [R3]
         { []
         }
     {offset
       c3V9p: // global
           R2 = R3;
           call GHC.Read.$fReadLexeme3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_$creadsPrec_info" {
     GHC.Read.$fReadLexeme_$creadsPrec_info:
         const GHC.Read.$fReadLexeme_$creadsPrec_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.717777783 UTC

[section ""data" . GHC.Read.$fReadLexeme2_closure" {
     GHC.Read.$fReadLexeme2_closure:
         const GHC.Read.$fReadLexeme2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadLexeme2_entry() //  [R1]
         { []
         }
     {offset
       c3V9C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3V9D; else goto c3V9E;
       c3V9D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3V9E: // global
           (_c3V9z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3V9z::I64 == 0) goto c3V9B; else goto c3V9A;
       c3V9B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3V9A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3V9z::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadLexeme_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme2_info" {
     GHC.Read.$fReadLexeme2_info:
         const GHC.Read.$fReadLexeme2_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+976;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.721948905 UTC

[section ""data" . GHC.Read.$fReadLexeme_$creadList_closure" {
     GHC.Read.$fReadLexeme_$creadList_closure:
         const GHC.Read.$fReadLexeme_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadLexeme_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3V9Q: // global
           R3 = R2;
           R2 = GHC.Read.$fReadLexeme2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_$creadList_info" {
     GHC.Read.$fReadLexeme_$creadList_info:
         const GHC.Read.$fReadLexeme_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.725083296 UTC

[section ""data" . GHC.Read.$fReadLexeme_closure" {
     GHC.Read.$fReadLexeme_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadLexeme_$creadsPrec_closure+2;
         const GHC.Read.$fReadLexeme_$creadList_closure+1;
         const GHC.Read.$fReadLexeme1_closure+2;
         const GHC.Read.$fReadLexeme_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.728621297 UTC

[section ""data" . GHC.Read.$dmreadList_closure" {
     GHC.Read.$dmreadList_closure:
         const GHC.Read.$dmreadList_info;
         const 0;
 },
 sat_s3Nwc_entry() //  [R1]
         { []
         }
     {offset
       c3Vaa: // global
           R2 = P64[R1 + 16];
           call GHC.Read.readPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nwc_info" {
     sat_s3Nwc_info:
         const sat_s3Nwc_entry;
         const 1;
         const 16;
 },
 sat_s3Nwd_entry() //  [R1]
         { []
         }
     {offset
       c3Vad: // global
           _s3Nwd::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Vae; else goto c3Vaf;
       c3Vaf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Vah; else goto c3Vag;
       c3Vah: // global
           HpAlloc = 24;
           goto c3Vae;
       c3Vae: // global
           R1 = _s3Nwd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vag: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nwd::P64;
           _s3Nwb::P64 = P64[_s3Nwd::P64 + 16];
           I64[Hp - 16] = sat_s3Nwc_info;
           P64[Hp] = _s3Nwb::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nwd_info" {
     sat_s3Nwd_info:
         const sat_s3Nwd_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+904;
 },
 GHC.Read.$dmreadList_entry() //  [R2]
         { []
         }
     {offset
       c3Vai: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Vam; else goto c3Val;
       c3Vam: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$dmreadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Val: // global
           I64[Hp - 16] = sat_s3Nwd_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$dmreadList_info" {
     GHC.Read.$dmreadList_info:
         const GHC.Read.$dmreadList_entry;
         const 0;
         const 8800387989518;
         const 4294967301;
         const S3NLQ_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.746292522 UTC

[section ""data" . GHC.Read.$fReadInteger_$sreadNumber_closure" {
     GHC.Read.$fReadInteger_$sreadNumber_closure:
         const GHC.Read.$fReadInteger_$sreadNumber_info;
         const 0;
 },
 sat_s3Nwn_entry() //  [R1]
         { []
         }
     {offset
       c3VaY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VaZ; else goto c3Vb0;
       c3VaZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vb0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nwn_info" {
     sat_s3Nwn_info:
         const sat_s3Nwn_entry;
         const 1;
         const 16;
 },
 lvl3_s3Nwl_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vb1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Vb5; else goto c3Vb4;
       c3Vb5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vb4: // global
           _s3Nwi::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3Nwn_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = _s3Nwi::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3Nwl_info" {
     lvl3_s3Nwl_info:
         const lvl3_s3Nwl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3Nwo_entry() //  [R1]
         { []
         }
     {offset
       c3Vba: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vbb; else goto c3Vbc;
       c3Vbb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vbc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3Nwo_info" {
     lvl117_s3Nwo_info:
         const lvl117_s3Nwo_entry;
         const 3;
         const 15;
 },
 sat_s3Nww_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vbm: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nww_info" {
     sat_s3Nww_info:
         const sat_s3Nww_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3Nwx_entry() //  [R1]
         { []
         }
     {offset
       c3Vbp: // global
           _s3Nwx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vbq; else goto c3Vbr;
       c3Vbr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Vbt; else goto c3Vbs;
       c3Vbt: // global
           HpAlloc = 32;
           goto c3Vbq;
       c3Vbq: // global
           R1 = _s3Nwx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vbs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nwx::P64;
           _s3Nwe::P64 = P64[_s3Nwx::P64 + 16];
           _s3Nwh::P64 = P64[_s3Nwx::P64 + 24];
           _s3Nwl::P64 = P64[_s3Nwx::P64 + 32];
           I64[Hp - 24] = sat_s3Nww_info;
           P64[Hp - 16] = _s3Nwe::P64;
           P64[Hp - 8] = _s3Nwh::P64;
           P64[Hp] = _s3Nwl::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nwx_info" {
     sat_s3Nwx_info:
         const sat_s3Nwx_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+920;
 },
 sat_s3Nwt_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VbG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VbH; else goto c3VbI;
       c3VbH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VbI: // global
           I64[Sp - 16] = block_c3Vbz_info;
           _s3Nwo::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Nwo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VbP; else goto c3VbA;
       u3VbP: // global
           call _c3Vbz(R1) args: 0, res: 0, upd: 0;
       c3VbA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nwt_info" {
     sat_s3Nwt_info:
         const sat_s3Nwt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Vbz() //  [R1]
         { []
         }
     {offset
       c3Vbz: // global
           if (R1 & 7 == 1) goto c3VbD; else goto c3VbE;
       c3VbD: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VbE: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vbz_info" {
     block_c3Vbz_info:
         const _c3Vbz;
         const 1;
         const 30;
 },
 lvl2_s3Nwk_entry() //  [R1]
         { []
         }
     {offset
       c3VbR: // global
           _s3Nwk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VbS; else goto c3VbT;
       c3VbT: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3VbV; else goto c3VbU;
       c3VbV: // global
           HpAlloc = 128;
           goto c3VbS;
       c3VbS: // global
           R1 = _s3Nwk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VbU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nwk::P64;
           _s3Nwe::P64 = P64[_s3Nwk::P64 + 16];
           _s3Nwh::P64 = P64[_s3Nwk::P64 + 24];
           _s3Nwi::P64 = P64[_s3Nwk::P64 + 32];
           I64[Hp - 120] = lvl3_s3Nwl_info;
           P64[Hp - 112] = _s3Nwi::P64;
           I64[Hp - 104] = lvl117_s3Nwo_info;
           P64[Hp - 88] = _s3Nwe::P64;
           P64[Hp - 80] = _s3Nwh::P64;
           _c3VaP::P64 = Hp - 119;
           P64[Hp - 72] = _c3VaP::P64;
           I64[Hp - 64] = sat_s3Nwx_info;
           P64[Hp - 48] = _s3Nwe::P64;
           P64[Hp - 40] = _s3Nwh::P64;
           P64[Hp - 32] = _c3VaP::P64;
           I64[Hp - 24] = sat_s3Nwt_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3Nwk_info" {
     lvl2_s3Nwk_info:
         const lvl2_s3Nwk_entry;
         const 3;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3Nwy_entry() //  [R1]
         { []
         }
     {offset
       c3Vc1: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Nwy_info" {
     k_s3Nwy_info:
         const k_s3Nwy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3NwA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vc9: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3NwA_info" {
     lvl3_s3NwA_info:
         const lvl3_s3NwA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3NwD_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vcp: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3Vcq; else goto c3Vcr;
       c3Vcq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vcr: // global
           I64[Sp - 40] = block_c3Vci_info;
           _s3Nwe::P64 = P64[R1 + 7];
           _s3Nwh::P64 = P64[R1 + 15];
           _s3Nwi::P64 = P64[R1 + 23];
           _s3NwC::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3Nwe::P64;
           P64[Sp - 24] = _s3Nwh::P64;
           P64[Sp - 16] = _s3Nwi::P64;
           P64[Sp - 8] = _s3NwC::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Vdg; else goto c3Vcj;
       u3Vdg: // global
           call _c3Vci(R1) args: 0, res: 0, upd: 0;
       c3Vcj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3NwD_info" {
     w2_s3NwD_info:
         const w2_s3NwD_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c3Vci() //  [R1]
         { []
         }
     {offset
       c3Vci: // global
           if (R1 & 7 == 5) goto c3Vcn; else goto u3Vda;
       c3Vcn: // global
           I64[Sp - 8] = block_c3Vcx_info;
           _s3NwF::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3NwF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Vde; else goto c3Vcz;
       u3Vde: // global
           call _c3Vcx(R1) args: 0, res: 0, upd: 0;
       c3Vcz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Vda: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3Vd7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Vci_info" {
     block_c3Vci_info:
         const _c3Vci;
         const 4;
         const 30;
 },
 _c3Vcx() //  [R1]
         { []
         }
     {offset
       c3Vcx: // global
           if (R1 & 7 == 1) goto u3Vdb; else goto c3VcK;
       u3Vdb: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3Vd7() args: 0, res: 0, upd: 0;
       c3VcK: // global
           I64[Sp - 8] = block_c3VcI_info;
           _s3NwJ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NwJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Vdh; else goto c3VcL;
       u3Vdh: // global
           call _c3VcI(R1) args: 0, res: 0, upd: 0;
       c3VcL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vcx_info" {
     block_c3Vcx_info:
         const _c3Vcx;
         const 5;
         const 30;
 },
 _c3VcI() //  [R1]
         { []
         }
     {offset
       c3VcI: // global
           if (I64[R1 + 7] == 45) goto c3VcW; else goto u3Vdc;
       c3VcW: // global
           _s3NwJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3VcV_info;
           R1 = _s3NwJ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Vdj; else goto c3VcX;
       u3Vdj: // global
           call _c3VcV(R1) args: 0, res: 0, upd: 0;
       c3VcX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Vdc: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c3Vd7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VcI_info" {
     block_c3VcI_info:
         const _c3VcI;
         const 6;
         const 30;
 },
 _c3VcV() //  [R1]
         { []
         }
     {offset
       c3VcV: // global
           if (R1 & 7 == 1) goto c3Vd3; else goto u3Vdd;
       c3Vd3: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Vdd: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3Vd7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VcV_info" {
     block_c3VcV_info:
         const _c3VcV;
         const 5;
         const 30;
 },
 _c3Vd7() //  []
         { []
         }
     {offset
       c3Vd7: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3NwQ_entry() //  [R1]
         { []
         }
     {offset
       c3Vdq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vdr; else goto c3Vds;
       c3Vdr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vds: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3NwD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3NwQ_info" {
     lvl117_s3NwQ_info:
         const lvl117_s3NwQ_entry;
         const 1;
         const 16;
 },
 sat_s3NwX_entry() //  [R1]
         { []
         }
     {offset
       c3Vdx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vdy; else goto c3Vdz;
       c3Vdy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vdz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NwX_info" {
     sat_s3NwX_info:
         const sat_s3NwX_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+920;
 },
 sat_s3NwV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VdM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VdN; else goto c3VdO;
       c3VdN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VdO: // global
           I64[Sp - 16] = block_c3VdF_info;
           _s3NwQ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3NwQ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VdV; else goto c3VdG;
       u3VdV: // global
           call _c3VdF(R1) args: 0, res: 0, upd: 0;
       c3VdG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NwV_info" {
     sat_s3NwV_info:
         const sat_s3NwV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3VdF() //  [R1]
         { []
         }
     {offset
       c3VdF: // global
           if (R1 & 7 == 1) goto c3VdJ; else goto c3VdK;
       c3VdJ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VdK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3VdF_info" {
     block_c3VdF_info:
         const _c3VdF;
         const 1;
         const 30;
 },
 lvl116_s3Nwj_entry() //  [R1]
         { []
         }
     {offset
       c3VdX: // global
           _s3Nwj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VdY; else goto c3VdZ;
       c3VdZ: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c3Ve1; else goto c3Ve0;
       c3Ve1: // global
           HpAlloc = 208;
           goto c3VdY;
       c3VdY: // global
           R1 = _s3Nwj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ve0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nwj::P64;
           _s3Nwe::P64 = P64[_s3Nwj::P64 + 16];
           _s3Nwh::P64 = P64[_s3Nwj::P64 + 24];
           _s3Nwi::P64 = P64[_s3Nwj::P64 + 32];
           I64[Hp - 200] = lvl2_s3Nwk_info;
           P64[Hp - 184] = _s3Nwe::P64;
           P64[Hp - 176] = _s3Nwh::P64;
           P64[Hp - 168] = _s3Nwi::P64;
           I64[Hp - 160] = k_s3Nwy_info;
           P64[Hp - 152] = Hp - 200;
           I64[Hp - 144] = lvl3_s3NwA_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3NwD_info;
           P64[Hp - 104] = _s3Nwe::P64;
           P64[Hp - 96] = _s3Nwh::P64;
           P64[Hp - 88] = _s3Nwi::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3NwQ_info;
           _c3Vcd::P64 = Hp - 111;
           P64[Hp - 56] = _c3Vcd::P64;
           I64[Hp - 48] = sat_s3NwX_info;
           P64[Hp - 32] = _c3Vcd::P64;
           I64[Hp - 24] = sat_s3NwV_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Nwj_info" {
     lvl116_s3Nwj_info:
         const lvl116_s3Nwj_entry;
         const 3;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3NwY_entry() //  [R1]
         { []
         }
     {offset
       c3Ve7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3NwY_info" {
     k_s3NwY_info:
         const k_s3NwY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Nx1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vef: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nx1_info" {
     sat_s3Nx1_info:
         const sat_s3Nx1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Nx2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Vej: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3Ven; else goto c3Vem;
       c3Ven: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Vem: // global
           _s3Nwe::P64 = P64[R1 + 6];
           I64[Hp - 80] = lvl116_s3Nwj_info;
           P64[Hp - 64] = _s3Nwe::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3NwY_info;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3Nx1_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nx2_info" {
     sat_s3Nx2_info:
         const sat_s3Nx2_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S3NLQ_srt+920;
 },
 section ""relreadonly" . u3Vet_srtd" {
     u3Vet_srtd:
         const S3NLQ_srt+216;
         const 99;
         const 1;
         const 17263755264;
 },
 GHC.Read.$fReadInteger_$sreadNumber_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Veo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ves; else goto c3Ver;
       c3Ves: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadInteger_$sreadNumber_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ver: // global
           I64[Hp - 8] = sat_s3Nx2_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger_$sreadNumber_info" {
     GHC.Read.$fReadInteger_$sreadNumber_info:
         const GHC.Read.$fReadInteger_$sreadNumber_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3Vet_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.79957943 UTC

[section ""data" . GHC.Read.$fReadDouble_$sreadNumber_closure" {
     GHC.Read.$fReadDouble_$sreadNumber_closure:
         const GHC.Read.$fReadDouble_$sreadNumber_info;
         const 0;
 },
 sat_s3Nxc_entry() //  [R1]
         { []
         }
     {offset
       c3VgY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VgZ; else goto c3Vh0;
       c3VgZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vh0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.negateDouble_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nxc_info" {
     sat_s3Nxc_info:
         const sat_s3Nxc_entry;
         const 1;
         const 16;
 },
 lvl3_s3Nxa_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vh1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Vh5; else goto c3Vh4;
       c3Vh5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vh4: // global
           _s3Nx7::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3Nxc_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = _s3Nx7::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3Nxa_info" {
     lvl3_s3Nxa_info:
         const lvl3_s3Nxa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3Nxd_entry() //  [R1]
         { []
         }
     {offset
       c3Vha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vhb; else goto c3Vhc;
       c3Vhb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vhc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3Nxd_info" {
     lvl117_s3Nxd_info:
         const lvl117_s3Nxd_entry;
         const 3;
         const 15;
 },
 sat_s3Nxl_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vhm: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nxl_info" {
     sat_s3Nxl_info:
         const sat_s3Nxl_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3Nxm_entry() //  [R1]
         { []
         }
     {offset
       c3Vhp: // global
           _s3Nxm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vhq; else goto c3Vhr;
       c3Vhr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Vht; else goto c3Vhs;
       c3Vht: // global
           HpAlloc = 32;
           goto c3Vhq;
       c3Vhq: // global
           R1 = _s3Nxm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vhs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nxm::P64;
           _s3Nx3::P64 = P64[_s3Nxm::P64 + 16];
           _s3Nx6::P64 = P64[_s3Nxm::P64 + 24];
           _s3Nxa::P64 = P64[_s3Nxm::P64 + 32];
           I64[Hp - 24] = sat_s3Nxl_info;
           P64[Hp - 16] = _s3Nx3::P64;
           P64[Hp - 8] = _s3Nx6::P64;
           P64[Hp] = _s3Nxa::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nxm_info" {
     sat_s3Nxm_info:
         const sat_s3Nxm_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+920;
 },
 sat_s3Nxi_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VhG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VhH; else goto c3VhI;
       c3VhH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VhI: // global
           I64[Sp - 16] = block_c3Vhz_info;
           _s3Nxd::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Nxd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VhP; else goto c3VhA;
       u3VhP: // global
           call _c3Vhz(R1) args: 0, res: 0, upd: 0;
       c3VhA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nxi_info" {
     sat_s3Nxi_info:
         const sat_s3Nxi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Vhz() //  [R1]
         { []
         }
     {offset
       c3Vhz: // global
           if (R1 & 7 == 1) goto c3VhD; else goto c3VhE;
       c3VhD: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VhE: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vhz_info" {
     block_c3Vhz_info:
         const _c3Vhz;
         const 1;
         const 30;
 },
 lvl2_s3Nx9_entry() //  [R1]
         { []
         }
     {offset
       c3VhR: // global
           _s3Nx9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VhS; else goto c3VhT;
       c3VhT: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3VhV; else goto c3VhU;
       c3VhV: // global
           HpAlloc = 128;
           goto c3VhS;
       c3VhS: // global
           R1 = _s3Nx9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VhU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nx9::P64;
           _s3Nx3::P64 = P64[_s3Nx9::P64 + 16];
           _s3Nx6::P64 = P64[_s3Nx9::P64 + 24];
           _s3Nx7::P64 = P64[_s3Nx9::P64 + 32];
           I64[Hp - 120] = lvl3_s3Nxa_info;
           P64[Hp - 112] = _s3Nx7::P64;
           I64[Hp - 104] = lvl117_s3Nxd_info;
           P64[Hp - 88] = _s3Nx3::P64;
           P64[Hp - 80] = _s3Nx6::P64;
           _c3VgP::P64 = Hp - 119;
           P64[Hp - 72] = _c3VgP::P64;
           I64[Hp - 64] = sat_s3Nxm_info;
           P64[Hp - 48] = _s3Nx3::P64;
           P64[Hp - 40] = _s3Nx6::P64;
           P64[Hp - 32] = _c3VgP::P64;
           I64[Hp - 24] = sat_s3Nxi_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3Nx9_info" {
     lvl2_s3Nx9_info:
         const lvl2_s3Nx9_entry;
         const 3;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3Nxn_entry() //  [R1]
         { []
         }
     {offset
       c3Vi1: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Nxn_info" {
     k_s3Nxn_info:
         const k_s3Nxn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3Nxp_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vi9: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3Nxp_info" {
     lvl3_s3Nxp_info:
         const lvl3_s3Nxp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3Nxs_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vip: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3Viq; else goto c3Vir;
       c3Viq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vir: // global
           I64[Sp - 40] = block_c3Vii_info;
           _s3Nx3::P64 = P64[R1 + 7];
           _s3Nx6::P64 = P64[R1 + 15];
           _s3Nx7::P64 = P64[R1 + 23];
           _s3Nxr::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3Nx3::P64;
           P64[Sp - 24] = _s3Nx6::P64;
           P64[Sp - 16] = _s3Nx7::P64;
           P64[Sp - 8] = _s3Nxr::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Vjg; else goto c3Vij;
       u3Vjg: // global
           call _c3Vii(R1) args: 0, res: 0, upd: 0;
       c3Vij: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3Nxs_info" {
     w2_s3Nxs_info:
         const w2_s3Nxs_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c3Vii() //  [R1]
         { []
         }
     {offset
       c3Vii: // global
           if (R1 & 7 == 5) goto c3Vin; else goto u3Vja;
       c3Vin: // global
           I64[Sp - 8] = block_c3Vix_info;
           _s3Nxu::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3Nxu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Vje; else goto c3Viz;
       u3Vje: // global
           call _c3Vix(R1) args: 0, res: 0, upd: 0;
       c3Viz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Vja: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3Vj7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Vii_info" {
     block_c3Vii_info:
         const _c3Vii;
         const 4;
         const 30;
 },
 _c3Vix() //  [R1]
         { []
         }
     {offset
       c3Vix: // global
           if (R1 & 7 == 1) goto u3Vjb; else goto c3ViK;
       u3Vjb: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3Vj7() args: 0, res: 0, upd: 0;
       c3ViK: // global
           I64[Sp - 8] = block_c3ViI_info;
           _s3Nxy::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Nxy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Vjh; else goto c3ViL;
       u3Vjh: // global
           call _c3ViI(R1) args: 0, res: 0, upd: 0;
       c3ViL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vix_info" {
     block_c3Vix_info:
         const _c3Vix;
         const 5;
         const 30;
 },
 _c3ViI() //  [R1]
         { []
         }
     {offset
       c3ViI: // global
           if (I64[R1 + 7] == 45) goto c3ViW; else goto u3Vjc;
       c3ViW: // global
           _s3Nxy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3ViV_info;
           R1 = _s3Nxy::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Vjj; else goto c3ViX;
       u3Vjj: // global
           call _c3ViV(R1) args: 0, res: 0, upd: 0;
       c3ViX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Vjc: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c3Vj7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3ViI_info" {
     block_c3ViI_info:
         const _c3ViI;
         const 6;
         const 30;
 },
 _c3ViV() //  [R1]
         { []
         }
     {offset
       c3ViV: // global
           if (R1 & 7 == 1) goto c3Vj3; else goto u3Vjd;
       c3Vj3: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Vjd: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3Vj7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3ViV_info" {
     block_c3ViV_info:
         const _c3ViV;
         const 5;
         const 30;
 },
 _c3Vj7() //  []
         { []
         }
     {offset
       c3Vj7: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3NxF_entry() //  [R1]
         { []
         }
     {offset
       c3Vjq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vjr; else goto c3Vjs;
       c3Vjr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vjs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3Nxs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3NxF_info" {
     lvl117_s3NxF_info:
         const lvl117_s3NxF_entry;
         const 1;
         const 16;
 },
 sat_s3NxM_entry() //  [R1]
         { []
         }
     {offset
       c3Vjx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vjy; else goto c3Vjz;
       c3Vjy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vjz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NxM_info" {
     sat_s3NxM_info:
         const sat_s3NxM_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+920;
 },
 sat_s3NxK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VjM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VjN; else goto c3VjO;
       c3VjN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VjO: // global
           I64[Sp - 16] = block_c3VjF_info;
           _s3NxF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3NxF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VjV; else goto c3VjG;
       u3VjV: // global
           call _c3VjF(R1) args: 0, res: 0, upd: 0;
       c3VjG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NxK_info" {
     sat_s3NxK_info:
         const sat_s3NxK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3VjF() //  [R1]
         { []
         }
     {offset
       c3VjF: // global
           if (R1 & 7 == 1) goto c3VjJ; else goto c3VjK;
       c3VjJ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VjK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3VjF_info" {
     block_c3VjF_info:
         const _c3VjF;
         const 1;
         const 30;
 },
 lvl116_s3Nx8_entry() //  [R1]
         { []
         }
     {offset
       c3VjX: // global
           _s3Nx8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VjY; else goto c3VjZ;
       c3VjZ: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c3Vk1; else goto c3Vk0;
       c3Vk1: // global
           HpAlloc = 208;
           goto c3VjY;
       c3VjY: // global
           R1 = _s3Nx8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vk0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nx8::P64;
           _s3Nx3::P64 = P64[_s3Nx8::P64 + 16];
           _s3Nx6::P64 = P64[_s3Nx8::P64 + 24];
           _s3Nx7::P64 = P64[_s3Nx8::P64 + 32];
           I64[Hp - 200] = lvl2_s3Nx9_info;
           P64[Hp - 184] = _s3Nx3::P64;
           P64[Hp - 176] = _s3Nx6::P64;
           P64[Hp - 168] = _s3Nx7::P64;
           I64[Hp - 160] = k_s3Nxn_info;
           P64[Hp - 152] = Hp - 200;
           I64[Hp - 144] = lvl3_s3Nxp_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3Nxs_info;
           P64[Hp - 104] = _s3Nx3::P64;
           P64[Hp - 96] = _s3Nx6::P64;
           P64[Hp - 88] = _s3Nx7::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3NxF_info;
           _c3Vid::P64 = Hp - 111;
           P64[Hp - 56] = _c3Vid::P64;
           I64[Hp - 48] = sat_s3NxM_info;
           P64[Hp - 32] = _c3Vid::P64;
           I64[Hp - 24] = sat_s3NxK_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Nx8_info" {
     lvl116_s3Nx8_info:
         const lvl116_s3Nx8_entry;
         const 3;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3NxN_entry() //  [R1]
         { []
         }
     {offset
       c3Vk7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3NxN_info" {
     k_s3NxN_info:
         const k_s3NxN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NxQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vkf: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NxQ_info" {
     sat_s3NxQ_info:
         const sat_s3NxQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NxR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Vkj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3Vkn; else goto c3Vkm;
       c3Vkn: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Vkm: // global
           _s3Nx3::P64 = P64[R1 + 6];
           I64[Hp - 80] = lvl116_s3Nx8_info;
           P64[Hp - 64] = _s3Nx3::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3NxN_info;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3NxQ_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NxR_info" {
     sat_s3NxR_info:
         const sat_s3NxR_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S3NLQ_srt+920;
 },
 section ""relreadonly" . u3Vkt_srtd" {
     u3Vkt_srtd:
         const S3NLQ_srt+216;
         const 100;
         const 1;
         const 34443624448;
 },
 GHC.Read.$fReadDouble_$sreadNumber_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Vko: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Vks; else goto c3Vkr;
       c3Vks: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadDouble_$sreadNumber_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Vkr: // global
           I64[Hp - 8] = sat_s3NxR_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$sreadNumber_info" {
     GHC.Read.$fReadDouble_$sreadNumber_info:
         const GHC.Read.$fReadDouble_$sreadNumber_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3Vkt_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.85282046 UTC

[section ""data" . GHC.Read.$fReadFloat_$sreadNumber_closure" {
     GHC.Read.$fReadFloat_$sreadNumber_closure:
         const GHC.Read.$fReadFloat_$sreadNumber_info;
         const 0;
 },
 sat_s3Ny1_entry() //  [R1]
         { []
         }
     {offset
       c3VmY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VmZ; else goto c3Vn0;
       c3VmZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vn0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.negateFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Ny1_info" {
     sat_s3Ny1_info:
         const sat_s3Ny1_entry;
         const 1;
         const 16;
 },
 lvl3_s3NxZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vn1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Vn5; else goto c3Vn4;
       c3Vn5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vn4: // global
           _s3NxW::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3Ny1_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = _s3NxW::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3NxZ_info" {
     lvl3_s3NxZ_info:
         const lvl3_s3NxZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3Ny2_entry() //  [R1]
         { []
         }
     {offset
       c3Vna: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vnb; else goto c3Vnc;
       c3Vnb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vnc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3Ny2_info" {
     lvl117_s3Ny2_info:
         const lvl117_s3Ny2_entry;
         const 3;
         const 15;
 },
 sat_s3Nya_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vnm: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nya_info" {
     sat_s3Nya_info:
         const sat_s3Nya_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3Nyb_entry() //  [R1]
         { []
         }
     {offset
       c3Vnp: // global
           _s3Nyb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vnq; else goto c3Vnr;
       c3Vnr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Vnt; else goto c3Vns;
       c3Vnt: // global
           HpAlloc = 32;
           goto c3Vnq;
       c3Vnq: // global
           R1 = _s3Nyb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vns: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nyb::P64;
           _s3NxS::P64 = P64[_s3Nyb::P64 + 16];
           _s3NxV::P64 = P64[_s3Nyb::P64 + 24];
           _s3NxZ::P64 = P64[_s3Nyb::P64 + 32];
           I64[Hp - 24] = sat_s3Nya_info;
           P64[Hp - 16] = _s3NxS::P64;
           P64[Hp - 8] = _s3NxV::P64;
           P64[Hp] = _s3NxZ::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nyb_info" {
     sat_s3Nyb_info:
         const sat_s3Nyb_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+920;
 },
 sat_s3Ny7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VnG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VnH; else goto c3VnI;
       c3VnH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VnI: // global
           I64[Sp - 16] = block_c3Vnz_info;
           _s3Ny2::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Ny2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VnP; else goto c3VnA;
       u3VnP: // global
           call _c3Vnz(R1) args: 0, res: 0, upd: 0;
       c3VnA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Ny7_info" {
     sat_s3Ny7_info:
         const sat_s3Ny7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Vnz() //  [R1]
         { []
         }
     {offset
       c3Vnz: // global
           if (R1 & 7 == 1) goto c3VnD; else goto c3VnE;
       c3VnD: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VnE: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vnz_info" {
     block_c3Vnz_info:
         const _c3Vnz;
         const 1;
         const 30;
 },
 lvl2_s3NxY_entry() //  [R1]
         { []
         }
     {offset
       c3VnR: // global
           _s3NxY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VnS; else goto c3VnT;
       c3VnT: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3VnV; else goto c3VnU;
       c3VnV: // global
           HpAlloc = 128;
           goto c3VnS;
       c3VnS: // global
           R1 = _s3NxY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VnU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NxY::P64;
           _s3NxS::P64 = P64[_s3NxY::P64 + 16];
           _s3NxV::P64 = P64[_s3NxY::P64 + 24];
           _s3NxW::P64 = P64[_s3NxY::P64 + 32];
           I64[Hp - 120] = lvl3_s3NxZ_info;
           P64[Hp - 112] = _s3NxW::P64;
           I64[Hp - 104] = lvl117_s3Ny2_info;
           P64[Hp - 88] = _s3NxS::P64;
           P64[Hp - 80] = _s3NxV::P64;
           _c3VmP::P64 = Hp - 119;
           P64[Hp - 72] = _c3VmP::P64;
           I64[Hp - 64] = sat_s3Nyb_info;
           P64[Hp - 48] = _s3NxS::P64;
           P64[Hp - 40] = _s3NxV::P64;
           P64[Hp - 32] = _c3VmP::P64;
           I64[Hp - 24] = sat_s3Ny7_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3NxY_info" {
     lvl2_s3NxY_info:
         const lvl2_s3NxY_entry;
         const 3;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3Nyc_entry() //  [R1]
         { []
         }
     {offset
       c3Vo1: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Nyc_info" {
     k_s3Nyc_info:
         const k_s3Nyc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3Nye_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vo9: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3Nye_info" {
     lvl3_s3Nye_info:
         const lvl3_s3Nye_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3Nyh_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vop: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3Voq; else goto c3Vor;
       c3Voq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vor: // global
           I64[Sp - 40] = block_c3Voi_info;
           _s3NxS::P64 = P64[R1 + 7];
           _s3NxV::P64 = P64[R1 + 15];
           _s3NxW::P64 = P64[R1 + 23];
           _s3Nyg::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3NxS::P64;
           P64[Sp - 24] = _s3NxV::P64;
           P64[Sp - 16] = _s3NxW::P64;
           P64[Sp - 8] = _s3Nyg::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Vpg; else goto c3Voj;
       u3Vpg: // global
           call _c3Voi(R1) args: 0, res: 0, upd: 0;
       c3Voj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3Nyh_info" {
     w2_s3Nyh_info:
         const w2_s3Nyh_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c3Voi() //  [R1]
         { []
         }
     {offset
       c3Voi: // global
           if (R1 & 7 == 5) goto c3Von; else goto u3Vpa;
       c3Von: // global
           I64[Sp - 8] = block_c3Vox_info;
           _s3Nyj::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3Nyj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Vpe; else goto c3Voz;
       u3Vpe: // global
           call _c3Vox(R1) args: 0, res: 0, upd: 0;
       c3Voz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Vpa: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3Vp7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Voi_info" {
     block_c3Voi_info:
         const _c3Voi;
         const 4;
         const 30;
 },
 _c3Vox() //  [R1]
         { []
         }
     {offset
       c3Vox: // global
           if (R1 & 7 == 1) goto u3Vpb; else goto c3VoK;
       u3Vpb: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3Vp7() args: 0, res: 0, upd: 0;
       c3VoK: // global
           I64[Sp - 8] = block_c3VoI_info;
           _s3Nyn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Nyn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Vph; else goto c3VoL;
       u3Vph: // global
           call _c3VoI(R1) args: 0, res: 0, upd: 0;
       c3VoL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vox_info" {
     block_c3Vox_info:
         const _c3Vox;
         const 5;
         const 30;
 },
 _c3VoI() //  [R1]
         { []
         }
     {offset
       c3VoI: // global
           if (I64[R1 + 7] == 45) goto c3VoW; else goto u3Vpc;
       c3VoW: // global
           _s3Nyn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3VoV_info;
           R1 = _s3Nyn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Vpj; else goto c3VoX;
       u3Vpj: // global
           call _c3VoV(R1) args: 0, res: 0, upd: 0;
       c3VoX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Vpc: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c3Vp7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VoI_info" {
     block_c3VoI_info:
         const _c3VoI;
         const 6;
         const 30;
 },
 _c3VoV() //  [R1]
         { []
         }
     {offset
       c3VoV: // global
           if (R1 & 7 == 1) goto c3Vp3; else goto u3Vpd;
       c3Vp3: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Vpd: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3Vp7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VoV_info" {
     block_c3VoV_info:
         const _c3VoV;
         const 5;
         const 30;
 },
 _c3Vp7() //  []
         { []
         }
     {offset
       c3Vp7: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3Nyu_entry() //  [R1]
         { []
         }
     {offset
       c3Vpq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vpr; else goto c3Vps;
       c3Vpr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vps: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3Nyh_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3Nyu_info" {
     lvl117_s3Nyu_info:
         const lvl117_s3Nyu_entry;
         const 1;
         const 16;
 },
 sat_s3NyB_entry() //  [R1]
         { []
         }
     {offset
       c3Vpx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vpy; else goto c3Vpz;
       c3Vpy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vpz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NyB_info" {
     sat_s3NyB_info:
         const sat_s3NyB_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+920;
 },
 sat_s3Nyz_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VpM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VpN; else goto c3VpO;
       c3VpN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VpO: // global
           I64[Sp - 16] = block_c3VpF_info;
           _s3Nyu::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Nyu::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VpV; else goto c3VpG;
       u3VpV: // global
           call _c3VpF(R1) args: 0, res: 0, upd: 0;
       c3VpG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nyz_info" {
     sat_s3Nyz_info:
         const sat_s3Nyz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3VpF() //  [R1]
         { []
         }
     {offset
       c3VpF: // global
           if (R1 & 7 == 1) goto c3VpJ; else goto c3VpK;
       c3VpJ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VpK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3VpF_info" {
     block_c3VpF_info:
         const _c3VpF;
         const 1;
         const 30;
 },
 lvl116_s3NxX_entry() //  [R1]
         { []
         }
     {offset
       c3VpX: // global
           _s3NxX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VpY; else goto c3VpZ;
       c3VpZ: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c3Vq1; else goto c3Vq0;
       c3Vq1: // global
           HpAlloc = 208;
           goto c3VpY;
       c3VpY: // global
           R1 = _s3NxX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vq0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NxX::P64;
           _s3NxS::P64 = P64[_s3NxX::P64 + 16];
           _s3NxV::P64 = P64[_s3NxX::P64 + 24];
           _s3NxW::P64 = P64[_s3NxX::P64 + 32];
           I64[Hp - 200] = lvl2_s3NxY_info;
           P64[Hp - 184] = _s3NxS::P64;
           P64[Hp - 176] = _s3NxV::P64;
           P64[Hp - 168] = _s3NxW::P64;
           I64[Hp - 160] = k_s3Nyc_info;
           P64[Hp - 152] = Hp - 200;
           I64[Hp - 144] = lvl3_s3Nye_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3Nyh_info;
           P64[Hp - 104] = _s3NxS::P64;
           P64[Hp - 96] = _s3NxV::P64;
           P64[Hp - 88] = _s3NxW::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3Nyu_info;
           _c3Vod::P64 = Hp - 111;
           P64[Hp - 56] = _c3Vod::P64;
           I64[Hp - 48] = sat_s3NyB_info;
           P64[Hp - 32] = _c3Vod::P64;
           I64[Hp - 24] = sat_s3Nyz_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3NxX_info" {
     lvl116_s3NxX_info:
         const lvl116_s3NxX_entry;
         const 3;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3NyC_entry() //  [R1]
         { []
         }
     {offset
       c3Vq7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3NyC_info" {
     k_s3NyC_info:
         const k_s3NyC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NyF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vqf: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NyF_info" {
     sat_s3NyF_info:
         const sat_s3NyF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NyG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Vqj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3Vqn; else goto c3Vqm;
       c3Vqn: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Vqm: // global
           _s3NxS::P64 = P64[R1 + 6];
           I64[Hp - 80] = lvl116_s3NxX_info;
           P64[Hp - 64] = _s3NxS::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3NyC_info;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3NyF_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NyG_info" {
     sat_s3NyG_info:
         const sat_s3NyG_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S3NLQ_srt+920;
 },
 section ""relreadonly" . u3Vqt_srtd" {
     u3Vqt_srtd:
         const S3NLQ_srt+216;
         const 101;
         const 1;
         const 68803362816;
 },
 GHC.Read.$fReadFloat_$sreadNumber_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Vqo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Vqs; else goto c3Vqr;
       c3Vqs: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadFloat_$sreadNumber_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Vqr: // global
           I64[Hp - 8] = sat_s3NyG_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$sreadNumber_info" {
     GHC.Read.$fReadFloat_$sreadNumber_info:
         const GHC.Read.$fReadFloat_$sreadNumber_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3Vqt_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.90657119 UTC

[section ""data" . GHC.Read.$fReadInt_$sreadNumber_closure" {
     GHC.Read.$fReadInt_$sreadNumber_closure:
         const GHC.Read.$fReadInt_$sreadNumber_info;
         const 0;
 },
 sat_s3NyQ_entry() //  [R1]
         { []
         }
     {offset
       c3VsY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VsZ; else goto c3Vt0;
       c3VsZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vt0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.$fNumInt_$cnegate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NyQ_info" {
     sat_s3NyQ_info:
         const sat_s3NyQ_entry;
         const 1;
         const 16;
 },
 lvl3_s3NyO_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vt1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Vt5; else goto c3Vt4;
       c3Vt5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vt4: // global
           _s3NyL::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3NyQ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = _s3NyL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3NyO_info" {
     lvl3_s3NyO_info:
         const lvl3_s3NyO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3NyR_entry() //  [R1]
         { []
         }
     {offset
       c3Vta: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vtb; else goto c3Vtc;
       c3Vtb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vtc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3NyR_info" {
     lvl117_s3NyR_info:
         const lvl117_s3NyR_entry;
         const 3;
         const 15;
 },
 sat_s3NyZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vtm: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NyZ_info" {
     sat_s3NyZ_info:
         const sat_s3NyZ_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3Nz0_entry() //  [R1]
         { []
         }
     {offset
       c3Vtp: // global
           _s3Nz0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vtq; else goto c3Vtr;
       c3Vtr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Vtt; else goto c3Vts;
       c3Vtt: // global
           HpAlloc = 32;
           goto c3Vtq;
       c3Vtq: // global
           R1 = _s3Nz0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vts: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Nz0::P64;
           _s3NyH::P64 = P64[_s3Nz0::P64 + 16];
           _s3NyK::P64 = P64[_s3Nz0::P64 + 24];
           _s3NyO::P64 = P64[_s3Nz0::P64 + 32];
           I64[Hp - 24] = sat_s3NyZ_info;
           P64[Hp - 16] = _s3NyH::P64;
           P64[Hp - 8] = _s3NyK::P64;
           P64[Hp] = _s3NyO::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nz0_info" {
     sat_s3Nz0_info:
         const sat_s3Nz0_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+920;
 },
 sat_s3NyW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VtG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VtH; else goto c3VtI;
       c3VtH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VtI: // global
           I64[Sp - 16] = block_c3Vtz_info;
           _s3NyR::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3NyR::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VtP; else goto c3VtA;
       u3VtP: // global
           call _c3Vtz(R1) args: 0, res: 0, upd: 0;
       c3VtA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NyW_info" {
     sat_s3NyW_info:
         const sat_s3NyW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Vtz() //  [R1]
         { []
         }
     {offset
       c3Vtz: // global
           if (R1 & 7 == 1) goto c3VtD; else goto c3VtE;
       c3VtD: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VtE: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vtz_info" {
     block_c3Vtz_info:
         const _c3Vtz;
         const 1;
         const 30;
 },
 lvl2_s3NyN_entry() //  [R1]
         { []
         }
     {offset
       c3VtR: // global
           _s3NyN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VtS; else goto c3VtT;
       c3VtT: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3VtV; else goto c3VtU;
       c3VtV: // global
           HpAlloc = 128;
           goto c3VtS;
       c3VtS: // global
           R1 = _s3NyN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VtU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NyN::P64;
           _s3NyH::P64 = P64[_s3NyN::P64 + 16];
           _s3NyK::P64 = P64[_s3NyN::P64 + 24];
           _s3NyL::P64 = P64[_s3NyN::P64 + 32];
           I64[Hp - 120] = lvl3_s3NyO_info;
           P64[Hp - 112] = _s3NyL::P64;
           I64[Hp - 104] = lvl117_s3NyR_info;
           P64[Hp - 88] = _s3NyH::P64;
           P64[Hp - 80] = _s3NyK::P64;
           _c3VsP::P64 = Hp - 119;
           P64[Hp - 72] = _c3VsP::P64;
           I64[Hp - 64] = sat_s3Nz0_info;
           P64[Hp - 48] = _s3NyH::P64;
           P64[Hp - 40] = _s3NyK::P64;
           P64[Hp - 32] = _c3VsP::P64;
           I64[Hp - 24] = sat_s3NyW_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3NyN_info" {
     lvl2_s3NyN_info:
         const lvl2_s3NyN_entry;
         const 3;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3Nz1_entry() //  [R1]
         { []
         }
     {offset
       c3Vu1: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Nz1_info" {
     k_s3Nz1_info:
         const k_s3Nz1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3Nz3_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vu9: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3Nz3_info" {
     lvl3_s3Nz3_info:
         const lvl3_s3Nz3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3Nz6_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vup: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3Vuq; else goto c3Vur;
       c3Vuq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vur: // global
           I64[Sp - 40] = block_c3Vui_info;
           _s3NyH::P64 = P64[R1 + 7];
           _s3NyK::P64 = P64[R1 + 15];
           _s3NyL::P64 = P64[R1 + 23];
           _s3Nz5::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3NyH::P64;
           P64[Sp - 24] = _s3NyK::P64;
           P64[Sp - 16] = _s3NyL::P64;
           P64[Sp - 8] = _s3Nz5::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Vvg; else goto c3Vuj;
       u3Vvg: // global
           call _c3Vui(R1) args: 0, res: 0, upd: 0;
       c3Vuj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3Nz6_info" {
     w2_s3Nz6_info:
         const w2_s3Nz6_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c3Vui() //  [R1]
         { []
         }
     {offset
       c3Vui: // global
           if (R1 & 7 == 5) goto c3Vun; else goto u3Vva;
       c3Vun: // global
           I64[Sp - 8] = block_c3Vux_info;
           _s3Nz8::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3Nz8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Vve; else goto c3Vuz;
       u3Vve: // global
           call _c3Vux(R1) args: 0, res: 0, upd: 0;
       c3Vuz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Vva: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3Vv7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Vui_info" {
     block_c3Vui_info:
         const _c3Vui;
         const 4;
         const 30;
 },
 _c3Vux() //  [R1]
         { []
         }
     {offset
       c3Vux: // global
           if (R1 & 7 == 1) goto u3Vvb; else goto c3VuK;
       u3Vvb: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3Vv7() args: 0, res: 0, upd: 0;
       c3VuK: // global
           I64[Sp - 8] = block_c3VuI_info;
           _s3Nzc::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Nzc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Vvh; else goto c3VuL;
       u3Vvh: // global
           call _c3VuI(R1) args: 0, res: 0, upd: 0;
       c3VuL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vux_info" {
     block_c3Vux_info:
         const _c3Vux;
         const 5;
         const 30;
 },
 _c3VuI() //  [R1]
         { []
         }
     {offset
       c3VuI: // global
           if (I64[R1 + 7] == 45) goto c3VuW; else goto u3Vvc;
       c3VuW: // global
           _s3Nzc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3VuV_info;
           R1 = _s3Nzc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Vvj; else goto c3VuX;
       u3Vvj: // global
           call _c3VuV(R1) args: 0, res: 0, upd: 0;
       c3VuX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Vvc: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c3Vv7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VuI_info" {
     block_c3VuI_info:
         const _c3VuI;
         const 6;
         const 30;
 },
 _c3VuV() //  [R1]
         { []
         }
     {offset
       c3VuV: // global
           if (R1 & 7 == 1) goto c3Vv3; else goto u3Vvd;
       c3Vv3: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Vvd: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3Vv7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VuV_info" {
     block_c3VuV_info:
         const _c3VuV;
         const 5;
         const 30;
 },
 _c3Vv7() //  []
         { []
         }
     {offset
       c3Vv7: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3Nzj_entry() //  [R1]
         { []
         }
     {offset
       c3Vvq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vvr; else goto c3Vvs;
       c3Vvr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vvs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3Nz6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3Nzj_info" {
     lvl117_s3Nzj_info:
         const lvl117_s3Nzj_entry;
         const 1;
         const 16;
 },
 sat_s3Nzq_entry() //  [R1]
         { []
         }
     {offset
       c3Vvx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vvy; else goto c3Vvz;
       c3Vvy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vvz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Nzq_info" {
     sat_s3Nzq_info:
         const sat_s3Nzq_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+920;
 },
 sat_s3Nzo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VvM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VvN; else goto c3VvO;
       c3VvN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VvO: // global
           I64[Sp - 16] = block_c3VvF_info;
           _s3Nzj::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3Nzj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VvV; else goto c3VvG;
       u3VvV: // global
           call _c3VvF(R1) args: 0, res: 0, upd: 0;
       c3VvG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nzo_info" {
     sat_s3Nzo_info:
         const sat_s3Nzo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3VvF() //  [R1]
         { []
         }
     {offset
       c3VvF: // global
           if (R1 & 7 == 1) goto c3VvJ; else goto c3VvK;
       c3VvJ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VvK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3VvF_info" {
     block_c3VvF_info:
         const _c3VvF;
         const 1;
         const 30;
 },
 lvl116_s3NyM_entry() //  [R1]
         { []
         }
     {offset
       c3VvX: // global
           _s3NyM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VvY; else goto c3VvZ;
       c3VvZ: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c3Vw1; else goto c3Vw0;
       c3Vw1: // global
           HpAlloc = 208;
           goto c3VvY;
       c3VvY: // global
           R1 = _s3NyM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vw0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NyM::P64;
           _s3NyH::P64 = P64[_s3NyM::P64 + 16];
           _s3NyK::P64 = P64[_s3NyM::P64 + 24];
           _s3NyL::P64 = P64[_s3NyM::P64 + 32];
           I64[Hp - 200] = lvl2_s3NyN_info;
           P64[Hp - 184] = _s3NyH::P64;
           P64[Hp - 176] = _s3NyK::P64;
           P64[Hp - 168] = _s3NyL::P64;
           I64[Hp - 160] = k_s3Nz1_info;
           P64[Hp - 152] = Hp - 200;
           I64[Hp - 144] = lvl3_s3Nz3_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3Nz6_info;
           P64[Hp - 104] = _s3NyH::P64;
           P64[Hp - 96] = _s3NyK::P64;
           P64[Hp - 88] = _s3NyL::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3Nzj_info;
           _c3Vud::P64 = Hp - 111;
           P64[Hp - 56] = _c3Vud::P64;
           I64[Hp - 48] = sat_s3Nzq_info;
           P64[Hp - 32] = _c3Vud::P64;
           I64[Hp - 24] = sat_s3Nzo_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3NyM_info" {
     lvl116_s3NyM_info:
         const lvl116_s3NyM_entry;
         const 3;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3Nzr_entry() //  [R1]
         { []
         }
     {offset
       c3Vw7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Nzr_info" {
     k_s3Nzr_info:
         const k_s3Nzr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Nzu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vwf: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nzu_info" {
     sat_s3Nzu_info:
         const sat_s3Nzu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3Nzv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Vwj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3Vwn; else goto c3Vwm;
       c3Vwn: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Vwm: // global
           _s3NyH::P64 = P64[R1 + 6];
           I64[Hp - 80] = lvl116_s3NyM_info;
           P64[Hp - 64] = _s3NyH::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3Nzr_info;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3Nzu_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Nzv_info" {
     sat_s3Nzv_info:
         const sat_s3Nzv_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S3NLQ_srt+920;
 },
 section ""relreadonly" . u3Vwt_srtd" {
     u3Vwt_srtd:
         const S3NLQ_srt+216;
         const 102;
         const 1;
         const 137522839552;
 },
 GHC.Read.$fReadInt_$sreadNumber_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Vwo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Vws; else goto c3Vwr;
       c3Vws: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadInt_$sreadNumber_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Vwr: // global
           I64[Hp - 8] = sat_s3Nzv_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt_$sreadNumber_info" {
     GHC.Read.$fReadInt_$sreadNumber_info:
         const GHC.Read.$fReadInt_$sreadNumber_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3Vwt_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:31.968323994 UTC

[section ""data" . GHC.Read.readNumber1_closure" {
     GHC.Read.readNumber1_closure:
         const GHC.Read.readNumber1_info;
         const 0;
 },
 sat_s3NzG_entry() //  [R1]
         { []
         }
     {offset
       c3VyY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3VyZ; else goto c3Vz0;
       c3VyZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vz0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NzG_info" {
     sat_s3NzG_info:
         const sat_s3NzG_entry;
         const 2;
         const 18;
 },
 lvl3_s3NzE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vz1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Vz5; else goto c3Vz4;
       c3Vz5: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Vz4: // global
           _s3Nzw::P64 = P64[R1 + 7];
           _s3NzB::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3NzG_info;
           P64[Hp - 8] = _s3Nzw::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3NzB::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3NzE_info" {
     lvl3_s3NzE_info:
         const lvl3_s3NzE_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl117_s3NzH_entry() //  [R1]
         { []
         }
     {offset
       c3Vza: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vzb; else goto c3Vzc;
       c3Vzb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vzc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3NzH_info" {
     lvl117_s3NzH_info:
         const lvl117_s3NzH_entry;
         const 3;
         const 15;
 },
 sat_s3NzP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Vzm: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NzP_info" {
     sat_s3NzP_info:
         const sat_s3NzP_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3NzQ_entry() //  [R1]
         { []
         }
     {offset
       c3Vzp: // global
           _s3NzQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Vzq; else goto c3Vzr;
       c3Vzr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Vzt; else goto c3Vzs;
       c3Vzt: // global
           HpAlloc = 32;
           goto c3Vzq;
       c3Vzq: // global
           R1 = _s3NzQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Vzs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NzQ::P64;
           _s3Nzx::P64 = P64[_s3NzQ::P64 + 16];
           _s3NzA::P64 = P64[_s3NzQ::P64 + 24];
           _s3NzE::P64 = P64[_s3NzQ::P64 + 32];
           I64[Hp - 24] = sat_s3NzP_info;
           P64[Hp - 16] = _s3Nzx::P64;
           P64[Hp - 8] = _s3NzA::P64;
           P64[Hp] = _s3NzE::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NzQ_info" {
     sat_s3NzQ_info:
         const sat_s3NzQ_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+920;
 },
 sat_s3NzM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VzG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VzH; else goto c3VzI;
       c3VzH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VzI: // global
           I64[Sp - 16] = block_c3Vzz_info;
           _s3NzH::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3NzH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VzP; else goto c3VzA;
       u3VzP: // global
           call _c3Vzz(R1) args: 0, res: 0, upd: 0;
       c3VzA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NzM_info" {
     sat_s3NzM_info:
         const sat_s3NzM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Vzz() //  [R1]
         { []
         }
     {offset
       c3Vzz: // global
           if (R1 & 7 == 1) goto c3VzD; else goto c3VzE;
       c3VzD: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VzE: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Vzz_info" {
     block_c3Vzz_info:
         const _c3Vzz;
         const 1;
         const 30;
 },
 lvl2_s3NzD_entry() //  [R1]
         { []
         }
     {offset
       c3VzR: // global
           _s3NzD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VzS; else goto c3VzT;
       c3VzT: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3VzV; else goto c3VzU;
       c3VzV: // global
           HpAlloc = 136;
           goto c3VzS;
       c3VzS: // global
           R1 = _s3NzD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VzU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NzD::P64;
           _s3Nzw::P64 = P64[_s3NzD::P64 + 16];
           _s3Nzx::P64 = P64[_s3NzD::P64 + 24];
           _s3NzA::P64 = P64[_s3NzD::P64 + 32];
           _s3NzB::P64 = P64[_s3NzD::P64 + 40];
           I64[Hp - 128] = lvl3_s3NzE_info;
           P64[Hp - 120] = _s3Nzw::P64;
           P64[Hp - 112] = _s3NzB::P64;
           I64[Hp - 104] = lvl117_s3NzH_info;
           P64[Hp - 88] = _s3Nzx::P64;
           P64[Hp - 80] = _s3NzA::P64;
           _c3VyP::P64 = Hp - 127;
           P64[Hp - 72] = _c3VyP::P64;
           I64[Hp - 64] = sat_s3NzQ_info;
           P64[Hp - 48] = _s3Nzx::P64;
           P64[Hp - 40] = _s3NzA::P64;
           P64[Hp - 32] = _c3VyP::P64;
           I64[Hp - 24] = sat_s3NzM_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3NzD_info" {
     lvl2_s3NzD_info:
         const lvl2_s3NzD_entry;
         const 4;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3NzR_entry() //  [R1]
         { []
         }
     {offset
       c3VA1: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3NzR_info" {
     k_s3NzR_info:
         const k_s3NzR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3NzT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VA9: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3NzT_info" {
     lvl3_s3NzT_info:
         const lvl3_s3NzT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3NzW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VAp: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3VAq; else goto c3VAr;
       c3VAq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VAr: // global
           I64[Sp - 40] = block_c3VAi_info;
           _s3Nzx::P64 = P64[R1 + 7];
           _s3NzA::P64 = P64[R1 + 15];
           _s3NzB::P64 = P64[R1 + 23];
           _s3NzV::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3Nzx::P64;
           P64[Sp - 24] = _s3NzA::P64;
           P64[Sp - 16] = _s3NzB::P64;
           P64[Sp - 8] = _s3NzV::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3VBg; else goto c3VAj;
       u3VBg: // global
           call _c3VAi(R1) args: 0, res: 0, upd: 0;
       c3VAj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3NzW_info" {
     w2_s3NzW_info:
         const w2_s3NzW_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c3VAi() //  [R1]
         { []
         }
     {offset
       c3VAi: // global
           if (R1 & 7 == 5) goto c3VAn; else goto u3VBa;
       c3VAn: // global
           I64[Sp - 8] = block_c3VAx_info;
           _s3NzY::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3NzY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3VBe; else goto c3VAz;
       u3VBe: // global
           call _c3VAx(R1) args: 0, res: 0, upd: 0;
       c3VAz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3VBa: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c3VB7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VAi_info" {
     block_c3VAi_info:
         const _c3VAi;
         const 4;
         const 30;
 },
 _c3VAx() //  [R1]
         { []
         }
     {offset
       c3VAx: // global
           if (R1 & 7 == 1) goto u3VBb; else goto c3VAK;
       u3VBb: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3VB7() args: 0, res: 0, upd: 0;
       c3VAK: // global
           I64[Sp - 8] = block_c3VAI_info;
           _s3NA2::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NA2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3VBh; else goto c3VAL;
       u3VBh: // global
           call _c3VAI(R1) args: 0, res: 0, upd: 0;
       c3VAL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3VAx_info" {
     block_c3VAx_info:
         const _c3VAx;
         const 5;
         const 30;
 },
 _c3VAI() //  [R1]
         { []
         }
     {offset
       c3VAI: // global
           if (I64[R1 + 7] == 45) goto c3VAW; else goto u3VBc;
       c3VAW: // global
           _s3NA2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3VAV_info;
           R1 = _s3NA2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3VBj; else goto c3VAX;
       u3VBj: // global
           call _c3VAV(R1) args: 0, res: 0, upd: 0;
       c3VAX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3VBc: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c3VB7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VAI_info" {
     block_c3VAI_info:
         const _c3VAI;
         const 6;
         const 30;
 },
 _c3VAV() //  [R1]
         { []
         }
     {offset
       c3VAV: // global
           if (R1 & 7 == 1) goto c3VB3; else goto u3VBd;
       c3VB3: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3VBd: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c3VB7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3VAV_info" {
     block_c3VAV_info:
         const _c3VAV;
         const 5;
         const 30;
 },
 _c3VB7() //  []
         { []
         }
     {offset
       c3VB7: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3NA9_entry() //  [R1]
         { []
         }
     {offset
       c3VBq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VBr; else goto c3VBs;
       c3VBr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VBs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3NzW_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3NA9_info" {
     lvl117_s3NA9_info:
         const lvl117_s3NA9_entry;
         const 1;
         const 16;
 },
 sat_s3NAg_entry() //  [R1]
         { []
         }
     {offset
       c3VBx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VBy; else goto c3VBz;
       c3VBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NAg_info" {
     sat_s3NAg_info:
         const sat_s3NAg_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+920;
 },
 sat_s3NAe_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VBM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VBN; else goto c3VBO;
       c3VBN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VBO: // global
           I64[Sp - 16] = block_c3VBF_info;
           _s3NA9::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3NA9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3VBV; else goto c3VBG;
       u3VBV: // global
           call _c3VBF(R1) args: 0, res: 0, upd: 0;
       c3VBG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NAe_info" {
     sat_s3NAe_info:
         const sat_s3NAe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3VBF() //  [R1]
         { []
         }
     {offset
       c3VBF: // global
           if (R1 & 7 == 1) goto c3VBJ; else goto c3VBK;
       c3VBJ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3VBK: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3VBF_info" {
     block_c3VBF_info:
         const _c3VBF;
         const 1;
         const 30;
 },
 lvl116_s3NzC_entry() //  [R1]
         { []
         }
     {offset
       c3VBX: // global
           _s3NzC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3VBY; else goto c3VBZ;
       c3VBZ: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c3VC1; else goto c3VC0;
       c3VC1: // global
           HpAlloc = 216;
           goto c3VBY;
       c3VBY: // global
           R1 = _s3NzC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VC0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NzC::P64;
           _s3Nzw::P64 = P64[_s3NzC::P64 + 16];
           _s3Nzx::P64 = P64[_s3NzC::P64 + 24];
           _s3NzA::P64 = P64[_s3NzC::P64 + 32];
           _s3NzB::P64 = P64[_s3NzC::P64 + 40];
           I64[Hp - 208] = lvl2_s3NzD_info;
           P64[Hp - 192] = _s3Nzw::P64;
           P64[Hp - 184] = _s3Nzx::P64;
           P64[Hp - 176] = _s3NzA::P64;
           P64[Hp - 168] = _s3NzB::P64;
           I64[Hp - 160] = k_s3NzR_info;
           P64[Hp - 152] = Hp - 208;
           I64[Hp - 144] = lvl3_s3NzT_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3NzW_info;
           P64[Hp - 104] = _s3Nzx::P64;
           P64[Hp - 96] = _s3NzA::P64;
           P64[Hp - 88] = _s3NzB::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3NA9_info;
           _c3VAd::P64 = Hp - 111;
           P64[Hp - 56] = _c3VAd::P64;
           I64[Hp - 48] = sat_s3NAg_info;
           P64[Hp - 32] = _c3VAd::P64;
           I64[Hp - 24] = sat_s3NAe_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3NzC_info" {
     lvl116_s3NzC_info:
         const lvl116_s3NzC_entry;
         const 4;
         const 21474836495;
         const S3NLQ_srt+920;
 },
 k_s3NAh_entry() //  [R1]
         { []
         }
     {offset
       c3VC7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3NAh_info" {
     k_s3NAh_info:
         const k_s3NAh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NAk_entry() //  [R1, R2]
         { []
         }
     {offset
       c3VCf: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NAk_info" {
     sat_s3NAk_info:
         const sat_s3NAk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NAl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3VCj: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3VCn; else goto c3VCm;
       c3VCn: // global
           HpAlloc = 96;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3VCm: // global
           _s3Nzw::P64 = P64[R1 + 6];
           _s3Nzx::P64 = P64[R1 + 14];
           I64[Hp - 88] = lvl116_s3NzC_info;
           P64[Hp - 72] = _s3Nzw::P64;
           P64[Hp - 64] = _s3Nzx::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3NAh_info;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = sat_s3NAk_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NAl_info" {
     sat_s3NAl_info:
         const sat_s3NAl_entry;
         const 2;
         const 21474836491;
         const 8589934607;
         const S3NLQ_srt+920;
 },
 section ""relreadonly" . u3VCt_srtd" {
     u3VCt_srtd:
         const S3NLQ_srt+216;
         const 103;
         const 1;
         const 274961793024;
 },
 GHC.Read.readNumber1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3VCo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3VCs; else goto c3VCr;
       c3VCs: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.readNumber1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3VCr: // global
           I64[Hp - 16] = sat_s3NAl_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s3Nzy::P64 = R4;
           R4 = R5;
           R3 = _s3Nzy::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readNumber1_info" {
     GHC.Read.readNumber1_info:
         const GHC.Read.readNumber1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u3VCt_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.013145966 UTC

[section ""data" . GHC.Read.readNumber_closure" {
     GHC.Read.readNumber_closure:
         const GHC.Read.readNumber_info;
         const 0;
 },
 GHC.Read.readNumber_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3VED: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.readNumber1_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readNumber_info" {
     GHC.Read.readNumber_info:
         const GHC.Read.readNumber_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3NLQ_srt+1032;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.01745273 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory152_bytes" {
     GHC.Read.$fReadGeneralCategory152_bytes:
         I8[] [85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.020190343 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory151_closure" {
     GHC.Read.$fReadGeneralCategory151_closure:
         const GHC.Read.$fReadGeneralCategory151_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory151_entry() //  [R1]
         { []
         }
     {offset
       c3VER: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VES; else goto c3VET;
       c3VES: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VET: // global
           (_c3VEO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VEO::I64 == 0) goto c3VEQ; else goto c3VEP;
       c3VEQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VEP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VEO::I64;
           R2 = GHC.Read.$fReadGeneralCategory152_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory151_info" {
     GHC.Read.$fReadGeneralCategory151_info:
         const GHC.Read.$fReadGeneralCategory151_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.025348235 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory150_closure" {
     GHC.Read.$fReadGeneralCategory150_closure:
         const GHC.Read.$fReadGeneralCategory150_info;
 },
 GHC.Read.$fReadGeneralCategory150_entry() //  [R3]
         { []
         }
     {offset
       c3VF5: // global
           R2 = GHC.Unicode.UppercaseLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory150_info" {
     GHC.Read.$fReadGeneralCategory150_info:
         const GHC.Read.$fReadGeneralCategory150_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.030046048 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory149_closure" {
     GHC.Read.$fReadGeneralCategory149_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory151_closure;
         const GHC.Read.$fReadGeneralCategory150_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.03234269 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory148_bytes" {
     GHC.Read.$fReadGeneralCategory148_bytes:
         I8[] [76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.035383209 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory147_closure" {
     GHC.Read.$fReadGeneralCategory147_closure:
         const GHC.Read.$fReadGeneralCategory147_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory147_entry() //  [R1]
         { []
         }
     {offset
       c3VFk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VFl; else goto c3VFm;
       c3VFl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VFm: // global
           (_c3VFh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VFh::I64 == 0) goto c3VFj; else goto c3VFi;
       c3VFj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VFi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VFh::I64;
           R2 = GHC.Read.$fReadGeneralCategory148_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory147_info" {
     GHC.Read.$fReadGeneralCategory147_info:
         const GHC.Read.$fReadGeneralCategory147_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.040544879 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory146_closure" {
     GHC.Read.$fReadGeneralCategory146_closure:
         const GHC.Read.$fReadGeneralCategory146_info;
 },
 GHC.Read.$fReadGeneralCategory146_entry() //  [R3]
         { []
         }
     {offset
       c3VFy: // global
           R2 = GHC.Unicode.LowercaseLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory146_info" {
     GHC.Read.$fReadGeneralCategory146_info:
         const GHC.Read.$fReadGeneralCategory146_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.044798141 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory145_closure" {
     GHC.Read.$fReadGeneralCategory145_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory147_closure;
         const GHC.Read.$fReadGeneralCategory146_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.047067069 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory144_bytes" {
     GHC.Read.$fReadGeneralCategory144_bytes:
         I8[] [84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.050731838 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory143_closure" {
     GHC.Read.$fReadGeneralCategory143_closure:
         const GHC.Read.$fReadGeneralCategory143_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory143_entry() //  [R1]
         { []
         }
     {offset
       c3VFN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VFO; else goto c3VFP;
       c3VFO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VFP: // global
           (_c3VFK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VFK::I64 == 0) goto c3VFM; else goto c3VFL;
       c3VFM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VFL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VFK::I64;
           R2 = GHC.Read.$fReadGeneralCategory144_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory143_info" {
     GHC.Read.$fReadGeneralCategory143_info:
         const GHC.Read.$fReadGeneralCategory143_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.055596992 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory142_closure" {
     GHC.Read.$fReadGeneralCategory142_closure:
         const GHC.Read.$fReadGeneralCategory142_info;
 },
 GHC.Read.$fReadGeneralCategory142_entry() //  [R3]
         { []
         }
     {offset
       c3VG1: // global
           R2 = GHC.Unicode.TitlecaseLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory142_info" {
     GHC.Read.$fReadGeneralCategory142_info:
         const GHC.Read.$fReadGeneralCategory142_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.059740522 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory141_closure" {
     GHC.Read.$fReadGeneralCategory141_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory143_closure;
         const GHC.Read.$fReadGeneralCategory142_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.062174155 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory140_bytes" {
     GHC.Read.$fReadGeneralCategory140_bytes:
         I8[] [77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.065200776 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory139_closure" {
     GHC.Read.$fReadGeneralCategory139_closure:
         const GHC.Read.$fReadGeneralCategory139_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory139_entry() //  [R1]
         { []
         }
     {offset
       c3VGg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VGh; else goto c3VGi;
       c3VGh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VGi: // global
           (_c3VGd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VGd::I64 == 0) goto c3VGf; else goto c3VGe;
       c3VGf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VGe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VGd::I64;
           R2 = GHC.Read.$fReadGeneralCategory140_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory139_info" {
     GHC.Read.$fReadGeneralCategory139_info:
         const GHC.Read.$fReadGeneralCategory139_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.070789114 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory138_closure" {
     GHC.Read.$fReadGeneralCategory138_closure:
         const GHC.Read.$fReadGeneralCategory138_info;
 },
 GHC.Read.$fReadGeneralCategory138_entry() //  [R3]
         { []
         }
     {offset
       c3VGu: // global
           R2 = GHC.Unicode.ModifierLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory138_info" {
     GHC.Read.$fReadGeneralCategory138_info:
         const GHC.Read.$fReadGeneralCategory138_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.074975246 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory137_closure" {
     GHC.Read.$fReadGeneralCategory137_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory139_closure;
         const GHC.Read.$fReadGeneralCategory138_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.077328403 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory136_bytes" {
     GHC.Read.$fReadGeneralCategory136_bytes:
         I8[] [79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.080587711 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory135_closure" {
     GHC.Read.$fReadGeneralCategory135_closure:
         const GHC.Read.$fReadGeneralCategory135_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory135_entry() //  [R1]
         { []
         }
     {offset
       c3VGJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VGK; else goto c3VGL;
       c3VGK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VGL: // global
           (_c3VGG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VGG::I64 == 0) goto c3VGI; else goto c3VGH;
       c3VGI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VGH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VGG::I64;
           R2 = GHC.Read.$fReadGeneralCategory136_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory135_info" {
     GHC.Read.$fReadGeneralCategory135_info:
         const GHC.Read.$fReadGeneralCategory135_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.085622911 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory134_closure" {
     GHC.Read.$fReadGeneralCategory134_closure:
         const GHC.Read.$fReadGeneralCategory134_info;
 },
 GHC.Read.$fReadGeneralCategory134_entry() //  [R3]
         { []
         }
     {offset
       c3VGX: // global
           R2 = GHC.Unicode.OtherLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory134_info" {
     GHC.Read.$fReadGeneralCategory134_info:
         const GHC.Read.$fReadGeneralCategory134_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.089635102 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory133_closure" {
     GHC.Read.$fReadGeneralCategory133_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory135_closure;
         const GHC.Read.$fReadGeneralCategory134_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.091233535 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory132_bytes" {
     GHC.Read.$fReadGeneralCategory132_bytes:
         I8[] [78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.09400984 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory131_closure" {
     GHC.Read.$fReadGeneralCategory131_closure:
         const GHC.Read.$fReadGeneralCategory131_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory131_entry() //  [R1]
         { []
         }
     {offset
       c3VHc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VHd; else goto c3VHe;
       c3VHd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VHe: // global
           (_c3VH9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VH9::I64 == 0) goto c3VHb; else goto c3VHa;
       c3VHb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VHa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VH9::I64;
           R2 = GHC.Read.$fReadGeneralCategory132_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory131_info" {
     GHC.Read.$fReadGeneralCategory131_info:
         const GHC.Read.$fReadGeneralCategory131_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.09874177 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory130_closure" {
     GHC.Read.$fReadGeneralCategory130_closure:
         const GHC.Read.$fReadGeneralCategory130_info;
 },
 GHC.Read.$fReadGeneralCategory130_entry() //  [R3]
         { []
         }
     {offset
       c3VHq: // global
           R2 = GHC.Unicode.NonSpacingMark_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory130_info" {
     GHC.Read.$fReadGeneralCategory130_info:
         const GHC.Read.$fReadGeneralCategory130_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.102543128 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory129_closure" {
     GHC.Read.$fReadGeneralCategory129_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory131_closure;
         const GHC.Read.$fReadGeneralCategory130_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.104417408 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory128_bytes" {
     GHC.Read.$fReadGeneralCategory128_bytes:
         I8[] [83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.106965441 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory127_closure" {
     GHC.Read.$fReadGeneralCategory127_closure:
         const GHC.Read.$fReadGeneralCategory127_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory127_entry() //  [R1]
         { []
         }
     {offset
       c3VHF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VHG; else goto c3VHH;
       c3VHG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VHH: // global
           (_c3VHC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VHC::I64 == 0) goto c3VHE; else goto c3VHD;
       c3VHE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VHD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VHC::I64;
           R2 = GHC.Read.$fReadGeneralCategory128_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory127_info" {
     GHC.Read.$fReadGeneralCategory127_info:
         const GHC.Read.$fReadGeneralCategory127_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.111687291 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory126_closure" {
     GHC.Read.$fReadGeneralCategory126_closure:
         const GHC.Read.$fReadGeneralCategory126_info;
 },
 GHC.Read.$fReadGeneralCategory126_entry() //  [R3]
         { []
         }
     {offset
       c3VHT: // global
           R2 = GHC.Unicode.SpacingCombiningMark_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory126_info" {
     GHC.Read.$fReadGeneralCategory126_info:
         const GHC.Read.$fReadGeneralCategory126_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.11507669 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory125_closure" {
     GHC.Read.$fReadGeneralCategory125_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory127_closure;
         const GHC.Read.$fReadGeneralCategory126_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.116929616 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory124_bytes" {
     GHC.Read.$fReadGeneralCategory124_bytes:
         I8[] [69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.119485904 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory123_closure" {
     GHC.Read.$fReadGeneralCategory123_closure:
         const GHC.Read.$fReadGeneralCategory123_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory123_entry() //  [R1]
         { []
         }
     {offset
       c3VI8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VI9; else goto c3VIa;
       c3VI9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VIa: // global
           (_c3VI5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VI5::I64 == 0) goto c3VI7; else goto c3VI6;
       c3VI7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VI6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VI5::I64;
           R2 = GHC.Read.$fReadGeneralCategory124_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory123_info" {
     GHC.Read.$fReadGeneralCategory123_info:
         const GHC.Read.$fReadGeneralCategory123_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.124030252 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory122_closure" {
     GHC.Read.$fReadGeneralCategory122_closure:
         const GHC.Read.$fReadGeneralCategory122_info;
 },
 GHC.Read.$fReadGeneralCategory122_entry() //  [R3]
         { []
         }
     {offset
       c3VIm: // global
           R2 = GHC.Unicode.EnclosingMark_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory122_info" {
     GHC.Read.$fReadGeneralCategory122_info:
         const GHC.Read.$fReadGeneralCategory122_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.127400206 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory121_closure" {
     GHC.Read.$fReadGeneralCategory121_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory123_closure;
         const GHC.Read.$fReadGeneralCategory122_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.129327843 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory120_bytes" {
     GHC.Read.$fReadGeneralCategory120_bytes:
         I8[] [68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.131905165 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory119_closure" {
     GHC.Read.$fReadGeneralCategory119_closure:
         const GHC.Read.$fReadGeneralCategory119_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory119_entry() //  [R1]
         { []
         }
     {offset
       c3VIB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VIC; else goto c3VID;
       c3VIC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VID: // global
           (_c3VIy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VIy::I64 == 0) goto c3VIA; else goto c3VIz;
       c3VIA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VIz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VIy::I64;
           R2 = GHC.Read.$fReadGeneralCategory120_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory119_info" {
     GHC.Read.$fReadGeneralCategory119_info:
         const GHC.Read.$fReadGeneralCategory119_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.136238695 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory118_closure" {
     GHC.Read.$fReadGeneralCategory118_closure:
         const GHC.Read.$fReadGeneralCategory118_info;
 },
 GHC.Read.$fReadGeneralCategory118_entry() //  [R3]
         { []
         }
     {offset
       c3VIP: // global
           R2 = GHC.Unicode.DecimalNumber_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory118_info" {
     GHC.Read.$fReadGeneralCategory118_info:
         const GHC.Read.$fReadGeneralCategory118_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.13989053 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory117_closure" {
     GHC.Read.$fReadGeneralCategory117_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory119_closure;
         const GHC.Read.$fReadGeneralCategory118_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.141774765 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory116_bytes" {
     GHC.Read.$fReadGeneralCategory116_bytes:
         I8[] [76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.1439975 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory115_closure" {
     GHC.Read.$fReadGeneralCategory115_closure:
         const GHC.Read.$fReadGeneralCategory115_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory115_entry() //  [R1]
         { []
         }
     {offset
       c3VJ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VJ5; else goto c3VJ6;
       c3VJ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VJ6: // global
           (_c3VJ1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VJ1::I64 == 0) goto c3VJ3; else goto c3VJ2;
       c3VJ3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VJ2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VJ1::I64;
           R2 = GHC.Read.$fReadGeneralCategory116_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory115_info" {
     GHC.Read.$fReadGeneralCategory115_info:
         const GHC.Read.$fReadGeneralCategory115_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.148529058 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory114_closure" {
     GHC.Read.$fReadGeneralCategory114_closure:
         const GHC.Read.$fReadGeneralCategory114_info;
 },
 GHC.Read.$fReadGeneralCategory114_entry() //  [R3]
         { []
         }
     {offset
       c3VJi: // global
           R2 = GHC.Unicode.LetterNumber_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory114_info" {
     GHC.Read.$fReadGeneralCategory114_info:
         const GHC.Read.$fReadGeneralCategory114_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.151762755 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory113_closure" {
     GHC.Read.$fReadGeneralCategory113_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory115_closure;
         const GHC.Read.$fReadGeneralCategory114_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.153597769 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory112_bytes" {
     GHC.Read.$fReadGeneralCategory112_bytes:
         I8[] [79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.156185731 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory111_closure" {
     GHC.Read.$fReadGeneralCategory111_closure:
         const GHC.Read.$fReadGeneralCategory111_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory111_entry() //  [R1]
         { []
         }
     {offset
       c3VJx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VJy; else goto c3VJz;
       c3VJy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VJz: // global
           (_c3VJu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VJu::I64 == 0) goto c3VJw; else goto c3VJv;
       c3VJw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VJv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VJu::I64;
           R2 = GHC.Read.$fReadGeneralCategory112_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory111_info" {
     GHC.Read.$fReadGeneralCategory111_info:
         const GHC.Read.$fReadGeneralCategory111_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.160939556 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory110_closure" {
     GHC.Read.$fReadGeneralCategory110_closure:
         const GHC.Read.$fReadGeneralCategory110_info;
 },
 GHC.Read.$fReadGeneralCategory110_entry() //  [R3]
         { []
         }
     {offset
       c3VJL: // global
           R2 = GHC.Unicode.OtherNumber_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory110_info" {
     GHC.Read.$fReadGeneralCategory110_info:
         const GHC.Read.$fReadGeneralCategory110_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.164294679 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory109_closure" {
     GHC.Read.$fReadGeneralCategory109_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory111_closure;
         const GHC.Read.$fReadGeneralCategory110_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.166896619 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory108_bytes" {
     GHC.Read.$fReadGeneralCategory108_bytes:
         I8[] [67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.169418215 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory107_closure" {
     GHC.Read.$fReadGeneralCategory107_closure:
         const GHC.Read.$fReadGeneralCategory107_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory107_entry() //  [R1]
         { []
         }
     {offset
       c3VK0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VK1; else goto c3VK2;
       c3VK1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VK2: // global
           (_c3VJX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VJX::I64 == 0) goto c3VJZ; else goto c3VJY;
       c3VJZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VJY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VJX::I64;
           R2 = GHC.Read.$fReadGeneralCategory108_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory107_info" {
     GHC.Read.$fReadGeneralCategory107_info:
         const GHC.Read.$fReadGeneralCategory107_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.173571131 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory106_closure" {
     GHC.Read.$fReadGeneralCategory106_closure:
         const GHC.Read.$fReadGeneralCategory106_info;
 },
 GHC.Read.$fReadGeneralCategory106_entry() //  [R3]
         { []
         }
     {offset
       c3VKe: // global
           R2 = GHC.Unicode.ConnectorPunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory106_info" {
     GHC.Read.$fReadGeneralCategory106_info:
         const GHC.Read.$fReadGeneralCategory106_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.176910236 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory105_closure" {
     GHC.Read.$fReadGeneralCategory105_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory107_closure;
         const GHC.Read.$fReadGeneralCategory106_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.178874539 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory104_bytes" {
     GHC.Read.$fReadGeneralCategory104_bytes:
         I8[] [68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.181532443 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory103_closure" {
     GHC.Read.$fReadGeneralCategory103_closure:
         const GHC.Read.$fReadGeneralCategory103_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory103_entry() //  [R1]
         { []
         }
     {offset
       c3VKt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VKu; else goto c3VKv;
       c3VKu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VKv: // global
           (_c3VKq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VKq::I64 == 0) goto c3VKs; else goto c3VKr;
       c3VKs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VKr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VKq::I64;
           R2 = GHC.Read.$fReadGeneralCategory104_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory103_info" {
     GHC.Read.$fReadGeneralCategory103_info:
         const GHC.Read.$fReadGeneralCategory103_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.185931681 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory102_closure" {
     GHC.Read.$fReadGeneralCategory102_closure:
         const GHC.Read.$fReadGeneralCategory102_info;
 },
 GHC.Read.$fReadGeneralCategory102_entry() //  [R3]
         { []
         }
     {offset
       c3VKH: // global
           R2 = GHC.Unicode.DashPunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory102_info" {
     GHC.Read.$fReadGeneralCategory102_info:
         const GHC.Read.$fReadGeneralCategory102_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.189172437 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory101_closure" {
     GHC.Read.$fReadGeneralCategory101_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory103_closure;
         const GHC.Read.$fReadGeneralCategory102_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.190953346 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory100_bytes" {
     GHC.Read.$fReadGeneralCategory100_bytes:
         I8[] [79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.193195499 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory99_closure" {
     GHC.Read.$fReadGeneralCategory99_closure:
         const GHC.Read.$fReadGeneralCategory99_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory99_entry() //  [R1]
         { []
         }
     {offset
       c3VKW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VKX; else goto c3VKY;
       c3VKX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VKY: // global
           (_c3VKT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VKT::I64 == 0) goto c3VKV; else goto c3VKU;
       c3VKV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VKU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VKT::I64;
           R2 = GHC.Read.$fReadGeneralCategory100_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory99_info" {
     GHC.Read.$fReadGeneralCategory99_info:
         const GHC.Read.$fReadGeneralCategory99_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.197109279 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory98_closure" {
     GHC.Read.$fReadGeneralCategory98_closure:
         const GHC.Read.$fReadGeneralCategory98_info;
 },
 GHC.Read.$fReadGeneralCategory98_entry() //  [R3]
         { []
         }
     {offset
       c3VLa: // global
           R2 = GHC.Unicode.OpenPunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory98_info" {
     GHC.Read.$fReadGeneralCategory98_info:
         const GHC.Read.$fReadGeneralCategory98_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.200570555 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory97_closure" {
     GHC.Read.$fReadGeneralCategory97_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory99_closure;
         const GHC.Read.$fReadGeneralCategory98_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.20232272 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory96_bytes" {
     GHC.Read.$fReadGeneralCategory96_bytes:
         I8[] [67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.204623093 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory95_closure" {
     GHC.Read.$fReadGeneralCategory95_closure:
         const GHC.Read.$fReadGeneralCategory95_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory95_entry() //  [R1]
         { []
         }
     {offset
       c3VLp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VLq; else goto c3VLr;
       c3VLq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VLr: // global
           (_c3VLm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VLm::I64 == 0) goto c3VLo; else goto c3VLn;
       c3VLo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VLn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VLm::I64;
           R2 = GHC.Read.$fReadGeneralCategory96_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory95_info" {
     GHC.Read.$fReadGeneralCategory95_info:
         const GHC.Read.$fReadGeneralCategory95_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.208490033 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory94_closure" {
     GHC.Read.$fReadGeneralCategory94_closure:
         const GHC.Read.$fReadGeneralCategory94_info;
 },
 GHC.Read.$fReadGeneralCategory94_entry() //  [R3]
         { []
         }
     {offset
       c3VLD: // global
           R2 = GHC.Unicode.ClosePunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory94_info" {
     GHC.Read.$fReadGeneralCategory94_info:
         const GHC.Read.$fReadGeneralCategory94_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.211664127 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory93_closure" {
     GHC.Read.$fReadGeneralCategory93_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory95_closure;
         const GHC.Read.$fReadGeneralCategory94_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.213505433 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory92_bytes" {
     GHC.Read.$fReadGeneralCategory92_bytes:
         I8[] [73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.215750928 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory91_closure" {
     GHC.Read.$fReadGeneralCategory91_closure:
         const GHC.Read.$fReadGeneralCategory91_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory91_entry() //  [R1]
         { []
         }
     {offset
       c3VLS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VLT; else goto c3VLU;
       c3VLT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VLU: // global
           (_c3VLP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VLP::I64 == 0) goto c3VLR; else goto c3VLQ;
       c3VLR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VLQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VLP::I64;
           R2 = GHC.Read.$fReadGeneralCategory92_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory91_info" {
     GHC.Read.$fReadGeneralCategory91_info:
         const GHC.Read.$fReadGeneralCategory91_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.219962603 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory90_closure" {
     GHC.Read.$fReadGeneralCategory90_closure:
         const GHC.Read.$fReadGeneralCategory90_info;
 },
 GHC.Read.$fReadGeneralCategory90_entry() //  [R3]
         { []
         }
     {offset
       c3VM6: // global
           R2 = GHC.Unicode.InitialQuote_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory90_info" {
     GHC.Read.$fReadGeneralCategory90_info:
         const GHC.Read.$fReadGeneralCategory90_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.22301078 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory89_closure" {
     GHC.Read.$fReadGeneralCategory89_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory91_closure;
         const GHC.Read.$fReadGeneralCategory90_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.22466995 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory88_bytes" {
     GHC.Read.$fReadGeneralCategory88_bytes:
         I8[] [70,105,110,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.227257641 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory87_closure" {
     GHC.Read.$fReadGeneralCategory87_closure:
         const GHC.Read.$fReadGeneralCategory87_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory87_entry() //  [R1]
         { []
         }
     {offset
       c3VMl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VMm; else goto c3VMn;
       c3VMm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VMn: // global
           (_c3VMi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VMi::I64 == 0) goto c3VMk; else goto c3VMj;
       c3VMk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VMj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VMi::I64;
           R2 = GHC.Read.$fReadGeneralCategory88_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory87_info" {
     GHC.Read.$fReadGeneralCategory87_info:
         const GHC.Read.$fReadGeneralCategory87_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.231127359 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory86_closure" {
     GHC.Read.$fReadGeneralCategory86_closure:
         const GHC.Read.$fReadGeneralCategory86_info;
 },
 GHC.Read.$fReadGeneralCategory86_entry() //  [R3]
         { []
         }
     {offset
       c3VMz: // global
           R2 = GHC.Unicode.FinalQuote_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory86_info" {
     GHC.Read.$fReadGeneralCategory86_info:
         const GHC.Read.$fReadGeneralCategory86_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.234428866 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory85_closure" {
     GHC.Read.$fReadGeneralCategory85_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory87_closure;
         const GHC.Read.$fReadGeneralCategory86_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.236157236 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory84_bytes" {
     GHC.Read.$fReadGeneralCategory84_bytes:
         I8[] [79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.238479691 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory83_closure" {
     GHC.Read.$fReadGeneralCategory83_closure:
         const GHC.Read.$fReadGeneralCategory83_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory83_entry() //  [R1]
         { []
         }
     {offset
       c3VMO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VMP; else goto c3VMQ;
       c3VMP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VMQ: // global
           (_c3VML::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VML::I64 == 0) goto c3VMN; else goto c3VMM;
       c3VMN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VMM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VML::I64;
           R2 = GHC.Read.$fReadGeneralCategory84_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory83_info" {
     GHC.Read.$fReadGeneralCategory83_info:
         const GHC.Read.$fReadGeneralCategory83_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.242442515 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory82_closure" {
     GHC.Read.$fReadGeneralCategory82_closure:
         const GHC.Read.$fReadGeneralCategory82_info;
 },
 GHC.Read.$fReadGeneralCategory82_entry() //  [R3]
         { []
         }
     {offset
       c3VN2: // global
           R2 = GHC.Unicode.OtherPunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory82_info" {
     GHC.Read.$fReadGeneralCategory82_info:
         const GHC.Read.$fReadGeneralCategory82_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.246021747 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory81_closure" {
     GHC.Read.$fReadGeneralCategory81_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory83_closure;
         const GHC.Read.$fReadGeneralCategory82_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.247726365 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory80_bytes" {
     GHC.Read.$fReadGeneralCategory80_bytes:
         I8[] [77,97,116,104,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.249946549 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory79_closure" {
     GHC.Read.$fReadGeneralCategory79_closure:
         const GHC.Read.$fReadGeneralCategory79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory79_entry() //  [R1]
         { []
         }
     {offset
       c3VNh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VNi; else goto c3VNj;
       c3VNi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VNj: // global
           (_c3VNe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VNe::I64 == 0) goto c3VNg; else goto c3VNf;
       c3VNg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VNf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VNe::I64;
           R2 = GHC.Read.$fReadGeneralCategory80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory79_info" {
     GHC.Read.$fReadGeneralCategory79_info:
         const GHC.Read.$fReadGeneralCategory79_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.254342202 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory78_closure" {
     GHC.Read.$fReadGeneralCategory78_closure:
         const GHC.Read.$fReadGeneralCategory78_info;
 },
 GHC.Read.$fReadGeneralCategory78_entry() //  [R3]
         { []
         }
     {offset
       c3VNv: // global
           R2 = GHC.Unicode.MathSymbol_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory78_info" {
     GHC.Read.$fReadGeneralCategory78_info:
         const GHC.Read.$fReadGeneralCategory78_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.257873677 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory77_closure" {
     GHC.Read.$fReadGeneralCategory77_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory79_closure;
         const GHC.Read.$fReadGeneralCategory78_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.259586934 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory76_bytes" {
     GHC.Read.$fReadGeneralCategory76_bytes:
         I8[] [67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.261922937 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory75_closure" {
     GHC.Read.$fReadGeneralCategory75_closure:
         const GHC.Read.$fReadGeneralCategory75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory75_entry() //  [R1]
         { []
         }
     {offset
       c3VNK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VNL; else goto c3VNM;
       c3VNL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VNM: // global
           (_c3VNH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VNH::I64 == 0) goto c3VNJ; else goto c3VNI;
       c3VNJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VNI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VNH::I64;
           R2 = GHC.Read.$fReadGeneralCategory76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory75_info" {
     GHC.Read.$fReadGeneralCategory75_info:
         const GHC.Read.$fReadGeneralCategory75_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.26634544 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory74_closure" {
     GHC.Read.$fReadGeneralCategory74_closure:
         const GHC.Read.$fReadGeneralCategory74_info;
 },
 GHC.Read.$fReadGeneralCategory74_entry() //  [R3]
         { []
         }
     {offset
       c3VNY: // global
           R2 = GHC.Unicode.CurrencySymbol_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory74_info" {
     GHC.Read.$fReadGeneralCategory74_info:
         const GHC.Read.$fReadGeneralCategory74_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.269391179 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory73_closure" {
     GHC.Read.$fReadGeneralCategory73_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory75_closure;
         const GHC.Read.$fReadGeneralCategory74_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.271170609 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory72_bytes" {
     GHC.Read.$fReadGeneralCategory72_bytes:
         I8[] [77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.273388329 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory71_closure" {
     GHC.Read.$fReadGeneralCategory71_closure:
         const GHC.Read.$fReadGeneralCategory71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory71_entry() //  [R1]
         { []
         }
     {offset
       c3VOd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VOe; else goto c3VOf;
       c3VOe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VOf: // global
           (_c3VOa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VOa::I64 == 0) goto c3VOc; else goto c3VOb;
       c3VOc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VOb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VOa::I64;
           R2 = GHC.Read.$fReadGeneralCategory72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory71_info" {
     GHC.Read.$fReadGeneralCategory71_info:
         const GHC.Read.$fReadGeneralCategory71_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.27720347 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory70_closure" {
     GHC.Read.$fReadGeneralCategory70_closure:
         const GHC.Read.$fReadGeneralCategory70_info;
 },
 GHC.Read.$fReadGeneralCategory70_entry() //  [R3]
         { []
         }
     {offset
       c3VOr: // global
           R2 = GHC.Unicode.ModifierSymbol_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory70_info" {
     GHC.Read.$fReadGeneralCategory70_info:
         const GHC.Read.$fReadGeneralCategory70_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.280486964 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory69_closure" {
     GHC.Read.$fReadGeneralCategory69_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory71_closure;
         const GHC.Read.$fReadGeneralCategory70_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.282259065 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory68_bytes" {
     GHC.Read.$fReadGeneralCategory68_bytes:
         I8[] [79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.284691999 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory67_closure" {
     GHC.Read.$fReadGeneralCategory67_closure:
         const GHC.Read.$fReadGeneralCategory67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory67_entry() //  [R1]
         { []
         }
     {offset
       c3VOG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VOH; else goto c3VOI;
       c3VOH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VOI: // global
           (_c3VOD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VOD::I64 == 0) goto c3VOF; else goto c3VOE;
       c3VOF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VOE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VOD::I64;
           R2 = GHC.Read.$fReadGeneralCategory68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory67_info" {
     GHC.Read.$fReadGeneralCategory67_info:
         const GHC.Read.$fReadGeneralCategory67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.289403709 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory66_closure" {
     GHC.Read.$fReadGeneralCategory66_closure:
         const GHC.Read.$fReadGeneralCategory66_info;
 },
 GHC.Read.$fReadGeneralCategory66_entry() //  [R3]
         { []
         }
     {offset
       c3VOU: // global
           R2 = GHC.Unicode.OtherSymbol_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory66_info" {
     GHC.Read.$fReadGeneralCategory66_info:
         const GHC.Read.$fReadGeneralCategory66_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.292664199 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory65_closure" {
     GHC.Read.$fReadGeneralCategory65_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory67_closure;
         const GHC.Read.$fReadGeneralCategory66_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.294831968 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory64_bytes" {
     GHC.Read.$fReadGeneralCategory64_bytes:
         I8[] [83,112,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.297184279 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory63_closure" {
     GHC.Read.$fReadGeneralCategory63_closure:
         const GHC.Read.$fReadGeneralCategory63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory63_entry() //  [R1]
         { []
         }
     {offset
       c3VP9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VPa; else goto c3VPb;
       c3VPa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VPb: // global
           (_c3VP6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VP6::I64 == 0) goto c3VP8; else goto c3VP7;
       c3VP8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VP7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VP6::I64;
           R2 = GHC.Read.$fReadGeneralCategory64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory63_info" {
     GHC.Read.$fReadGeneralCategory63_info:
         const GHC.Read.$fReadGeneralCategory63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.301365754 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory62_closure" {
     GHC.Read.$fReadGeneralCategory62_closure:
         const GHC.Read.$fReadGeneralCategory62_info;
 },
 GHC.Read.$fReadGeneralCategory62_entry() //  [R3]
         { []
         }
     {offset
       c3VPn: // global
           R2 = GHC.Unicode.Space_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory62_info" {
     GHC.Read.$fReadGeneralCategory62_info:
         const GHC.Read.$fReadGeneralCategory62_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.304428067 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory61_closure" {
     GHC.Read.$fReadGeneralCategory61_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory63_closure;
         const GHC.Read.$fReadGeneralCategory62_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.306256041 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory60_bytes" {
     GHC.Read.$fReadGeneralCategory60_bytes:
         I8[] [76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.30869404 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory59_closure" {
     GHC.Read.$fReadGeneralCategory59_closure:
         const GHC.Read.$fReadGeneralCategory59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory59_entry() //  [R1]
         { []
         }
     {offset
       c3VPC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VPD; else goto c3VPE;
       c3VPD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VPE: // global
           (_c3VPz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VPz::I64 == 0) goto c3VPB; else goto c3VPA;
       c3VPB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VPA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VPz::I64;
           R2 = GHC.Read.$fReadGeneralCategory60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory59_info" {
     GHC.Read.$fReadGeneralCategory59_info:
         const GHC.Read.$fReadGeneralCategory59_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.312812975 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory58_closure" {
     GHC.Read.$fReadGeneralCategory58_closure:
         const GHC.Read.$fReadGeneralCategory58_info;
 },
 GHC.Read.$fReadGeneralCategory58_entry() //  [R3]
         { []
         }
     {offset
       c3VPQ: // global
           R2 = GHC.Unicode.LineSeparator_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory58_info" {
     GHC.Read.$fReadGeneralCategory58_info:
         const GHC.Read.$fReadGeneralCategory58_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.315942829 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory57_closure" {
     GHC.Read.$fReadGeneralCategory57_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory59_closure;
         const GHC.Read.$fReadGeneralCategory58_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.317866691 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory56_bytes" {
     GHC.Read.$fReadGeneralCategory56_bytes:
         I8[] [80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.320254716 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory55_closure" {
     GHC.Read.$fReadGeneralCategory55_closure:
         const GHC.Read.$fReadGeneralCategory55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory55_entry() //  [R1]
         { []
         }
     {offset
       c3VQ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VQ6; else goto c3VQ7;
       c3VQ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VQ7: // global
           (_c3VQ2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VQ2::I64 == 0) goto c3VQ4; else goto c3VQ3;
       c3VQ4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VQ3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VQ2::I64;
           R2 = GHC.Read.$fReadGeneralCategory56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory55_info" {
     GHC.Read.$fReadGeneralCategory55_info:
         const GHC.Read.$fReadGeneralCategory55_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.324600733 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory54_closure" {
     GHC.Read.$fReadGeneralCategory54_closure:
         const GHC.Read.$fReadGeneralCategory54_info;
 },
 GHC.Read.$fReadGeneralCategory54_entry() //  [R3]
         { []
         }
     {offset
       c3VQj: // global
           R2 = GHC.Unicode.ParagraphSeparator_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory54_info" {
     GHC.Read.$fReadGeneralCategory54_info:
         const GHC.Read.$fReadGeneralCategory54_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.328106667 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory53_closure" {
     GHC.Read.$fReadGeneralCategory53_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory55_closure;
         const GHC.Read.$fReadGeneralCategory54_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.329955307 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory52_bytes" {
     GHC.Read.$fReadGeneralCategory52_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.332329734 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory51_closure" {
     GHC.Read.$fReadGeneralCategory51_closure:
         const GHC.Read.$fReadGeneralCategory51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory51_entry() //  [R1]
         { []
         }
     {offset
       c3VQy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VQz; else goto c3VQA;
       c3VQz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VQA: // global
           (_c3VQv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VQv::I64 == 0) goto c3VQx; else goto c3VQw;
       c3VQx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VQw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VQv::I64;
           R2 = GHC.Read.$fReadGeneralCategory52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory51_info" {
     GHC.Read.$fReadGeneralCategory51_info:
         const GHC.Read.$fReadGeneralCategory51_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.336678383 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory50_closure" {
     GHC.Read.$fReadGeneralCategory50_closure:
         const GHC.Read.$fReadGeneralCategory50_info;
 },
 GHC.Read.$fReadGeneralCategory50_entry() //  [R3]
         { []
         }
     {offset
       c3VQM: // global
           R2 = GHC.Unicode.Control_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory50_info" {
     GHC.Read.$fReadGeneralCategory50_info:
         const GHC.Read.$fReadGeneralCategory50_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.339770172 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory49_closure" {
     GHC.Read.$fReadGeneralCategory49_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory51_closure;
         const GHC.Read.$fReadGeneralCategory50_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.341488892 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory48_bytes" {
     GHC.Read.$fReadGeneralCategory48_bytes:
         I8[] [70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.343928671 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory47_closure" {
     GHC.Read.$fReadGeneralCategory47_closure:
         const GHC.Read.$fReadGeneralCategory47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory47_entry() //  [R1]
         { []
         }
     {offset
       c3VR1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VR2; else goto c3VR3;
       c3VR2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VR3: // global
           (_c3VQY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VQY::I64 == 0) goto c3VR0; else goto c3VQZ;
       c3VR0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VQZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VQY::I64;
           R2 = GHC.Read.$fReadGeneralCategory48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory47_info" {
     GHC.Read.$fReadGeneralCategory47_info:
         const GHC.Read.$fReadGeneralCategory47_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.348252832 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory46_closure" {
     GHC.Read.$fReadGeneralCategory46_closure:
         const GHC.Read.$fReadGeneralCategory46_info;
 },
 GHC.Read.$fReadGeneralCategory46_entry() //  [R3]
         { []
         }
     {offset
       c3VRf: // global
           R2 = GHC.Unicode.Format_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory46_info" {
     GHC.Read.$fReadGeneralCategory46_info:
         const GHC.Read.$fReadGeneralCategory46_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.352642871 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory45_closure" {
     GHC.Read.$fReadGeneralCategory45_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory47_closure;
         const GHC.Read.$fReadGeneralCategory46_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.354407153 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory44_bytes" {
     GHC.Read.$fReadGeneralCategory44_bytes:
         I8[] [83,117,114,114,111,103,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.356915775 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory43_closure" {
     GHC.Read.$fReadGeneralCategory43_closure:
         const GHC.Read.$fReadGeneralCategory43_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory43_entry() //  [R1]
         { []
         }
     {offset
       c3VRu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VRv; else goto c3VRw;
       c3VRv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VRw: // global
           (_c3VRr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VRr::I64 == 0) goto c3VRt; else goto c3VRs;
       c3VRt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VRs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VRr::I64;
           R2 = GHC.Read.$fReadGeneralCategory44_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory43_info" {
     GHC.Read.$fReadGeneralCategory43_info:
         const GHC.Read.$fReadGeneralCategory43_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.361630863 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory42_closure" {
     GHC.Read.$fReadGeneralCategory42_closure:
         const GHC.Read.$fReadGeneralCategory42_info;
 },
 GHC.Read.$fReadGeneralCategory42_entry() //  [R3]
         { []
         }
     {offset
       c3VRI: // global
           R2 = GHC.Unicode.Surrogate_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory42_info" {
     GHC.Read.$fReadGeneralCategory42_info:
         const GHC.Read.$fReadGeneralCategory42_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.364907761 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory41_closure" {
     GHC.Read.$fReadGeneralCategory41_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory43_closure;
         const GHC.Read.$fReadGeneralCategory42_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.366765987 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory40_bytes" {
     GHC.Read.$fReadGeneralCategory40_bytes:
         I8[] [80,114,105,118,97,116,101,85,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.369164727 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory39_closure" {
     GHC.Read.$fReadGeneralCategory39_closure:
         const GHC.Read.$fReadGeneralCategory39_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory39_entry() //  [R1]
         { []
         }
     {offset
       c3VRX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VRY; else goto c3VRZ;
       c3VRY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VRZ: // global
           (_c3VRU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VRU::I64 == 0) goto c3VRW; else goto c3VRV;
       c3VRW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VRV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VRU::I64;
           R2 = GHC.Read.$fReadGeneralCategory40_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory39_info" {
     GHC.Read.$fReadGeneralCategory39_info:
         const GHC.Read.$fReadGeneralCategory39_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.373940398 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory38_closure" {
     GHC.Read.$fReadGeneralCategory38_closure:
         const GHC.Read.$fReadGeneralCategory38_info;
 },
 GHC.Read.$fReadGeneralCategory38_entry() //  [R3]
         { []
         }
     {offset
       c3VSb: // global
           R2 = GHC.Unicode.PrivateUse_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory38_info" {
     GHC.Read.$fReadGeneralCategory38_info:
         const GHC.Read.$fReadGeneralCategory38_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.377211367 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory37_closure" {
     GHC.Read.$fReadGeneralCategory37_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory39_closure;
         const GHC.Read.$fReadGeneralCategory38_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.378995063 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory35_bytes" {
     GHC.Read.$fReadGeneralCategory35_bytes:
         I8[] [78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.381273448 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory34_closure" {
     GHC.Read.$fReadGeneralCategory34_closure:
         const GHC.Read.$fReadGeneralCategory34_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory34_entry() //  [R1]
         { []
         }
     {offset
       c3VSq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VSr; else goto c3VSs;
       c3VSr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VSs: // global
           (_c3VSn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VSn::I64 == 0) goto c3VSp; else goto c3VSo;
       c3VSp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VSo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VSn::I64;
           R2 = GHC.Read.$fReadGeneralCategory35_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory34_info" {
     GHC.Read.$fReadGeneralCategory34_info:
         const GHC.Read.$fReadGeneralCategory34_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.385218171 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory33_closure" {
     GHC.Read.$fReadGeneralCategory33_closure:
         const GHC.Read.$fReadGeneralCategory33_info;
 },
 GHC.Read.$fReadGeneralCategory33_entry() //  [R3]
         { []
         }
     {offset
       c3VSE: // global
           R2 = GHC.Unicode.NotAssigned_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory33_info" {
     GHC.Read.$fReadGeneralCategory33_info:
         const GHC.Read.$fReadGeneralCategory33_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.388903821 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory32_closure" {
     GHC.Read.$fReadGeneralCategory32_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory34_closure;
         const GHC.Read.$fReadGeneralCategory33_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.391189073 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory31_closure" {
     GHC.Read.$fReadGeneralCategory31_closure:
         const GHC.Read.$fReadGeneralCategory31_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory31_entry() //  [R2]
         { []
         }
     {offset
       c3VSQ: // global
           R4 = R2;
           R3 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           R2 = GHC.Read.$fReadGeneralCategory32_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory31_info" {
     GHC.Read.$fReadGeneralCategory31_info:
         const GHC.Read.$fReadGeneralCategory31_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3NLQ_srt+1040;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.39490927 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory30_closure" {
     GHC.Read.$fReadGeneralCategory30_closure:
         const GHC.Read.$fReadGeneralCategory30_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory30_entry() //  [R2]
         { []
         }
     {offset
       c3VT1: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory31_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory37_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory30_info" {
     GHC.Read.$fReadGeneralCategory30_info:
         const GHC.Read.$fReadGeneralCategory30_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.398752837 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory29_closure" {
     GHC.Read.$fReadGeneralCategory29_closure:
         const GHC.Read.$fReadGeneralCategory29_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory29_entry() //  [R2]
         { []
         }
     {offset
       c3VTc: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory30_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory41_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory29_info" {
     GHC.Read.$fReadGeneralCategory29_info:
         const GHC.Read.$fReadGeneralCategory29_entry;
         const 0;
         const 107374182414;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.402232587 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory28_closure" {
     GHC.Read.$fReadGeneralCategory28_closure:
         const GHC.Read.$fReadGeneralCategory28_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory28_entry() //  [R2]
         { []
         }
     {offset
       c3VTn: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory29_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory45_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory28_info" {
     GHC.Read.$fReadGeneralCategory28_info:
         const GHC.Read.$fReadGeneralCategory28_entry;
         const 0;
         const 416611827726;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.406058227 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory27_closure" {
     GHC.Read.$fReadGeneralCategory27_closure:
         const GHC.Read.$fReadGeneralCategory27_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory27_entry() //  [R2]
         { []
         }
     {offset
       c3VTy: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory28_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory49_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory27_info" {
     GHC.Read.$fReadGeneralCategory27_info:
         const GHC.Read.$fReadGeneralCategory27_entry;
         const 0;
         const 1653562408974;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.409885801 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory26_closure" {
     GHC.Read.$fReadGeneralCategory26_closure:
         const GHC.Read.$fReadGeneralCategory26_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory26_entry() //  [R2]
         { []
         }
     {offset
       c3VTJ: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory27_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory53_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory26_info" {
     GHC.Read.$fReadGeneralCategory26_info:
         const GHC.Read.$fReadGeneralCategory26_entry;
         const 0;
         const 6601364733966;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.413904203 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory25_closure" {
     GHC.Read.$fReadGeneralCategory25_closure:
         const GHC.Read.$fReadGeneralCategory25_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory25_entry() //  [R2]
         { []
         }
     {offset
       c3VTU: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory26_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory57_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory25_info" {
     GHC.Read.$fReadGeneralCategory25_info:
         const GHC.Read.$fReadGeneralCategory25_entry;
         const 0;
         const 26392574033934;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.417527426 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory24_closure" {
     GHC.Read.$fReadGeneralCategory24_closure:
         const GHC.Read.$fReadGeneralCategory24_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory24_entry() //  [R2]
         { []
         }
     {offset
       c3VU5: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory25_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory61_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory24_info" {
     GHC.Read.$fReadGeneralCategory24_info:
         const GHC.Read.$fReadGeneralCategory24_entry;
         const 0;
         const 105557411233806;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.4211044 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory23_closure" {
     GHC.Read.$fReadGeneralCategory23_closure:
         const GHC.Read.$fReadGeneralCategory23_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory23_entry() //  [R2]
         { []
         }
     {offset
       c3VUg: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory24_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory65_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory23_info" {
     GHC.Read.$fReadGeneralCategory23_info:
         const GHC.Read.$fReadGeneralCategory23_entry;
         const 0;
         const 422216760033294;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.428615592 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory22_closure" {
     GHC.Read.$fReadGeneralCategory22_closure:
         const GHC.Read.$fReadGeneralCategory22_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory22_entry() //  [R2]
         { []
         }
     {offset
       c3VUr: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory23_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory69_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory22_info" {
     GHC.Read.$fReadGeneralCategory22_info:
         const GHC.Read.$fReadGeneralCategory22_entry;
         const 0;
         const 1688854155231246;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.432130792 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory21_closure" {
     GHC.Read.$fReadGeneralCategory21_closure:
         const GHC.Read.$fReadGeneralCategory21_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory21_entry() //  [R2]
         { []
         }
     {offset
       c3VUC: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory22_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory73_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory21_info" {
     GHC.Read.$fReadGeneralCategory21_info:
         const GHC.Read.$fReadGeneralCategory21_entry;
         const 0;
         const 6755403736023054;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.435662993 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory20_closure" {
     GHC.Read.$fReadGeneralCategory20_closure:
         const GHC.Read.$fReadGeneralCategory20_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory20_entry() //  [R2]
         { []
         }
     {offset
       c3VUN: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory21_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory77_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory20_info" {
     GHC.Read.$fReadGeneralCategory20_info:
         const GHC.Read.$fReadGeneralCategory20_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.439785133 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory19_closure" {
     GHC.Read.$fReadGeneralCategory19_closure:
         const GHC.Read.$fReadGeneralCategory19_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory19_entry() //  [R2]
         { []
         }
     {offset
       c3VUY: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory20_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory81_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory19_info" {
     GHC.Read.$fReadGeneralCategory19_info:
         const GHC.Read.$fReadGeneralCategory19_entry;
         const 0;
         const 108086395351859214;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.443380858 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory18_closure" {
     GHC.Read.$fReadGeneralCategory18_closure:
         const GHC.Read.$fReadGeneralCategory18_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory18_entry() //  [R2]
         { []
         }
     {offset
       c3VV9: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory19_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory85_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory18_info" {
     GHC.Read.$fReadGeneralCategory18_info:
         const GHC.Read.$fReadGeneralCategory18_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.446977759 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory17_closure" {
     GHC.Read.$fReadGeneralCategory17_closure:
         const GHC.Read.$fReadGeneralCategory17_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory17_entry() //  [R2]
         { []
         }
     {offset
       c3VVk: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory18_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory89_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory17_info" {
     GHC.Read.$fReadGeneralCategory17_info:
         const GHC.Read.$fReadGeneralCategory17_entry;
         const 0;
         const 1729382261205237774;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.450893193 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory16_closure" {
     GHC.Read.$fReadGeneralCategory16_closure:
         const GHC.Read.$fReadGeneralCategory16_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory16_entry() //  [R2]
         { []
         }
     {offset
       c3VVv: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory17_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory93_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory16_info" {
     GHC.Read.$fReadGeneralCategory16_info:
         const GHC.Read.$fReadGeneralCategory16_entry;
         const 0;
         const 6917529031936049166;
         const 4294967301;
         const S3NLQ_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.454615882 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory15_closure" {
     GHC.Read.$fReadGeneralCategory15_closure:
         const GHC.Read.$fReadGeneralCategory15_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory15_entry() //  [R2]
         { []
         }
     {offset
       c3VVG: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory16_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory97_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory15_info" {
     GHC.Read.$fReadGeneralCategory15_info:
         const GHC.Read.$fReadGeneralCategory15_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3NLQ_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.459263809 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory14_closure" {
     GHC.Read.$fReadGeneralCategory14_closure:
         const GHC.Read.$fReadGeneralCategory14_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory14_entry() //  [R2]
         { []
         }
     {offset
       c3VVR: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory15_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory101_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory14_info" {
     GHC.Read.$fReadGeneralCategory14_info:
         const GHC.Read.$fReadGeneralCategory14_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.463891543 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory13_closure" {
     GHC.Read.$fReadGeneralCategory13_closure:
         const GHC.Read.$fReadGeneralCategory13_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory13_entry() //  [R2]
         { []
         }
     {offset
       c3VW2: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory14_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory105_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory13_info" {
     GHC.Read.$fReadGeneralCategory13_info:
         const GHC.Read.$fReadGeneralCategory13_entry;
         const 0;
         const 107374182414;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.467465605 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory12_closure" {
     GHC.Read.$fReadGeneralCategory12_closure:
         const GHC.Read.$fReadGeneralCategory12_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory12_entry() //  [R2]
         { []
         }
     {offset
       c3VWd: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory13_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory109_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory12_info" {
     GHC.Read.$fReadGeneralCategory12_info:
         const GHC.Read.$fReadGeneralCategory12_entry;
         const 0;
         const 416611827726;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.471385892 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory11_closure" {
     GHC.Read.$fReadGeneralCategory11_closure:
         const GHC.Read.$fReadGeneralCategory11_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory11_entry() //  [R2]
         { []
         }
     {offset
       c3VWo: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory12_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory113_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory11_info" {
     GHC.Read.$fReadGeneralCategory11_info:
         const GHC.Read.$fReadGeneralCategory11_entry;
         const 0;
         const 1653562408974;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.475068562 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory10_closure" {
     GHC.Read.$fReadGeneralCategory10_closure:
         const GHC.Read.$fReadGeneralCategory10_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory10_entry() //  [R2]
         { []
         }
     {offset
       c3VWz: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory11_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory117_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory10_info" {
     GHC.Read.$fReadGeneralCategory10_info:
         const GHC.Read.$fReadGeneralCategory10_entry;
         const 0;
         const 6601364733966;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.478669463 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory9_closure" {
     GHC.Read.$fReadGeneralCategory9_closure:
         const GHC.Read.$fReadGeneralCategory9_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory9_entry() //  [R2]
         { []
         }
     {offset
       c3VWK: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory10_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory121_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory9_info" {
     GHC.Read.$fReadGeneralCategory9_info:
         const GHC.Read.$fReadGeneralCategory9_entry;
         const 0;
         const 26392574033934;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.48252295 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory8_closure" {
     GHC.Read.$fReadGeneralCategory8_closure:
         const GHC.Read.$fReadGeneralCategory8_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory8_entry() //  [R2]
         { []
         }
     {offset
       c3VWV: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory9_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory125_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory8_info" {
     GHC.Read.$fReadGeneralCategory8_info:
         const GHC.Read.$fReadGeneralCategory8_entry;
         const 0;
         const 105557411233806;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.48602155 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory7_closure" {
     GHC.Read.$fReadGeneralCategory7_closure:
         const GHC.Read.$fReadGeneralCategory7_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory7_entry() //  [R2]
         { []
         }
     {offset
       c3VX6: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory8_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory129_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory7_info" {
     GHC.Read.$fReadGeneralCategory7_info:
         const GHC.Read.$fReadGeneralCategory7_entry;
         const 0;
         const 422216760033294;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.489490092 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory6_closure" {
     GHC.Read.$fReadGeneralCategory6_closure:
         const GHC.Read.$fReadGeneralCategory6_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory6_entry() //  [R2]
         { []
         }
     {offset
       c3VXh: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory7_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory133_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory6_info" {
     GHC.Read.$fReadGeneralCategory6_info:
         const GHC.Read.$fReadGeneralCategory6_entry;
         const 0;
         const 1688854155231246;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.492824581 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory5_closure" {
     GHC.Read.$fReadGeneralCategory5_closure:
         const GHC.Read.$fReadGeneralCategory5_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory5_entry() //  [R2]
         { []
         }
     {offset
       c3VXs: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory6_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory137_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory5_info" {
     GHC.Read.$fReadGeneralCategory5_info:
         const GHC.Read.$fReadGeneralCategory5_entry;
         const 0;
         const 6755403736023054;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.496262989 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory4_closure" {
     GHC.Read.$fReadGeneralCategory4_closure:
         const GHC.Read.$fReadGeneralCategory4_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory4_entry() //  [R2]
         { []
         }
     {offset
       c3VXD: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory5_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory141_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory4_info" {
     GHC.Read.$fReadGeneralCategory4_info:
         const GHC.Read.$fReadGeneralCategory4_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.50017576 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory3_closure" {
     GHC.Read.$fReadGeneralCategory3_closure:
         const GHC.Read.$fReadGeneralCategory3_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory3_entry() //  [R2]
         { []
         }
     {offset
       c3VXO: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory4_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory145_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory3_info" {
     GHC.Read.$fReadGeneralCategory3_info:
         const GHC.Read.$fReadGeneralCategory3_entry;
         const 0;
         const 108086395351859214;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.503621099 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory2_closure" {
     GHC.Read.$fReadGeneralCategory2_closure:
         const GHC.Read.$fReadGeneralCategory2_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory2_entry() //  [R2]
         { []
         }
     {offset
       c3VXZ: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory3_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory149_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory2_info" {
     GHC.Read.$fReadGeneralCategory2_info:
         const GHC.Read.$fReadGeneralCategory2_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const S3NLQ_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.507426506 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory1_closure" {
     GHC.Read.$fReadGeneralCategory1_closure:
         const GHC.Read.$fReadGeneralCategory1_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3VYa: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadGeneralCategory2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory1_info" {
     GHC.Read.$fReadGeneralCategory1_info:
         const GHC.Read.$fReadGeneralCategory1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.511509623 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory_$creadsPrec_closure" {
     GHC.Read.$fReadGeneralCategory_$creadsPrec_closure:
         const GHC.Read.$fReadGeneralCategory_$creadsPrec_info;
         const 0;
 },
 sat_s3NBl_entry() //  [R1]
         { []
         }
     {offset
       c3VYp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VYq; else goto c3VYr;
       c3VYq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VYr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadGeneralCategory2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NBl_info" {
     sat_s3NBl_info:
         const sat_s3NBl_entry;
         const 1;
         const 12884901904;
         const S3NLQ_srt+1528;
 },
 GHC.Read.$fReadGeneralCategory_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3VYs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3VYw; else goto c3VYv;
       c3VYw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadGeneralCategory_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3VYv: // global
           I64[Hp - 16] = sat_s3NBl_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory_$creadsPrec_info" {
     GHC.Read.$fReadGeneralCategory_$creadsPrec_info:
         const GHC.Read.$fReadGeneralCategory_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3NLQ_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.517161507 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory_$creadListPrec_closure" {
     GHC.Read.$fReadGeneralCategory_$creadListPrec_closure:
         const GHC.Read.$fReadGeneralCategory_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3VYL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VYM; else goto c3VYN;
       c3VYM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VYN: // global
           (_c3VYI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VYI::I64 == 0) goto c3VYK; else goto c3VYJ;
       c3VYK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VYJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VYI::I64;
           R2 = GHC.Read.$fReadGeneralCategory1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory_$creadListPrec_info" {
     GHC.Read.$fReadGeneralCategory_$creadListPrec_info:
         const GHC.Read.$fReadGeneralCategory_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S3NLQ_srt+1552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.521736903 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory153_closure" {
     GHC.Read.$fReadGeneralCategory153_closure:
         const GHC.Read.$fReadGeneralCategory153_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory153_entry() //  [R1]
         { []
         }
     {offset
       c3VZ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3VZ2; else goto c3VZ3;
       c3VZ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3VZ3: // global
           (_c3VYY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3VYY::I64 == 0) goto c3VZ0; else goto c3VYZ;
       c3VZ0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3VYZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3VYY::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadGeneralCategory_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory153_info" {
     GHC.Read.$fReadGeneralCategory153_info:
         const GHC.Read.$fReadGeneralCategory153_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+1568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.52584634 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory_$creadList_closure" {
     GHC.Read.$fReadGeneralCategory_$creadList_closure:
         const GHC.Read.$fReadGeneralCategory_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3VZf: // global
           R3 = R2;
           R2 = GHC.Read.$fReadGeneralCategory153_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory_$creadList_info" {
     GHC.Read.$fReadGeneralCategory_$creadList_info:
         const GHC.Read.$fReadGeneralCategory_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+1576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.528992253 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory_closure" {
     GHC.Read.$fReadGeneralCategory_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadGeneralCategory_$creadsPrec_closure+1;
         const GHC.Read.$fReadGeneralCategory_$creadList_closure+1;
         const GHC.Read.$fReadGeneralCategory1_closure+2;
         const GHC.Read.$fReadGeneralCategory_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.531281522 UTC

[section ""data" . GHC.Read.$fRead()4_closure" {
     GHC.Read.$fRead()4_closure:
         const GHC.Read.$fRead()4_info;
 },
 GHC.Read.$fRead()4_entry() //  [R3]
         { []
         }
     {offset
       c3VZr: // global
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()4_info" {
     GHC.Read.$fRead()4_info:
         const GHC.Read.$fRead()4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.535260527 UTC

[section ""data" . GHC.Read.$fRead()3_closure" {
     GHC.Read.$fRead()3_closure:
         const GHC.Read.$fRead()3_info;
 },
 GHC.Read.$fRead()3_entry() //  [R2, R3]
         { []
         }
     {offset
       c3VZF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3VZG; else goto c3VZH;
       c3VZG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead()3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3VZH: // global
           I64[Sp - 8] = block_c3VZC_info;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fRead()4_closure+2;
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()3_info" {
     GHC.Read.$fRead()3_info:
         const GHC.Read.$fRead()3_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3VZC() //  [R1]
         { []
         }
     {offset
       c3VZC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3VZK; else goto c3VZJ;
       c3VZK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3VZJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3VZC_info" {
     block_c3VZC_info:
         const _c3VZC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.541045176 UTC

[section ""data" . GHC.Read.$fRead()2_closure" {
     GHC.Read.$fRead()2_closure:
         const GHC.Read.$fRead()2_info;
 },
 GHC.Read.$fRead()2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3W01: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3W02; else goto c3W03;
       c3W02: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead()2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W03: // global
           I64[Sp - 8] = block_c3VZY_info;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fRead()3_closure+2;
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()2_info" {
     GHC.Read.$fRead()2_info:
         const GHC.Read.$fRead()2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3VZY() //  [R1]
         { []
         }
     {offset
       c3VZY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3W06; else goto c3W05;
       c3W06: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3W05: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3VZY_info" {
     block_c3VZY_info:
         const _c3VZY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.546870787 UTC

[section ""data" . GHC.Read.$fRead()1_closure" {
     GHC.Read.$fRead()1_closure:
         const GHC.Read.$fRead()1_info;
         const 0;
 },
 GHC.Read.$fRead()1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3W0k: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fRead()2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()1_info" {
     GHC.Read.$fRead()1_info:
         const GHC.Read.$fRead()1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.550989395 UTC

[section ""data" . GHC.Read.$fRead()_$creadsPrec_closure" {
     GHC.Read.$fRead()_$creadsPrec_closure:
         const GHC.Read.$fRead()_$creadsPrec_info;
         const 0;
 },
 sat_s3NBx_entry() //  [R1]
         { []
         }
     {offset
       c3W0z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W0A; else goto c3W0B;
       c3W0A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W0B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fRead()2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NBx_info" {
     sat_s3NBx_info:
         const sat_s3NBx_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+1536;
 },
 GHC.Read.$fRead()_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3W0C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3W0G; else goto c3W0F;
       c3W0G: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead()_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3W0F: // global
           I64[Hp - 16] = sat_s3NBx_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()_$creadsPrec_info" {
     GHC.Read.$fRead()_$creadsPrec_info:
         const GHC.Read.$fRead()_$creadsPrec_entry;
         const 0;
         const 279172874254;
         const 4294967301;
         const S3NLQ_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.556695836 UTC

[section ""data" . GHC.Read.$fRead()_$creadListPrec_closure" {
     GHC.Read.$fRead()_$creadListPrec_closure:
         const GHC.Read.$fRead()_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead()_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3W0V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W0W; else goto c3W0X;
       c3W0W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W0X: // global
           (_c3W0S::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3W0S::I64 == 0) goto c3W0U; else goto c3W0T;
       c3W0U: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3W0T: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3W0S::I64;
           R2 = GHC.Read.$fRead()1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()_$creadListPrec_info" {
     GHC.Read.$fRead()_$creadListPrec_info:
         const GHC.Read.$fRead()_$creadListPrec_entry;
         const 0;
         const 73014444053;
         const S3NLQ_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.561277789 UTC

[section ""data" . GHC.Read.$fRead()6_closure" {
     GHC.Read.$fRead()6_closure:
         const GHC.Read.$fRead()6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead()6_entry() //  [R1]
         { []
         }
     {offset
       c3W1b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W1c; else goto c3W1d;
       c3W1c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W1d: // global
           (_c3W18::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3W18::I64 == 0) goto c3W1a; else goto c3W19;
       c3W1a: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3W19: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3W18::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fRead()_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()6_info" {
     GHC.Read.$fRead()6_info:
         const GHC.Read.$fRead()6_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+1600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.565894523 UTC

[section ""data" . GHC.Read.$fRead()_$creadList_closure" {
     GHC.Read.$fRead()_$creadList_closure:
         const GHC.Read.$fRead()_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead()_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3W1p: // global
           R3 = R2;
           R2 = GHC.Read.$fRead()6_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()_$creadList_info" {
     GHC.Read.$fRead()_$creadList_info:
         const GHC.Read.$fRead()_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+1608;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.569107097 UTC

[section ""data" . GHC.Read.$fRead()_closure" {
     GHC.Read.$fRead()_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fRead()_$creadsPrec_closure+1;
         const GHC.Read.$fRead()_$creadList_closure+1;
         const GHC.Read.$fRead()1_closure+2;
         const GHC.Read.$fRead()_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.570926692 UTC

[section ""data" . GHC.Read.$fReadRatio5_closure" {
     GHC.Read.$fReadRatio5_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.572613492 UTC

[section ""cstring" . GHC.Read.$fReadRatio4_bytes" {
     GHC.Read.$fReadRatio4_bytes:
         I8[] [37]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.575003323 UTC

[section ""data" . GHC.Read.$fReadRatio3_closure" {
     GHC.Read.$fReadRatio3_closure:
         const GHC.Read.$fReadRatio3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadRatio3_entry() //  [R1]
         { []
         }
     {offset
       c3W1F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W1G; else goto c3W1H;
       c3W1G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W1H: // global
           (_c3W1C::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3W1C::I64 == 0) goto c3W1E; else goto c3W1D;
       c3W1E: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3W1D: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3W1C::I64;
           R2 = GHC.Read.$fReadRatio4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio3_info" {
     GHC.Read.$fReadRatio3_info:
         const GHC.Read.$fReadRatio3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.578594211 UTC

[section ""data" . GHC.Read.$fReadRatio2_closure" {
     GHC.Read.$fReadRatio2_closure:
         const Text.Read.Lex.Symbol_con_info;
         const GHC.Read.$fReadRatio3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.585531393 UTC

[section ""data" . GHC.Read.$fReadRatio1_closure" {
     GHC.Read.$fReadRatio1_closure:
         const GHC.Read.$fReadRatio1_info;
         const 0;
 },
 ds1_s3NBC_entry() //  [R1]
         { []
         }
     {offset
       c3W1Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3W1Z; else goto c3W20;
       c3W1Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W20: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Read.$fReadRatio5_closure+1;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3NBC_info" {
     ds1_s3NBC_info:
         const ds1_s3NBC_entry;
         const 1;
         const 16;
 },
 sat_s3NBL_entry() //  [R1]
         { []
         }
     {offset
       c3W2y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W2z; else goto c3W2A;
       c3W2z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W2A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.%_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NBL_info" {
     sat_s3NBL_info:
         const sat_s3NBL_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+1616;
 },
 sat_s3NBM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3W2B: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3W2F; else goto c3W2E;
       c3W2F: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3W2E: // global
           _s3NBy::P64 = P64[R1 + 7];
           _s3NBE::P64 = P64[R1 + 15];
           _s3NBI::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_s3NBL_info;
           P64[Hp - 16] = _s3NBy::P64;
           P64[Hp - 8] = _s3NBI::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3NBE::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NBM_info" {
     sat_s3NBM_info:
         const sat_s3NBM_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+1616;
 },
 sat_s3NBN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3W2G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3W2K; else goto c3W2J;
       c3W2K: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3W2J: // global
           _s3NBy::P64 = P64[R1 + 7];
           _s3NBC::P64 = P64[R1 + 15];
           _s3NBE::P64 = P64[R1 + 23];
           _s3NBI::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_s3NBM_info;
           P64[Hp - 16] = _s3NBy::P64;
           P64[Hp - 8] = _s3NBE::P64;
           P64[Hp] = _s3NBI::P64;
           R2 = Hp - 23;
           R1 = _s3NBC::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NBN_info" {
     sat_s3NBN_info:
         const sat_s3NBN_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+1616;
 },
 section ""relreadonly" . u3W3b_srtd" {
     u3W3b_srtd:
         const S3NLQ_srt+120;
         const 189;
         const 1;
         const 0;
         const 1729382256910270464;
 },
 sat_s3NBQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3W2O: // global
           _s3NBI::P64 = R2;
           _s3NBQ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3W2P; else goto c3W2Q;
       c3W2Q: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3W2S; else goto c3W2R;
       c3W2S: // global
           HpAlloc = 40;
           goto c3W2P;
       c3W2P: // global
           R2 = _s3NBI::P64;
           R1 = _s3NBQ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3W2R: // global
           _s3NBy::P64 = P64[_s3NBQ::P64 + 7];
           _s3NBC::P64 = P64[_s3NBQ::P64 + 15];
           _s3NBE::P64 = P64[_s3NBQ::P64 + 23];
           I64[Hp - 32] = sat_s3NBN_info;
           P64[Hp - 24] = _s3NBy::P64;
           P64[Hp - 16] = _s3NBC::P64;
           P64[Hp - 8] = _s3NBE::P64;
           P64[Hp] = _s3NBI::P64;
           I64[Sp - 8] = block_c3W2L_info;
           R3 = Hp - 31;
           R2 = GHC.Read.$fReadRatio2_closure+5;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NBQ_info" {
     sat_s3NBQ_info:
         const sat_s3NBQ_entry;
         const 3;
         const 18446744069414584328;
         const 4294967301;
         const u3W3b_srtd;
 },
 _c3W2L() //  [R1]
         { []
         }
     {offset
       c3W2L: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3W2V; else goto c3W2U;
       c3W2V: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3W2U: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3W2L_info" {
     block_c3W2L_info:
         const _c3W2L;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3W3c_srtd" {
     u3W3c_srtd:
         const S3NLQ_srt+120;
         const 189;
         const 1;
         const 0;
         const 1729382256910270464;
 },
 sat_s3NBR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3W2W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3W2X; else goto c3W2Y;
       c3W2X: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W2Y: // global
           I64[Sp - 32] = block_c3W26_info;
           _s3NBy::P64 = P64[R1 + 6];
           _s3NBC::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s3NBy::P64;
           P64[Sp - 16] = _s3NBC::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3W35; else goto c3W27;
       u3W35: // global
           call _c3W26(R1) args: 0, res: 0, upd: 0;
       c3W27: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NBR_info" {
     sat_s3NBR_info:
         const sat_s3NBR_entry;
         const 2;
         const 18446744069414584331;
         const 8589934607;
         const u3W3c_srtd;
 },
 section ""relreadonly" . u3W3d_srtd" {
     u3W3d_srtd:
         const S3NLQ_srt+120;
         const 189;
         const 1;
         const 0;
         const 1729382256910270464;
 },
 _c3W26() //  [R1]
         { []
         }
     {offset
       c3W26: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3W31; else goto c3W30;
       c3W31: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3W30: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 7)) goto c3W33; else goto c3W34;
       c3W33: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3W34: // global
           I64[Hp - 24] = sat_s3NBQ_info;
           P64[Hp - 16] = P64[Sp + 8];
           _s3NBC::P64 = P64[Sp + 16];
           P64[Hp - 8] = _s3NBC::P64;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 23;
           R1 = _s3NBC::P64;
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3W26_info" {
     block_c3W26_info:
         const _c3W26;
         const 3;
         const 18446744069414584350;
         const u3W3d_srtd;
 },
 section ""relreadonly" . u3W3e_srtd" {
     u3W3e_srtd:
         const S3NLQ_srt+120;
         const 190;
         const 1;
         const 0;
         const 4035788216077385728;
 },
 GHC.Read.$fReadRatio1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3W36: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3W3a; else goto c3W39;
       c3W3a: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W39: // global
           I64[Hp - 40] = ds1_s3NBC_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3NBR_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           _s3NBA::P64 = R4;
           R4 = R5;
           R3 = _s3NBA::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio1_info" {
     GHC.Read.$fReadRatio1_info:
         const GHC.Read.$fReadRatio1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u3W3e_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.607035141 UTC

[section ""data" . GHC.Read.$fReadRatio_$creadsPrec_closure" {
     GHC.Read.$fReadRatio_$creadsPrec_closure:
         const GHC.Read.$fReadRatio_$creadsPrec_info;
         const 0;
 },
 sat_s3NBV_entry() //  [R1]
         { []
         }
     {offset
       c3W43: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W44; else goto c3W45;
       c3W44: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W45: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadRatio1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NBV_info" {
     sat_s3NBV_info:
         const sat_s3NBV_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+1632;
 },
 GHC.Read.$fReadRatio_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3W46: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3W4a; else goto c3W49;
       c3W4a: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W49: // global
           I64[Hp - 32] = sat_s3NBV_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio_$creadsPrec_info" {
     GHC.Read.$fReadRatio_$creadsPrec_info:
         const GHC.Read.$fReadRatio_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3NLQ_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.613058316 UTC

[section ""data" . GHC.Read.$fReadRatio_$creadListPrec_closure" {
     GHC.Read.$fReadRatio_$creadListPrec_closure:
         const GHC.Read.$fReadRatio_$creadListPrec_info;
         const 0;
 },
 sat_s3NBY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3W4s: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadRatio1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NBY_info" {
     sat_s3NBY_info:
         const sat_s3NBY_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3NLQ_srt+1632;
 },
 GHC.Read.$fReadRatio_$creadListPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3W4v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3W4z; else goto c3W4y;
       c3W4z: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W4y: // global
           I64[Hp - 16] = sat_s3NBY_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio_$creadListPrec_info" {
     GHC.Read.$fReadRatio_$creadListPrec_info:
         const GHC.Read.$fReadRatio_$creadListPrec_entry;
         const 0;
         const 10999411245070;
         const 8589934607;
         const S3NLQ_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.619240738 UTC

[section ""data" . GHC.Read.$fReadRatio_$creadList_closure" {
     GHC.Read.$fReadRatio_$creadList_closure:
         const GHC.Read.$fReadRatio_$creadList_info;
         const 0;
 },
 sat_s3NC1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3W4U: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadRatio1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NC1_info" {
     sat_s3NC1_info:
         const sat_s3NC1_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3NLQ_srt+1632;
 },
 sat_s3NC2_entry() //  [R1]
         { []
         }
     {offset
       c3W4X: // global
           _s3NC2::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3W4Y; else goto c3W4Z;
       c3W4Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3W51; else goto c3W50;
       c3W51: // global
           HpAlloc = 24;
           goto c3W4Y;
       c3W4Y: // global
           R1 = _s3NC2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W50: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NC2::P64;
           _s3NBZ::P64 = P64[_s3NC2::P64 + 16];
           _s3NC0::P64 = P64[_s3NC2::P64 + 24];
           I64[Hp - 16] = sat_s3NC1_info;
           P64[Hp - 8] = _s3NBZ::P64;
           P64[Hp] = _s3NC0::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NC2_info" {
     sat_s3NC2_info:
         const sat_s3NC2_entry;
         const 2;
         const 2203318222866;
         const S3NLQ_srt+1560;
 },
 GHC.Read.$fReadRatio_$creadList_entry() //  [R2, R3]
         { []
         }
     {offset
       c3W52: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3W56; else goto c3W55;
       c3W56: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W55: // global
           I64[Hp - 24] = sat_s3NC2_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio_$creadList_info" {
     GHC.Read.$fReadRatio_$creadList_info:
         const GHC.Read.$fReadRatio_$creadList_entry;
         const 0;
         const 19795504267278;
         const 8589934607;
         const S3NLQ_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.628135831 UTC

[section ""data" . GHC.Read.$fReadRatio_closure" {
     GHC.Read.$fReadRatio_closure:
         const GHC.Read.$fReadRatio_info;
         const 0;
 },
 sat_s3NC8_entry() //  [R1]
         { []
         }
     {offset
       c3W5q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W5r; else goto c3W5s;
       c3W5r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W5s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadRatio_$creadListPrec_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NC8_info" {
     sat_s3NC8_info:
         const sat_s3NC8_entry;
         const 2;
         const 4294967314;
         const S3NLQ_srt+1648;
 },
 sat_s3NC7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3W5y: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadRatio1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NC7_info" {
     sat_s3NC7_info:
         const sat_s3NC7_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3NLQ_srt+1632;
 },
 sat_s3NC6_entry() //  [R1]
         { []
         }
     {offset
       c3W5F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W5G; else goto c3W5H;
       c3W5G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W5H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadRatio_$creadList_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NC6_info" {
     sat_s3NC6_info:
         const sat_s3NC6_entry;
         const 2;
         const 4294967314;
         const S3NLQ_srt+1656;
 },
 sat_s3NC5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3W5N: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadRatio_$creadsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NC5_info" {
     sat_s3NC5_info:
         const sat_s3NC5_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3NLQ_srt+1640;
 },
 GHC.Read.$fReadRatio_entry() //  [R2, R3]
         { []
         }
     {offset
       c3W5R: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3W5V; else goto c3W5U;
       c3W5V: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W5U: // global
           I64[Hp - 144] = sat_s3NC8_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s3NC7_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s3NC6_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s3NC5_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio_info" {
     GHC.Read.$fReadRatio_info:
         const GHC.Read.$fReadRatio_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S3NLQ_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.638034342 UTC

[section ""cstring" . GHC.Read.$fReadMaybe5_bytes" {
     GHC.Read.$fReadMaybe5_bytes:
         I8[] [78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.640504947 UTC

[section ""data" . GHC.Read.$fReadMaybe4_closure" {
     GHC.Read.$fReadMaybe4_closure:
         const GHC.Read.$fReadMaybe4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadMaybe4_entry() //  [R1]
         { []
         }
     {offset
       c3W6q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W6r; else goto c3W6s;
       c3W6r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W6s: // global
           (_c3W6n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3W6n::I64 == 0) goto c3W6p; else goto c3W6o;
       c3W6p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3W6o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3W6n::I64;
           R2 = GHC.Read.$fReadMaybe5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe4_info" {
     GHC.Read.$fReadMaybe4_info:
         const GHC.Read.$fReadMaybe4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.64410586 UTC

[section ""data" . GHC.Read.$fReadMaybe_lexeme1_closure" {
     GHC.Read.$fReadMaybe_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.Read.$fReadMaybe4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.645888735 UTC

[section ""cstring" . GHC.Read.$fReadMaybe3_bytes" {
     GHC.Read.$fReadMaybe3_bytes:
         I8[] [74,117,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.648187175 UTC

[section ""data" . GHC.Read.$fReadMaybe2_closure" {
     GHC.Read.$fReadMaybe2_closure:
         const GHC.Read.$fReadMaybe2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadMaybe2_entry() //  [R1]
         { []
         }
     {offset
       c3W6I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W6J; else goto c3W6K;
       c3W6J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W6K: // global
           (_c3W6F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3W6F::I64 == 0) goto c3W6H; else goto c3W6G;
       c3W6H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3W6G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3W6F::I64;
           R2 = GHC.Read.$fReadMaybe3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe2_info" {
     GHC.Read.$fReadMaybe2_info:
         const GHC.Read.$fReadMaybe2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.652434349 UTC

[section ""data" . GHC.Read.$fReadMaybe_lexeme_closure" {
     GHC.Read.$fReadMaybe_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.Read.$fReadMaybe2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.65415069 UTC

[section ""data" . GHC.Read.$fReadArray2_closure" {
     GHC.Read.$fReadArray2_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.66061114 UTC

[section ""data" . GHC.Read.$fReadMaybe1_closure" {
     GHC.Read.$fReadMaybe1_closure:
         const GHC.Read.$fReadMaybe1_info;
         const 0;
 },
 sat_s3NCf_entry() //  [R1]
         { []
         }
     {offset
       c3W78: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCf_info" {
     sat_s3NCf_info:
         const sat_s3NCf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NCp_entry() //  [R1, R2]
         { []
         }
     {offset
       c3W7B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3W7F; else goto c3W7E;
       c3W7F: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3W7E: // global
           _s3NCd::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s3NCd::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCp_info" {
     sat_s3NCp_info:
         const sat_s3NCp_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NCq_entry() //  [R1, R2]
         { []
         }
     {offset
       c3W7G: // global
           _s3NCm::P64 = R2;
           _s3NCq::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3W7H; else goto c3W7I;
       c3W7I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3W7K; else goto c3W7J;
       c3W7K: // global
           HpAlloc = 16;
           goto c3W7H;
       c3W7H: // global
           R2 = _s3NCm::P64;
           R1 = _s3NCq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3W7J: // global
           _s3NC9::P64 = P64[_s3NCq::P64 + 7];
           _s3NCd::P64 = P64[_s3NCq::P64 + 15];
           I64[Hp - 8] = sat_s3NCp_info;
           P64[Hp] = _s3NCd::P64;
           R2 = _s3NC9::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = GHC.Read.$fReadArray2_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCq_info" {
     sat_s3NCq_info:
         const sat_s3NCq_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3NCt_entry() //  [R1]
         { []
         }
     {offset
       c3W7L: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3W7M; else goto c3W7N;
       c3W7M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W7N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3W7h_info;
           _s3NC9::P64 = P64[R1 + 16];
           _s3NCd::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3NC9::P64;
           P64[Sp - 24] = _s3NCd::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3W80; else goto c3W7i;
       u3W80: // global
           call _c3W7h(R1) args: 0, res: 0, upd: 0;
       c3W7i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NCt_info" {
     sat_s3NCt_info:
         const sat_s3NCt_entry;
         const 3;
         const 12884901903;
         const S3NLQ_srt+1672;
 },
 _c3W7h() //  [R1]
         { []
         }
     {offset
       c3W7h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3W7Q; else goto c3W7P;
       c3W7Q: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3W7P: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c3W7S; else goto c3W7W;
       c3W7S: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c3W7W: // global
           I64[Hp - 16] = sat_s3NCq_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c3W7T_info;
           R3 = Hp - 15;
           R2 = GHC.Read.$fReadMaybe_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3W7h_info" {
     block_c3W7h_info:
         const _c3W7h;
         const 2;
         const 12884901918;
         const S3NLQ_srt+1672;
 },
 _c3W7T() //  [R1]
         { []
         }
     {offset
       c3W7T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3W7Z; else goto c3W7Y;
       c3W7Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3W7Y: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3W7T_info" {
     block_c3W7T_info:
         const _c3W7T;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3W8f_srtd" {
     u3W8f_srtd:
         const S3NLQ_srt+936;
         const 95;
         const 1;
         const 1879048192;
 },
 sat_s3NCu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3W82: // global
           _s3NCd::P64 = R3;
           _s3NCc::P64 = R2;
           _s3NCu::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c3W83; else goto c3W84;
       c3W84: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3W86; else goto c3W85;
       c3W86: // global
           HpAlloc = 16;
           goto c3W83;
       c3W83: // global
           R3 = _s3NCd::P64;
           R2 = _s3NCc::P64;
           R1 = _s3NCu::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W85: // global
           _s3NC9::P64 = P64[_s3NCu::P64 + 6];
           I64[Hp - 8] = sat_s3NCf_info;
           P64[Hp] = _s3NCd::P64;
           I64[Sp - 32] = block_c3W7b_info;
           R3 = Hp - 7;
           R2 = GHC.Read.$fReadMaybe_lexeme1_closure+4;
           P64[Sp - 24] = _s3NC9::P64;
           P64[Sp - 16] = _s3NCc::P64;
           P64[Sp - 8] = _s3NCd::P64;
           Sp = Sp - 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCu_info" {
     sat_s3NCu_info:
         const sat_s3NCu_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const u3W8f_srtd;
 },
 section ""relreadonly" . u3W8g_srtd" {
     u3W8g_srtd:
         const S3NLQ_srt+936;
         const 94;
         const 1;
         const 805306368;
 },
 _c3W7b() //  [R1]
         { []
         }
     {offset
       c3W7b: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3W89; else goto c3W88;
       c3W89: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3W88: // global
           I64[Hp - 48] = sat_s3NCt_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp + 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3W7b_info" {
     block_c3W7b_info:
         const _c3W7b;
         const 3;
         const 18446744069414584350;
         const u3W8g_srtd;
 },
 section ""relreadonly" . u3W8h_srtd" {
     u3W8h_srtd:
         const S3NLQ_srt+936;
         const 96;
         const 1;
         const 4026533888;
 },
 GHC.Read.$fReadMaybe1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3W8a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3W8e; else goto c3W8d;
       c3W8e: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W8d: // global
           I64[Hp - 8] = sat_s3NCu_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe1_info" {
     GHC.Read.$fReadMaybe1_info:
         const GHC.Read.$fReadMaybe1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u3W8h_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.680525603 UTC

[section ""data" . GHC.Read.$fReadMaybe_$creadsPrec_closure" {
     GHC.Read.$fReadMaybe_$creadsPrec_closure:
         const GHC.Read.$fReadMaybe_$creadsPrec_info;
         const 0;
 },
 sat_s3NCx_entry() //  [R1]
         { []
         }
     {offset
       c3W97: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3W98; else goto c3W99;
       c3W98: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3W99: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NCx_info" {
     sat_s3NCx_info:
         const sat_s3NCx_entry;
         const 2;
         const 4294967314;
         const S3NLQ_srt+1696;
 },
 GHC.Read.$fReadMaybe_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3W9a: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3W9e; else goto c3W9d;
       c3W9e: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3W9d: // global
           I64[Hp - 24] = sat_s3NCx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe_$creadsPrec_info" {
     GHC.Read.$fReadMaybe_$creadsPrec_info:
         const GHC.Read.$fReadMaybe_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+1696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.687023349 UTC

[section ""data" . GHC.Read.$fReadMaybe_$creadListPrec_closure" {
     GHC.Read.$fReadMaybe_$creadListPrec_closure:
         const GHC.Read.$fReadMaybe_$creadListPrec_info;
         const 0;
 },
 sat_s3NCz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3W9w: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCz_info" {
     sat_s3NCz_info:
         const sat_s3NCz_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3NLQ_srt+1696;
 },
 GHC.Read.$fReadMaybe_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c3W9z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3W9D; else goto c3W9C;
       c3W9D: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3W9C: // global
           I64[Hp - 8] = sat_s3NCz_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe_$creadListPrec_info" {
     GHC.Read.$fReadMaybe_$creadListPrec_info:
         const GHC.Read.$fReadMaybe_$creadListPrec_entry;
         const 0;
         const 2814754062073870;
         const 4294967301;
         const S3NLQ_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.693147217 UTC

[section ""data" . GHC.Read.$fReadMaybe_$creadList_closure" {
     GHC.Read.$fReadMaybe_$creadList_closure:
         const GHC.Read.$fReadMaybe_$creadList_info;
         const 0;
 },
 sat_s3NCB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3W9Y: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCB_info" {
     sat_s3NCB_info:
         const sat_s3NCB_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3NLQ_srt+1696;
 },
 sat_s3NCC_entry() //  [R1]
         { []
         }
     {offset
       c3Wa1: // global
           _s3NCC::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Wa2; else goto c3Wa3;
       c3Wa3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Wa5; else goto c3Wa4;
       c3Wa5: // global
           HpAlloc = 16;
           goto c3Wa2;
       c3Wa2: // global
           R1 = _s3NCC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wa4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NCC::P64;
           _s3NCA::P64 = P64[_s3NCC::P64 + 16];
           I64[Hp - 8] = sat_s3NCB_info;
           P64[Hp] = _s3NCA::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NCC_info" {
     sat_s3NCC_info:
         const sat_s3NCC_entry;
         const 1;
         const 562954248388624;
         const S3NLQ_srt+1560;
 },
 GHC.Read.$fReadMaybe_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3Wa6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Waa; else goto c3Wa9;
       c3Waa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Wa9: // global
           I64[Hp - 16] = sat_s3NCC_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe_$creadList_info" {
     GHC.Read.$fReadMaybe_$creadList_info:
         const GHC.Read.$fReadMaybe_$creadList_entry;
         const 0;
         const 5066553875759118;
         const 4294967301;
         const S3NLQ_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.701736896 UTC

[section ""data" . GHC.Read.$fReadMaybe_closure" {
     GHC.Read.$fReadMaybe_closure:
         const GHC.Read.$fReadMaybe_info;
         const 0;
 },
 sat_s3NCH_entry() //  [R1]
         { []
         }
     {offset
       c3Wau: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wav; else goto c3Waw;
       c3Wav: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Waw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadMaybe_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NCH_info" {
     sat_s3NCH_info:
         const sat_s3NCH_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+1712;
 },
 sat_s3NCG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3WaC: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCG_info" {
     sat_s3NCG_info:
         const sat_s3NCG_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3NLQ_srt+1696;
 },
 sat_s3NCF_entry() //  [R1]
         { []
         }
     {offset
       c3WaJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WaK; else goto c3WaL;
       c3WaK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WaL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadMaybe_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NCF_info" {
     sat_s3NCF_info:
         const sat_s3NCF_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+1720;
 },
 sat_s3NCE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WaR: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadMaybe_$creadsPrec_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCE_info" {
     sat_s3NCE_info:
         const sat_s3NCE_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+1704;
 },
 GHC.Read.$fReadMaybe_entry() //  [R2]
         { []
         }
     {offset
       c3WaV: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3WaZ; else goto c3WaY;
       c3WaZ: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WaY: // global
           I64[Hp - 112] = sat_s3NCH_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s3NCG_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s3NCF_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3NCE_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe_info" {
     GHC.Read.$fReadMaybe_info:
         const GHC.Read.$fReadMaybe_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S3NLQ_srt+1696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.711568924 UTC

[section ""cstring" . GHC.Read.$fReadOrdering4_bytes" {
     GHC.Read.$fReadOrdering4_bytes:
         I8[] [76,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.713928917 UTC

[section ""data" . GHC.Read.$fReadOrdering3_closure" {
     GHC.Read.$fReadOrdering3_closure:
         const GHC.Read.$fReadOrdering3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering3_entry() //  [R1]
         { []
         }
     {offset
       c3Wbu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wbv; else goto c3Wbw;
       c3Wbv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wbw: // global
           (_c3Wbr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Wbr::I64 == 0) goto c3Wbt; else goto c3Wbs;
       c3Wbt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Wbs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Wbr::I64;
           R2 = GHC.Read.$fReadOrdering4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering3_info" {
     GHC.Read.$fReadOrdering3_info:
         const GHC.Read.$fReadOrdering3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.71762101 UTC

[section ""cstring" . GHC.Read.$fReadOrdering6_bytes" {
     GHC.Read.$fReadOrdering6_bytes:
         I8[] [71,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.719776156 UTC

[section ""data" . GHC.Read.$fReadOrdering5_closure" {
     GHC.Read.$fReadOrdering5_closure:
         const GHC.Read.$fReadOrdering5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering5_entry() //  [R1]
         { []
         }
     {offset
       c3WbL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WbM; else goto c3WbN;
       c3WbM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WbN: // global
           (_c3WbI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WbI::I64 == 0) goto c3WbK; else goto c3WbJ;
       c3WbK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WbJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WbI::I64;
           R2 = GHC.Read.$fReadOrdering6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering5_info" {
     GHC.Read.$fReadOrdering5_info:
         const GHC.Read.$fReadOrdering5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.723943372 UTC

[section ""cstring" . GHC.Read.$fReadOrdering8_bytes" {
     GHC.Read.$fReadOrdering8_bytes:
         I8[] [69,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.727002825 UTC

[section ""data" . GHC.Read.$fReadOrdering7_closure" {
     GHC.Read.$fReadOrdering7_closure:
         const GHC.Read.$fReadOrdering7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering7_entry() //  [R1]
         { []
         }
     {offset
       c3Wc2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wc3; else goto c3Wc4;
       c3Wc3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wc4: // global
           (_c3WbZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WbZ::I64 == 0) goto c3Wc1; else goto c3Wc0;
       c3Wc1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Wc0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WbZ::I64;
           R2 = GHC.Read.$fReadOrdering8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering7_info" {
     GHC.Read.$fReadOrdering7_info:
         const GHC.Read.$fReadOrdering7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.739096332 UTC

[section ""data" . GHC.Read.$w$creadPrec2_closure" {
     GHC.Read.$w$creadPrec2_closure:
         const GHC.Read.$w$creadPrec2_info;
         const 0;
 },
 lvl2_s3NCK_entry() //  [R1]
         { []
         }
     {offset
       c3Wco: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wcp; else goto c3Wcq;
       c3Wcp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wcq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.EQ_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3NCK_info" {
     lvl2_s3NCK_info:
         const lvl2_s3NCK_entry;
         const 1;
         const 16;
 },
 lvl3_s3NCL_entry() //  [R1]
         { []
         }
     {offset
       c3Wcv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wcw; else goto c3Wcx;
       c3Wcw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wcx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.GT_closure+3;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_s3NCL_info" {
     lvl3_s3NCL_info:
         const lvl3_s3NCL_entry;
         const 1;
         const 16;
 },
 lvl4_s3NCM_entry() //  [R1]
         { []
         }
     {offset
       c3WcC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WcD; else goto c3WcE;
       c3WcD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WcE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.LT_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3NCM_info" {
     lvl4_s3NCM_info:
         const lvl4_s3NCM_entry;
         const 1;
         const 16;
 },
 w2_s3NCN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WcR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3WcS; else goto c3WcT;
       c3WcS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WcT: // global
           I64[Sp - 32] = block_c3WcK_info;
           _s3NCK::P64 = P64[R1 + 7];
           _s3NCL::P64 = P64[R1 + 15];
           _s3NCM::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3NCK::P64;
           P64[Sp - 16] = _s3NCL::P64;
           P64[Sp - 8] = _s3NCM::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3WdD; else goto c3WcL;
       u3WdD: // global
           call _c3WcK(R1) args: 0, res: 0, upd: 0;
       c3WcL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3NCN_info" {
     w2_s3NCN_info:
         const w2_s3NCN_entry;
         const 3;
         const 30064771080;
         const 4294967301;
         const S3NLQ_srt+1736;
 },
 _c3WcK() //  [R1]
         { []
         }
     {offset
       c3WcK: // global
           if (R1 & 7 == 4) goto c3WcP; else goto u3WdA;
       c3WcP: // global
           I64[Sp - 8] = block_c3WcZ_info;
           R3 = GHC.Read.$fReadOrdering7_closure;
           _s3NCQ::P64 = P64[R1 + 4];
           R2 = _s3NCQ::P64;
           P64[Sp] = _s3NCQ::P64;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3WdA: // global
           Sp = Sp + 32;
           call _c3Wdk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3WcK_info" {
     block_c3WcK_info:
         const _c3WcK;
         const 3;
         const 30064771102;
         const S3NLQ_srt+1736;
 },
 _c3WcZ() //  [R1]
         { []
         }
     {offset
       c3WcZ: // global
           if (R1 & 7 == 1) goto c3Wd7; else goto c3Wdw;
       c3Wd7: // global
           I64[Sp] = block_c3Wd4_info;
           R3 = GHC.Read.$fReadOrdering5_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3Wdw: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WcZ_info" {
     block_c3WcZ_info:
         const _c3WcZ;
         const 4;
         const 12884901918;
         const S3NLQ_srt+1736;
 },
 _c3Wd4() //  [R1]
         { []
         }
     {offset
       c3Wd4: // global
           if (R1 & 7 == 1) goto c3Wde; else goto c3Wds;
       c3Wde: // global
           I64[Sp + 24] = block_c3Wdb_info;
           R3 = GHC.Read.$fReadOrdering3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3Wds: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wd4_info" {
     block_c3Wd4_info:
         const _c3Wd4;
         const 132;
         const 4294967326;
         const S3NLQ_srt+1736;
 },
 _c3Wdb() //  [R1]
         { []
         }
     {offset
       c3Wdb: // global
           if (R1 & 7 == 1) goto u3WdB; else goto c3Wdo;
       u3WdB: // global
           Sp = Sp + 16;
           call _c3Wdk() args: 0, res: 0, upd: 0;
       c3Wdo: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wdb_info" {
     block_c3Wdb_info:
         const _c3Wdb;
         const 1;
         const 30;
 },
 _c3Wdk() //  []
         { []
         }
     {offset
       c3Wdk: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3NCU_entry() //  [R1]
         { []
         }
     {offset
       c3WdJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WdK; else goto c3WdL;
       c3WdK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WdL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3NCN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3NCU_info" {
     lvl117_s3NCU_info:
         const lvl117_s3NCU_entry;
         const 1;
         const 30064771088;
         const S3NLQ_srt+1736;
 },
 sat_s3ND1_entry() //  [R1]
         { []
         }
     {offset
       c3WdQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WdR; else goto c3WdS;
       c3WdR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WdS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3ND1_info" {
     sat_s3ND1_info:
         const sat_s3ND1_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+1760;
 },
 sat_s3NCZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3We5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3We6; else goto c3We7;
       c3We6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3We7: // global
           I64[Sp - 16] = block_c3WdY_info;
           _s3NCU::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3NCU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Wee; else goto c3WdZ;
       u3Wee: // global
           call _c3WdY(R1) args: 0, res: 0, upd: 0;
       c3WdZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NCZ_info" {
     sat_s3NCZ_info:
         const sat_s3NCZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3WdY() //  [R1]
         { []
         }
     {offset
       c3WdY: // global
           if (R1 & 7 == 1) goto c3We2; else goto c3We3;
       c3We2: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3We3: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WdY_info" {
     block_c3WdY_info:
         const _c3WdY;
         const 1;
         const 30;
 },
 section ""relreadonly" . u3WeG_srtd" {
     u3WeG_srtd:
         const S3NLQ_srt+936;
         const 104;
         const 1;
         const 1030792151040;
 },
 lvl116_s3NCJ_entry() //  [R1]
         { []
         }
     {offset
       c3Weg: // global
           _s3NCJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Weh; else goto c3Wei;
       c3Wei: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c3Wek; else goto c3Wej;
       c3Wek: // global
           HpAlloc = 184;
           goto c3Weh;
       c3Weh: // global
           R1 = _s3NCJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wej: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NCJ::P64;
           _s3NCI::P64 = P64[_s3NCJ::P64 + 16];
           I64[Hp - 176] = lvl2_s3NCK_info;
           P64[Hp - 160] = _s3NCI::P64;
           I64[Hp - 152] = lvl3_s3NCL_info;
           P64[Hp - 136] = _s3NCI::P64;
           I64[Hp - 128] = lvl4_s3NCM_info;
           P64[Hp - 112] = _s3NCI::P64;
           I64[Hp - 104] = w2_s3NCN_info;
           P64[Hp - 96] = Hp - 176;
           P64[Hp - 88] = Hp - 152;
           P64[Hp - 80] = Hp - 128;
           I64[Hp - 72] = lvl117_s3NCU_info;
           _c3WcF::P64 = Hp - 103;
           P64[Hp - 56] = _c3WcF::P64;
           I64[Hp - 48] = sat_s3ND1_info;
           P64[Hp - 32] = _c3WcF::P64;
           I64[Hp - 24] = sat_s3NCZ_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3NCJ_info" {
     lvl116_s3NCJ_info:
         const lvl116_s3NCJ_entry;
         const 1;
         const 18446744069414584336;
         const u3WeG_srtd;
 },
 k_s3ND2_entry() //  [R1]
         { []
         }
     {offset
       c3Weq: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3ND2_info" {
     k_s3ND2_info:
         const k_s3ND2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3ND5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Wey: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3ND5_info" {
     sat_s3ND5_info:
         const sat_s3ND5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 section ""relreadonly" . u3WeH_srtd" {
     u3WeH_srtd:
         const S3NLQ_srt+936;
         const 105;
         const 1;
         const 2130303778816;
 },
 GHC.Read.$w$creadPrec2_entry() //  [R2]
         { []
         }
     {offset
       c3WeB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3WeF; else goto c3WeE;
       c3WeF: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Read.$w$creadPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WeE: // global
           I64[Hp - 48] = lvl116_s3NCJ_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3ND2_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3ND5_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$w$creadPrec2_info" {
     GHC.Read.$w$creadPrec2_info:
         const GHC.Read.$w$creadPrec2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3WeH_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.770720907 UTC

[section ""data" . GHC.Read.$fReadOrdering2_closure" {
     GHC.Read.$fReadOrdering2_closure:
         const GHC.Read.$fReadOrdering2_info;
         const 0;
 },
 GHC.Read.$fReadOrdering2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Wgk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Wgl; else goto c3Wgm;
       c3Wgl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadOrdering2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Wgm: // global
           I64[Sp - 8] = block_c3Wgh_info;
           R2 = R3;
           Sp = Sp - 8;
           call GHC.Read.$w$creadPrec2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering2_info" {
     GHC.Read.$fReadOrdering2_info:
         const GHC.Read.$fReadOrdering2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+1768;
 },
 _c3Wgh() //  [R1]
         { []
         }
     {offset
       c3Wgh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Wgp; else goto c3Wgo;
       c3Wgp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Wgo: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wgh_info" {
     block_c3Wgh_info:
         const _c3Wgh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.776149585 UTC

[section ""data" . GHC.Read.$fReadOrdering1_closure" {
     GHC.Read.$fReadOrdering1_closure:
         const GHC.Read.$fReadOrdering1_info;
         const 0;
 },
 GHC.Read.$fReadOrdering1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WgD: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadOrdering2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering1_info" {
     GHC.Read.$fReadOrdering1_info:
         const GHC.Read.$fReadOrdering1_entry;
         const 0;
         const 4611686022722355214;
         const 8589934607;
         const S3NLQ_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.780415007 UTC

[section ""data" . GHC.Read.$fReadOrdering_$creadsPrec_closure" {
     GHC.Read.$fReadOrdering_$creadsPrec_closure:
         const GHC.Read.$fReadOrdering_$creadsPrec_info;
         const 0;
 },
 sat_s3NDb_entry() //  [R1]
         { []
         }
     {offset
       c3WgS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WgT; else goto c3WgU;
       c3WgT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WgU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadOrdering2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NDb_info" {
     sat_s3NDb_info:
         const sat_s3NDb_entry;
         const 1;
         const 4611686022722355216;
         const S3NLQ_srt+1536;
 },
 GHC.Read.$fReadOrdering_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3WgV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3WgZ; else goto c3WgY;
       c3WgZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadOrdering_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WgY: // global
           I64[Hp - 16] = sat_s3NDb_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering_$creadsPrec_info" {
     GHC.Read.$fReadOrdering_$creadsPrec_info:
         const GHC.Read.$fReadOrdering_$creadsPrec_entry;
         const 0;
         const 13835058059577131022;
         const 4294967301;
         const S3NLQ_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.786928938 UTC

[section ""data" . GHC.Read.$fReadOrdering_$creadListPrec_closure" {
     GHC.Read.$fReadOrdering_$creadListPrec_closure:
         const GHC.Read.$fReadOrdering_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3Whe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Whf; else goto c3Whg;
       c3Whf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Whg: // global
           (_c3Whb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Whb::I64 == 0) goto c3Whd; else goto c3Whc;
       c3Whd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Whc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Whb::I64;
           R2 = GHC.Read.$fReadOrdering1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering_$creadListPrec_info" {
     GHC.Read.$fReadOrdering_$creadListPrec_info:
         const GHC.Read.$fReadOrdering_$creadListPrec_entry;
         const 0;
         const 2305843013508661269;
         const S3NLQ_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.791457672 UTC

[section ""data" . GHC.Read.$fReadOrdering9_closure" {
     GHC.Read.$fReadOrdering9_closure:
         const GHC.Read.$fReadOrdering9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering9_entry() //  [R1]
         { []
         }
     {offset
       c3Whu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Whv; else goto c3Whw;
       c3Whv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Whw: // global
           (_c3Whr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Whr::I64 == 0) goto c3Wht; else goto c3Whs;
       c3Wht: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Whs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Whr::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadOrdering_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering9_info" {
     GHC.Read.$fReadOrdering9_info:
         const GHC.Read.$fReadOrdering9_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+1800;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.79566806 UTC

[section ""data" . GHC.Read.$fReadOrdering_$creadList_closure" {
     GHC.Read.$fReadOrdering_$creadList_closure:
         const GHC.Read.$fReadOrdering_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadOrdering_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WhI: // global
           R3 = R2;
           R2 = GHC.Read.$fReadOrdering9_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering_$creadList_info" {
     GHC.Read.$fReadOrdering_$creadList_info:
         const GHC.Read.$fReadOrdering_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+1808;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.79911108 UTC

[section ""data" . GHC.Read.$fReadOrdering_closure" {
     GHC.Read.$fReadOrdering_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadOrdering_$creadsPrec_closure+1;
         const GHC.Read.$fReadOrdering_$creadList_closure+1;
         const GHC.Read.$fReadOrdering1_closure+2;
         const GHC.Read.$fReadOrdering_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.800782102 UTC

[section ""cstring" . GHC.Read.$fReadBool4_bytes" {
     GHC.Read.$fReadBool4_bytes:
         I8[] [84,114,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.803474153 UTC

[section ""data" . GHC.Read.$fReadBool3_closure" {
     GHC.Read.$fReadBool3_closure:
         const GHC.Read.$fReadBool3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadBool3_entry() //  [R1]
         { []
         }
     {offset
       c3WhX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WhY; else goto c3WhZ;
       c3WhY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WhZ: // global
           (_c3WhU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WhU::I64 == 0) goto c3WhW; else goto c3WhV;
       c3WhW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WhV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WhU::I64;
           R2 = GHC.Read.$fReadBool4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool3_info" {
     GHC.Read.$fReadBool3_info:
         const GHC.Read.$fReadBool3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.807673706 UTC

[section ""cstring" . GHC.Read.$fReadBool6_bytes" {
     GHC.Read.$fReadBool6_bytes:
         I8[] [70,97,108,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.810365024 UTC

[section ""data" . GHC.Read.$fReadBool5_closure" {
     GHC.Read.$fReadBool5_closure:
         const GHC.Read.$fReadBool5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadBool5_entry() //  [R1]
         { []
         }
     {offset
       c3Wie: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wif; else goto c3Wig;
       c3Wif: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wig: // global
           (_c3Wib::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Wib::I64 == 0) goto c3Wid; else goto c3Wic;
       c3Wid: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Wic: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Wib::I64;
           R2 = GHC.Read.$fReadBool6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool5_info" {
     GHC.Read.$fReadBool5_info:
         const GHC.Read.$fReadBool5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.820531798 UTC

[section ""data" . GHC.Read.$w$creadPrec_closure" {
     GHC.Read.$w$creadPrec_closure:
         const GHC.Read.$w$creadPrec_info;
         const 0;
 },
 lvl2_s3NDe_entry() //  [R1]
         { []
         }
     {offset
       c3WiA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WiB; else goto c3WiC;
       c3WiB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WiC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.False_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3NDe_info" {
     lvl2_s3NDe_info:
         const lvl2_s3NDe_entry;
         const 1;
         const 16;
 },
 lvl3_s3NDf_entry() //  [R1]
         { []
         }
     {offset
       c3WiH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WiI; else goto c3WiJ;
       c3WiI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WiJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.True_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_s3NDf_info" {
     lvl3_s3NDf_info:
         const lvl3_s3NDf_entry;
         const 1;
         const 16;
 },
 sat_s3NDp_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Wj0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Wj1; else goto c3Wj2;
       c3Wj1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Wj2: // global
           I64[Sp - 24] = block_c3WiT_info;
           _s3NDe::P64 = P64[R1 + 7];
           _s3NDf::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3NDe::P64;
           P64[Sp - 8] = _s3NDf::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3WjA; else goto c3WiU;
       u3WjA: // global
           call _c3WiT(R1) args: 0, res: 0, upd: 0;
       c3WiU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NDp_info" {
     sat_s3NDp_info:
         const sat_s3NDp_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3NLQ_srt+1816;
 },
 _c3WiT() //  [R1]
         { []
         }
     {offset
       c3WiT: // global
           if (R1 & 7 == 4) goto c3WiY; else goto u3Wjx;
       c3WiY: // global
           I64[Sp - 8] = block_c3Wj8_info;
           R3 = GHC.Read.$fReadBool5_closure;
           _s3NDm::P64 = P64[R1 + 4];
           R2 = _s3NDm::P64;
           P64[Sp] = _s3NDm::P64;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3Wjx: // global
           Sp = Sp + 24;
           call _c3Wjm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3WiT_info" {
     block_c3WiT_info:
         const _c3WiT;
         const 2;
         const 12884901918;
         const S3NLQ_srt+1816;
 },
 _c3Wj8() //  [R1]
         { []
         }
     {offset
       c3Wj8: // global
           if (R1 & 7 == 1) goto c3Wjg; else goto c3Wju;
       c3Wjg: // global
           I64[Sp + 16] = block_c3Wjd_info;
           R3 = GHC.Read.$fReadBool3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c3Wju: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wj8_info" {
     block_c3Wj8_info:
         const _c3Wj8;
         const 3;
         const 4294967326;
         const S3NLQ_srt+1816;
 },
 _c3Wjd() //  [R1]
         { []
         }
     {offset
       c3Wjd: // global
           if (R1 & 7 == 1) goto u3Wjy; else goto c3Wjq;
       u3Wjy: // global
           Sp = Sp + 16;
           call _c3Wjm() args: 0, res: 0, upd: 0;
       c3Wjq: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wjd_info" {
     block_c3Wjd_info:
         const _c3Wjd;
         const 1;
         const 30;
 },
 _c3Wjm() //  []
         { []
         }
     {offset
       c3Wjm: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3NDq_entry() //  [R1]
         { []
         }
     {offset
       c3WjC: // global
           _s3NDq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WjD; else goto c3WjE;
       c3WjE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3WjG; else goto c3WjF;
       c3WjG: // global
           HpAlloc = 24;
           goto c3WjD;
       c3WjD: // global
           R1 = _s3NDq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WjF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NDq::P64;
           _s3NDe::P64 = P64[_s3NDq::P64 + 16];
           _s3NDf::P64 = P64[_s3NDq::P64 + 24];
           I64[Hp - 16] = sat_s3NDp_info;
           P64[Hp - 8] = _s3NDe::P64;
           P64[Hp] = _s3NDf::P64;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NDq_info" {
     sat_s3NDq_info:
         const sat_s3NDq_entry;
         const 2;
         const 1653562408978;
         const S3NLQ_srt+1760;
 },
 sat_s3NDi_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WjP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WjQ; else goto c3WjR;
       c3WjQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WjR: // global
           I64[Sp - 8] = block_c3WjM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WjV; else goto c3WjN;
       u3WjV: // global
           call _c3WjM() args: 0, res: 0, upd: 0;
       c3WjN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NDi_info" {
     sat_s3NDi_info:
         const sat_s3NDi_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _c3WjM() //  []
         { []
         }
     {offset
       c3WjM: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WjM_info" {
     block_c3WjM_info:
         const _c3WjM;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3Wkn_srtd" {
     u3Wkn_srtd:
         const S3NLQ_srt+936;
         const 112;
         const 1;
         const 211655988346880;
 },
 lvl116_s3NDd_entry() //  [R1]
         { []
         }
     {offset
       c3WjX: // global
           _s3NDd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WjY; else goto c3WjZ;
       c3WjZ: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3Wk1; else goto c3Wk0;
       c3Wk1: // global
           HpAlloc = 112;
           goto c3WjY;
       c3WjY: // global
           R1 = _s3NDd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wk0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NDd::P64;
           _s3NDc::P64 = P64[_s3NDd::P64 + 16];
           I64[Hp - 104] = lvl2_s3NDe_info;
           P64[Hp - 88] = _s3NDc::P64;
           I64[Hp - 80] = lvl3_s3NDf_info;
           P64[Hp - 64] = _s3NDc::P64;
           I64[Hp - 56] = sat_s3NDq_info;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3NDi_info;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3NDd_info" {
     lvl116_s3NDd_info:
         const lvl116_s3NDd_entry;
         const 1;
         const 18446744069414584336;
         const u3Wkn_srtd;
 },
 k_s3NDr_entry() //  [R1]
         { []
         }
     {offset
       c3Wk7: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3NDr_info" {
     k_s3NDr_info:
         const k_s3NDr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NDu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Wkf: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NDu_info" {
     sat_s3NDu_info:
         const sat_s3NDu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 section ""relreadonly" . u3Wko_srtd" {
     u3Wko_srtd:
         const S3NLQ_srt+936;
         const 113;
         const 1;
         const 493130965057536;
 },
 GHC.Read.$w$creadPrec_entry() //  [R2]
         { []
         }
     {offset
       c3Wki: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Wkm; else goto c3Wkl;
       c3Wkm: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Read.$w$creadPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Wkl: // global
           I64[Hp - 48] = lvl116_s3NDd_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3NDr_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3NDu_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$w$creadPrec_info" {
     GHC.Read.$w$creadPrec_info:
         const GHC.Read.$w$creadPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3Wko_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.852255916 UTC

[section ""data" . GHC.Read.$fReadBool2_closure" {
     GHC.Read.$fReadBool2_closure:
         const GHC.Read.$fReadBool2_info;
         const 0;
 },
 GHC.Read.$fReadBool2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WlG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WlH; else goto c3WlI;
       c3WlH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadBool2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WlI: // global
           I64[Sp - 8] = block_c3WlD_info;
           R2 = R3;
           Sp = Sp - 8;
           call GHC.Read.$w$creadPrec_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool2_info" {
     GHC.Read.$fReadBool2_info:
         const GHC.Read.$fReadBool2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+1832;
 },
 _c3WlD() //  [R1]
         { []
         }
     {offset
       c3WlD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WlL; else goto c3WlK;
       c3WlL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WlK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WlD_info" {
     block_c3WlD_info:
         const _c3WlD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.857798233 UTC

[section ""data" . GHC.Read.$fReadBool1_closure" {
     GHC.Read.$fReadBool1_closure:
         const GHC.Read.$fReadBool1_info;
         const 0;
 },
 section ""relreadonly" . u3Wm2_srtd" {
     u3Wm2_srtd:
         const S3NLQ_srt+1536;
         const 39;
         const 274877906945;
 },
 GHC.Read.$fReadBool1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WlZ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadBool2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool1_info" {
     GHC.Read.$fReadBool1_info:
         const GHC.Read.$fReadBool1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3Wm2_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.863267494 UTC

[section ""data" . GHC.Read.$fReadBool_$creadsPrec_closure" {
     GHC.Read.$fReadBool_$creadsPrec_closure:
         const GHC.Read.$fReadBool_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u3Wmo_srtd" {
     u3Wmo_srtd:
         const S3NLQ_srt+1536;
         const 39;
         const 274877906945;
 },
 sat_s3NDA_entry() //  [R1]
         { []
         }
     {offset
       c3Wmg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wmh; else goto c3Wmi;
       c3Wmh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wmi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadBool2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NDA_info" {
     sat_s3NDA_info:
         const sat_s3NDA_entry;
         const 1;
         const 18446744069414584336;
         const u3Wmo_srtd;
 },
 section ""relreadonly" . u3Wmp_srtd" {
     u3Wmp_srtd:
         const S3NLQ_srt+1536;
         const 40;
         const 824633720833;
 },
 GHC.Read.$fReadBool_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3Wmj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Wmn; else goto c3Wmm;
       c3Wmn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadBool_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Wmm: // global
           I64[Hp - 16] = sat_s3NDA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool_$creadsPrec_info" {
     GHC.Read.$fReadBool_$creadsPrec_info:
         const GHC.Read.$fReadBool_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3Wmp_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.870635148 UTC

[section ""data" . GHC.Read.$fReadBool_$creadListPrec_closure" {
     GHC.Read.$fReadBool_$creadListPrec_closure:
         const GHC.Read.$fReadBool_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadBool_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3WmG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WmH; else goto c3WmI;
       c3WmH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WmI: // global
           (_c3WmD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WmD::I64 == 0) goto c3WmF; else goto c3WmE;
       c3WmF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WmE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WmD::I64;
           R2 = GHC.Read.$fReadBool1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool_$creadListPrec_info" {
     GHC.Read.$fReadBool_$creadListPrec_info:
         const GHC.Read.$fReadBool_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S3NLQ_srt+1856;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.875223546 UTC

[section ""data" . GHC.Read.$fReadBool7_closure" {
     GHC.Read.$fReadBool7_closure:
         const GHC.Read.$fReadBool7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadBool7_entry() //  [R1]
         { []
         }
     {offset
       c3WmW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WmX; else goto c3WmY;
       c3WmX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WmY: // global
           (_c3WmT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WmT::I64 == 0) goto c3WmV; else goto c3WmU;
       c3WmV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WmU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WmT::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadBool_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool7_info" {
     GHC.Read.$fReadBool7_info:
         const GHC.Read.$fReadBool7_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+1872;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.87968742 UTC

[section ""data" . GHC.Read.$fReadBool_$creadList_closure" {
     GHC.Read.$fReadBool_$creadList_closure:
         const GHC.Read.$fReadBool_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadBool_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3Wna: // global
           R3 = R2;
           R2 = GHC.Read.$fReadBool7_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool_$creadList_info" {
     GHC.Read.$fReadBool_$creadList_info:
         const GHC.Read.$fReadBool_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+1880;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.884209679 UTC

[section ""data" . GHC.Read.$fReadBool_closure" {
     GHC.Read.$fReadBool_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadBool_$creadsPrec_closure+1;
         const GHC.Read.$fReadBool_$creadList_closure+1;
         const GHC.Read.$fReadBool1_closure+2;
         const GHC.Read.$fReadBool_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.891031532 UTC

[section ""data" . GHC.Read.$w$creadPrec1_closure" {
     GHC.Read.$w$creadPrec1_closure:
         const GHC.Read.$w$creadPrec1_info;
         const 0;
 },
 sat_s3NDG_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WnG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WnH; else goto c3WnI;
       c3WnH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WnI: // global
           I64[Sp - 16] = block_c3Wnz_info;
           _s3NDB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3NDB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3WnP; else goto c3WnA;
       u3WnP: // global
           call _c3Wnz(R1) args: 0, res: 0, upd: 0;
       c3WnA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NDG_info" {
     sat_s3NDG_info:
         const sat_s3NDG_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Wnz() //  [R1]
         { []
         }
     {offset
       c3Wnz: // global
           if (R1 & 7 == 1) goto c3WnE; else goto c3WnD;
       c3WnE: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3WnD: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wnz_info" {
     block_c3Wnz_info:
         const _c3Wnz;
         const 1;
         const 30;
 },
 sat_s3NDH_entry() //  [R1]
         { []
         }
     {offset
       c3WnQ: // global
           _s3NDH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WnR; else goto c3WnS;
       c3WnS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WnU; else goto c3WnT;
       c3WnU: // global
           HpAlloc = 16;
           goto c3WnR;
       c3WnR: // global
           R1 = _s3NDH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WnT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NDH::P64;
           _s3NDB::P64 = P64[_s3NDH::P64 + 16];
           I64[Hp - 8] = sat_s3NDG_info;
           P64[Hp] = _s3NDB::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NDH_info" {
     sat_s3NDH_info:
         const sat_s3NDH_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+1760;
 },
 section ""relreadonly" . u3Wol_srtd" {
     u3Wol_srtd:
         const S3NLQ_srt+936;
         const 104;
         const 1;
         const 549755813888;
 },
 lvl116_s3NDC_entry() //  [R1]
         { []
         }
     {offset
       c3WnV: // global
           _s3NDC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WnW; else goto c3WnX;
       c3WnX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3WnZ; else goto c3WnY;
       c3WnZ: // global
           HpAlloc = 24;
           goto c3WnW;
       c3WnW: // global
           R1 = _s3NDC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WnY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NDC::P64;
           _s3NDB::P64 = P64[_s3NDC::P64 + 16];
           I64[Hp - 16] = sat_s3NDH_info;
           P64[Hp] = _s3NDB::P64;
           R3 = Hp - 16;
           R2 = GHC.Read.$fReadChar3_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3NDC_info" {
     lvl116_s3NDC_info:
         const lvl116_s3NDC_entry;
         const 1;
         const 18446744069414584336;
         const u3Wol_srtd;
 },
 k_s3NDI_entry() //  [R1]
         { []
         }
     {offset
       c3Wo5: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3NDI_info" {
     k_s3NDI_info:
         const k_s3NDI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NDL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Wod: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NDL_info" {
     sat_s3NDL_info:
         const sat_s3NDL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 section ""relreadonly" . u3Wom_srtd" {
     u3Wom_srtd:
         const S3NLQ_srt+936;
         const 120;
         const 1;
         const 36029346774777856;
 },
 GHC.Read.$w$creadPrec1_entry() //  [R2]
         { []
         }
     {offset
       c3Wog: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Wok; else goto c3Woj;
       c3Wok: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Read.$w$creadPrec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Woj: // global
           I64[Hp - 48] = lvl116_s3NDC_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3NDI_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3NDL_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$w$creadPrec1_info" {
     GHC.Read.$w$creadPrec1_info:
         const GHC.Read.$w$creadPrec1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3Wom_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.912951857 UTC

[section ""data" . GHC.Read.$fReadChar7_closure" {
     GHC.Read.$fReadChar7_closure:
         const GHC.Read.$fReadChar7_info;
         const 0;
 },
 GHC.Read.$fReadChar7_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Wp4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Wp5; else goto c3Wp6;
       c3Wp5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadChar7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Wp6: // global
           I64[Sp - 8] = block_c3Wp1_info;
           R2 = R3;
           Sp = Sp - 8;
           call GHC.Read.$w$creadPrec1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar7_info" {
     GHC.Read.$fReadChar7_info:
         const GHC.Read.$fReadChar7_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+1888;
 },
 _c3Wp1() //  [R1]
         { []
         }
     {offset
       c3Wp1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Wp9; else goto c3Wp8;
       c3Wp9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Wp8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wp1_info" {
     block_c3Wp1_info:
         const _c3Wp1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.920435553 UTC

[section ""data" . GHC.Read.$fReadChar6_closure" {
     GHC.Read.$fReadChar6_closure:
         const GHC.Read.$fReadChar6_info;
         const 0;
 },
 section ""relreadonly" . u3Wpq_srtd" {
     u3Wpq_srtd:
         const S3NLQ_srt+1536;
         const 46;
         const 35184372088833;
 },
 GHC.Read.$fReadChar6_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Wpn: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadChar7_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar6_info" {
     GHC.Read.$fReadChar6_info:
         const GHC.Read.$fReadChar6_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3Wpq_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.927944825 UTC

[section ""data" . GHC.Read.$fReadInteger2_closure" {
     GHC.Read.$fReadInteger2_closure:
         const GHC.Read.$fReadInteger2_info;
         const 0;
 },
 sat_s3NDX_entry() //  [R1, R3]
         { []
         }
     {offset
       c3WpQ: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NDX_info" {
     sat_s3NDX_info:
         const sat_s3NDX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.$fReadInteger2_entry() //  [R2]
         { []
         }
     {offset
       c3WpX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WpY; else goto c3WpZ;
       c3WpY: // global
           R2 = R2;
           R1 = GHC.Read.$fReadInteger2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WpZ: // global
           I64[Sp - 8] = block_c3WpA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Wqg; else goto c3WpB;
       u3Wqg: // global
           call _c3WpA(R1) args: 0, res: 0, upd: 0;
       c3WpB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger2_info" {
     GHC.Read.$fReadInteger2_info:
         const GHC.Read.$fReadInteger2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3NLQ_srt+1904;
 },
 _c3WpA() //  [R1]
         { []
         }
     {offset
       c3WpA: // global
           if (R1 & 7 == 6) goto c3WpV; else goto u3Wqc;
       c3WpV: // global
           I64[Sp] = block_c3WpG_info;
           R2 = P64[R1 + 2];
           call Text.Read.Lex.numberToInteger_entry(R2) args: 8, res: 8, upd: 8;
       u3Wqc: // global
           Sp = Sp + 8;
           call _c3Wq6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3WpA_info" {
     block_c3WpA_info:
         const _c3WpA;
         const 0;
         const 4294967326;
         const S3NLQ_srt+1904;
 },
 _c3WpG() //  [R1]
         { []
         }
     {offset
       c3WpG: // global
           if (R1 & 7 == 1) goto u3Wqd; else goto c3Wq7;
       u3Wqd: // global
           Sp = Sp + 8;
           call _c3Wq6() args: 0, res: 0, upd: 0;
       c3Wq7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Wqa; else goto c3Wq9;
       c3Wqa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Wq9: // global
           _s3NDU::P64 = P64[R1 + 6];
           I64[Hp - 8] = sat_s3NDX_info;
           P64[Hp] = _s3NDU::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WpG_info" {
     block_c3WpG_info:
         const _c3WpG;
         const 0;
         const 30;
 },
 _c3Wq6() //  []
         { []
         }
     {offset
       c3Wq6: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.939435864 UTC

[section ""data" . GHC.Read.$fReadInteger1_closure" {
     GHC.Read.$fReadInteger1_closure:
         const GHC.Read.$fReadInteger1_info;
         const 0;
 },
 section ""relreadonly" . u3WqL_srtd" {
     u3WqL_srtd:
         const S3NLQ_srt+1000;
         const 115;
         const 1;
         const 1125899906842624;
 },
 GHC.Read.$fReadInteger1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WqI: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger1_info" {
     GHC.Read.$fReadInteger1_info:
         const GHC.Read.$fReadInteger1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3WqL_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.944778171 UTC

[section ""data" . GHC.Read.$fReadInteger_$creadsPrec_closure" {
     GHC.Read.$fReadInteger_$creadsPrec_closure:
         const GHC.Read.$fReadInteger_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u3Wr7_srtd" {
     u3Wr7_srtd:
         const S3NLQ_srt+1000;
         const 115;
         const 1;
         const 1125899906842624;
 },
 sat_s3NDZ_entry() //  [R1]
         { []
         }
     {offset
       c3WqZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wr0; else goto c3Wr1;
       c3Wr0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wr1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadInteger2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NDZ_info" {
     sat_s3NDZ_info:
         const sat_s3NDZ_entry;
         const 1;
         const 18446744069414584336;
         const u3Wr7_srtd;
 },
 section ""relreadonly" . u3Wr8_srtd" {
     u3Wr8_srtd:
         const S3NLQ_srt+1000;
         const 116;
         const 1;
         const 3377699720527872;
 },
 GHC.Read.$fReadInteger_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3Wr2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Wr6; else goto c3Wr5;
       c3Wr6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadInteger_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Wr5: // global
           I64[Hp - 16] = sat_s3NDZ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger_$creadsPrec_info" {
     GHC.Read.$fReadInteger_$creadsPrec_info:
         const GHC.Read.$fReadInteger_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3Wr8_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.952351149 UTC

[section ""data" . GHC.Read.$fReadInteger_$creadListPrec_closure" {
     GHC.Read.$fReadInteger_$creadListPrec_closure:
         const GHC.Read.$fReadInteger_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadInteger_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3Wrp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wrq; else goto c3Wrr;
       c3Wrq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wrr: // global
           (_c3Wrm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Wrm::I64 == 0) goto c3Wro; else goto c3Wrn;
       c3Wro: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Wrn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Wrm::I64;
           R2 = GHC.Read.$fReadInteger1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger_$creadListPrec_info" {
     GHC.Read.$fReadInteger_$creadListPrec_info:
         const GHC.Read.$fReadInteger_$creadListPrec_entry;
         const 0;
         const 1103806595093;
         const S3NLQ_srt+1864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.956960809 UTC

[section ""data" . GHC.Read.$fReadInteger3_closure" {
     GHC.Read.$fReadInteger3_closure:
         const GHC.Read.$fReadInteger3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadInteger3_entry() //  [R1]
         { []
         }
     {offset
       c3WrF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WrG; else goto c3WrH;
       c3WrG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WrH: // global
           (_c3WrC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WrC::I64 == 0) goto c3WrE; else goto c3WrD;
       c3WrE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WrD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WrC::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadInteger_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger3_info" {
     GHC.Read.$fReadInteger3_info:
         const GHC.Read.$fReadInteger3_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+1936;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.961354781 UTC

[section ""data" . GHC.Read.$fReadInteger_$creadList_closure" {
     GHC.Read.$fReadInteger_$creadList_closure:
         const GHC.Read.$fReadInteger_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadInteger_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WrT: // global
           R3 = R2;
           R2 = GHC.Read.$fReadInteger3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger_$creadList_info" {
     GHC.Read.$fReadInteger_$creadList_info:
         const GHC.Read.$fReadInteger_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+1944;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.964725292 UTC

[section ""data" . GHC.Read.$fReadInteger_closure" {
     GHC.Read.$fReadInteger_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInteger_$creadsPrec_closure+1;
         const GHC.Read.$fReadInteger_$creadList_closure+1;
         const GHC.Read.$fReadInteger1_closure+2;
         const GHC.Read.$fReadInteger_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.969063025 UTC

[section ""data" . GHC.Read.$fReadWord64_go_closure" {
     GHC.Read.$fReadWord64_go_closure:
         const GHC.Read.$fReadWord64_go_info;
 },
 sat_s3NE9_entry() //  [R1]
         { []
         }
     {offset
       c3Wsk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wsl; else goto c3Wsm;
       c3Wsl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wsm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord64_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NE9_info" {
     sat_s3NE9_info:
         const sat_s3NE9_entry;
         const 1;
         const 16;
 },
 sat_s3NE7_entry() //  [R1]
         { []
         }
     {offset
       c3Wsr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wss; else goto c3Wst;
       c3Wss: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wst: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$fNumWord64_$cfromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NE7_info" {
     sat_s3NE7_info:
         const sat_s3NE7_entry;
         const 1;
         const 16;
 },
 GHC.Read.$fReadWord64_go_entry() //  [R2]
         { []
         }
     {offset
       c3Wsy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wsz; else goto c3WsA;
       c3Wsz: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord64_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WsA: // global
           I64[Sp - 8] = block_c3Ws5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WsK; else goto c3Ws6;
       u3WsK: // global
           call _c3Ws5(R1) args: 0, res: 0, upd: 0;
       c3Ws6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord64_go_info" {
     GHC.Read.$fReadWord64_go_info:
         const GHC.Read.$fReadWord64_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3Ws5() //  [R1]
         { []
         }
     {offset
       c3Ws5: // global
           if (R1 & 7 == 1) goto c3Wsv; else goto c3Wsw;
       c3Wsv: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Wsw: // global
           I64[Sp - 8] = block_c3Wsb_info;
           _s3NE3::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NE3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WsJ; else goto c3Wsc;
       u3WsJ: // global
           call _c3Wsb(R1) args: 0, res: 0, upd: 0;
       c3Wsc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ws5_info" {
     block_c3Ws5_info:
         const _c3Ws5;
         const 0;
         const 30;
 },
 _c3Wsb() //  [R1]
         { []
         }
     {offset
       c3Wsb: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3WsI; else goto c3WsH;
       c3WsI: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WsH: // global
           _s3NE5::P64 = P64[R1 + 7];
           _s3NE6::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3NE9_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3NE7_info;
           P64[Hp - 48] = _s3NE5::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3NE6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wsb_info" {
     block_c3Wsb_info:
         const _c3Wsb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.981952183 UTC

[section ""data" . GHC.Read.$fReadWord64_$creadsPrec_closure" {
     GHC.Read.$fReadWord64_$creadsPrec_closure:
         const GHC.Read.$fReadWord64_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u3Wtv_srtd" {
     u3Wtv_srtd:
         const S3NLQ_srt+1000;
         const 120;
         const 1;
         const 37154696925806592;
 },
 GHC.Read.$fReadWord64_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Wtk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wto; else goto c3Wtp;
       c3Wto: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord64_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Wtp: // global
           I64[Sp - 16] = block_c3Wti_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3NEb::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           P64[Sp - 8] = _s3NEb::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord64_$creadsPrec_info" {
     GHC.Read.$fReadWord64_$creadsPrec_info:
         const GHC.Read.$fReadWord64_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3Wtv_srtd;
 },
 _c3Wti() //  [R1]
         { []
         }
     {offset
       c3Wti: // global
           _s3NEb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Wtn_info;
           R3 = _s3NEb::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wti_info" {
     block_c3Wti_info:
         const _c3Wti;
         const 1;
         const 30;
 },
 _c3Wtn() //  [R1]
         { []
         }
     {offset
       c3Wtn: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord64_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wtn_info" {
     block_c3Wtn_info:
         const _c3Wtn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.991144049 UTC

[section ""data" . GHC.Read.$fReadWord13_closure" {
     GHC.Read.$fReadWord13_closure:
         const GHC.Read.$fReadWord13_info;
         const 0;
 },
 sat_s3NEg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WtR: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord64_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NEg_info" {
     sat_s3NEg_info:
         const sat_s3NEg_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+1952;
 },
 GHC.Read.$fReadWord13_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WtX: // global
           _s3NEf::P64 = R3;
           _s3NEe::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3WtY; else goto c3WtZ;
       c3WtZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Wu1; else goto c3Wu0;
       c3Wu1: // global
           HpAlloc = 16;
           goto c3WtY;
       c3WtY: // global
           R3 = _s3NEf::P64;
           R2 = _s3NEe::P64;
           R1 = GHC.Read.$fReadWord13_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Wu0: // global
           I64[Hp - 8] = sat_s3NEg_info;
           P64[Hp] = _s3NEe::P64;
           I64[Sp - 8] = block_c3WtU_info;
           R3 = _s3NEf::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord13_info" {
     GHC.Read.$fReadWord13_info:
         const GHC.Read.$fReadWord13_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+1952;
 },
 _c3WtU() //  [R1]
         { []
         }
     {offset
       c3WtU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Wu4; else goto c3Wu3;
       c3Wu4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Wu3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WtU_info" {
     block_c3WtU_info:
         const _c3WtU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:32.999101444 UTC

[section ""data" . GHC.Read.$fReadWord12_closure" {
     GHC.Read.$fReadWord12_closure:
         const GHC.Read.$fReadWord12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord12_entry() //  [R1]
         { []
         }
     {offset
       c3Wun: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Wuo; else goto c3Wup;
       c3Wuo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wup: // global
           (_c3Wuk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Wuk::I64 == 0) goto c3Wum; else goto c3Wul;
       c3Wum: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Wul: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Wuk::I64;
           R2 = GHC.Read.$fReadWord13_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord12_info" {
     GHC.Read.$fReadWord12_info:
         const GHC.Read.$fReadWord12_entry;
         const 0;
         const 17596481011733;
         const S3NLQ_srt+1864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.004277052 UTC

[section ""data" . GHC.Read.$fReadWord64_$creadList_closure" {
     GHC.Read.$fReadWord64_$creadList_closure:
         const GHC.Read.$fReadWord64_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord64_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WuB: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord12_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord64_$creadList_info" {
     GHC.Read.$fReadWord64_$creadList_info:
         const GHC.Read.$fReadWord64_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+1968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.008612902 UTC

[section ""data" . GHC.Read.$fReadWord11_closure" {
     GHC.Read.$fReadWord11_closure:
         const GHC.Read.$fReadWord11_info;
         const 0;
 },
 GHC.Read.$fReadWord11_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WuP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WuQ; else goto c3WuR;
       c3WuQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord11_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WuR: // global
           I64[Sp - 8] = block_c3WuM_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord64_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord11_info" {
     GHC.Read.$fReadWord11_info:
         const GHC.Read.$fReadWord11_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+1976;
 },
 _c3WuM() //  [R1]
         { []
         }
     {offset
       c3WuM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WuU; else goto c3WuT;
       c3WuU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WuT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WuM_info" {
     block_c3WuM_info:
         const _c3WuM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.014491152 UTC

[section ""data" . GHC.Read.$fReadWord64_closure" {
     GHC.Read.$fReadWord64_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord64_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord64_$creadList_closure+1;
         const GHC.Read.$fReadWord13_closure+2;
         const GHC.Read.$fReadWord11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.018906314 UTC

[section ""data" . GHC.Read.$fReadWord_go_closure" {
     GHC.Read.$fReadWord_go_closure:
         const GHC.Read.$fReadWord_go_info;
 },
 sat_s3NEw_entry() //  [R1]
         { []
         }
     {offset
       c3Wvo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wvp; else goto c3Wvq;
       c3Wvp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wvq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NEw_info" {
     sat_s3NEw_info:
         const sat_s3NEw_entry;
         const 1;
         const 16;
 },
 sat_s3NEu_entry() //  [R1]
         { []
         }
     {offset
       c3Wvv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wvw; else goto c3Wvx;
       c3Wvw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wvx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.$fNumWord_$cfromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NEu_info" {
     sat_s3NEu_info:
         const sat_s3NEu_entry;
         const 1;
         const 16;
 },
 GHC.Read.$fReadWord_go_entry() //  [R2]
         { []
         }
     {offset
       c3WvC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WvD; else goto c3WvE;
       c3WvD: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WvE: // global
           I64[Sp - 8] = block_c3Wv9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WvO; else goto c3Wva;
       u3WvO: // global
           call _c3Wv9(R1) args: 0, res: 0, upd: 0;
       c3Wva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord_go_info" {
     GHC.Read.$fReadWord_go_info:
         const GHC.Read.$fReadWord_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3Wv9() //  [R1]
         { []
         }
     {offset
       c3Wv9: // global
           if (R1 & 7 == 1) goto c3Wvz; else goto c3WvA;
       c3Wvz: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3WvA: // global
           I64[Sp - 8] = block_c3Wvf_info;
           _s3NEq::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NEq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WvN; else goto c3Wvg;
       u3WvN: // global
           call _c3Wvf(R1) args: 0, res: 0, upd: 0;
       c3Wvg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wv9_info" {
     block_c3Wv9_info:
         const _c3Wv9;
         const 0;
         const 30;
 },
 _c3Wvf() //  [R1]
         { []
         }
     {offset
       c3Wvf: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3WvM; else goto c3WvL;
       c3WvM: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WvL: // global
           _s3NEs::P64 = P64[R1 + 7];
           _s3NEt::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3NEw_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3NEu_info;
           P64[Hp - 48] = _s3NEs::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3NEt::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wvf_info" {
     block_c3Wvf_info:
         const _c3Wvf;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.031938492 UTC

[section ""data" . GHC.Read.$fReadWord_$creadsPrec_closure" {
     GHC.Read.$fReadWord_$creadsPrec_closure:
         const GHC.Read.$fReadWord_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u3Wwz_srtd" {
     u3Wwz_srtd:
         const S3NLQ_srt+1000;
         const 125;
         const 1;
         const 1154047404513689600;
 },
 GHC.Read.$fReadWord_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Wwo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Wws; else goto c3Wwt;
       c3Wws: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Wwt: // global
           I64[Sp - 16] = block_c3Wwm_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3NEy::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           P64[Sp - 8] = _s3NEy::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord_$creadsPrec_info" {
     GHC.Read.$fReadWord_$creadsPrec_info:
         const GHC.Read.$fReadWord_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3Wwz_srtd;
 },
 _c3Wwm() //  [R1]
         { []
         }
     {offset
       c3Wwm: // global
           _s3NEy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Wwr_info;
           R3 = _s3NEy::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wwm_info" {
     block_c3Wwm_info:
         const _c3Wwm;
         const 1;
         const 30;
 },
 _c3Wwr() //  [R1]
         { []
         }
     {offset
       c3Wwr: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wwr_info" {
     block_c3Wwr_info:
         const _c3Wwr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.203671033 UTC

[section ""data" . GHC.Read.$fReadWord3_closure" {
     GHC.Read.$fReadWord3_closure:
         const GHC.Read.$fReadWord3_info;
         const 0;
 },
 sat_s3NED_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WwV: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord_$creadsPrec_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NED_info" {
     sat_s3NED_info:
         const sat_s3NED_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+1992;
 },
 GHC.Read.$fReadWord3_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Wx1: // global
           _s3NEC::P64 = R3;
           _s3NEB::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Wx2; else goto c3Wx3;
       c3Wx3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Wx5; else goto c3Wx4;
       c3Wx5: // global
           HpAlloc = 16;
           goto c3Wx2;
       c3Wx2: // global
           R3 = _s3NEC::P64;
           R2 = _s3NEB::P64;
           R1 = GHC.Read.$fReadWord3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Wx4: // global
           I64[Hp - 8] = sat_s3NED_info;
           P64[Hp] = _s3NEB::P64;
           I64[Sp - 8] = block_c3WwY_info;
           R3 = _s3NEC::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord3_info" {
     GHC.Read.$fReadWord3_info:
         const GHC.Read.$fReadWord3_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+1992;
 },
 _c3WwY() //  [R1]
         { []
         }
     {offset
       c3WwY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Wx8; else goto c3Wx7;
       c3Wx8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Wx7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WwY_info" {
     block_c3WwY_info:
         const _c3WwY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.213860626 UTC

[section ""data" . GHC.Read.$fReadWord2_closure" {
     GHC.Read.$fReadWord2_closure:
         const GHC.Read.$fReadWord2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord2_entry() //  [R1]
         { []
         }
     {offset
       c3Wxr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Wxs; else goto c3Wxt;
       c3Wxs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wxt: // global
           (_c3Wxo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Wxo::I64 == 0) goto c3Wxq; else goto c3Wxp;
       c3Wxq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Wxp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Wxo::I64;
           R2 = GHC.Read.$fReadWord3_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord2_info" {
     GHC.Read.$fReadWord2_info:
         const GHC.Read.$fReadWord2_entry;
         const 0;
         const 562954248388629;
         const S3NLQ_srt+1864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.219349745 UTC

[section ""data" . GHC.Read.$fReadWord_$creadList_closure" {
     GHC.Read.$fReadWord_$creadList_closure:
         const GHC.Read.$fReadWord_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WxF: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord_$creadList_info" {
     GHC.Read.$fReadWord_$creadList_info:
         const GHC.Read.$fReadWord_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.224783409 UTC

[section ""data" . GHC.Read.$fReadWord1_closure" {
     GHC.Read.$fReadWord1_closure:
         const GHC.Read.$fReadWord1_info;
         const 0;
 },
 GHC.Read.$fReadWord1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WxT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WxU; else goto c3WxV;
       c3WxU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WxV: // global
           I64[Sp - 8] = block_c3WxQ_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord1_info" {
     GHC.Read.$fReadWord1_info:
         const GHC.Read.$fReadWord1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+2016;
 },
 _c3WxQ() //  [R1]
         { []
         }
     {offset
       c3WxQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WxY; else goto c3WxX;
       c3WxY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WxX: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WxQ_info" {
     block_c3WxQ_info:
         const _c3WxQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.232023611 UTC

[section ""data" . GHC.Read.$fReadWord_closure" {
     GHC.Read.$fReadWord_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord_$creadList_closure+1;
         const GHC.Read.$fReadWord3_closure+2;
         const GHC.Read.$fReadWord1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.238144497 UTC

[section ""data" . GHC.Read.$fReadInt2_closure" {
     GHC.Read.$fReadInt2_closure:
         const GHC.Read.$fReadInt2_info;
         const 0;
 },
 x_s3NEP_entry() //  [R1]
         { []
         }
     {offset
       c3Wyu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Wyy; else goto c3Wyz;
       c3Wyy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Wyz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3Wys_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s3NEP_info" {
     x_s3NEP_info:
         const x_s3NEP_entry;
         const 1;
         const 16;
 },
 _c3Wys() //  [R1]
         { []
         }
     {offset
       c3Wys: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WyC; else goto c3WyB;
       c3WyC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c3WyB: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Wys_info" {
     block_c3Wys_info:
         const _c3Wys;
         const 0;
         const 30;
 },
 sat_s3NET_entry() //  [R1, R3]
         { []
         }
     {offset
       c3WyI: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NET_info" {
     sat_s3NET_info:
         const sat_s3NET_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.$fReadInt2_entry() //  [R2]
         { []
         }
     {offset
       c3WyP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WyQ; else goto c3WyR;
       c3WyQ: // global
           R2 = R2;
           R1 = GHC.Read.$fReadInt2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WyR: // global
           I64[Sp - 8] = block_c3Wyd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Wz8; else goto c3Wye;
       u3Wz8: // global
           call _c3Wyd(R1) args: 0, res: 0, upd: 0;
       c3Wye: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt2_info" {
     GHC.Read.$fReadInt2_info:
         const GHC.Read.$fReadInt2_entry;
         const 0;
         const 281479271677966;
         const 4294967301;
         const S3NLQ_srt+1904;
 },
 _c3Wyd() //  [R1]
         { []
         }
     {offset
       c3Wyd: // global
           if (R1 & 7 == 6) goto c3WyN; else goto u3Wz4;
       c3WyN: // global
           I64[Sp] = block_c3Wyj_info;
           R2 = P64[R1 + 2];
           call Text.Read.Lex.numberToInteger_entry(R2) args: 8, res: 8, upd: 8;
       u3Wz4: // global
           Sp = Sp + 8;
           call _c3WyY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Wyd_info" {
     block_c3Wyd_info:
         const _c3Wyd;
         const 0;
         const 4294967326;
         const S3NLQ_srt+1904;
 },
 _c3Wyj() //  [R1]
         { []
         }
     {offset
       c3Wyj: // global
           if (R1 & 7 == 1) goto u3Wz5; else goto c3WyZ;
       u3Wz5: // global
           Sp = Sp + 8;
           call _c3WyY() args: 0, res: 0, upd: 0;
       c3WyZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Wz2; else goto c3Wz1;
       c3Wz2: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Wz1: // global
           _s3NEO::P64 = P64[R1 + 6];
           I64[Hp - 32] = x_s3NEP_info;
           P64[Hp - 16] = _s3NEO::P64;
           I64[Hp - 8] = sat_s3NET_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Wyj_info" {
     block_c3Wyj_info:
         const _c3Wyj;
         const 0;
         const 30;
 },
 _c3WyY() //  []
         { []
         }
     {offset
       c3WyY: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.256286046 UTC

[section ""data" . GHC.Read.$fReadInt1_closure" {
     GHC.Read.$fReadInt1_closure:
         const GHC.Read.$fReadInt1_info;
         const 0;
 },
 section ""relreadonly" . u3WzM_srtd" {
     u3WzM_srtd:
         const S3NLQ_srt+1024;
         const 127;
         const 1;
         const 4611686018427387904;
 },
 GHC.Read.$fReadInt1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WzJ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInt2_closure+1;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt1_info" {
     GHC.Read.$fReadInt1_info:
         const GHC.Read.$fReadInt1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3WzM_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.261558034 UTC

[section ""data" . GHC.Read.$fReadDouble_x1_closure" {
     GHC.Read.$fReadDouble_x1_closure:
         const GHC.Read.$fReadDouble_x1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble_x1_entry() //  [R1]
         { []
         }
     {offset
       c3WA0: // global
           _r3MZX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WA3; else goto c3WA4;
       c3WA4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WA6; else goto c3WA5;
       c3WA6: // global
           HpAlloc = 16;
           goto c3WA3;
       c3WA3: // global
           R1 = _r3MZX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WA5: // global
           (_c3WzV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3MZX::P64);
           if (_c3WzV::I64 == 0) goto c3WzX; else goto c3WzW;
       c3WzX: // global
           call (I64[I64[_r3MZX::P64]])() args: 8, res: 0, upd: 8;
       c3WzW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WzV::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(0.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_x1_info" {
     GHC.Read.$fReadDouble_x1_info:
         const GHC.Read.$fReadDouble_x1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.266137016 UTC

[section ""data" . GHC.Read.$fReadDouble3_closure" {
     GHC.Read.$fReadDouble3_closure:
         const GHC.Read.$fReadDouble3_info;
         const 0;
 },
 GHC.Read.$fReadDouble3_entry() //  [R3]
         { []
         }
     {offset
       c3WAm: // global
           R2 = GHC.Read.$fReadDouble_x1_closure;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble3_info" {
     GHC.Read.$fReadDouble3_info:
         const GHC.Read.$fReadDouble3_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+2040;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.269384686 UTC

[section ""cstring" . GHC.Read.$fReadDouble5_bytes" {
     GHC.Read.$fReadDouble5_bytes:
         I8[] [78,97,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.271889602 UTC

[section ""data" . GHC.Read.$fReadDouble4_closure" {
     GHC.Read.$fReadDouble4_closure:
         const GHC.Read.$fReadDouble4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble4_entry() //  [R1]
         { []
         }
     {offset
       c3WAA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WAB; else goto c3WAC;
       c3WAB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WAC: // global
           (_c3WAx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WAx::I64 == 0) goto c3WAz; else goto c3WAy;
       c3WAz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WAy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WAx::I64;
           R2 = GHC.Read.$fReadDouble5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble4_info" {
     GHC.Read.$fReadDouble4_info:
         const GHC.Read.$fReadDouble4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.277113072 UTC

[section ""data" . GHC.Read.$fReadDouble_x_closure" {
     GHC.Read.$fReadDouble_x_closure:
         const GHC.Read.$fReadDouble_x_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble_x_entry() //  [R1]
         { []
         }
     {offset
       c3WAS: // global
           _r3MZV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WAV; else goto c3WAW;
       c3WAW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WAY; else goto c3WAX;
       c3WAY: // global
           HpAlloc = 16;
           goto c3WAV;
       c3WAV: // global
           R1 = _r3MZV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WAX: // global
           (_c3WAN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3MZV::P64);
           if (_c3WAN::I64 == 0) goto c3WAP; else goto c3WAO;
       c3WAP: // global
           call (I64[I64[_r3MZV::P64]])() args: 8, res: 0, upd: 8;
       c3WAO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WAN::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(1.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_x_info" {
     GHC.Read.$fReadDouble_x_info:
         const GHC.Read.$fReadDouble_x_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.281684017 UTC

[section ""data" . GHC.Read.$fReadDouble2_closure" {
     GHC.Read.$fReadDouble2_closure:
         const GHC.Read.$fReadDouble2_info;
         const 0;
 },
 GHC.Read.$fReadDouble2_entry() //  [R3]
         { []
         }
     {offset
       c3WBf: // global
           R2 = GHC.Read.$fReadDouble_x_closure;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble2_info" {
     GHC.Read.$fReadDouble2_info:
         const GHC.Read.$fReadDouble2_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+2048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.285075297 UTC

[section ""cstring" . GHC.Read.$fReadDouble7_bytes" {
     GHC.Read.$fReadDouble7_bytes:
         I8[] [73,110,102,105,110,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.287607735 UTC

[section ""data" . GHC.Read.$fReadDouble6_closure" {
     GHC.Read.$fReadDouble6_closure:
         const GHC.Read.$fReadDouble6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble6_entry() //  [R1]
         { []
         }
     {offset
       c3WBt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WBu; else goto c3WBv;
       c3WBu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WBv: // global
           (_c3WBq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WBq::I64 == 0) goto c3WBs; else goto c3WBr;
       c3WBs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WBr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WBq::I64;
           R2 = GHC.Read.$fReadDouble7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble6_info" {
     GHC.Read.$fReadDouble6_info:
         const GHC.Read.$fReadDouble6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.295254387 UTC

[section ""data" . GHC.Read.$fReadDouble_$sconvertFrac_closure" {
     GHC.Read.$fReadDouble_$sconvertFrac_closure:
         const GHC.Read.$fReadDouble_$sconvertFrac_info;
         const 0;
 },
 x_s3NF8_entry() //  [R1]
         { []
         }
     {offset
       c3WC0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3WC1; else goto c3WC2;
       c3WC1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WC2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3WBX_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3WC6; else goto c3WBY;
       u3WC6: // global
           call _c3WBX(R1) args: 0, res: 0, upd: 0;
       c3WBY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s3NF8_info" {
     x_s3NF8_info:
         const x_s3NF8_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2056;
 },
 _c3WBX() //  [R1]
         { []
         }
     {offset
       c3WBX: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Float.rationalToDouble_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3WBX_info" {
     block_c3WBX_info:
         const _c3WBX;
         const 0;
         const 4294967326;
         const S3NLQ_srt+2056;
 },
 sat_s3NFe_entry() //  [R1, R3]
         { []
         }
     {offset
       c3WCc: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NFe_info" {
     sat_s3NFe_info:
         const sat_s3NFe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.$fReadDouble_$sconvertFrac_entry() //  [R2]
         { []
         }
     {offset
       c3WCk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WCl; else goto c3WCm;
       c3WCl: // global
           R2 = R2;
           R1 = GHC.Read.$fReadDouble_$sconvertFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WCm: // global
           I64[Sp - 8] = block_c3WBH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WD6; else goto c3WBI;
       u3WD6: // global
           call _c3WBH(R1) args: 0, res: 0, upd: 0;
       c3WBI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$sconvertFrac_info" {
     GHC.Read.$fReadDouble_$sconvertFrac_info:
         const GHC.Read.$fReadDouble_$sconvertFrac_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const S3NLQ_srt+2056;
 },
 _c3WBH() //  [R1]
         { []
         }
     {offset
       c3WBH: // global
           _c3WCj::P64 = R1 & 7;
           if (_c3WCj::P64 == 4) goto c3WCh; else goto u3WCZ;
       c3WCh: // global
           I64[Sp - 8] = block_c3WCq_info;
           R3 = GHC.Read.$fReadDouble6_closure;
           _s3NF2::P64 = P64[R1 + 4];
           R2 = _s3NF2::P64;
           P64[Sp] = _s3NF2::P64;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3WCZ: // global
           if (_c3WCj::P64 == 6) goto c3WCi; else goto u3WD0;
       c3WCi: // global
           I64[Sp] = block_c3WBO_info;
           R4 = P64[R1 + 2];
           R3 = GHC.Float.$fRealFloatDouble2_closure;
           R2 = GHC.Float.$fRealFloatDouble3_closure;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
       u3WD0: // global
           Sp = Sp + 8;
           call _c3WCE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3WBH_info" {
     block_c3WBH_info:
         const _c3WBH;
         const 0;
         const 528280977438;
         const S3NLQ_srt+2056;
 },
 _c3WCq() //  [R1]
         { []
         }
     {offset
       c3WCq: // global
           if (R1 & 7 == 1) goto c3WCy; else goto u3WD2;
       c3WCy: // global
           _s3NF2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3WCv_info;
           R3 = GHC.Read.$fReadDouble4_closure;
           R2 = _s3NF2::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3WD2: // global
           Sp = Sp + 16;
           call _c3WCR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3WCq_info" {
     block_c3WCq_info:
         const _c3WCq;
         const 1;
         const 30064771102;
         const S3NLQ_srt+2080;
 },
 _c3WCv() //  [R1]
         { []
         }
     {offset
       c3WCv: // global
           if (R1 & 7 == 1) goto u3WD3; else goto c3WCI;
       u3WD3: // global
           Sp = Sp + 8;
           call _c3WCE() args: 0, res: 0, upd: 0;
       c3WCI: // global
           R1 = GHC.Read.$fReadDouble3_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WCv_info" {
     block_c3WCv_info:
         const _c3WCv;
         const 0;
         const 4294967326;
         const S3NLQ_srt+2088;
 },
 _c3WBO() //  [R1]
         { []
         }
     {offset
       c3WBO: // global
           if (R1 & 7 == 1) goto u3WD1; else goto c3WCS;
       u3WD1: // global
           Sp = Sp + 8;
           call _c3WCR() args: 0, res: 0, upd: 0;
       c3WCS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3WCV; else goto c3WCU;
       c3WCV: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WCU: // global
           _s3NF7::P64 = P64[R1 + 6];
           I64[Hp - 32] = x_s3NF8_info;
           P64[Hp - 16] = _s3NF7::P64;
           I64[Hp - 8] = sat_s3NFe_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WBO_info" {
     block_c3WBO_info:
         const _c3WBO;
         const 0;
         const 38654705694;
         const S3NLQ_srt+2056;
 },
 _c3WCR() //  []
         { []
         }
     {offset
       c3WCR: // global
           R1 = GHC.Read.$fReadDouble2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3WCE() //  []
         { []
         }
     {offset
       c3WCE: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.312291233 UTC

[section ""data" . GHC.Read.$fReadFloat_x1_closure" {
     GHC.Read.$fReadFloat_x1_closure:
         const GHC.Read.$fReadFloat_x1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadFloat_x1_entry() //  [R1]
         { []
         }
     {offset
       c3WE0: // global
           _r3N0c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WE3; else goto c3WE4;
       c3WE4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WE6; else goto c3WE5;
       c3WE6: // global
           HpAlloc = 16;
           goto c3WE3;
       c3WE3: // global
           R1 = _r3N0c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WE5: // global
           (_c3WDV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3N0c::P64);
           if (_c3WDV::I64 == 0) goto c3WDX; else goto c3WDW;
       c3WDX: // global
           call (I64[I64[_r3N0c::P64]])() args: 8, res: 0, upd: 8;
       c3WDW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WDV::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(0.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_x1_info" {
     GHC.Read.$fReadFloat_x1_info:
         const GHC.Read.$fReadFloat_x1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.31631284 UTC

[section ""data" . GHC.Read.$fReadFloat3_closure" {
     GHC.Read.$fReadFloat3_closure:
         const GHC.Read.$fReadFloat3_info;
         const 0;
 },
 GHC.Read.$fReadFloat3_entry() //  [R3]
         { []
         }
     {offset
       c3WEm: // global
           R2 = GHC.Read.$fReadFloat_x1_closure;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat3_info" {
     GHC.Read.$fReadFloat3_info:
         const GHC.Read.$fReadFloat3_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+2112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.320095576 UTC

[section ""data" . GHC.Read.$fReadFloat_x_closure" {
     GHC.Read.$fReadFloat_x_closure:
         const GHC.Read.$fReadFloat_x_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadFloat_x_entry() //  [R1]
         { []
         }
     {offset
       c3WEB: // global
           _r3N0a::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WEE; else goto c3WEF;
       c3WEF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WEH; else goto c3WEG;
       c3WEH: // global
           HpAlloc = 16;
           goto c3WEE;
       c3WEE: // global
           R1 = _r3N0a::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WEG: // global
           (_c3WEw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3N0a::P64);
           if (_c3WEw::I64 == 0) goto c3WEy; else goto c3WEx;
       c3WEy: // global
           call (I64[I64[_r3N0a::P64]])() args: 8, res: 0, upd: 8;
       c3WEx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WEw::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(1.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_x_info" {
     GHC.Read.$fReadFloat_x_info:
         const GHC.Read.$fReadFloat_x_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.324369339 UTC

[section ""data" . GHC.Read.$fReadFloat2_closure" {
     GHC.Read.$fReadFloat2_closure:
         const GHC.Read.$fReadFloat2_info;
         const 0;
 },
 GHC.Read.$fReadFloat2_entry() //  [R3]
         { []
         }
     {offset
       c3WEY: // global
           R2 = GHC.Read.$fReadFloat_x_closure;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat2_info" {
     GHC.Read.$fReadFloat2_info:
         const GHC.Read.$fReadFloat2_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3NLQ_srt+2120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.331409738 UTC

[section ""data" . GHC.Read.$fReadFloat_$sconvertFrac_closure" {
     GHC.Read.$fReadFloat_$sconvertFrac_closure:
         const GHC.Read.$fReadFloat_$sconvertFrac_info;
         const 0;
 },
 x_s3NFt_entry() //  [R1]
         { []
         }
     {offset
       c3WFs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3WFt; else goto c3WFu;
       c3WFt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WFu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3WFp_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3WFy; else goto c3WFq;
       u3WFy: // global
           call _c3WFp(R1) args: 0, res: 0, upd: 0;
       c3WFq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s3NFt_info" {
     x_s3NFt_info:
         const x_s3NFt_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2128;
 },
 _c3WFp() //  [R1]
         { []
         }
     {offset
       c3WFp: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Float.rationalToFloat_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3WFp_info" {
     block_c3WFp_info:
         const _c3WFp;
         const 0;
         const 4294967326;
         const S3NLQ_srt+2128;
 },
 sat_s3NFz_entry() //  [R1, R3]
         { []
         }
     {offset
       c3WFE: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NFz_info" {
     sat_s3NFz_info:
         const sat_s3NFz_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.$fReadFloat_$sconvertFrac_entry() //  [R2]
         { []
         }
     {offset
       c3WFM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WFN; else goto c3WFO;
       c3WFN: // global
           R2 = R2;
           R1 = GHC.Read.$fReadFloat_$sconvertFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WFO: // global
           I64[Sp - 8] = block_c3WF9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WGy; else goto c3WFa;
       u3WGy: // global
           call _c3WF9(R1) args: 0, res: 0, upd: 0;
       c3WFa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$sconvertFrac_info" {
     GHC.Read.$fReadFloat_$sconvertFrac_info:
         const GHC.Read.$fReadFloat_$sconvertFrac_entry;
         const 0;
         const 16703127814158;
         const 4294967301;
         const S3NLQ_srt+2064;
 },
 _c3WF9() //  [R1]
         { []
         }
     {offset
       c3WF9: // global
           _c3WFL::P64 = R1 & 7;
           if (_c3WFL::P64 == 4) goto c3WFJ; else goto u3WGr;
       c3WFJ: // global
           I64[Sp - 8] = block_c3WFS_info;
           R3 = GHC.Read.$fReadDouble6_closure;
           _s3NFn::P64 = P64[R1 + 4];
           R2 = _s3NFn::P64;
           P64[Sp] = _s3NFn::P64;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3WGr: // global
           if (_c3WFL::P64 == 6) goto c3WFK; else goto u3WGs;
       c3WFK: // global
           I64[Sp] = block_c3WFg_info;
           R4 = P64[R1 + 2];
           R3 = GHC.Float.$fRealFloatFloat2_closure;
           R2 = GHC.Float.$fRealFloatFloat3_closure;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
       u3WGs: // global
           Sp = Sp + 8;
           call _c3WG6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3WF9_info" {
     block_c3WF9_info:
         const _c3WF9;
         const 0;
         const 14504104558622;
         const S3NLQ_srt+2064;
 },
 _c3WFS() //  [R1]
         { []
         }
     {offset
       c3WFS: // global
           if (R1 & 7 == 1) goto c3WG0; else goto u3WGu;
       c3WG0: // global
           _s3NFn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3WFX_info;
           R3 = GHC.Read.$fReadDouble4_closure;
           R2 = _s3NFn::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3WGu: // global
           Sp = Sp + 16;
           call _c3WGj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3WFS_info" {
     block_c3WFS_info:
         const _c3WFS;
         const 1;
         const 828928688158;
         const S3NLQ_srt+2096;
 },
 _c3WFX() //  [R1]
         { []
         }
     {offset
       c3WFX: // global
           if (R1 & 7 == 1) goto u3WGv; else goto c3WGa;
       u3WGv: // global
           Sp = Sp + 8;
           call _c3WG6() args: 0, res: 0, upd: 0;
       c3WGa: // global
           R1 = GHC.Read.$fReadFloat3_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WFX_info" {
     block_c3WFX_info:
         const _c3WFX;
         const 0;
         const 4294967326;
         const S3NLQ_srt+2152;
 },
 _c3WFg() //  [R1]
         { []
         }
     {offset
       c3WFg: // global
           if (R1 & 7 == 1) goto u3WGt; else goto c3WGk;
       u3WGt: // global
           Sp = Sp + 8;
           call _c3WGj() args: 0, res: 0, upd: 0;
       c3WGk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3WGn; else goto c3WGm;
       c3WGn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WGm: // global
           _s3NFs::P64 = P64[R1 + 6];
           I64[Hp - 32] = x_s3NFt_info;
           P64[Hp - 16] = _s3NFs::P64;
           I64[Hp - 8] = sat_s3NFz_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WFg_info" {
     block_c3WFg_info:
         const _c3WFg;
         const 0;
         const 21474836510;
         const S3NLQ_srt+2128;
 },
 _c3WGj() //  []
         { []
         }
     {offset
       c3WGj: // global
           R1 = GHC.Read.$fReadFloat2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3WG6() //  []
         { []
         }
     {offset
       c3WG6: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.347947376 UTC

[section ""data" . GHC.Read.$fReadDouble1_closure" {
     GHC.Read.$fReadDouble1_closure:
         const GHC.Read.$fReadDouble1_info;
         const 0;
 },
 section ""relreadonly" . u3WHr_srtd" {
     u3WHr_srtd:
         const S3NLQ_srt+1008;
         const 134;
         const 1;
         const 0;
         const 32;
 },
 GHC.Read.$fReadDouble1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WHo: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadDouble_$sconvertFrac_closure+1;
           call GHC.Read.$fReadDouble_$sreadNumber_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble1_info" {
     GHC.Read.$fReadDouble1_info:
         const GHC.Read.$fReadDouble1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3WHr_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.352569482 UTC

[section ""data" . GHC.Read.$fReadDouble_$creadsPrec_closure" {
     GHC.Read.$fReadDouble_$creadsPrec_closure:
         const GHC.Read.$fReadDouble_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u3WHN_srtd" {
     u3WHN_srtd:
         const S3NLQ_srt+1008;
         const 134;
         const 1;
         const 0;
         const 32;
 },
 sat_s3NFB_entry() //  [R1]
         { []
         }
     {offset
       c3WHF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WHG; else goto c3WHH;
       c3WHG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WHH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadDouble_$sconvertFrac_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadDouble_$sreadNumber_entry(R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NFB_info" {
     sat_s3NFB_info:
         const sat_s3NFB_entry;
         const 1;
         const 18446744069414584336;
         const u3WHN_srtd;
 },
 section ""relreadonly" . u3WHO_srtd" {
     u3WHO_srtd:
         const S3NLQ_srt+1008;
         const 145;
         const 1;
         const 0;
         const 65568;
 },
 GHC.Read.$fReadDouble_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3WHI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3WHM; else goto c3WHL;
       c3WHM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadDouble_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WHL: // global
           I64[Hp - 16] = sat_s3NFB_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$creadsPrec_info" {
     GHC.Read.$fReadDouble_$creadsPrec_info:
         const GHC.Read.$fReadDouble_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3WHO_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.359570867 UTC

[section ""data" . GHC.Read.$fReadDouble_$creadListPrec_closure" {
     GHC.Read.$fReadDouble_$creadListPrec_closure:
         const GHC.Read.$fReadDouble_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3WI5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WI6; else goto c3WI7;
       c3WI6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WI7: // global
           (_c3WI2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WI2::I64 == 0) goto c3WI4; else goto c3WI3;
       c3WI4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WI3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WI2::I64;
           R2 = GHC.Read.$fReadDouble1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$creadListPrec_info" {
     GHC.Read.$fReadDouble_$creadListPrec_info:
         const GHC.Read.$fReadDouble_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S3NLQ_srt+2168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.363739652 UTC

[section ""data" . GHC.Read.$fReadDouble8_closure" {
     GHC.Read.$fReadDouble8_closure:
         const GHC.Read.$fReadDouble8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble8_entry() //  [R1]
         { []
         }
     {offset
       c3WIl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WIm; else goto c3WIn;
       c3WIm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WIn: // global
           (_c3WIi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WIi::I64 == 0) goto c3WIk; else goto c3WIj;
       c3WIk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WIj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WIi::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadDouble_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble8_info" {
     GHC.Read.$fReadDouble8_info:
         const GHC.Read.$fReadDouble8_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+2184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.368274234 UTC

[section ""data" . GHC.Read.$fReadDouble_$creadList_closure" {
     GHC.Read.$fReadDouble_$creadList_closure:
         const GHC.Read.$fReadDouble_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadDouble_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WIz: // global
           R3 = R2;
           R2 = GHC.Read.$fReadDouble8_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$creadList_info" {
     GHC.Read.$fReadDouble_$creadList_info:
         const GHC.Read.$fReadDouble_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.371485415 UTC

[section ""data" . GHC.Read.$fReadDouble_closure" {
     GHC.Read.$fReadDouble_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadDouble_$creadsPrec_closure+1;
         const GHC.Read.$fReadDouble_$creadList_closure+1;
         const GHC.Read.$fReadDouble1_closure+2;
         const GHC.Read.$fReadDouble_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.373660573 UTC

[section ""data" . GHC.Read.$fReadFloat1_closure" {
     GHC.Read.$fReadFloat1_closure:
         const GHC.Read.$fReadFloat1_info;
         const 0;
 },
 section ""relreadonly" . u3WIO_srtd" {
     u3WIO_srtd:
         const S3NLQ_srt+1016;
         const 141;
         const 1;
         const 0;
         const 4096;
 },
 GHC.Read.$fReadFloat1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WIL: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadFloat_$sconvertFrac_closure+1;
           call GHC.Read.$fReadFloat_$sreadNumber_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat1_info" {
     GHC.Read.$fReadFloat1_info:
         const GHC.Read.$fReadFloat1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3WIO_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.378475311 UTC

[section ""data" . GHC.Read.$fReadFloat_$creadsPrec_closure" {
     GHC.Read.$fReadFloat_$creadsPrec_closure:
         const GHC.Read.$fReadFloat_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u3WJa_srtd" {
     u3WJa_srtd:
         const S3NLQ_srt+1016;
         const 141;
         const 1;
         const 0;
         const 4096;
 },
 sat_s3NFD_entry() //  [R1]
         { []
         }
     {offset
       c3WJ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WJ3; else goto c3WJ4;
       c3WJ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WJ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadFloat_$sconvertFrac_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadFloat_$sreadNumber_entry(R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NFD_info" {
     sat_s3NFD_info:
         const sat_s3NFD_entry;
         const 1;
         const 18446744069414584336;
         const u3WJa_srtd;
 },
 section ""relreadonly" . u3WJb_srtd" {
     u3WJb_srtd:
         const S3NLQ_srt+1016;
         const 149;
         const 1;
         const 0;
         const 1052672;
 },
 GHC.Read.$fReadFloat_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3WJ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3WJ9; else goto c3WJ8;
       c3WJ9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadFloat_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WJ8: // global
           I64[Hp - 16] = sat_s3NFD_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$creadsPrec_info" {
     GHC.Read.$fReadFloat_$creadsPrec_info:
         const GHC.Read.$fReadFloat_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3WJb_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.386003369 UTC

[section ""data" . GHC.Read.$fReadFloat_$creadListPrec_closure" {
     GHC.Read.$fReadFloat_$creadListPrec_closure:
         const GHC.Read.$fReadFloat_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadFloat_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3WJs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WJt; else goto c3WJu;
       c3WJt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WJu: // global
           (_c3WJp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WJp::I64 == 0) goto c3WJr; else goto c3WJq;
       c3WJr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WJq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WJp::I64;
           R2 = GHC.Read.$fReadFloat1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$creadListPrec_info" {
     GHC.Read.$fReadFloat_$creadListPrec_info:
         const GHC.Read.$fReadFloat_$creadListPrec_entry;
         const 0;
         const 73014444053;
         const S3NLQ_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.39020066 UTC

[section ""data" . GHC.Read.$fReadFloat4_closure" {
     GHC.Read.$fReadFloat4_closure:
         const GHC.Read.$fReadFloat4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadFloat4_entry() //  [R1]
         { []
         }
     {offset
       c3WJI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WJJ; else goto c3WJK;
       c3WJJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WJK: // global
           (_c3WJF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WJF::I64 == 0) goto c3WJH; else goto c3WJG;
       c3WJH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WJG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WJF::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadFloat_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat4_info" {
     GHC.Read.$fReadFloat4_info:
         const GHC.Read.$fReadFloat4_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+2216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.39424961 UTC

[section ""data" . GHC.Read.$fReadFloat_$creadList_closure" {
     GHC.Read.$fReadFloat_$creadList_closure:
         const GHC.Read.$fReadFloat_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadFloat_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WJW: // global
           R3 = R2;
           R2 = GHC.Read.$fReadFloat4_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$creadList_info" {
     GHC.Read.$fReadFloat_$creadList_info:
         const GHC.Read.$fReadFloat_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.398421874 UTC

[section ""data" . GHC.Read.$fReadFloat_closure" {
     GHC.Read.$fReadFloat_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadFloat_$creadsPrec_closure+1;
         const GHC.Read.$fReadFloat_$creadList_closure+1;
         const GHC.Read.$fReadFloat1_closure+2;
         const GHC.Read.$fReadFloat_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.400657318 UTC

[section ""cstring" . GHC.Read.$trModule4_bytes" {
     GHC.Read.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.402329363 UTC

[section ""data" . GHC.Read.$trModule3_closure" {
     GHC.Read.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Read.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.404002279 UTC

[section ""cstring" . GHC.Read.$trModule2_bytes" {
     GHC.Read.$trModule2_bytes:
         I8[] [71,72,67,46,82,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.405739787 UTC

[section ""data" . GHC.Read.$trModule1_closure" {
     GHC.Read.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Read.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.407524023 UTC

[section ""data" . GHC.Read.$trModule_closure" {
     GHC.Read.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Read.$trModule3_closure+1;
         const GHC.Read.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.409379518 UTC

[section ""data" . $krep_r3N5l_closure" {
     $krep_r3N5l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.41111885 UTC

[section ""data" . $krep1_r3N5m_closure" {
     $krep1_r3N5m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.412783606 UTC

[section ""data" . $krep2_r3N5n_closure" {
     $krep2_r3N5n_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.414536579 UTC

[section ""data" . $krep3_r3N5o_closure" {
     $krep3_r3N5o_closure:
         const :_con_info;
         const $krep_r3N5l_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.416853264 UTC

[section ""data" . $krep4_r3N5p_closure" {
     $krep4_r3N5p_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_r3N5o_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.41918936 UTC

[section ""data" . GHC.Read.$tcRead1_closure" {
     GHC.Read.$tcRead1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep2_r3N5n_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.421579717 UTC

[section ""data" . $krep5_r3N5q_closure" {
     $krep5_r3N5q_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.423975155 UTC

[section ""data" . $krep6_r3N5r_closure" {
     $krep6_r3N5r_closure:
         const :_con_info;
         const $krep4_r3N5p_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.426868905 UTC

[section ""data" . $krep7_r3N5s_closure" {
     $krep7_r3N5s_closure:
         const :_con_info;
         const $krep5_r3N5q_closure+2;
         const $krep6_r3N5r_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.429834944 UTC

[section ""data" . $krep8_r3N5t_closure" {
     $krep8_r3N5t_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep7_r3N5s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.432086475 UTC

[section ""data" . $krep9_r3N5u_closure" {
     $krep9_r3N5u_closure:
         const :_con_info;
         const $krep8_r3N5t_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.433932038 UTC

[section ""data" . $krep10_r3N5v_closure" {
     $krep10_r3N5v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep9_r3N5u_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.435691309 UTC

[section ""data" . $krep11_r3N5w_closure" {
     $krep11_r3N5w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3N5p_closure+1;
         const $krep10_r3N5v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.437544112 UTC

[section ""data" . $krep12_r3N5x_closure" {
     $krep12_r3N5x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3N5m_closure+1;
         const $krep11_r3N5w_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.439285386 UTC

[section ""data" . $krep13_r3N5y_closure" {
     $krep13_r3N5y_closure:
         const :_con_info;
         const $krep5_r3N5q_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.440976142 UTC

[section ""data" . $krep14_r3N5z_closure" {
     $krep14_r3N5z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep13_r3N5y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.442717888 UTC

[section ""data" . $krep15_r3N5A_closure" {
     $krep15_r3N5A_closure:
         const :_con_info;
         const $krep14_r3N5z_closure+1;
         const $krep6_r3N5r_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.444387488 UTC

[section ""data" . $krep16_r3N5B_closure" {
     $krep16_r3N5B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep15_r3N5A_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.446668418 UTC

[section ""data" . $krep17_r3N5C_closure" {
     $krep17_r3N5C_closure:
         const :_con_info;
         const $krep16_r3N5B_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.448450863 UTC

[section ""data" . $krep18_r3N5D_closure" {
     $krep18_r3N5D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep17_r3N5C_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.450171727 UTC

[section ""data" . $krep19_r3N5E_closure" {
     $krep19_r3N5E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3N5p_closure+1;
         const $krep18_r3N5D_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.451834029 UTC

[section ""data" . $krep20_r3N5F_closure" {
     $krep20_r3N5F_closure:
         const :_con_info;
         const $krep14_r3N5z_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.453682336 UTC

[section ""data" . $krep21_r3N5G_closure" {
     $krep21_r3N5G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec_closure;
         const $krep20_r3N5F_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.455830348 UTC

[section ""data" . $krep22_r3N5H_closure" {
     $krep22_r3N5H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec_closure;
         const $krep13_r3N5y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.45746663 UTC

[section ""cstring" . GHC.Read.$tcRead3_bytes" {
     GHC.Read.$tcRead3_bytes:
         I8[] [82,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.459117322 UTC

[section ""data" . GHC.Read.$tcRead2_closure" {
     GHC.Read.$tcRead2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Read.$tcRead3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.460838224 UTC

[section ""data" . GHC.Read.$tcRead_closure" {
     GHC.Read.$tcRead_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Read.$trModule_closure+1;
         const GHC.Read.$tcRead2_closure+1;
         const GHC.Read.$tcRead1_closure+4;
         const 2005723268194049725;
         const 6708234688584993214;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.462606258 UTC

[section ""data" . $krep23_r3N5I_closure" {
     $krep23_r3N5I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Read.$tcRead_closure+1;
         const $krep13_r3N5y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.464282217 UTC

[section ""data" . $krep24_r3N5J_closure" {
     $krep24_r3N5J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep21_r3N5G_closure+1;
         const $krep23_r3N5I_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.466182575 UTC

[section ""data" . $krep25_r3N5K_closure" {
     $krep25_r3N5K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r3N5H_closure+1;
         const $krep24_r3N5J_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.467895381 UTC

[section ""data" . $krep26_r3N5L_closure" {
     $krep26_r3N5L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r3N5E_closure+4;
         const $krep25_r3N5K_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.469567138 UTC

[section ""data" . GHC.Read.$tc'C:Read1_closure" {
     GHC.Read.$tc'C:Read1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r3N5x_closure+4;
         const $krep26_r3N5L_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.471368684 UTC

[section ""cstring" . GHC.Read.$tc'C:Read3_bytes" {
     GHC.Read.$tc'C:Read3_bytes:
         I8[] [39,67,58,82,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.47305766 UTC

[section ""data" . GHC.Read.$tc'C:Read2_closure" {
     GHC.Read.$tc'C:Read2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Read.$tc'C:Read3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.474792453 UTC

[section ""data" . GHC.Read.$tc'C:Read_closure" {
     GHC.Read.$tc'C:Read_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Read.$trModule_closure+1;
         const GHC.Read.$tc'C:Read2_closure+1;
         const GHC.Read.$tc'C:Read1_closure+4;
         const 14808553548329602455;
         const 6533111827003124976;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.477820669 UTC

[section ""data" . GHC.Read.$fReadInt_$creadsPrec_closure" {
     GHC.Read.$fReadInt_$creadsPrec_closure:
         const GHC.Read.$fReadInt_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u3WKY_srtd" {
     u3WKY_srtd:
         const S3NLQ_srt+1024;
         const 127;
         const 1;
         const 4611686018427387904;
 },
 sat_s3NFF_entry() //  [R1]
         { []
         }
     {offset
       c3WKQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WKR; else goto c3WKS;
       c3WKR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WKS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadInt2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NFF_info" {
     sat_s3NFF_info:
         const sat_s3NFF_entry;
         const 1;
         const 18446744069414584336;
         const u3WKY_srtd;
 },
 section ""relreadonly" . u3WKZ_srtd" {
     u3WKZ_srtd:
         const S3NLQ_srt+1024;
         const 152;
         const 1;
         const 4611686018427387904;
         const 8388608;
 },
 GHC.Read.$fReadInt_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3WKT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3WKX; else goto c3WKW;
       c3WKX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadInt_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WKW: // global
           I64[Hp - 16] = sat_s3NFF_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt_$creadsPrec_info" {
     GHC.Read.$fReadInt_$creadsPrec_info:
         const GHC.Read.$fReadInt_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3WKZ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.486162303 UTC

[section ""data" . GHC.Read.$fReadInt_$creadListPrec_closure" {
     GHC.Read.$fReadInt_$creadListPrec_closure:
         const GHC.Read.$fReadInt_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadInt_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3WLg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WLh; else goto c3WLi;
       c3WLh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WLi: // global
           (_c3WLd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WLd::I64 == 0) goto c3WLf; else goto c3WLe;
       c3WLf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WLe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WLd::I64;
           R2 = GHC.Read.$fReadInt1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt_$creadListPrec_info" {
     GHC.Read.$fReadInt_$creadListPrec_info:
         const GHC.Read.$fReadInt_$creadListPrec_entry;
         const 0;
         const 1103806595093;
         const S3NLQ_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.49035728 UTC

[section ""data" . GHC.Read.$fReadInt3_closure" {
     GHC.Read.$fReadInt3_closure:
         const GHC.Read.$fReadInt3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadInt3_entry() //  [R1]
         { []
         }
     {offset
       c3WLw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WLx; else goto c3WLy;
       c3WLx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WLy: // global
           (_c3WLt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WLt::I64 == 0) goto c3WLv; else goto c3WLu;
       c3WLv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WLu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WLt::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadInt_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt3_info" {
     GHC.Read.$fReadInt3_info:
         const GHC.Read.$fReadInt3_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+2248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.494992557 UTC

[section ""data" . GHC.Read.$fReadInt_$creadList_closure" {
     GHC.Read.$fReadInt_$creadList_closure:
         const GHC.Read.$fReadInt_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadInt_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WLK: // global
           R3 = R2;
           R2 = GHC.Read.$fReadInt3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt_$creadList_info" {
     GHC.Read.$fReadInt_$creadList_info:
         const GHC.Read.$fReadInt_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.498181552 UTC

[section ""data" . GHC.Read.$fReadInt_closure" {
     GHC.Read.$fReadInt_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInt_$creadsPrec_closure+1;
         const GHC.Read.$fReadInt_$creadList_closure+1;
         const GHC.Read.$fReadInt1_closure+2;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.502613465 UTC

[section ""data" . GHC.Read.$fReadWord32_go_closure" {
     GHC.Read.$fReadWord32_go_closure:
         const GHC.Read.$fReadWord32_go_info;
 },
 sat_s3NFT_entry() //  [R1]
         { []
         }
     {offset
       c3WMb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WMc; else goto c3WMd;
       c3WMc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WMd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord32_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NFT_info" {
     sat_s3NFT_info:
         const sat_s3NFT_entry;
         const 1;
         const 16;
 },
 sat_s3NFR_entry() //  [R1]
         { []
         }
     {offset
       c3WMl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3WMv; else goto c3WMw;
       c3WMv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WMw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3WMi_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3WMA; else goto c3WMj;
       u3WMA: // global
           call _c3WMi(R1) args: 0, res: 0, upd: 0;
       c3WMj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NFR_info" {
     sat_s3NFR_info:
         const sat_s3NFR_entry;
         const 1;
         const 16;
 },
 _c3WMi() //  [R1]
         { []
         }
     {offset
       c3WMi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WMz; else goto c3WMy;
       c3WMz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3WMy: // global
           _s3NFQ::I64 = %MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W32#_con_info;
           I64[Hp] = _s3NFQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3WMi_info" {
     block_c3WMi_info:
         const _c3WMi;
         const 0;
         const 30;
 },
 GHC.Read.$fReadWord32_go_entry() //  [R2]
         { []
         }
     {offset
       c3WMF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WMG; else goto c3WMH;
       c3WMG: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord32_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WMH: // global
           I64[Sp - 8] = block_c3WLW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WMR; else goto c3WLX;
       u3WMR: // global
           call _c3WLW(R1) args: 0, res: 0, upd: 0;
       c3WLX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord32_go_info" {
     GHC.Read.$fReadWord32_go_info:
         const GHC.Read.$fReadWord32_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3WLW() //  [R1]
         { []
         }
     {offset
       c3WLW: // global
           if (R1 & 7 == 1) goto c3WMC; else goto c3WMD;
       c3WMC: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3WMD: // global
           I64[Sp - 8] = block_c3WM2_info;
           _s3NFJ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NFJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WMQ; else goto c3WM3;
       u3WMQ: // global
           call _c3WM2(R1) args: 0, res: 0, upd: 0;
       c3WM3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WLW_info" {
     block_c3WLW_info:
         const _c3WLW;
         const 0;
         const 30;
 },
 _c3WM2() //  [R1]
         { []
         }
     {offset
       c3WM2: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3WMP; else goto c3WMO;
       c3WMP: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WMO: // global
           _s3NFL::P64 = P64[R1 + 7];
           _s3NFM::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3NFT_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3NFR_info;
           P64[Hp - 48] = _s3NFL::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3NFM::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WM2_info" {
     block_c3WM2_info:
         const _c3WM2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.516139444 UTC

[section ""data" . GHC.Read.$fReadWord32_$creadsPrec_closure" {
     GHC.Read.$fReadWord32_$creadsPrec_closure:
         const GHC.Read.$fReadWord32_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u3WNI_srtd" {
     u3WNI_srtd:
         const S3NLQ_srt+1024;
         const 156;
         const 1;
         const 4611686018427387904;
         const 134217728;
 },
 GHC.Read.$fReadWord32_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WNx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WNB; else goto c3WNC;
       c3WNB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord32_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WNC: // global
           I64[Sp - 16] = block_c3WNv_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3NFV::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInt2_closure+1;
           P64[Sp - 8] = _s3NFV::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord32_$creadsPrec_info" {
     GHC.Read.$fReadWord32_$creadsPrec_info:
         const GHC.Read.$fReadWord32_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u3WNI_srtd;
 },
 _c3WNv() //  [R1]
         { []
         }
     {offset
       c3WNv: // global
           _s3NFV::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3WNA_info;
           R3 = _s3NFV::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WNv_info" {
     block_c3WNv_info:
         const _c3WNv;
         const 1;
         const 30;
 },
 _c3WNA() //  [R1]
         { []
         }
     {offset
       c3WNA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord32_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WNA_info" {
     block_c3WNA_info:
         const _c3WNA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.52542543 UTC

[section ""data" . GHC.Read.$fReadWord10_closure" {
     GHC.Read.$fReadWord10_closure:
         const GHC.Read.$fReadWord10_info;
         const 0;
 },
 sat_s3NG0_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WO4: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord32_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NG0_info" {
     sat_s3NG0_info:
         const sat_s3NG0_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+2264;
 },
 GHC.Read.$fReadWord10_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WOa: // global
           _s3NFZ::P64 = R3;
           _s3NFY::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3WOb; else goto c3WOc;
       c3WOc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WOe; else goto c3WOd;
       c3WOe: // global
           HpAlloc = 16;
           goto c3WOb;
       c3WOb: // global
           R3 = _s3NFZ::P64;
           R2 = _s3NFY::P64;
           R1 = GHC.Read.$fReadWord10_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WOd: // global
           I64[Hp - 8] = sat_s3NG0_info;
           P64[Hp] = _s3NFY::P64;
           I64[Sp - 8] = block_c3WO7_info;
           R3 = _s3NFZ::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord10_info" {
     GHC.Read.$fReadWord10_info:
         const GHC.Read.$fReadWord10_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+2264;
 },
 _c3WO7() //  [R1]
         { []
         }
     {offset
       c3WO7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WOh; else goto c3WOg;
       c3WOh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WOg: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WO7_info" {
     block_c3WO7_info:
         const _c3WO7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.532656 UTC

[section ""data" . GHC.Read.$fReadWord9_closure" {
     GHC.Read.$fReadWord9_closure:
         const GHC.Read.$fReadWord9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord9_entry() //  [R1]
         { []
         }
     {offset
       c3WOA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3WOB; else goto c3WOC;
       c3WOB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WOC: // global
           (_c3WOx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WOx::I64 == 0) goto c3WOz; else goto c3WOy;
       c3WOz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WOy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WOx::I64;
           R2 = GHC.Read.$fReadWord10_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord9_info" {
     GHC.Read.$fReadWord9_info:
         const GHC.Read.$fReadWord9_entry;
         const 0;
         const 17596481011733;
         const S3NLQ_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.536713403 UTC

[section ""data" . GHC.Read.$fReadWord32_$creadList_closure" {
     GHC.Read.$fReadWord32_$creadList_closure:
         const GHC.Read.$fReadWord32_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord32_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WOO: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord9_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord32_$creadList_info" {
     GHC.Read.$fReadWord32_$creadList_info:
         const GHC.Read.$fReadWord32_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.540748017 UTC

[section ""data" . GHC.Read.$fReadWord7_closure" {
     GHC.Read.$fReadWord7_closure:
         const GHC.Read.$fReadWord7_info;
         const 0;
 },
 GHC.Read.$fReadWord7_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WP2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WP3; else goto c3WP4;
       c3WP3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WP4: // global
           I64[Sp - 8] = block_c3WOZ_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord32_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord7_info" {
     GHC.Read.$fReadWord7_info:
         const GHC.Read.$fReadWord7_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+2288;
 },
 _c3WOZ() //  [R1]
         { []
         }
     {offset
       c3WOZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WP7; else goto c3WP6;
       c3WP7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WP6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WOZ_info" {
     block_c3WOZ_info:
         const _c3WOZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.545914453 UTC

[section ""data" . GHC.Read.$fReadWord32_closure" {
     GHC.Read.$fReadWord32_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord32_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord32_$creadList_closure+1;
         const GHC.Read.$fReadWord10_closure+2;
         const GHC.Read.$fReadWord7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.550655076 UTC

[section ""data" . GHC.Read.$fReadWord16_go_closure" {
     GHC.Read.$fReadWord16_go_closure:
         const GHC.Read.$fReadWord16_go_info;
 },
 sat_s3NGk_entry() //  [R1]
         { []
         }
     {offset
       c3WPB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WPC; else goto c3WPD;
       c3WPC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WPD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord16_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NGk_info" {
     sat_s3NGk_info:
         const sat_s3NGk_entry;
         const 1;
         const 16;
 },
 sat_s3NGi_entry() //  [R1]
         { []
         }
     {offset
       c3WPL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3WPV; else goto c3WPW;
       c3WPV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WPW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3WPI_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3WQ0; else goto c3WPJ;
       u3WQ0: // global
           call _c3WPI(R1) args: 0, res: 0, upd: 0;
       c3WPJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NGi_info" {
     sat_s3NGi_info:
         const sat_s3NGi_entry;
         const 1;
         const 16;
 },
 _c3WPI() //  [R1]
         { []
         }
     {offset
       c3WPI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WPZ; else goto c3WPY;
       c3WPZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3WPY: // global
           _s3NGh::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W16#_con_info;
           I64[Hp] = _s3NGh::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3WPI_info" {
     block_c3WPI_info:
         const _c3WPI;
         const 0;
         const 30;
 },
 GHC.Read.$fReadWord16_go_entry() //  [R2]
         { []
         }
     {offset
       c3WQ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WQ6; else goto c3WQ7;
       c3WQ6: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord16_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WQ7: // global
           I64[Sp - 8] = block_c3WPm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WQh; else goto c3WPn;
       u3WQh: // global
           call _c3WPm(R1) args: 0, res: 0, upd: 0;
       c3WPn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord16_go_info" {
     GHC.Read.$fReadWord16_go_info:
         const GHC.Read.$fReadWord16_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3WPm() //  [R1]
         { []
         }
     {offset
       c3WPm: // global
           if (R1 & 7 == 1) goto c3WQ2; else goto c3WQ3;
       c3WQ2: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3WQ3: // global
           I64[Sp - 8] = block_c3WPs_info;
           _s3NGa::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NGa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WQg; else goto c3WPt;
       u3WQg: // global
           call _c3WPs(R1) args: 0, res: 0, upd: 0;
       c3WPt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WPm_info" {
     block_c3WPm_info:
         const _c3WPm;
         const 0;
         const 30;
 },
 _c3WPs() //  [R1]
         { []
         }
     {offset
       c3WPs: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3WQf; else goto c3WQe;
       c3WQf: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WQe: // global
           _s3NGc::P64 = P64[R1 + 7];
           _s3NGd::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3NGk_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3NGi_info;
           P64[Hp - 48] = _s3NGc::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3NGd::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WPs_info" {
     block_c3WPs_info:
         const _c3WPs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.564522771 UTC

[section ""data" . GHC.Read.$fReadWord16_$creadsPrec_closure" {
     GHC.Read.$fReadWord16_$creadsPrec_closure:
         const GHC.Read.$fReadWord16_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fReadWord16_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WQX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WR1; else goto c3WR2;
       c3WR1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord16_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WR2: // global
           I64[Sp - 16] = block_c3WQV_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3NGm::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInt2_closure+1;
           P64[Sp - 8] = _s3NGm::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord16_$creadsPrec_info" {
     GHC.Read.$fReadWord16_$creadsPrec_info:
         const GHC.Read.$fReadWord16_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S3NLQ_srt+2304;
 },
 _c3WQV() //  [R1]
         { []
         }
     {offset
       c3WQV: // global
           _s3NGm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3WR0_info;
           R3 = _s3NGm::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WQV_info" {
     block_c3WQV_info:
         const _c3WQV;
         const 1;
         const 30;
 },
 _c3WR0() //  [R1]
         { []
         }
     {offset
       c3WR0: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord16_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WR0_info" {
     block_c3WR0_info:
         const _c3WR0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.572479644 UTC

[section ""data" . GHC.Read.$fReadWord6_closure" {
     GHC.Read.$fReadWord6_closure:
         const GHC.Read.$fReadWord6_info;
         const 0;
 },
 sat_s3NGr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WRs: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord16_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NGr_info" {
     sat_s3NGr_info:
         const sat_s3NGr_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+2304;
 },
 GHC.Read.$fReadWord6_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WRy: // global
           _s3NGq::P64 = R3;
           _s3NGp::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3WRz; else goto c3WRA;
       c3WRA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WRC; else goto c3WRB;
       c3WRC: // global
           HpAlloc = 16;
           goto c3WRz;
       c3WRz: // global
           R3 = _s3NGq::P64;
           R2 = _s3NGp::P64;
           R1 = GHC.Read.$fReadWord6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WRB: // global
           I64[Hp - 8] = sat_s3NGr_info;
           P64[Hp] = _s3NGp::P64;
           I64[Sp - 8] = block_c3WRv_info;
           R3 = _s3NGq::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord6_info" {
     GHC.Read.$fReadWord6_info:
         const GHC.Read.$fReadWord6_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S3NLQ_srt+2304;
 },
 _c3WRv() //  [R1]
         { []
         }
     {offset
       c3WRv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WRF; else goto c3WRE;
       c3WRF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WRE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WRv_info" {
     block_c3WRv_info:
         const _c3WRv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.580526213 UTC

[section ""data" . GHC.Read.$fReadWord5_closure" {
     GHC.Read.$fReadWord5_closure:
         const GHC.Read.$fReadWord5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord5_entry() //  [R1]
         { []
         }
     {offset
       c3WRY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3WRZ; else goto c3WS0;
       c3WRZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WS0: // global
           (_c3WRV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WRV::I64 == 0) goto c3WRX; else goto c3WRW;
       c3WRX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WRW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WRV::I64;
           R2 = GHC.Read.$fReadWord6_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord5_info" {
     GHC.Read.$fReadWord5_info:
         const GHC.Read.$fReadWord5_entry;
         const 0;
         const 2251804108652565;
         const S3NLQ_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.584943924 UTC

[section ""data" . GHC.Read.$fReadWord16_$creadList_closure" {
     GHC.Read.$fReadWord16_$creadList_closure:
         const GHC.Read.$fReadWord16_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord16_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WSc: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord5_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord16_$creadList_info" {
     GHC.Read.$fReadWord16_$creadList_info:
         const GHC.Read.$fReadWord16_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2336;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.589184575 UTC

[section ""data" . GHC.Read.$fReadWord4_closure" {
     GHC.Read.$fReadWord4_closure:
         const GHC.Read.$fReadWord4_info;
         const 0;
 },
 GHC.Read.$fReadWord4_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WSq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WSr; else goto c3WSs;
       c3WSr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WSs: // global
           I64[Sp - 8] = block_c3WSn_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord16_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord4_info" {
     GHC.Read.$fReadWord4_info:
         const GHC.Read.$fReadWord4_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+2344;
 },
 _c3WSn() //  [R1]
         { []
         }
     {offset
       c3WSn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WSv; else goto c3WSu;
       c3WSv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WSu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WSn_info" {
     block_c3WSn_info:
         const _c3WSn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.594858916 UTC

[section ""data" . GHC.Read.$fReadWord16_closure" {
     GHC.Read.$fReadWord16_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord16_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord16_$creadList_closure+1;
         const GHC.Read.$fReadWord6_closure+2;
         const GHC.Read.$fReadWord4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.600774431 UTC

[section ""data" . GHC.Read.$fReadWord8_go_closure" {
     GHC.Read.$fReadWord8_go_closure:
         const GHC.Read.$fReadWord8_go_info;
 },
 sat_s3NGL_entry() //  [R1]
         { []
         }
     {offset
       c3WSZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WT0; else goto c3WT1;
       c3WT0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WT1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord8_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NGL_info" {
     sat_s3NGL_info:
         const sat_s3NGL_entry;
         const 1;
         const 16;
 },
 sat_s3NGJ_entry() //  [R1]
         { []
         }
     {offset
       c3WT9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3WTj; else goto c3WTk;
       c3WTj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WTk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3WT6_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3WTo; else goto c3WT7;
       u3WTo: // global
           call _c3WT6(R1) args: 0, res: 0, upd: 0;
       c3WT7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NGJ_info" {
     sat_s3NGJ_info:
         const sat_s3NGJ_entry;
         const 1;
         const 16;
 },
 _c3WT6() //  [R1]
         { []
         }
     {offset
       c3WT6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WTn; else goto c3WTm;
       c3WTn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3WTm: // global
           _s3NGI::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _s3NGI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3WT6_info" {
     block_c3WT6_info:
         const _c3WT6;
         const 0;
         const 30;
 },
 GHC.Read.$fReadWord8_go_entry() //  [R2]
         { []
         }
     {offset
       c3WTt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WTu; else goto c3WTv;
       c3WTu: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord8_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WTv: // global
           I64[Sp - 8] = block_c3WSK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WTF; else goto c3WSL;
       u3WTF: // global
           call _c3WSK(R1) args: 0, res: 0, upd: 0;
       c3WSL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord8_go_info" {
     GHC.Read.$fReadWord8_go_info:
         const GHC.Read.$fReadWord8_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3WSK() //  [R1]
         { []
         }
     {offset
       c3WSK: // global
           if (R1 & 7 == 1) goto c3WTq; else goto c3WTr;
       c3WTq: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3WTr: // global
           I64[Sp - 8] = block_c3WSQ_info;
           _s3NGB::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NGB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3WTE; else goto c3WSR;
       u3WTE: // global
           call _c3WSQ(R1) args: 0, res: 0, upd: 0;
       c3WSR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WSK_info" {
     block_c3WSK_info:
         const _c3WSK;
         const 0;
         const 30;
 },
 _c3WSQ() //  [R1]
         { []
         }
     {offset
       c3WSQ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3WTD; else goto c3WTC;
       c3WTD: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WTC: // global
           _s3NGD::P64 = P64[R1 + 7];
           _s3NGE::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3NGL_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3NGJ_info;
           P64[Hp - 48] = _s3NGD::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3NGE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WSQ_info" {
     block_c3WSQ_info:
         const _c3WSQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.614170717 UTC

[section ""data" . GHC.Read.$fReadWord8_$creadsPrec_closure" {
     GHC.Read.$fReadWord8_$creadsPrec_closure:
         const GHC.Read.$fReadWord8_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fReadWord8_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WUl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WUp; else goto c3WUq;
       c3WUp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord8_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WUq: // global
           I64[Sp - 16] = block_c3WUj_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3NGN::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInt2_closure+1;
           P64[Sp - 8] = _s3NGN::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord8_$creadsPrec_info" {
     GHC.Read.$fReadWord8_$creadsPrec_info:
         const GHC.Read.$fReadWord8_$creadsPrec_entry;
         const 0;
         const 287762808846;
         const 8589934607;
         const S3NLQ_srt+2312;
 },
 _c3WUj() //  [R1]
         { []
         }
     {offset
       c3WUj: // global
           _s3NGN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3WUo_info;
           R3 = _s3NGN::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WUj_info" {
     block_c3WUj_info:
         const _c3WUj;
         const 1;
         const 30;
 },
 _c3WUo() //  [R1]
         { []
         }
     {offset
       c3WUo: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord8_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WUo_info" {
     block_c3WUo_info:
         const _c3WUo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.622779054 UTC

[section ""data" . GHC.Read.$fReadWord17_closure" {
     GHC.Read.$fReadWord17_closure:
         const GHC.Read.$fReadWord17_info;
         const 0;
 },
 sat_s3NGS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WUQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord8_$creadsPrec_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NGS_info" {
     sat_s3NGS_info:
         const sat_s3NGS_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+2360;
 },
 GHC.Read.$fReadWord17_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WUW: // global
           _s3NGR::P64 = R3;
           _s3NGQ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3WUX; else goto c3WUY;
       c3WUY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WV0; else goto c3WUZ;
       c3WV0: // global
           HpAlloc = 16;
           goto c3WUX;
       c3WUX: // global
           R3 = _s3NGR::P64;
           R2 = _s3NGQ::P64;
           R1 = GHC.Read.$fReadWord17_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WUZ: // global
           I64[Hp - 8] = sat_s3NGS_info;
           P64[Hp] = _s3NGQ::P64;
           I64[Sp - 8] = block_c3WUT_info;
           R3 = _s3NGR::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord17_info" {
     GHC.Read.$fReadWord17_info:
         const GHC.Read.$fReadWord17_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+2360;
 },
 _c3WUT() //  [R1]
         { []
         }
     {offset
       c3WUT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WV3; else goto c3WV2;
       c3WV3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WV2: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WUT_info" {
     block_c3WUT_info:
         const _c3WUT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.631423219 UTC

[section ""data" . GHC.Read.$fReadWord15_closure" {
     GHC.Read.$fReadWord15_closure:
         const GHC.Read.$fReadWord15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord15_entry() //  [R1]
         { []
         }
     {offset
       c3WVm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3WVn; else goto c3WVo;
       c3WVn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WVo: // global
           (_c3WVj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WVj::I64 == 0) goto c3WVl; else goto c3WVk;
       c3WVl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WVk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WVj::I64;
           R2 = GHC.Read.$fReadWord17_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord15_info" {
     GHC.Read.$fReadWord15_info:
         const GHC.Read.$fReadWord15_entry;
         const 0;
         const 72057598332895253;
         const S3NLQ_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.635757769 UTC

[section ""data" . GHC.Read.$fReadWord8_$creadList_closure" {
     GHC.Read.$fReadWord8_$creadList_closure:
         const GHC.Read.$fReadWord8_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord8_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WVA: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord15_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord8_$creadList_info" {
     GHC.Read.$fReadWord8_$creadList_info:
         const GHC.Read.$fReadWord8_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.640331056 UTC

[section ""data" . GHC.Read.$fReadWord14_closure" {
     GHC.Read.$fReadWord14_closure:
         const GHC.Read.$fReadWord14_info;
         const 0;
 },
 GHC.Read.$fReadWord14_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WVO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3WVP; else goto c3WVQ;
       c3WVP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord14_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3WVQ: // global
           I64[Sp - 8] = block_c3WVL_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord8_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord14_info" {
     GHC.Read.$fReadWord14_info:
         const GHC.Read.$fReadWord14_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+2384;
 },
 _c3WVL() //  [R1]
         { []
         }
     {offset
       c3WVL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WVT; else goto c3WVS;
       c3WVT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3WVS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WVL_info" {
     block_c3WVL_info:
         const _c3WVL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.645428585 UTC

[section ""data" . GHC.Read.$fReadWord8_closure" {
     GHC.Read.$fReadWord8_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord8_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord8_$creadList_closure+1;
         const GHC.Read.$fReadWord17_closure+2;
         const GHC.Read.$fReadWord14_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.648182725 UTC

[section ""data" . GHC.Read.$fReadChar_$creadsPrec_closure" {
     GHC.Read.$fReadChar_$creadsPrec_closure:
         const GHC.Read.$fReadChar_$creadsPrec_info;
         const 0;
 },
 sat_s3NH0_entry() //  [R1]
         { []
         }
     {offset
       c3WWc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WWd; else goto c3WWe;
       c3WWd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WWe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadChar7_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NH0_info" {
     sat_s3NH0_info:
         const sat_s3NH0_entry;
         const 1;
         const 12884901904;
         const S3NLQ_srt+2400;
 },
 GHC.Read.$fReadChar_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3WWf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3WWj; else goto c3WWi;
       c3WWj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadChar_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WWi: // global
           I64[Hp - 16] = sat_s3NH0_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar_$creadsPrec_info" {
     GHC.Read.$fReadChar_$creadsPrec_info:
         const GHC.Read.$fReadChar_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3NLQ_srt+2400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.654174004 UTC

[section ""data" . GHC.Read.$fReadChar5_closure" {
     GHC.Read.$fReadChar5_closure:
         const GHC.Read.$fReadChar5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadChar5_entry() //  [R1]
         { []
         }
     {offset
       c3WWy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WWz; else goto c3WWA;
       c3WWz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WWA: // global
           (_c3WWv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WWv::I64 == 0) goto c3WWx; else goto c3WWw;
       c3WWx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WWw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WWv::I64;
           R2 = GHC.Read.$fReadChar6_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar5_info" {
     GHC.Read.$fReadChar5_info:
         const GHC.Read.$fReadChar5_entry;
         const 0;
         const 9223372041149743125;
         const S3NLQ_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.661808759 UTC

[section ""data" . GHC.Read.$fReadChar2_closure" {
     GHC.Read.$fReadChar2_closure:
         const GHC.Read.$fReadChar2_info;
         const 0;
 },
 ds3_s3NH2_entry() //  [R1]
         { []
         }
     {offset
       c3WWQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WWR; else goto c3WWS;
       c3WWR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WWS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           R1 = GHC.Read.$fReadChar5_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds3_s3NH2_info" {
     ds3_s3NH2_info:
         const ds3_s3NH2_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2432;
 },
 sat_s3NH8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WXi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WXj; else goto c3WXk;
       c3WXj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WXk: // global
           I64[Sp - 16] = block_c3WXb_info;
           _s3NH3::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3NH3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3WXr; else goto c3WXc;
       u3WXr: // global
           call _c3WXb(R1) args: 0, res: 0, upd: 0;
       c3WXc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NH8_info" {
     sat_s3NH8_info:
         const sat_s3NH8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3WXb() //  [R1]
         { []
         }
     {offset
       c3WXb: // global
           if (R1 & 7 == 2) goto c3WXg; else goto c3WXf;
       c3WXg: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c3WXf: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3WXb_info" {
     block_c3WXb_info:
         const _c3WXb;
         const 1;
         const 30;
 },
 sat_s3NH9_entry() //  [R1]
         { []
         }
     {offset
       c3WXs: // global
           _s3NH9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WXt; else goto c3WXu;
       c3WXu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3WXw; else goto c3WXv;
       c3WXw: // global
           HpAlloc = 16;
           goto c3WXt;
       c3WXt: // global
           R1 = _s3NH9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WXv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NH9::P64;
           _s3NH3::P64 = P64[_s3NH9::P64 + 16];
           I64[Hp - 8] = sat_s3NH8_info;
           P64[Hp] = _s3NH3::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NH9_info" {
     sat_s3NH9_info:
         const sat_s3NH9_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2440;
 },
 section ""relreadonly" . u3WY4_srtd" {
     u3WY4_srtd:
         const S3NLQ_srt+936;
         const 189;
         const 1;
         const 0;
         const 1152921504606846976;
 },
 lvl116_s3NH4_entry() //  [R1]
         { []
         }
     {offset
       c3WXx: // global
           _s3NH4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3WXy; else goto c3WXz;
       c3WXz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3WXB; else goto c3WXA;
       c3WXB: // global
           HpAlloc = 24;
           goto c3WXy;
       c3WXy: // global
           R1 = _s3NH4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WXA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NH4::P64;
           _s3NH3::P64 = P64[_s3NH4::P64 + 16];
           I64[Hp - 16] = sat_s3NH9_info;
           P64[Hp] = _s3NH3::P64;
           R3 = Hp - 16;
           R2 = GHC.Read.$fReadChar3_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3NH4_info" {
     lvl116_s3NH4_info:
         const lvl116_s3NH4_entry;
         const 1;
         const 18446744069414584336;
         const u3WY4_srtd;
 },
 k1_s3NHa_entry() //  [R1]
         { []
         }
     {offset
       c3WXH: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3NHa_info" {
     k1_s3NHa_info:
         const k1_s3NHa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3NHd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WXQ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHd_info" {
     sat_s3NHd_info:
         const sat_s3NHd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 section ""relreadonly" . u3WY5_srtd" {
     u3WY5_srtd:
         const S3NLQ_srt+936;
         const 189;
         const 1;
         const 0;
         const 1152921504606846976;
 },
 sat_s3NHg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3WXU: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3WXY; else goto c3WXX;
       c3WXY: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WXX: // global
           _s3NH2::P64 = P64[R1 + 7];
           I64[Hp - 96] = lvl116_s3NH4_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = k1_s3NHa_info;
           P64[Hp - 64] = Hp - 96;
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3NH2::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3NHd_info;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHg_info" {
     sat_s3NHg_info:
         const sat_s3NHg_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u3WY5_srtd;
 },
 section ""relreadonly" . u3WY6_srtd" {
     u3WY6_srtd:
         const S3NLQ_srt+936;
         const 190;
         const 1;
         const 0;
         const 4035225266123964416;
 },
 GHC.Read.$fReadChar2_entry() //  [R2]
         { []
         }
     {offset
       c3WXZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3WY3; else goto c3WY2;
       c3WY3: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Read.$fReadChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3WY2: // global
           I64[Hp - 32] = ds3_s3NH2_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3NHg_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar2_info" {
     GHC.Read.$fReadChar2_info:
         const GHC.Read.$fReadChar2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u3WY6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.681907004 UTC

[section ""data" . GHC.Read.$fReadChar1_closure" {
     GHC.Read.$fReadChar1_closure:
         const GHC.Read.$fReadChar1_info;
         const 0;
 },
 GHC.Read.$fReadChar1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3WYV: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadChar2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar1_info" {
     GHC.Read.$fReadChar1_info:
         const GHC.Read.$fReadChar1_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S3NLQ_srt+2408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.685595089 UTC

[section ""data" . GHC.Read.$fReadChar8_closure" {
     GHC.Read.$fReadChar8_closure:
         const GHC.Read.$fReadChar8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadChar8_entry() //  [R1]
         { []
         }
     {offset
       c3WZ8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WZ9; else goto c3WZa;
       c3WZ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WZa: // global
           (_c3WZ5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WZ5::I64 == 0) goto c3WZ7; else goto c3WZ6;
       c3WZ7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WZ6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WZ5::I64;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = GHC.Read.$fRead()7_closure+1;
           R2 = GHC.Read.$fReadChar2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar8_info" {
     GHC.Read.$fReadChar8_info:
         const GHC.Read.$fReadChar8_entry;
         const 0;
         const 141733920789;
         const S3NLQ_srt+2408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.68974683 UTC

[section ""data" . GHC.Read.$fReadChar_$creadList_closure" {
     GHC.Read.$fReadChar_$creadList_closure:
         const GHC.Read.$fReadChar_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadChar_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3WZm: // global
           R3 = R2;
           R2 = GHC.Read.$fReadChar8_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar_$creadList_info" {
     GHC.Read.$fReadChar_$creadList_info:
         const GHC.Read.$fReadChar_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.692824459 UTC

[section ""data" . GHC.Read.$fReadChar_closure" {
     GHC.Read.$fReadChar_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadChar_$creadsPrec_closure+1;
         const GHC.Read.$fReadChar_$creadList_closure+1;
         const GHC.Read.$fReadChar6_closure+2;
         const GHC.Read.$fReadChar1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.695299351 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadListPrec1_closure" {
     GHC.Read.$fRead[]_$s$creadListPrec1_closure:
         const GHC.Read.$fRead[]_$s$creadListPrec1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadListPrec1_entry() //  [R1]
         { []
         }
     {offset
       c3WZA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WZB; else goto c3WZC;
       c3WZB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WZC: // global
           (_c3WZx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WZx::I64 == 0) goto c3WZz; else goto c3WZy;
       c3WZz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WZy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WZx::I64;
           R2 = GHC.Read.$fReadChar1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadListPrec1_info" {
     GHC.Read.$fRead[]_$s$creadListPrec1_info:
         const GHC.Read.$fRead[]_$s$creadListPrec1_entry;
         const 0;
         const 12884901909;
         const S3NLQ_srt+2464;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.700084192 UTC

[section ""data" . GHC.Read.$fRead[]2_closure" {
     GHC.Read.$fRead[]2_closure:
         const GHC.Read.$fRead[]2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]2_entry() //  [R1]
         { []
         }
     {offset
       c3WZQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3WZR; else goto c3WZS;
       c3WZR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3WZS: // global
           (_c3WZN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3WZN::I64 == 0) goto c3WZP; else goto c3WZO;
       c3WZP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3WZO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3WZN::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fRead[]_$s$creadListPrec1_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]2_info" {
     GHC.Read.$fRead[]2_info:
         const GHC.Read.$fRead[]2_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+2480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.704118836 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadList1_closure" {
     GHC.Read.$fRead[]_$s$creadList1_closure:
         const GHC.Read.$fRead[]_$s$creadList1_info;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadList1_entry() //  [R2]
         { []
         }
     {offset
       c3X04: // global
           R3 = R2;
           R2 = GHC.Read.$fRead[]2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadList1_info" {
     GHC.Read.$fRead[]_$s$creadList1_info:
         const GHC.Read.$fRead[]_$s$creadList1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2488;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.70786804 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadListPrec_closure" {
     GHC.Read.$fRead[]_$s$creadListPrec_closure:
         const GHC.Read.$fRead[]_$s$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c3X0h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X0i; else goto c3X0j;
       c3X0i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X0j: // global
           (_c3X0e::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3X0e::I64 == 0) goto c3X0g; else goto c3X0f;
       c3X0g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3X0f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3X0e::I64;
           R2 = GHC.Read.$fReadInt_$creadListPrec_closure;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadListPrec_info" {
     GHC.Read.$fRead[]_$s$creadListPrec_info:
         const GHC.Read.$fRead[]_$s$creadListPrec_entry;
         const 0;
         const 1152921508901814293;
         const S3NLQ_srt+2248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.712528863 UTC

[section ""data" . GHC.Read.$fRead[]1_closure" {
     GHC.Read.$fRead[]1_closure:
         const GHC.Read.$fRead[]1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]1_entry() //  [R1]
         { []
         }
     {offset
       c3X0x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X0y; else goto c3X0z;
       c3X0y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X0z: // global
           (_c3X0u::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3X0u::I64 == 0) goto c3X0w; else goto c3X0v;
       c3X0w: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3X0v: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3X0u::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fRead[]_$s$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]1_info" {
     GHC.Read.$fRead[]1_info:
         const GHC.Read.$fRead[]1_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+2496;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.717050473 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadList_closure" {
     GHC.Read.$fRead[]_$s$creadList_closure:
         const GHC.Read.$fRead[]_$s$creadList_info;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3X0L: // global
           R3 = R2;
           R2 = GHC.Read.$fRead[]1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadList_info" {
     GHC.Read.$fRead[]_$s$creadList_info:
         const GHC.Read.$fRead[]_$s$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2504;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.721067388 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadsPrec1_closure" {
     GHC.Read.$fRead[]_$s$creadsPrec1_closure:
         const GHC.Read.$fRead[]_$s$creadsPrec1_info;
         const 0;
 },
 sat_s3NHi_entry() //  [R1]
         { []
         }
     {offset
       c3X10: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X11; else goto c3X12;
       c3X11: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X12: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadChar2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHi_info" {
     sat_s3NHi_info:
         const sat_s3NHi_entry;
         const 1;
         const 141733920784;
         const S3NLQ_srt+2408;
 },
 GHC.Read.$fRead[]_$s$creadsPrec1_entry() //  [R2]
         { []
         }
     {offset
       c3X13: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X17; else goto c3X16;
       c3X17: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$s$creadsPrec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X16: // global
           I64[Hp - 16] = sat_s3NHi_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadsPrec1_info" {
     GHC.Read.$fRead[]_$s$creadsPrec1_info:
         const GHC.Read.$fRead[]_$s$creadsPrec1_entry;
         const 0;
         const 35326106009614;
         const 4294967301;
         const S3NLQ_srt+2408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.727115256 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadsPrec_closure" {
     GHC.Read.$fRead[]_$s$creadsPrec_closure:
         const GHC.Read.$fRead[]_$s$creadsPrec_info;
         const 0;
 },
 sat_s3NHk_entry() //  [R1]
         { []
         }
     {offset
       c3X1o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X1p; else goto c3X1q;
       c3X1p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X1q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 16];
           R1 = GHC.Read.$fReadInt_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHk_info" {
     sat_s3NHk_info:
         const sat_s3NHk_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2520;
 },
 GHC.Read.$fRead[]_$s$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3X1r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X1v; else goto c3X1u;
       c3X1v: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$s$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X1u: // global
           I64[Hp - 16] = sat_s3NHk_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadsPrec_info" {
     GHC.Read.$fRead[]_$s$creadsPrec_info:
         const GHC.Read.$fRead[]_$s$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3NLQ_srt+2520;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.732215942 UTC

[section ""data" . GHC.Read.$fRead[]_$s$fRead[]_closure" {
     GHC.Read.$fRead[]_$s$fRead[]_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fRead[]_$s$creadsPrec_closure+1;
         const GHC.Read.$fRead[]_$s$creadList_closure+1;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.734190453 UTC

[section ""data" . GHC.Read.$fRead[]_$s$fRead[]1_closure" {
     GHC.Read.$fRead[]_$s$fRead[]1_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fRead[]_$s$creadsPrec1_closure+1;
         const GHC.Read.$fRead[]_$s$creadList1_closure+1;
         const GHC.Read.$fReadChar1_closure+2;
         const GHC.Read.$fRead[]_$s$creadListPrec1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.736910556 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadsPrec2_closure" {
     GHC.Read.$fRead[]_$s$creadsPrec2_closure:
         const GHC.Read.$fRead[]_$s$creadsPrec2_info;
         const 0;
 },
 sat_s3NHm_entry() //  [R1]
         { []
         }
     {offset
       c3X1O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X1P; else goto c3X1Q;
       c3X1P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X1Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 16];
           R1 = GHC.Read.$fRead[]_$s$creadListPrec1_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHm_info" {
     sat_s3NHm_info:
         const sat_s3NHm_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2480;
 },
 GHC.Read.$fRead[]_$s$creadsPrec2_entry() //  [R2]
         { []
         }
     {offset
       c3X1R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X1V; else goto c3X1U;
       c3X1V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$s$creadsPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X1U: // global
           I64[Hp - 16] = sat_s3NHm_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadsPrec2_info" {
     GHC.Read.$fRead[]_$s$creadsPrec2_info:
         const GHC.Read.$fRead[]_$s$creadsPrec2_entry;
         const 0;
         const 554050781198;
         const 4294967301;
         const S3NLQ_srt+2480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.742839831 UTC

[section ""data" . GHC.Read.$fRead[]_$creadsPrec_closure" {
     GHC.Read.$fRead[]_$creadsPrec_closure:
         const GHC.Read.$fRead[]_$creadsPrec_info;
 },
 sat_s3NHp_entry() //  [R1]
         { []
         }
     {offset
       c3X2c: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3X2d; else goto c3X2e;
       c3X2d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X2e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.readListPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHp_info" {
     sat_s3NHp_info:
         const sat_s3NHp_entry;
         const 2;
         const 18;
 },
 GHC.Read.$fRead[]_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3X2f: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3X2j; else goto c3X2i;
       c3X2j: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3X2i: // global
           I64[Hp - 24] = sat_s3NHp_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$creadsPrec_info" {
     GHC.Read.$fRead[]_$creadsPrec_info:
         const GHC.Read.$fRead[]_$creadsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.74906123 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadListPrec2_closure" {
     GHC.Read.$fRead[]_$s$creadListPrec2_closure:
         const GHC.Read.$fRead[]_$s$creadListPrec2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadListPrec2_entry() //  [R1]
         { []
         }
     {offset
       c3X2z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X2A; else goto c3X2B;
       c3X2A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X2B: // global
           (_c3X2w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3X2w::I64 == 0) goto c3X2y; else goto c3X2x;
       c3X2y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3X2x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3X2w::I64;
           R2 = GHC.Read.$fRead[]_$s$creadListPrec1_closure;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadListPrec2_info" {
     GHC.Read.$fRead[]_$s$creadListPrec2_info:
         const GHC.Read.$fRead[]_$s$creadListPrec2_entry;
         const 0;
         const 12884901909;
         const S3NLQ_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.753863866 UTC

[section ""data" . GHC.Read.$fRead[]_$creadListPrec_closure" {
     GHC.Read.$fRead[]_$creadListPrec_closure:
         const GHC.Read.$fRead[]_$creadListPrec_info;
         const 0;
 },
 sat_s3NHr_entry() //  [R1]
         { []
         }
     {offset
       c3X2R: // global
           R2 = P64[R1 + 16];
           call GHC.Read.readListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHr_info" {
     sat_s3NHr_info:
         const sat_s3NHr_entry;
         const 1;
         const 16;
 },
 GHC.Read.$fRead[]_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c3X2U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X2Y; else goto c3X2X;
       c3X2Y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X2X: // global
           I64[Hp - 16] = sat_s3NHr_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$creadListPrec_info" {
     GHC.Read.$fRead[]_$creadListPrec_info:
         const GHC.Read.$fRead[]_$creadListPrec_entry;
         const 0;
         const 2203318222862;
         const 4294967301;
         const S3NLQ_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.759219209 UTC

[section ""data" . GHC.Read.$fRead[]3_closure" {
     GHC.Read.$fRead[]3_closure:
         const GHC.Read.$fRead[]3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]3_entry() //  [R1]
         { []
         }
     {offset
       c3X3c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X3d; else goto c3X3e;
       c3X3d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X3e: // global
           (_c3X39::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3X39::I64 == 0) goto c3X3b; else goto c3X3a;
       c3X3b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3X3a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3X39::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fRead[]_$s$creadListPrec2_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]3_info" {
     GHC.Read.$fRead[]3_info:
         const GHC.Read.$fRead[]3_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+2552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.763480093 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadList2_closure" {
     GHC.Read.$fRead[]_$s$creadList2_closure:
         const GHC.Read.$fRead[]_$s$creadList2_info;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadList2_entry() //  [R2]
         { []
         }
     {offset
       c3X3q: // global
           R3 = R2;
           R2 = GHC.Read.$fRead[]3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadList2_info" {
     GHC.Read.$fRead[]_$s$creadList2_info:
         const GHC.Read.$fRead[]_$s$creadList2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.766673615 UTC

[section ""data" . GHC.Read.$fRead[]_$s$fRead[]2_closure" {
     GHC.Read.$fRead[]_$s$fRead[]2_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fRead[]_$s$creadsPrec2_closure+1;
         const GHC.Read.$fRead[]_$s$creadList2_closure+1;
         const GHC.Read.$fRead[]_$s$creadListPrec1_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.769799018 UTC

[section ""data" . GHC.Read.$fRead[]_$creadList_closure" {
     GHC.Read.$fRead[]_$creadList_closure:
         const GHC.Read.$fRead[]_$creadList_info;
         const 0;
 },
 sat_s3NHt_entry() //  [R1]
         { []
         }
     {offset
       c3X3K: // global
           R2 = P64[R1 + 16];
           call GHC.Read.readListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHt_info" {
     sat_s3NHt_info:
         const sat_s3NHt_entry;
         const 1;
         const 16;
 },
 sat_s3NHu_entry() //  [R1]
         { []
         }
     {offset
       c3X3N: // global
           _s3NHu::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3X3O; else goto c3X3P;
       c3X3P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X3R; else goto c3X3Q;
       c3X3R: // global
           HpAlloc = 24;
           goto c3X3O;
       c3X3O: // global
           R1 = _s3NHu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X3Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NHu::P64;
           _s3NHs::P64 = P64[_s3NHu::P64 + 16];
           I64[Hp - 16] = sat_s3NHt_info;
           P64[Hp] = _s3NHs::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHu_info" {
     sat_s3NHu_info:
         const sat_s3NHu_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2472;
 },
 GHC.Read.$fRead[]_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3X3S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X3W; else goto c3X3V;
       c3X3W: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X3V: // global
           I64[Hp - 16] = sat_s3NHu_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$creadList_info" {
     GHC.Read.$fRead[]_$creadList_info:
         const GHC.Read.$fRead[]_$creadList_entry;
         const 0;
         const 17596481011726;
         const 4294967301;
         const S3NLQ_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.778597698 UTC

[section ""data" . GHC.Read.$fRead[]_closure" {
     GHC.Read.$fRead[]_closure:
         const GHC.Read.$fRead[]_info;
         const 0;
 },
 sat_s3NHz_entry() //  [R1]
         { []
         }
     {offset
       c3X4g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X4h; else goto c3X4i;
       c3X4h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X4i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead[]_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHz_info" {
     sat_s3NHz_info:
         const sat_s3NHz_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2544;
 },
 sat_s3NHy_entry() //  [R1]
         { []
         }
     {offset
       c3X4n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X4o; else goto c3X4p;
       c3X4o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X4p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHy_info" {
     sat_s3NHy_info:
         const sat_s3NHy_entry;
         const 1;
         const 16;
 },
 sat_s3NHx_entry() //  [R1]
         { []
         }
     {offset
       c3X4u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X4v; else goto c3X4w;
       c3X4v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X4w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead[]_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHx_info" {
     sat_s3NHx_info:
         const sat_s3NHx_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2568;
 },
 sat_s3NHw_entry() //  [R1, R2]
         { []
         }
     {offset
       c3X4C: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead[]_$creadsPrec_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHw_info" {
     sat_s3NHw_info:
         const sat_s3NHw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Read.$fRead[]_entry() //  [R2]
         { []
         }
     {offset
       c3X4G: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3X4K; else goto c3X4J;
       c3X4K: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X4J: // global
           I64[Hp - 120] = sat_s3NHz_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s3NHy_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s3NHx_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3NHw_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 96;
           P64[Hp] = Hp - 120;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_info" {
     GHC.Read.$fRead[]_info:
         const GHC.Read.$fRead[]_entry;
         const 0;
         const 107374182414;
         const 4294967301;
         const S3NLQ_srt+2544;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.788771621 UTC

[section ""data" . GHC.Read.$fReadNonEmpty5_closure" {
     GHC.Read.$fReadNonEmpty5_closure:
         const GHC.Types.I#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.790801829 UTC

[section ""cstring" . GHC.Read.$fReadNonEmpty4_bytes" {
     GHC.Read.$fReadNonEmpty4_bytes:
         I8[] [58,124]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.79327095 UTC

[section ""data" . GHC.Read.$fReadNonEmpty3_closure" {
     GHC.Read.$fReadNonEmpty3_closure:
         const GHC.Read.$fReadNonEmpty3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadNonEmpty3_entry() //  [R1]
         { []
         }
     {offset
       c3X5h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X5i; else goto c3X5j;
       c3X5i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X5j: // global
           (_c3X5e::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3X5e::I64 == 0) goto c3X5g; else goto c3X5f;
       c3X5g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3X5f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3X5e::I64;
           R2 = GHC.Read.$fReadNonEmpty4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty3_info" {
     GHC.Read.$fReadNonEmpty3_info:
         const GHC.Read.$fReadNonEmpty3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.796839897 UTC

[section ""data" . GHC.Read.$fReadNonEmpty2_closure" {
     GHC.Read.$fReadNonEmpty2_closure:
         const Text.Read.Lex.Symbol_con_info;
         const GHC.Read.$fReadNonEmpty3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.802743268 UTC

[section ""data" . GHC.Read.$fReadNonEmpty1_closure" {
     GHC.Read.$fReadNonEmpty1_closure:
         const GHC.Read.$fReadNonEmpty1_info;
         const 0;
 },
 ds1_s3NHD_entry() //  [R1]
         { []
         }
     {offset
       c3X5A: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3X5B; else goto c3X5C;
       c3X5B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X5C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Read.$fReadNonEmpty5_closure+1;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3NHD_info" {
     ds1_s3NHD_info:
         const ds1_s3NHD_entry;
         const 1;
         const 16;
 },
 sat_s3NHN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3X67: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X6b; else goto c3X6a;
       c3X6b: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X6a: // global
           _s3NHF::P64 = P64[R1 + 7];
           _s3NHJ::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _s3NHJ::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3NHF::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHN_info" {
     sat_s3NHN_info:
         const sat_s3NHN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3NHO_entry() //  [R1, R2]
         { []
         }
     {offset
       c3X6c: // global
           _s3NHK::P64 = R2;
           _s3NHO::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3X6d; else goto c3X6e;
       c3X6e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X6g; else goto c3X6f;
       c3X6g: // global
           HpAlloc = 24;
           goto c3X6d;
       c3X6d: // global
           R2 = _s3NHK::P64;
           R1 = _s3NHO::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X6f: // global
           _s3NHA::P64 = P64[_s3NHO::P64 + 7];
           _s3NHF::P64 = P64[_s3NHO::P64 + 15];
           _s3NHJ::P64 = P64[_s3NHO::P64 + 23];
           I64[Hp - 16] = sat_s3NHN_info;
           P64[Hp - 8] = _s3NHF::P64;
           P64[Hp] = _s3NHJ::P64;
           R2 = _s3NHA::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = GHC.Read.$fReadNonEmpty5_closure+1;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Read.readListPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHO_info" {
     sat_s3NHO_info:
         const sat_s3NHO_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3NHR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3X6k: // global
           _s3NHJ::P64 = R2;
           _s3NHR::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3X6l; else goto c3X6m;
       c3X6m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3X6o; else goto c3X6n;
       c3X6o: // global
           HpAlloc = 32;
           goto c3X6l;
       c3X6l: // global
           R2 = _s3NHJ::P64;
           R1 = _s3NHR::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X6n: // global
           _s3NHA::P64 = P64[_s3NHR::P64 + 7];
           _s3NHF::P64 = P64[_s3NHR::P64 + 15];
           I64[Hp - 24] = sat_s3NHO_info;
           P64[Hp - 16] = _s3NHA::P64;
           P64[Hp - 8] = _s3NHF::P64;
           P64[Hp] = _s3NHJ::P64;
           I64[Sp - 8] = block_c3X6h_info;
           R3 = Hp - 23;
           R2 = GHC.Read.$fReadNonEmpty2_closure+5;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHR_info" {
     sat_s3NHR_info:
         const sat_s3NHR_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3NLQ_srt+2584;
 },
 _c3X6h() //  [R1]
         { []
         }
     {offset
       c3X6h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3X6r; else goto c3X6q;
       c3X6r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3X6q: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3X6h_info" {
     block_c3X6h_info:
         const _c3X6h;
         const 0;
         const 30;
 },
 sat_s3NHS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3X6s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3X6t; else goto c3X6u;
       c3X6t: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3X6u: // global
           I64[Sp - 32] = block_c3X5I_info;
           _s3NHA::P64 = P64[R1 + 6];
           _s3NHD::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s3NHA::P64;
           P64[Sp - 16] = _s3NHD::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3X6B; else goto c3X5J;
       u3X6B: // global
           call _c3X5I(R1) args: 0, res: 0, upd: 0;
       c3X5J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHS_info" {
     sat_s3NHS_info:
         const sat_s3NHS_entry;
         const 2;
         const 12884901899;
         const 8589934607;
         const S3NLQ_srt+2584;
 },
 _c3X5I() //  [R1]
         { []
         }
     {offset
       c3X5I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X6x; else goto c3X6w;
       c3X6x: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3X6w: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 5)) goto c3X6z; else goto c3X6A;
       c3X6z: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3X6A: // global
           I64[Hp - 16] = sat_s3NHR_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 15;
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3X5I_info" {
     block_c3X5I_info:
         const _c3X5I;
         const 3;
         const 12884901918;
         const S3NLQ_srt+2584;
 },
 GHC.Read.$fReadNonEmpty1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3X6C: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3X6G; else goto c3X6F;
       c3X6G: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3X6F: // global
           I64[Hp - 40] = ds1_s3NHD_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3NHS_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty1_info" {
     GHC.Read.$fReadNonEmpty1_info:
         const GHC.Read.$fReadNonEmpty1_entry;
         const 0;
         const 126100793861341198;
         const 12884901911;
         const S3NLQ_srt+2408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.820472908 UTC

[section ""data" . GHC.Read.$fReadNonEmpty_$creadsPrec_closure" {
     GHC.Read.$fReadNonEmpty_$creadsPrec_closure:
         const GHC.Read.$fReadNonEmpty_$creadsPrec_info;
         const 0;
 },
 sat_s3NHV_entry() //  [R1]
         { []
         }
     {offset
       c3X7p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X7q; else goto c3X7r;
       c3X7q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X7r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadNonEmpty1_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NHV_info" {
     sat_s3NHV_info:
         const sat_s3NHV_entry;
         const 2;
         const 4294967314;
         const S3NLQ_srt+2600;
 },
 GHC.Read.$fReadNonEmpty_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3X7s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3X7w; else goto c3X7v;
       c3X7w: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3X7v: // global
           I64[Hp - 24] = sat_s3NHV_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty_$creadsPrec_info" {
     GHC.Read.$fReadNonEmpty_$creadsPrec_info:
         const GHC.Read.$fReadNonEmpty_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3NLQ_srt+2600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.826959853 UTC

[section ""data" . GHC.Read.$fReadNonEmpty_$creadListPrec_closure" {
     GHC.Read.$fReadNonEmpty_$creadListPrec_closure:
         const GHC.Read.$fReadNonEmpty_$creadListPrec_info;
         const 0;
 },
 sat_s3NHX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3X7O: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadNonEmpty1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHX_info" {
     sat_s3NHX_info:
         const sat_s3NHX_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3NLQ_srt+2600;
 },
 GHC.Read.$fReadNonEmpty_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c3X7R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3X7V; else goto c3X7U;
       c3X7V: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X7U: // global
           I64[Hp - 8] = sat_s3NHX_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty_$creadListPrec_info" {
     GHC.Read.$fReadNonEmpty_$creadListPrec_info:
         const GHC.Read.$fReadNonEmpty_$creadListPrec_entry;
         const 0;
         const 1407379178520590;
         const 4294967301;
         const S3NLQ_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.833052387 UTC

[section ""data" . GHC.Read.$fReadNonEmpty_$creadList_closure" {
     GHC.Read.$fReadNonEmpty_$creadList_closure:
         const GHC.Read.$fReadNonEmpty_$creadList_info;
         const 0;
 },
 sat_s3NHZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3X8g: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadNonEmpty1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NHZ_info" {
     sat_s3NHZ_info:
         const sat_s3NHZ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3NLQ_srt+2600;
 },
 sat_s3NI0_entry() //  [R1]
         { []
         }
     {offset
       c3X8j: // global
           _s3NI0::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3X8k; else goto c3X8l;
       c3X8l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3X8n; else goto c3X8m;
       c3X8n: // global
           HpAlloc = 16;
           goto c3X8k;
       c3X8k: // global
           R1 = _s3NI0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X8m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NI0::P64;
           _s3NHY::P64 = P64[_s3NI0::P64 + 16];
           I64[Hp - 8] = sat_s3NHZ_info;
           P64[Hp] = _s3NHY::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NI0_info" {
     sat_s3NI0_info:
         const sat_s3NI0_entry;
         const 1;
         const 281479271677968;
         const S3NLQ_srt+2472;
 },
 GHC.Read.$fReadNonEmpty_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c3X8o: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3X8s; else goto c3X8r;
       c3X8s: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X8r: // global
           I64[Hp - 16] = sat_s3NI0_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty_$creadList_info" {
     GHC.Read.$fReadNonEmpty_$creadList_info:
         const GHC.Read.$fReadNonEmpty_$creadList_entry;
         const 0;
         const 2533279085363214;
         const 4294967301;
         const S3NLQ_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.84183552 UTC

[section ""data" . GHC.Read.$fReadNonEmpty_closure" {
     GHC.Read.$fReadNonEmpty_closure:
         const GHC.Read.$fReadNonEmpty_info;
         const 0;
 },
 sat_s3NI5_entry() //  [R1]
         { []
         }
     {offset
       c3X8M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X8N; else goto c3X8O;
       c3X8N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X8O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadNonEmpty_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NI5_info" {
     sat_s3NI5_info:
         const sat_s3NI5_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2616;
 },
 sat_s3NI4_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3X8U: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadNonEmpty1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NI4_info" {
     sat_s3NI4_info:
         const sat_s3NI4_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3NLQ_srt+2600;
 },
 sat_s3NI3_entry() //  [R1]
         { []
         }
     {offset
       c3X91: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X92; else goto c3X93;
       c3X92: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X93: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadNonEmpty_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NI3_info" {
     sat_s3NI3_info:
         const sat_s3NI3_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2624;
 },
 sat_s3NI2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3X99: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadNonEmpty_$creadsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NI2_info" {
     sat_s3NI2_info:
         const sat_s3NI2_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3NLQ_srt+2608;
 },
 GHC.Read.$fReadNonEmpty_entry() //  [R2]
         { []
         }
     {offset
       c3X9d: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3X9h; else goto c3X9g;
       c3X9h: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3X9g: // global
           I64[Hp - 112] = sat_s3NI5_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s3NI4_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s3NI3_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3NI2_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty_info" {
     GHC.Read.$fReadNonEmpty_info:
         const GHC.Read.$fReadNonEmpty_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S3NLQ_srt+2600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.851455044 UTC

[section ""cstring" . GHC.Read.$fReadArray4_bytes" {
     GHC.Read.$fReadArray4_bytes:
         I8[] [97,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.853887229 UTC

[section ""data" . GHC.Read.$fReadArray3_closure" {
     GHC.Read.$fReadArray3_closure:
         const GHC.Read.$fReadArray3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadArray3_entry() //  [R1]
         { []
         }
     {offset
       c3X9M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3X9N; else goto c3X9O;
       c3X9N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3X9O: // global
           (_c3X9J::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3X9J::I64 == 0) goto c3X9L; else goto c3X9K;
       c3X9L: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3X9K: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3X9J::I64;
           R2 = GHC.Read.$fReadArray4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray3_info" {
     GHC.Read.$fReadArray3_info:
         const GHC.Read.$fReadArray3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.857713854 UTC

[section ""data" . GHC.Read.$fReadArray_lexeme_closure" {
     GHC.Read.$fReadArray_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.Read.$fReadArray3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.864084582 UTC

[section ""data" . GHC.Read.$fReadArray1_closure" {
     GHC.Read.$fReadArray1_closure:
         const GHC.Read.$fReadArray1_info;
         const 0;
 },
 lvl2_s3NIb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Xa6: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3NIb_info" {
     lvl2_s3NIb_info:
         const lvl2_s3NIb_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3NLQ_srt+2640;
 },
 sat_s3NIk_entry() //  [R1]
         { []
         }
     {offset
       c3XaG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3XaH; else goto c3XaI;
       c3XaH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XaI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.array_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NIk_info" {
     sat_s3NIk_info:
         const sat_s3NIk_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+2648;
 },
 sat_s3NIl_entry() //  [R1, R2]
         { []
         }
     {offset
       c3XaJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3XaN; else goto c3XaM;
       c3XaN: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XaM: // global
           _s3NI6::P64 = P64[R1 + 7];
           _s3NId::P64 = P64[R1 + 15];
           _s3NIi::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_s3NIk_info;
           P64[Hp - 16] = _s3NI6::P64;
           P64[Hp - 8] = _s3NIi::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3NId::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NIl_info" {
     sat_s3NIl_info:
         const sat_s3NIl_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+2648;
 },
 sat_s3NIm_entry() //  [R1, R2]
         { []
         }
     {offset
       c3XaO: // global
           _s3NIi::P64 = R2;
           _s3NIm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3XaP; else goto c3XaQ;
       c3XaQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3XaS; else goto c3XaR;
       c3XaS: // global
           HpAlloc = 32;
           goto c3XaP;
       c3XaP: // global
           R2 = _s3NIi::P64;
           R1 = _s3NIm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XaR: // global
           _s3NI6::P64 = P64[_s3NIm::P64 + 7];
           _s3NIb::P64 = P64[_s3NIm::P64 + 15];
           _s3NId::P64 = P64[_s3NIm::P64 + 23];
           I64[Hp - 24] = sat_s3NIl_info;
           P64[Hp - 16] = _s3NI6::P64;
           P64[Hp - 8] = _s3NId::P64;
           P64[Hp] = _s3NIi::P64;
           R2 = _s3NIb::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = GHC.Read.$fReadArray2_closure+1;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 24;
           call GHC.Read.list_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NIm_info" {
     sat_s3NIm_info:
         const sat_s3NIm_entry;
         const 3;
         const 18014402804449288;
         const 4294967301;
         const S3NLQ_srt+2472;
 },
 sat_s3NIn_entry() //  [R1, R2]
         { []
         }
     {offset
       c3XaT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3XaX; else goto c3XaW;
       c3XaX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XaW: // global
           _s3NI6::P64 = P64[R1 + 7];
           _s3NI7::P64 = P64[R1 + 15];
           _s3NIb::P64 = P64[R1 + 23];
           _s3NId::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_s3NIm_info;
           P64[Hp - 16] = _s3NI6::P64;
           P64[Hp - 8] = _s3NIb::P64;
           P64[Hp] = _s3NId::P64;
           R5 = Hp - 23;
           R4 = GHC.Read.$fReadArray2_closure+1;
           R3 = _s3NI7::P64;
           R2 = _s3NI7::P64;
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NIn_info" {
     sat_s3NIn_info:
         const sat_s3NIn_entry;
         const 4;
         const 27021602059190280;
         const 4294967301;
         const S3NLQ_srt+2472;
 },
 sat_s3NIq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3XaY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3XaZ; else goto c3Xb0;
       c3XaZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Xb0: // global
           I64[Sp - 40] = block_c3Xae_info;
           _s3NI6::P64 = P64[R1 + 6];
           _s3NI7::P64 = P64[R1 + 14];
           _s3NIb::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 32] = _s3NI6::P64;
           P64[Sp - 24] = _s3NI7::P64;
           P64[Sp - 16] = _s3NIb::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Xbd; else goto c3Xaf;
       u3Xbd: // global
           call _c3Xae(R1) args: 0, res: 0, upd: 0;
       c3Xaf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NIq_info" {
     sat_s3NIq_info:
         const sat_s3NIq_entry;
         const 3;
         const 63191136566509576;
         const 8589934607;
         const S3NLQ_srt+2472;
 },
 _c3Xae() //  [R1]
         { []
         }
     {offset
       c3Xae: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Xb3; else goto c3Xb2;
       c3Xb3: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Xb2: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c3Xb5; else goto c3Xb9;
       c3Xb5: // global
           Hp = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Xb9: // global
           I64[Hp - 32] = sat_s3NIn_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_c3Xb6_info;
           R3 = Hp - 31;
           R2 = GHC.Read.$fReadArray_lexeme_closure+4;
           Sp = Sp + 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Xae_info" {
     block_c3Xae_info:
         const _c3Xae;
         const 4;
         const 63191136566509598;
         const S3NLQ_srt+2472;
 },
 _c3Xb6() //  [R1]
         { []
         }
     {offset
       c3Xb6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Xbc; else goto c3Xbb;
       c3Xbc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Xbb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Xb6_info" {
     block_c3Xb6_info:
         const _c3Xb6;
         const 0;
         const 30;
 },
 section ""relreadonly" . u3Xbj_srtd" {
     u3Xbj_srtd:
         const S3NLQ_srt+2408;
         const 33;
         const 8061452545;
 },
 GHC.Read.$fReadArray1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Xbe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Xbi; else goto c3Xbh;
       c3Xbi: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Xbh: // global
           I64[Hp - 48] = lvl2_s3NIb_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3NIq_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 46;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 22;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray1_info" {
     GHC.Read.$fReadArray1_info:
         const GHC.Read.$fReadArray1_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u3Xbj_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.884855751 UTC

[section ""data" . GHC.Read.$fReadArray_$creadsPrec_closure" {
     GHC.Read.$fReadArray_$creadsPrec_closure:
         const GHC.Read.$fReadArray_$creadsPrec_info;
         const 0;
 },
 sat_s3NIv_entry() //  [R1]
         { []
         }
     {offset
       c3Xc7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Xc8; else goto c3Xc9;
       c3Xc8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Xc9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadArray1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NIv_info" {
     sat_s3NIv_info:
         const sat_s3NIv_entry;
         const 4;
         const 4294967311;
         const S3NLQ_srt+2664;
 },
 GHC.Read.$fReadArray_$creadsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Xca: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Xce; else goto c3Xcd;
       c3Xce: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray_$creadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Xcd: // global
           I64[Hp - 40] = sat_s3NIv_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray_$creadsPrec_info" {
     GHC.Read.$fReadArray_$creadsPrec_info:
         const GHC.Read.$fReadArray_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3NLQ_srt+2664;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.893686801 UTC

[section ""data" . GHC.Read.$fReadArray_$creadListPrec_closure" {
     GHC.Read.$fReadArray_$creadListPrec_closure:
         const GHC.Read.$fReadArray_$creadListPrec_info;
         const 0;
 },
 sat_s3NIz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Xcw: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadArray1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NIz_info" {
     sat_s3NIz_info:
         const sat_s3NIz_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+2664;
 },
 GHC.Read.$fReadArray_$creadListPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Xcz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3XcD; else goto c3XcC;
       c3XcD: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3XcC: // global
           I64[Hp - 24] = sat_s3NIz_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 22;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray_$creadListPrec_info" {
     GHC.Read.$fReadArray_$creadListPrec_info:
         const GHC.Read.$fReadArray_$creadListPrec_entry;
         const 0;
         const 360287974484606990;
         const 12884901911;
         const S3NLQ_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.904096145 UTC

[section ""data" . GHC.Read.$fReadArray_$creadList_closure" {
     GHC.Read.$fReadArray_$creadList_closure:
         const GHC.Read.$fReadArray_$creadList_info;
         const 0;
 },
 sat_s3NID_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3XcY: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadArray1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NID_info" {
     sat_s3NID_info:
         const sat_s3NID_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+2664;
 },
 sat_s3NIE_entry() //  [R1]
         { []
         }
     {offset
       c3Xd1: // global
           _s3NIE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Xd2; else goto c3Xd3;
       c3Xd3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Xd5; else goto c3Xd4;
       c3Xd5: // global
           HpAlloc = 32;
           goto c3Xd2;
       c3Xd2: // global
           R1 = _s3NIE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Xd4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3NIE::P64;
           _s3NIA::P64 = P64[_s3NIE::P64 + 16];
           _s3NIB::P64 = P64[_s3NIE::P64 + 24];
           _s3NIC::P64 = P64[_s3NIE::P64 + 32];
           I64[Hp - 24] = sat_s3NID_info;
           P64[Hp - 16] = _s3NIA::P64;
           P64[Hp - 8] = _s3NIB::P64;
           P64[Hp] = _s3NIC::P64;
           R2 = Hp - 22;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NIE_info" {
     sat_s3NIE_info:
         const sat_s3NIE_entry;
         const 3;
         const 72057598332895247;
         const S3NLQ_srt+2472;
 },
 GHC.Read.$fReadArray_$creadList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Xd6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Xda; else goto c3Xd9;
       c3Xda: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Xd9: // global
           I64[Hp - 32] = sat_s3NIE_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray_$creadList_info" {
     GHC.Read.$fReadArray_$creadList_info:
         const GHC.Read.$fReadArray_$creadList_entry;
         const 0;
         const 648518350636318734;
         const 12884901911;
         const S3NLQ_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.915063464 UTC

[section ""data" . GHC.Read.$fReadArray_closure" {
     GHC.Read.$fReadArray_closure:
         const GHC.Read.$fReadArray_info;
         const 0;
 },
 sat_s3NIL_entry() //  [R1]
         { []
         }
     {offset
       c3Xdu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Xdv; else goto c3Xdw;
       c3Xdv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Xdw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadArray_$creadListPrec_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NIL_info" {
     sat_s3NIL_info:
         const sat_s3NIL_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+2680;
 },
 sat_s3NIK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3XdC: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadArray1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NIK_info" {
     sat_s3NIK_info:
         const sat_s3NIK_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3NLQ_srt+2664;
 },
 sat_s3NIJ_entry() //  [R1]
         { []
         }
     {offset
       c3XdJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3XdK; else goto c3XdL;
       c3XdK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XdL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadArray_$creadList_entry(R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NIJ_info" {
     sat_s3NIJ_info:
         const sat_s3NIJ_entry;
         const 3;
         const 4294967311;
         const S3NLQ_srt+2688;
 },
 sat_s3NII_entry() //  [R1, R2]
         { []
         }
     {offset
       c3XdR: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadArray_$creadsPrec_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3NII_info" {
     sat_s3NII_info:
         const sat_s3NII_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3NLQ_srt+2672;
 },
 GHC.Read.$fReadArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3XdV: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c3XdZ; else goto c3XdY;
       c3XdZ: // global
           HpAlloc = 184;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3XdY: // global
           I64[Hp - 176] = sat_s3NIL_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_s3NIK_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_s3NIJ_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = sat_s3NII_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           P64[Hp - 8] = Hp - 134;
           P64[Hp] = Hp - 176;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray_info" {
     GHC.Read.$fReadArray_info:
         const GHC.Read.$fReadArray_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const S3NLQ_srt+2664;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.929314608 UTC

[section ""data" . lvl1_r3N5M_closure" {
     lvl1_r3N5M_closure:
         const lvl1_r3N5M_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3N5M_entry() //  [R1]
         { []
         }
     {offset
       c3Xet: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Xeu; else goto c3Xev;
       c3Xeu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Xev: // global
           (_c3Xeq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Xeq::I64 == 0) goto c3Xes; else goto c3Xer;
       c3Xes: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Xer: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Xeq::I64;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Read.lexLitChar_removeNulls_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r3N5M_info" {
     lvl1_r3N5M_info:
         const lvl1_r3N5M_entry;
         const 0;
         const 4294967317;
         const S3NLQ_srt+2704;
 },
 section ""data" . GHC.Read.lexLitChar_removeNulls_closure" {
     GHC.Read.lexLitChar_removeNulls_closure:
         const GHC.Read.lexLitChar_removeNulls_info;
         const 0;
 },
 sat_s3NIT_entry() //  [R1]
         { []
         }
     {offset
       c3XeR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3XeS; else goto c3XeT;
       c3XeS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XeT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.lexLitChar_removeNulls_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NIT_info" {
     sat_s3NIT_info:
         const sat_s3NIT_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2704;
 },
 sat_s3NJ0_entry() //  [R1]
         { []
         }
     {offset
       c3Xfc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Xfd; else goto c3Xfe;
       c3Xfd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Xfe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.lexLitChar_removeNulls_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NJ0_info" {
     sat_s3NJ0_info:
         const sat_s3NJ0_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2704;
 },
 GHC.Read.lexLitChar_removeNulls_entry() //  [R2]
         { []
         }
     {offset
       c3Xfj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Xfk; else goto u3XfN;
       c3Xfk: // global
           R2 = R2;
           R1 = GHC.Read.lexLitChar_removeNulls_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u3XfN: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c3Xex() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar_removeNulls_info" {
     GHC.Read.lexLitChar_removeNulls_info:
         const GHC.Read.lexLitChar_removeNulls_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3NLQ_srt+2704;
 },
 _c3Xex() //  []
         { []
         }
     {offset
       c3Xex: // global
           _s3NIM::P64 = P64[Sp];
           I64[Sp] = block_c3XeA_info;
           R1 = _s3NIM::P64;
           if (R1 & 7 != 0) goto u3XfP; else goto c3XeB;
       u3XfP: // global
           call _c3XeA(R1) args: 0, res: 0, upd: 0;
       c3XeB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3XeA() //  [R1]
         { []
         }
     {offset
       c3XeA: // global
           if (R1 & 7 == 1) goto c3Xfg; else goto c3Xfh;
       c3Xfg: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Xfh: // global
           I64[Sp - 8] = block_c3XeG_info;
           _s3NIP::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3NIP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3XfQ; else goto c3XeH;
       u3XfQ: // global
           call _c3XeG(R1) args: 0, res: 0, upd: 0;
       c3XeH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XeA_info" {
     block_c3XeA_info:
         const _c3XeA;
         const 0;
         const 12884901918;
         const S3NLQ_srt+2704;
 },
 _c3XeG() //  [R1]
         { []
         }
     {offset
       c3XeG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Xfr; else goto c3Xfq;
       c3Xfr: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Xfq: // global
           _s3NIP::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 92) goto c3Xfv; else goto c3Xfu;
       c3Xfv: // global
           Hp = Hp - 48;
           I64[Sp] = block_c3XeV_info;
           _s3NIQ::P64 = R1;
           R1 = _s3NIP::P64;
           P64[Sp + 8] = _s3NIQ::P64;
           if (R1 & 7 != 0) goto u3XfR; else goto c3XeW;
       u3XfR: // global
           call _c3XeV(R1) args: 0, res: 0, upd: 0;
       c3XeW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3Xfu: // global
           I64[Hp - 40] = sat_s3NIT_info;
           P64[Hp - 24] = _s3NIP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XeG_info" {
     block_c3XeG_info:
         const _c3XeG;
         const 1;
         const 12884901918;
         const S3NLQ_srt+2704;
 },
 _c3XeV() //  [R1]
         { []
         }
     {offset
       c3XeV: // global
           if (R1 & 7 == 1) goto c3Xfz; else goto c3XfE;
       c3Xfz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3XfC; else goto c3XfB;
       c3XfC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3XfB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = lvl1_r3N5M_closure;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3XfE: // global
           I64[Sp - 16] = block_c3Xf1_info;
           _s3NIU::P64 = R1;
           _s3NIW::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s3NIW::P64;
           P64[Sp] = _s3NIU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3XfS; else goto c3Xf2;
       u3XfS: // global
           call _c3Xf1(R1) args: 0, res: 0, upd: 0;
       c3Xf2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XeV_info" {
     block_c3XeV_info:
         const _c3XeV;
         const 1;
         const 12884901918;
         const S3NLQ_srt+2704;
 },
 _c3Xf1() //  [R1]
         { []
         }
     {offset
       c3Xf1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3XfH; else goto c3XfG;
       c3XfH: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3XfG: // global
           if (I64[R1 + 7] == 38) goto c3XfL; else goto c3XfK;
       c3XfL: // global
           Hp = Hp - 48;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 24;
           call _c3Xex() args: 0, res: 0, upd: 0;
       c3XfK: // global
           I64[Hp - 40] = sat_s3NJ0_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Xf1_info" {
     block_c3Xf1_info:
         const _c3Xf1;
         const 3;
         const 12884901918;
         const S3NLQ_srt+2704;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.947998351 UTC

[section ""data" . GHC.Read.lexLitChar4_closure" {
     GHC.Read.lexLitChar4_closure:
         const GHC.Read.lexLitChar4_info;
         const 0;
 },
 sat_s3NJ2_entry() //  [R1]
         { []
         }
     {offset
       c3XgT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3XgU; else goto c3XgV;
       c3XgU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XgV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.lexLitChar_removeNulls_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3NJ2_info" {
     sat_s3NJ2_info:
         const sat_s3NJ2_entry;
         const 1;
         const 4294967312;
         const S3NLQ_srt+2704;
 },
 GHC.Read.lexLitChar4_entry() //  [R2]
         { []
         }
     {offset
       c3XgX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Xh1; else goto c3Xh0;
       c3Xh1: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Read.lexLitChar4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Xh0: // global
           I64[Hp - 40] = sat_s3NJ2_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar4_info" {
     GHC.Read.lexLitChar4_info:
         const GHC.Read.lexLitChar4_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S3NLQ_srt+2704;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.954042399 UTC

[section ""data" . GHC.Read.lexLitChar3_closure" {
     GHC.Read.lexLitChar3_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const GHC.Read.lexLitChar4_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.956280694 UTC

[section ""data" . GHC.Read.lexLitChar2_closure" {
     GHC.Read.lexLitChar2_closure:
         const GHC.Read.lexLitChar2_info;
         const 0;
 },
 GHC.Read.lexLitChar2_entry() //  []
         { []
         }
     {offset
       c3Xhh: // global
           R1 = GHC.Read.lexLitChar3_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar2_info" {
     GHC.Read.lexLitChar2_info:
         const GHC.Read.lexLitChar2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.960630042 UTC

[section ""data" . GHC.Read.lexLitChar1_closure" {
     GHC.Read.lexLitChar1_closure:
         const GHC.Read.lexLitChar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.lexLitChar1_entry() //  [R1]
         { []
         }
     {offset
       c3Xhy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Xhz; else goto c3XhA;
       c3Xhz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XhA: // global
           (_c3Xhs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Xhs::I64 == 0) goto c3Xhu; else goto c3Xht;
       c3Xhu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Xht: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Xhs::I64;
           I64[Sp - 24] = block_c3Xhv_info;
           R2 = GHC.Read.lexLitChar2_closure+1;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar1_info" {
     GHC.Read.lexLitChar1_info:
         const GHC.Read.lexLitChar1_entry;
         const 0;
         const 30064771093;
         const S3NLQ_srt+2736;
 },
 _c3Xhv() //  [R1]
         { []
         }
     {offset
       c3Xhv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3XhD; else goto c3XhC;
       c3XhD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3XhC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Xhv_info" {
     block_c3Xhv_info:
         const _c3Xhv;
         const 0;
         const 4294967326;
         const S3NLQ_srt+2736;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.967243519 UTC

[section ""data" . GHC.Read.lexLitChar_closure" {
     GHC.Read.lexLitChar_closure:
         const GHC.Read.lexLitChar_info;
         const 0;
 },
 GHC.Read.lexLitChar_entry() //  [R2]
         { []
         }
     {offset
       c3XhS: // global
           R3 = R2;
           R2 = GHC.Read.lexLitChar1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar_info" {
     GHC.Read.lexLitChar_info:
         const GHC.Read.lexLitChar_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3NLQ_srt+2760;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.973229143 UTC

[section ""data" . GHC.Read.C:Read_closure" {
     GHC.Read.C:Read_closure:
         const GHC.Read.C:Read_info;
 },
 GHC.Read.C:Read_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Xi4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Xi8; else goto c3Xi7;
       c3Xi8: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.C:Read_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Xi7: // global
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.C:Read_info" {
     GHC.Read.C:Read_info:
         const GHC.Read.C:Read_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.979062741 UTC

[section ""cstring" . i3SXE_str" {
     i3SXE_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,100,46,67,58,82,101,97,100]
 },
 GHC.Read.C:Read_con_entry() //  [R1]
         { []
         }
     {offset
       c3Xie: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.C:Read_con_info" {
     GHC.Read.C:Read_con_info:
         const GHC.Read.C:Read_con_entry;
         const 4;
         const 1;
         const i3SXE_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:33.987773102 UTC

[section ""relreadonly" . S3NLQ_srt" {
     S3NLQ_srt:
         const Text.Read.Lex.$whsLex_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen1_closure;
         const GHC.Read.readParen_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const GHC.Read.readLitChar1_closure;
         const Text.Read.Lex.lex1_closure;
         const GHC.Read.$fReadLexeme1_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const GHC.Read.$fReadGeneralCategory36_closure;
         const GHC.Read.choose2_closure;
         const GHC.Read.choose1_closure;
         const Text.Read.Lex.expect1_closure;
         const GHC.Read.expectP1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.Read.readField_lexeme_closure;
         const GHC.Read.$wreadField_closure;
         const GHC.Read.readField1_closure;
         const GHC.Read.readSymField_lexeme_closure;
         const GHC.Read.$wreadSymField_closure;
         const GHC.Read.readSymField_lexeme1_closure;
         const GHC.Read.readSymField1_closure;
         const GHC.Read.$fRead(,)_lexeme_closure;
         const GHC.Read.$fRead(,)2_closure;
         const GHC.Read.$fRead(,,,)2_closure;
         const GHC.Read.$fRead(,,,,,,,)2_closure;
         const GHC.Read.list3_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,)1_closure;
         const GHC.Read.$fRead(,,,)1_closure;
         const GHC.Read.$fRead(,,)1_closure;
         const GHC.Read.$fRead(,)1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.Read.Lex.expect2_closure;
         const GHC.Read.list_lexeme_closure;
         const GHC.Read.list_closure;
         const GHC.Read.readListPrecDefault_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,)_closure;
         const GHC.Read.$fRead(,,,,)1_closure;
         const GHC.Read.$fRead(,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,)_closure;
         const GHC.Read.$fRead(,,,)1_closure;
         const GHC.Read.$fRead(,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,)_closure;
         const GHC.Read.$fRead(,,)1_closure;
         const GHC.Read.$fRead(,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,)_$creadList_closure;
         const GHC.Read.$fRead(,,)_closure;
         const GHC.Read.$fRead(,)1_closure;
         const GHC.Read.$fRead(,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,)_$creadList_closure;
         const GHC.Read.$fRead(,)_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fReadLexeme1_closure;
         const Text.Read.Lex.expect2_closure;
         const GHC.Read.$fReadLexeme6_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const GHC.Read.$fReadLexeme_lvl116_closure;
         const GHC.Read.$fReadLexeme_k_closure;
         const GHC.Read.$fReadLexeme4_closure;
         const GHC.Read.$fReadLexeme3_closure;
         const GHC.Read.$fReadLexeme_$creadListPrec_closure;
         const GHC.Read.$fReadLexeme2_closure;
         const GHC.Read.$dmreadList_closure;
         const GHC.Read.$fReadInteger_$sreadNumber_closure;
         const GHC.Read.$fReadDouble_$sreadNumber_closure;
         const GHC.Read.$fReadFloat_$sreadNumber_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const GHC.Read.readNumber1_closure;
         const GHC.Read.$fReadGeneralCategory32_closure;
         const GHC.Read.$fReadGeneralCategory36_closure;
         const GHC.Read.$fReadGeneralCategory31_closure;
         const GHC.Read.$fReadGeneralCategory37_closure;
         const GHC.Read.$fReadGeneralCategory30_closure;
         const GHC.Read.$fReadGeneralCategory41_closure;
         const GHC.Read.$fReadGeneralCategory29_closure;
         const GHC.Read.$fReadGeneralCategory45_closure;
         const GHC.Read.$fReadGeneralCategory28_closure;
         const GHC.Read.$fReadGeneralCategory49_closure;
         const GHC.Read.$fReadGeneralCategory27_closure;
         const GHC.Read.$fReadGeneralCategory53_closure;
         const GHC.Read.$fReadGeneralCategory26_closure;
         const GHC.Read.$fReadGeneralCategory57_closure;
         const GHC.Read.$fReadGeneralCategory25_closure;
         const GHC.Read.$fReadGeneralCategory61_closure;
         const GHC.Read.$fReadGeneralCategory24_closure;
         const GHC.Read.$fReadGeneralCategory65_closure;
         const GHC.Read.$fReadGeneralCategory23_closure;
         const GHC.Read.$fReadGeneralCategory69_closure;
         const GHC.Read.$fReadGeneralCategory22_closure;
         const GHC.Read.$fReadGeneralCategory73_closure;
         const GHC.Read.$fReadGeneralCategory21_closure;
         const GHC.Read.$fReadGeneralCategory77_closure;
         const GHC.Read.$fReadGeneralCategory20_closure;
         const GHC.Read.$fReadGeneralCategory81_closure;
         const GHC.Read.$fReadGeneralCategory19_closure;
         const GHC.Read.$fReadGeneralCategory85_closure;
         const GHC.Read.$fReadGeneralCategory18_closure;
         const GHC.Read.$fReadGeneralCategory89_closure;
         const GHC.Read.$fReadGeneralCategory17_closure;
         const GHC.Read.$fReadGeneralCategory93_closure;
         const GHC.Read.$fReadGeneralCategory16_closure;
         const GHC.Read.$fReadGeneralCategory97_closure;
         const GHC.Read.$fReadGeneralCategory36_closure;
         const GHC.Read.$fReadGeneralCategory15_closure;
         const GHC.Read.$fReadGeneralCategory101_closure;
         const GHC.Read.$fReadGeneralCategory14_closure;
         const GHC.Read.$fReadGeneralCategory105_closure;
         const GHC.Read.$fReadGeneralCategory13_closure;
         const GHC.Read.$fReadGeneralCategory109_closure;
         const GHC.Read.$fReadGeneralCategory12_closure;
         const GHC.Read.$fReadGeneralCategory113_closure;
         const GHC.Read.$fReadGeneralCategory11_closure;
         const GHC.Read.$fReadGeneralCategory117_closure;
         const GHC.Read.$fReadGeneralCategory10_closure;
         const GHC.Read.$fReadGeneralCategory121_closure;
         const GHC.Read.$fReadGeneralCategory9_closure;
         const GHC.Read.$fReadGeneralCategory125_closure;
         const GHC.Read.$fReadGeneralCategory8_closure;
         const GHC.Read.$fReadGeneralCategory129_closure;
         const GHC.Read.$fReadGeneralCategory7_closure;
         const GHC.Read.$fReadGeneralCategory133_closure;
         const GHC.Read.$fReadGeneralCategory6_closure;
         const GHC.Read.$fReadGeneralCategory137_closure;
         const GHC.Read.$fReadGeneralCategory5_closure;
         const GHC.Read.$fReadGeneralCategory141_closure;
         const GHC.Read.$fReadGeneralCategory4_closure;
         const GHC.Read.$fReadGeneralCategory145_closure;
         const GHC.Read.$fReadGeneralCategory3_closure;
         const GHC.Read.$fReadGeneralCategory149_closure;
         const GHC.Read.$fReadGeneralCategory2_closure;
         const GHC.Read.list3_closure;
         const GHC.Read.$fReadGeneralCategory_$creadsPrec_closure;
         const GHC.Read.$fReadGeneralCategory1_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fReadGeneralCategory_$creadListPrec_closure;
         const GHC.Read.$fReadGeneralCategory153_closure;
         const GHC.Read.$fRead()_$creadsPrec_closure;
         const GHC.Read.$fRead()1_closure;
         const GHC.Read.$fRead()_$creadListPrec_closure;
         const GHC.Read.$fRead()6_closure;
         const GHC.Real.%_closure;
         const GHC.Read.$fReadRatio2_closure;
         const GHC.Read.$fReadRatio1_closure;
         const GHC.Read.$fReadRatio_$creadsPrec_closure;
         const GHC.Read.$fReadRatio_$creadListPrec_closure;
         const GHC.Read.$fReadRatio_$creadList_closure;
         const GHC.Read.$fReadRatio_closure;
         const GHC.Read.$fReadMaybe_lexeme_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.Read.$fReadMaybe_lexeme1_closure;
         const GHC.Read.$fReadMaybe1_closure;
         const GHC.Read.$fReadMaybe_$creadsPrec_closure;
         const GHC.Read.$fReadMaybe_$creadListPrec_closure;
         const GHC.Read.$fReadMaybe_$creadList_closure;
         const GHC.Read.$fReadMaybe_closure;
         const GHC.Read.$fReadOrdering3_closure;
         const GHC.Read.$fReadOrdering5_closure;
         const GHC.Read.$fReadOrdering7_closure;
         const Text.Read.Lex.expect2_closure;
         const GHC.Read.$w$creadPrec2_closure;
         const GHC.Read.$fReadOrdering2_closure;
         const GHC.Read.$fReadOrdering_$creadsPrec_closure;
         const GHC.Read.$fReadOrdering1_closure;
         const GHC.Read.$fReadOrdering_$creadListPrec_closure;
         const GHC.Read.$fReadOrdering9_closure;
         const GHC.Read.$fReadBool3_closure;
         const GHC.Read.$fReadBool5_closure;
         const GHC.Read.$w$creadPrec_closure;
         const GHC.Read.$fReadBool2_closure;
         const GHC.Read.$fReadBool_$creadsPrec_closure;
         const GHC.Read.$fReadBool1_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fReadBool_$creadListPrec_closure;
         const GHC.Read.$fReadBool7_closure;
         const GHC.Read.$w$creadPrec1_closure;
         const GHC.Read.$fReadChar7_closure;
         const Text.Read.Lex.numberToInteger_closure;
         const GHC.Read.$fReadInteger2_closure;
         const GHC.Read.$fReadInteger_$creadsPrec_closure;
         const GHC.Read.$fReadInteger1_closure;
         const GHC.Read.$fReadInteger_$creadListPrec_closure;
         const GHC.Read.$fReadInteger3_closure;
         const GHC.Read.$fReadWord64_$creadsPrec_closure;
         const GHC.Read.$fReadWord13_closure;
         const GHC.Read.$fReadWord12_closure;
         const GHC.Read.$fReadWord11_closure;
         const GHC.Read.$fReadWord64_$creadList_closure;
         const GHC.Read.$fReadWord_$creadsPrec_closure;
         const GHC.Read.$fReadWord3_closure;
         const GHC.Read.$fReadWord2_closure;
         const GHC.Read.$fReadWord1_closure;
         const GHC.Read.$fReadWord_$creadList_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadDouble_x1_closure;
         const GHC.Read.$fReadDouble_x_closure;
         const GHC.Float.rationalToDouble_closure;
         const Text.Read.Lex.$wnumberToRangedRational_closure;
         const GHC.Read.$fReadDouble_$sconvertFrac_closure;
         const GHC.Read.$fReadDouble2_closure;
         const GHC.Read.$fReadDouble3_closure;
         const GHC.Read.$fReadDouble4_closure;
         const GHC.Read.$fReadDouble6_closure;
         const GHC.Read.$fReadFloat_x1_closure;
         const GHC.Read.$fReadFloat_x_closure;
         const GHC.Float.rationalToFloat_closure;
         const GHC.Read.$fReadFloat_$sconvertFrac_closure;
         const GHC.Read.$fReadFloat2_closure;
         const GHC.Read.$fReadFloat3_closure;
         const GHC.Read.$fReadDouble_$creadsPrec_closure;
         const GHC.Read.$fReadDouble1_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fReadDouble_$creadListPrec_closure;
         const GHC.Read.$fReadDouble8_closure;
         const GHC.Read.$fReadFloat_$creadsPrec_closure;
         const GHC.Read.$fReadFloat1_closure;
         const GHC.Read.$fReadFloat_$creadListPrec_closure;
         const GHC.Read.$fReadFloat4_closure;
         const GHC.Read.$fReadInt_$creadsPrec_closure;
         const GHC.Read.$fReadInt1_closure;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const GHC.Read.$fReadInt3_closure;
         const GHC.Read.$fReadWord32_$creadsPrec_closure;
         const GHC.Read.$fReadWord10_closure;
         const GHC.Read.$fReadWord9_closure;
         const GHC.Read.$fReadWord7_closure;
         const GHC.Read.$fReadWord32_$creadList_closure;
         const GHC.Read.$fReadWord16_$creadsPrec_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const GHC.Read.$fReadWord6_closure;
         const GHC.Read.$fReadWord5_closure;
         const GHC.Read.$fReadWord4_closure;
         const GHC.Read.$fReadWord16_$creadList_closure;
         const GHC.Read.$fReadWord8_$creadsPrec_closure;
         const GHC.Read.$fReadWord17_closure;
         const GHC.Read.$fReadWord15_closure;
         const GHC.Read.$fReadWord14_closure;
         const GHC.Read.$fReadWord8_$creadList_closure;
         const GHC.Read.$fReadChar7_closure;
         const GHC.Read.list3_closure;
         const GHC.Read.$fReadChar_$creadsPrec_closure;
         const GHC.Read.$fReadChar6_closure;
         const GHC.Read.$fReadChar5_closure;
         const Text.Read.Lex.expect2_closure;
         const GHC.Read.$fReadChar2_closure;
         const GHC.Read.$fReadChar8_closure;
         const GHC.Read.$fReadChar1_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec1_closure;
         const GHC.Read.$fRead[]2_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec_closure;
         const GHC.Read.$fRead[]1_closure;
         const GHC.Read.$fRead[]_$s$creadsPrec1_closure;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const GHC.Read.$fRead[]_$s$creadsPrec_closure;
         const GHC.Read.$fRead[]_$s$creadsPrec2_closure;
         const GHC.Read.$fRead[]_$creadListPrec_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec2_closure;
         const GHC.Read.$fRead[]3_closure;
         const GHC.Read.$fRead[]_$creadList_closure;
         const GHC.Read.$fRead[]_closure;
         const GHC.Read.$fReadNonEmpty2_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.Read.$fReadNonEmpty1_closure;
         const GHC.Read.$fReadNonEmpty_$creadsPrec_closure;
         const GHC.Read.$fReadNonEmpty_$creadListPrec_closure;
         const GHC.Read.$fReadNonEmpty_$creadList_closure;
         const GHC.Read.$fReadNonEmpty_closure;
         const GHC.Read.$fRead(,)1_closure;
         const GHC.Arr.array_closure;
         const GHC.Read.$fReadArray_lexeme_closure;
         const GHC.Read.$fReadArray1_closure;
         const GHC.Read.$fReadArray_$creadsPrec_closure;
         const GHC.Read.$fReadArray_$creadListPrec_closure;
         const GHC.Read.$fReadArray_$creadList_closure;
         const GHC.Read.$fReadArray_closure;
         const GHC.Read.lexLitChar_removeNulls_closure;
         const lvl1_r3N5M_closure;
         const GHC.Read.lexLitChar4_closure;
         const GHC.Read.lexLitChar3_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const GHC.Read.lexLitChar2_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const GHC.Read.lexLitChar1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.45954728 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:58:51.461460507 UTC

[section ""data" . GHC.Read.readsPrec_closure" {
     GHC.Read.readsPrec_closure:
         const GHC.Read.readsPrec_info;
 },
 GHC.Read.readsPrec_entry() //  [R2]
         { []
         }
     {offset
       c3XVL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3XVM; else goto c3XVN;
       c3XVM: // global
           R2 = R2;
           R1 = GHC.Read.readsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XVN: // global
           I64[Sp - 8] = block_c3XVI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3XVR; else goto c3XVJ;
       u3XVR: // global
           call _c3XVI(R1) args: 0, res: 0, upd: 0;
       c3XVJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readsPrec_info" {
     GHC.Read.readsPrec_info:
         const GHC.Read.readsPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3XVI() //  [R1]
         { []
         }
     {offset
       c3XVI: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XVI_info" {
     block_c3XVI_info:
         const _c3XVI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.466883036 UTC

[section ""data" . GHC.Read.readList_closure" {
     GHC.Read.readList_closure:
         const GHC.Read.readList_info;
 },
 GHC.Read.readList_entry() //  [R2]
         { []
         }
     {offset
       c3XW9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3XWa; else goto c3XWb;
       c3XWa: // global
           R2 = R2;
           R1 = GHC.Read.readList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XWb: // global
           I64[Sp - 8] = block_c3XW6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3XWf; else goto c3XW7;
       u3XWf: // global
           call _c3XW6(R1) args: 0, res: 0, upd: 0;
       c3XW7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readList_info" {
     GHC.Read.readList_info:
         const GHC.Read.readList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3XW6() //  [R1]
         { []
         }
     {offset
       c3XW6: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XW6_info" {
     block_c3XW6_info:
         const _c3XW6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.472047198 UTC

[section ""data" . GHC.Read.readPrec_closure" {
     GHC.Read.readPrec_closure:
         const GHC.Read.readPrec_info;
 },
 GHC.Read.readPrec_entry() //  [R2]
         { []
         }
     {offset
       c3XWx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3XWy; else goto c3XWz;
       c3XWy: // global
           R2 = R2;
           R1 = GHC.Read.readPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XWz: // global
           I64[Sp - 8] = block_c3XWu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3XWD; else goto c3XWv;
       u3XWD: // global
           call _c3XWu(R1) args: 0, res: 0, upd: 0;
       c3XWv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readPrec_info" {
     GHC.Read.readPrec_info:
         const GHC.Read.readPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3XWu() //  [R1]
         { []
         }
     {offset
       c3XWu: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XWu_info" {
     block_c3XWu_info:
         const _c3XWu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.477546311 UTC

[section ""data" . GHC.Read.readListPrec_closure" {
     GHC.Read.readListPrec_closure:
         const GHC.Read.readListPrec_info;
 },
 GHC.Read.readListPrec_entry() //  [R2]
         { []
         }
     {offset
       c3XWV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3XWW; else goto c3XWX;
       c3XWW: // global
           R2 = R2;
           R1 = GHC.Read.readListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XWX: // global
           I64[Sp - 8] = block_c3XWS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3XX1; else goto c3XWT;
       u3XX1: // global
           call _c3XWS(R1) args: 0, res: 0, upd: 0;
       c3XWT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readListPrec_info" {
     GHC.Read.readListPrec_info:
         const GHC.Read.readListPrec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3XWS() //  [R1]
         { []
         }
     {offset
       c3XWS: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XWS_info" {
     block_c3XWS_info:
         const _c3XWS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.483743465 UTC

[section ""data" . $dmreadListPrec1_r3N5i_closure" {
     $dmreadListPrec1_r3N5i_closure:
         const $dmreadListPrec1_r3N5i_info;
 },
 sat_s3XiM_entry() //  [R1]
         { []
         }
     {offset
       c3XXk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3XXl; else goto c3XXm;
       c3XXl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XXm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XiM_info" {
     sat_s3XiM_info:
         const sat_s3XiM_entry;
         const 1;
         const 16;
 },
 $dmreadListPrec1_r3N5i_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3XXq: // global
           _s3XiL::P64 = R4;
           _s3XiK::P64 = R3;
           _s3XiJ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3XXr; else goto c3XXs;
       c3XXs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3XXu; else goto c3XXt;
       c3XXu: // global
           HpAlloc = 24;
           goto c3XXr;
       c3XXr: // global
           R4 = _s3XiL::P64;
           R3 = _s3XiK::P64;
           R2 = _s3XiJ::P64;
           R1 = $dmreadListPrec1_r3N5i_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3XXt: // global
           I64[Hp - 16] = sat_s3XiM_info;
           P64[Hp] = _s3XiJ::P64;
           I64[Sp - 8] = block_c3XXn_info;
           R3 = _s3XiL::P64;
           R2 = Hp - 16;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $dmreadListPrec1_r3N5i_info" {
     $dmreadListPrec1_r3N5i_info:
         const $dmreadListPrec1_r3N5i_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3XXn() //  [R1]
         { []
         }
     {offset
       c3XXn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3XXx; else goto c3XXw;
       c3XXx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3XXw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XXn_info" {
     block_c3XXn_info:
         const _c3XXn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.491160088 UTC

[section ""data" . GHC.Read.$dmreadListPrec_closure" {
     GHC.Read.$dmreadListPrec_closure:
         const GHC.Read.$dmreadListPrec_info;
 },
 GHC.Read.$dmreadListPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3XXT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmreadListPrec1_r3N5i_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$dmreadListPrec_info" {
     GHC.Read.$dmreadListPrec_info:
         const GHC.Read.$dmreadListPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.499105597 UTC

[section ""data" . $dmreadPrec1_r3N5j_closure" {
     $dmreadPrec1_r3N5j_closure:
         const $dmreadPrec1_r3N5j_info;
 },
 w_s3XiR_entry() //  [R1]
         { []
         }
     {offset
       c3XY8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3XY9; else goto c3XYa;
       c3XY9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XYa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Read.readsPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_s3XiR_info" {
     w_s3XiR_info:
         const w_s3XiR_entry;
         const 2;
         const 18;
 },
 sat_s3XiV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3XYj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3XYk; else goto c3XYl;
       c3XYk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XYl: // global
           I64[Sp - 8] = block_c3XYg_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XiV_info" {
     sat_s3XiV_info:
         const sat_s3XiV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3XYg() //  [R1]
         { []
         }
     {offset
       c3XYg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3XYo; else goto c3XYn;
       c3XYo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3XYn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3XYg_info" {
     block_c3XYg_info:
         const _c3XYg;
         const 0;
         const 30;
 },
 $dmreadPrec1_r3N5j_entry() //  [R2, R3]
         { []
         }
     {offset
       c3XYp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3XYt; else goto c3XYs;
       c3XYt: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = $dmreadPrec1_r3N5j_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3XYs: // global
           I64[Hp - 40] = w_s3XiR_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = sat_s3XiV_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmreadPrec1_r3N5j_info" {
     $dmreadPrec1_r3N5j_info:
         const $dmreadPrec1_r3N5j_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.50794864 UTC

[section ""data" . GHC.Read.$dmreadPrec_closure" {
     GHC.Read.$dmreadPrec_closure:
         const GHC.Read.$dmreadPrec_info;
 },
 GHC.Read.$dmreadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3XYX: // global
           R3 = R3;
           R2 = R2;
           call $dmreadPrec1_r3N5j_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$dmreadPrec_info" {
     GHC.Read.$dmreadPrec_info:
         const GHC.Read.$dmreadPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.511919001 UTC

[section ""data" . GHC.Read.$dmreadsPrec_closure" {
     GHC.Read.$dmreadsPrec_closure:
         const GHC.Read.$dmreadsPrec_info;
 },
 sat_s3XiY_entry() //  [R1]
         { []
         }
     {offset
       c3XZc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3XZd; else goto c3XZe;
       c3XZd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XZe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.readPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XiY_info" {
     sat_s3XiY_info:
         const sat_s3XiY_entry;
         const 2;
         const 18;
 },
 GHC.Read.$dmreadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c3XZf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3XZj; else goto c3XZi;
       c3XZj: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$dmreadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3XZi: // global
           I64[Hp - 24] = sat_s3XiY_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$dmreadsPrec_info" {
     GHC.Read.$dmreadsPrec_info:
         const GHC.Read.$dmreadsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.517139912 UTC

[section ""data" . GHC.Read.$fRead()7_closure" {
     GHC.Read.$fRead()7_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.519929269 UTC

[section ""data" . GHC.Read.readListDefault_closure" {
     GHC.Read.readListDefault_closure:
         const GHC.Read.readListDefault_info;
 },
 sat_s3Xj0_entry() //  [R1]
         { []
         }
     {offset
       c3XZI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3XZJ; else goto c3XZK;
       c3XZJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3XZK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.readListPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Xj0_info" {
     sat_s3Xj0_info:
         const sat_s3Xj0_entry;
         const 1;
         const 16;
 },
 GHC.Read.readListDefault_entry() //  [R2]
         { []
         }
     {offset
       c3XZL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3XZP; else goto c3XZO;
       c3XZP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.readListDefault_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3XZO: // global
           I64[Hp - 16] = sat_s3Xj0_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readListDefault_info" {
     GHC.Read.readListDefault_info:
         const GHC.Read.readListDefault_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.526721877 UTC

[section ""data" . GHC.Read.lex1_closure" {
     GHC.Read.lex1_closure:
         const GHC.Read.lex1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.lex1_entry() //  [R1]
         { []
         }
     {offset
       c3Y0e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Y0f; else goto c3Y0g;
       c3Y0f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Y0g: // global
           (_c3Y08::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Y08::I64 == 0) goto c3Y0a; else goto c3Y09;
       c3Y0a: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Y09: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Y08::I64;
           I64[Sp - 24] = block_c3Y0b_info;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 24;
           call Text.Read.Lex.$whsLex_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.lex1_info" {
     GHC.Read.lex1_info:
         const GHC.Read.lex1_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt;
 },
 _c3Y0b() //  [R1]
         { []
         }
     {offset
       c3Y0b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Y0j; else goto c3Y0i;
       c3Y0j: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Y0i: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Y0b_info" {
     block_c3Y0b_info:
         const _c3Y0b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.532961936 UTC

[section ""data" . GHC.Read.lex_closure" {
     GHC.Read.lex_closure:
         const GHC.Read.lex_info;
         const 0;
 },
 GHC.Read.lex_entry() //  [R2]
         { []
         }
     {offset
       c3Y0E: // global
           R3 = R2;
           R2 = GHC.Read.lex1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lex_info" {
     GHC.Read.lex_info:
         const GHC.Read.lex_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.539838542 UTC

[section ""data" . GHC.Read.readParen1_closure" {
     GHC.Read.readParen1_closure:
         const GHC.Read.readParen1_info;
         const 0;
 },
 go_s3Xj7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Y11: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Y12; else goto u3Y1X;
       c3Y12: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u3Y1X: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c3Y0R() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_s3Xj7_info" {
     go_s3Xj7_info:
         const go_s3Xj7_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3Y0R() //  []
         { []
         }
     {offset
       c3Y0R: // global
           I64[Sp - 16] = block_c3Y0U_info;
           R1 = P64[Sp + 8];
           _s3Xj7::P64 = P64[Sp];
           P64[Sp - 8] = P64[_s3Xj7::P64 + 15];
           P64[Sp + 8] = P64[_s3Xj7::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Y22; else goto c3Y0V;
       u3Y22: // global
           call _c3Y0U(R1) args: 0, res: 0, upd: 0;
       c3Y0V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Y0U() //  [R1]
         { []
         }
     {offset
       c3Y0U: // global
           if (R1 & 7 == 1) goto c3Y0Y; else goto c3Y0Z;
       c3Y0Y: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Y0Z: // global
           I64[Sp] = block_c3Y19_info;
           _s3Xjb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s3Xjb::P64;
           if (R1 & 7 != 0) goto u3Y23; else goto c3Y1b;
       u3Y23: // global
           call _c3Y19(R1) args: 0, res: 0, upd: 0;
       c3Y1b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y0U_info" {
     block_c3Y0U_info:
         const _c3Y0U;
         const 3;
         const 30;
 },
 _c3Y19() //  [R1]
         { []
         }
     {offset
       c3Y19: // global
           I64[Sp - 8] = block_c3Y1f_info;
           _s3Xje::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3Xje::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Y25; else goto c3Y1h;
       u3Y25: // global
           call _c3Y1f(R1) args: 0, res: 0, upd: 0;
       c3Y1h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y19_info" {
     block_c3Y19_info:
         const _c3Y19;
         const 3;
         const 30;
 },
 _c3Y1f() //  [R1]
         { []
         }
     {offset
       c3Y1f: // global
           if (R1 & 7 == 1) goto u3Y1Y; else goto c3Y1s;
       u3Y1Y: // global
           Sp = Sp + 16;
           call _c3Y1U() args: 0, res: 0, upd: 0;
       c3Y1s: // global
           I64[Sp - 8] = block_c3Y1q_info;
           _s3Xjh::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Xjh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Y26; else goto c3Y1t;
       u3Y26: // global
           call _c3Y1q(R1) args: 0, res: 0, upd: 0;
       c3Y1t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y1f_info" {
     block_c3Y1f_info:
         const _c3Y1f;
         const 4;
         const 30;
 },
 _c3Y1q() //  [R1]
         { []
         }
     {offset
       c3Y1q: // global
           if (I64[R1 + 7] == 41) goto c3Y1E; else goto u3Y1Z;
       c3Y1E: // global
           _s3Xjh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Y1D_info;
           R1 = _s3Xjh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Y28; else goto c3Y1F;
       u3Y28: // global
           call _c3Y1D(R1) args: 0, res: 0, upd: 0;
       c3Y1F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Y1Z: // global
           Sp = Sp + 24;
           call _c3Y1U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Y1q_info" {
     block_c3Y1q_info:
         const _c3Y1q;
         const 5;
         const 30;
 },
 _c3Y1D() //  [R1]
         { []
         }
     {offset
       c3Y1D: // global
           if (R1 & 7 == 1) goto c3Y1N; else goto u3Y20;
       c3Y1N: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Y1Q; else goto c3Y1P;
       c3Y1Q: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Y1P: // global
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3Y20: // global
           Sp = Sp + 16;
           call _c3Y1U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Y1D_info" {
     block_c3Y1D_info:
         const _c3Y1D;
         const 4;
         const 30;
 },
 _c3Y1U() //  []
         { []
         }
     {offset
       c3Y1U: // global
           P64[Sp + 16] = P64[Sp];
           Sp = Sp + 8;
           call _c3Y0R() args: 0, res: 0, upd: 0;
     }
 },
 GHC.Read.readParen1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Y2e: // global
           _s3Xj6::P64 = R4;
           _s3Xj5::P64 = R3;
           _s3Xj4::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Y2f; else goto c3Y2g;
       c3Y2g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Y2i; else goto c3Y2h;
       c3Y2i: // global
           HpAlloc = 24;
           goto c3Y2f;
       c3Y2f: // global
           R4 = _s3Xj6::P64;
           R3 = _s3Xj5::P64;
           R2 = _s3Xj4::P64;
           R1 = GHC.Read.readParen1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Y2h: // global
           I64[Hp - 16] = go_s3Xj7_info;
           P64[Hp - 8] = _s3Xj4::P64;
           P64[Hp] = _s3Xj6::P64;
           I64[Sp - 16] = block_c3Y2c_info;
           R3 = _s3Xj5::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readParen1_info" {
     GHC.Read.readParen1_info:
         const GHC.Read.readParen1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3Y0k_srt+8;
 },
 _c3Y2c() //  [R1]
         { []
         }
     {offset
       c3Y2c: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s3Xj7_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y2c_info" {
     block_c3Y2c_info:
         const _c3Y2c;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.566392164 UTC

[section ""data" . GHC.Read.readParen_closure" {
     GHC.Read.readParen_closure:
         const GHC.Read.readParen_info;
         const 0;
 },
 go1_s3XjL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Y4j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Y4k; else goto c3Y4l;
       c3Y4k: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Y4l: // global
           I64[Sp - 24] = block_c3Y4c_info;
           _s3XjL::P64 = R1;
           _s3XjK::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3XjK::P64;
           P64[Sp - 8] = _s3XjL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Y4C; else goto c3Y4d;
       u3Y4C: // global
           call _c3Y4c(R1) args: 0, res: 0, upd: 0;
       c3Y4d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s3XjL_info" {
     go1_s3XjL_info:
         const go1_s3XjL_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+16;
 },
 _c3Y4c() //  [R1]
         { []
         }
     {offset
       c3Y4c: // global
           if (R1 & 7 == 1) goto c3Y4g; else goto c3Y4h;
       c3Y4g: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Y4h: // global
           I64[Sp] = block_c3Y4r_info;
           _s3XjP::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s3XjP::P64;
           if (R1 & 7 != 0) goto u3Y4B; else goto c3Y4s;
       u3Y4B: // global
           call _c3Y4r(R1) args: 0, res: 0, upd: 0;
       c3Y4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y4c_info" {
     block_c3Y4c_info:
         const _c3Y4c;
         const 2;
         const 4294967326;
         const S3Y0k_srt+16;
 },
 _c3Y4r() //  [R1]
         { []
         }
     {offset
       c3Y4r: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Y4A; else goto c3Y4z;
       c3Y4A: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Y4z: // global
           _s3XjR::P64 = P64[R1 + 7];
           _s3XjS::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R4 = Hp - 24;
           R3 = _s3XjS::P64;
           R2 = _s3XjR::P64;
           Sp = Sp + 24;
           call GHC.Read.readParen1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y4r_info" {
     block_c3Y4r_info:
         const _c3Y4r;
         const 2;
         const 4294967326;
         const S3Y0k_srt+16;
 },
 z_s3XjJ_entry() //  [R1]
         { []
         }
     {offset
       c3Y4F: // global
           _s3XjJ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3Y4J; else goto c3Y4K;
       c3Y4K: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Y4M; else goto c3Y4L;
       c3Y4M: // global
           HpAlloc = 48;
           goto c3Y4J;
       c3Y4J: // global
           R1 = _s3XjJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Y4L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XjJ::P64;
           _s3Xju::P64 = P64[_s3XjJ::P64 + 16];
           _s3Xjy::P64 = P64[_s3XjJ::P64 + 24];
           _s3XjB::P64 = P64[_s3XjJ::P64 + 32];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _s3Xju::P64;
           P64[Hp - 16] = _s3Xjy::P64;
           I64[Hp - 8] = go1_s3XjL_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 40] = block_c3Y4D_info;
           R3 = _s3XjB::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = _s3Xju::P64;
           Sp = Sp - 40;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . z_s3XjJ_info" {
     z_s3XjJ_info:
         const z_s3XjJ_entry;
         const 3;
         const 12884901903;
         const S3Y0k_srt+8;
 },
 _c3Y4D() //  [R1]
         { []
         }
     {offset
       c3Y4D: // global
           I64[Sp] = block_c3Y4I_info;
           R2 = R1;
           R1 = P64[Sp + 16];
           call go_s3Xju_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Y4D_info" {
     block_c3Y4D_info:
         const _c3Y4D;
         const 2;
         const 12884901918;
         const S3Y0k_srt+8;
 },
 _c3Y4I() //  [R1]
         { []
         }
     {offset
       c3Y4I: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call go1_s3XjL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Y4I_info" {
     block_c3Y4I_info:
         const _c3Y4I;
         const 130;
         const 4294967326;
         const S3Y0k_srt+16;
 },
 go1_s3XjW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Y54: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Y55; else goto c3Y56;
       c3Y55: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Y56: // global
           I64[Sp - 24] = block_c3Y4X_info;
           _s3XjW::P64 = R1;
           _s3XjJ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3XjJ::P64;
           P64[Sp - 8] = _s3XjW::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3Y5n; else goto c3Y4Y;
       u3Y5n: // global
           call _c3Y4X(R1) args: 0, res: 0, upd: 0;
       c3Y4Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s3XjW_info" {
     go1_s3XjW_info:
         const go1_s3XjW_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+16;
 },
 _c3Y4X() //  [R1]
         { []
         }
     {offset
       c3Y4X: // global
           if (R1 & 7 == 1) goto c3Y51; else goto c3Y52;
       c3Y51: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Y52: // global
           I64[Sp] = block_c3Y5c_info;
           _s3Xk0::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _s3Xk0::P64;
           if (R1 & 7 != 0) goto u3Y5m; else goto c3Y5d;
       u3Y5m: // global
           call _c3Y5c(R1) args: 0, res: 0, upd: 0;
       c3Y5d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y4X_info" {
     block_c3Y4X_info:
         const _c3Y4X;
         const 2;
         const 4294967326;
         const S3Y0k_srt+16;
 },
 _c3Y5c() //  [R1]
         { []
         }
     {offset
       c3Y5c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Y5l; else goto c3Y5k;
       c3Y5l: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Y5k: // global
           _s3Xk2::P64 = P64[R1 + 7];
           _s3Xk3::P64 = P64[R1 + 15];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R4 = Hp - 24;
           R3 = _s3Xk3::P64;
           R2 = _s3Xk2::P64;
           Sp = Sp + 24;
           call GHC.Read.readParen1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y5c_info" {
     block_c3Y5c_info:
         const _c3Y5c;
         const 2;
         const 4294967326;
         const S3Y0k_srt+16;
 },
 go_s3Xju_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Y5s: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Y5t; else goto u3Y5Z;
       c3Y5t: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u3Y5Z: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c3Y3v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_s3Xju_info" {
     go_s3Xju_info:
         const go_s3Xju_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S3Y0k_srt+8;
 },
 _c3Y3v() //  []
         { []
         }
     {offset
       c3Y3v: // global
           _s3Xjs::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_c3Y3y_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s3Xjs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Y64; else goto c3Y3z;
       u3Y64: // global
           call _c3Y3y(R1) args: 0, res: 0, upd: 0;
       c3Y3z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3Y3y() //  [R1]
         { []
         }
     {offset
       c3Y3y: // global
           if (R1 & 7 == 1) goto c3Y5p; else goto c3Y5q;
       c3Y5p: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Y5q: // global
           I64[Sp - 8] = block_c3Y3E_info;
           _s3Xjy::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Xjy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Y65; else goto c3Y3F;
       u3Y65: // global
           call _c3Y3E(R1) args: 0, res: 0, upd: 0;
       c3Y3F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y3y_info" {
     block_c3Y3y_info:
         const _c3Y3y;
         const 2;
         const 12884901918;
         const S3Y0k_srt+8;
 },
 _c3Y3E() //  [R1]
         { []
         }
     {offset
       c3Y3E: // global
           I64[Sp - 8] = block_c3Y3J_info;
           _s3XjB::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s3XjB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Y66; else goto c3Y3K;
       u3Y66: // global
           call _c3Y3J(R1) args: 0, res: 0, upd: 0;
       c3Y3K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y3E_info" {
     block_c3Y3E_info:
         const _c3Y3E;
         const 3;
         const 12884901918;
         const S3Y0k_srt+8;
 },
 _c3Y3J() //  [R1]
         { []
         }
     {offset
       c3Y3J: // global
           if (R1 & 7 == 1) goto u3Y60; else goto c3Y5E;
       u3Y60: // global
           Sp = Sp + 16;
           call _c3Y5W() args: 0, res: 0, upd: 0;
       c3Y5E: // global
           I64[Sp - 8] = block_c3Y3P_info;
           _s3XjE::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XjE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Y67; else goto c3Y3Q;
       u3Y67: // global
           call _c3Y3P(R1) args: 0, res: 0, upd: 0;
       c3Y3Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y3J_info" {
     block_c3Y3J_info:
         const _c3Y3J;
         const 4;
         const 12884901918;
         const S3Y0k_srt+8;
 },
 _c3Y3P() //  [R1]
         { []
         }
     {offset
       c3Y3P: // global
           if (I64[R1 + 7] == 40) goto c3Y5I; else goto u3Y61;
       c3Y5I: // global
           _s3XjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3Y3X_info;
           R1 = _s3XjE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3Y69; else goto c3Y3Y;
       u3Y69: // global
           call _c3Y3X(R1) args: 0, res: 0, upd: 0;
       c3Y3Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Y61: // global
           Sp = Sp + 24;
           call _c3Y5W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Y3P_info" {
     block_c3Y3P_info:
         const _c3Y3P;
         const 5;
         const 12884901918;
         const S3Y0k_srt+8;
 },
 _c3Y3X() //  [R1]
         { []
         }
     {offset
       c3Y3X: // global
           if (R1 & 7 == 1) goto c3Y5L; else goto u3Y62;
       c3Y5L: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Y5O; else goto c3Y5N;
       c3Y5O: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Y5N: // global
           I64[Hp - 48] = z_s3XjJ_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           _s3XjB::P64 = P64[Sp + 8];
           P64[Hp - 16] = _s3XjB::P64;
           I64[Hp - 8] = go1_s3XjW_info;
           P64[Hp] = Hp - 48;
           I64[Sp + 24] = block_c3Y5J_info;
           R2 = _s3XjB::P64;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = Hp - 7;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u3Y62: // global
           Sp = Sp + 16;
           call _c3Y5W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Y3X_info" {
     block_c3Y3X_info:
         const _c3Y3X;
         const 4;
         const 12884901918;
         const S3Y0k_srt+8;
 },
 _c3Y5J() //  [R1]
         { []
         }
     {offset
       c3Y5J: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_s3XjW_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y5J_info" {
     block_c3Y5J_info:
         const _c3Y5J;
         const 1;
         const 4294967326;
         const S3Y0k_srt+16;
 },
 _c3Y5W() //  []
         { []
         }
     {offset
       c3Y5W: // global
           P64[Sp + 16] = P64[Sp];
           Sp = Sp + 8;
           call _c3Y3v() args: 0, res: 0, upd: 0;
     }
 },
 sat_s3Xkb_entry() //  [R1]
         { []
         }
     {offset
       c3Y6p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Y6q; else goto c3Y6r;
       c3Y6q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Y6r: // global
           I64[Sp - 16] = block_c3Y6n_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.lex1_closure;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xkb_info" {
     sat_s3Xkb_info:
         const sat_s3Xkb_entry;
         const 2;
         const 12884901906;
         const S3Y0k_srt+8;
 },
 _c3Y6n() //  [R1]
         { []
         }
     {offset
       c3Y6n: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s3Xju_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y6n_info" {
     block_c3Y6n_info:
         const _c3Y6n;
         const 1;
         const 12884901918;
         const S3Y0k_srt+8;
 },
 GHC.Read.readParen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Y6z: // global
           _s3Xjt::P64 = R4;
           _s3Xjs::P64 = R3;
           _s3Xjr::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c3Y6A; else goto c3Y6B;
       c3Y6B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Y6D; else goto c3Y6C;
       c3Y6D: // global
           HpAlloc = 16;
           goto c3Y6A;
       c3Y6A: // global
           R4 = _s3Xjt::P64;
           R3 = _s3Xjs::P64;
           R2 = _s3Xjr::P64;
           R1 = GHC.Read.readParen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Y6C: // global
           I64[Hp - 8] = go_s3Xju_info;
           P64[Hp] = _s3Xjs::P64;
           I64[Sp - 32] = block_c3Y6e_info;
           R1 = _s3Xjr::P64;
           P64[Sp - 24] = Hp - 7;
           P64[Sp - 16] = _s3Xjs::P64;
           P64[Sp - 8] = _s3Xjt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Y6U; else goto c3Y6f;
       u3Y6U: // global
           call _c3Y6e(R1) args: 0, res: 0, upd: 0;
       c3Y6f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readParen_info" {
     GHC.Read.readParen_info:
         const GHC.Read.readParen_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S3Y0k_srt+8;
 },
 _c3Y6e() //  [R1]
         { []
         }
     {offset
       c3Y6e: // global
           _s3Xjt::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c3Y6w; else goto c3Y6x;
       c3Y6w: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Y6H; else goto c3Y6G;
       c3Y6H: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Y6G: // global
           I64[Hp - 24] = sat_s3Xkb_info;
           P64[Hp - 8] = _s3Xjt::P64;
           P64[Hp] = P64[Sp + 8];
           _s3Xjs::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3Y6E_info;
           R2 = _s3Xjt::P64;
           R1 = _s3Xjs::P64;
           P64[Sp + 24] = Hp - 24;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c3Y6x: // global
           I64[Sp] = block_c3Y6O_info;
           R3 = _s3Xjt::P64;
           R2 = GHC.Read.lex1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y6e_info" {
     block_c3Y6e_info:
         const _c3Y6e;
         const 3;
         const 12884901918;
         const S3Y0k_srt+8;
 },
 _c3Y6E() //  [R1]
         { []
         }
     {offset
       c3Y6E: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y6E_info" {
     block_c3Y6E_info:
         const _c3Y6E;
         const 1;
         const 30;
 },
 _c3Y6O() //  [R1]
         { []
         }
     {offset
       c3Y6O: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call go_s3Xju_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Y6O_info" {
     block_c3Y6O_info:
         const _c3Y6O;
         const 387;
         const 12884901918;
         const S3Y0k_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.611910636 UTC

[section ""data" . GHC.Read.readLitChar1_closure" {
     GHC.Read.readLitChar1_closure:
         const GHC.Read.readLitChar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.readLitChar1_entry() //  [R1]
         { []
         }
     {offset
       c3Y9q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Y9r; else goto c3Y9s;
       c3Y9r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Y9s: // global
           (_c3Y9k::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Y9k::I64 == 0) goto c3Y9m; else goto c3Y9l;
       c3Y9m: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Y9l: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Y9k::I64;
           I64[Sp - 24] = block_c3Y9n_info;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.readLitChar1_info" {
     GHC.Read.readLitChar1_info:
         const GHC.Read.readLitChar1_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+32;
 },
 _c3Y9n() //  [R1]
         { []
         }
     {offset
       c3Y9n: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Y9v; else goto c3Y9u;
       c3Y9v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3Y9u: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3Y9n_info" {
     block_c3Y9n_info:
         const _c3Y9n;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.618117072 UTC

[section ""data" . GHC.Read.readLitChar_closure" {
     GHC.Read.readLitChar_closure:
         const GHC.Read.readLitChar_info;
         const 0;
 },
 GHC.Read.readLitChar_entry() //  [R2]
         { []
         }
     {offset
       c3Y9P: // global
           R3 = R2;
           R2 = GHC.Read.readLitChar1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readLitChar_info" {
     GHC.Read.readLitChar_info:
         const GHC.Read.readLitChar_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.623730245 UTC

[section ""data" . GHC.Read.$www1_closure" {
     GHC.Read.$www1_closure:
         const GHC.Read.$www1_info;
 },
 sat_s3Xkn_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yal: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Yap; else goto c3Yao;
       c3Yap: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yao: // global
           _s3Xkk::P64 = P64[R1 + 7];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _s3Xkk::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xkn_info" {
     sat_s3Xkn_info:
         const sat_s3Xkn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Read.$www1_entry() //  [R2]
         { []
         }
     {offset
       c3Yaq: // global
           _s3Xkf::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Yar; else goto c3Yas;
       c3Yas: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Yau; else goto c3Yat;
       c3Yau: // global
           HpAlloc = 32;
           goto c3Yar;
       c3Yar: // global
           R2 = _s3Xkf::I64;
           R1 = GHC.Read.$www1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yat: // global
           if ((_s3Xkf::I64 + -48) > 9) goto c3Yaw; else goto c3YaA;
       c3Yaw: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3YaA: // global
           I64[Hp - 24] = GHC.Types.C#_con_info;
           I64[Hp - 16] = _s3Xkf::I64;
           I64[Hp - 8] = sat_s3Xkn_info;
           P64[Hp] = Hp - 23;
           I64[Sp - 8] = block_c3Yax_info;
           R3 = Hp - 7;
           R2 = GHC.Unicode.isDigit_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wmunch_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$www1_info" {
     GHC.Read.$www1_info:
         const GHC.Read.$www1_entry;
         const 0;
         const 14;
         const 4294967300;
 },
 _c3Yax() //  [R1]
         { []
         }
     {offset
       c3Yax: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YaD; else goto c3YaC;
       c3YaD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YaC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yax_info" {
     block_c3Yax_info:
         const _c3Yax;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.632562957 UTC

[section ""data" . GHC.Read.lexDigits_ww1_closure" {
     GHC.Read.lexDigits_ww1_closure:
         const GHC.Read.lexDigits_ww1_info;
 },
 GHC.Read.lexDigits_ww1_entry() //  [R2]
         { []
         }
     {offset
       c3Ybc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ybd; else goto c3Ybe;
       c3Ybd: // global
           R2 = R2;
           R1 = GHC.Read.lexDigits_ww1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ybe: // global
           I64[Sp - 8] = block_c3Yb9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Ybi; else goto c3Yba;
       u3Ybi: // global
           call _c3Yb9(R1) args: 0, res: 0, upd: 0;
       c3Yba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexDigits_ww1_info" {
     GHC.Read.lexDigits_ww1_info:
         const GHC.Read.lexDigits_ww1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3Yb9() //  [R1]
         { []
         }
     {offset
       c3Yb9: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Read.$www1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yb9_info" {
     block_c3Yb9_info:
         const _c3Yb9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.637980594 UTC

[section ""data" . GHC.Read.lexDigits1_closure" {
     GHC.Read.lexDigits1_closure:
         const Text.ParserCombinators.ReadP.Get_con_info;
         const GHC.Read.lexDigits_ww1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.640068708 UTC

[section ""data" . GHC.Read.lexDigits_closure" {
     GHC.Read.lexDigits_closure:
         const GHC.Read.lexDigits_info;
 },
 GHC.Read.lexDigits_entry() //  [R2]
         { []
         }
     {offset
       c3Yby: // global
           R3 = R2;
           R2 = GHC.Read.lexDigits1_closure+1;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexDigits_info" {
     GHC.Read.lexDigits_info:
         const GHC.Read.lexDigits_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.643565864 UTC

[section ""data" . GHC.Read.$fReadLexeme1_closure" {
     GHC.Read.$fReadLexeme1_closure:
         const GHC.Read.$fReadLexeme1_info;
         const 0;
 },
 GHC.Read.$fReadLexeme1_entry() //  [R3]
         { []
         }
     {offset
       c3YbJ: // global
           R2 = R3;
           call Text.Read.Lex.lex1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme1_info" {
     GHC.Read.$fReadLexeme1_info:
         const GHC.Read.$fReadLexeme1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.647639082 UTC

[section ""data" . GHC.Read.lexP_closure" {
     GHC.Read.lexP_closure:
         const GHC.Read.lexP_info;
         const 0;
 },
 GHC.Read.lexP_entry() //  [R2, R3]
         { []
         }
     {offset
       c3YbU: // global
           R3 = R3;
           R2 = R2;
           call GHC.Read.$fReadLexeme1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexP_info" {
     GHC.Read.lexP_info:
         const GHC.Read.lexP_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.651429286 UTC

[section ""data" . GHC.Read.$fReadChar4_closure" {
     GHC.Read.$fReadChar4_closure:
         const GHC.Read.$fReadChar4_info;
 },
 GHC.Read.$fReadChar4_entry() //  [R2]
         { []
         }
     {offset
       c3Yc8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Yc9; else goto c3Yca;
       c3Yc9: // global
           R2 = R2;
           R1 = GHC.Read.$fReadChar4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yca: // global
           I64[Sp - 8] = block_c3Yc5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Yce; else goto c3Yc6;
       u3Yce: // global
           call _c3Yc5() args: 0, res: 0, upd: 0;
       c3Yc6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar4_info" {
     GHC.Read.$fReadChar4_info:
         const GHC.Read.$fReadChar4_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3Yc5() //  []
         { []
         }
     {offset
       c3Yc5: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yc5_info" {
     block_c3Yc5_info:
         const _c3Yc5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.656166511 UTC

[section ""data" . GHC.Read.$fReadChar3_closure" {
     GHC.Read.$fReadChar3_closure:
         const Text.ParserCombinators.ReadP.Look_con_info;
         const GHC.Read.$fReadChar4_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.663222101 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory36_closure" {
     GHC.Read.$fReadGeneralCategory36_closure:
         const GHC.Read.$fReadGeneralCategory36_info;
         const 0;
 },
 sat_s3XkN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yd3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3Yd4; else goto c3Yd5;
       c3Yd4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yd5: // global
           I64[Sp - 24] = block_c3YcV_info;
           _s3XkD::P64 = P64[R1 + 7];
           _s3XkG::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3XkD::P64;
           P64[Sp - 8] = _s3XkG::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3YdK; else goto c3YcW;
       u3YdK: // global
           call _c3YcV(R1) args: 0, res: 0, upd: 0;
       c3YcW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XkN_info" {
     sat_s3XkN_info:
         const sat_s3XkN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3YcV() //  [R1]
         { []
         }
     {offset
       c3YcV: // global
           _s3XkD::P64 = P64[Sp + 8];
           _c3Yd2::P64 = R1 & 7;
           if (_c3Yd2::P64 == 4) goto c3Yd0; else goto u3YdD;
       c3Yd0: // global
           I64[Sp + 8] = block_c3Ydb_info;
           R3 = P64[R1 + 4];
           R2 = _s3XkD::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3YdD: // global
           if (_c3Yd2::P64 == 5) goto c3Yd1; else goto u3YdE;
       c3Yd1: // global
           I64[Sp + 8] = block_c3Ydp_info;
           R3 = P64[R1 + 3];
           R2 = _s3XkD::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u3YdE: // global
           Sp = Sp + 24;
           call _c3Ydw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3YcV_info" {
     block_c3YcV_info:
         const _c3YcV;
         const 2;
         const 30;
 },
 _c3Ydb() //  [R1]
         { []
         }
     {offset
       c3Ydb: // global
           if (R1 & 7 == 1) goto u3YdH; else goto u3YdI;
       u3YdH: // global
           Sp = Sp + 16;
           call _c3Ydw() args: 0, res: 0, upd: 0;
       u3YdI: // global
           Sp = Sp + 8;
           call _c3YdA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Ydb_info" {
     block_c3Ydb_info:
         const _c3Ydb;
         const 1;
         const 30;
 },
 _c3Ydp() //  [R1]
         { []
         }
     {offset
       c3Ydp: // global
           if (R1 & 7 == 1) goto u3YdF; else goto u3YdG;
       u3YdF: // global
           Sp = Sp + 16;
           call _c3Ydw() args: 0, res: 0, upd: 0;
       u3YdG: // global
           Sp = Sp + 8;
           call _c3YdA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Ydp_info" {
     block_c3Ydp_info:
         const _c3Ydp;
         const 1;
         const 30;
 },
 _c3YdA() //  []
         { []
         }
     {offset
       c3YdA: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Ydw() //  []
         { []
         }
     {offset
       c3Ydw: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3XkO_entry() //  [R1]
         { []
         }
     {offset
       c3YdP: // global
           _s3XkO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YdQ; else goto c3YdR;
       c3YdR: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3YdT; else goto c3YdS;
       c3YdT: // global
           HpAlloc = 64;
           goto c3YdQ;
       c3YdQ: // global
           R1 = _s3XkO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YdS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XkO::P64;
           _s3Xkz::P64 = P64[_s3XkO::P64 + 16];
           _s3XkB::P64 = P64[_s3XkO::P64 + 24];
           _s3XkD::P64 = P64[_s3XkO::P64 + 32];
           _s3XkE::P64 = P64[_s3XkO::P64 + 40];
           I64[Hp - 56] = stg_ap_3_upd_info;
           P64[Hp - 40] = _s3XkE::P64;
           P64[Hp - 32] = _s3Xkz::P64;
           P64[Hp - 24] = _s3XkB::P64;
           I64[Hp - 16] = sat_s3XkN_info;
           P64[Hp - 8] = _s3XkD::P64;
           P64[Hp] = Hp - 56;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XkO_info" {
     sat_s3XkO_info:
         const sat_s3XkO_entry;
         const 4;
         const 4294967311;
         const S3Y0k_srt+64;
 },
 lvl116_s3XkF_entry() //  [R1]
         { []
         }
     {offset
       c3YdU: // global
           _s3XkF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YdV; else goto c3YdW;
       c3YdW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3YdY; else goto c3YdX;
       c3YdY: // global
           HpAlloc = 48;
           goto c3YdV;
       c3YdV: // global
           R1 = _s3XkF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YdX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XkF::P64;
           _s3Xkz::P64 = P64[_s3XkF::P64 + 16];
           _s3XkB::P64 = P64[_s3XkF::P64 + 24];
           _s3XkD::P64 = P64[_s3XkF::P64 + 32];
           _s3XkE::P64 = P64[_s3XkF::P64 + 40];
           I64[Hp - 40] = sat_s3XkO_info;
           P64[Hp - 24] = _s3Xkz::P64;
           P64[Hp - 16] = _s3XkB::P64;
           P64[Hp - 8] = _s3XkD::P64;
           P64[Hp] = _s3XkE::P64;
           R3 = Hp - 40;
           R2 = GHC.Read.$fReadChar3_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XkF_info" {
     lvl116_s3XkF_info:
         const lvl116_s3XkF_entry;
         const 4;
         const 12884901903;
         const S3Y0k_srt+64;
 },
 k1_s3XkP_entry() //  [R1]
         { []
         }
     {offset
       c3Ye4: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3XkP_info" {
     k1_s3XkP_info:
         const k1_s3XkP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XkS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yed: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XkS_info" {
     sat_s3XkS_info:
         const sat_s3XkS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XkV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yeg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Yei; else goto c3Yej;
       c3Yei: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yej: // global
           I64[Sp - 32] = block_c3YcC_info;
           _s3Xkz::P64 = P64[R1 + 15];
           _s3XkA::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 24] = _s3Xkz::P64;
           P64[Sp - 16] = _s3XkA::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Yen; else goto c3YcD;
       u3Yen: // global
           call _c3YcC(R1) args: 0, res: 0, upd: 0;
       c3YcD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XkV_info" {
     sat_s3XkV_info:
         const sat_s3XkV_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S3Y0k_srt+64;
 },
 _c3YcC() //  [R1]
         { []
         }
     {offset
       c3YcC: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3Yem; else goto c3Yel;
       c3Yem: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yel: // global
           _s3XkD::P64 = P64[R1 + 7];
           _s3XkE::P64 = P64[R1 + 15];
           I64[Hp - 120] = lvl116_s3XkF_info;
           P64[Hp - 104] = P64[Sp + 8];
           _s3XkB::P64 = P64[Sp + 24];
           P64[Hp - 96] = _s3XkB::P64;
           P64[Hp - 88] = _s3XkD::P64;
           P64[Hp - 80] = _s3XkE::P64;
           I64[Hp - 72] = k1_s3XkP_info;
           P64[Hp - 64] = Hp - 120;
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3XkB::P64;
           I64[Hp - 24] = sat_s3XkS_info;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp + 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YcC_info" {
     block_c3YcC_info:
         const _c3YcC;
         const 3;
         const 12884901918;
         const S3Y0k_srt+64;
 },
 GHC.Read.$fReadGeneralCategory36_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Yeo: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Yes; else goto c3Yer;
       c3Yes: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadGeneralCategory36_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Yer: // global
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3XkV_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory36_info" {
     GHC.Read.$fReadGeneralCategory36_info:
         const GHC.Read.$fReadGeneralCategory36_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S3Y0k_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.68852467 UTC

[section ""data" . lvl_r3N5k_closure" {
     lvl_r3N5k_closure:
         const lvl_r3N5k_info;
 },
 lvl_r3N5k_entry() //  []
         { []
         }
     {offset
       c3YfO: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_r3N5k_info" {
     lvl_r3N5k_info:
         const lvl_r3N5k_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.693046655 UTC

[section ""data" . GHC.Read.choose2_closure" {
     GHC.Read.choose2_closure:
         const GHC.Read.choose2_info;
         const 0;
 },
 sat_s3Xl2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ygc: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xl2_info" {
     sat_s3Xl2_info:
         const sat_s3Xl2_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+88;
 },
 GHC.Read.choose2_entry() //  [R2, R3]
         { []
         }
     {offset
       c3Ygj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ygk; else goto c3Ygl;
       c3Ygk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.choose2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ygl: // global
           I64[Sp - 16] = block_c3Yg1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Ygr; else goto c3Yg2;
       u3Ygr: // global
           call _c3Yg1(R1) args: 0, res: 0, upd: 0;
       c3Yg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.choose2_info" {
     GHC.Read.choose2_info:
         const GHC.Read.choose2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+80;
 },
 _c3Yg1() //  [R1]
         { []
         }
     {offset
       c3Yg1: // global
           if (R1 & 7 == 1) goto c3Ygg; else goto c3Ygh;
       c3Ygg: // global
           R1 = lvl_r3N5k_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3Ygh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ygq; else goto c3Ygp;
       c3Ygq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ygp: // global
           _s3Xl0::P64 = P64[R1 + 6];
           _s3Xl1::P64 = P64[R1 + 14];
           I64[Hp - 8] = sat_s3Xl2_info;
           P64[Hp] = _s3Xl1::P64;
           R4 = P64[Sp + 8];
           R3 = Hp - 7;
           R2 = _s3Xl0::P64;
           Sp = Sp + 16;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yg1_info" {
     block_c3Yg1_info:
         const _c3Yg1;
         const 1;
         const 12884901918;
         const S3Y0k_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.700484881 UTC

[section ""data" . GHC.Read.choose1_closure" {
     GHC.Read.choose1_closure:
         const GHC.Read.choose1_info;
         const 0;
 },
 GHC.Read.choose1_entry() //  [R2, R3]
         { []
         }
     {offset
       c3YgN: // global
           R3 = R3;
           R2 = R2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.choose1_info" {
     GHC.Read.choose1_info:
         const GHC.Read.choose1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.70401143 UTC

[section ""data" . GHC.Read.choose_closure" {
     GHC.Read.choose_closure:
         const GHC.Read.choose_info;
         const 0;
 },
 GHC.Read.choose_entry() //  [R2, R3]
         { []
         }
     {offset
       c3YgY: // global
           R3 = R3;
           R2 = R2;
           call GHC.Read.choose1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.choose_info" {
     GHC.Read.choose_info:
         const GHC.Read.choose_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.707456732 UTC

[section ""data" . GHC.Read.expectP1_closure" {
     GHC.Read.expectP1_closure:
         const GHC.Read.expectP1_info;
         const 0;
 },
 GHC.Read.expectP1_entry() //  [R2, R4]
         { []
         }
     {offset
       c3Yh9: // global
           R3 = R4;
           R2 = R2;
           call Text.Read.Lex.expect1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.expectP1_info" {
     GHC.Read.expectP1_info:
         const GHC.Read.expectP1_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3Y0k_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.711013689 UTC

[section ""data" . GHC.Read.expectP_closure" {
     GHC.Read.expectP_closure:
         const GHC.Read.expectP_info;
         const 0;
 },
 GHC.Read.expectP_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Yhk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.expectP1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.expectP_info" {
     GHC.Read.expectP_info:
         const GHC.Read.expectP_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3Y0k_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.714098476 UTC

[section ""cstring" . GHC.Read.readField3_bytes" {
     GHC.Read.readField3_bytes:
         I8[] [61]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.71654196 UTC

[section ""data" . GHC.Read.readField2_closure" {
     GHC.Read.readField2_closure:
         const GHC.Read.readField2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.readField2_entry() //  [R1]
         { []
         }
     {offset
       c3Yhy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Yhz; else goto c3YhA;
       c3Yhz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YhA: // global
           (_c3Yhv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Yhv::I64 == 0) goto c3Yhx; else goto c3Yhw;
       c3Yhx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Yhw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Yhv::I64;
           R2 = GHC.Read.readField3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.readField2_info" {
     GHC.Read.readField2_info:
         const GHC.Read.readField2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.721082048 UTC

[section ""data" . GHC.Read.readField_lexeme_closure" {
     GHC.Read.readField_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.readField2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.72471971 UTC

[section ""data" . GHC.Read.$wreadField_closure" {
     GHC.Read.$wreadField_closure:
         const GHC.Read.$wreadField_info;
         const 0;
 },
 sat_s3Xlf_entry() //  [R1]
         { []
         }
     {offset
       c3YhY: // global
           R3 = P64[R1 + 23];
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xlf_info" {
     sat_s3Xlf_info:
         const sat_s3Xlf_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3Xli_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yi4: // global
           _s3Xld::P64 = R2;
           _s3Xli::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Yi5; else goto c3Yi6;
       c3Yi6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Yi8; else goto c3Yi7;
       c3Yi8: // global
           HpAlloc = 32;
           goto c3Yi5;
       c3Yi5: // global
           R2 = _s3Xld::P64;
           R1 = _s3Xli::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yi7: // global
           _s3Xl9::P64 = P64[_s3Xli::P64 + 7];
           _s3Xla::P64 = P64[_s3Xli::P64 + 15];
           _s3Xlb::P64 = P64[_s3Xli::P64 + 23];
           I64[Hp - 24] = sat_s3Xlf_info;
           P64[Hp - 16] = _s3Xl9::P64;
           P64[Hp - 8] = _s3Xla::P64;
           P64[Hp] = _s3Xlb::P64;
           I64[Sp - 8] = block_c3Yi1_info;
           R3 = Hp - 23;
           R2 = GHC.Read.readField_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xli_info" {
     sat_s3Xli_info:
         const sat_s3Xli_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Yi1() //  [R1]
         { []
         }
     {offset
       c3Yi1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Yib; else goto c3Yia;
       c3Yib: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yia: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yi1_info" {
     block_c3Yi1_info:
         const _c3Yi1;
         const 0;
         const 30;
 },
 GHC.Read.$wreadField_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Yid: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Yih; else goto c3Yig;
       c3Yih: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$wreadField_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Yig: // global
           I64[Hp - 40] = sat_s3Xli_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = Text.Read.Lex.Ident_con_info;
           P64[Hp] = R2;
           R3 = Hp - 39;
           R2 = Hp - 4;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$wreadField_info" {
     GHC.Read.$wreadField_info:
         const GHC.Read.$wreadField_entry;
         const 0;
         const 30064771086;
         const 17179869208;
         const S3Y0k_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.734931832 UTC

[section ""data" . GHC.Read.readField1_closure" {
     GHC.Read.readField1_closure:
         const GHC.Read.readField1_info;
         const 0;
 },
 GHC.Read.readField1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3YiJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YiK; else goto c3YiL;
       c3YiK: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.readField1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YiL: // global
           I64[Sp - 8] = block_c3YiG_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Read.$wreadField_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readField1_info" {
     GHC.Read.readField1_info:
         const GHC.Read.readField1_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3Y0k_srt+136;
 },
 _c3YiG() //  [R1]
         { []
         }
     {offset
       c3YiG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YiO; else goto c3YiN;
       c3YiO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YiN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YiG_info" {
     block_c3YiG_info:
         const _c3YiG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.740448056 UTC

[section ""data" . GHC.Read.readField_closure" {
     GHC.Read.readField_closure:
         const GHC.Read.readField_info;
         const 0;
 },
 GHC.Read.readField_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Yj4: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.readField1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readField_info" {
     GHC.Read.readField_info:
         const GHC.Read.readField_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3Y0k_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.743483887 UTC

[section ""cstring" . GHC.Read.readSymField5_bytes" {
     GHC.Read.readSymField5_bytes:
         I8[] [40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.745846725 UTC

[section ""data" . GHC.Read.readSymField4_closure" {
     GHC.Read.readSymField4_closure:
         const GHC.Read.readSymField4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.readSymField4_entry() //  [R1]
         { []
         }
     {offset
       c3Yji: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Yjj; else goto c3Yjk;
       c3Yjj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Yjk: // global
           (_c3Yjf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Yjf::I64 == 0) goto c3Yjh; else goto c3Yjg;
       c3Yjh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Yjg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Yjf::I64;
           R2 = GHC.Read.readSymField5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.readSymField4_info" {
     GHC.Read.readSymField4_info:
         const GHC.Read.readSymField4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.749580709 UTC

[section ""data" . GHC.Read.readSymField_lexeme1_closure" {
     GHC.Read.readSymField_lexeme1_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.readSymField4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.75122268 UTC

[section ""cstring" . GHC.Read.readSymField3_bytes" {
     GHC.Read.readSymField3_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.754026091 UTC

[section ""data" . GHC.Read.readSymField2_closure" {
     GHC.Read.readSymField2_closure:
         const GHC.Read.readSymField2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.readSymField2_entry() //  [R1]
         { []
         }
     {offset
       c3YjB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3YjC; else goto c3YjD;
       c3YjC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YjD: // global
           (_c3Yjy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Yjy::I64 == 0) goto c3YjA; else goto c3Yjz;
       c3YjA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Yjz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Yjy::I64;
           R2 = GHC.Read.readSymField3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.readSymField2_info" {
     GHC.Read.readSymField2_info:
         const GHC.Read.readSymField2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.757680767 UTC

[section ""data" . GHC.Read.readSymField_lexeme_closure" {
     GHC.Read.readSymField_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.readSymField2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.763061001 UTC

[section ""data" . GHC.Read.$wreadSymField_closure" {
     GHC.Read.$wreadSymField_closure:
         const GHC.Read.$wreadSymField_info;
         const 0;
 },
 sat_s3Xly_entry() //  [R1]
         { []
         }
     {offset
       c3Ykb: // global
           R3 = P64[R1 + 23];
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xly_info" {
     sat_s3Xly_info:
         const sat_s3Xly_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3XlB_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ykh: // global
           _s3Xlw::P64 = R2;
           _s3XlB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Yki; else goto c3Ykj;
       c3Ykj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Ykl; else goto c3Ykk;
       c3Ykl: // global
           HpAlloc = 32;
           goto c3Yki;
       c3Yki: // global
           R2 = _s3Xlw::P64;
           R1 = _s3XlB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ykk: // global
           _s3Xlq::P64 = P64[_s3XlB::P64 + 7];
           _s3Xlr::P64 = P64[_s3XlB::P64 + 15];
           _s3Xls::P64 = P64[_s3XlB::P64 + 23];
           I64[Hp - 24] = sat_s3Xly_info;
           P64[Hp - 16] = _s3Xlq::P64;
           P64[Hp - 8] = _s3Xlr::P64;
           P64[Hp] = _s3Xls::P64;
           I64[Sp - 8] = block_c3Yke_info;
           R3 = Hp - 23;
           R2 = GHC.Read.readField_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XlB_info" {
     sat_s3XlB_info:
         const sat_s3XlB_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Yke() //  [R1]
         { []
         }
     {offset
       c3Yke: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Yko; else goto c3Ykn;
       c3Yko: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ykn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yke_info" {
     block_c3Yke_info:
         const _c3Yke;
         const 0;
         const 30;
 },
 sat_s3XlE_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yks: // global
           _s3Xlv::P64 = R2;
           _s3XlE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Ykt; else goto c3Yku;
       c3Yku: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Ykw; else goto c3Ykv;
       c3Ykw: // global
           HpAlloc = 32;
           goto c3Ykt;
       c3Ykt: // global
           R2 = _s3Xlv::P64;
           R1 = _s3XlE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ykv: // global
           _s3Xlq::P64 = P64[_s3XlE::P64 + 7];
           _s3Xlr::P64 = P64[_s3XlE::P64 + 15];
           _s3Xls::P64 = P64[_s3XlE::P64 + 23];
           I64[Hp - 24] = sat_s3XlB_info;
           P64[Hp - 16] = _s3Xlq::P64;
           P64[Hp - 8] = _s3Xlr::P64;
           P64[Hp] = _s3Xls::P64;
           I64[Sp - 8] = block_c3Ykp_info;
           R3 = Hp - 23;
           R2 = GHC.Read.readSymField_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XlE_info" {
     sat_s3XlE_info:
         const sat_s3XlE_entry;
         const 3;
         const 81604378632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Ykp() //  [R1]
         { []
         }
     {offset
       c3Ykp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ykz; else goto c3Yky;
       c3Ykz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yky: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ykp_info" {
     block_c3Ykp_info:
         const _c3Ykp;
         const 0;
         const 30;
 },
 sat_s3XlH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YkE: // global
           _s3Xlt::P64 = R2;
           _s3XlH::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3YkF; else goto c3YkG;
       c3YkG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3YkI; else goto c3YkH;
       c3YkI: // global
           HpAlloc = 48;
           goto c3YkF;
       c3YkF: // global
           R2 = _s3Xlt::P64;
           R1 = _s3XlH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YkH: // global
           _s3Xlp::P64 = P64[_s3XlH::P64 + 7];
           _s3Xlq::P64 = P64[_s3XlH::P64 + 15];
           _s3Xlr::P64 = P64[_s3XlH::P64 + 23];
           _s3Xls::P64 = P64[_s3XlH::P64 + 31];
           I64[Hp - 40] = sat_s3XlE_info;
           P64[Hp - 32] = _s3Xlq::P64;
           P64[Hp - 24] = _s3Xlr::P64;
           P64[Hp - 16] = _s3Xls::P64;
           I64[Hp - 8] = Text.Read.Lex.Symbol_con_info;
           P64[Hp] = _s3Xlp::P64;
           I64[Sp - 8] = block_c3YkB_info;
           R3 = Hp - 39;
           R2 = Hp - 3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XlH_info" {
     sat_s3XlH_info:
         const sat_s3XlH_entry;
         const 4;
         const 81604378632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YkB() //  [R1]
         { []
         }
     {offset
       c3YkB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YkL; else goto c3YkK;
       c3YkL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YkK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YkB_info" {
     block_c3YkB_info:
         const _c3YkB;
         const 0;
         const 30;
 },
 GHC.Read.$wreadSymField_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3YkM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3YkQ; else goto c3YkP;
       c3YkQ: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$wreadSymField_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YkP: // global
           I64[Hp - 32] = sat_s3XlH_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R3 = Hp - 31;
           R2 = GHC.Read.readSymField_lexeme1_closure+3;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$wreadSymField_info" {
     GHC.Read.$wreadSymField_info:
         const GHC.Read.$wreadSymField_entry;
         const 0;
         const 493921239054;
         const 17179869208;
         const S3Y0k_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.780072941 UTC

[section ""data" . GHC.Read.readSymField1_closure" {
     GHC.Read.readSymField1_closure:
         const GHC.Read.readSymField1_info;
         const 0;
 },
 GHC.Read.readSymField1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3YlE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YlF; else goto c3YlG;
       c3YlF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.readSymField1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YlG: // global
           I64[Sp - 8] = block_c3YlB_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Read.$wreadSymField_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readSymField1_info" {
     GHC.Read.readSymField1_info:
         const GHC.Read.readSymField1_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const S3Y0k_srt+160;
 },
 _c3YlB() //  [R1]
         { []
         }
     {offset
       c3YlB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YlJ; else goto c3YlI;
       c3YlJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YlI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YlB_info" {
     block_c3YlB_info:
         const _c3YlB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.786130886 UTC

[section ""data" . GHC.Read.readSymField_closure" {
     GHC.Read.readSymField_closure:
         const GHC.Read.readSymField_info;
         const 0;
 },
 GHC.Read.readSymField_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3YlZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.readSymField1_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readSymField_info" {
     GHC.Read.readSymField_info:
         const GHC.Read.readSymField_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3Y0k_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.789355794 UTC

[section ""cstring" . GHC.Read.$fRead(,)4_bytes" {
     GHC.Read.$fRead(,)4_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.791716325 UTC

[section ""data" . GHC.Read.$fRead(,)3_closure" {
     GHC.Read.$fRead(,)3_closure:
         const GHC.Read.$fRead(,)3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead(,)3_entry() //  [R1]
         { []
         }
     {offset
       c3Ymd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Yme; else goto c3Ymf;
       c3Yme: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ymf: // global
           (_c3Yma::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3Yma::I64 == 0) goto c3Ymc; else goto c3Ymb;
       c3Ymc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3Ymb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3Yma::I64;
           R2 = GHC.Read.$fRead(,)4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)3_info" {
     GHC.Read.$fRead(,)3_info:
         const GHC.Read.$fRead(,)3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.795968973 UTC

[section ""data" . GHC.Read.$fRead(,)_lexeme_closure" {
     GHC.Read.$fRead(,)_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.$fRead(,)3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.801267313 UTC

[section ""data" . GHC.Read.$fRead(,)2_closure" {
     GHC.Read.$fRead(,)2_closure:
         const GHC.Read.$fRead(,)2_info;
         const 0;
 },
 ds1_s3XlR_entry() //  [R1]
         { []
         }
     {offset
       c3Ymx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Ymy; else goto c3Ymz;
       c3Ymy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Ymz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3XlR_info" {
     ds1_s3XlR_info:
         const ds1_s3XlR_entry;
         const 2;
         const 18;
 },
 sat_s3XlX_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YmV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3YmZ; else goto c3YmY;
       c3YmZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YmY: // global
           _s3XlS::P64 = P64[R1 + 7];
           _s3XlT::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s3XlT::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3XlS::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XlX_info" {
     sat_s3XlX_info:
         const sat_s3XlX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3XlY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yn0: // global
           _s3XlU::P64 = R2;
           _s3XlY::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Yn1; else goto c3Yn2;
       c3Yn2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Yn4; else goto c3Yn3;
       c3Yn4: // global
           HpAlloc = 24;
           goto c3Yn1;
       c3Yn1: // global
           R2 = _s3XlU::P64;
           R1 = _s3XlY::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yn3: // global
           _s3XlP::P64 = P64[_s3XlY::P64 + 7];
           _s3XlQ::P64 = P64[_s3XlY::P64 + 15];
           _s3XlS::P64 = P64[_s3XlY::P64 + 23];
           _s3XlT::P64 = P64[_s3XlY::P64 + 31];
           I64[Hp - 16] = sat_s3XlX_info;
           P64[Hp - 8] = _s3XlS::P64;
           P64[Hp] = _s3XlT::P64;
           R2 = _s3XlP::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3XlQ::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XlY_info" {
     sat_s3XlY_info:
         const sat_s3XlY_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_s3Xm1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yn8: // global
           _s3XlT::P64 = R2;
           _s3Xm1::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Yn9; else goto c3Yna;
       c3Yna: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ync; else goto c3Ynb;
       c3Ync: // global
           HpAlloc = 40;
           goto c3Yn9;
       c3Yn9: // global
           R2 = _s3XlT::P64;
           R1 = _s3Xm1::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ynb: // global
           _s3XlP::P64 = P64[_s3Xm1::P64 + 7];
           _s3XlQ::P64 = P64[_s3Xm1::P64 + 15];
           _s3XlS::P64 = P64[_s3Xm1::P64 + 23];
           I64[Hp - 32] = sat_s3XlY_info;
           P64[Hp - 24] = _s3XlP::P64;
           P64[Hp - 16] = _s3XlQ::P64;
           P64[Hp - 8] = _s3XlS::P64;
           P64[Hp] = _s3XlT::P64;
           I64[Sp - 8] = block_c3Yn5_info;
           R3 = Hp - 31;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xm1_info" {
     sat_s3Xm1_info:
         const sat_s3Xm1_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Yn5() //  [R1]
         { []
         }
     {offset
       c3Yn5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Ynf; else goto c3Yne;
       c3Ynf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yne: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yn5_info" {
     block_c3Yn5_info:
         const _c3Yn5;
         const 0;
         const 30;
 },
 sat_s3Xm2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yng: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Ynk; else goto c3Ynj;
       c3Ynk: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ynj: // global
           _s3XlP::P64 = P64[R1 + 7];
           _s3XlQ::P64 = P64[R1 + 15];
           _s3XlR::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3Xm1_info;
           P64[Hp - 16] = _s3XlP::P64;
           P64[Hp - 8] = _s3XlQ::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3XlR::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xm2_info" {
     sat_s3Xm2_info:
         const sat_s3Xm2_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 GHC.Read.$fRead(,)2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Ynl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Ynp; else goto c3Yno;
       c3Ynp: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Yno: // global
           I64[Hp - 56] = ds1_s3XlR_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3Xm2_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)2_info" {
     GHC.Read.$fRead(,)2_info:
         const GHC.Read.$fRead(,)2_entry;
         const 0;
         const 3302829850638;
         const 12884901911;
         const S3Y0k_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.820620928 UTC

[section ""data" . GHC.Read.$fRead(,,,)2_closure" {
     GHC.Read.$fRead(,,,)2_closure:
         const GHC.Read.$fRead(,,,)2_info;
         const 0;
 },
 ds1_s3Xm8_entry() //  [R1]
         { []
         }
     {offset
       c3Yod: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Yoe; else goto c3Yof;
       c3Yoe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Yof: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xm8_info" {
     ds1_s3Xm8_info:
         const ds1_s3Xm8_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+192;
 },
 sat_s3Xmk_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YoI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3YoM; else goto c3YoN;
       c3YoM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YoN: // global
           I64[Sp - 32] = block_c3YoF_info;
           _s3Xm9::P64 = P64[R1 + 7];
           _s3Xmc::P64 = P64[R1 + 15];
           _s3Xmd::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Xm9::P64;
           P64[Sp - 16] = _s3Xmc::P64;
           P64[Sp - 8] = _s3Xmd::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3YoR; else goto c3YoG;
       u3YoR: // global
           call _c3YoF(R1) args: 0, res: 0, upd: 0;
       c3YoG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xmk_info" {
     sat_s3Xmk_info:
         const sat_s3Xmk_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c3YoF() //  [R1]
         { []
         }
     {offset
       c3YoF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3YoQ; else goto c3YoP;
       c3YoQ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YoP: // global
           _s3Xmh::P64 = P64[R1 + 7];
           _s3Xmi::P64 = P64[R1 + 15];
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s3Xmh::P64;
           P64[Hp] = _s3Xmi::P64;
           R2 = Hp - 31;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YoF_info" {
     block_c3YoF_info:
         const _c3YoF;
         const 3;
         const 30;
 },
 sat_s3Xml_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YoS: // global
           _s3Xme::P64 = R2;
           _s3Xml::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YoT; else goto c3YoU;
       c3YoU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3YoW; else goto c3YoV;
       c3YoW: // global
           HpAlloc = 32;
           goto c3YoT;
       c3YoT: // global
           R2 = _s3Xme::P64;
           R1 = _s3Xml::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YoV: // global
           _s3Xm5::P64 = P64[_s3Xml::P64 + 7];
           _s3Xm6::P64 = P64[_s3Xml::P64 + 15];
           _s3Xm7::P64 = P64[_s3Xml::P64 + 23];
           _s3Xm9::P64 = P64[_s3Xml::P64 + 31];
           _s3Xmc::P64 = P64[_s3Xml::P64 + 39];
           _s3Xmd::P64 = P64[_s3Xml::P64 + 47];
           I64[Hp - 24] = sat_s3Xmk_info;
           P64[Hp - 16] = _s3Xm9::P64;
           P64[Hp - 8] = _s3Xmc::P64;
           P64[Hp] = _s3Xmd::P64;
           R4 = _s3Xm7::P64;
           R3 = _s3Xm6::P64;
           R2 = _s3Xm5::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xml_info" {
     sat_s3Xml_info:
         const sat_s3Xml_entry;
         const 6;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+192;
 },
 sat_s3Xmo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YoX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Yp1; else goto c3Yp2;
       c3Yp1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yp2: // global
           I64[Sp - 40] = block_c3Yoq_info;
           _s3Xm5::P64 = P64[R1 + 7];
           _s3Xm6::P64 = P64[R1 + 15];
           _s3Xm7::P64 = P64[R1 + 23];
           _s3Xm9::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3Xm5::P64;
           P64[Sp - 24] = _s3Xm6::P64;
           P64[Sp - 16] = _s3Xm7::P64;
           P64[Sp - 8] = _s3Xm9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Yp9; else goto c3Yor;
       u3Yp9: // global
           call _c3Yoq(R1) args: 0, res: 0, upd: 0;
       c3Yor: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xmo_info" {
     sat_s3Xmo_info:
         const sat_s3Xmo_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Yoq() //  [R1]
         { []
         }
     {offset
       c3Yoq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Yp5; else goto c3Yp4;
       c3Yp5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yp4: // global
           _s3Xmc::P64 = P64[R1 + 7];
           _s3Xmd::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_s3Xml_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s3Xmc::P64;
           P64[Hp] = _s3Xmd::P64;
           I64[Sp + 32] = block_c3YoY_info;
           R3 = Hp - 47;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yoq_info" {
     block_c3Yoq_info:
         const _c3Yoq;
         const 4;
         const 3302829850654;
         const S3Y0k_srt+120;
 },
 _c3YoY() //  [R1]
         { []
         }
     {offset
       c3YoY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Yp8; else goto c3Yp7;
       c3Yp8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yp7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YoY_info" {
     block_c3YoY_info:
         const _c3YoY;
         const 0;
         const 30;
 },
 sat_s3Xmp_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ypa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Ype; else goto c3Ypd;
       c3Ype: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ypd: // global
           _s3Xm5::P64 = P64[R1 + 7];
           _s3Xm6::P64 = P64[R1 + 15];
           _s3Xm7::P64 = P64[R1 + 23];
           _s3Xm8::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3Xmo_info;
           P64[Hp - 24] = _s3Xm5::P64;
           P64[Hp - 16] = _s3Xm6::P64;
           P64[Hp - 8] = _s3Xm7::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3Xm8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xmp_info" {
     sat_s3Xmp_info:
         const sat_s3Xmp_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 GHC.Read.$fRead(,,,)2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Ypf: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Ypj; else goto c3Ypi;
       c3Ypj: // global
           HpAlloc = 80;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)2_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ypi: // global
           I64[Hp - 72] = ds1_s3Xm8_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R6;
           I64[Hp - 32] = sat_s3Xmp_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = Hp - 72;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)2_info" {
     GHC.Read.$fRead(,,,)2_info:
         const GHC.Read.$fRead(,,,)2_entry;
         const 0;
         const 7700876361742;
         const 21474836505;
         const S3Y0k_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.845141431 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)2_closure" {
     GHC.Read.$fRead(,,,,,,,)2_closure:
         const GHC.Read.$fRead(,,,,,,,)2_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)2_slow() //  [R1]
         { []
         }
     {offset
       c3Yqf: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 40, res: 0, upd: 8;
     }
 },
 ds1_s3Xmz_entry() //  [R1]
         { []
         }
     {offset
       c3Yqn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Yqo; else goto c3Yqp;
       c3Yqo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Yqp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xmz_info" {
     ds1_s3Xmz_info:
         const ds1_s3Xmz_entry;
         const 5;
         const 4294967311;
         const S3Y0k_srt+200;
 },
 sat_s3XmP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YqS: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3YqW; else goto c3YqX;
       c3YqW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YqX: // global
           I64[Sp - 48] = block_c3YqP_info;
           _s3XmA::P64 = P64[R1 + 7];
           _s3XmD::P64 = P64[R1 + 15];
           _s3XmE::P64 = P64[R1 + 23];
           _s3XmF::P64 = P64[R1 + 31];
           _s3XmG::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 40] = _s3XmA::P64;
           P64[Sp - 32] = _s3XmD::P64;
           P64[Sp - 24] = _s3XmE::P64;
           P64[Sp - 16] = _s3XmF::P64;
           P64[Sp - 8] = _s3XmG::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3Yr1; else goto c3YqQ;
       u3Yr1: // global
           call _c3YqP(R1) args: 0, res: 0, upd: 0;
       c3YqQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XmP_info" {
     sat_s3XmP_info:
         const sat_s3XmP_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c3YqP() //  [R1]
         { []
         }
     {offset
       c3YqP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Yr0; else goto c3YqZ;
       c3Yr0: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YqZ: // global
           _s3XmK::P64 = P64[R1 + 7];
           _s3XmL::P64 = P64[R1 + 15];
           _s3XmM::P64 = P64[R1 + 23];
           _s3XmN::P64 = P64[R1 + 31];
           I64[Hp - 64] = (,,,,,,,)_con_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _s3XmK::P64;
           P64[Hp - 16] = _s3XmL::P64;
           P64[Hp - 8] = _s3XmM::P64;
           P64[Hp] = _s3XmN::P64;
           R2 = Hp - 63;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YqP_info" {
     block_c3YqP_info:
         const _c3YqP;
         const 5;
         const 30;
 },
 sat_s3XmQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yr2: // global
           _s3XmH::P64 = R2;
           _s3XmQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Yr3; else goto c3Yr4;
       c3Yr4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Yr6; else goto c3Yr5;
       c3Yr6: // global
           HpAlloc = 48;
           goto c3Yr3;
       c3Yr3: // global
           R2 = _s3XmH::P64;
           R1 = _s3XmQ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yr5: // global
           _s3Xmu::P64 = P64[_s3XmQ::P64 + 7];
           _s3Xmv::P64 = P64[_s3XmQ::P64 + 15];
           _s3Xmw::P64 = P64[_s3XmQ::P64 + 23];
           _s3Xmx::P64 = P64[_s3XmQ::P64 + 31];
           _s3Xmy::P64 = P64[_s3XmQ::P64 + 39];
           _s3XmA::P64 = P64[_s3XmQ::P64 + 47];
           _s3XmD::P64 = P64[_s3XmQ::P64 + 55];
           _s3XmE::P64 = P64[_s3XmQ::P64 + 63];
           _s3XmF::P64 = P64[_s3XmQ::P64 + 71];
           _s3XmG::P64 = P64[_s3XmQ::P64 + 79];
           I64[Hp - 40] = sat_s3XmP_info;
           P64[Hp - 32] = _s3XmA::P64;
           P64[Hp - 24] = _s3XmD::P64;
           P64[Hp - 16] = _s3XmE::P64;
           P64[Hp - 8] = _s3XmF::P64;
           P64[Hp] = _s3XmG::P64;
           R6 = _s3Xmy::P64;
           R5 = _s3Xmx::P64;
           R4 = _s3Xmw::P64;
           R3 = _s3Xmv::P64;
           R2 = _s3Xmu::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XmQ_info" {
     sat_s3XmQ_info:
         const sat_s3XmQ_entry;
         const 10;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+200;
 },
 sat_s3XmT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yr7: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3Yrb; else goto c3Yrc;
       c3Yrb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yrc: // global
           I64[Sp - 56] = block_c3YqA_info;
           _s3Xmu::P64 = P64[R1 + 7];
           _s3Xmv::P64 = P64[R1 + 15];
           _s3Xmw::P64 = P64[R1 + 23];
           _s3Xmx::P64 = P64[R1 + 31];
           _s3Xmy::P64 = P64[R1 + 39];
           _s3XmA::P64 = P64[R1 + 47];
           R1 = R2;
           P64[Sp - 48] = _s3Xmu::P64;
           P64[Sp - 40] = _s3Xmv::P64;
           P64[Sp - 32] = _s3Xmw::P64;
           P64[Sp - 24] = _s3Xmx::P64;
           P64[Sp - 16] = _s3Xmy::P64;
           P64[Sp - 8] = _s3XmA::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u3Yrj; else goto c3YqB;
       u3Yrj: // global
           call _c3YqA(R1) args: 0, res: 0, upd: 0;
       c3YqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XmT_info" {
     sat_s3XmT_info:
         const sat_s3XmT_entry;
         const 6;
         const 5501853106184;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YqA() //  [R1]
         { []
         }
     {offset
       c3YqA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3Yrf; else goto c3Yre;
       c3Yrf: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yre: // global
           _s3XmD::P64 = P64[R1 + 7];
           _s3XmE::P64 = P64[R1 + 15];
           _s3XmF::P64 = P64[R1 + 23];
           _s3XmG::P64 = P64[R1 + 31];
           I64[Hp - 80] = sat_s3XmQ_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = _s3XmD::P64;
           P64[Hp - 16] = _s3XmE::P64;
           P64[Hp - 8] = _s3XmF::P64;
           P64[Hp] = _s3XmG::P64;
           I64[Sp + 48] = block_c3Yr8_info;
           R3 = Hp - 79;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 48;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YqA_info" {
     block_c3YqA_info:
         const _c3YqA;
         const 6;
         const 5501853106206;
         const S3Y0k_srt+120;
 },
 _c3Yr8() //  [R1]
         { []
         }
     {offset
       c3Yr8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Yri; else goto c3Yrh;
       c3Yri: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yrh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yr8_info" {
     block_c3Yr8_info:
         const _c3Yr8;
         const 0;
         const 30;
 },
 sat_s3XmU_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yrk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Yro; else goto c3Yrn;
       c3Yro: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yrn: // global
           _s3Xmu::P64 = P64[R1 + 7];
           _s3Xmv::P64 = P64[R1 + 15];
           _s3Xmw::P64 = P64[R1 + 23];
           _s3Xmx::P64 = P64[R1 + 31];
           _s3Xmy::P64 = P64[R1 + 39];
           _s3Xmz::P64 = P64[R1 + 47];
           I64[Hp - 48] = sat_s3XmT_info;
           P64[Hp - 40] = _s3Xmu::P64;
           P64[Hp - 32] = _s3Xmv::P64;
           P64[Hp - 24] = _s3Xmw::P64;
           P64[Hp - 16] = _s3Xmx::P64;
           P64[Hp - 8] = _s3Xmy::P64;
           P64[Hp] = R2;
           R2 = Hp - 47;
           R1 = _s3Xmz::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XmU_info" {
     sat_s3XmU_info:
         const sat_s3XmU_entry;
         const 6;
         const 5501853106184;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 GHC.Read.$fRead(,,,,,,,)2_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Yrp: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3Yrt; else goto c3Yrs;
       c3Yrt: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,)2_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3Yrs: // global
           I64[Hp - 104] = ds1_s3Xmz_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           _s3Xmy::P64 = P64[Sp + 24];
           P64[Hp - 56] = _s3Xmy::P64;
           I64[Hp - 48] = sat_s3XmU_info;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s3Xmy::P64;
           P64[Hp] = Hp - 104;
           R1 = Hp - 47;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)2_info" {
     GHC.Read.$fRead(,,,,,,,)2_info:
         const GHC.Read.$fRead(,,,,,,,)2_entry;
         const 0;
         const 14297946128398;
         const 38654705664;
         const S3Y0k_srt+120;
         const 9;
         const GHC.Read.$fRead(,,,,,,,)2_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.869817058 UTC

[section ""data" . GHC.Read.$wskipSpacesThenP_closure" {
     GHC.Read.$wskipSpacesThenP_closure:
         const GHC.Read.$wskipSpacesThenP_info;
 },
 sat_s3Xnc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ytb: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xnc_info" {
     sat_s3Xnc_info:
         const sat_s3Xnc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl2_s3Xna_entry() //  [R1]
         { []
         }
     {offset
       c3Yte: // global
           _s3Xna::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ytf; else goto c3Ytg;
       c3Ytg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Yti; else goto c3Yth;
       c3Yti: // global
           HpAlloc = 16;
           goto c3Ytf;
       c3Ytf: // global
           R1 = _s3Xna::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Yth: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Xna::P64;
           _s3XmY::P64 = P64[_s3Xna::P64 + 16];
           _s3Xn0::P64 = P64[_s3Xna::P64 + 24];
           _s3Xn1::P64 = P64[_s3Xna::P64 + 32];
           _s3Xn4::P64 = P64[_s3Xna::P64 + 40];
           I64[Hp - 8] = sat_s3Xnc_info;
           P64[Hp] = _s3Xn1::P64;
           R4 = Hp - 7;
           R3 = _s3Xn0::P64;
           R2 = _s3Xn4::P64;
           R1 = _s3XmY::P64;
           Sp = Sp - 16;
           call skip_s3XmY_entry(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3Xna_info" {
     lvl2_s3Xna_info:
         const lvl2_s3Xna_entry;
         const 4;
         const 15;
 },
 sat_s3Xne_entry() //  [R1]
         { []
         }
     {offset
       c3Yto: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xne_info" {
     sat_s3Xne_info:
         const sat_s3Xne_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 skip_s3XmY_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c3Ytv: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Ytw; else goto c3Ytx;
       c3Ytw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Ytx: // global
           I64[Sp - 40] = block_c3YsG_info;
           _s3XmY::P64 = R1;
           _s3XmV::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 32] = _s3XmV::P64;
           P64[Sp - 24] = _s3XmY::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Yup; else goto c3YsH;
       u3Yup: // global
           call _c3YsG(R1) args: 0, res: 0, upd: 0;
       c3YsH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . skip_s3XmY_info" {
     skip_s3XmY_info:
         const skip_s3XmY_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 _c3YsG() //  [R1]
         { []
         }
     {offset
       c3YsG: // global
           if (R1 & 7 == 1) goto u3Yue; else goto c3Ytt;
       u3Yue: // global
           Sp = Sp + 8;
           call _c3Yu5() args: 0, res: 0, upd: 0;
       c3Ytt: // global
           I64[Sp - 8] = block_c3YsM_info;
           _s3Xn4::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Xn4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Yuh; else goto c3YsN;
       u3Yuh: // global
           call _c3YsM(R1) args: 0, res: 0, upd: 0;
       c3YsN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YsG_info" {
     block_c3YsG_info:
         const _c3YsG;
         const 4;
         const 30;
 },
 _c3YsM() //  [R1]
         { []
         }
     {offset
       c3YsM: // global
           _s3Xn6::I64 = I64[R1 + 7];
           if (_s3Xn6::I64 > 887) goto c3YtT; else goto c3Yud;
       c3YtT: // global
           (_s3Xnk::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(_s3Xn6::I64);
           if (_s3Xnk::I64 != 0) goto u3Yum; else goto u3Yuf;
       u3Yuf: // global
           Sp = Sp + 16;
           goto u3Yuo;
       c3Yud: // global
           if (_s3Xn6::I64 == 32) goto u3Yum; else goto c3Yub;
       c3Yub: // global
           if ((_s3Xn6::I64 + -9) <= 4) goto u3Yum; else goto c3Yu8;
       c3Yu8: // global
           if (_s3Xn6::I64 == 160) goto u3Yum; else goto u3Yug;
       u3Yum: // global
           call _c3Yt0() args: 0, res: 0, upd: 0;
       u3Yug: // global
           Sp = Sp + 16;
           goto u3Yuo;
       u3Yuo: // global
           call _c3Yu5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3YsM_info" {
     block_c3YsM_info:
         const _c3YsM;
         const 5;
         const 30;
 },
 _c3Yu5() //  []
         { []
         }
     {offset
       c3Yu5: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3Yt0() //  []
         { []
         }
     {offset
       c3Yt0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3YtF; else goto c3YtE;
       c3YtF: // global
           HpAlloc = 80;
           I64[Sp] = block_c3Yt0_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c3YtE: // global
           I64[Hp - 72] = lvl2_s3Xna_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = sat_s3Xne_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yt0_info" {
     block_c3Yt0_info:
         const _c3Yt0;
         const 133;
         const 30;
 },
 sat_s3Xnr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yuv: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = R2;
           R1 = P64[R1 + 23];
           call skip_s3XmY_entry(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xnr_info" {
     sat_s3Xnr_info:
         const sat_s3Xnr_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 GHC.Read.$wskipSpacesThenP_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Yuy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3YuC; else goto c3YuB;
       c3YuC: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$wskipSpacesThenP_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YuB: // global
           I64[Hp - 40] = skip_s3XmY_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3Xnr_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 37;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$wskipSpacesThenP_info" {
     GHC.Read.$wskipSpacesThenP_info:
         const GHC.Read.$wskipSpacesThenP_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.888836966 UTC

[section ""data" . GHC.Read.$fRead()5_closure" {
     GHC.Read.$fRead()5_closure:
         const GHC.Read.$fRead()5_info;
 },
 GHC.Read.$fRead()5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3YvG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YvH; else goto c3YvI;
       c3YvH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead()5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YvI: // global
           I64[Sp - 8] = block_c3YvD_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()5_info" {
     GHC.Read.$fRead()5_info:
         const GHC.Read.$fRead()5_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3YvD() //  [R1]
         { []
         }
     {offset
       c3YvD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YvL; else goto c3YvK;
       c3YvL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YvK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YvD_info" {
     block_c3YvD_info:
         const _c3YvD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.897767712 UTC

[section ""data" . GHC.Read.$wparen'_closure" {
     GHC.Read.$wparen'_closure:
         const GHC.Read.$wparen'_info;
 },
 sat_s3XnJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ywo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Ywp; else goto c3Ywq;
       c3Ywp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ywq: // global
           I64[Sp - 16] = block_c3Ywl_info;
           _s3XnE::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XnE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Ywy; else goto c3Ywm;
       u3Ywy: // global
           call _c3Ywl(R1) args: 0, res: 0, upd: 0;
       c3Ywm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XnJ_info" {
     sat_s3XnJ_info:
         const sat_s3XnJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Ywl() //  [R1]
         { []
         }
     {offset
       c3Ywl: // global
           if (I64[R1 + 7] == 41) goto c3Ywx; else goto c3Yww;
       c3Ywx: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Yww: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ywl_info" {
     block_c3Ywl_info:
         const _c3Ywl;
         const 1;
         const 30;
 },
 sat_s3XnK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YwA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3YwE; else goto c3YwD;
       c3YwE: // global
           HpAlloc = 64;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YwD: // global
           _s3XnB::P64 = P64[R1 + 6];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = _s3XnB::P64;
           I64[Hp - 24] = sat_s3XnJ_info;
           P64[Hp - 16] = Hp - 56;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XnK_info" {
     sat_s3XnK_info:
         const sat_s3XnK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s3XnN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YwI: // global
           _s3XnB::P64 = R2;
           _s3XnN::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3YwJ; else goto c3YwK;
       c3YwK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YwM; else goto c3YwL;
       c3YwM: // global
           HpAlloc = 16;
           goto c3YwJ;
       c3YwJ: // global
           R2 = _s3XnB::P64;
           R1 = _s3XnN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YwL: // global
           _s3Xny::P64 = P64[_s3XnN::P64 + 7];
           _s3Xnz::P64 = P64[_s3XnN::P64 + 15];
           I64[Hp - 8] = sat_s3XnK_info;
           P64[Hp] = _s3XnB::P64;
           I64[Sp - 8] = block_c3YwF_info;
           R4 = _s3Xnz::P64;
           R3 = _s3Xny::P64;
           R2 = Hp - 6;
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XnN_info" {
     sat_s3XnN_info:
         const sat_s3XnN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c3YwF() //  [R1]
         { []
         }
     {offset
       c3YwF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YwP; else goto c3YwO;
       c3YwP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YwO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YwF_info" {
     block_c3YwF_info:
         const _c3YwF;
         const 0;
         const 30;
 },
 lvl2_s3XnA_entry() //  [R1]
         { []
         }
     {offset
       c3YwQ: // global
           _s3XnA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YwR; else goto c3YwS;
       c3YwS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3YwU; else goto c3YwT;
       c3YwU: // global
           HpAlloc = 24;
           goto c3YwR;
       c3YwR: // global
           R1 = _s3XnA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YwT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XnA::P64;
           _s3Xnx::P64 = P64[_s3XnA::P64 + 16];
           _s3Xny::P64 = P64[_s3XnA::P64 + 24];
           _s3Xnz::P64 = P64[_s3XnA::P64 + 32];
           I64[Hp - 16] = sat_s3XnN_info;
           P64[Hp - 8] = _s3Xny::P64;
           P64[Hp] = _s3Xnz::P64;
           R3 = Hp - 15;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R1 = _s3Xnx::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3XnA_info" {
     lvl2_s3XnA_info:
         const lvl2_s3XnA_entry;
         const 3;
         const 15;
 },
 sat_s3XnS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Yx3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Yx4; else goto c3Yx5;
       c3Yx4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Yx5: // global
           I64[Sp - 16] = block_c3Yx0_info;
           _s3XnA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XnA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3Yxd; else goto c3Yx1;
       u3Yxd: // global
           call _c3Yx0(R1) args: 0, res: 0, upd: 0;
       c3Yx1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XnS_info" {
     sat_s3XnS_info:
         const sat_s3XnS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3Yx0() //  [R1]
         { []
         }
     {offset
       c3Yx0: // global
           if (I64[R1 + 7] == 40) goto c3Yxc; else goto c3Yxb;
       c3Yxc: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3Yxb: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yx0_info" {
     block_c3Yx0_info:
         const _c3Yx0;
         const 1;
         const 30;
 },
 GHC.Read.$wparen'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Yxe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Yxi; else goto c3Yxh;
       c3Yxi: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$wparen'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Yxh: // global
           I64[Hp - 48] = lvl2_s3XnA_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s3XnS_info;
           P64[Hp] = Hp - 48;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$wparen'_info" {
     GHC.Read.$wparen'_info:
         const GHC.Read.$wparen'_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.916422235 UTC

[section ""data" . GHC.Read.paren2_closure" {
     GHC.Read.paren2_closure:
         const GHC.Read.paren2_info;
 },
 GHC.Read.paren2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Yyo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Yyp; else goto c3Yyq;
       c3Yyp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.paren2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Yyq: // global
           I64[Sp - 8] = block_c3Yyl_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.paren2_info" {
     GHC.Read.paren2_info:
         const GHC.Read.paren2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3Yyl() //  [R1]
         { []
         }
     {offset
       c3Yyl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Yyt; else goto c3Yys;
       c3Yyt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yys: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Yyl_info" {
     block_c3Yyl_info:
         const _c3Yyl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.922706401 UTC

[section ""data" . GHC.Read.paren1_closure" {
     GHC.Read.paren1_closure:
         const GHC.Read.paren1_info;
 },
 sat_s3Xo1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YyO: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.paren2_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xo1_info" {
     sat_s3Xo1_info:
         const sat_s3Xo1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.paren1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3YyU: // global
           _s3Xo0::P64 = R4;
           _s3XnZ::P64 = R3;
           _s3XnY::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c3YyV; else goto c3YyW;
       c3YyW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YyY; else goto c3YyX;
       c3YyY: // global
           HpAlloc = 16;
           goto c3YyV;
       c3YyV: // global
           R4 = _s3Xo0::P64;
           R3 = _s3XnZ::P64;
           R2 = _s3XnY::P64;
           R1 = GHC.Read.paren1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YyX: // global
           I64[Hp - 8] = sat_s3Xo1_info;
           P64[Hp] = _s3XnY::P64;
           I64[Sp - 8] = block_c3YyR_info;
           R4 = _s3Xo0::P64;
           R3 = _s3XnZ::P64;
           R2 = Hp - 6;
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.paren1_info" {
     GHC.Read.paren1_info:
         const GHC.Read.paren1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3YyR() //  [R1]
         { []
         }
     {offset
       c3YyR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Yz1; else goto c3Yz0;
       c3Yz1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Yz0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YyR_info" {
     block_c3YyR_info:
         const _c3YyR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.929890409 UTC

[section ""data" . GHC.Read.paren_closure" {
     GHC.Read.paren_closure:
         const GHC.Read.paren_info;
 },
 GHC.Read.paren_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3Yzl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.paren1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.paren_info" {
     GHC.Read.paren_info:
         const GHC.Read.paren_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.936158691 UTC

[section ""data" . GHC.Read.list3_closure" {
     GHC.Read.list3_closure:
         const GHC.Read.list3_info;
         const 0;
 },
 sat_s3Xof_entry() //  [R1]
         { []
         }
     {offset
       c3YzP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3YzQ; else goto c3YzR;
       c3YzQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YzR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3YzM_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Xof_info" {
     sat_s3Xof_info:
         const sat_s3Xof_entry;
         const 3;
         const 15;
 },
 _c3YzM() //  [R1]
         { []
         }
     {offset
       c3YzM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YzU; else goto c3YzT;
       c3YzU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3YzT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3YzM_info" {
     block_c3YzM_info:
         const _c3YzM;
         const 0;
         const 30;
 },
 sat_s3Xog_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YzX: // global
           _s3Xob::P64 = R2;
           _s3Xog::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YzY; else goto c3YzZ;
       c3YzZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3YA1; else goto c3YA0;
       c3YA1: // global
           HpAlloc = 40;
           goto c3YzY;
       c3YzY: // global
           R2 = _s3Xob::P64;
           R1 = _s3Xog::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YA0: // global
           _s3Xo8::P64 = P64[_s3Xog::P64 + 7];
           _s3Xo9::P64 = P64[_s3Xog::P64 + 15];
           _s3Xoa::P64 = P64[_s3Xog::P64 + 23];
           I64[Hp - 32] = sat_s3Xof_info;
           P64[Hp - 16] = _s3Xo8::P64;
           P64[Hp - 8] = _s3Xo9::P64;
           P64[Hp] = _s3Xob::P64;
           I64[Sp - 16] = block_c3YzV_info;
           R2 = _s3Xob::P64;
           R1 = _s3Xoa::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xog_info" {
     sat_s3Xog_info:
         const sat_s3Xog_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+72;
 },
 _c3YzV() //  [R1]
         { []
         }
     {offset
       c3YzV: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YzV_info" {
     block_c3YzV_info:
         const _c3YzV;
         const 1;
         const 4294967326;
         const S3Y0k_srt+72;
 },
 optional_s3Xo7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YA5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3YA9; else goto c3YA8;
       c3YA9: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YA8: // global
           _s3Xo4::P64 = P64[R1 + 7];
           _s3Xo8::P64 = P64[R1 + 15];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3Xo4::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3Xog_info;
           P64[Hp - 16] = _s3Xo8::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 56;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . optional_s3Xo7_info" {
     optional_s3Xo7_info:
         const optional_s3Xo7_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3Y0k_srt+72;
 },
 optional1_s3Xo8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YAh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YAi; else goto c3YAj;
       c3YAi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YAj: // global
           I64[Sp - 8] = block_c3YAe_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . optional1_s3Xo8_info" {
     optional1_s3Xo8_info:
         const optional1_s3Xo8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YAe() //  [R1]
         { []
         }
     {offset
       c3YAe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YAm; else goto c3YAl;
       c3YAm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YAl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YAe_info" {
     block_c3YAe_info:
         const _c3YAe;
         const 0;
         const 30;
 },
 GHC.Read.list3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3YAn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3YAr; else goto c3YAq;
       c3YAr: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.list3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YAq: // global
           I64[Hp - 32] = optional_s3Xo7_info;
           P64[Hp - 24] = R2;
           _c3Yzx::P64 = Hp - 6;
           P64[Hp - 16] = _c3Yzx::P64;
           I64[Hp - 8] = optional1_s3Xo8_info;
           P64[Hp] = Hp - 31;
           _s3Xo5::P64 = R3;
           R3 = R4;
           R2 = _s3Xo5::P64;
           R1 = _c3Yzx::P64;
           call optional1_s3Xo8_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.list3_info" {
     GHC.Read.list3_info:
         const GHC.Read.list3_entry;
         const 0;
         const 1125904201809934;
         const 12884901911;
         const S3Y0k_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.952711443 UTC

[section ""data" . GHC.Read.parens_closure" {
     GHC.Read.parens_closure:
         const GHC.Read.parens_info;
         const 0;
 },
 GHC.Read.parens_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3YBf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.parens_info" {
     GHC.Read.parens_info:
         const GHC.Read.parens_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S3Y0k_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:51.970810658 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3YBn: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 104, res: 0, upd: 8;
     }
 },
 ds1_s3XoE_entry() //  [R1]
         { []
         }
     {offset
       c3YBA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3YBB; else goto c3YBC;
       c3YBB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YBC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3XoE_info" {
     ds1_s3XoE_info:
         const ds1_s3XoE_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+208;
 },
 sat_s3Xp5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YCx: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3YCB; else goto c3YCA;
       c3YCB: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YCA: // global
           _s3XoF::P64 = P64[R1 + 7];
           _s3XoI::P64 = P64[R1 + 15];
           _s3XoJ::P64 = P64[R1 + 23];
           _s3XoK::P64 = P64[R1 + 31];
           _s3XoL::P64 = P64[R1 + 39];
           _s3XoM::P64 = P64[R1 + 47];
           _s3XoN::P64 = P64[R1 + 55];
           _s3XoO::P64 = P64[R1 + 63];
           _s3XoP::P64 = P64[R1 + 71];
           _s3XoT::P64 = P64[R1 + 79];
           _s3XoU::P64 = P64[R1 + 87];
           _s3XoV::P64 = P64[R1 + 95];
           _s3XoW::P64 = P64[R1 + 103];
           _s3Xp0::P64 = P64[R1 + 111];
           _s3Xp1::P64 = P64[R1 + 119];
           I64[Hp - 120] = (,,,,,,,,,,,,,,)_con_info;
           P64[Hp - 112] = _s3XoI::P64;
           P64[Hp - 104] = _s3XoJ::P64;
           P64[Hp - 96] = _s3XoK::P64;
           P64[Hp - 88] = _s3XoL::P64;
           P64[Hp - 80] = _s3XoM::P64;
           P64[Hp - 72] = _s3XoN::P64;
           P64[Hp - 64] = _s3XoO::P64;
           P64[Hp - 56] = _s3XoP::P64;
           P64[Hp - 48] = _s3XoT::P64;
           P64[Hp - 40] = _s3XoU::P64;
           P64[Hp - 32] = _s3XoV::P64;
           P64[Hp - 24] = _s3XoW::P64;
           P64[Hp - 16] = _s3Xp0::P64;
           P64[Hp - 8] = _s3Xp1::P64;
           P64[Hp] = R2;
           R2 = Hp - 119;
           R1 = _s3XoF::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xp5_info" {
     sat_s3Xp5_info:
         const sat_s3Xp5_entry;
         const 15;
         const 8;
         const 4294967301;
 },
 sat_s3Xp6_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YCC: // global
           _s3Xp2::P64 = R2;
           _s3Xp6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3YCD; else goto c3YCE;
       c3YCE: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3YCG; else goto c3YCF;
       c3YCG: // global
           HpAlloc = 128;
           goto c3YCD;
       c3YCD: // global
           R2 = _s3Xp2::P64;
           R1 = _s3Xp6::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YCF: // global
           _s3Xoz::P64 = P64[_s3Xp6::P64 + 7];
           _s3XoD::P64 = P64[_s3Xp6::P64 + 15];
           _s3XoF::P64 = P64[_s3Xp6::P64 + 23];
           _s3XoI::P64 = P64[_s3Xp6::P64 + 31];
           _s3XoJ::P64 = P64[_s3Xp6::P64 + 39];
           _s3XoK::P64 = P64[_s3Xp6::P64 + 47];
           _s3XoL::P64 = P64[_s3Xp6::P64 + 55];
           _s3XoM::P64 = P64[_s3Xp6::P64 + 63];
           _s3XoN::P64 = P64[_s3Xp6::P64 + 71];
           _s3XoO::P64 = P64[_s3Xp6::P64 + 79];
           _s3XoP::P64 = P64[_s3Xp6::P64 + 87];
           _s3XoT::P64 = P64[_s3Xp6::P64 + 95];
           _s3XoU::P64 = P64[_s3Xp6::P64 + 103];
           _s3XoV::P64 = P64[_s3Xp6::P64 + 111];
           _s3XoW::P64 = P64[_s3Xp6::P64 + 119];
           _s3Xp0::P64 = P64[_s3Xp6::P64 + 127];
           _s3Xp1::P64 = P64[_s3Xp6::P64 + 135];
           I64[Hp - 120] = sat_s3Xp5_info;
           P64[Hp - 112] = _s3XoF::P64;
           P64[Hp - 104] = _s3XoI::P64;
           P64[Hp - 96] = _s3XoJ::P64;
           P64[Hp - 88] = _s3XoK::P64;
           P64[Hp - 80] = _s3XoL::P64;
           P64[Hp - 72] = _s3XoM::P64;
           P64[Hp - 64] = _s3XoN::P64;
           P64[Hp - 56] = _s3XoO::P64;
           P64[Hp - 48] = _s3XoP::P64;
           P64[Hp - 40] = _s3XoT::P64;
           P64[Hp - 32] = _s3XoU::P64;
           P64[Hp - 24] = _s3XoV::P64;
           P64[Hp - 16] = _s3XoW::P64;
           P64[Hp - 8] = _s3Xp0::P64;
           P64[Hp] = _s3Xp1::P64;
           R2 = _s3Xoz::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3XoD::P64;
           P64[Sp - 8] = Hp - 119;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xp6_info" {
     sat_s3Xp6_info:
         const sat_s3Xp6_entry;
         const 17;
         const 8;
         const 4294967301;
 },
 sat_s3Xp9_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YCH: // global
           if ((Sp + -128) < SpLim) (likely: False) goto c3YCL; else goto c3YCM;
       c3YCL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YCM: // global
           I64[Sp - 128] = block_c3YCh_info;
           _s3Xoz::P64 = P64[R1 + 7];
           _s3XoD::P64 = P64[R1 + 15];
           _s3XoF::P64 = P64[R1 + 23];
           _s3XoI::P64 = P64[R1 + 31];
           _s3XoJ::P64 = P64[R1 + 39];
           _s3XoK::P64 = P64[R1 + 47];
           _s3XoL::P64 = P64[R1 + 55];
           _s3XoM::P64 = P64[R1 + 63];
           _s3XoN::P64 = P64[R1 + 71];
           _s3XoO::P64 = P64[R1 + 79];
           _s3XoP::P64 = P64[R1 + 87];
           _s3XoT::P64 = P64[R1 + 95];
           _s3XoU::P64 = P64[R1 + 103];
           _s3XoV::P64 = P64[R1 + 111];
           _s3XoW::P64 = P64[R1 + 119];
           R1 = R2;
           P64[Sp - 120] = _s3Xoz::P64;
           P64[Sp - 112] = _s3XoD::P64;
           P64[Sp - 104] = _s3XoF::P64;
           P64[Sp - 96] = _s3XoI::P64;
           P64[Sp - 88] = _s3XoJ::P64;
           P64[Sp - 80] = _s3XoK::P64;
           P64[Sp - 72] = _s3XoL::P64;
           P64[Sp - 64] = _s3XoM::P64;
           P64[Sp - 56] = _s3XoN::P64;
           P64[Sp - 48] = _s3XoO::P64;
           P64[Sp - 40] = _s3XoP::P64;
           P64[Sp - 32] = _s3XoT::P64;
           P64[Sp - 24] = _s3XoU::P64;
           P64[Sp - 16] = _s3XoV::P64;
           P64[Sp - 8] = _s3XoW::P64;
           Sp = Sp - 128;
           if (R1 & 7 != 0) goto u3YCT; else goto c3YCi;
       u3YCT: // global
           call _c3YCh(R1) args: 0, res: 0, upd: 0;
       c3YCi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xp9_info" {
     sat_s3Xp9_info:
         const sat_s3Xp9_entry;
         const 15;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YCh() //  [R1]
         { []
         }
     {offset
       c3YCh: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3YCP; else goto c3YCO;
       c3YCP: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YCO: // global
           _s3Xp0::P64 = P64[R1 + 7];
           _s3Xp1::P64 = P64[R1 + 15];
           I64[Hp - 136] = sat_s3Xp6_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = _s3Xp0::P64;
           P64[Hp] = _s3Xp1::P64;
           I64[Sp + 120] = block_c3YCI_info;
           R3 = Hp - 135;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 120;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YCh_info" {
     block_c3YCh_info:
         const _c3YCh;
         const 15;
         const 1103806595102;
         const S3Y0k_srt+120;
 },
 _c3YCI() //  [R1]
         { []
         }
     {offset
       c3YCI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YCS; else goto c3YCR;
       c3YCS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YCR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YCI_info" {
     block_c3YCI_info:
         const _c3YCI;
         const 0;
         const 30;
 },
 sat_s3Xpa_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YCU: // global
           _s3XoX::P64 = R2;
           _s3Xpa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YCV; else goto c3YCW;
       c3YCW: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3YCY; else goto c3YCX;
       c3YCY: // global
           HpAlloc = 128;
           goto c3YCV;
       c3YCV: // global
           R2 = _s3XoX::P64;
           R1 = _s3Xpa::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YCX: // global
           _s3Xox::P64 = P64[_s3Xpa::P64 + 7];
           _s3Xoy::P64 = P64[_s3Xpa::P64 + 15];
           _s3Xoz::P64 = P64[_s3Xpa::P64 + 23];
           _s3XoD::P64 = P64[_s3Xpa::P64 + 31];
           _s3XoF::P64 = P64[_s3Xpa::P64 + 39];
           _s3XoI::P64 = P64[_s3Xpa::P64 + 47];
           _s3XoJ::P64 = P64[_s3Xpa::P64 + 55];
           _s3XoK::P64 = P64[_s3Xpa::P64 + 63];
           _s3XoL::P64 = P64[_s3Xpa::P64 + 71];
           _s3XoM::P64 = P64[_s3Xpa::P64 + 79];
           _s3XoN::P64 = P64[_s3Xpa::P64 + 87];
           _s3XoO::P64 = P64[_s3Xpa::P64 + 95];
           _s3XoP::P64 = P64[_s3Xpa::P64 + 103];
           _s3XoT::P64 = P64[_s3Xpa::P64 + 111];
           _s3XoU::P64 = P64[_s3Xpa::P64 + 119];
           _s3XoV::P64 = P64[_s3Xpa::P64 + 127];
           _s3XoW::P64 = P64[_s3Xpa::P64 + 135];
           I64[Hp - 120] = sat_s3Xp9_info;
           P64[Hp - 112] = _s3Xoz::P64;
           P64[Hp - 104] = _s3XoD::P64;
           P64[Hp - 96] = _s3XoF::P64;
           P64[Hp - 88] = _s3XoI::P64;
           P64[Hp - 80] = _s3XoJ::P64;
           P64[Hp - 72] = _s3XoK::P64;
           P64[Hp - 64] = _s3XoL::P64;
           P64[Hp - 56] = _s3XoM::P64;
           P64[Hp - 48] = _s3XoN::P64;
           P64[Hp - 40] = _s3XoO::P64;
           P64[Hp - 32] = _s3XoP::P64;
           P64[Hp - 24] = _s3XoT::P64;
           P64[Hp - 16] = _s3XoU::P64;
           P64[Hp - 8] = _s3XoV::P64;
           P64[Hp] = _s3XoW::P64;
           R4 = _s3XoD::P64;
           R3 = _s3Xoy::P64;
           R2 = _s3Xox::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 119;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xpa_info" {
     sat_s3Xpa_info:
         const sat_s3Xpa_entry;
         const 17;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 sat_s3Xpd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YCZ: // global
           if ((Sp + -112) < SpLim) (likely: False) goto c3YD3; else goto c3YD4;
       c3YD3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YD4: // global
           I64[Sp - 112] = block_c3YC2_info;
           _s3Xox::P64 = P64[R1 + 7];
           _s3Xoy::P64 = P64[R1 + 15];
           _s3Xoz::P64 = P64[R1 + 23];
           _s3XoD::P64 = P64[R1 + 31];
           _s3XoF::P64 = P64[R1 + 39];
           _s3XoI::P64 = P64[R1 + 47];
           _s3XoJ::P64 = P64[R1 + 55];
           _s3XoK::P64 = P64[R1 + 63];
           _s3XoL::P64 = P64[R1 + 71];
           _s3XoM::P64 = P64[R1 + 79];
           _s3XoN::P64 = P64[R1 + 87];
           _s3XoO::P64 = P64[R1 + 95];
           _s3XoP::P64 = P64[R1 + 103];
           R1 = R2;
           P64[Sp - 104] = _s3Xox::P64;
           P64[Sp - 96] = _s3Xoy::P64;
           P64[Sp - 88] = _s3Xoz::P64;
           P64[Sp - 80] = _s3XoD::P64;
           P64[Sp - 72] = _s3XoF::P64;
           P64[Sp - 64] = _s3XoI::P64;
           P64[Sp - 56] = _s3XoJ::P64;
           P64[Sp - 48] = _s3XoK::P64;
           P64[Sp - 40] = _s3XoL::P64;
           P64[Sp - 32] = _s3XoM::P64;
           P64[Sp - 24] = _s3XoN::P64;
           P64[Sp - 16] = _s3XoO::P64;
           P64[Sp - 8] = _s3XoP::P64;
           Sp = Sp - 112;
           if (R1 & 7 != 0) goto u3YDb; else goto c3YC3;
       u3YDb: // global
           call _c3YC2(R1) args: 0, res: 0, upd: 0;
       c3YC3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xpd_info" {
     sat_s3Xpd_info:
         const sat_s3Xpd_entry;
         const 13;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YC2() //  [R1]
         { []
         }
     {offset
       c3YC2: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3YD7; else goto c3YD6;
       c3YD7: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YD6: // global
           _s3XoT::P64 = P64[R1 + 7];
           _s3XoU::P64 = P64[R1 + 15];
           _s3XoV::P64 = P64[R1 + 23];
           _s3XoW::P64 = P64[R1 + 31];
           I64[Hp - 136] = sat_s3Xpa_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = _s3XoT::P64;
           P64[Hp - 16] = _s3XoU::P64;
           P64[Hp - 8] = _s3XoV::P64;
           P64[Hp] = _s3XoW::P64;
           I64[Sp + 104] = block_c3YD0_info;
           R3 = Hp - 135;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 104;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YC2_info" {
     block_c3YC2_info:
         const _c3YC2;
         const 13;
         const 3302829850654;
         const S3Y0k_srt+120;
 },
 _c3YD0() //  [R1]
         { []
         }
     {offset
       c3YD0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YDa; else goto c3YD9;
       c3YDa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YD9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YD0_info" {
     block_c3YD0_info:
         const _c3YD0;
         const 0;
         const 30;
 },
 sat_s3Xpe_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YDc: // global
           _s3XoQ::P64 = R2;
           _s3Xpe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YDd; else goto c3YDe;
       c3YDe: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3YDg; else goto c3YDf;
       c3YDg: // global
           HpAlloc = 112;
           goto c3YDd;
       c3YDd: // global
           R2 = _s3XoQ::P64;
           R1 = _s3Xpe::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YDf: // global
           _s3Xot::P64 = P64[_s3Xpe::P64 + 7];
           _s3Xou::P64 = P64[_s3Xpe::P64 + 15];
           _s3Xov::P64 = P64[_s3Xpe::P64 + 23];
           _s3Xow::P64 = P64[_s3Xpe::P64 + 31];
           _s3Xox::P64 = P64[_s3Xpe::P64 + 39];
           _s3Xoy::P64 = P64[_s3Xpe::P64 + 47];
           _s3Xoz::P64 = P64[_s3Xpe::P64 + 55];
           _s3XoD::P64 = P64[_s3Xpe::P64 + 63];
           _s3XoF::P64 = P64[_s3Xpe::P64 + 71];
           _s3XoI::P64 = P64[_s3Xpe::P64 + 79];
           _s3XoJ::P64 = P64[_s3Xpe::P64 + 87];
           _s3XoK::P64 = P64[_s3Xpe::P64 + 95];
           _s3XoL::P64 = P64[_s3Xpe::P64 + 103];
           _s3XoM::P64 = P64[_s3Xpe::P64 + 111];
           _s3XoN::P64 = P64[_s3Xpe::P64 + 119];
           _s3XoO::P64 = P64[_s3Xpe::P64 + 127];
           _s3XoP::P64 = P64[_s3Xpe::P64 + 135];
           I64[Hp - 104] = sat_s3Xpd_info;
           P64[Hp - 96] = _s3Xox::P64;
           P64[Hp - 88] = _s3Xoy::P64;
           P64[Hp - 80] = _s3Xoz::P64;
           P64[Hp - 72] = _s3XoD::P64;
           P64[Hp - 64] = _s3XoF::P64;
           P64[Hp - 56] = _s3XoI::P64;
           P64[Hp - 48] = _s3XoJ::P64;
           P64[Hp - 40] = _s3XoK::P64;
           P64[Hp - 32] = _s3XoL::P64;
           P64[Hp - 24] = _s3XoM::P64;
           P64[Hp - 16] = _s3XoN::P64;
           P64[Hp - 8] = _s3XoO::P64;
           P64[Hp] = _s3XoP::P64;
           R6 = _s3XoD::P64;
           R5 = _s3Xow::P64;
           R4 = _s3Xov::P64;
           R3 = _s3Xou::P64;
           R2 = _s3Xot::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 103;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xpe_info" {
     sat_s3Xpe_info:
         const sat_s3Xpe_entry;
         const 17;
         const 7700876361736;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 sat_s3Xph_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YDh: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3YDl; else goto c3YDm;
       c3YDl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YDm: // global
           I64[Sp - 80] = block_c3YBN_info;
           _s3Xot::P64 = P64[R1 + 7];
           _s3Xou::P64 = P64[R1 + 15];
           _s3Xov::P64 = P64[R1 + 23];
           _s3Xow::P64 = P64[R1 + 31];
           _s3Xox::P64 = P64[R1 + 39];
           _s3Xoy::P64 = P64[R1 + 47];
           _s3Xoz::P64 = P64[R1 + 55];
           _s3XoD::P64 = P64[R1 + 63];
           _s3XoF::P64 = P64[R1 + 71];
           R1 = R2;
           P64[Sp - 72] = _s3Xot::P64;
           P64[Sp - 64] = _s3Xou::P64;
           P64[Sp - 56] = _s3Xov::P64;
           P64[Sp - 48] = _s3Xow::P64;
           P64[Sp - 40] = _s3Xox::P64;
           P64[Sp - 32] = _s3Xoy::P64;
           P64[Sp - 24] = _s3Xoz::P64;
           P64[Sp - 16] = _s3XoD::P64;
           P64[Sp - 8] = _s3XoF::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto u3YDt; else goto c3YBO;
       u3YDt: // global
           call _c3YBN(R1) args: 0, res: 0, upd: 0;
       c3YBO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xph_info" {
     sat_s3Xph_info:
         const sat_s3Xph_entry;
         const 9;
         const 7700876361736;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YBN() //  [R1]
         { []
         }
     {offset
       c3YBN: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3YDp; else goto c3YDo;
       c3YDp: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YDo: // global
           _s3XoI::P64 = P64[R1 + 7];
           _s3XoJ::P64 = P64[R1 + 15];
           _s3XoK::P64 = P64[R1 + 23];
           _s3XoL::P64 = P64[R1 + 31];
           _s3XoM::P64 = P64[R1 + 39];
           _s3XoN::P64 = P64[R1 + 47];
           _s3XoO::P64 = P64[R1 + 55];
           _s3XoP::P64 = P64[R1 + 63];
           I64[Hp - 136] = sat_s3Xpe_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = _s3XoI::P64;
           P64[Hp - 48] = _s3XoJ::P64;
           P64[Hp - 40] = _s3XoK::P64;
           P64[Hp - 32] = _s3XoL::P64;
           P64[Hp - 24] = _s3XoM::P64;
           P64[Hp - 16] = _s3XoN::P64;
           P64[Hp - 8] = _s3XoO::P64;
           P64[Hp] = _s3XoP::P64;
           I64[Sp + 72] = block_c3YDi_info;
           R3 = Hp - 135;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 72;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YBN_info" {
     block_c3YBN_info:
         const _c3YBN;
         const 9;
         const 7700876361758;
         const S3Y0k_srt+120;
 },
 _c3YDi() //  [R1]
         { []
         }
     {offset
       c3YDi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YDs; else goto c3YDr;
       c3YDs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YDr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YDi_info" {
     block_c3YDi_info:
         const _c3YDi;
         const 0;
         const 30;
 },
 sat_s3Xpi_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YDu: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3YDy; else goto c3YDx;
       c3YDy: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YDx: // global
           _s3Xot::P64 = P64[R1 + 7];
           _s3Xou::P64 = P64[R1 + 15];
           _s3Xov::P64 = P64[R1 + 23];
           _s3Xow::P64 = P64[R1 + 31];
           _s3Xox::P64 = P64[R1 + 39];
           _s3Xoy::P64 = P64[R1 + 47];
           _s3Xoz::P64 = P64[R1 + 55];
           _s3XoD::P64 = P64[R1 + 63];
           _s3XoE::P64 = P64[R1 + 71];
           I64[Hp - 72] = sat_s3Xph_info;
           P64[Hp - 64] = _s3Xot::P64;
           P64[Hp - 56] = _s3Xou::P64;
           P64[Hp - 48] = _s3Xov::P64;
           P64[Hp - 40] = _s3Xow::P64;
           P64[Hp - 32] = _s3Xox::P64;
           P64[Hp - 24] = _s3Xoy::P64;
           P64[Hp - 16] = _s3Xoz::P64;
           P64[Hp - 8] = _s3XoD::P64;
           P64[Hp] = R2;
           R2 = Hp - 71;
           R1 = _s3XoE::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xpi_info" {
     sat_s3Xpi_info:
         const sat_s3Xpi_entry;
         const 9;
         const 7700876361736;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3XoC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YDz: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c3YDD; else goto c3YDC;
       c3YDD: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YDC: // global
           _s3Xol::P64 = P64[R1 + 7];
           _s3Xom::P64 = P64[R1 + 15];
           _s3Xon::P64 = P64[R1 + 23];
           _s3Xoo::P64 = P64[R1 + 31];
           _s3Xop::P64 = P64[R1 + 39];
           _s3Xoq::P64 = P64[R1 + 47];
           _s3Xor::P64 = P64[R1 + 55];
           _s3Xos::P64 = P64[R1 + 63];
           _s3Xot::P64 = P64[R1 + 71];
           _s3Xou::P64 = P64[R1 + 79];
           _s3Xov::P64 = P64[R1 + 87];
           _s3Xow::P64 = P64[R1 + 95];
           _s3Xox::P64 = P64[R1 + 103];
           _s3Xoy::P64 = P64[R1 + 111];
           _s3Xoz::P64 = P64[R1 + 119];
           I64[Hp - 160] = ds1_s3XoE_info;
           P64[Hp - 144] = _s3Xol::P64;
           P64[Hp - 136] = _s3Xom::P64;
           P64[Hp - 128] = _s3Xon::P64;
           P64[Hp - 120] = _s3Xoo::P64;
           P64[Hp - 112] = _s3Xop::P64;
           P64[Hp - 104] = _s3Xoq::P64;
           P64[Hp - 96] = _s3Xor::P64;
           P64[Hp - 88] = _s3Xos::P64;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s3Xpi_info;
           P64[Hp - 64] = _s3Xot::P64;
           P64[Hp - 56] = _s3Xou::P64;
           P64[Hp - 48] = _s3Xov::P64;
           P64[Hp - 40] = _s3Xow::P64;
           P64[Hp - 32] = _s3Xox::P64;
           P64[Hp - 24] = _s3Xoy::P64;
           P64[Hp - 16] = _s3Xoz::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 160;
           R1 = Hp - 71;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3XoC_info" {
     p_s3XoC_info:
         const p_s3XoC_entry;
         const 15;
         const 16496969383944;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3Xpj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YDM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YDN; else goto c3YDO;
       c3YDN: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YDO: // global
           I64[Sp - 8] = block_c3YDJ_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Xpj_info" {
     lvl2_s3Xpj_info:
         const lvl2_s3Xpj_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YDJ() //  [R1]
         { []
         }
     {offset
       c3YDJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YDR; else goto c3YDQ;
       c3YDR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YDQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YDJ_info" {
     block_c3YDJ_info:
         const _c3YDJ;
         const 0;
         const 30;
 },
 sat_s3Xps_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YE0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YE1; else goto c3YE2;
       c3YE1: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YE2: // global
           I64[Sp - 8] = block_c3YDX_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xps_info" {
     sat_s3Xps_info:
         const sat_s3Xps_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YDX() //  [R1]
         { []
         }
     {offset
       c3YDX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YE5; else goto c3YE4;
       c3YE5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YE4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YDX_info" {
     block_c3YDX_info:
         const _c3YDX;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3YE6: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto c3YEa; else goto c3YE9;
       c3YEa: // global
           HpAlloc = 160;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 144, res: 0, upd: 8;
       c3YE9: // global
           I64[Hp - 152] = p_s3XoC_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           P64[Hp - 104] = P64[Sp];
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           I64[Hp - 24] = lvl2_s3Xpj_info;
           P64[Hp - 16] = Hp - 151;
           I64[Hp - 8] = sat_s3Xps_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 88];
           R3 = P64[Sp + 80];
           R2 = Hp - 6;
           Sp = Sp + 96;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry;
         const 0;
         const 69273527517198;
         const 73014444032;
         const S3Y0k_srt+120;
         const 17;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.030964717 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3YGX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 96, res: 0, upd: 8;
     }
 },
 ds1_s3XpL_entry() //  [R1]
         { []
         }
     {offset
       c3YHa: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3YHb; else goto c3YHc;
       c3YHb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YHc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3XpL_info" {
     ds1_s3XpL_info:
         const ds1_s3XpL_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+208;
 },
 sat_s3Xqa_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YHU: // global
           if ((Sp + -112) < SpLim) (likely: False) goto c3YHY; else goto c3YHZ;
       c3YHY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YHZ: // global
           I64[Sp - 112] = block_c3YHR_info;
           _s3XpM::P64 = P64[R1 + 7];
           _s3XpP::P64 = P64[R1 + 15];
           _s3XpQ::P64 = P64[R1 + 23];
           _s3XpR::P64 = P64[R1 + 31];
           _s3XpS::P64 = P64[R1 + 39];
           _s3XpT::P64 = P64[R1 + 47];
           _s3XpU::P64 = P64[R1 + 55];
           _s3XpV::P64 = P64[R1 + 63];
           _s3XpW::P64 = P64[R1 + 71];
           _s3Xq0::P64 = P64[R1 + 79];
           _s3Xq1::P64 = P64[R1 + 87];
           _s3Xq2::P64 = P64[R1 + 95];
           _s3Xq3::P64 = P64[R1 + 103];
           R1 = R2;
           P64[Sp - 104] = _s3XpM::P64;
           P64[Sp - 96] = _s3XpP::P64;
           P64[Sp - 88] = _s3XpQ::P64;
           P64[Sp - 80] = _s3XpR::P64;
           P64[Sp - 72] = _s3XpS::P64;
           P64[Sp - 64] = _s3XpT::P64;
           P64[Sp - 56] = _s3XpU::P64;
           P64[Sp - 48] = _s3XpV::P64;
           P64[Sp - 40] = _s3XpW::P64;
           P64[Sp - 32] = _s3Xq0::P64;
           P64[Sp - 24] = _s3Xq1::P64;
           P64[Sp - 16] = _s3Xq2::P64;
           P64[Sp - 8] = _s3Xq3::P64;
           Sp = Sp - 112;
           if (R1 & 7 != 0) goto u3YI3; else goto c3YHS;
       u3YI3: // global
           call _c3YHR(R1) args: 0, res: 0, upd: 0;
       c3YHS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xqa_info" {
     sat_s3Xqa_info:
         const sat_s3Xqa_entry;
         const 13;
         const 8;
         const 4294967301;
 },
 _c3YHR() //  [R1]
         { []
         }
     {offset
       c3YHR: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3YI2; else goto c3YI1;
       c3YI2: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YI1: // global
           _s3Xq7::P64 = P64[R1 + 7];
           _s3Xq8::P64 = P64[R1 + 15];
           I64[Hp - 112] = (,,,,,,,,,,,,,)_con_info;
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = P64[Sp + 104];
           P64[Hp - 8] = _s3Xq7::P64;
           P64[Hp] = _s3Xq8::P64;
           R2 = Hp - 111;
           R1 = P64[Sp + 8];
           Sp = Sp + 112;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YHR_info" {
     block_c3YHR_info:
         const _c3YHR;
         const 13;
         const 30;
 },
 sat_s3Xqb_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YI4: // global
           _s3Xq4::P64 = R2;
           _s3Xqb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YI5; else goto c3YI6;
       c3YI6: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3YI8; else goto c3YI7;
       c3YI8: // global
           HpAlloc = 112;
           goto c3YI5;
       c3YI5: // global
           R2 = _s3Xq4::P64;
           R1 = _s3Xqb::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YI7: // global
           _s3XpF::P64 = P64[_s3Xqb::P64 + 7];
           _s3XpG::P64 = P64[_s3Xqb::P64 + 15];
           _s3XpK::P64 = P64[_s3Xqb::P64 + 23];
           _s3XpM::P64 = P64[_s3Xqb::P64 + 31];
           _s3XpP::P64 = P64[_s3Xqb::P64 + 39];
           _s3XpQ::P64 = P64[_s3Xqb::P64 + 47];
           _s3XpR::P64 = P64[_s3Xqb::P64 + 55];
           _s3XpS::P64 = P64[_s3Xqb::P64 + 63];
           _s3XpT::P64 = P64[_s3Xqb::P64 + 71];
           _s3XpU::P64 = P64[_s3Xqb::P64 + 79];
           _s3XpV::P64 = P64[_s3Xqb::P64 + 87];
           _s3XpW::P64 = P64[_s3Xqb::P64 + 95];
           _s3Xq0::P64 = P64[_s3Xqb::P64 + 103];
           _s3Xq1::P64 = P64[_s3Xqb::P64 + 111];
           _s3Xq2::P64 = P64[_s3Xqb::P64 + 119];
           _s3Xq3::P64 = P64[_s3Xqb::P64 + 127];
           I64[Hp - 104] = sat_s3Xqa_info;
           P64[Hp - 96] = _s3XpM::P64;
           P64[Hp - 88] = _s3XpP::P64;
           P64[Hp - 80] = _s3XpQ::P64;
           P64[Hp - 72] = _s3XpR::P64;
           P64[Hp - 64] = _s3XpS::P64;
           P64[Hp - 56] = _s3XpT::P64;
           P64[Hp - 48] = _s3XpU::P64;
           P64[Hp - 40] = _s3XpV::P64;
           P64[Hp - 32] = _s3XpW::P64;
           P64[Hp - 24] = _s3Xq0::P64;
           P64[Hp - 16] = _s3Xq1::P64;
           P64[Hp - 8] = _s3Xq2::P64;
           P64[Hp] = _s3Xq3::P64;
           R4 = _s3XpK::P64;
           R3 = _s3XpG::P64;
           R2 = _s3XpF::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 103;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xqb_info" {
     sat_s3Xqb_info:
         const sat_s3Xqb_entry;
         const 16;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+192;
 },
 sat_s3Xqe_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YI9: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c3YId; else goto c3YIe;
       c3YId: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YIe: // global
           I64[Sp - 104] = block_c3YHC_info;
           _s3XpF::P64 = P64[R1 + 7];
           _s3XpG::P64 = P64[R1 + 15];
           _s3XpK::P64 = P64[R1 + 23];
           _s3XpM::P64 = P64[R1 + 31];
           _s3XpP::P64 = P64[R1 + 39];
           _s3XpQ::P64 = P64[R1 + 47];
           _s3XpR::P64 = P64[R1 + 55];
           _s3XpS::P64 = P64[R1 + 63];
           _s3XpT::P64 = P64[R1 + 71];
           _s3XpU::P64 = P64[R1 + 79];
           _s3XpV::P64 = P64[R1 + 87];
           _s3XpW::P64 = P64[R1 + 95];
           R1 = R2;
           P64[Sp - 96] = _s3XpF::P64;
           P64[Sp - 88] = _s3XpG::P64;
           P64[Sp - 80] = _s3XpK::P64;
           P64[Sp - 72] = _s3XpM::P64;
           P64[Sp - 64] = _s3XpP::P64;
           P64[Sp - 56] = _s3XpQ::P64;
           P64[Sp - 48] = _s3XpR::P64;
           P64[Sp - 40] = _s3XpS::P64;
           P64[Sp - 32] = _s3XpT::P64;
           P64[Sp - 24] = _s3XpU::P64;
           P64[Sp - 16] = _s3XpV::P64;
           P64[Sp - 8] = _s3XpW::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto u3YIl; else goto c3YHD;
       u3YIl: // global
           call _c3YHC(R1) args: 0, res: 0, upd: 0;
       c3YHD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xqe_info" {
     sat_s3Xqe_info:
         const sat_s3Xqe_entry;
         const 12;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YHC() //  [R1]
         { []
         }
     {offset
       c3YHC: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3YIh; else goto c3YIg;
       c3YIh: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YIg: // global
           _s3Xq0::P64 = P64[R1 + 7];
           _s3Xq1::P64 = P64[R1 + 15];
           _s3Xq2::P64 = P64[R1 + 23];
           _s3Xq3::P64 = P64[R1 + 31];
           I64[Hp - 128] = sat_s3Xqb_info;
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 40];
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = P64[Sp + 56];
           P64[Hp - 64] = P64[Sp + 64];
           P64[Hp - 56] = P64[Sp + 72];
           P64[Hp - 48] = P64[Sp + 80];
           P64[Hp - 40] = P64[Sp + 88];
           P64[Hp - 32] = P64[Sp + 96];
           P64[Hp - 24] = _s3Xq0::P64;
           P64[Hp - 16] = _s3Xq1::P64;
           P64[Hp - 8] = _s3Xq2::P64;
           P64[Hp] = _s3Xq3::P64;
           I64[Sp + 96] = block_c3YIa_info;
           R3 = Hp - 127;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 96;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YHC_info" {
     block_c3YHC_info:
         const _c3YHC;
         const 12;
         const 3302829850654;
         const S3Y0k_srt+120;
 },
 _c3YIa() //  [R1]
         { []
         }
     {offset
       c3YIa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YIk; else goto c3YIj;
       c3YIk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YIj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YIa_info" {
     block_c3YIa_info:
         const _c3YIa;
         const 0;
         const 30;
 },
 sat_s3Xqf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YIm: // global
           _s3XpX::P64 = R2;
           _s3Xqf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YIn; else goto c3YIo;
       c3YIo: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3YIq; else goto c3YIp;
       c3YIq: // global
           HpAlloc = 104;
           goto c3YIn;
       c3YIn: // global
           R2 = _s3XpX::P64;
           R1 = _s3Xqf::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YIp: // global
           _s3XpB::P64 = P64[_s3Xqf::P64 + 7];
           _s3XpC::P64 = P64[_s3Xqf::P64 + 15];
           _s3XpD::P64 = P64[_s3Xqf::P64 + 23];
           _s3XpE::P64 = P64[_s3Xqf::P64 + 31];
           _s3XpF::P64 = P64[_s3Xqf::P64 + 39];
           _s3XpG::P64 = P64[_s3Xqf::P64 + 47];
           _s3XpK::P64 = P64[_s3Xqf::P64 + 55];
           _s3XpM::P64 = P64[_s3Xqf::P64 + 63];
           _s3XpP::P64 = P64[_s3Xqf::P64 + 71];
           _s3XpQ::P64 = P64[_s3Xqf::P64 + 79];
           _s3XpR::P64 = P64[_s3Xqf::P64 + 87];
           _s3XpS::P64 = P64[_s3Xqf::P64 + 95];
           _s3XpT::P64 = P64[_s3Xqf::P64 + 103];
           _s3XpU::P64 = P64[_s3Xqf::P64 + 111];
           _s3XpV::P64 = P64[_s3Xqf::P64 + 119];
           _s3XpW::P64 = P64[_s3Xqf::P64 + 127];
           I64[Hp - 96] = sat_s3Xqe_info;
           P64[Hp - 88] = _s3XpF::P64;
           P64[Hp - 80] = _s3XpG::P64;
           P64[Hp - 72] = _s3XpK::P64;
           P64[Hp - 64] = _s3XpM::P64;
           P64[Hp - 56] = _s3XpP::P64;
           P64[Hp - 48] = _s3XpQ::P64;
           P64[Hp - 40] = _s3XpR::P64;
           P64[Hp - 32] = _s3XpS::P64;
           P64[Hp - 24] = _s3XpT::P64;
           P64[Hp - 16] = _s3XpU::P64;
           P64[Hp - 8] = _s3XpV::P64;
           P64[Hp] = _s3XpW::P64;
           R6 = _s3XpK::P64;
           R5 = _s3XpE::P64;
           R4 = _s3XpD::P64;
           R3 = _s3XpC::P64;
           R2 = _s3XpB::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 95;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xqf_info" {
     sat_s3Xqf_info:
         const sat_s3Xqf_entry;
         const 16;
         const 7700876361736;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 sat_s3Xqi_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YIr: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3YIv; else goto c3YIw;
       c3YIv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YIw: // global
           I64[Sp - 72] = block_c3YHn_info;
           _s3XpB::P64 = P64[R1 + 7];
           _s3XpC::P64 = P64[R1 + 15];
           _s3XpD::P64 = P64[R1 + 23];
           _s3XpE::P64 = P64[R1 + 31];
           _s3XpF::P64 = P64[R1 + 39];
           _s3XpG::P64 = P64[R1 + 47];
           _s3XpK::P64 = P64[R1 + 55];
           _s3XpM::P64 = P64[R1 + 63];
           R1 = R2;
           P64[Sp - 64] = _s3XpB::P64;
           P64[Sp - 56] = _s3XpC::P64;
           P64[Sp - 48] = _s3XpD::P64;
           P64[Sp - 40] = _s3XpE::P64;
           P64[Sp - 32] = _s3XpF::P64;
           P64[Sp - 24] = _s3XpG::P64;
           P64[Sp - 16] = _s3XpK::P64;
           P64[Sp - 8] = _s3XpM::P64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u3YID; else goto c3YHo;
       u3YID: // global
           call _c3YHn(R1) args: 0, res: 0, upd: 0;
       c3YHo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xqi_info" {
     sat_s3Xqi_info:
         const sat_s3Xqi_entry;
         const 8;
         const 7700876361736;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YHn() //  [R1]
         { []
         }
     {offset
       c3YHn: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3YIz; else goto c3YIy;
       c3YIz: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YIy: // global
           _s3XpP::P64 = P64[R1 + 7];
           _s3XpQ::P64 = P64[R1 + 15];
           _s3XpR::P64 = P64[R1 + 23];
           _s3XpS::P64 = P64[R1 + 31];
           _s3XpT::P64 = P64[R1 + 39];
           _s3XpU::P64 = P64[R1 + 47];
           _s3XpV::P64 = P64[R1 + 55];
           _s3XpW::P64 = P64[R1 + 63];
           I64[Hp - 128] = sat_s3Xqf_info;
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 40];
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = P64[Sp + 56];
           P64[Hp - 64] = P64[Sp + 64];
           P64[Hp - 56] = _s3XpP::P64;
           P64[Hp - 48] = _s3XpQ::P64;
           P64[Hp - 40] = _s3XpR::P64;
           P64[Hp - 32] = _s3XpS::P64;
           P64[Hp - 24] = _s3XpT::P64;
           P64[Hp - 16] = _s3XpU::P64;
           P64[Hp - 8] = _s3XpV::P64;
           P64[Hp] = _s3XpW::P64;
           I64[Sp + 64] = block_c3YIs_info;
           R3 = Hp - 127;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 64;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YHn_info" {
     block_c3YHn_info:
         const _c3YHn;
         const 8;
         const 7700876361758;
         const S3Y0k_srt+120;
 },
 _c3YIs() //  [R1]
         { []
         }
     {offset
       c3YIs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YIC; else goto c3YIB;
       c3YIC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YIB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YIs_info" {
     block_c3YIs_info:
         const _c3YIs;
         const 0;
         const 30;
 },
 sat_s3Xqj_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YIE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3YII; else goto c3YIH;
       c3YII: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YIH: // global
           _s3XpB::P64 = P64[R1 + 7];
           _s3XpC::P64 = P64[R1 + 15];
           _s3XpD::P64 = P64[R1 + 23];
           _s3XpE::P64 = P64[R1 + 31];
           _s3XpF::P64 = P64[R1 + 39];
           _s3XpG::P64 = P64[R1 + 47];
           _s3XpK::P64 = P64[R1 + 55];
           _s3XpL::P64 = P64[R1 + 63];
           I64[Hp - 64] = sat_s3Xqi_info;
           P64[Hp - 56] = _s3XpB::P64;
           P64[Hp - 48] = _s3XpC::P64;
           P64[Hp - 40] = _s3XpD::P64;
           P64[Hp - 32] = _s3XpE::P64;
           P64[Hp - 24] = _s3XpF::P64;
           P64[Hp - 16] = _s3XpG::P64;
           P64[Hp - 8] = _s3XpK::P64;
           P64[Hp] = R2;
           R2 = Hp - 63;
           R1 = _s3XpL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xqj_info" {
     sat_s3Xqj_info:
         const sat_s3Xqj_entry;
         const 8;
         const 7700876361736;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3XpJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YIJ: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto c3YIN; else goto c3YIM;
       c3YIN: // global
           HpAlloc = 160;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YIM: // global
           _s3Xpt::P64 = P64[R1 + 7];
           _s3Xpu::P64 = P64[R1 + 15];
           _s3Xpv::P64 = P64[R1 + 23];
           _s3Xpw::P64 = P64[R1 + 31];
           _s3Xpx::P64 = P64[R1 + 39];
           _s3Xpy::P64 = P64[R1 + 47];
           _s3Xpz::P64 = P64[R1 + 55];
           _s3XpA::P64 = P64[R1 + 63];
           _s3XpB::P64 = P64[R1 + 71];
           _s3XpC::P64 = P64[R1 + 79];
           _s3XpD::P64 = P64[R1 + 87];
           _s3XpE::P64 = P64[R1 + 95];
           _s3XpF::P64 = P64[R1 + 103];
           _s3XpG::P64 = P64[R1 + 111];
           I64[Hp - 152] = ds1_s3XpL_info;
           P64[Hp - 136] = _s3Xpt::P64;
           P64[Hp - 128] = _s3Xpu::P64;
           P64[Hp - 120] = _s3Xpv::P64;
           P64[Hp - 112] = _s3Xpw::P64;
           P64[Hp - 104] = _s3Xpx::P64;
           P64[Hp - 96] = _s3Xpy::P64;
           P64[Hp - 88] = _s3Xpz::P64;
           P64[Hp - 80] = _s3XpA::P64;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_s3Xqj_info;
           P64[Hp - 56] = _s3XpB::P64;
           P64[Hp - 48] = _s3XpC::P64;
           P64[Hp - 40] = _s3XpD::P64;
           P64[Hp - 32] = _s3XpE::P64;
           P64[Hp - 24] = _s3XpF::P64;
           P64[Hp - 16] = _s3XpG::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 152;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3XpJ_info" {
     p_s3XpJ_info:
         const p_s3XpJ_entry;
         const 14;
         const 16496969383944;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3Xqk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YIW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YIX; else goto c3YIY;
       c3YIX: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YIY: // global
           I64[Sp - 8] = block_c3YIT_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Xqk_info" {
     lvl2_s3Xqk_info:
         const lvl2_s3Xqk_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YIT() //  [R1]
         { []
         }
     {offset
       c3YIT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YJ1; else goto c3YJ0;
       c3YJ1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YJ0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YIT_info" {
     block_c3YIT_info:
         const _c3YIT;
         const 0;
         const 30;
 },
 sat_s3Xqt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YJa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YJb; else goto c3YJc;
       c3YJb: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YJc: // global
           I64[Sp - 8] = block_c3YJ7_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xqt_info" {
     sat_s3Xqt_info:
         const sat_s3Xqt_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YJ7() //  [R1]
         { []
         }
     {offset
       c3YJ7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YJf; else goto c3YJe;
       c3YJf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YJe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YJ7_info" {
     block_c3YJ7_info:
         const _c3YJ7;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3YJg: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3YJk; else goto c3YJj;
       c3YJk: // global
           HpAlloc = 152;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c3YJj: // global
           I64[Hp - 144] = p_s3XpJ_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = P64[Sp];
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 40];
           P64[Hp - 48] = P64[Sp + 48];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 64];
           I64[Hp - 24] = lvl2_s3Xqk_info;
           P64[Hp - 16] = Hp - 143;
           I64[Hp - 8] = sat_s3Xqt_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 80];
           R3 = P64[Sp + 72];
           R2 = Hp - 6;
           Sp = Sp + 88;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry;
         const 0;
         const 104457899606030;
         const 68719476736;
         const S3Y0k_srt+120;
         const 16;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.081071974 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3YLK: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 88, res: 0, upd: 8;
     }
 },
 ds1_s3XqL_entry() //  [R1]
         { []
         }
     {offset
       c3YLX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3YLY; else goto c3YLZ;
       c3YLY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YLZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3XqL_info" {
     ds1_s3XqL_info:
         const ds1_s3XqL_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+208;
 },
 sat_s3Xr7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YMF: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3YMJ; else goto c3YMI;
       c3YMJ: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YMI: // global
           _s3XqM::P64 = P64[R1 + 7];
           _s3XqP::P64 = P64[R1 + 15];
           _s3XqQ::P64 = P64[R1 + 23];
           _s3XqR::P64 = P64[R1 + 31];
           _s3XqS::P64 = P64[R1 + 39];
           _s3XqT::P64 = P64[R1 + 47];
           _s3XqU::P64 = P64[R1 + 55];
           _s3XqV::P64 = P64[R1 + 63];
           _s3XqW::P64 = P64[R1 + 71];
           _s3Xr0::P64 = P64[R1 + 79];
           _s3Xr1::P64 = P64[R1 + 87];
           _s3Xr2::P64 = P64[R1 + 95];
           _s3Xr3::P64 = P64[R1 + 103];
           I64[Hp - 104] = (,,,,,,,,,,,,)_con_info;
           P64[Hp - 96] = _s3XqP::P64;
           P64[Hp - 88] = _s3XqQ::P64;
           P64[Hp - 80] = _s3XqR::P64;
           P64[Hp - 72] = _s3XqS::P64;
           P64[Hp - 64] = _s3XqT::P64;
           P64[Hp - 56] = _s3XqU::P64;
           P64[Hp - 48] = _s3XqV::P64;
           P64[Hp - 40] = _s3XqW::P64;
           P64[Hp - 32] = _s3Xr0::P64;
           P64[Hp - 24] = _s3Xr1::P64;
           P64[Hp - 16] = _s3Xr2::P64;
           P64[Hp - 8] = _s3Xr3::P64;
           P64[Hp] = R2;
           R2 = Hp - 103;
           R1 = _s3XqM::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xr7_info" {
     sat_s3Xr7_info:
         const sat_s3Xr7_entry;
         const 13;
         const 8;
         const 4294967301;
 },
 sat_s3Xr8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YMK: // global
           _s3Xr4::P64 = R2;
           _s3Xr8::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3YML; else goto c3YMM;
       c3YMM: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3YMO; else goto c3YMN;
       c3YMO: // global
           HpAlloc = 112;
           goto c3YML;
       c3YML: // global
           R2 = _s3Xr4::P64;
           R1 = _s3Xr8::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YMN: // global
           _s3XqG::P64 = P64[_s3Xr8::P64 + 7];
           _s3XqK::P64 = P64[_s3Xr8::P64 + 15];
           _s3XqM::P64 = P64[_s3Xr8::P64 + 23];
           _s3XqP::P64 = P64[_s3Xr8::P64 + 31];
           _s3XqQ::P64 = P64[_s3Xr8::P64 + 39];
           _s3XqR::P64 = P64[_s3Xr8::P64 + 47];
           _s3XqS::P64 = P64[_s3Xr8::P64 + 55];
           _s3XqT::P64 = P64[_s3Xr8::P64 + 63];
           _s3XqU::P64 = P64[_s3Xr8::P64 + 71];
           _s3XqV::P64 = P64[_s3Xr8::P64 + 79];
           _s3XqW::P64 = P64[_s3Xr8::P64 + 87];
           _s3Xr0::P64 = P64[_s3Xr8::P64 + 95];
           _s3Xr1::P64 = P64[_s3Xr8::P64 + 103];
           _s3Xr2::P64 = P64[_s3Xr8::P64 + 111];
           _s3Xr3::P64 = P64[_s3Xr8::P64 + 119];
           I64[Hp - 104] = sat_s3Xr7_info;
           P64[Hp - 96] = _s3XqM::P64;
           P64[Hp - 88] = _s3XqP::P64;
           P64[Hp - 80] = _s3XqQ::P64;
           P64[Hp - 72] = _s3XqR::P64;
           P64[Hp - 64] = _s3XqS::P64;
           P64[Hp - 56] = _s3XqT::P64;
           P64[Hp - 48] = _s3XqU::P64;
           P64[Hp - 40] = _s3XqV::P64;
           P64[Hp - 32] = _s3XqW::P64;
           P64[Hp - 24] = _s3Xr0::P64;
           P64[Hp - 16] = _s3Xr1::P64;
           P64[Hp - 8] = _s3Xr2::P64;
           P64[Hp] = _s3Xr3::P64;
           R2 = _s3XqG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3XqK::P64;
           P64[Sp - 8] = Hp - 103;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xr8_info" {
     sat_s3Xr8_info:
         const sat_s3Xr8_entry;
         const 15;
         const 8;
         const 4294967301;
 },
 sat_s3Xrb_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YMP: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3YMT; else goto c3YMU;
       c3YMT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YMU: // global
           I64[Sp - 96] = block_c3YMp_info;
           _s3XqG::P64 = P64[R1 + 7];
           _s3XqK::P64 = P64[R1 + 15];
           _s3XqM::P64 = P64[R1 + 23];
           _s3XqP::P64 = P64[R1 + 31];
           _s3XqQ::P64 = P64[R1 + 39];
           _s3XqR::P64 = P64[R1 + 47];
           _s3XqS::P64 = P64[R1 + 55];
           _s3XqT::P64 = P64[R1 + 63];
           _s3XqU::P64 = P64[R1 + 71];
           _s3XqV::P64 = P64[R1 + 79];
           _s3XqW::P64 = P64[R1 + 87];
           R1 = R2;
           P64[Sp - 88] = _s3XqG::P64;
           P64[Sp - 80] = _s3XqK::P64;
           P64[Sp - 72] = _s3XqM::P64;
           P64[Sp - 64] = _s3XqP::P64;
           P64[Sp - 56] = _s3XqQ::P64;
           P64[Sp - 48] = _s3XqR::P64;
           P64[Sp - 40] = _s3XqS::P64;
           P64[Sp - 32] = _s3XqT::P64;
           P64[Sp - 24] = _s3XqU::P64;
           P64[Sp - 16] = _s3XqV::P64;
           P64[Sp - 8] = _s3XqW::P64;
           Sp = Sp - 96;
           if (R1 & 7 != 0) goto u3YN1; else goto c3YMq;
       u3YN1: // global
           call _c3YMp(R1) args: 0, res: 0, upd: 0;
       c3YMq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xrb_info" {
     sat_s3Xrb_info:
         const sat_s3Xrb_entry;
         const 11;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YMp() //  [R1]
         { []
         }
     {offset
       c3YMp: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3YMX; else goto c3YMW;
       c3YMX: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YMW: // global
           _s3Xr0::P64 = P64[R1 + 7];
           _s3Xr1::P64 = P64[R1 + 15];
           _s3Xr2::P64 = P64[R1 + 23];
           _s3Xr3::P64 = P64[R1 + 31];
           I64[Hp - 120] = sat_s3Xr8_info;
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = _s3Xr0::P64;
           P64[Hp - 16] = _s3Xr1::P64;
           P64[Hp - 8] = _s3Xr2::P64;
           P64[Hp] = _s3Xr3::P64;
           I64[Sp + 88] = block_c3YMQ_info;
           R3 = Hp - 119;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 88;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YMp_info" {
     block_c3YMp_info:
         const _c3YMp;
         const 11;
         const 1103806595102;
         const S3Y0k_srt+120;
 },
 _c3YMQ() //  [R1]
         { []
         }
     {offset
       c3YMQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YN0; else goto c3YMZ;
       c3YN0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YMZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YMQ_info" {
     block_c3YMQ_info:
         const _c3YMQ;
         const 0;
         const 30;
 },
 sat_s3Xrc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YN2: // global
           _s3XqX::P64 = R2;
           _s3Xrc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YN3; else goto c3YN4;
       c3YN4: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3YN6; else goto c3YN5;
       c3YN6: // global
           HpAlloc = 96;
           goto c3YN3;
       c3YN3: // global
           R2 = _s3XqX::P64;
           R1 = _s3Xrc::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YN5: // global
           _s3XqC::P64 = P64[_s3Xrc::P64 + 7];
           _s3XqD::P64 = P64[_s3Xrc::P64 + 15];
           _s3XqE::P64 = P64[_s3Xrc::P64 + 23];
           _s3XqF::P64 = P64[_s3Xrc::P64 + 31];
           _s3XqG::P64 = P64[_s3Xrc::P64 + 39];
           _s3XqK::P64 = P64[_s3Xrc::P64 + 47];
           _s3XqM::P64 = P64[_s3Xrc::P64 + 55];
           _s3XqP::P64 = P64[_s3Xrc::P64 + 63];
           _s3XqQ::P64 = P64[_s3Xrc::P64 + 71];
           _s3XqR::P64 = P64[_s3Xrc::P64 + 79];
           _s3XqS::P64 = P64[_s3Xrc::P64 + 87];
           _s3XqT::P64 = P64[_s3Xrc::P64 + 95];
           _s3XqU::P64 = P64[_s3Xrc::P64 + 103];
           _s3XqV::P64 = P64[_s3Xrc::P64 + 111];
           _s3XqW::P64 = P64[_s3Xrc::P64 + 119];
           I64[Hp - 88] = sat_s3Xrb_info;
           P64[Hp - 80] = _s3XqG::P64;
           P64[Hp - 72] = _s3XqK::P64;
           P64[Hp - 64] = _s3XqM::P64;
           P64[Hp - 56] = _s3XqP::P64;
           P64[Hp - 48] = _s3XqQ::P64;
           P64[Hp - 40] = _s3XqR::P64;
           P64[Hp - 32] = _s3XqS::P64;
           P64[Hp - 24] = _s3XqT::P64;
           P64[Hp - 16] = _s3XqU::P64;
           P64[Hp - 8] = _s3XqV::P64;
           P64[Hp] = _s3XqW::P64;
           R6 = _s3XqK::P64;
           R5 = _s3XqF::P64;
           R4 = _s3XqE::P64;
           R3 = _s3XqD::P64;
           R2 = _s3XqC::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 87;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xrc_info" {
     sat_s3Xrc_info:
         const sat_s3Xrc_entry;
         const 15;
         const 5501853106184;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 sat_s3Xrf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YN7: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3YNb; else goto c3YNc;
       c3YNb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YNc: // global
           I64[Sp - 64] = block_c3YMa_info;
           _s3XqC::P64 = P64[R1 + 7];
           _s3XqD::P64 = P64[R1 + 15];
           _s3XqE::P64 = P64[R1 + 23];
           _s3XqF::P64 = P64[R1 + 31];
           _s3XqG::P64 = P64[R1 + 39];
           _s3XqK::P64 = P64[R1 + 47];
           _s3XqM::P64 = P64[R1 + 55];
           R1 = R2;
           P64[Sp - 56] = _s3XqC::P64;
           P64[Sp - 48] = _s3XqD::P64;
           P64[Sp - 40] = _s3XqE::P64;
           P64[Sp - 32] = _s3XqF::P64;
           P64[Sp - 24] = _s3XqG::P64;
           P64[Sp - 16] = _s3XqK::P64;
           P64[Sp - 8] = _s3XqM::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u3YNj; else goto c3YMb;
       u3YNj: // global
           call _c3YMa(R1) args: 0, res: 0, upd: 0;
       c3YMb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xrf_info" {
     sat_s3Xrf_info:
         const sat_s3Xrf_entry;
         const 7;
         const 5501853106184;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YMa() //  [R1]
         { []
         }
     {offset
       c3YMa: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3YNf; else goto c3YNe;
       c3YNf: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YNe: // global
           _s3XqP::P64 = P64[R1 + 7];
           _s3XqQ::P64 = P64[R1 + 15];
           _s3XqR::P64 = P64[R1 + 23];
           _s3XqS::P64 = P64[R1 + 31];
           _s3XqT::P64 = P64[R1 + 39];
           _s3XqU::P64 = P64[R1 + 47];
           _s3XqV::P64 = P64[R1 + 55];
           _s3XqW::P64 = P64[R1 + 63];
           I64[Hp - 120] = sat_s3Xrc_info;
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = _s3XqP::P64;
           P64[Hp - 48] = _s3XqQ::P64;
           P64[Hp - 40] = _s3XqR::P64;
           P64[Hp - 32] = _s3XqS::P64;
           P64[Hp - 24] = _s3XqT::P64;
           P64[Hp - 16] = _s3XqU::P64;
           P64[Hp - 8] = _s3XqV::P64;
           P64[Hp] = _s3XqW::P64;
           I64[Sp + 56] = block_c3YN8_info;
           R3 = Hp - 119;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 56;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YMa_info" {
     block_c3YMa_info:
         const _c3YMa;
         const 7;
         const 5501853106206;
         const S3Y0k_srt+120;
 },
 _c3YN8() //  [R1]
         { []
         }
     {offset
       c3YN8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YNi; else goto c3YNh;
       c3YNi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YNh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YN8_info" {
     block_c3YN8_info:
         const _c3YN8;
         const 0;
         const 30;
 },
 sat_s3Xrg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YNk: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3YNo; else goto c3YNn;
       c3YNo: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YNn: // global
           _s3XqC::P64 = P64[R1 + 7];
           _s3XqD::P64 = P64[R1 + 15];
           _s3XqE::P64 = P64[R1 + 23];
           _s3XqF::P64 = P64[R1 + 31];
           _s3XqG::P64 = P64[R1 + 39];
           _s3XqK::P64 = P64[R1 + 47];
           _s3XqL::P64 = P64[R1 + 55];
           I64[Hp - 56] = sat_s3Xrf_info;
           P64[Hp - 48] = _s3XqC::P64;
           P64[Hp - 40] = _s3XqD::P64;
           P64[Hp - 32] = _s3XqE::P64;
           P64[Hp - 24] = _s3XqF::P64;
           P64[Hp - 16] = _s3XqG::P64;
           P64[Hp - 8] = _s3XqK::P64;
           P64[Hp] = R2;
           R2 = Hp - 55;
           R1 = _s3XqL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xrg_info" {
     sat_s3Xrg_info:
         const sat_s3Xrg_entry;
         const 7;
         const 5501853106184;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3XqJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YNp: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c3YNt; else goto c3YNs;
       c3YNt: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YNs: // global
           _s3Xqu::P64 = P64[R1 + 7];
           _s3Xqv::P64 = P64[R1 + 15];
           _s3Xqw::P64 = P64[R1 + 23];
           _s3Xqx::P64 = P64[R1 + 31];
           _s3Xqy::P64 = P64[R1 + 39];
           _s3Xqz::P64 = P64[R1 + 47];
           _s3XqA::P64 = P64[R1 + 55];
           _s3XqB::P64 = P64[R1 + 63];
           _s3XqC::P64 = P64[R1 + 71];
           _s3XqD::P64 = P64[R1 + 79];
           _s3XqE::P64 = P64[R1 + 87];
           _s3XqF::P64 = P64[R1 + 95];
           _s3XqG::P64 = P64[R1 + 103];
           I64[Hp - 144] = ds1_s3XqL_info;
           P64[Hp - 128] = _s3Xqu::P64;
           P64[Hp - 120] = _s3Xqv::P64;
           P64[Hp - 112] = _s3Xqw::P64;
           P64[Hp - 104] = _s3Xqx::P64;
           P64[Hp - 96] = _s3Xqy::P64;
           P64[Hp - 88] = _s3Xqz::P64;
           P64[Hp - 80] = _s3XqA::P64;
           P64[Hp - 72] = _s3XqB::P64;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s3Xrg_info;
           P64[Hp - 48] = _s3XqC::P64;
           P64[Hp - 40] = _s3XqD::P64;
           P64[Hp - 32] = _s3XqE::P64;
           P64[Hp - 24] = _s3XqF::P64;
           P64[Hp - 16] = _s3XqG::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 144;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3XqJ_info" {
     p_s3XqJ_info:
         const p_s3XqJ_entry;
         const 13;
         const 14297946128392;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3Xrh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YNC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YND; else goto c3YNE;
       c3YND: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YNE: // global
           I64[Sp - 8] = block_c3YNz_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Xrh_info" {
     lvl2_s3Xrh_info:
         const lvl2_s3Xrh_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YNz() //  [R1]
         { []
         }
     {offset
       c3YNz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YNH; else goto c3YNG;
       c3YNH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YNG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YNz_info" {
     block_c3YNz_info:
         const _c3YNz;
         const 0;
         const 30;
 },
 sat_s3Xrq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YNQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YNR; else goto c3YNS;
       c3YNR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YNS: // global
           I64[Sp - 8] = block_c3YNN_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xrq_info" {
     sat_s3Xrq_info:
         const sat_s3Xrq_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YNN() //  [R1]
         { []
         }
     {offset
       c3YNN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YNV; else goto c3YNU;
       c3YNV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YNU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YNN_info" {
     block_c3YNN_info:
         const _c3YNN;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3YNW: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3YO0; else goto c3YNZ;
       c3YO0: // global
           HpAlloc = 144;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3YNZ: // global
           I64[Hp - 136] = p_s3XqJ_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = P64[Sp];
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           I64[Hp - 24] = lvl2_s3Xrh_info;
           P64[Hp - 16] = Hp - 135;
           I64[Hp - 8] = sat_s3Xrq_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 72];
           R3 = P64[Sp + 64];
           R2 = Hp - 6;
           Sp = Sp + 80;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)1_entry;
         const 0;
         const 172627620528142;
         const 64424509440;
         const S3Y0k_srt+120;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.127671515 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3YQ5: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 80, res: 0, upd: 8;
     }
 },
 ds1_s3XrH_entry() //  [R1]
         { []
         }
     {offset
       c3YQi: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3YQj; else goto c3YQk;
       c3YQj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YQk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3XrH_info" {
     ds1_s3XrH_info:
         const ds1_s3XrH_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+208;
 },
 sat_s3Xs1_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YQN: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3YQR; else goto c3YQS;
       c3YQR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YQS: // global
           I64[Sp - 80] = block_c3YQK_info;
           _s3XrI::P64 = P64[R1 + 7];
           _s3XrL::P64 = P64[R1 + 15];
           _s3XrM::P64 = P64[R1 + 23];
           _s3XrN::P64 = P64[R1 + 31];
           _s3XrO::P64 = P64[R1 + 39];
           _s3XrP::P64 = P64[R1 + 47];
           _s3XrQ::P64 = P64[R1 + 55];
           _s3XrR::P64 = P64[R1 + 63];
           _s3XrS::P64 = P64[R1 + 71];
           R1 = R2;
           P64[Sp - 72] = _s3XrI::P64;
           P64[Sp - 64] = _s3XrL::P64;
           P64[Sp - 56] = _s3XrM::P64;
           P64[Sp - 48] = _s3XrN::P64;
           P64[Sp - 40] = _s3XrO::P64;
           P64[Sp - 32] = _s3XrP::P64;
           P64[Sp - 24] = _s3XrQ::P64;
           P64[Sp - 16] = _s3XrR::P64;
           P64[Sp - 8] = _s3XrS::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto u3YQW; else goto c3YQL;
       u3YQW: // global
           call _c3YQK(R1) args: 0, res: 0, upd: 0;
       c3YQL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xs1_info" {
     sat_s3Xs1_info:
         const sat_s3Xs1_entry;
         const 9;
         const 8;
         const 4294967301;
 },
 _c3YQK() //  [R1]
         { []
         }
     {offset
       c3YQK: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3YQV; else goto c3YQU;
       c3YQV: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YQU: // global
           _s3XrW::P64 = P64[R1 + 7];
           _s3XrX::P64 = P64[R1 + 15];
           _s3XrY::P64 = P64[R1 + 23];
           _s3XrZ::P64 = P64[R1 + 31];
           I64[Hp - 96] = (,,,,,,,,,,,)_con_info;
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = _s3XrW::P64;
           P64[Hp - 16] = _s3XrX::P64;
           P64[Hp - 8] = _s3XrY::P64;
           P64[Hp] = _s3XrZ::P64;
           R2 = Hp - 95;
           R1 = P64[Sp + 8];
           Sp = Sp + 80;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YQK_info" {
     block_c3YQK_info:
         const _c3YQK;
         const 9;
         const 30;
 },
 sat_s3Xs2_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YQX: // global
           _s3XrT::P64 = R2;
           _s3Xs2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YQY; else goto c3YQZ;
       c3YQZ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3YR1; else goto c3YR0;
       c3YR1: // global
           HpAlloc = 80;
           goto c3YQY;
       c3YQY: // global
           R2 = _s3XrT::P64;
           R1 = _s3Xs2::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YR0: // global
           _s3Xrz::P64 = P64[_s3Xs2::P64 + 7];
           _s3XrA::P64 = P64[_s3Xs2::P64 + 15];
           _s3XrB::P64 = P64[_s3Xs2::P64 + 23];
           _s3XrC::P64 = P64[_s3Xs2::P64 + 31];
           _s3XrG::P64 = P64[_s3Xs2::P64 + 39];
           _s3XrI::P64 = P64[_s3Xs2::P64 + 47];
           _s3XrL::P64 = P64[_s3Xs2::P64 + 55];
           _s3XrM::P64 = P64[_s3Xs2::P64 + 63];
           _s3XrN::P64 = P64[_s3Xs2::P64 + 71];
           _s3XrO::P64 = P64[_s3Xs2::P64 + 79];
           _s3XrP::P64 = P64[_s3Xs2::P64 + 87];
           _s3XrQ::P64 = P64[_s3Xs2::P64 + 95];
           _s3XrR::P64 = P64[_s3Xs2::P64 + 103];
           _s3XrS::P64 = P64[_s3Xs2::P64 + 111];
           I64[Hp - 72] = sat_s3Xs1_info;
           P64[Hp - 64] = _s3XrI::P64;
           P64[Hp - 56] = _s3XrL::P64;
           P64[Hp - 48] = _s3XrM::P64;
           P64[Hp - 40] = _s3XrN::P64;
           P64[Hp - 32] = _s3XrO::P64;
           P64[Hp - 24] = _s3XrP::P64;
           P64[Hp - 16] = _s3XrQ::P64;
           P64[Hp - 8] = _s3XrR::P64;
           P64[Hp] = _s3XrS::P64;
           R6 = _s3XrG::P64;
           R5 = _s3XrC::P64;
           R4 = _s3XrB::P64;
           R3 = _s3XrA::P64;
           R2 = _s3Xrz::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 71;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xs2_info" {
     sat_s3Xs2_info:
         const sat_s3Xs2_entry;
         const 14;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+200;
 },
 sat_s3Xs5_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YR2: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3YR6; else goto c3YR7;
       c3YR6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YR7: // global
           I64[Sp - 56] = block_c3YQv_info;
           _s3Xrz::P64 = P64[R1 + 7];
           _s3XrA::P64 = P64[R1 + 15];
           _s3XrB::P64 = P64[R1 + 23];
           _s3XrC::P64 = P64[R1 + 31];
           _s3XrG::P64 = P64[R1 + 39];
           _s3XrI::P64 = P64[R1 + 47];
           R1 = R2;
           P64[Sp - 48] = _s3Xrz::P64;
           P64[Sp - 40] = _s3XrA::P64;
           P64[Sp - 32] = _s3XrB::P64;
           P64[Sp - 24] = _s3XrC::P64;
           P64[Sp - 16] = _s3XrG::P64;
           P64[Sp - 8] = _s3XrI::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u3YRe; else goto c3YQw;
       u3YRe: // global
           call _c3YQv(R1) args: 0, res: 0, upd: 0;
       c3YQw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xs5_info" {
     sat_s3Xs5_info:
         const sat_s3Xs5_entry;
         const 6;
         const 5501853106184;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YQv() //  [R1]
         { []
         }
     {offset
       c3YQv: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3YRa; else goto c3YR9;
       c3YRa: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YR9: // global
           _s3XrL::P64 = P64[R1 + 7];
           _s3XrM::P64 = P64[R1 + 15];
           _s3XrN::P64 = P64[R1 + 23];
           _s3XrO::P64 = P64[R1 + 31];
           _s3XrP::P64 = P64[R1 + 39];
           _s3XrQ::P64 = P64[R1 + 47];
           _s3XrR::P64 = P64[R1 + 55];
           _s3XrS::P64 = P64[R1 + 63];
           I64[Hp - 112] = sat_s3Xs2_info;
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 48];
           P64[Hp - 56] = _s3XrL::P64;
           P64[Hp - 48] = _s3XrM::P64;
           P64[Hp - 40] = _s3XrN::P64;
           P64[Hp - 32] = _s3XrO::P64;
           P64[Hp - 24] = _s3XrP::P64;
           P64[Hp - 16] = _s3XrQ::P64;
           P64[Hp - 8] = _s3XrR::P64;
           P64[Hp] = _s3XrS::P64;
           I64[Sp + 48] = block_c3YR3_info;
           R3 = Hp - 111;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 48;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YQv_info" {
     block_c3YQv_info:
         const _c3YQv;
         const 6;
         const 5501853106206;
         const S3Y0k_srt+120;
 },
 _c3YR3() //  [R1]
         { []
         }
     {offset
       c3YR3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YRd; else goto c3YRc;
       c3YRd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YRc: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YR3_info" {
     block_c3YR3_info:
         const _c3YR3;
         const 0;
         const 30;
 },
 sat_s3Xs6_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YRf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3YRj; else goto c3YRi;
       c3YRj: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YRi: // global
           _s3Xrz::P64 = P64[R1 + 7];
           _s3XrA::P64 = P64[R1 + 15];
           _s3XrB::P64 = P64[R1 + 23];
           _s3XrC::P64 = P64[R1 + 31];
           _s3XrG::P64 = P64[R1 + 39];
           _s3XrH::P64 = P64[R1 + 47];
           I64[Hp - 48] = sat_s3Xs5_info;
           P64[Hp - 40] = _s3Xrz::P64;
           P64[Hp - 32] = _s3XrA::P64;
           P64[Hp - 24] = _s3XrB::P64;
           P64[Hp - 16] = _s3XrC::P64;
           P64[Hp - 8] = _s3XrG::P64;
           P64[Hp] = R2;
           R2 = Hp - 47;
           R1 = _s3XrH::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xs6_info" {
     sat_s3Xs6_info:
         const sat_s3Xs6_entry;
         const 6;
         const 5501853106184;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3XrF_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YRk: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3YRo; else goto c3YRn;
       c3YRo: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YRn: // global
           _s3Xrr::P64 = P64[R1 + 7];
           _s3Xrs::P64 = P64[R1 + 15];
           _s3Xrt::P64 = P64[R1 + 23];
           _s3Xru::P64 = P64[R1 + 31];
           _s3Xrv::P64 = P64[R1 + 39];
           _s3Xrw::P64 = P64[R1 + 47];
           _s3Xrx::P64 = P64[R1 + 55];
           _s3Xry::P64 = P64[R1 + 63];
           _s3Xrz::P64 = P64[R1 + 71];
           _s3XrA::P64 = P64[R1 + 79];
           _s3XrB::P64 = P64[R1 + 87];
           _s3XrC::P64 = P64[R1 + 95];
           I64[Hp - 136] = ds1_s3XrH_info;
           P64[Hp - 120] = _s3Xrr::P64;
           P64[Hp - 112] = _s3Xrs::P64;
           P64[Hp - 104] = _s3Xrt::P64;
           P64[Hp - 96] = _s3Xru::P64;
           P64[Hp - 88] = _s3Xrv::P64;
           P64[Hp - 80] = _s3Xrw::P64;
           P64[Hp - 72] = _s3Xrx::P64;
           P64[Hp - 64] = _s3Xry::P64;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3Xs6_info;
           P64[Hp - 40] = _s3Xrz::P64;
           P64[Hp - 32] = _s3XrA::P64;
           P64[Hp - 24] = _s3XrB::P64;
           P64[Hp - 16] = _s3XrC::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 136;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3XrF_info" {
     p_s3XrF_info:
         const p_s3XrF_entry;
         const 12;
         const 14297946128392;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3Xs7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YRx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YRy; else goto c3YRz;
       c3YRy: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YRz: // global
           I64[Sp - 8] = block_c3YRu_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Xs7_info" {
     lvl2_s3Xs7_info:
         const lvl2_s3Xs7_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YRu() //  [R1]
         { []
         }
     {offset
       c3YRu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YRC; else goto c3YRB;
       c3YRC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YRB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YRu_info" {
     block_c3YRu_info:
         const _c3YRu;
         const 0;
         const 30;
 },
 sat_s3Xsg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YRL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YRM; else goto c3YRN;
       c3YRM: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YRN: // global
           I64[Sp - 8] = block_c3YRI_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xsg_info" {
     sat_s3Xsg_info:
         const sat_s3Xsg_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YRI() //  [R1]
         { []
         }
     {offset
       c3YRI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YRQ; else goto c3YRP;
       c3YRQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YRP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YRI_info" {
     block_c3YRI_info:
         const _c3YRI;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3YRR: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3YRV; else goto c3YRU;
       c3YRV: // global
           HpAlloc = 136;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3YRU: // global
           I64[Hp - 128] = p_s3XrF_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           I64[Hp - 24] = lvl2_s3Xs7_info;
           P64[Hp - 16] = Hp - 127;
           I64[Hp - 8] = sat_s3Xsg_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 64];
           R3 = P64[Sp + 56];
           R2 = Hp - 6;
           Sp = Sp + 72;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)1_entry;
         const 0;
         const 313365108883470;
         const 60129542144;
         const S3Y0k_srt+120;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.168527411 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3YTE: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 72, res: 0, upd: 8;
     }
 },
 ds1_s3Xsw_entry() //  [R1]
         { []
         }
     {offset
       c3YTR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3YTS; else goto c3YTT;
       c3YTS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YTT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xsw_info" {
     ds1_s3Xsw_info:
         const ds1_s3Xsw_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+208;
 },
 sat_s3XsQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YUz: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3YUD; else goto c3YUC;
       c3YUD: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YUC: // global
           _s3Xsx::P64 = P64[R1 + 7];
           _s3XsA::P64 = P64[R1 + 15];
           _s3XsB::P64 = P64[R1 + 23];
           _s3XsC::P64 = P64[R1 + 31];
           _s3XsD::P64 = P64[R1 + 39];
           _s3XsE::P64 = P64[R1 + 47];
           _s3XsF::P64 = P64[R1 + 55];
           _s3XsG::P64 = P64[R1 + 63];
           _s3XsH::P64 = P64[R1 + 71];
           _s3XsL::P64 = P64[R1 + 79];
           _s3XsM::P64 = P64[R1 + 87];
           I64[Hp - 88] = (,,,,,,,,,,)_con_info;
           P64[Hp - 80] = _s3XsA::P64;
           P64[Hp - 72] = _s3XsB::P64;
           P64[Hp - 64] = _s3XsC::P64;
           P64[Hp - 56] = _s3XsD::P64;
           P64[Hp - 48] = _s3XsE::P64;
           P64[Hp - 40] = _s3XsF::P64;
           P64[Hp - 32] = _s3XsG::P64;
           P64[Hp - 24] = _s3XsH::P64;
           P64[Hp - 16] = _s3XsL::P64;
           P64[Hp - 8] = _s3XsM::P64;
           P64[Hp] = R2;
           R2 = Hp - 87;
           R1 = _s3Xsx::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XsQ_info" {
     sat_s3XsQ_info:
         const sat_s3XsQ_entry;
         const 11;
         const 8;
         const 4294967301;
 },
 sat_s3XsR_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YUE: // global
           _s3XsN::P64 = R2;
           _s3XsR::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3YUF; else goto c3YUG;
       c3YUG: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3YUI; else goto c3YUH;
       c3YUI: // global
           HpAlloc = 96;
           goto c3YUF;
       c3YUF: // global
           R2 = _s3XsN::P64;
           R1 = _s3XsR::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YUH: // global
           _s3Xsr::P64 = P64[_s3XsR::P64 + 7];
           _s3Xsv::P64 = P64[_s3XsR::P64 + 15];
           _s3Xsx::P64 = P64[_s3XsR::P64 + 23];
           _s3XsA::P64 = P64[_s3XsR::P64 + 31];
           _s3XsB::P64 = P64[_s3XsR::P64 + 39];
           _s3XsC::P64 = P64[_s3XsR::P64 + 47];
           _s3XsD::P64 = P64[_s3XsR::P64 + 55];
           _s3XsE::P64 = P64[_s3XsR::P64 + 63];
           _s3XsF::P64 = P64[_s3XsR::P64 + 71];
           _s3XsG::P64 = P64[_s3XsR::P64 + 79];
           _s3XsH::P64 = P64[_s3XsR::P64 + 87];
           _s3XsL::P64 = P64[_s3XsR::P64 + 95];
           _s3XsM::P64 = P64[_s3XsR::P64 + 103];
           I64[Hp - 88] = sat_s3XsQ_info;
           P64[Hp - 80] = _s3Xsx::P64;
           P64[Hp - 72] = _s3XsA::P64;
           P64[Hp - 64] = _s3XsB::P64;
           P64[Hp - 56] = _s3XsC::P64;
           P64[Hp - 48] = _s3XsD::P64;
           P64[Hp - 40] = _s3XsE::P64;
           P64[Hp - 32] = _s3XsF::P64;
           P64[Hp - 24] = _s3XsG::P64;
           P64[Hp - 16] = _s3XsH::P64;
           P64[Hp - 8] = _s3XsL::P64;
           P64[Hp] = _s3XsM::P64;
           R2 = _s3Xsr::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3Xsv::P64;
           P64[Sp - 8] = Hp - 87;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XsR_info" {
     sat_s3XsR_info:
         const sat_s3XsR_entry;
         const 13;
         const 8;
         const 4294967301;
 },
 sat_s3XsU_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YUJ: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3YUN; else goto c3YUO;
       c3YUN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YUO: // global
           I64[Sp - 96] = block_c3YUj_info;
           _s3Xsr::P64 = P64[R1 + 7];
           _s3Xsv::P64 = P64[R1 + 15];
           _s3Xsx::P64 = P64[R1 + 23];
           _s3XsA::P64 = P64[R1 + 31];
           _s3XsB::P64 = P64[R1 + 39];
           _s3XsC::P64 = P64[R1 + 47];
           _s3XsD::P64 = P64[R1 + 55];
           _s3XsE::P64 = P64[R1 + 63];
           _s3XsF::P64 = P64[R1 + 71];
           _s3XsG::P64 = P64[R1 + 79];
           _s3XsH::P64 = P64[R1 + 87];
           R1 = R2;
           P64[Sp - 88] = _s3Xsr::P64;
           P64[Sp - 80] = _s3Xsv::P64;
           P64[Sp - 72] = _s3Xsx::P64;
           P64[Sp - 64] = _s3XsA::P64;
           P64[Sp - 56] = _s3XsB::P64;
           P64[Sp - 48] = _s3XsC::P64;
           P64[Sp - 40] = _s3XsD::P64;
           P64[Sp - 32] = _s3XsE::P64;
           P64[Sp - 24] = _s3XsF::P64;
           P64[Sp - 16] = _s3XsG::P64;
           P64[Sp - 8] = _s3XsH::P64;
           Sp = Sp - 96;
           if (R1 & 7 != 0) goto u3YUV; else goto c3YUk;
       u3YUV: // global
           call _c3YUj(R1) args: 0, res: 0, upd: 0;
       c3YUk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XsU_info" {
     sat_s3XsU_info:
         const sat_s3XsU_entry;
         const 11;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YUj() //  [R1]
         { []
         }
     {offset
       c3YUj: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3YUR; else goto c3YUQ;
       c3YUR: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YUQ: // global
           _s3XsL::P64 = P64[R1 + 7];
           _s3XsM::P64 = P64[R1 + 15];
           I64[Hp - 104] = sat_s3XsR_info;
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = P64[Sp + 80];
           P64[Hp - 16] = P64[Sp + 88];
           P64[Hp - 8] = _s3XsL::P64;
           P64[Hp] = _s3XsM::P64;
           I64[Sp + 88] = block_c3YUK_info;
           R3 = Hp - 103;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 88;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YUj_info" {
     block_c3YUj_info:
         const _c3YUj;
         const 11;
         const 1103806595102;
         const S3Y0k_srt+120;
 },
 _c3YUK() //  [R1]
         { []
         }
     {offset
       c3YUK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YUU; else goto c3YUT;
       c3YUU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YUT: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YUK_info" {
     block_c3YUK_info:
         const _c3YUK;
         const 0;
         const 30;
 },
 sat_s3XsV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YUW: // global
           _s3XsI::P64 = R2;
           _s3XsV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YUX; else goto c3YUY;
       c3YUY: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3YV0; else goto c3YUZ;
       c3YV0: // global
           HpAlloc = 96;
           goto c3YUX;
       c3YUX: // global
           R2 = _s3XsI::P64;
           R1 = _s3XsV::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YUZ: // global
           _s3Xsp::P64 = P64[_s3XsV::P64 + 7];
           _s3Xsq::P64 = P64[_s3XsV::P64 + 15];
           _s3Xsr::P64 = P64[_s3XsV::P64 + 23];
           _s3Xsv::P64 = P64[_s3XsV::P64 + 31];
           _s3Xsx::P64 = P64[_s3XsV::P64 + 39];
           _s3XsA::P64 = P64[_s3XsV::P64 + 47];
           _s3XsB::P64 = P64[_s3XsV::P64 + 55];
           _s3XsC::P64 = P64[_s3XsV::P64 + 63];
           _s3XsD::P64 = P64[_s3XsV::P64 + 71];
           _s3XsE::P64 = P64[_s3XsV::P64 + 79];
           _s3XsF::P64 = P64[_s3XsV::P64 + 87];
           _s3XsG::P64 = P64[_s3XsV::P64 + 95];
           _s3XsH::P64 = P64[_s3XsV::P64 + 103];
           I64[Hp - 88] = sat_s3XsU_info;
           P64[Hp - 80] = _s3Xsr::P64;
           P64[Hp - 72] = _s3Xsv::P64;
           P64[Hp - 64] = _s3Xsx::P64;
           P64[Hp - 56] = _s3XsA::P64;
           P64[Hp - 48] = _s3XsB::P64;
           P64[Hp - 40] = _s3XsC::P64;
           P64[Hp - 32] = _s3XsD::P64;
           P64[Hp - 24] = _s3XsE::P64;
           P64[Hp - 16] = _s3XsF::P64;
           P64[Hp - 8] = _s3XsG::P64;
           P64[Hp] = _s3XsH::P64;
           R4 = _s3Xsv::P64;
           R3 = _s3Xsq::P64;
           R2 = _s3Xsp::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 87;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XsV_info" {
     sat_s3XsV_info:
         const sat_s3XsV_entry;
         const 13;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 sat_s3XsY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YV1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3YV5; else goto c3YV6;
       c3YV5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YV6: // global
           I64[Sp - 48] = block_c3YU4_info;
           _s3Xsp::P64 = P64[R1 + 7];
           _s3Xsq::P64 = P64[R1 + 15];
           _s3Xsr::P64 = P64[R1 + 23];
           _s3Xsv::P64 = P64[R1 + 31];
           _s3Xsx::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 40] = _s3Xsp::P64;
           P64[Sp - 32] = _s3Xsq::P64;
           P64[Sp - 24] = _s3Xsr::P64;
           P64[Sp - 16] = _s3Xsv::P64;
           P64[Sp - 8] = _s3Xsx::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3YVd; else goto c3YU5;
       u3YVd: // global
           call _c3YU4(R1) args: 0, res: 0, upd: 0;
       c3YU5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XsY_info" {
     sat_s3XsY_info:
         const sat_s3XsY_entry;
         const 5;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YU4() //  [R1]
         { []
         }
     {offset
       c3YU4: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3YV9; else goto c3YV8;
       c3YV9: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YV8: // global
           _s3XsA::P64 = P64[R1 + 7];
           _s3XsB::P64 = P64[R1 + 15];
           _s3XsC::P64 = P64[R1 + 23];
           _s3XsD::P64 = P64[R1 + 31];
           _s3XsE::P64 = P64[R1 + 39];
           _s3XsF::P64 = P64[R1 + 47];
           _s3XsG::P64 = P64[R1 + 55];
           _s3XsH::P64 = P64[R1 + 63];
           I64[Hp - 104] = sat_s3XsV_info;
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = _s3XsA::P64;
           P64[Hp - 48] = _s3XsB::P64;
           P64[Hp - 40] = _s3XsC::P64;
           P64[Hp - 32] = _s3XsD::P64;
           P64[Hp - 24] = _s3XsE::P64;
           P64[Hp - 16] = _s3XsF::P64;
           P64[Hp - 8] = _s3XsG::P64;
           P64[Hp] = _s3XsH::P64;
           I64[Sp + 40] = block_c3YV2_info;
           R3 = Hp - 103;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 40;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YU4_info" {
     block_c3YU4_info:
         const _c3YU4;
         const 5;
         const 3302829850654;
         const S3Y0k_srt+120;
 },
 _c3YV2() //  [R1]
         { []
         }
     {offset
       c3YV2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YVc; else goto c3YVb;
       c3YVc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YVb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YV2_info" {
     block_c3YV2_info:
         const _c3YV2;
         const 0;
         const 30;
 },
 sat_s3XsZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YVe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3YVi; else goto c3YVh;
       c3YVi: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YVh: // global
           _s3Xsp::P64 = P64[R1 + 7];
           _s3Xsq::P64 = P64[R1 + 15];
           _s3Xsr::P64 = P64[R1 + 23];
           _s3Xsv::P64 = P64[R1 + 31];
           _s3Xsw::P64 = P64[R1 + 39];
           I64[Hp - 40] = sat_s3XsY_info;
           P64[Hp - 32] = _s3Xsp::P64;
           P64[Hp - 24] = _s3Xsq::P64;
           P64[Hp - 16] = _s3Xsr::P64;
           P64[Hp - 8] = _s3Xsv::P64;
           P64[Hp] = R2;
           R2 = Hp - 39;
           R1 = _s3Xsw::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XsZ_info" {
     sat_s3XsZ_info:
         const sat_s3XsZ_entry;
         const 5;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3Xsu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YVj: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3YVn; else goto c3YVm;
       c3YVn: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YVm: // global
           _s3Xsh::P64 = P64[R1 + 7];
           _s3Xsi::P64 = P64[R1 + 15];
           _s3Xsj::P64 = P64[R1 + 23];
           _s3Xsk::P64 = P64[R1 + 31];
           _s3Xsl::P64 = P64[R1 + 39];
           _s3Xsm::P64 = P64[R1 + 47];
           _s3Xsn::P64 = P64[R1 + 55];
           _s3Xso::P64 = P64[R1 + 63];
           _s3Xsp::P64 = P64[R1 + 71];
           _s3Xsq::P64 = P64[R1 + 79];
           _s3Xsr::P64 = P64[R1 + 87];
           I64[Hp - 128] = ds1_s3Xsw_info;
           P64[Hp - 112] = _s3Xsh::P64;
           P64[Hp - 104] = _s3Xsi::P64;
           P64[Hp - 96] = _s3Xsj::P64;
           P64[Hp - 88] = _s3Xsk::P64;
           P64[Hp - 80] = _s3Xsl::P64;
           P64[Hp - 72] = _s3Xsm::P64;
           P64[Hp - 64] = _s3Xsn::P64;
           P64[Hp - 56] = _s3Xso::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s3XsZ_info;
           P64[Hp - 32] = _s3Xsp::P64;
           P64[Hp - 24] = _s3Xsq::P64;
           P64[Hp - 16] = _s3Xsr::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 128;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Xsu_info" {
     p_s3Xsu_info:
         const p_s3Xsu_entry;
         const 11;
         const 12098922872840;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3Xt0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YVw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YVx; else goto c3YVy;
       c3YVx: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YVy: // global
           I64[Sp - 8] = block_c3YVt_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Xt0_info" {
     lvl2_s3Xt0_info:
         const lvl2_s3Xt0_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YVt() //  [R1]
         { []
         }
     {offset
       c3YVt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YVB; else goto c3YVA;
       c3YVB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YVA: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YVt_info" {
     block_c3YVt_info:
         const _c3YVt;
         const 0;
         const 30;
 },
 sat_s3Xt9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YVK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YVL; else goto c3YVM;
       c3YVL: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YVM: // global
           I64[Sp - 8] = block_c3YVH_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xt9_info" {
     sat_s3Xt9_info:
         const sat_s3Xt9_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YVH() //  [R1]
         { []
         }
     {offset
       c3YVH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YVP; else goto c3YVO;
       c3YVP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YVO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YVH_info" {
     block_c3YVH_info:
         const _c3YVH;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3YVQ: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3YVU; else goto c3YVT;
       c3YVU: // global
           HpAlloc = 128;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3YVT: // global
           I64[Hp - 120] = p_s3Xsu_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           I64[Hp - 24] = lvl2_s3Xt0_info;
           P64[Hp - 16] = Hp - 119;
           I64[Hp - 8] = sat_s3Xt9_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 56];
           R3 = P64[Sp + 48];
           R2 = Hp - 6;
           Sp = Sp + 64;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,,)1_entry;
         const 0;
         const 592641062338574;
         const 55834574848;
         const S3Y0k_srt+120;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.213152493 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3YXV: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 64, res: 0, upd: 8;
     }
 },
 ds1_s3Xto_entry() //  [R1]
         { []
         }
     {offset
       c3YY8: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3YY9; else goto c3YYa;
       c3YY9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3YYa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xto_info" {
     ds1_s3Xto_info:
         const ds1_s3Xto_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+208;
 },
 sat_s3XtG_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YYD: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3YYH; else goto c3YYI;
       c3YYH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YYI: // global
           I64[Sp - 80] = block_c3YYA_info;
           _s3Xtp::P64 = P64[R1 + 7];
           _s3Xts::P64 = P64[R1 + 15];
           _s3Xtt::P64 = P64[R1 + 23];
           _s3Xtu::P64 = P64[R1 + 31];
           _s3Xtv::P64 = P64[R1 + 39];
           _s3Xtw::P64 = P64[R1 + 47];
           _s3Xtx::P64 = P64[R1 + 55];
           _s3Xty::P64 = P64[R1 + 63];
           _s3Xtz::P64 = P64[R1 + 71];
           R1 = R2;
           P64[Sp - 72] = _s3Xtp::P64;
           P64[Sp - 64] = _s3Xts::P64;
           P64[Sp - 56] = _s3Xtt::P64;
           P64[Sp - 48] = _s3Xtu::P64;
           P64[Sp - 40] = _s3Xtv::P64;
           P64[Sp - 32] = _s3Xtw::P64;
           P64[Sp - 24] = _s3Xtx::P64;
           P64[Sp - 16] = _s3Xty::P64;
           P64[Sp - 8] = _s3Xtz::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto u3YYM; else goto c3YYB;
       u3YYM: // global
           call _c3YYA(R1) args: 0, res: 0, upd: 0;
       c3YYB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XtG_info" {
     sat_s3XtG_info:
         const sat_s3XtG_entry;
         const 9;
         const 8;
         const 4294967301;
 },
 _c3YYA() //  [R1]
         { []
         }
     {offset
       c3YYA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3YYL; else goto c3YYK;
       c3YYL: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YYK: // global
           _s3XtD::P64 = P64[R1 + 7];
           _s3XtE::P64 = P64[R1 + 15];
           I64[Hp - 80] = (,,,,,,,,,)_con_info;
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           P64[Hp - 8] = _s3XtD::P64;
           P64[Hp] = _s3XtE::P64;
           R2 = Hp - 79;
           R1 = P64[Sp + 8];
           Sp = Sp + 80;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YYA_info" {
     block_c3YYA_info:
         const _c3YYA;
         const 9;
         const 30;
 },
 sat_s3XtH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YYN: // global
           _s3XtA::P64 = R2;
           _s3XtH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3YYO; else goto c3YYP;
       c3YYP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3YYR; else goto c3YYQ;
       c3YYR: // global
           HpAlloc = 80;
           goto c3YYO;
       c3YYO: // global
           R2 = _s3XtA::P64;
           R1 = _s3XtH::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YYQ: // global
           _s3Xti::P64 = P64[_s3XtH::P64 + 7];
           _s3Xtj::P64 = P64[_s3XtH::P64 + 15];
           _s3Xtn::P64 = P64[_s3XtH::P64 + 23];
           _s3Xtp::P64 = P64[_s3XtH::P64 + 31];
           _s3Xts::P64 = P64[_s3XtH::P64 + 39];
           _s3Xtt::P64 = P64[_s3XtH::P64 + 47];
           _s3Xtu::P64 = P64[_s3XtH::P64 + 55];
           _s3Xtv::P64 = P64[_s3XtH::P64 + 63];
           _s3Xtw::P64 = P64[_s3XtH::P64 + 71];
           _s3Xtx::P64 = P64[_s3XtH::P64 + 79];
           _s3Xty::P64 = P64[_s3XtH::P64 + 87];
           _s3Xtz::P64 = P64[_s3XtH::P64 + 95];
           I64[Hp - 72] = sat_s3XtG_info;
           P64[Hp - 64] = _s3Xtp::P64;
           P64[Hp - 56] = _s3Xts::P64;
           P64[Hp - 48] = _s3Xtt::P64;
           P64[Hp - 40] = _s3Xtu::P64;
           P64[Hp - 32] = _s3Xtv::P64;
           P64[Hp - 24] = _s3Xtw::P64;
           P64[Hp - 16] = _s3Xtx::P64;
           P64[Hp - 8] = _s3Xty::P64;
           P64[Hp] = _s3Xtz::P64;
           R4 = _s3Xtn::P64;
           R3 = _s3Xtj::P64;
           R2 = _s3Xti::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 71;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XtH_info" {
     sat_s3XtH_info:
         const sat_s3XtH_entry;
         const 12;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+192;
 },
 sat_s3XtK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YYS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3YYW; else goto c3YYX;
       c3YYW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YYX: // global
           I64[Sp - 40] = block_c3YYl_info;
           _s3Xti::P64 = P64[R1 + 7];
           _s3Xtj::P64 = P64[R1 + 15];
           _s3Xtn::P64 = P64[R1 + 23];
           _s3Xtp::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3Xti::P64;
           P64[Sp - 24] = _s3Xtj::P64;
           P64[Sp - 16] = _s3Xtn::P64;
           P64[Sp - 8] = _s3Xtp::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3YZ4; else goto c3YYm;
       u3YZ4: // global
           call _c3YYl(R1) args: 0, res: 0, upd: 0;
       c3YYm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XtK_info" {
     sat_s3XtK_info:
         const sat_s3XtK_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3YYl() //  [R1]
         { []
         }
     {offset
       c3YYl: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3YZ0; else goto c3YYZ;
       c3YZ0: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YYZ: // global
           _s3Xts::P64 = P64[R1 + 7];
           _s3Xtt::P64 = P64[R1 + 15];
           _s3Xtu::P64 = P64[R1 + 23];
           _s3Xtv::P64 = P64[R1 + 31];
           _s3Xtw::P64 = P64[R1 + 39];
           _s3Xtx::P64 = P64[R1 + 47];
           _s3Xty::P64 = P64[R1 + 55];
           _s3Xtz::P64 = P64[R1 + 63];
           I64[Hp - 96] = sat_s3XtH_info;
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s3Xts::P64;
           P64[Hp - 48] = _s3Xtt::P64;
           P64[Hp - 40] = _s3Xtu::P64;
           P64[Hp - 32] = _s3Xtv::P64;
           P64[Hp - 24] = _s3Xtw::P64;
           P64[Hp - 16] = _s3Xtx::P64;
           P64[Hp - 8] = _s3Xty::P64;
           P64[Hp] = _s3Xtz::P64;
           I64[Sp + 32] = block_c3YYT_info;
           R3 = Hp - 95;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YYl_info" {
     block_c3YYl_info:
         const _c3YYl;
         const 4;
         const 3302829850654;
         const S3Y0k_srt+120;
 },
 _c3YYT() //  [R1]
         { []
         }
     {offset
       c3YYT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YZ3; else goto c3YZ2;
       c3YZ3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YZ2: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YYT_info" {
     block_c3YYT_info:
         const _c3YYT;
         const 0;
         const 30;
 },
 sat_s3XtL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YZ5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3YZ9; else goto c3YZ8;
       c3YZ9: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YZ8: // global
           _s3Xti::P64 = P64[R1 + 7];
           _s3Xtj::P64 = P64[R1 + 15];
           _s3Xtn::P64 = P64[R1 + 23];
           _s3Xto::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3XtK_info;
           P64[Hp - 24] = _s3Xti::P64;
           P64[Hp - 16] = _s3Xtj::P64;
           P64[Hp - 8] = _s3Xtn::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3Xto::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XtL_info" {
     sat_s3XtL_info:
         const sat_s3XtL_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3Xtm_entry() //  [R1, R2]
         { []
         }
     {offset
       c3YZa: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3YZe; else goto c3YZd;
       c3YZe: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3YZd: // global
           _s3Xta::P64 = P64[R1 + 7];
           _s3Xtb::P64 = P64[R1 + 15];
           _s3Xtc::P64 = P64[R1 + 23];
           _s3Xtd::P64 = P64[R1 + 31];
           _s3Xte::P64 = P64[R1 + 39];
           _s3Xtf::P64 = P64[R1 + 47];
           _s3Xtg::P64 = P64[R1 + 55];
           _s3Xth::P64 = P64[R1 + 63];
           _s3Xti::P64 = P64[R1 + 71];
           _s3Xtj::P64 = P64[R1 + 79];
           I64[Hp - 120] = ds1_s3Xto_info;
           P64[Hp - 104] = _s3Xta::P64;
           P64[Hp - 96] = _s3Xtb::P64;
           P64[Hp - 88] = _s3Xtc::P64;
           P64[Hp - 80] = _s3Xtd::P64;
           P64[Hp - 72] = _s3Xte::P64;
           P64[Hp - 64] = _s3Xtf::P64;
           P64[Hp - 56] = _s3Xtg::P64;
           P64[Hp - 48] = _s3Xth::P64;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3XtL_info;
           P64[Hp - 24] = _s3Xti::P64;
           P64[Hp - 16] = _s3Xtj::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 120;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Xtm_info" {
     p_s3Xtm_info:
         const p_s3Xtm_entry;
         const 10;
         const 12098922872840;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3XtM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YZn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YZo; else goto c3YZp;
       c3YZo: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YZp: // global
           I64[Sp - 8] = block_c3YZk_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3XtM_info" {
     lvl2_s3XtM_info:
         const lvl2_s3XtM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YZk() //  [R1]
         { []
         }
     {offset
       c3YZk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YZs; else goto c3YZr;
       c3YZs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YZr: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YZk_info" {
     block_c3YZk_info:
         const _c3YZk;
         const 0;
         const 30;
 },
 sat_s3XtV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3YZB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3YZC; else goto c3YZD;
       c3YZC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3YZD: // global
           I64[Sp - 8] = block_c3YZy_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XtV_info" {
     sat_s3XtV_info:
         const sat_s3XtV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3YZy() //  [R1]
         { []
         }
     {offset
       c3YZy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3YZG; else goto c3YZF;
       c3YZG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3YZF: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3YZy_info" {
     block_c3YZy_info:
         const _c3YZy;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3YZH: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3YZL; else goto c3YZK;
       c3YZL: // global
           HpAlloc = 120;
           R1 = GHC.Read.$fRead(,,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3YZK: // global
           I64[Hp - 112] = p_s3Xtm_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           I64[Hp - 24] = lvl2_s3XtM_info;
           P64[Hp - 16] = Hp - 111;
           I64[Hp - 8] = sat_s3XtV_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = Hp - 6;
           Sp = Sp + 56;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,,)1_entry;
         const 0;
         const 1155591015759886;
         const 51539607552;
         const S3Y0k_srt+120;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.251135596 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3Z1q: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 56, res: 0, upd: 8;
     }
 },
 ds1_s3Xu9_entry() //  [R1]
         { []
         }
     {offset
       c3Z1D: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Z1E; else goto c3Z1F;
       c3Z1E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Z1F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xu9_info" {
     ds1_s3Xu9_info:
         const ds1_s3Xu9_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+208;
 },
 sat_s3Xuo_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z26: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Z2a; else goto c3Z29;
       c3Z2a: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z29: // global
           _s3Xua::P64 = P64[R1 + 7];
           _s3Xud::P64 = P64[R1 + 15];
           _s3Xue::P64 = P64[R1 + 23];
           _s3Xuf::P64 = P64[R1 + 31];
           _s3Xug::P64 = P64[R1 + 39];
           _s3Xuh::P64 = P64[R1 + 47];
           _s3Xui::P64 = P64[R1 + 55];
           _s3Xuj::P64 = P64[R1 + 63];
           _s3Xuk::P64 = P64[R1 + 71];
           I64[Hp - 72] = (,,,,,,,,)_con_info;
           P64[Hp - 64] = _s3Xud::P64;
           P64[Hp - 56] = _s3Xue::P64;
           P64[Hp - 48] = _s3Xuf::P64;
           P64[Hp - 40] = _s3Xug::P64;
           P64[Hp - 32] = _s3Xuh::P64;
           P64[Hp - 24] = _s3Xui::P64;
           P64[Hp - 16] = _s3Xuj::P64;
           P64[Hp - 8] = _s3Xuk::P64;
           P64[Hp] = R2;
           R2 = Hp - 71;
           R1 = _s3Xua::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xuo_info" {
     sat_s3Xuo_info:
         const sat_s3Xuo_entry;
         const 9;
         const 8;
         const 4294967301;
 },
 sat_s3Xup_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z2b: // global
           _s3Xul::P64 = R2;
           _s3Xup::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Z2c; else goto c3Z2d;
       c3Z2d: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Z2f; else goto c3Z2e;
       c3Z2f: // global
           HpAlloc = 80;
           goto c3Z2c;
       c3Z2c: // global
           R2 = _s3Xul::P64;
           R1 = _s3Xup::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z2e: // global
           _s3Xu4::P64 = P64[_s3Xup::P64 + 7];
           _s3Xu8::P64 = P64[_s3Xup::P64 + 15];
           _s3Xua::P64 = P64[_s3Xup::P64 + 23];
           _s3Xud::P64 = P64[_s3Xup::P64 + 31];
           _s3Xue::P64 = P64[_s3Xup::P64 + 39];
           _s3Xuf::P64 = P64[_s3Xup::P64 + 47];
           _s3Xug::P64 = P64[_s3Xup::P64 + 55];
           _s3Xuh::P64 = P64[_s3Xup::P64 + 63];
           _s3Xui::P64 = P64[_s3Xup::P64 + 71];
           _s3Xuj::P64 = P64[_s3Xup::P64 + 79];
           _s3Xuk::P64 = P64[_s3Xup::P64 + 87];
           I64[Hp - 72] = sat_s3Xuo_info;
           P64[Hp - 64] = _s3Xua::P64;
           P64[Hp - 56] = _s3Xud::P64;
           P64[Hp - 48] = _s3Xue::P64;
           P64[Hp - 40] = _s3Xuf::P64;
           P64[Hp - 32] = _s3Xug::P64;
           P64[Hp - 24] = _s3Xuh::P64;
           P64[Hp - 16] = _s3Xui::P64;
           P64[Hp - 8] = _s3Xuj::P64;
           P64[Hp] = _s3Xuk::P64;
           R2 = _s3Xu4::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3Xu8::P64;
           P64[Sp - 8] = Hp - 71;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xup_info" {
     sat_s3Xup_info:
         const sat_s3Xup_entry;
         const 11;
         const 8;
         const 4294967301;
 },
 sat_s3Xus_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z2g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Z2k; else goto c3Z2l;
       c3Z2k: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z2l: // global
           I64[Sp - 32] = block_c3Z1Q_info;
           _s3Xu4::P64 = P64[R1 + 7];
           _s3Xu8::P64 = P64[R1 + 15];
           _s3Xua::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Xu4::P64;
           P64[Sp - 16] = _s3Xu8::P64;
           P64[Sp - 8] = _s3Xua::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Z2s; else goto c3Z1R;
       u3Z2s: // global
           call _c3Z1Q(R1) args: 0, res: 0, upd: 0;
       c3Z1R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xus_info" {
     sat_s3Xus_info:
         const sat_s3Xus_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Z1Q() //  [R1]
         { []
         }
     {offset
       c3Z1Q: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Z2o; else goto c3Z2n;
       c3Z2o: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z2n: // global
           _s3Xud::P64 = P64[R1 + 7];
           _s3Xue::P64 = P64[R1 + 15];
           _s3Xuf::P64 = P64[R1 + 23];
           _s3Xug::P64 = P64[R1 + 31];
           _s3Xuh::P64 = P64[R1 + 39];
           _s3Xui::P64 = P64[R1 + 47];
           _s3Xuj::P64 = P64[R1 + 55];
           _s3Xuk::P64 = P64[R1 + 63];
           I64[Hp - 88] = sat_s3Xup_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 16];
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = _s3Xud::P64;
           P64[Hp - 48] = _s3Xue::P64;
           P64[Hp - 40] = _s3Xuf::P64;
           P64[Hp - 32] = _s3Xug::P64;
           P64[Hp - 24] = _s3Xuh::P64;
           P64[Hp - 16] = _s3Xui::P64;
           P64[Hp - 8] = _s3Xuj::P64;
           P64[Hp] = _s3Xuk::P64;
           I64[Sp + 24] = block_c3Z2h_info;
           R3 = Hp - 87;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z1Q_info" {
     block_c3Z1Q_info:
         const _c3Z1Q;
         const 3;
         const 1103806595102;
         const S3Y0k_srt+120;
 },
 _c3Z2h() //  [R1]
         { []
         }
     {offset
       c3Z2h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z2r; else goto c3Z2q;
       c3Z2r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z2q: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z2h_info" {
     block_c3Z2h_info:
         const _c3Z2h;
         const 0;
         const 30;
 },
 sat_s3Xut_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z2t: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Z2x; else goto c3Z2w;
       c3Z2x: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z2w: // global
           _s3Xu4::P64 = P64[R1 + 7];
           _s3Xu8::P64 = P64[R1 + 15];
           _s3Xu9::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3Xus_info;
           P64[Hp - 16] = _s3Xu4::P64;
           P64[Hp - 8] = _s3Xu8::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3Xu9::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xut_info" {
     sat_s3Xut_info:
         const sat_s3Xut_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3Xu7_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z2y: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3Z2C; else goto c3Z2B;
       c3Z2C: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z2B: // global
           _s3XtW::P64 = P64[R1 + 7];
           _s3XtX::P64 = P64[R1 + 15];
           _s3XtY::P64 = P64[R1 + 23];
           _s3XtZ::P64 = P64[R1 + 31];
           _s3Xu0::P64 = P64[R1 + 39];
           _s3Xu1::P64 = P64[R1 + 47];
           _s3Xu2::P64 = P64[R1 + 55];
           _s3Xu3::P64 = P64[R1 + 63];
           _s3Xu4::P64 = P64[R1 + 71];
           I64[Hp - 112] = ds1_s3Xu9_info;
           P64[Hp - 96] = _s3XtW::P64;
           P64[Hp - 88] = _s3XtX::P64;
           P64[Hp - 80] = _s3XtY::P64;
           P64[Hp - 72] = _s3XtZ::P64;
           P64[Hp - 64] = _s3Xu0::P64;
           P64[Hp - 56] = _s3Xu1::P64;
           P64[Hp - 48] = _s3Xu2::P64;
           P64[Hp - 40] = _s3Xu3::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3Xut_info;
           P64[Hp - 16] = _s3Xu4::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 112;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Xu7_info" {
     p_s3Xu7_info:
         const p_s3Xu7_entry;
         const 9;
         const 9899899617288;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3Xuu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Z2L: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Z2M; else goto c3Z2N;
       c3Z2M: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Z2N: // global
           I64[Sp - 8] = block_c3Z2I_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Xuu_info" {
     lvl2_s3Xuu_info:
         const lvl2_s3Xuu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Z2I() //  [R1]
         { []
         }
     {offset
       c3Z2I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z2Q; else goto c3Z2P;
       c3Z2Q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z2P: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z2I_info" {
     block_c3Z2I_info:
         const _c3Z2I;
         const 0;
         const 30;
 },
 sat_s3XuD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Z2Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Z30; else goto c3Z31;
       c3Z30: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Z31: // global
           I64[Sp - 8] = block_c3Z2W_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XuD_info" {
     sat_s3XuD_info:
         const sat_s3XuD_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Z2W() //  [R1]
         { []
         }
     {offset
       c3Z2W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z34; else goto c3Z33;
       c3Z34: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z33: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z2W_info" {
     block_c3Z2W_info:
         const _c3Z2W;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Z35: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3Z39; else goto c3Z38;
       c3Z39: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3Z38: // global
           I64[Hp - 104] = p_s3Xu7_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = lvl2_s3Xuu_info;
           P64[Hp - 16] = Hp - 103;
           I64[Hp - 8] = sat_s3XuD_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 6;
           Sp = Sp + 48;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,,)1_entry;
         const 0;
         const 2279291899346958;
         const 47244640256;
         const S3Y0k_srt+120;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.282445683 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3Z4y: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 48, res: 0, upd: 8;
     }
 },
 p_s3XuO_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z4H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Z4I; else goto c3Z4J;
       c3Z4I: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z4J: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 47];
           P64[Sp - 24] = P64[R1 + 55];
           P64[Sp - 16] = P64[R1 + 63];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,,)2_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3XuO_info" {
     p_s3XuO_info:
         const p_s3XuO_entry;
         const 8;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+208;
 },
 lvl2_s3XuP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Z4S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Z4T; else goto c3Z4U;
       c3Z4T: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Z4U: // global
           I64[Sp - 8] = block_c3Z4P_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3XuP_info" {
     lvl2_s3XuP_info:
         const lvl2_s3XuP_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Z4P() //  [R1]
         { []
         }
     {offset
       c3Z4P: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z4X; else goto c3Z4W;
       c3Z4X: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z4W: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z4P_info" {
     block_c3Z4P_info:
         const _c3Z4P;
         const 0;
         const 30;
 },
 sat_s3XuY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Z56: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Z57; else goto c3Z58;
       c3Z57: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Z58: // global
           I64[Sp - 8] = block_c3Z53_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XuY_info" {
     sat_s3XuY_info:
         const sat_s3XuY_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Z53() //  [R1]
         { []
         }
     {offset
       c3Z53: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z5b; else goto c3Z5a;
       c3Z5b: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z5a: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z53_info" {
     block_c3Z53_info:
         const _c3Z53;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Z5c: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3Z5g; else goto c3Z5f;
       c3Z5g: // global
           HpAlloc = 104;
           R1 = GHC.Read.$fRead(,,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3Z5f: // global
           I64[Hp - 96] = p_s3XuO_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = lvl2_s3XuP_info;
           P64[Hp - 16] = Hp - 95;
           I64[Hp - 8] = sat_s3XuY_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 6;
           Sp = Sp + 40;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,,)1_entry;
         const 0;
         const 2211908157454;
         const 42949672960;
         const S3Y0k_srt+208;
         const 10;
         const GHC.Read.$fRead(,,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.306382083 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3Z5X: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 40, res: 0, upd: 8;
     }
 },
 ds1_s3Xva_entry() //  [R1]
         { []
         }
     {offset
       c3Z6a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Z6b; else goto c3Z6c;
       c3Z6b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Z6c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xva_info" {
     ds1_s3Xva_info:
         const ds1_s3Xva_entry;
         const 5;
         const 4294967311;
         const S3Y0k_srt+200;
 },
 sat_s3Xvq_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z6S: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Z6W; else goto c3Z6V;
       c3Z6W: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z6V: // global
           _s3Xvb::P64 = P64[R1 + 7];
           _s3Xve::P64 = P64[R1 + 15];
           _s3Xvf::P64 = P64[R1 + 23];
           _s3Xvg::P64 = P64[R1 + 31];
           _s3Xvh::P64 = P64[R1 + 39];
           _s3Xvl::P64 = P64[R1 + 47];
           _s3Xvm::P64 = P64[R1 + 55];
           I64[Hp - 56] = (,,,,,,)_con_info;
           P64[Hp - 48] = _s3Xve::P64;
           P64[Hp - 40] = _s3Xvf::P64;
           P64[Hp - 32] = _s3Xvg::P64;
           P64[Hp - 24] = _s3Xvh::P64;
           P64[Hp - 16] = _s3Xvl::P64;
           P64[Hp - 8] = _s3Xvm::P64;
           P64[Hp] = R2;
           R2 = Hp - 55;
           R1 = _s3Xvb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xvq_info" {
     sat_s3Xvq_info:
         const sat_s3Xvq_entry;
         const 7;
         const 8;
         const 4294967301;
 },
 sat_s3Xvr_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z6X: // global
           _s3Xvn::P64 = R2;
           _s3Xvr::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Z6Y; else goto c3Z6Z;
       c3Z6Z: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Z71; else goto c3Z70;
       c3Z71: // global
           HpAlloc = 64;
           goto c3Z6Y;
       c3Z6Y: // global
           R2 = _s3Xvn::P64;
           R1 = _s3Xvr::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z70: // global
           _s3Xv5::P64 = P64[_s3Xvr::P64 + 7];
           _s3Xv9::P64 = P64[_s3Xvr::P64 + 15];
           _s3Xvb::P64 = P64[_s3Xvr::P64 + 23];
           _s3Xve::P64 = P64[_s3Xvr::P64 + 31];
           _s3Xvf::P64 = P64[_s3Xvr::P64 + 39];
           _s3Xvg::P64 = P64[_s3Xvr::P64 + 47];
           _s3Xvh::P64 = P64[_s3Xvr::P64 + 55];
           _s3Xvl::P64 = P64[_s3Xvr::P64 + 63];
           _s3Xvm::P64 = P64[_s3Xvr::P64 + 71];
           I64[Hp - 56] = sat_s3Xvq_info;
           P64[Hp - 48] = _s3Xvb::P64;
           P64[Hp - 40] = _s3Xve::P64;
           P64[Hp - 32] = _s3Xvf::P64;
           P64[Hp - 24] = _s3Xvg::P64;
           P64[Hp - 16] = _s3Xvh::P64;
           P64[Hp - 8] = _s3Xvl::P64;
           P64[Hp] = _s3Xvm::P64;
           R2 = _s3Xv5::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3Xv9::P64;
           P64[Sp - 8] = Hp - 55;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xvr_info" {
     sat_s3Xvr_info:
         const sat_s3Xvr_entry;
         const 9;
         const 8;
         const 4294967301;
 },
 sat_s3Xvu_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z72: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3Z76; else goto c3Z77;
       c3Z76: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z77: // global
           I64[Sp - 64] = block_c3Z6C_info;
           _s3Xv5::P64 = P64[R1 + 7];
           _s3Xv9::P64 = P64[R1 + 15];
           _s3Xvb::P64 = P64[R1 + 23];
           _s3Xve::P64 = P64[R1 + 31];
           _s3Xvf::P64 = P64[R1 + 39];
           _s3Xvg::P64 = P64[R1 + 47];
           _s3Xvh::P64 = P64[R1 + 55];
           R1 = R2;
           P64[Sp - 56] = _s3Xv5::P64;
           P64[Sp - 48] = _s3Xv9::P64;
           P64[Sp - 40] = _s3Xvb::P64;
           P64[Sp - 32] = _s3Xve::P64;
           P64[Sp - 24] = _s3Xvf::P64;
           P64[Sp - 16] = _s3Xvg::P64;
           P64[Sp - 8] = _s3Xvh::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto u3Z7e; else goto c3Z6D;
       u3Z7e: // global
           call _c3Z6C(R1) args: 0, res: 0, upd: 0;
       c3Z6D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xvu_info" {
     sat_s3Xvu_info:
         const sat_s3Xvu_entry;
         const 7;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Z6C() //  [R1]
         { []
         }
     {offset
       c3Z6C: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Z7a; else goto c3Z79;
       c3Z7a: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z79: // global
           _s3Xvl::P64 = P64[R1 + 7];
           _s3Xvm::P64 = P64[R1 + 15];
           I64[Hp - 72] = sat_s3Xvr_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = _s3Xvl::P64;
           P64[Hp] = _s3Xvm::P64;
           I64[Sp + 56] = block_c3Z73_info;
           R3 = Hp - 71;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 56;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z6C_info" {
     block_c3Z6C_info:
         const _c3Z6C;
         const 7;
         const 1103806595102;
         const S3Y0k_srt+120;
 },
 _c3Z73() //  [R1]
         { []
         }
     {offset
       c3Z73: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z7d; else goto c3Z7c;
       c3Z7d: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z7c: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z73_info" {
     block_c3Z73_info:
         const _c3Z73;
         const 0;
         const 30;
 },
 sat_s3Xvv_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z7f: // global
           _s3Xvi::P64 = R2;
           _s3Xvv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Z7g; else goto c3Z7h;
       c3Z7h: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Z7j; else goto c3Z7i;
       c3Z7j: // global
           HpAlloc = 64;
           goto c3Z7g;
       c3Z7g: // global
           R2 = _s3Xvi::P64;
           R1 = _s3Xvv::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z7i: // global
           _s3Xv3::P64 = P64[_s3Xvv::P64 + 7];
           _s3Xv4::P64 = P64[_s3Xvv::P64 + 15];
           _s3Xv5::P64 = P64[_s3Xvv::P64 + 23];
           _s3Xv9::P64 = P64[_s3Xvv::P64 + 31];
           _s3Xvb::P64 = P64[_s3Xvv::P64 + 39];
           _s3Xve::P64 = P64[_s3Xvv::P64 + 47];
           _s3Xvf::P64 = P64[_s3Xvv::P64 + 55];
           _s3Xvg::P64 = P64[_s3Xvv::P64 + 63];
           _s3Xvh::P64 = P64[_s3Xvv::P64 + 71];
           I64[Hp - 56] = sat_s3Xvu_info;
           P64[Hp - 48] = _s3Xv5::P64;
           P64[Hp - 40] = _s3Xv9::P64;
           P64[Hp - 32] = _s3Xvb::P64;
           P64[Hp - 24] = _s3Xve::P64;
           P64[Hp - 16] = _s3Xvf::P64;
           P64[Hp - 8] = _s3Xvg::P64;
           P64[Hp] = _s3Xvh::P64;
           R4 = _s3Xv9::P64;
           R3 = _s3Xv4::P64;
           R2 = _s3Xv3::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 55;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xvv_info" {
     sat_s3Xvv_info:
         const sat_s3Xvv_entry;
         const 9;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 sat_s3Xvy_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z7k: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3Z7o; else goto c3Z7p;
       c3Z7o: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z7p: // global
           I64[Sp - 48] = block_c3Z6n_info;
           _s3Xv3::P64 = P64[R1 + 7];
           _s3Xv4::P64 = P64[R1 + 15];
           _s3Xv5::P64 = P64[R1 + 23];
           _s3Xv9::P64 = P64[R1 + 31];
           _s3Xvb::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 40] = _s3Xv3::P64;
           P64[Sp - 32] = _s3Xv4::P64;
           P64[Sp - 24] = _s3Xv5::P64;
           P64[Sp - 16] = _s3Xv9::P64;
           P64[Sp - 8] = _s3Xvb::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3Z7w; else goto c3Z6o;
       u3Z7w: // global
           call _c3Z6n(R1) args: 0, res: 0, upd: 0;
       c3Z6o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xvy_info" {
     sat_s3Xvy_info:
         const sat_s3Xvy_entry;
         const 5;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Z6n() //  [R1]
         { []
         }
     {offset
       c3Z6n: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Z7s; else goto c3Z7r;
       c3Z7s: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z7r: // global
           _s3Xve::P64 = P64[R1 + 7];
           _s3Xvf::P64 = P64[R1 + 15];
           _s3Xvg::P64 = P64[R1 + 23];
           _s3Xvh::P64 = P64[R1 + 31];
           I64[Hp - 72] = sat_s3Xvv_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _s3Xve::P64;
           P64[Hp - 16] = _s3Xvf::P64;
           P64[Hp - 8] = _s3Xvg::P64;
           P64[Hp] = _s3Xvh::P64;
           I64[Sp + 40] = block_c3Z7l_info;
           R3 = Hp - 71;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 40;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z6n_info" {
     block_c3Z6n_info:
         const _c3Z6n;
         const 5;
         const 3302829850654;
         const S3Y0k_srt+120;
 },
 _c3Z7l() //  [R1]
         { []
         }
     {offset
       c3Z7l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z7v; else goto c3Z7u;
       c3Z7v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z7u: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z7l_info" {
     block_c3Z7l_info:
         const _c3Z7l;
         const 0;
         const 30;
 },
 sat_s3Xvz_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z7x: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Z7B; else goto c3Z7A;
       c3Z7B: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z7A: // global
           _s3Xv3::P64 = P64[R1 + 7];
           _s3Xv4::P64 = P64[R1 + 15];
           _s3Xv5::P64 = P64[R1 + 23];
           _s3Xv9::P64 = P64[R1 + 31];
           _s3Xva::P64 = P64[R1 + 39];
           I64[Hp - 40] = sat_s3Xvy_info;
           P64[Hp - 32] = _s3Xv3::P64;
           P64[Hp - 24] = _s3Xv4::P64;
           P64[Hp - 16] = _s3Xv5::P64;
           P64[Hp - 8] = _s3Xv9::P64;
           P64[Hp] = R2;
           R2 = Hp - 39;
           R1 = _s3Xva::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xvz_info" {
     sat_s3Xvz_info:
         const sat_s3Xvz_entry;
         const 5;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3Xv8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Z7C: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3Z7G; else goto c3Z7F;
       c3Z7G: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Z7F: // global
           _s3XuZ::P64 = P64[R1 + 7];
           _s3Xv0::P64 = P64[R1 + 15];
           _s3Xv1::P64 = P64[R1 + 23];
           _s3Xv2::P64 = P64[R1 + 31];
           _s3Xv3::P64 = P64[R1 + 39];
           _s3Xv4::P64 = P64[R1 + 47];
           _s3Xv5::P64 = P64[R1 + 55];
           I64[Hp - 96] = ds1_s3Xva_info;
           P64[Hp - 80] = _s3XuZ::P64;
           P64[Hp - 72] = _s3Xv0::P64;
           P64[Hp - 64] = _s3Xv1::P64;
           P64[Hp - 56] = _s3Xv2::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s3Xvz_info;
           P64[Hp - 32] = _s3Xv3::P64;
           P64[Hp - 24] = _s3Xv4::P64;
           P64[Hp - 16] = _s3Xv5::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 96;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Xv8_info" {
     p_s3Xv8_info:
         const p_s3Xv8_entry;
         const 7;
         const 7700876361736;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3XvA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Z7P: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Z7Q; else goto c3Z7R;
       c3Z7Q: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Z7R: // global
           I64[Sp - 8] = block_c3Z7M_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3XvA_info" {
     lvl2_s3XvA_info:
         const lvl2_s3XvA_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Z7M() //  [R1]
         { []
         }
     {offset
       c3Z7M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z7U; else goto c3Z7T;
       c3Z7U: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z7T: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z7M_info" {
     block_c3Z7M_info:
         const _c3Z7M;
         const 0;
         const 30;
 },
 sat_s3XvJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Z83: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Z84; else goto c3Z85;
       c3Z84: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Z85: // global
           I64[Sp - 8] = block_c3Z80_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XvJ_info" {
     sat_s3XvJ_info:
         const sat_s3XvJ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Z80() //  [R1]
         { []
         }
     {offset
       c3Z80: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Z88; else goto c3Z87;
       c3Z88: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Z87: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Z80_info" {
     block_c3Z80_info:
         const _c3Z80;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Z89: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Z8d; else goto c3Z8c;
       c3Z8d: // global
           HpAlloc = 96;
           R1 = GHC.Read.$fRead(,,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3Z8c: // global
           I64[Hp - 88] = p_s3Xv8_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = lvl2_s3XvA_info;
           P64[Hp - 16] = Hp - 87;
           I64[Hp - 8] = sat_s3XvJ_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = Hp - 6;
           Sp = Sp + 32;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,,)1_entry;
         const 0;
         const 9032492317147150;
         const 38654705664;
         const S3Y0k_srt+120;
         const 9;
         const GHC.Read.$fRead(,,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.348168617 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)1_closure" {
     GHC.Read.$fRead(,,,,,)1_closure:
         const GHC.Read.$fRead(,,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3Za2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 ds1_s3XvU_entry() //  [R1]
         { []
         }
     {offset
       c3Zaf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Zag; else goto c3Zah;
       c3Zag: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Zah: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3XvU_info" {
     ds1_s3XvU_info:
         const ds1_s3XvU_entry;
         const 5;
         const 4294967311;
         const S3Y0k_srt+200;
 },
 sat_s3Xw8_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZaK: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3ZaO; else goto c3ZaP;
       c3ZaO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZaP: // global
           I64[Sp - 48] = block_c3ZaH_info;
           _s3XvV::P64 = P64[R1 + 7];
           _s3XvY::P64 = P64[R1 + 15];
           _s3XvZ::P64 = P64[R1 + 23];
           _s3Xw0::P64 = P64[R1 + 31];
           _s3Xw1::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 40] = _s3XvV::P64;
           P64[Sp - 32] = _s3XvY::P64;
           P64[Sp - 24] = _s3XvZ::P64;
           P64[Sp - 16] = _s3Xw0::P64;
           P64[Sp - 8] = _s3Xw1::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3ZaT; else goto c3ZaI;
       u3ZaT: // global
           call _c3ZaH(R1) args: 0, res: 0, upd: 0;
       c3ZaI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xw8_info" {
     sat_s3Xw8_info:
         const sat_s3Xw8_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c3ZaH() //  [R1]
         { []
         }
     {offset
       c3ZaH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ZaS; else goto c3ZaR;
       c3ZaS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ZaR: // global
           _s3Xw5::P64 = P64[R1 + 7];
           _s3Xw6::P64 = P64[R1 + 15];
           I64[Hp - 48] = (,,,,,)_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = _s3Xw5::P64;
           P64[Hp] = _s3Xw6::P64;
           R2 = Hp - 47;
           R1 = P64[Sp + 8];
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZaH_info" {
     block_c3ZaH_info:
         const _c3ZaH;
         const 5;
         const 30;
 },
 sat_s3Xw9_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZaU: // global
           _s3Xw2::P64 = R2;
           _s3Xw9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ZaV; else goto c3ZaW;
       c3ZaW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3ZaY; else goto c3ZaX;
       c3ZaY: // global
           HpAlloc = 48;
           goto c3ZaV;
       c3ZaV: // global
           R2 = _s3Xw2::P64;
           R1 = _s3Xw9::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZaX: // global
           _s3XvO::P64 = P64[_s3Xw9::P64 + 7];
           _s3XvP::P64 = P64[_s3Xw9::P64 + 15];
           _s3XvT::P64 = P64[_s3Xw9::P64 + 23];
           _s3XvV::P64 = P64[_s3Xw9::P64 + 31];
           _s3XvY::P64 = P64[_s3Xw9::P64 + 39];
           _s3XvZ::P64 = P64[_s3Xw9::P64 + 47];
           _s3Xw0::P64 = P64[_s3Xw9::P64 + 55];
           _s3Xw1::P64 = P64[_s3Xw9::P64 + 63];
           I64[Hp - 40] = sat_s3Xw8_info;
           P64[Hp - 32] = _s3XvV::P64;
           P64[Hp - 24] = _s3XvY::P64;
           P64[Hp - 16] = _s3XvZ::P64;
           P64[Hp - 8] = _s3Xw0::P64;
           P64[Hp] = _s3Xw1::P64;
           R4 = _s3XvT::P64;
           R3 = _s3XvP::P64;
           R2 = _s3XvO::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xw9_info" {
     sat_s3Xw9_info:
         const sat_s3Xw9_entry;
         const 8;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+192;
 },
 sat_s3Xwc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZaZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Zb3; else goto c3Zb4;
       c3Zb3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zb4: // global
           I64[Sp - 40] = block_c3Zas_info;
           _s3XvO::P64 = P64[R1 + 7];
           _s3XvP::P64 = P64[R1 + 15];
           _s3XvT::P64 = P64[R1 + 23];
           _s3XvV::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3XvO::P64;
           P64[Sp - 24] = _s3XvP::P64;
           P64[Sp - 16] = _s3XvT::P64;
           P64[Sp - 8] = _s3XvV::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3Zbb; else goto c3Zat;
       u3Zbb: // global
           call _c3Zas(R1) args: 0, res: 0, upd: 0;
       c3Zat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xwc_info" {
     sat_s3Xwc_info:
         const sat_s3Xwc_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3Zas() //  [R1]
         { []
         }
     {offset
       c3Zas: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Zb7; else goto c3Zb6;
       c3Zb7: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Zb6: // global
           _s3XvY::P64 = P64[R1 + 7];
           _s3XvZ::P64 = P64[R1 + 15];
           _s3Xw0::P64 = P64[R1 + 23];
           _s3Xw1::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_s3Xw9_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _s3XvY::P64;
           P64[Hp - 16] = _s3XvZ::P64;
           P64[Hp - 8] = _s3Xw0::P64;
           P64[Hp] = _s3Xw1::P64;
           I64[Sp + 32] = block_c3Zb0_info;
           R3 = Hp - 63;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zas_info" {
     block_c3Zas_info:
         const _c3Zas;
         const 4;
         const 3302829850654;
         const S3Y0k_srt+120;
 },
 _c3Zb0() //  [R1]
         { []
         }
     {offset
       c3Zb0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Zba; else goto c3Zb9;
       c3Zba: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Zb9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zb0_info" {
     block_c3Zb0_info:
         const _c3Zb0;
         const 0;
         const 30;
 },
 sat_s3Xwd_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zbc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Zbg; else goto c3Zbf;
       c3Zbg: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zbf: // global
           _s3XvO::P64 = P64[R1 + 7];
           _s3XvP::P64 = P64[R1 + 15];
           _s3XvT::P64 = P64[R1 + 23];
           _s3XvU::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_s3Xwc_info;
           P64[Hp - 24] = _s3XvO::P64;
           P64[Hp - 16] = _s3XvP::P64;
           P64[Hp - 8] = _s3XvT::P64;
           P64[Hp] = R2;
           R2 = Hp - 31;
           R1 = _s3XvU::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xwd_info" {
     sat_s3Xwd_info:
         const sat_s3Xwd_entry;
         const 4;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3XvS_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zbh: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Zbl; else goto c3Zbk;
       c3Zbl: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zbk: // global
           _s3XvK::P64 = P64[R1 + 7];
           _s3XvL::P64 = P64[R1 + 15];
           _s3XvM::P64 = P64[R1 + 23];
           _s3XvN::P64 = P64[R1 + 31];
           _s3XvO::P64 = P64[R1 + 39];
           _s3XvP::P64 = P64[R1 + 47];
           I64[Hp - 88] = ds1_s3XvU_info;
           P64[Hp - 72] = _s3XvK::P64;
           P64[Hp - 64] = _s3XvL::P64;
           P64[Hp - 56] = _s3XvM::P64;
           P64[Hp - 48] = _s3XvN::P64;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s3Xwd_info;
           P64[Hp - 24] = _s3XvO::P64;
           P64[Hp - 16] = _s3XvP::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 88;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3XvS_info" {
     p_s3XvS_info:
         const p_s3XvS_entry;
         const 6;
         const 7700876361736;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3Xwe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Zbu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Zbv; else goto c3Zbw;
       c3Zbv: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Zbw: // global
           I64[Sp - 8] = block_c3Zbr_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Xwe_info" {
     lvl2_s3Xwe_info:
         const lvl2_s3Xwe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Zbr() //  [R1]
         { []
         }
     {offset
       c3Zbr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Zbz; else goto c3Zby;
       c3Zbz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Zby: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zbr_info" {
     block_c3Zbr_info:
         const _c3Zbr;
         const 0;
         const 30;
 },
 sat_s3Xwn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZbI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ZbJ; else goto c3ZbK;
       c3ZbJ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZbK: // global
           I64[Sp - 8] = block_c3ZbF_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xwn_info" {
     sat_s3Xwn_info:
         const sat_s3Xwn_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3ZbF() //  [R1]
         { []
         }
     {offset
       c3ZbF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ZbN; else goto c3ZbM;
       c3ZbN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ZbM: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZbF_info" {
     block_c3ZbF_info:
         const _c3ZbF;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZbO: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ZbS; else goto c3ZbR;
       c3ZbS: // global
           HpAlloc = 88;
           R1 = GHC.Read.$fRead(,,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3ZbR: // global
           I64[Hp - 80] = p_s3XvS_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           I64[Hp - 24] = lvl2_s3Xwe_info;
           P64[Hp - 16] = Hp - 79;
           I64[Hp - 8] = sat_s3Xwn_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)1_info" {
     GHC.Read.$fRead(,,,,,)1_info:
         const GHC.Read.$fRead(,,,,,)1_entry;
         const 0;
         const 18039691571888142;
         const 34359738368;
         const S3Y0k_srt+120;
         const 8;
         const GHC.Read.$fRead(,,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.383276749 UTC

[section ""data" . GHC.Read.$fRead(,,,,)1_closure" {
     GHC.Read.$fRead(,,,,)1_closure:
         const GHC.Read.$fRead(,,,,)1_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,)1_slow() //  [R1]
         { []
         }
     {offset
       c3Zdl: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 ds1_s3Xwx_entry() //  [R1]
         { []
         }
     {offset
       c3Zdy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Zdz; else goto c3ZdA;
       c3Zdz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZdA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xwx_info" {
     ds1_s3Xwx_info:
         const ds1_s3Xwx_entry;
         const 5;
         const 4294967311;
         const S3Y0k_srt+200;
 },
 sat_s3XwI_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ze1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Ze5; else goto c3Ze4;
       c3Ze5: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ze4: // global
           _s3Xwy::P64 = P64[R1 + 7];
           _s3XwB::P64 = P64[R1 + 15];
           _s3XwC::P64 = P64[R1 + 23];
           _s3XwD::P64 = P64[R1 + 31];
           _s3XwE::P64 = P64[R1 + 39];
           I64[Hp - 40] = (,,,,)_con_info;
           P64[Hp - 32] = _s3XwB::P64;
           P64[Hp - 24] = _s3XwC::P64;
           P64[Hp - 16] = _s3XwD::P64;
           P64[Hp - 8] = _s3XwE::P64;
           P64[Hp] = R2;
           R2 = Hp - 39;
           R1 = _s3Xwy::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XwI_info" {
     sat_s3XwI_info:
         const sat_s3XwI_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s3XwJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Ze6: // global
           _s3XwF::P64 = R2;
           _s3XwJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Ze7; else goto c3Ze8;
       c3Ze8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Zea; else goto c3Ze9;
       c3Zea: // global
           HpAlloc = 48;
           goto c3Ze7;
       c3Ze7: // global
           R2 = _s3XwF::P64;
           R1 = _s3XwJ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ze9: // global
           _s3Xws::P64 = P64[_s3XwJ::P64 + 7];
           _s3Xww::P64 = P64[_s3XwJ::P64 + 15];
           _s3Xwy::P64 = P64[_s3XwJ::P64 + 23];
           _s3XwB::P64 = P64[_s3XwJ::P64 + 31];
           _s3XwC::P64 = P64[_s3XwJ::P64 + 39];
           _s3XwD::P64 = P64[_s3XwJ::P64 + 47];
           _s3XwE::P64 = P64[_s3XwJ::P64 + 55];
           I64[Hp - 40] = sat_s3XwI_info;
           P64[Hp - 32] = _s3Xwy::P64;
           P64[Hp - 24] = _s3XwB::P64;
           P64[Hp - 16] = _s3XwC::P64;
           P64[Hp - 8] = _s3XwD::P64;
           P64[Hp] = _s3XwE::P64;
           R2 = _s3Xws::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3Xww::P64;
           P64[Sp - 8] = Hp - 39;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XwJ_info" {
     sat_s3XwJ_info:
         const sat_s3XwJ_entry;
         const 7;
         const 8;
         const 4294967301;
 },
 sat_s3XwM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zeb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Zef; else goto c3Zeg;
       c3Zef: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zeg: // global
           I64[Sp - 32] = block_c3ZdL_info;
           _s3Xws::P64 = P64[R1 + 7];
           _s3Xww::P64 = P64[R1 + 15];
           _s3Xwy::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Xws::P64;
           P64[Sp - 16] = _s3Xww::P64;
           P64[Sp - 8] = _s3Xwy::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3Zen; else goto c3ZdM;
       u3Zen: // global
           call _c3ZdL(R1) args: 0, res: 0, upd: 0;
       c3ZdM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XwM_info" {
     sat_s3XwM_info:
         const sat_s3XwM_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3ZdL() //  [R1]
         { []
         }
     {offset
       c3ZdL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Zej; else goto c3Zei;
       c3Zej: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Zei: // global
           _s3XwB::P64 = P64[R1 + 7];
           _s3XwC::P64 = P64[R1 + 15];
           _s3XwD::P64 = P64[R1 + 23];
           _s3XwE::P64 = P64[R1 + 31];
           I64[Hp - 56] = sat_s3XwJ_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _s3XwB::P64;
           P64[Hp - 16] = _s3XwC::P64;
           P64[Hp - 8] = _s3XwD::P64;
           P64[Hp] = _s3XwE::P64;
           I64[Sp + 24] = block_c3Zec_info;
           R3 = Hp - 55;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZdL_info" {
     block_c3ZdL_info:
         const _c3ZdL;
         const 3;
         const 1103806595102;
         const S3Y0k_srt+120;
 },
 _c3Zec() //  [R1]
         { []
         }
     {offset
       c3Zec: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Zem; else goto c3Zel;
       c3Zem: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Zel: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zec_info" {
     block_c3Zec_info:
         const _c3Zec;
         const 0;
         const 30;
 },
 sat_s3XwN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zeo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Zes; else goto c3Zer;
       c3Zes: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zer: // global
           _s3Xws::P64 = P64[R1 + 7];
           _s3Xww::P64 = P64[R1 + 15];
           _s3Xwx::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3XwM_info;
           P64[Hp - 16] = _s3Xws::P64;
           P64[Hp - 8] = _s3Xww::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3Xwx::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XwN_info" {
     sat_s3XwN_info:
         const sat_s3XwN_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3Xwv_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zet: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3Zex; else goto c3Zew;
       c3Zex: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zew: // global
           _s3Xwo::P64 = P64[R1 + 7];
           _s3Xwp::P64 = P64[R1 + 15];
           _s3Xwq::P64 = P64[R1 + 23];
           _s3Xwr::P64 = P64[R1 + 31];
           _s3Xws::P64 = P64[R1 + 39];
           I64[Hp - 80] = ds1_s3Xwx_info;
           P64[Hp - 64] = _s3Xwo::P64;
           P64[Hp - 56] = _s3Xwp::P64;
           P64[Hp - 48] = _s3Xwq::P64;
           P64[Hp - 40] = _s3Xwr::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3XwN_info;
           P64[Hp - 16] = _s3Xws::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 80;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Xwv_info" {
     p_s3Xwv_info:
         const p_s3Xwv_entry;
         const 5;
         const 5501853106184;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3XwO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZeG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ZeH; else goto c3ZeI;
       c3ZeH: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZeI: // global
           I64[Sp - 8] = block_c3ZeD_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3XwO_info" {
     lvl2_s3XwO_info:
         const lvl2_s3XwO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3ZeD() //  [R1]
         { []
         }
     {offset
       c3ZeD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ZeL; else goto c3ZeK;
       c3ZeL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ZeK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZeD_info" {
     block_c3ZeD_info:
         const _c3ZeD;
         const 0;
         const 30;
 },
 sat_s3XwX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZeU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ZeV; else goto c3ZeW;
       c3ZeV: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZeW: // global
           I64[Sp - 8] = block_c3ZeR_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XwX_info" {
     sat_s3XwX_info:
         const sat_s3XwX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3ZeR() //  [R1]
         { []
         }
     {offset
       c3ZeR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ZeZ; else goto c3ZeY;
       c3ZeZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ZeY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZeR_info" {
     block_c3ZeR_info:
         const _c3ZeR;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Zf0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3Zf4; else goto c3Zf3;
       c3Zf4: // global
           HpAlloc = 80;
           R1 = GHC.Read.$fRead(,,,,)1_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c3Zf3: // global
           I64[Hp - 72] = p_s3Xwv_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           I64[Hp - 24] = lvl2_s3XwO_info;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = sat_s3XwX_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp + 8];
           R3 = P64[Sp];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)1_info" {
     GHC.Read.$fRead(,,,,)1_info:
         const GHC.Read.$fRead(,,,,)1_entry;
         const 0;
         const 36051891058114574;
         const 30064771072;
         const S3Y0k_srt+120;
         const 7;
         const GHC.Read.$fRead(,,,,)1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.412366445 UTC

[section ""data" . GHC.Read.$fRead(,,,)1_closure" {
     GHC.Read.$fRead(,,,)1_closure:
         const GHC.Read.$fRead(,,,)1_info;
         const 0;
 },
 p_s3Xx4_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zgt: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,,,)2_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Xx4_info" {
     p_s3Xx4_info:
         const p_s3Xx4_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+200;
 },
 lvl2_s3Xx5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZgE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ZgF; else goto c3ZgG;
       c3ZgF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZgG: // global
           I64[Sp - 8] = block_c3ZgB_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3Xx5_info" {
     lvl2_s3Xx5_info:
         const lvl2_s3Xx5_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3ZgB() //  [R1]
         { []
         }
     {offset
       c3ZgB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ZgJ; else goto c3ZgI;
       c3ZgJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ZgI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZgB_info" {
     block_c3ZgB_info:
         const _c3ZgB;
         const 0;
         const 30;
 },
 sat_s3Xxe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZgS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ZgT; else goto c3ZgU;
       c3ZgT: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZgU: // global
           I64[Sp - 8] = block_c3ZgP_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xxe_info" {
     sat_s3Xxe_info:
         const sat_s3Xxe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3ZgP() //  [R1]
         { []
         }
     {offset
       c3ZgP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ZgX; else goto c3ZgW;
       c3ZgX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ZgW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZgP_info" {
     block_c3ZgP_info:
         const _c3ZgP;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZgY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3Zh2; else goto c3Zh1;
       c3Zh2: // global
           HpAlloc = 72;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3Zh1: // global
           I64[Hp - 64] = p_s3Xx4_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           I64[Hp - 24] = lvl2_s3Xx5_info;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = sat_s3Xxe_info;
           P64[Hp] = Hp - 22;
           R4 = P64[Sp];
           R3 = R6;
           R2 = Hp - 6;
           Sp = Sp + 8;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)1_info" {
     GHC.Read.$fRead(,,,)1_info:
         const GHC.Read.$fRead(,,,)1_entry;
         const 0;
         const 70390219014158;
         const 25769803802;
         const S3Y0k_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.431526769 UTC

[section ""data" . GHC.Read.$fRead(,,)1_closure" {
     GHC.Read.$fRead(,,)1_closure:
         const GHC.Read.$fRead(,,)1_info;
         const 0;
 },
 ds1_s3Xxm_entry() //  [R1]
         { []
         }
     {offset
       c3ZhM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ZhN; else goto c3ZhO;
       c3ZhN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZhO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)2_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xxm_info" {
     ds1_s3Xxm_info:
         const ds1_s3Xxm_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+192;
 },
 sat_s3Xxv_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zif: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Zij; else goto c3Zii;
       c3Zij: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zii: // global
           _s3Xxn::P64 = P64[R1 + 7];
           _s3Xxq::P64 = P64[R1 + 15];
           _s3Xxr::P64 = P64[R1 + 23];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = _s3Xxq::P64;
           P64[Hp - 8] = _s3Xxr::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3Xxn::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xxv_info" {
     sat_s3Xxv_info:
         const sat_s3Xxv_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3Xxw_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zik: // global
           _s3Xxs::P64 = R2;
           _s3Xxw::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3Zil; else goto c3Zim;
       c3Zim: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Zio; else goto c3Zin;
       c3Zio: // global
           HpAlloc = 32;
           goto c3Zil;
       c3Zil: // global
           R2 = _s3Xxs::P64;
           R1 = _s3Xxw::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zin: // global
           _s3Xxh::P64 = P64[_s3Xxw::P64 + 7];
           _s3Xxl::P64 = P64[_s3Xxw::P64 + 15];
           _s3Xxn::P64 = P64[_s3Xxw::P64 + 23];
           _s3Xxq::P64 = P64[_s3Xxw::P64 + 31];
           _s3Xxr::P64 = P64[_s3Xxw::P64 + 39];
           I64[Hp - 24] = sat_s3Xxv_info;
           P64[Hp - 16] = _s3Xxn::P64;
           P64[Hp - 8] = _s3Xxq::P64;
           P64[Hp] = _s3Xxr::P64;
           R2 = _s3Xxh::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s3Xxl::P64;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xxw_info" {
     sat_s3Xxw_info:
         const sat_s3Xxw_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s3Xxz_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zip: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3Zit; else goto c3Ziu;
       c3Zit: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Ziu: // global
           I64[Sp - 32] = block_c3ZhZ_info;
           _s3Xxh::P64 = P64[R1 + 7];
           _s3Xxl::P64 = P64[R1 + 15];
           _s3Xxn::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Xxh::P64;
           P64[Sp - 16] = _s3Xxl::P64;
           P64[Sp - 8] = _s3Xxn::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3ZiB; else goto c3Zi0;
       u3ZiB: // global
           call _c3ZhZ(R1) args: 0, res: 0, upd: 0;
       c3Zi0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xxz_info" {
     sat_s3Xxz_info:
         const sat_s3Xxz_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 _c3ZhZ() //  [R1]
         { []
         }
     {offset
       c3ZhZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3Zix; else goto c3Ziw;
       c3Zix: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ziw: // global
           _s3Xxq::P64 = P64[R1 + 7];
           _s3Xxr::P64 = P64[R1 + 15];
           I64[Hp - 40] = sat_s3Xxw_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s3Xxq::P64;
           P64[Hp] = _s3Xxr::P64;
           I64[Sp + 24] = block_c3Ziq_info;
           R3 = Hp - 39;
           R2 = GHC.Read.$fRead(,)_lexeme_closure+3;
           Sp = Sp + 24;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZhZ_info" {
     block_c3ZhZ_info:
         const _c3ZhZ;
         const 3;
         const 1103806595102;
         const S3Y0k_srt+120;
 },
 _c3Ziq() //  [R1]
         { []
         }
     {offset
       c3Ziq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ZiA; else goto c3Ziz;
       c3ZiA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Ziz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Ziq_info" {
     block_c3Ziq_info:
         const _c3Ziq;
         const 0;
         const 30;
 },
 sat_s3XxA_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZiC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ZiG; else goto c3ZiF;
       c3ZiG: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZiF: // global
           _s3Xxh::P64 = P64[R1 + 7];
           _s3Xxl::P64 = P64[R1 + 15];
           _s3Xxm::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s3Xxz_info;
           P64[Hp - 16] = _s3Xxh::P64;
           P64[Hp - 8] = _s3Xxl::P64;
           P64[Hp] = R2;
           R2 = Hp - 23;
           R1 = _s3Xxm::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XxA_info" {
     sat_s3XxA_info:
         const sat_s3XxA_entry;
         const 3;
         const 1103806595080;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 p_s3Xxk_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZiH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3ZiL; else goto c3ZiK;
       c3ZiL: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZiK: // global
           _s3Xxf::P64 = P64[R1 + 7];
           _s3Xxg::P64 = P64[R1 + 15];
           _s3Xxh::P64 = P64[R1 + 23];
           I64[Hp - 64] = ds1_s3Xxm_info;
           P64[Hp - 48] = _s3Xxf::P64;
           P64[Hp - 40] = _s3Xxg::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3XxA_info;
           P64[Hp - 16] = _s3Xxh::P64;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 64;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3Xxk_info" {
     p_s3Xxk_info:
         const p_s3Xxk_entry;
         const 3;
         const 3302829850632;
         const 4294967301;
         const S3Y0k_srt+120;
 },
 lvl2_s3XxB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZiU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ZiV; else goto c3ZiW;
       c3ZiV: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZiW: // global
           I64[Sp - 8] = block_c3ZiR_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3XxB_info" {
     lvl2_s3XxB_info:
         const lvl2_s3XxB_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3ZiR() //  [R1]
         { []
         }
     {offset
       c3ZiR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ZiZ; else goto c3ZiY;
       c3ZiZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ZiY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZiR_info" {
     block_c3ZiR_info:
         const _c3ZiR;
         const 0;
         const 30;
 },
 sat_s3XxK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Zj8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Zj9; else goto c3Zja;
       c3Zj9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Zja: // global
           I64[Sp - 8] = block_c3Zj5_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XxK_info" {
     sat_s3XxK_info:
         const sat_s3XxK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Zj5() //  [R1]
         { []
         }
     {offset
       c3Zj5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Zjd; else goto c3Zjc;
       c3Zjd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Zjc: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zj5_info" {
     block_c3Zj5_info:
         const _c3Zj5;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,,)1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Zje: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3Zji; else goto c3Zjh;
       c3Zji: // global
           HpAlloc = 64;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Zjh: // global
           I64[Hp - 56] = p_s3Xxk_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = lvl2_s3XxB_info;
           P64[Hp - 16] = Hp - 55;
           I64[Hp - 8] = sat_s3XxK_info;
           P64[Hp] = Hp - 22;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)1_info" {
     GHC.Read.$fRead(,,)1_info:
         const GHC.Read.$fRead(,,)1_entry;
         const 0;
         const 144136083091750926;
         const 21474836505;
         const S3Y0k_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.458189135 UTC

[section ""data" . GHC.Read.$fRead(,)1_closure" {
     GHC.Read.$fRead(,)1_closure:
         const GHC.Read.$fRead(,)1_info;
         const 0;
 },
 p_s3XxP_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZkF: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,)2_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s3XxP_info" {
     p_s3XxP_info:
         const p_s3XxP_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3Y0k_srt+192;
 },
 lvl2_s3XxQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZkQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ZkR; else goto c3ZkS;
       c3ZkR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZkS: // global
           I64[Sp - 8] = block_c3ZkN_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3XxQ_info" {
     lvl2_s3XxQ_info:
         const lvl2_s3XxQ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3ZkN() //  [R1]
         { []
         }
     {offset
       c3ZkN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ZkV; else goto c3ZkU;
       c3ZkV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ZkU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZkN_info" {
     block_c3ZkN_info:
         const _c3ZkN;
         const 0;
         const 30;
 },
 sat_s3XxZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Zl4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3Zl5; else goto c3Zl6;
       c3Zl5: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Zl6: // global
           I64[Sp - 8] = block_c3Zl1_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XxZ_info" {
     sat_s3XxZ_info:
         const sat_s3XxZ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3Zl1() //  [R1]
         { []
         }
     {offset
       c3Zl1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Zl9; else goto c3Zl8;
       c3Zl9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Zl8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zl1_info" {
     block_c3Zl1_info:
         const _c3Zl1;
         const 0;
         const 30;
 },
 GHC.Read.$fRead(,)1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3Zla: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3Zle; else goto c3Zld;
       c3Zle: // global
           HpAlloc = 56;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Zld: // global
           I64[Hp - 48] = p_s3XxP_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = lvl2_s3XxQ_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = sat_s3XxZ_info;
           P64[Hp] = Hp - 22;
           _s3XxN::P64 = R4;
           R4 = R5;
           R3 = _s3XxN::P64;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)1_info" {
     GHC.Read.$fRead(,)1_info:
         const GHC.Read.$fRead(,)1_entry;
         const 0;
         const 562988608126990;
         const 17179869208;
         const S3Y0k_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.470030813 UTC

[section ""cstring" . GHC.Read.list2_bytes" {
     GHC.Read.list2_bytes:
         I8[] [91]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.472273996 UTC

[section ""data" . GHC.Read.list1_closure" {
     GHC.Read.list1_closure:
         const GHC.Read.list1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.list1_entry() //  [R1]
         { []
         }
     {offset
       c3ZlS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3ZlT; else goto c3ZlU;
       c3ZlT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZlU: // global
           (_c3ZlP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c3ZlP::I64 == 0) goto c3ZlR; else goto c3ZlQ;
       c3ZlR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c3ZlQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c3ZlP::I64;
           R2 = GHC.Read.list2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.list1_info" {
     GHC.Read.list1_info:
         const GHC.Read.list1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.476275402 UTC

[section ""data" . GHC.Read.list_lexeme_closure" {
     GHC.Read.list_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.Read.list1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.491422874 UTC

[section ""data" . GHC.Read.list_closure" {
     GHC.Read.list_closure:
         const GHC.Read.list_info;
         const 0;
 },
 ds1_s3Xy1_entry() //  [R1]
         { []
         }
     {offset
       c3Zmc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Zmd; else goto c3Zme;
       c3Zmd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Zme: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3Xy1_info" {
     ds1_s3Xy1_info:
         const ds1_s3Xy1_entry;
         const 1;
         const 16;
 },
 lvl2_s3Xy6_entry() //  [R1]
         { []
         }
     {offset
       c3Zms: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3Zmt; else goto c3Zmu;
       c3Zmt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Zmu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3Xy6_info" {
     lvl2_s3Xy6_info:
         const lvl2_s3Xy6_entry;
         const 1;
         const 16;
 },
 sat_s3Xyb_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZmK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ZmO; else goto c3ZmN;
       c3ZmO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZmN: // global
           _s3Xy4::P64 = P64[R1 + 7];
           _s3Xy8::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3Xy8::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3Xy4::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xyb_info" {
     sat_s3Xyb_info:
         const sat_s3Xyb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3Xyc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZmP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ZmT; else goto c3ZmS;
       c3ZmT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZmS: // global
           _s3Xy2::P64 = P64[R1 + 7];
           _s3Xy4::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3Xyb_info;
           P64[Hp - 8] = _s3Xy4::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = GHC.Types.True_closure+2;
           R1 = _s3Xy2::P64;
           call $wlistRest_s3Xy2_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xyc_info" {
     sat_s3Xyc_info:
         const sat_s3Xyc_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3Y0k_srt+336;
 },
 lvl3_s3Xy7_entry() //  [R1]
         { []
         }
     {offset
       c3ZmU: // global
           _s3Xy7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ZmV; else goto c3ZmW;
       c3ZmW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ZmY; else goto c3ZmX;
       c3ZmY: // global
           HpAlloc = 24;
           goto c3ZmV;
       c3ZmV: // global
           R1 = _s3Xy7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZmX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Xy7::P64;
           _s3Xy1::P64 = P64[_s3Xy7::P64 + 16];
           _s3Xy2::P64 = P64[_s3Xy7::P64 + 24];
           _s3Xy4::P64 = P64[_s3Xy7::P64 + 32];
           I64[Hp - 16] = sat_s3Xyc_info;
           P64[Hp - 8] = _s3Xy2::P64;
           P64[Hp] = _s3Xy4::P64;
           R2 = Hp - 15;
           R1 = _s3Xy1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_s3Xy7_info" {
     lvl3_s3Xy7_info:
         const lvl3_s3Xy7_entry;
         const 3;
         const 12884901903;
         const S3Y0k_srt+336;
 },
 sat_s3Xyx_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Znf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3Zng; else goto c3Znh;
       c3Zng: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Znh: // global
           I64[Sp - 32] = block_c3Zn8_info;
           _s3Xy3::P64 = P64[R1 + 7];
           _s3Xy6::P64 = P64[R1 + 15];
           _s3Xy7::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3Xy3::P64;
           P64[Sp - 16] = _s3Xy6::P64;
           P64[Sp - 8] = _s3Xy7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3ZoB; else goto c3Zn9;
       u3ZoB: // global
           call _c3Zn8(R1) args: 0, res: 0, upd: 0;
       c3Zn9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xyx_info" {
     sat_s3Xyx_info:
         const sat_s3Xyx_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c3Zn8() //  [R1]
         { []
         }
     {offset
       c3Zn8: // global
           if (R1 & 7 == 3) goto c3Znd; else goto u3Zot;
       c3Znd: // global
           I64[Sp] = block_c3Znn_info;
           R1 = P64[R1 + 5];
           if (R1 & 7 != 0) goto u3Zoz; else goto c3Znp;
       u3Zoz: // global
           call _c3Znn(R1) args: 0, res: 0, upd: 0;
       c3Znp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Zot: // global
           Sp = Sp + 32;
           call _c3Zon() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Zn8_info" {
     block_c3Zn8_info:
         const _c3Zn8;
         const 3;
         const 30;
 },
 _c3Znn() //  [R1]
         { []
         }
     {offset
       c3Znn: // global
           if (R1 & 7 == 1) goto u3Zou; else goto c3ZnA;
       u3Zou: // global
           Sp = Sp + 32;
           call _c3Zon() args: 0, res: 0, upd: 0;
       c3ZnA: // global
           I64[Sp - 8] = block_c3Zny_info;
           _s3Xym::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3Xym::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ZoC; else goto c3ZnB;
       u3ZoC: // global
           call _c3Zny(R1) args: 0, res: 0, upd: 0;
       c3ZnB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Znn_info" {
     block_c3Znn_info:
         const _c3Znn;
         const 3;
         const 30;
 },
 _c3Zny() //  [R1]
         { []
         }
     {offset
       c3Zny: // global
           _s3Xym::P64 = P64[Sp + 8];
           _s3Xyp::I64 = I64[R1 + 7];
           if (_s3Xyp::I64 != 44) goto u3Zos; else goto c3ZnM;
       u3Zos: // global
           if (_s3Xyp::I64 != 93) goto u3Zov; else goto c3Zoc;
       u3Zov: // global
           Sp = Sp + 40;
           call _c3Zon() args: 0, res: 0, upd: 0;
       c3Zoc: // global
           I64[Sp + 16] = block_c3Zob_info;
           R1 = _s3Xym::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u3ZoF; else goto c3Zod;
       u3ZoF: // global
           call _c3Zob(R1) args: 0, res: 0, upd: 0;
       c3Zod: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ZnM: // global
           I64[Sp + 8] = block_c3ZnL_info;
           R1 = _s3Xym::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3ZoE; else goto c3ZnN;
       u3ZoE: // global
           call _c3ZnL(R1) args: 0, res: 0, upd: 0;
       c3ZnN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zny_info" {
     block_c3Zny_info:
         const _c3Zny;
         const 4;
         const 30;
 },
 _c3Zob() //  [R1]
         { []
         }
     {offset
       c3Zob: // global
           if (R1 & 7 == 1) goto c3Zoj; else goto u3Zow;
       c3Zoj: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u3Zow: // global
           Sp = Sp + 24;
           call _c3Zon() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3Zob_info" {
     block_c3Zob_info:
         const _c3Zob;
         const 130;
         const 30;
 },
 _c3ZnL() //  [R1]
         { []
         }
     {offset
       c3ZnL: // global
           if (R1 & 7 == 1) goto c3ZnU; else goto u3Zox;
       c3ZnU: // global
           I64[Sp + 16] = block_c3ZnR_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u3ZoH; else goto c3ZnV;
       u3ZoH: // global
           call _c3ZnR(R1) args: 0, res: 0, upd: 0;
       c3ZnV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3Zox: // global
           Sp = Sp + 32;
           call _c3Zon() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3ZnL_info" {
     block_c3ZnL_info:
         const _c3ZnL;
         const 131;
         const 30;
 },
 _c3ZnR() //  [R1]
         { []
         }
     {offset
       c3ZnR: // global
           if (R1 & 7 == 1) goto u3Zoy; else goto c3Zo5;
       u3Zoy: // global
           Sp = Sp + 16;
           call _c3Zon() args: 0, res: 0, upd: 0;
       c3Zo5: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZnR_info" {
     block_c3ZnR_info:
         const _c3ZnR;
         const 1;
         const 30;
 },
 _c3Zon() //  []
         { []
         }
     {offset
       c3Zon: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Xyy_entry() //  [R1]
         { []
         }
     {offset
       c3ZoL: // global
           _s3Xyy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3ZoM; else goto c3ZoN;
       c3ZoN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ZoP; else goto c3ZoO;
       c3ZoP: // global
           HpAlloc = 32;
           goto c3ZoM;
       c3ZoM: // global
           R1 = _s3Xyy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZoO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Xyy::P64;
           _s3Xy3::P64 = P64[_s3Xyy::P64 + 16];
           _s3Xy6::P64 = P64[_s3Xyy::P64 + 24];
           _s3Xy7::P64 = P64[_s3Xyy::P64 + 32];
           I64[Hp - 24] = sat_s3Xyx_info;
           P64[Hp - 16] = _s3Xy3::P64;
           P64[Hp - 8] = _s3Xy6::P64;
           P64[Hp] = _s3Xy7::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Xyy_info" {
     sat_s3Xyy_info:
         const sat_s3Xyy_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+344;
 },
 sat_s3Xyf_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZoY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ZoZ; else goto c3Zp0;
       c3ZoZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zp0: // global
           I64[Sp - 8] = block_c3ZoV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3Zp4; else goto c3ZoW;
       u3Zp4: // global
           call _c3ZoV() args: 0, res: 0, upd: 0;
       c3ZoW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xyf_info" {
     sat_s3Xyf_info:
         const sat_s3Xyf_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _c3ZoV() //  []
         { []
         }
     {offset
       c3ZoV: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ZoV_info" {
     block_c3ZoV_info:
         const _c3ZoV;
         const 0;
         const 30;
 },
 lvl116_s3Xy5_entry() //  [R1]
         { []
         }
     {offset
       c3Zp6: // global
           _s3Xy5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Zp7; else goto c3Zp8;
       c3Zp8: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3Zpa; else goto c3Zp9;
       c3Zpa: // global
           HpAlloc = 136;
           goto c3Zp7;
       c3Zp7: // global
           R1 = _s3Xy5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Zp9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3Xy5::P64;
           _s3Xy1::P64 = P64[_s3Xy5::P64 + 16];
           _s3Xy2::P64 = P64[_s3Xy5::P64 + 24];
           _s3Xy3::P64 = P64[_s3Xy5::P64 + 32];
           _s3Xy4::P64 = P64[_s3Xy5::P64 + 40];
           I64[Hp - 128] = lvl2_s3Xy6_info;
           P64[Hp - 112] = _s3Xy4::P64;
           I64[Hp - 104] = lvl3_s3Xy7_info;
           P64[Hp - 88] = _s3Xy1::P64;
           P64[Hp - 80] = _s3Xy2::P64;
           P64[Hp - 72] = _s3Xy4::P64;
           I64[Hp - 64] = sat_s3Xyy_info;
           P64[Hp - 48] = _s3Xy3::P64;
           P64[Hp - 40] = Hp - 128;
           P64[Hp - 32] = Hp - 104;
           I64[Hp - 24] = sat_s3Xyf_info;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3Xy5_info" {
     lvl116_s3Xy5_info:
         const lvl116_s3Xy5_entry;
         const 4;
         const 12884901903;
         const S3Y0k_srt+336;
 },
 k_s3Xyz_entry() //  [R1]
         { []
         }
     {offset
       c3Zpg: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3Xyz_info" {
     k_s3Xyz_info:
         const k_s3Xyz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XyC_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zpo: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XyC_info" {
     sat_s3XyC_info:
         const sat_s3XyC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 $wlistRest_s3Xy2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Zps: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3Zpw; else goto c3Zpv;
       c3Zpw: // global
           HpAlloc = 96;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Zpv: // global
           _s3Xy1::P64 = P64[R1 + 6];
           I64[Hp - 88] = lvl116_s3Xy5_info;
           P64[Hp - 72] = _s3Xy1::P64;
           P64[Hp - 64] = R1;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3Xyz_info;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = sat_s3XyC_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlistRest_s3Xy2_info" {
     $wlistRest_s3Xy2_info:
         const $wlistRest_s3Xy2_entry;
         const 1;
         const 12884901897;
         const 8589934607;
         const S3Y0k_srt+336;
 },
 sat_s3XyK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZpW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Zq0; else goto c3ZpZ;
       c3Zq0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZpZ: // global
           _s3XyE::P64 = P64[R1 + 7];
           _s3XyH::P64 = P64[R1 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s3XyH::P64;
           P64[Hp] = R2;
           R2 = Hp - 14;
           R1 = _s3XyE::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XyK_info" {
     sat_s3XyK_info:
         const sat_s3XyK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3XyL_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zq1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Zq5; else goto c3Zq4;
       c3Zq5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zq4: // global
           _s3Xy2::P64 = P64[R1 + 7];
           _s3XyE::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s3XyK_info;
           P64[Hp - 8] = _s3XyE::P64;
           P64[Hp] = R2;
           R3 = Hp - 15;
           R2 = GHC.Types.True_closure+2;
           R1 = _s3Xy2::P64;
           call $wlistRest_s3Xy2_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XyL_info" {
     sat_s3XyL_info:
         const sat_s3XyL_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3Y0k_srt+336;
 },
 sat_s3XyM_entry() //  [R1]
         { []
         }
     {offset
       c3Zq6: // global
           _s3XyM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Zq7; else goto c3Zq8;
       c3Zq8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3Zqa; else goto c3Zq9;
       c3Zqa: // global
           HpAlloc = 24;
           goto c3Zq7;
       c3Zq7: // global
           R1 = _s3XyM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Zq9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XyM::P64;
           _s3Xy1::P64 = P64[_s3XyM::P64 + 16];
           _s3Xy2::P64 = P64[_s3XyM::P64 + 24];
           _s3XyE::P64 = P64[_s3XyM::P64 + 32];
           I64[Hp - 16] = sat_s3XyL_info;
           P64[Hp - 8] = _s3Xy2::P64;
           P64[Hp] = _s3XyE::P64;
           R2 = Hp - 15;
           R1 = _s3Xy1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XyM_info" {
     sat_s3XyM_info:
         const sat_s3XyM_entry;
         const 3;
         const 12884901903;
         const S3Y0k_srt+336;
 },
 sat_s3XyN_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zqd: // global
           _s3XyF::P64 = R2;
           _s3XyN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3Zqe; else goto c3Zqf;
       c3Zqf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c3Zqh; else goto c3Zqg;
       c3Zqh: // global
           HpAlloc = 40;
           goto c3Zqe;
       c3Zqe: // global
           R2 = _s3XyF::P64;
           R1 = _s3XyN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zqg: // global
           _s3Xy1::P64 = P64[_s3XyN::P64 + 7];
           _s3Xy2::P64 = P64[_s3XyN::P64 + 15];
           _s3XyE::P64 = P64[_s3XyN::P64 + 23];
           I64[Hp - 32] = sat_s3XyM_info;
           P64[Hp - 16] = _s3Xy1::P64;
           P64[Hp - 8] = _s3Xy2::P64;
           P64[Hp] = _s3XyE::P64;
           I64[Sp - 16] = block_c3Zqb_info;
           R3 = _s3XyE::P64;
           R2 = GHC.Types.False_closure+1;
           R1 = _s3Xy2::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call $wlistRest_s3Xy2_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XyN_info" {
     sat_s3XyN_info:
         const sat_s3XyN_entry;
         const 3;
         const 12884901896;
         const 4294967301;
         const S3Y0k_srt+336;
 },
 _c3Zqb() //  [R1]
         { []
         }
     {offset
       c3Zqb: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zqb_info" {
     block_c3Zqb_info:
         const _c3Zqb;
         const 1;
         const 4294967326;
         const S3Y0k_srt+336;
 },
 sat_s3XyQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Zqo: // global
           _s3XyE::P64 = R3;
           _s3XyD::P64 = R2;
           _s3XyQ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c3Zqp; else goto c3Zqq;
       c3Zqq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3Zqs; else goto c3Zqr;
       c3Zqs: // global
           HpAlloc = 32;
           goto c3Zqp;
       c3Zqp: // global
           R3 = _s3XyE::P64;
           R2 = _s3XyD::P64;
           R1 = _s3XyQ::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3Zqr: // global
           _s3Xy1::P64 = P64[_s3XyQ::P64 + 6];
           _s3Xy2::P64 = P64[_s3XyQ::P64 + 14];
           I64[Hp - 24] = sat_s3XyN_info;
           P64[Hp - 16] = _s3Xy1::P64;
           P64[Hp - 8] = _s3Xy2::P64;
           P64[Hp] = _s3XyE::P64;
           I64[Sp - 8] = block_c3Zql_info;
           R3 = Hp - 23;
           R2 = GHC.Read.list_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XyQ_info" {
     sat_s3XyQ_info:
         const sat_s3XyQ_entry;
         const 2;
         const 4035225270418931723;
         const 8589934607;
         const S3Y0k_srt+120;
 },
 _c3Zql() //  [R1]
         { []
         }
     {offset
       c3Zql: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3Zqv; else goto c3Zqu;
       c3Zqv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3Zqu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3Zql_info" {
     block_c3Zql_info:
         const _c3Zql;
         const 0;
         const 30;
 },
 GHC.Read.list_entry() //  [R2]
         { []
         }
     {offset
       c3Zqw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c3ZqA; else goto c3Zqz;
       c3ZqA: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = GHC.Read.list_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zqz: // global
           I64[Hp - 56] = ds1_s3Xy1_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = $wlistRest_s3Xy2_info;
           _c3Zm8::P64 = Hp - 56;
           P64[Hp - 24] = _c3Zm8::P64;
           I64[Hp - 16] = sat_s3XyQ_info;
           P64[Hp - 8] = _c3Zm8::P64;
           P64[Hp] = Hp - 30;
           R2 = Hp - 14;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.list_info" {
     GHC.Read.list_info:
         const GHC.Read.list_entry;
         const 0;
         const 8646928881032364046;
         const 4294967301;
         const S3Y0k_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.541847233 UTC

[section ""data" . GHC.Read.readListPrecDefault_closure" {
     GHC.Read.readListPrecDefault_closure:
         const GHC.Read.readListPrecDefault_info;
         const 0;
 },
 sat_s3XyS_entry() //  [R1]
         { []
         }
     {offset
       c3Ztv: // global
           R2 = P64[R1 + 16];
           call GHC.Read.readPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XyS_info" {
     sat_s3XyS_info:
         const sat_s3XyS_entry;
         const 1;
         const 16;
 },
 GHC.Read.readListPrecDefault_entry() //  [R2]
         { []
         }
     {offset
       c3Zty: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3ZtC; else goto c3ZtB;
       c3ZtC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.readListPrecDefault_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZtB: // global
           I64[Hp - 16] = sat_s3XyS_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readListPrecDefault_info" {
     GHC.Read.readListPrecDefault_info:
         const GHC.Read.readListPrecDefault_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3Y0k_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.548586622 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZtM: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2,
                                                                     R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s3Xz8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZtV: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3ZtW; else goto c3ZtX;
       c3ZtW: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZtX: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = P64[R1 + 118];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3Xz8_info" {
     sat_s3Xz8_info:
         const sat_s3Xz8_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+224;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3,
                                                             R4, R5, R6]
         { []
         }
     {offset
       c3ZtY: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3Zu2; else goto c3Zu1;
       c3Zu2: // global
           HpAlloc = 128;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3Zu1: // global
           I64[Hp - 120] = sat_s3Xz8_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R2 = Hp - 118;
           Sp = Sp + 80;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 2814754062073870;
         const 64424509440;
         const S3Y0k_srt+224;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.557876395 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3Zuz: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 96, res: 0, upd: 8;
     }
 },
 sat_s3Xzp_entry() //  [R1]
         { []
         }
     {offset
       c3ZuH: // global
           if ((Sp + -112) < SpLim) (likely: False) goto c3ZuI; else goto c3ZuJ;
       c3ZuI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZuJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 112] = P64[R1 + 56];
           P64[Sp - 104] = P64[R1 + 64];
           P64[Sp - 96] = P64[R1 + 72];
           P64[Sp - 88] = P64[R1 + 80];
           P64[Sp - 80] = P64[R1 + 88];
           P64[Sp - 72] = P64[R1 + 96];
           P64[Sp - 64] = P64[R1 + 104];
           P64[Sp - 56] = P64[R1 + 112];
           P64[Sp - 48] = P64[R1 + 120];
           P64[Sp - 40] = P64[R1 + 128];
           P64[Sp - 32] = P64[R1 + 136];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 112;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 120, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3Xzp_info" {
     sat_s3Xzp_info:
         const sat_s3Xzp_entry;
         const 16;
         const 4294967311;
         const S3Y0k_srt+224;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       c3ZuK: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c3ZuO; else goto c3ZuN;
       c3ZuO: // global
           HpAlloc = 144;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c3ZuN: // global
           I64[Hp - 136] = sat_s3Xzp_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           R2 = Hp - 136;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 88;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 4503603922337806;
         const 68719476736;
         const S3Y0k_srt+224;
         const 16;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.568476308 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3Zvr: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s3XzF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZvE: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3ZvF; else goto c3ZvG;
       c3ZvF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZvG: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = P64[R1 + 118];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XzF_info" {
     sat_s3XzF_info:
         const sat_s3XzF_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+224;
 },
 sat_s3XzG_entry() //  [R1]
         { []
         }
     {offset
       c3ZvH: // global
           _s3XzG::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZvI; else goto c3ZvJ;
       c3ZvJ: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3ZvL; else goto c3ZvK;
       c3ZvL: // global
           HpAlloc = 128;
           goto c3ZvI;
       c3ZvI: // global
           R1 = _s3XzG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZvK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XzG::P64;
           _s3Xzq::P64 = P64[_s3XzG::P64 + 16];
           _s3Xzr::P64 = P64[_s3XzG::P64 + 24];
           _s3Xzs::P64 = P64[_s3XzG::P64 + 32];
           _s3Xzt::P64 = P64[_s3XzG::P64 + 40];
           _s3Xzu::P64 = P64[_s3XzG::P64 + 48];
           _s3Xzv::P64 = P64[_s3XzG::P64 + 56];
           _s3Xzw::P64 = P64[_s3XzG::P64 + 64];
           _s3Xzx::P64 = P64[_s3XzG::P64 + 72];
           _s3Xzy::P64 = P64[_s3XzG::P64 + 80];
           _s3Xzz::P64 = P64[_s3XzG::P64 + 88];
           _s3XzA::P64 = P64[_s3XzG::P64 + 96];
           _s3XzB::P64 = P64[_s3XzG::P64 + 104];
           _s3XzC::P64 = P64[_s3XzG::P64 + 112];
           _s3XzD::P64 = P64[_s3XzG::P64 + 120];
           _s3XzE::P64 = P64[_s3XzG::P64 + 128];
           I64[Hp - 120] = sat_s3XzF_info;
           P64[Hp - 112] = _s3Xzq::P64;
           P64[Hp - 104] = _s3Xzr::P64;
           P64[Hp - 96] = _s3Xzs::P64;
           P64[Hp - 88] = _s3Xzt::P64;
           P64[Hp - 80] = _s3Xzu::P64;
           P64[Hp - 72] = _s3Xzv::P64;
           P64[Hp - 64] = _s3Xzw::P64;
           P64[Hp - 56] = _s3Xzx::P64;
           P64[Hp - 48] = _s3Xzy::P64;
           P64[Hp - 40] = _s3Xzz::P64;
           P64[Hp - 32] = _s3XzA::P64;
           P64[Hp - 24] = _s3XzB::P64;
           P64[Hp - 16] = _s3XzC::P64;
           P64[Hp - 8] = _s3XzD::P64;
           P64[Hp] = _s3XzE::P64;
           R2 = Hp - 118;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XzG_info" {
     sat_s3XzG_info:
         const sat_s3XzG_entry;
         const 15;
         const 562954248388623;
         const S3Y0k_srt+224;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c3ZvM: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3ZvQ; else goto c3ZvP;
       c3ZvQ: // global
           HpAlloc = 136;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3ZvP: // global
           I64[Hp - 128] = sat_s3XzG_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R2 = Hp - 128;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 80;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 9570153503129614;
         const 64424509440;
         const S3Y0k_srt+224;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.584331471 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3Zwy: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s3XzZ_entry() //  [R1]
         { []
         }
     {offset
       c3ZwG: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3ZwH; else goto c3ZwI;
       c3ZwH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZwI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = P64[R1 + 128];
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                     R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XzZ_info" {
     sat_s3XzZ_info:
         const sat_s3XzZ_entry;
         const 15;
         const 4294967311;
         const S3Y0k_srt+376;
 },
 sat_s3XzY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZwO: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3ZwP; else goto c3ZwQ;
       c3ZwP: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZwQ: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 96] = P64[R1 + 46];
           P64[Sp - 88] = P64[R1 + 54];
           P64[Sp - 80] = P64[R1 + 62];
           P64[Sp - 72] = P64[R1 + 70];
           P64[Sp - 64] = P64[R1 + 78];
           P64[Sp - 56] = P64[R1 + 86];
           P64[Sp - 48] = P64[R1 + 94];
           P64[Sp - 40] = P64[R1 + 102];
           P64[Sp - 32] = P64[R1 + 110];
           P64[Sp - 24] = P64[R1 + 118];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)1_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 104, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XzY_info" {
     sat_s3XzY_info:
         const sat_s3XzY_entry;
         const 15;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+224;
 },
 sat_s3XzX_entry() //  [R1]
         { []
         }
     {offset
       c3ZwV: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3ZwW; else goto c3ZwX;
       c3ZwW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZwX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = P64[R1 + 128];
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XzX_info" {
     sat_s3XzX_info:
         const sat_s3XzX_entry;
         const 15;
         const 4294967311;
         const S3Y0k_srt+392;
 },
 sat_s3XzW_entry() //  [R1, R2]
         { []
         }
     {offset
       c3Zx3: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3Zx4; else goto c3Zx5;
       c3Zx4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3Zx5: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 88] = P64[R1 + 47];
           P64[Sp - 80] = P64[R1 + 55];
           P64[Sp - 72] = P64[R1 + 63];
           P64[Sp - 64] = P64[R1 + 71];
           P64[Sp - 56] = P64[R1 + 79];
           P64[Sp - 48] = P64[R1 + 87];
           P64[Sp - 40] = P64[R1 + 95];
           P64[Sp - 32] = P64[R1 + 103];
           P64[Sp - 24] = P64[R1 + 111];
           P64[Sp - 16] = P64[R1 + 119];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XzW_info" {
     sat_s3XzW_info:
         const sat_s3XzW_entry;
         const 15;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+384;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3Zx7: // global
           Hp = Hp + 568;
           if (Hp > HpLim) (likely: False) goto c3Zxb; else goto c3Zxa;
       c3Zxb: // global
           HpAlloc = 568;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3Zxa: // global
           I64[Hp - 560] = sat_s3XzZ_info;
           P64[Hp - 544] = R2;
           P64[Hp - 536] = R3;
           P64[Hp - 528] = R4;
           P64[Hp - 520] = R5;
           P64[Hp - 512] = R6;
           _s3XzM::P64 = P64[Sp];
           P64[Hp - 504] = _s3XzM::P64;
           _s3XzN::P64 = P64[Sp + 8];
           P64[Hp - 496] = _s3XzN::P64;
           _s3XzO::P64 = P64[Sp + 16];
           P64[Hp - 488] = _s3XzO::P64;
           _s3XzP::P64 = P64[Sp + 24];
           P64[Hp - 480] = _s3XzP::P64;
           _s3XzQ::P64 = P64[Sp + 32];
           P64[Hp - 472] = _s3XzQ::P64;
           _s3XzR::P64 = P64[Sp + 40];
           P64[Hp - 464] = _s3XzR::P64;
           _s3XzS::P64 = P64[Sp + 48];
           P64[Hp - 456] = _s3XzS::P64;
           _s3XzT::P64 = P64[Sp + 56];
           P64[Hp - 448] = _s3XzT::P64;
           _s3XzU::P64 = P64[Sp + 64];
           P64[Hp - 440] = _s3XzU::P64;
           _s3XzV::P64 = P64[Sp + 72];
           P64[Hp - 432] = _s3XzV::P64;
           I64[Hp - 424] = sat_s3XzY_info;
           P64[Hp - 416] = R2;
           P64[Hp - 408] = R3;
           P64[Hp - 400] = R4;
           P64[Hp - 392] = R5;
           P64[Hp - 384] = R6;
           P64[Hp - 376] = _s3XzM::P64;
           P64[Hp - 368] = _s3XzN::P64;
           P64[Hp - 360] = _s3XzO::P64;
           P64[Hp - 352] = _s3XzP::P64;
           P64[Hp - 344] = _s3XzQ::P64;
           P64[Hp - 336] = _s3XzR::P64;
           P64[Hp - 328] = _s3XzS::P64;
           P64[Hp - 320] = _s3XzT::P64;
           P64[Hp - 312] = _s3XzU::P64;
           P64[Hp - 304] = _s3XzV::P64;
           I64[Hp - 296] = sat_s3XzX_info;
           P64[Hp - 280] = R2;
           P64[Hp - 272] = R3;
           P64[Hp - 264] = R4;
           P64[Hp - 256] = R5;
           P64[Hp - 248] = R6;
           P64[Hp - 240] = _s3XzM::P64;
           P64[Hp - 232] = _s3XzN::P64;
           P64[Hp - 224] = _s3XzO::P64;
           P64[Hp - 216] = _s3XzP::P64;
           P64[Hp - 208] = _s3XzQ::P64;
           P64[Hp - 200] = _s3XzR::P64;
           P64[Hp - 192] = _s3XzS::P64;
           P64[Hp - 184] = _s3XzT::P64;
           P64[Hp - 176] = _s3XzU::P64;
           P64[Hp - 168] = _s3XzV::P64;
           I64[Hp - 160] = sat_s3XzW_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           P64[Hp - 120] = R6;
           P64[Hp - 112] = _s3XzM::P64;
           P64[Hp - 104] = _s3XzN::P64;
           P64[Hp - 96] = _s3XzO::P64;
           P64[Hp - 88] = _s3XzP::P64;
           P64[Hp - 80] = _s3XzQ::P64;
           P64[Hp - 72] = _s3XzR::P64;
           P64[Hp - 64] = _s3XzS::P64;
           P64[Hp - 56] = _s3XzT::P64;
           P64[Hp - 48] = _s3XzU::P64;
           P64[Hp - 40] = _s3XzV::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 159;
           P64[Hp - 16] = Hp - 296;
           P64[Hp - 8] = Hp - 422;
           P64[Hp] = Hp - 560;
           R1 = Hp - 31;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_entry;
         const 0;
         const 33777001500246030;
         const 64424509440;
         const S3Y0k_srt+224;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.600538561 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3Zyp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2,
                                                                    R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s3XAe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3Zyy: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3Zyz; else goto c3ZyA;
       c3Zyz: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZyA: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = P64[R1 + 110];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XAe_info" {
     sat_s3XAe_info:
         const sat_s3XAe_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+232;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3,
                                                            R4, R5, R6]
         { []
         }
     {offset
       c3ZyB: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3ZyF; else goto c3ZyE;
       c3ZyF: // global
           HpAlloc = 120;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3ZyE: // global
           I64[Hp - 112] = sat_s3XAe_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R2 = Hp - 110;
           Sp = Sp + 72;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 18295877781159950;
         const 60129542144;
         const S3Y0k_srt+232;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.609643529 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3Zza: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 88, res: 0, upd: 8;
     }
 },
 sat_s3XAu_entry() //  [R1]
         { []
         }
     {offset
       c3Zzi: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c3Zzj; else goto c3Zzk;
       c3Zzj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3Zzk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 104] = P64[R1 + 56];
           P64[Sp - 96] = P64[R1 + 64];
           P64[Sp - 88] = P64[R1 + 72];
           P64[Sp - 80] = P64[R1 + 80];
           P64[Sp - 72] = P64[R1 + 88];
           P64[Sp - 64] = P64[R1 + 96];
           P64[Sp - 56] = P64[R1 + 104];
           P64[Sp - 48] = P64[R1 + 112];
           P64[Sp - 40] = P64[R1 + 120];
           P64[Sp - 32] = P64[R1 + 128];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 104;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 112, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XAu_info" {
     sat_s3XAu_info:
         const sat_s3XAu_entry;
         const 15;
         const 4294967311;
         const S3Y0k_srt+232;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c3Zzl: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c3Zzp; else goto c3Zzo;
       c3Zzp: // global
           HpAlloc = 136;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       c3Zzo: // global
           I64[Hp - 128] = sat_s3XAu_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R2 = Hp - 128;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 80;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 36028801313931278;
         const 64424509440;
         const S3Y0k_srt+232;
         const 15;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.620361403 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3ZA0: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s3XAJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZAd: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3ZAe; else goto c3ZAf;
       c3ZAe: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZAf: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = P64[R1 + 110];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XAJ_info" {
     sat_s3XAJ_info:
         const sat_s3XAJ_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+232;
 },
 sat_s3XAK_entry() //  [R1]
         { []
         }
     {offset
       c3ZAg: // global
           _s3XAK::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZAh; else goto c3ZAi;
       c3ZAi: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3ZAk; else goto c3ZAj;
       c3ZAk: // global
           HpAlloc = 120;
           goto c3ZAh;
       c3ZAh: // global
           R1 = _s3XAK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZAj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XAK::P64;
           _s3XAv::P64 = P64[_s3XAK::P64 + 16];
           _s3XAw::P64 = P64[_s3XAK::P64 + 24];
           _s3XAx::P64 = P64[_s3XAK::P64 + 32];
           _s3XAy::P64 = P64[_s3XAK::P64 + 40];
           _s3XAz::P64 = P64[_s3XAK::P64 + 48];
           _s3XAA::P64 = P64[_s3XAK::P64 + 56];
           _s3XAB::P64 = P64[_s3XAK::P64 + 64];
           _s3XAC::P64 = P64[_s3XAK::P64 + 72];
           _s3XAD::P64 = P64[_s3XAK::P64 + 80];
           _s3XAE::P64 = P64[_s3XAK::P64 + 88];
           _s3XAF::P64 = P64[_s3XAK::P64 + 96];
           _s3XAG::P64 = P64[_s3XAK::P64 + 104];
           _s3XAH::P64 = P64[_s3XAK::P64 + 112];
           _s3XAI::P64 = P64[_s3XAK::P64 + 120];
           I64[Hp - 112] = sat_s3XAJ_info;
           P64[Hp - 104] = _s3XAv::P64;
           P64[Hp - 96] = _s3XAw::P64;
           P64[Hp - 88] = _s3XAx::P64;
           P64[Hp - 80] = _s3XAy::P64;
           P64[Hp - 72] = _s3XAz::P64;
           P64[Hp - 64] = _s3XAA::P64;
           P64[Hp - 56] = _s3XAB::P64;
           P64[Hp - 48] = _s3XAC::P64;
           P64[Hp - 40] = _s3XAD::P64;
           P64[Hp - 32] = _s3XAE::P64;
           P64[Hp - 24] = _s3XAF::P64;
           P64[Hp - 16] = _s3XAG::P64;
           P64[Hp - 8] = _s3XAH::P64;
           P64[Hp] = _s3XAI::P64;
           R2 = Hp - 110;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XAK_info" {
     sat_s3XAK_info:
         const sat_s3XAK_entry;
         const 14;
         const 281479271677967;
         const S3Y0k_srt+232;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c3ZAl: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3ZAp; else goto c3ZAo;
       c3ZAp: // global
           HpAlloc = 128;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3ZAo: // global
           I64[Hp - 120] = sat_s3XAK_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R2 = Hp - 120;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 72;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 72339073309605902;
         const 60129542144;
         const S3Y0k_srt+232;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.634993066 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3ZB5: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s3XB2_entry() //  [R1]
         { []
         }
     {offset
       c3ZBd: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3ZBe; else goto c3ZBf;
       c3ZBe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZBf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = P64[R1 + 120];
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                    R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XB2_info" {
     sat_s3XB2_info:
         const sat_s3XB2_entry;
         const 14;
         const 4294967311;
         const S3Y0k_srt+408;
 },
 sat_s3XB1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZBl: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3ZBm; else goto c3ZBn;
       c3ZBm: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZBn: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 88] = P64[R1 + 46];
           P64[Sp - 80] = P64[R1 + 54];
           P64[Sp - 72] = P64[R1 + 62];
           P64[Sp - 64] = P64[R1 + 70];
           P64[Sp - 56] = P64[R1 + 78];
           P64[Sp - 48] = P64[R1 + 86];
           P64[Sp - 40] = P64[R1 + 94];
           P64[Sp - 32] = P64[R1 + 102];
           P64[Sp - 24] = P64[R1 + 110];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)1_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 96, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XB1_info" {
     sat_s3XB1_info:
         const sat_s3XB1_entry;
         const 14;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+232;
 },
 sat_s3XB0_entry() //  [R1]
         { []
         }
     {offset
       c3ZBs: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3ZBt; else goto c3ZBu;
       c3ZBt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZBu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = P64[R1 + 120];
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XB0_info" {
     sat_s3XB0_info:
         const sat_s3XB0_entry;
         const 14;
         const 4294967311;
         const S3Y0k_srt+424;
 },
 sat_s3XAZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZBA: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3ZBB; else goto c3ZBC;
       c3ZBB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZBC: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 80] = P64[R1 + 47];
           P64[Sp - 72] = P64[R1 + 55];
           P64[Sp - 64] = P64[R1 + 63];
           P64[Sp - 56] = P64[R1 + 71];
           P64[Sp - 48] = P64[R1 + 79];
           P64[Sp - 40] = P64[R1 + 87];
           P64[Sp - 32] = P64[R1 + 95];
           P64[Sp - 24] = P64[R1 + 103];
           P64[Sp - 16] = P64[R1 + 111];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XAZ_info" {
     sat_s3XAZ_info:
         const sat_s3XAZ_entry;
         const 14;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+416;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZBE: // global
           Hp = Hp + 536;
           if (Hp > HpLim) (likely: False) goto c3ZBI; else goto c3ZBH;
       c3ZBI: // global
           HpAlloc = 536;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3ZBH: // global
           I64[Hp - 528] = sat_s3XB2_info;
           P64[Hp - 512] = R2;
           P64[Hp - 504] = R3;
           P64[Hp - 496] = R4;
           P64[Hp - 488] = R5;
           P64[Hp - 480] = R6;
           _s3XAQ::P64 = P64[Sp];
           P64[Hp - 472] = _s3XAQ::P64;
           _s3XAR::P64 = P64[Sp + 8];
           P64[Hp - 464] = _s3XAR::P64;
           _s3XAS::P64 = P64[Sp + 16];
           P64[Hp - 456] = _s3XAS::P64;
           _s3XAT::P64 = P64[Sp + 24];
           P64[Hp - 448] = _s3XAT::P64;
           _s3XAU::P64 = P64[Sp + 32];
           P64[Hp - 440] = _s3XAU::P64;
           _s3XAV::P64 = P64[Sp + 40];
           P64[Hp - 432] = _s3XAV::P64;
           _s3XAW::P64 = P64[Sp + 48];
           P64[Hp - 424] = _s3XAW::P64;
           _s3XAX::P64 = P64[Sp + 56];
           P64[Hp - 416] = _s3XAX::P64;
           _s3XAY::P64 = P64[Sp + 64];
           P64[Hp - 408] = _s3XAY::P64;
           I64[Hp - 400] = sat_s3XB1_info;
           P64[Hp - 392] = R2;
           P64[Hp - 384] = R3;
           P64[Hp - 376] = R4;
           P64[Hp - 368] = R5;
           P64[Hp - 360] = R6;
           P64[Hp - 352] = _s3XAQ::P64;
           P64[Hp - 344] = _s3XAR::P64;
           P64[Hp - 336] = _s3XAS::P64;
           P64[Hp - 328] = _s3XAT::P64;
           P64[Hp - 320] = _s3XAU::P64;
           P64[Hp - 312] = _s3XAV::P64;
           P64[Hp - 304] = _s3XAW::P64;
           P64[Hp - 296] = _s3XAX::P64;
           P64[Hp - 288] = _s3XAY::P64;
           I64[Hp - 280] = sat_s3XB0_info;
           P64[Hp - 264] = R2;
           P64[Hp - 256] = R3;
           P64[Hp - 248] = R4;
           P64[Hp - 240] = R5;
           P64[Hp - 232] = R6;
           P64[Hp - 224] = _s3XAQ::P64;
           P64[Hp - 216] = _s3XAR::P64;
           P64[Hp - 208] = _s3XAS::P64;
           P64[Hp - 200] = _s3XAT::P64;
           P64[Hp - 192] = _s3XAU::P64;
           P64[Hp - 184] = _s3XAV::P64;
           P64[Hp - 176] = _s3XAW::P64;
           P64[Hp - 168] = _s3XAX::P64;
           P64[Hp - 160] = _s3XAY::P64;
           I64[Hp - 152] = sat_s3XAZ_info;
           P64[Hp - 144] = R2;
           P64[Hp - 136] = R3;
           P64[Hp - 128] = R4;
           P64[Hp - 120] = R5;
           P64[Hp - 112] = R6;
           P64[Hp - 104] = _s3XAQ::P64;
           P64[Hp - 96] = _s3XAR::P64;
           P64[Hp - 88] = _s3XAS::P64;
           P64[Hp - 80] = _s3XAT::P64;
           P64[Hp - 72] = _s3XAU::P64;
           P64[Hp - 64] = _s3XAV::P64;
           P64[Hp - 56] = _s3XAW::P64;
           P64[Hp - 48] = _s3XAX::P64;
           P64[Hp - 40] = _s3XAY::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 151;
           P64[Hp - 16] = Hp - 280;
           P64[Hp - 8] = Hp - 398;
           P64[Hp] = Hp - 528;
           R1 = Hp - 31;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_entry;
         const 0;
         const 270215981937197070;
         const 60129542144;
         const S3Y0k_srt+232;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.651811386 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZCS: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2,
                                                                   R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s3XBg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZD1: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3ZD2; else goto c3ZD3;
       c3ZD2: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZD3: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = P64[R1 + 102];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XBg_info" {
     sat_s3XBg_info:
         const sat_s3XBg_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+240;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3,
                                                           R4, R5, R6]
         { []
         }
     {offset
       c3ZD4: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3ZD8; else goto c3ZD7;
       c3ZD8: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3ZD7: // global
           I64[Hp - 104] = sat_s3XBg_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R2 = Hp - 102;
           Sp = Sp + 64;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 144255929859178510;
         const 55834574848;
         const S3Y0k_srt+240;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.661416348 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZDB: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 80, res: 0, upd: 8;
     }
 },
 sat_s3XBv_entry() //  [R1]
         { []
         }
     {offset
       c3ZDJ: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3ZDK; else goto c3ZDL;
       c3ZDK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZDL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 96] = P64[R1 + 56];
           P64[Sp - 88] = P64[R1 + 64];
           P64[Sp - 80] = P64[R1 + 72];
           P64[Sp - 72] = P64[R1 + 80];
           P64[Sp - 64] = P64[R1 + 88];
           P64[Sp - 56] = P64[R1 + 96];
           P64[Sp - 48] = P64[R1 + 104];
           P64[Sp - 40] = P64[R1 + 112];
           P64[Sp - 32] = P64[R1 + 120];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 96;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 104, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XBv_info" {
     sat_s3XBv_info:
         const sat_s3XBv_entry;
         const 14;
         const 4294967311;
         const S3Y0k_srt+240;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c3ZDM: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c3ZDQ; else goto c3ZDP;
       c3ZDQ: // global
           HpAlloc = 128;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c3ZDP: // global
           I64[Hp - 120] = sat_s3XBv_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R2 = Hp - 120;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 72;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 288230380446679054;
         const 60129542144;
         const S3Y0k_srt+240;
         const 14;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.670998257 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3ZEp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s3XBJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZEC: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3ZED; else goto c3ZEE;
       c3ZED: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZEE: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = P64[R1 + 102];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XBJ_info" {
     sat_s3XBJ_info:
         const sat_s3XBJ_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+240;
 },
 sat_s3XBK_entry() //  [R1]
         { []
         }
     {offset
       c3ZEF: // global
           _s3XBK::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZEG; else goto c3ZEH;
       c3ZEH: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3ZEJ; else goto c3ZEI;
       c3ZEJ: // global
           HpAlloc = 112;
           goto c3ZEG;
       c3ZEG: // global
           R1 = _s3XBK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZEI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XBK::P64;
           _s3XBw::P64 = P64[_s3XBK::P64 + 16];
           _s3XBx::P64 = P64[_s3XBK::P64 + 24];
           _s3XBy::P64 = P64[_s3XBK::P64 + 32];
           _s3XBz::P64 = P64[_s3XBK::P64 + 40];
           _s3XBA::P64 = P64[_s3XBK::P64 + 48];
           _s3XBB::P64 = P64[_s3XBK::P64 + 56];
           _s3XBC::P64 = P64[_s3XBK::P64 + 64];
           _s3XBD::P64 = P64[_s3XBK::P64 + 72];
           _s3XBE::P64 = P64[_s3XBK::P64 + 80];
           _s3XBF::P64 = P64[_s3XBK::P64 + 88];
           _s3XBG::P64 = P64[_s3XBK::P64 + 96];
           _s3XBH::P64 = P64[_s3XBK::P64 + 104];
           _s3XBI::P64 = P64[_s3XBK::P64 + 112];
           I64[Hp - 104] = sat_s3XBJ_info;
           P64[Hp - 96] = _s3XBw::P64;
           P64[Hp - 88] = _s3XBx::P64;
           P64[Hp - 80] = _s3XBy::P64;
           P64[Hp - 72] = _s3XBz::P64;
           P64[Hp - 64] = _s3XBA::P64;
           P64[Hp - 56] = _s3XBB::P64;
           P64[Hp - 48] = _s3XBC::P64;
           P64[Hp - 40] = _s3XBD::P64;
           P64[Hp - 32] = _s3XBE::P64;
           P64[Hp - 24] = _s3XBF::P64;
           P64[Hp - 16] = _s3XBG::P64;
           P64[Hp - 8] = _s3XBH::P64;
           P64[Hp] = _s3XBI::P64;
           R2 = Hp - 102;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XBK_info" {
     sat_s3XBK_info:
         const sat_s3XBK_entry;
         const 13;
         const 140741783322639;
         const S3Y0k_srt+240;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c3ZEK: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3ZEO; else goto c3ZEN;
       c3ZEO: // global
           HpAlloc = 120;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3ZEN: // global
           I64[Hp - 112] = sat_s3XBK_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R2 = Hp - 112;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 576601494086746126;
         const 55834574848;
         const S3Y0k_srt+240;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.685075748 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3ZFs: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s3XC1_entry() //  [R1]
         { []
         }
     {offset
       c3ZFA: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3ZFB; else goto c3ZFC;
       c3ZFB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZFC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = P64[R1 + 112];
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                   R5,
                                                                   R4,
                                                                   R3,
                                                                   R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XC1_info" {
     sat_s3XC1_info:
         const sat_s3XC1_entry;
         const 13;
         const 4294967311;
         const S3Y0k_srt+440;
 },
 sat_s3XC0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZFI: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3ZFJ; else goto c3ZFK;
       c3ZFJ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZFK: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 80] = P64[R1 + 46];
           P64[Sp - 72] = P64[R1 + 54];
           P64[Sp - 64] = P64[R1 + 62];
           P64[Sp - 56] = P64[R1 + 70];
           P64[Sp - 48] = P64[R1 + 78];
           P64[Sp - 40] = P64[R1 + 86];
           P64[Sp - 32] = P64[R1 + 94];
           P64[Sp - 24] = P64[R1 + 102];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)1_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 88, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XC0_info" {
     sat_s3XC0_info:
         const sat_s3XC0_entry;
         const 13;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+240;
 },
 sat_s3XBZ_entry() //  [R1]
         { []
         }
     {offset
       c3ZFP: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3ZFQ; else goto c3ZFR;
       c3ZFQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZFR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = P64[R1 + 112];
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XBZ_info" {
     sat_s3XBZ_info:
         const sat_s3XBZ_entry;
         const 13;
         const 4294967311;
         const S3Y0k_srt+456;
 },
 sat_s3XBY_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZFX: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3ZFY; else goto c3ZFZ;
       c3ZFY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZFZ: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 72] = P64[R1 + 47];
           P64[Sp - 64] = P64[R1 + 55];
           P64[Sp - 56] = P64[R1 + 63];
           P64[Sp - 48] = P64[R1 + 71];
           P64[Sp - 40] = P64[R1 + 79];
           P64[Sp - 32] = P64[R1 + 87];
           P64[Sp - 24] = P64[R1 + 95];
           P64[Sp - 16] = P64[R1 + 103];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XBY_info" {
     sat_s3XBY_info:
         const sat_s3XBY_entry;
         const 13;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+448;
 },
 GHC.Read.$fRead(,,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZG1: // global
           Hp = Hp + 504;
           if (Hp > HpLim) (likely: False) goto c3ZG5; else goto c3ZG4;
       c3ZG5: // global
           HpAlloc = 504;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3ZG4: // global
           I64[Hp - 496] = sat_s3XC1_info;
           P64[Hp - 480] = R2;
           P64[Hp - 472] = R3;
           P64[Hp - 464] = R4;
           P64[Hp - 456] = R5;
           P64[Hp - 448] = R6;
           _s3XBQ::P64 = P64[Sp];
           P64[Hp - 440] = _s3XBQ::P64;
           _s3XBR::P64 = P64[Sp + 8];
           P64[Hp - 432] = _s3XBR::P64;
           _s3XBS::P64 = P64[Sp + 16];
           P64[Hp - 424] = _s3XBS::P64;
           _s3XBT::P64 = P64[Sp + 24];
           P64[Hp - 416] = _s3XBT::P64;
           _s3XBU::P64 = P64[Sp + 32];
           P64[Hp - 408] = _s3XBU::P64;
           _s3XBV::P64 = P64[Sp + 40];
           P64[Hp - 400] = _s3XBV::P64;
           _s3XBW::P64 = P64[Sp + 48];
           P64[Hp - 392] = _s3XBW::P64;
           _s3XBX::P64 = P64[Sp + 56];
           P64[Hp - 384] = _s3XBX::P64;
           I64[Hp - 376] = sat_s3XC0_info;
           P64[Hp - 368] = R2;
           P64[Hp - 360] = R3;
           P64[Hp - 352] = R4;
           P64[Hp - 344] = R5;
           P64[Hp - 336] = R6;
           P64[Hp - 328] = _s3XBQ::P64;
           P64[Hp - 320] = _s3XBR::P64;
           P64[Hp - 312] = _s3XBS::P64;
           P64[Hp - 304] = _s3XBT::P64;
           P64[Hp - 296] = _s3XBU::P64;
           P64[Hp - 288] = _s3XBV::P64;
           P64[Hp - 280] = _s3XBW::P64;
           P64[Hp - 272] = _s3XBX::P64;
           I64[Hp - 264] = sat_s3XBZ_info;
           P64[Hp - 248] = R2;
           P64[Hp - 240] = R3;
           P64[Hp - 232] = R4;
           P64[Hp - 224] = R5;
           P64[Hp - 216] = R6;
           P64[Hp - 208] = _s3XBQ::P64;
           P64[Hp - 200] = _s3XBR::P64;
           P64[Hp - 192] = _s3XBS::P64;
           P64[Hp - 184] = _s3XBT::P64;
           P64[Hp - 176] = _s3XBU::P64;
           P64[Hp - 168] = _s3XBV::P64;
           P64[Hp - 160] = _s3XBW::P64;
           P64[Hp - 152] = _s3XBX::P64;
           I64[Hp - 144] = sat_s3XBY_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = _s3XBQ::P64;
           P64[Hp - 88] = _s3XBR::P64;
           P64[Hp - 80] = _s3XBS::P64;
           P64[Hp - 72] = _s3XBT::P64;
           P64[Hp - 64] = _s3XBU::P64;
           P64[Hp - 56] = _s3XBV::P64;
           P64[Hp - 48] = _s3XBW::P64;
           P64[Hp - 40] = _s3XBX::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 264;
           P64[Hp - 8] = Hp - 374;
           P64[Hp] = Hp - 496;
           R1 = Hp - 31;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,,,)_entry;
         const 0;
         const 2161727825432805390;
         const 55834574848;
         const S3Y0k_srt+240;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.701850995 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZHb: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2,
                                                                  R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s3XCe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZHk: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3ZHl; else goto c3ZHm;
       c3ZHl: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZHm: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = P64[R1 + 94];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XCe_info" {
     sat_s3XCe_info:
         const sat_s3XCe_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+248;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3,
                                                          R4, R5, R6]
         { []
         }
     {offset
       c3ZHn: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3ZHr; else goto c3ZHq;
       c3ZHr: // global
           HpAlloc = 104;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3ZHq: // global
           I64[Hp - 96] = sat_s3XCe_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R2 = Hp - 94;
           Sp = Sp + 56;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 1152991877645991950;
         const 51539607552;
         const S3Y0k_srt+248;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.71080118 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZHS: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 72, res: 0, upd: 8;
     }
 },
 sat_s3XCs_entry() //  [R1]
         { []
         }
     {offset
       c3ZI0: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c3ZI1; else goto c3ZI2;
       c3ZI1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZI2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 88] = P64[R1 + 56];
           P64[Sp - 80] = P64[R1 + 64];
           P64[Sp - 72] = P64[R1 + 72];
           P64[Sp - 64] = P64[R1 + 80];
           P64[Sp - 56] = P64[R1 + 88];
           P64[Sp - 48] = P64[R1 + 96];
           P64[Sp - 40] = P64[R1 + 104];
           P64[Sp - 32] = P64[R1 + 112];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 88;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 96, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XCs_info" {
     sat_s3XCs_info:
         const sat_s3XCs_entry;
         const 13;
         const 4294967311;
         const S3Y0k_srt+248;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c3ZI3: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c3ZI7; else goto c3ZI6;
       c3ZI7: // global
           HpAlloc = 120;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       c3ZI6: // global
           I64[Hp - 112] = sat_s3XCs_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = P64[Sp];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R2 = Hp - 112;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 2305843013508661262;
         const 55834574848;
         const S3Y0k_srt+248;
         const 13;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.72072332 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3ZIE: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s3XCF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZIR: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3ZIS; else goto c3ZIT;
       c3ZIS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZIT: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = P64[R1 + 94];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XCF_info" {
     sat_s3XCF_info:
         const sat_s3XCF_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+248;
 },
 sat_s3XCG_entry() //  [R1]
         { []
         }
     {offset
       c3ZIU: // global
           _s3XCG::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZIV; else goto c3ZIW;
       c3ZIW: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3ZIY; else goto c3ZIX;
       c3ZIY: // global
           HpAlloc = 104;
           goto c3ZIV;
       c3ZIV: // global
           R1 = _s3XCG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZIX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XCG::P64;
           _s3XCt::P64 = P64[_s3XCG::P64 + 16];
           _s3XCu::P64 = P64[_s3XCG::P64 + 24];
           _s3XCv::P64 = P64[_s3XCG::P64 + 32];
           _s3XCw::P64 = P64[_s3XCG::P64 + 40];
           _s3XCx::P64 = P64[_s3XCG::P64 + 48];
           _s3XCy::P64 = P64[_s3XCG::P64 + 56];
           _s3XCz::P64 = P64[_s3XCG::P64 + 64];
           _s3XCA::P64 = P64[_s3XCG::P64 + 72];
           _s3XCB::P64 = P64[_s3XCG::P64 + 80];
           _s3XCC::P64 = P64[_s3XCG::P64 + 88];
           _s3XCD::P64 = P64[_s3XCG::P64 + 96];
           _s3XCE::P64 = P64[_s3XCG::P64 + 104];
           I64[Hp - 96] = sat_s3XCF_info;
           P64[Hp - 88] = _s3XCt::P64;
           P64[Hp - 80] = _s3XCu::P64;
           P64[Hp - 72] = _s3XCv::P64;
           P64[Hp - 64] = _s3XCw::P64;
           P64[Hp - 56] = _s3XCx::P64;
           P64[Hp - 48] = _s3XCy::P64;
           P64[Hp - 40] = _s3XCz::P64;
           P64[Hp - 32] = _s3XCA::P64;
           P64[Hp - 24] = _s3XCB::P64;
           P64[Hp - 16] = _s3XCC::P64;
           P64[Hp - 8] = _s3XCD::P64;
           P64[Hp] = _s3XCE::P64;
           R2 = Hp - 94;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XCG_info" {
     sat_s3XCG_info:
         const sat_s3XCG_entry;
         const 12;
         const 70373039144975;
         const S3Y0k_srt+248;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c3ZIZ: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3ZJ3; else goto c3ZJ2;
       c3ZJ3: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3ZJ2: // global
           I64[Hp - 104] = sat_s3XCG_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R2 = Hp - 104;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 56;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 4611756391466532878;
         const 51539607552;
         const S3Y0k_srt+248;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.735697662 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3ZJF: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,,)_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s3XCW_entry() //  [R1]
         { []
         }
     {offset
       c3ZJN: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3ZJO; else goto c3ZJP;
       c3ZJO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZJP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = P64[R1 + 104];
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                  R5,
                                                                  R4,
                                                                  R3,
                                                                  R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XCW_info" {
     sat_s3XCW_info:
         const sat_s3XCW_entry;
         const 12;
         const 4294967311;
         const S3Y0k_srt+472;
 },
 sat_s3XCV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZJV: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3ZJW; else goto c3ZJX;
       c3ZJW: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZJX: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 72] = P64[R1 + 46];
           P64[Sp - 64] = P64[R1 + 54];
           P64[Sp - 56] = P64[R1 + 62];
           P64[Sp - 48] = P64[R1 + 70];
           P64[Sp - 40] = P64[R1 + 78];
           P64[Sp - 32] = P64[R1 + 86];
           P64[Sp - 24] = P64[R1 + 94];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 80, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XCV_info" {
     sat_s3XCV_info:
         const sat_s3XCV_entry;
         const 12;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+248;
 },
 sat_s3XCU_entry() //  [R1]
         { []
         }
     {offset
       c3ZK2: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3ZK3; else goto c3ZK4;
       c3ZK3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZK4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = P64[R1 + 104];
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XCU_info" {
     sat_s3XCU_info:
         const sat_s3XCU_entry;
         const 12;
         const 4294967311;
         const S3Y0k_srt+488;
 },
 sat_s3XCT_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZKa: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3ZKb; else goto c3ZKc;
       c3ZKb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZKc: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 64] = P64[R1 + 47];
           P64[Sp - 56] = P64[R1 + 55];
           P64[Sp - 48] = P64[R1 + 63];
           P64[Sp - 40] = P64[R1 + 71];
           P64[Sp - 32] = P64[R1 + 79];
           P64[Sp - 24] = P64[R1 + 87];
           P64[Sp - 16] = P64[R1 + 95];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XCT_info" {
     sat_s3XCT_info:
         const sat_s3XCT_entry;
         const 12;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+480;
 },
 GHC.Read.$fRead(,,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZKe: // global
           Hp = Hp + 472;
           if (Hp > HpLim) (likely: False) goto c3ZKi; else goto c3ZKh;
       c3ZKi: // global
           HpAlloc = 472;
           R1 = GHC.Read.$fRead(,,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3ZKh: // global
           I64[Hp - 464] = sat_s3XCW_info;
           P64[Hp - 448] = R2;
           P64[Hp - 440] = R3;
           P64[Hp - 432] = R4;
           P64[Hp - 424] = R5;
           P64[Hp - 416] = R6;
           _s3XCM::P64 = P64[Sp];
           P64[Hp - 408] = _s3XCM::P64;
           _s3XCN::P64 = P64[Sp + 8];
           P64[Hp - 400] = _s3XCN::P64;
           _s3XCO::P64 = P64[Sp + 16];
           P64[Hp - 392] = _s3XCO::P64;
           _s3XCP::P64 = P64[Sp + 24];
           P64[Hp - 384] = _s3XCP::P64;
           _s3XCQ::P64 = P64[Sp + 32];
           P64[Hp - 376] = _s3XCQ::P64;
           _s3XCR::P64 = P64[Sp + 40];
           P64[Hp - 368] = _s3XCR::P64;
           _s3XCS::P64 = P64[Sp + 48];
           P64[Hp - 360] = _s3XCS::P64;
           I64[Hp - 352] = sat_s3XCV_info;
           P64[Hp - 344] = R2;
           P64[Hp - 336] = R3;
           P64[Hp - 328] = R4;
           P64[Hp - 320] = R5;
           P64[Hp - 312] = R6;
           P64[Hp - 304] = _s3XCM::P64;
           P64[Hp - 296] = _s3XCN::P64;
           P64[Hp - 288] = _s3XCO::P64;
           P64[Hp - 280] = _s3XCP::P64;
           P64[Hp - 272] = _s3XCQ::P64;
           P64[Hp - 264] = _s3XCR::P64;
           P64[Hp - 256] = _s3XCS::P64;
           I64[Hp - 248] = sat_s3XCU_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           P64[Hp - 216] = R4;
           P64[Hp - 208] = R5;
           P64[Hp - 200] = R6;
           P64[Hp - 192] = _s3XCM::P64;
           P64[Hp - 184] = _s3XCN::P64;
           P64[Hp - 176] = _s3XCO::P64;
           P64[Hp - 168] = _s3XCP::P64;
           P64[Hp - 160] = _s3XCQ::P64;
           P64[Hp - 152] = _s3XCR::P64;
           P64[Hp - 144] = _s3XCS::P64;
           I64[Hp - 136] = sat_s3XCT_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           P64[Hp - 104] = R5;
           P64[Hp - 96] = R6;
           P64[Hp - 88] = _s3XCM::P64;
           P64[Hp - 80] = _s3XCN::P64;
           P64[Hp - 72] = _s3XCO::P64;
           P64[Hp - 64] = _s3XCP::P64;
           P64[Hp - 56] = _s3XCQ::P64;
           P64[Hp - 48] = _s3XCR::P64;
           P64[Hp - 40] = _s3XCS::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 135;
           P64[Hp - 16] = Hp - 248;
           P64[Hp - 8] = Hp - 350;
           P64[Hp] = Hp - 464;
           R1 = Hp - 31;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,,)_entry;
         const 0;
         const 17293822573397671950;
         const 51539607552;
         const S3Y0k_srt+248;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.75139928 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZLk: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s3XD8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZLt: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3ZLu; else goto c3ZLv;
       c3ZLu: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZLv: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = P64[R1 + 86];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XD8_info" {
     sat_s3XD8_info:
         const sat_s3XD8_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+256;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4,
                                                         R5, R6]
         { []
         }
     {offset
       c3ZLw: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3ZLA; else goto c3ZLz;
       c3ZLA: // global
           HpAlloc = 96;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3ZLz: // global
           I64[Hp - 88] = sat_s3XD8_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R2 = Hp - 86;
           Sp = Sp + 48;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 9223407225521831950;
         const 47244640256;
         const S3Y0k_srt+256;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.759939871 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZLZ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 64, res: 0, upd: 8;
     }
 },
 sat_s3XDl_entry() //  [R1]
         { []
         }
     {offset
       c3ZM7: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3ZM8; else goto c3ZM9;
       c3ZM8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZM9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 80] = P64[R1 + 56];
           P64[Sp - 72] = P64[R1 + 64];
           P64[Sp - 64] = P64[R1 + 72];
           P64[Sp - 56] = P64[R1 + 80];
           P64[Sp - 48] = P64[R1 + 88];
           P64[Sp - 40] = P64[R1 + 96];
           P64[Sp - 32] = P64[R1 + 104];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 80;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 88, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XDl_info" {
     sat_s3XDl_info:
         const sat_s3XDl_entry;
         const 12;
         const 4294967311;
         const S3Y0k_srt+256;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c3ZMa: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3ZMe; else goto c3ZMd;
       c3ZMe: // global
           HpAlloc = 112;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 104, res: 0, upd: 8;
       c3ZMd: // global
           I64[Hp - 104] = sat_s3XDl_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           R2 = Hp - 104;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 56;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 51539607552;
         const S3Y0k_srt+512;
         const 12;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.769840034 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3ZMJ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadList_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s3XDx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZMW: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3ZMX; else goto c3ZMY;
       c3ZMX: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZMY: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = P64[R1 + 86];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XDx_info" {
     sat_s3XDx_info:
         const sat_s3XDx_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+520;
 },
 sat_s3XDy_entry() //  [R1]
         { []
         }
     {offset
       c3ZMZ: // global
           _s3XDy::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZN0; else goto c3ZN1;
       c3ZN1: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3ZN3; else goto c3ZN2;
       c3ZN3: // global
           HpAlloc = 96;
           goto c3ZN0;
       c3ZN0: // global
           R1 = _s3XDy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZN2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XDy::P64;
           _s3XDm::P64 = P64[_s3XDy::P64 + 16];
           _s3XDn::P64 = P64[_s3XDy::P64 + 24];
           _s3XDo::P64 = P64[_s3XDy::P64 + 32];
           _s3XDp::P64 = P64[_s3XDy::P64 + 40];
           _s3XDq::P64 = P64[_s3XDy::P64 + 48];
           _s3XDr::P64 = P64[_s3XDy::P64 + 56];
           _s3XDs::P64 = P64[_s3XDy::P64 + 64];
           _s3XDt::P64 = P64[_s3XDy::P64 + 72];
           _s3XDu::P64 = P64[_s3XDy::P64 + 80];
           _s3XDv::P64 = P64[_s3XDy::P64 + 88];
           _s3XDw::P64 = P64[_s3XDy::P64 + 96];
           I64[Hp - 88] = sat_s3XDx_info;
           P64[Hp - 80] = _s3XDm::P64;
           P64[Hp - 72] = _s3XDn::P64;
           P64[Hp - 64] = _s3XDo::P64;
           P64[Hp - 56] = _s3XDp::P64;
           P64[Hp - 48] = _s3XDq::P64;
           P64[Hp - 40] = _s3XDr::P64;
           P64[Hp - 32] = _s3XDs::P64;
           P64[Hp - 24] = _s3XDt::P64;
           P64[Hp - 16] = _s3XDu::P64;
           P64[Hp - 8] = _s3XDv::P64;
           P64[Hp] = _s3XDw::P64;
           R2 = Hp - 86;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XDy_info" {
     sat_s3XDy_info:
         const sat_s3XDy_entry;
         const 11;
         const 4503603922337807;
         const S3Y0k_srt+360;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c3ZN4: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3ZN8; else goto c3ZN7;
       c3ZN8: // global
           HpAlloc = 104;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3ZN7: // global
           I64[Hp - 96] = sat_s3XDy_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R2 = Hp - 96;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadList_entry;
         const 0;
         const 13510803177078798;
         const 47244640256;
         const S3Y0k_srt+360;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.78408951 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3ZNI: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,,)_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s3XDN_entry() //  [R1]
         { []
         }
     {offset
       c3ZNQ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3ZNR; else goto c3ZNS;
       c3ZNR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZNS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = P64[R1 + 96];
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                 R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XDN_info" {
     sat_s3XDN_info:
         const sat_s3XDN_entry;
         const 11;
         const 4294967311;
         const S3Y0k_srt+504;
 },
 sat_s3XDM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZNY: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3ZNZ; else goto c3ZO0;
       c3ZNZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZO0: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 64] = P64[R1 + 46];
           P64[Sp - 56] = P64[R1 + 54];
           P64[Sp - 48] = P64[R1 + 62];
           P64[Sp - 40] = P64[R1 + 70];
           P64[Sp - 32] = P64[R1 + 78];
           P64[Sp - 24] = P64[R1 + 86];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)1_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 72, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XDM_info" {
     sat_s3XDM_info:
         const sat_s3XDM_entry;
         const 11;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+520;
 },
 sat_s3XDL_entry() //  [R1]
         { []
         }
     {offset
       c3ZO5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3ZO6; else goto c3ZO7;
       c3ZO6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZO7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = P64[R1 + 96];
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadList_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XDL_info" {
     sat_s3XDL_info:
         const sat_s3XDL_entry;
         const 11;
         const 4294967311;
         const S3Y0k_srt+528;
 },
 sat_s3XDK_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZOd: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3ZOe; else goto c3ZOf;
       c3ZOe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZOf: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 56] = P64[R1 + 47];
           P64[Sp - 48] = P64[R1 + 55];
           P64[Sp - 40] = P64[R1 + 63];
           P64[Sp - 32] = P64[R1 + 71];
           P64[Sp - 24] = P64[R1 + 79];
           P64[Sp - 16] = P64[R1 + 87];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XDK_info" {
     sat_s3XDK_info:
         const sat_s3XDK_entry;
         const 11;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+512;
 },
 GHC.Read.$fRead(,,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZOh: // global
           Hp = Hp + 440;
           if (Hp > HpLim) (likely: False) goto c3ZOl; else goto c3ZOk;
       c3ZOl: // global
           HpAlloc = 440;
           R1 = GHC.Read.$fRead(,,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3ZOk: // global
           I64[Hp - 432] = sat_s3XDN_info;
           P64[Hp - 416] = R2;
           P64[Hp - 408] = R3;
           P64[Hp - 400] = R4;
           P64[Hp - 392] = R5;
           P64[Hp - 384] = R6;
           _s3XDE::P64 = P64[Sp];
           P64[Hp - 376] = _s3XDE::P64;
           _s3XDF::P64 = P64[Sp + 8];
           P64[Hp - 368] = _s3XDF::P64;
           _s3XDG::P64 = P64[Sp + 16];
           P64[Hp - 360] = _s3XDG::P64;
           _s3XDH::P64 = P64[Sp + 24];
           P64[Hp - 352] = _s3XDH::P64;
           _s3XDI::P64 = P64[Sp + 32];
           P64[Hp - 344] = _s3XDI::P64;
           _s3XDJ::P64 = P64[Sp + 40];
           P64[Hp - 336] = _s3XDJ::P64;
           I64[Hp - 328] = sat_s3XDM_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           P64[Hp - 296] = R5;
           P64[Hp - 288] = R6;
           P64[Hp - 280] = _s3XDE::P64;
           P64[Hp - 272] = _s3XDF::P64;
           P64[Hp - 264] = _s3XDG::P64;
           P64[Hp - 256] = _s3XDH::P64;
           P64[Hp - 248] = _s3XDI::P64;
           P64[Hp - 240] = _s3XDJ::P64;
           I64[Hp - 232] = sat_s3XDL_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           P64[Hp - 192] = R5;
           P64[Hp - 184] = R6;
           P64[Hp - 176] = _s3XDE::P64;
           P64[Hp - 168] = _s3XDF::P64;
           P64[Hp - 160] = _s3XDG::P64;
           P64[Hp - 152] = _s3XDH::P64;
           P64[Hp - 144] = _s3XDI::P64;
           P64[Hp - 136] = _s3XDJ::P64;
           I64[Hp - 128] = sat_s3XDK_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = _s3XDE::P64;
           P64[Hp - 72] = _s3XDF::P64;
           P64[Hp - 64] = _s3XDG::P64;
           P64[Hp - 56] = _s3XDH::P64;
           P64[Hp - 48] = _s3XDI::P64;
           P64[Hp - 40] = _s3XDJ::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 127;
           P64[Hp - 16] = Hp - 232;
           P64[Hp - 8] = Hp - 326;
           P64[Hp] = Hp - 432;
           R1 = Hp - 31;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 47244640256;
         const S3Y0k_srt+504;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.799225101 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZPj: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2,
                                                                R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s3XDY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZPs: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3ZPt; else goto c3ZPu;
       c3ZPt: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZPu: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = P64[R1 + 78];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XDY_info" {
     sat_s3XDY_info:
         const sat_s3XDY_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+544;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4,
                                                        R5, R6]
         { []
         }
     {offset
       c3ZPv: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ZPz; else goto c3ZPy;
       c3ZPz: // global
           HpAlloc = 88;
           R1 = GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3ZPy: // global
           I64[Hp - 80] = sat_s3XDY_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R2 = Hp - 78;
           Sp = Sp + 40;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 108086395351859214;
         const 42949672960;
         const S3Y0k_srt+360;
         const 10;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.80759314 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZPW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 56, res: 0, upd: 8;
     }
 },
 sat_s3XEa_entry() //  [R1]
         { []
         }
     {offset
       c3ZQ4: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3ZQ5; else goto c3ZQ6;
       c3ZQ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZQ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 72] = P64[R1 + 56];
           P64[Sp - 64] = P64[R1 + 64];
           P64[Sp - 56] = P64[R1 + 72];
           P64[Sp - 48] = P64[R1 + 80];
           P64[Sp - 40] = P64[R1 + 88];
           P64[Sp - 32] = P64[R1 + 96];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 72;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 80, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XEa_info" {
     sat_s3XEa_info:
         const sat_s3XEa_entry;
         const 11;
         const 4294967311;
         const S3Y0k_srt+544;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c3ZQ7: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c3ZQb; else goto c3ZQa;
       c3ZQb: // global
           HpAlloc = 104;
           R1 = GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 96, res: 0, upd: 8;
       c3ZQa: // global
           I64[Hp - 96] = sat_s3XEa_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R2 = Hp - 96;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 47244640256;
         const S3Y0k_srt+544;
         const 11;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.817756895 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3ZQE: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s3XEl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZQR: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3ZQS; else goto c3ZQT;
       c3ZQS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZQT: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = P64[R1 + 78];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XEl_info" {
     sat_s3XEl_info:
         const sat_s3XEl_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+544;
 },
 sat_s3XEm_entry() //  [R1]
         { []
         }
     {offset
       c3ZQU: // global
           _s3XEm::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZQV; else goto c3ZQW;
       c3ZQW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ZQY; else goto c3ZQX;
       c3ZQY: // global
           HpAlloc = 88;
           goto c3ZQV;
       c3ZQV: // global
           R1 = _s3XEm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZQX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XEm::P64;
           _s3XEb::P64 = P64[_s3XEm::P64 + 16];
           _s3XEc::P64 = P64[_s3XEm::P64 + 24];
           _s3XEd::P64 = P64[_s3XEm::P64 + 32];
           _s3XEe::P64 = P64[_s3XEm::P64 + 40];
           _s3XEf::P64 = P64[_s3XEm::P64 + 48];
           _s3XEg::P64 = P64[_s3XEm::P64 + 56];
           _s3XEh::P64 = P64[_s3XEm::P64 + 64];
           _s3XEi::P64 = P64[_s3XEm::P64 + 72];
           _s3XEj::P64 = P64[_s3XEm::P64 + 80];
           _s3XEk::P64 = P64[_s3XEm::P64 + 88];
           I64[Hp - 80] = sat_s3XEl_info;
           P64[Hp - 72] = _s3XEb::P64;
           P64[Hp - 64] = _s3XEc::P64;
           P64[Hp - 56] = _s3XEd::P64;
           P64[Hp - 48] = _s3XEe::P64;
           P64[Hp - 40] = _s3XEf::P64;
           P64[Hp - 32] = _s3XEg::P64;
           P64[Hp - 24] = _s3XEh::P64;
           P64[Hp - 16] = _s3XEi::P64;
           P64[Hp - 8] = _s3XEj::P64;
           P64[Hp] = _s3XEk::P64;
           R2 = Hp - 78;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XEm_info" {
     sat_s3XEm_info:
         const sat_s3XEm_entry;
         const 10;
         const 36028801313931279;
         const S3Y0k_srt+360;
 },
 GHC.Read.$fRead(,,,,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c3ZQZ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3ZR3; else goto c3ZR2;
       c3ZR3: // global
           HpAlloc = 96;
           R1 = GHC.Read.$fRead(,,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3ZR2: // global
           I64[Hp - 88] = sat_s3XEm_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R2 = Hp - 88;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,,)_$creadList_entry;
         const 0;
         const 324259177465643022;
         const 42949672960;
         const S3Y0k_srt+360;
         const 10;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.830860672 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3ZRB: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,,)_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s3XEA_entry() //  [R1]
         { []
         }
     {offset
       c3ZRJ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3ZRK; else goto c3ZRL;
       c3ZRK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZRL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = P64[R1 + 88];
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_entry(R6,
                                                                R5,
                                                                R4,
                                                                R3,
                                                                R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XEA_info" {
     sat_s3XEA_info:
         const sat_s3XEA_entry;
         const 10;
         const 4294967311;
         const S3Y0k_srt+552;
 },
 sat_s3XEz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZRR: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3ZRS; else goto c3ZRT;
       c3ZRS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZRT: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 56] = P64[R1 + 46];
           P64[Sp - 48] = P64[R1 + 54];
           P64[Sp - 40] = P64[R1 + 62];
           P64[Sp - 32] = P64[R1 + 70];
           P64[Sp - 24] = P64[R1 + 78];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)1_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XEz_info" {
     sat_s3XEz_info:
         const sat_s3XEz_entry;
         const 10;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+544;
 },
 sat_s3XEy_entry() //  [R1]
         { []
         }
     {offset
       c3ZRY: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3ZRZ; else goto c3ZS0;
       c3ZRZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZS0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = P64[R1 + 88];
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadList_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XEy_info" {
     sat_s3XEy_info:
         const sat_s3XEy_entry;
         const 10;
         const 4294967311;
         const S3Y0k_srt+568;
 },
 sat_s3XEx_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZS6: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3ZS7; else goto c3ZS8;
       c3ZS7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZS8: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 48] = P64[R1 + 47];
           P64[Sp - 40] = P64[R1 + 55];
           P64[Sp - 32] = P64[R1 + 63];
           P64[Sp - 24] = P64[R1 + 71];
           P64[Sp - 16] = P64[R1 + 79];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XEx_info" {
     sat_s3XEx_info:
         const sat_s3XEx_entry;
         const 10;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+560;
 },
 GHC.Read.$fRead(,,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZSa: // global
           Hp = Hp + 408;
           if (Hp > HpLim) (likely: False) goto c3ZSe; else goto c3ZSd;
       c3ZSe: // global
           HpAlloc = 408;
           R1 = GHC.Read.$fRead(,,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3ZSd: // global
           I64[Hp - 400] = sat_s3XEA_info;
           P64[Hp - 384] = R2;
           P64[Hp - 376] = R3;
           P64[Hp - 368] = R4;
           P64[Hp - 360] = R5;
           P64[Hp - 352] = R6;
           _s3XEs::P64 = P64[Sp];
           P64[Hp - 344] = _s3XEs::P64;
           _s3XEt::P64 = P64[Sp + 8];
           P64[Hp - 336] = _s3XEt::P64;
           _s3XEu::P64 = P64[Sp + 16];
           P64[Hp - 328] = _s3XEu::P64;
           _s3XEv::P64 = P64[Sp + 24];
           P64[Hp - 320] = _s3XEv::P64;
           _s3XEw::P64 = P64[Sp + 32];
           P64[Hp - 312] = _s3XEw::P64;
           I64[Hp - 304] = sat_s3XEz_info;
           P64[Hp - 296] = R2;
           P64[Hp - 288] = R3;
           P64[Hp - 280] = R4;
           P64[Hp - 272] = R5;
           P64[Hp - 264] = R6;
           P64[Hp - 256] = _s3XEs::P64;
           P64[Hp - 248] = _s3XEt::P64;
           P64[Hp - 240] = _s3XEu::P64;
           P64[Hp - 232] = _s3XEv::P64;
           P64[Hp - 224] = _s3XEw::P64;
           I64[Hp - 216] = sat_s3XEy_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           P64[Hp - 184] = R4;
           P64[Hp - 176] = R5;
           P64[Hp - 168] = R6;
           P64[Hp - 160] = _s3XEs::P64;
           P64[Hp - 152] = _s3XEt::P64;
           P64[Hp - 144] = _s3XEu::P64;
           P64[Hp - 136] = _s3XEv::P64;
           P64[Hp - 128] = _s3XEw::P64;
           I64[Hp - 120] = sat_s3XEx_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = _s3XEs::P64;
           P64[Hp - 64] = _s3XEt::P64;
           P64[Hp - 56] = _s3XEu::P64;
           P64[Hp - 48] = _s3XEv::P64;
           P64[Hp - 40] = _s3XEw::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 216;
           P64[Hp - 8] = Hp - 302;
           P64[Hp] = Hp - 400;
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 42949672960;
         const S3Y0k_srt+544;
         const 10;
         const GHC.Read.$fRead(,,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.845843493 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZT8: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s3XEK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZTh: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3ZTi; else goto c3ZTj;
       c3ZTi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZTj: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = P64[R1 + 70];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XEK_info" {
     sat_s3XEK_info:
         const sat_s3XEK_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+584;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       c3ZTk: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3ZTo; else goto c3ZTn;
       c3ZTo: // global
           HpAlloc = 80;
           R1 = GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3ZTn: // global
           I64[Hp - 72] = sat_s3XEK_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 70;
           Sp = Sp + 32;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 3458764518115508238;
         const 38654705664;
         const S3Y0k_srt+360;
         const 9;
         const GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.855260308 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZTJ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s3XEV_entry() //  [R1]
         { []
         }
     {offset
       c3ZTR: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3ZTS; else goto c3ZTT;
       c3ZTS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZTT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 64] = P64[R1 + 56];
           P64[Sp - 56] = P64[R1 + 64];
           P64[Sp - 48] = P64[R1 + 72];
           P64[Sp - 40] = P64[R1 + 80];
           P64[Sp - 32] = P64[R1 + 88];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 64;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 72, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XEV_info" {
     sat_s3XEV_info:
         const sat_s3XEV_entry;
         const 10;
         const 4294967311;
         const S3Y0k_srt+584;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c3ZTU: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3ZTY; else goto c3ZTX;
       c3ZTY: // global
           HpAlloc = 96;
           R1 = GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c3ZTX: // global
           I64[Hp - 88] = sat_s3XEV_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R2 = Hp - 88;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 42949672960;
         const S3Y0k_srt+584;
         const 10;
         const GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.864446382 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3ZUp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)_$creadList_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s3XF5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZUC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3ZUD; else goto c3ZUE;
       c3ZUD: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZUE: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = P64[R1 + 70];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XF5_info" {
     sat_s3XF5_info:
         const sat_s3XF5_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+584;
 },
 sat_s3XF6_entry() //  [R1]
         { []
         }
     {offset
       c3ZUF: // global
           _s3XF6::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZUG; else goto c3ZUH;
       c3ZUH: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3ZUJ; else goto c3ZUI;
       c3ZUJ: // global
           HpAlloc = 80;
           goto c3ZUG;
       c3ZUG: // global
           R1 = _s3XF6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZUI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XF6::P64;
           _s3XEW::P64 = P64[_s3XF6::P64 + 16];
           _s3XEX::P64 = P64[_s3XF6::P64 + 24];
           _s3XEY::P64 = P64[_s3XF6::P64 + 32];
           _s3XEZ::P64 = P64[_s3XF6::P64 + 40];
           _s3XF0::P64 = P64[_s3XF6::P64 + 48];
           _s3XF1::P64 = P64[_s3XF6::P64 + 56];
           _s3XF2::P64 = P64[_s3XF6::P64 + 64];
           _s3XF3::P64 = P64[_s3XF6::P64 + 72];
           _s3XF4::P64 = P64[_s3XF6::P64 + 80];
           I64[Hp - 72] = sat_s3XF5_info;
           P64[Hp - 64] = _s3XEW::P64;
           P64[Hp - 56] = _s3XEX::P64;
           P64[Hp - 48] = _s3XEY::P64;
           P64[Hp - 40] = _s3XEZ::P64;
           P64[Hp - 32] = _s3XF0::P64;
           P64[Hp - 24] = _s3XF1::P64;
           P64[Hp - 16] = _s3XF2::P64;
           P64[Hp - 8] = _s3XF3::P64;
           P64[Hp] = _s3XF4::P64;
           R2 = Hp - 70;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XF6_info" {
     sat_s3XF6_info:
         const sat_s3XF6_entry;
         const 9;
         const 1152921508901814287;
         const S3Y0k_srt+360;
 },
 GHC.Read.$fRead(,,,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c3ZUK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ZUO; else goto c3ZUN;
       c3ZUO: // global
           HpAlloc = 88;
           R1 = GHC.Read.$fRead(,,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3ZUN: // global
           I64[Hp - 80] = sat_s3XF6_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,,)_$creadList_entry;
         const 0;
         const 10376293545756590094;
         const 38654705664;
         const S3Y0k_srt+360;
         const 9;
         const GHC.Read.$fRead(,,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.877123446 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3ZVk: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,,)_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2,
                                                R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s3XFj_entry() //  [R1]
         { []
         }
     {offset
       c3ZVs: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3ZVt; else goto c3ZVu;
       c3ZVt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZVu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XFj_info" {
     sat_s3XFj_info:
         const sat_s3XFj_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+592;
 },
 sat_s3XFi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZVA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3ZVB; else goto c3ZVC;
       c3ZVB: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZVC: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 48] = P64[R1 + 46];
           P64[Sp - 40] = P64[R1 + 54];
           P64[Sp - 32] = P64[R1 + 62];
           P64[Sp - 24] = P64[R1 + 70];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)1_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 56, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XFi_info" {
     sat_s3XFi_info:
         const sat_s3XFi_entry;
         const 9;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+584;
 },
 sat_s3XFh_entry() //  [R1]
         { []
         }
     {offset
       c3ZVH: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c3ZVI; else goto c3ZVJ;
       c3ZVI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZVJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = P64[R1 + 80];
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,,,)_$creadList_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XFh_info" {
     sat_s3XFh_info:
         const sat_s3XFh_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+608;
 },
 sat_s3XFg_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZVP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZVQ; else goto c3ZVR;
       c3ZVQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZVR: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 40] = P64[R1 + 47];
           P64[Sp - 32] = P64[R1 + 55];
           P64[Sp - 24] = P64[R1 + 63];
           P64[Sp - 16] = P64[R1 + 71];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XFg_info" {
     sat_s3XFg_info:
         const sat_s3XFg_entry;
         const 9;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+600;
 },
 GHC.Read.$fRead(,,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZVT: // global
           Hp = Hp + 376;
           if (Hp > HpLim) (likely: False) goto c3ZVX; else goto c3ZVW;
       c3ZVX: // global
           HpAlloc = 376;
           R1 = GHC.Read.$fRead(,,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3ZVW: // global
           I64[Hp - 368] = sat_s3XFj_info;
           P64[Hp - 352] = R2;
           P64[Hp - 344] = R3;
           P64[Hp - 336] = R4;
           P64[Hp - 328] = R5;
           P64[Hp - 320] = R6;
           _s3XFc::P64 = P64[Sp];
           P64[Hp - 312] = _s3XFc::P64;
           _s3XFd::P64 = P64[Sp + 8];
           P64[Hp - 304] = _s3XFd::P64;
           _s3XFe::P64 = P64[Sp + 16];
           P64[Hp - 296] = _s3XFe::P64;
           _s3XFf::P64 = P64[Sp + 24];
           P64[Hp - 288] = _s3XFf::P64;
           I64[Hp - 280] = sat_s3XFi_info;
           P64[Hp - 272] = R2;
           P64[Hp - 264] = R3;
           P64[Hp - 256] = R4;
           P64[Hp - 248] = R5;
           P64[Hp - 240] = R6;
           P64[Hp - 232] = _s3XFc::P64;
           P64[Hp - 224] = _s3XFd::P64;
           P64[Hp - 216] = _s3XFe::P64;
           P64[Hp - 208] = _s3XFf::P64;
           I64[Hp - 200] = sat_s3XFh_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           P64[Hp - 168] = R4;
           P64[Hp - 160] = R5;
           P64[Hp - 152] = R6;
           P64[Hp - 144] = _s3XFc::P64;
           P64[Hp - 136] = _s3XFd::P64;
           P64[Hp - 128] = _s3XFe::P64;
           P64[Hp - 120] = _s3XFf::P64;
           I64[Hp - 112] = sat_s3XFg_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = _s3XFc::P64;
           P64[Hp - 56] = _s3XFd::P64;
           P64[Hp - 48] = _s3XFe::P64;
           P64[Hp - 40] = _s3XFf::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 111;
           P64[Hp - 16] = Hp - 200;
           P64[Hp - 8] = Hp - 278;
           P64[Hp] = Hp - 368;
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 38654705664;
         const S3Y0k_srt+584;
         const 9;
         const GHC.Read.$fRead(,,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.892570107 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZWN: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadListPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s3XFs_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZWW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZWX; else goto c3ZWY;
       c3ZWX: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZWY: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = P64[R1 + 62];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XFs_info" {
     sat_s3XFs_info:
         const sat_s3XFs_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+624;
 },
 section ""relreadonly" . u3ZX4_srtd" {
     u3ZX4_srtd:
         const S3Y0k_srt+360;
         const 35;
         const 25769803777;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c3ZWZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3ZX3; else goto c3ZX2;
       c3ZX3: // global
           HpAlloc = 72;
           R1 = GHC.Read.$fRead(,,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3ZX2: // global
           I64[Hp - 64] = sat_s3XFs_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 62;
           Sp = Sp + 24;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const u3ZX4_srtd;
         const 8;
         const GHC.Read.$fRead(,,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.901282393 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c3ZXo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2,
                                                           R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_s3XFC_entry() //  [R1]
         { []
         }
     {offset
       c3ZXw: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c3ZXx; else goto c3ZXy;
       c3ZXx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZXy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 56] = P64[R1 + 56];
           P64[Sp - 48] = P64[R1 + 64];
           P64[Sp - 40] = P64[R1 + 72];
           P64[Sp - 32] = P64[R1 + 80];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 56;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 64, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XFC_info" {
     sat_s3XFC_info:
         const sat_s3XFC_entry;
         const 9;
         const 4294967311;
         const S3Y0k_srt+624;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c3ZXz: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ZXD; else goto c3ZXC;
       c3ZXD: // global
           HpAlloc = 88;
           R1 = GHC.Read.$fRead(,,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c3ZXC: // global
           I64[Hp - 80] = sat_s3XFC_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 80;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 38654705664;
         const S3Y0k_srt+624;
         const 9;
         const GHC.Read.$fRead(,,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.910459593 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c3ZY2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadList_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s3XFL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZYf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZYg; else goto c3ZYh;
       c3ZYg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZYh: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = P64[R1 + 62];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XFL_info" {
     sat_s3XFL_info:
         const sat_s3XFL_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+624;
 },
 section ""relreadonly" . u3ZYs_srtd" {
     u3ZYs_srtd:
         const S3Y0k_srt+360;
         const 34;
         const 8589934593;
 },
 sat_s3XFM_entry() //  [R1]
         { []
         }
     {offset
       c3ZYi: // global
           _s3XFM::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZYj; else goto c3ZYk;
       c3ZYk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3ZYm; else goto c3ZYl;
       c3ZYm: // global
           HpAlloc = 72;
           goto c3ZYj;
       c3ZYj: // global
           R1 = _s3XFM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZYl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XFM::P64;
           _s3XFD::P64 = P64[_s3XFM::P64 + 16];
           _s3XFE::P64 = P64[_s3XFM::P64 + 24];
           _s3XFF::P64 = P64[_s3XFM::P64 + 32];
           _s3XFG::P64 = P64[_s3XFM::P64 + 40];
           _s3XFH::P64 = P64[_s3XFM::P64 + 48];
           _s3XFI::P64 = P64[_s3XFM::P64 + 56];
           _s3XFJ::P64 = P64[_s3XFM::P64 + 64];
           _s3XFK::P64 = P64[_s3XFM::P64 + 72];
           I64[Hp - 64] = sat_s3XFL_info;
           P64[Hp - 56] = _s3XFD::P64;
           P64[Hp - 48] = _s3XFE::P64;
           P64[Hp - 40] = _s3XFF::P64;
           P64[Hp - 32] = _s3XFG::P64;
           P64[Hp - 24] = _s3XFH::P64;
           P64[Hp - 16] = _s3XFI::P64;
           P64[Hp - 8] = _s3XFJ::P64;
           P64[Hp] = _s3XFK::P64;
           R2 = Hp - 62;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XFM_info" {
     sat_s3XFM_info:
         const sat_s3XFM_entry;
         const 8;
         const 18446744069414584335;
         const u3ZYs_srtd;
 },
 section ""relreadonly" . u3ZYt_srtd" {
     u3ZYt_srtd:
         const S3Y0k_srt+360;
         const 37;
         const 77309411329;
 },
 GHC.Read.$fRead(,,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c3ZYn: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c3ZYr; else goto c3ZYq;
       c3ZYr: // global
           HpAlloc = 80;
           R1 = GHC.Read.$fRead(,,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3ZYq: // global
           I64[Hp - 72] = sat_s3XFM_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 72;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 34359738368;
         const u3ZYt_srtd;
         const 8;
         const GHC.Read.$fRead(,,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.925141571 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c3ZYZ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,,)_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s3XFY_entry() //  [R1]
         { []
         }
     {offset
       c3ZZ7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZZ8; else goto c3ZZ9;
       c3ZZ8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZZ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadListPrec_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XFY_info" {
     sat_s3XFY_info:
         const sat_s3XFY_entry;
         const 8;
         const 4294967311;
         const S3Y0k_srt+632;
 },
 sat_s3XFX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3ZZf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZZg; else goto c3ZZh;
       c3ZZg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3ZZh: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 40] = P64[R1 + 46];
           P64[Sp - 32] = P64[R1 + 54];
           P64[Sp - 24] = P64[R1 + 62];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)1_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XFX_info" {
     sat_s3XFX_info:
         const sat_s3XFX_entry;
         const 8;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+624;
 },
 sat_s3XFW_entry() //  [R1]
         { []
         }
     {offset
       c3ZZm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ZZn; else goto c3ZZo;
       c3ZZn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3ZZo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = P64[R1 + 72];
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,,,)_$creadList_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XFW_info" {
     sat_s3XFW_info:
         const sat_s3XFW_entry;
         const 8;
         const 4294967311;
         const S3Y0k_srt+648;
 },
 sat_s3XFV_entry() //  [R1, R2]
         { []
         }
     {offset
       c3ZZu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3ZZv; else goto c3ZZw;
       c3ZZv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ZZw: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 32] = P64[R1 + 47];
           P64[Sp - 24] = P64[R1 + 55];
           P64[Sp - 16] = P64[R1 + 63];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,,)_$creadsPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XFV_info" {
     sat_s3XFV_info:
         const sat_s3XFV_entry;
         const 8;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+640;
 },
 GHC.Read.$fRead(,,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3ZZy: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto c3ZZC; else goto c3ZZB;
       c3ZZC: // global
           HpAlloc = 344;
           R1 = GHC.Read.$fRead(,,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c3ZZB: // global
           I64[Hp - 336] = sat_s3XFY_info;
           P64[Hp - 320] = R2;
           P64[Hp - 312] = R3;
           P64[Hp - 304] = R4;
           P64[Hp - 296] = R5;
           P64[Hp - 288] = R6;
           _s3XFS::P64 = P64[Sp];
           P64[Hp - 280] = _s3XFS::P64;
           _s3XFT::P64 = P64[Sp + 8];
           P64[Hp - 272] = _s3XFT::P64;
           _s3XFU::P64 = P64[Sp + 16];
           P64[Hp - 264] = _s3XFU::P64;
           I64[Hp - 256] = sat_s3XFX_info;
           P64[Hp - 248] = R2;
           P64[Hp - 240] = R3;
           P64[Hp - 232] = R4;
           P64[Hp - 224] = R5;
           P64[Hp - 216] = R6;
           P64[Hp - 208] = _s3XFS::P64;
           P64[Hp - 200] = _s3XFT::P64;
           P64[Hp - 192] = _s3XFU::P64;
           I64[Hp - 184] = sat_s3XFW_info;
           P64[Hp - 168] = R2;
           P64[Hp - 160] = R3;
           P64[Hp - 152] = R4;
           P64[Hp - 144] = R5;
           P64[Hp - 136] = R6;
           P64[Hp - 128] = _s3XFS::P64;
           P64[Hp - 120] = _s3XFT::P64;
           P64[Hp - 112] = _s3XFU::P64;
           I64[Hp - 104] = sat_s3XFV_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           P64[Hp - 56] = _s3XFS::P64;
           P64[Hp - 48] = _s3XFT::P64;
           P64[Hp - 40] = _s3XFU::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 103;
           P64[Hp - 16] = Hp - 184;
           P64[Hp - 8] = Hp - 254;
           P64[Hp] = Hp - 336;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 34359738368;
         const S3Y0k_srt+624;
         const 8;
         const GHC.Read.$fRead(,,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.940677014 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,,)_$creadListPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)_$creadListPrec_slow() //  [R1]
         { []
         }
     {offset
       c400o: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)_$creadListPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3XG6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c400x: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c400y; else goto c400z;
       c400y: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c400z: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = P64[R1 + 54];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XG6_info" {
     sat_s3XG6_info:
         const sat_s3XG6_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+664;
 },
 section ""relreadonly" . u400F_srtd" {
     u400F_srtd:
         const S3Y0k_srt+360;
         const 40;
         const 824633720833;
 },
 GHC.Read.$fRead(,,,,,,)_$creadListPrec_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c400A: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c400E; else goto c400D;
       c400E: // global
           HpAlloc = 64;
           R1 = GHC.Read.$fRead(,,,,,,)_$creadListPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c400D: // global
           I64[Hp - 56] = sat_s3XG6_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 54;
           Sp = Sp + 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 30064771072;
         const u400F_srtd;
         const 7;
         const GHC.Read.$fRead(,,,,,,)_$creadListPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.949605466 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c400X: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)_$creadsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s3XGf_entry() //  [R1]
         { []
         }
     {offset
       c4015: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c4016; else goto c4017;
       c4016: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4017: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 48] = P64[R1 + 56];
           P64[Sp - 40] = P64[R1 + 64];
           P64[Sp - 32] = P64[R1 + 72];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 48;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XGf_info" {
     sat_s3XGf_info:
         const sat_s3XGf_entry;
         const 8;
         const 4294967311;
         const S3Y0k_srt+664;
 },
 GHC.Read.$fRead(,,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c4018: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c401c; else goto c401b;
       c401c: // global
           HpAlloc = 80;
           R1 = GHC.Read.$fRead(,,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c401b: // global
           I64[Hp - 72] = sat_s3XGf_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = P64[Sp];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 72;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 34359738368;
         const S3Y0k_srt+664;
         const 8;
         const GHC.Read.$fRead(,,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.958522147 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,,)_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)_$creadList_slow() //  [R1]
         { []
         }
     {offset
       c401z: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)_$creadList_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3XGn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c401M: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c401N; else goto c401O;
       c401N: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c401O: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = P64[R1 + 54];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XGn_info" {
     sat_s3XGn_info:
         const sat_s3XGn_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+664;
 },
 section ""relreadonly" . u401Z_srtd" {
     u401Z_srtd:
         const S3Y0k_srt+360;
         const 39;
         const 274877906945;
 },
 sat_s3XGo_entry() //  [R1]
         { []
         }
     {offset
       c401P: // global
           _s3XGo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c401Q; else goto c401R;
       c401R: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c401T; else goto c401S;
       c401T: // global
           HpAlloc = 64;
           goto c401Q;
       c401Q: // global
           R1 = _s3XGo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c401S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XGo::P64;
           _s3XGg::P64 = P64[_s3XGo::P64 + 16];
           _s3XGh::P64 = P64[_s3XGo::P64 + 24];
           _s3XGi::P64 = P64[_s3XGo::P64 + 32];
           _s3XGj::P64 = P64[_s3XGo::P64 + 40];
           _s3XGk::P64 = P64[_s3XGo::P64 + 48];
           _s3XGl::P64 = P64[_s3XGo::P64 + 56];
           _s3XGm::P64 = P64[_s3XGo::P64 + 64];
           I64[Hp - 56] = sat_s3XGn_info;
           P64[Hp - 48] = _s3XGg::P64;
           P64[Hp - 40] = _s3XGh::P64;
           P64[Hp - 32] = _s3XGi::P64;
           P64[Hp - 24] = _s3XGj::P64;
           P64[Hp - 16] = _s3XGk::P64;
           P64[Hp - 8] = _s3XGl::P64;
           P64[Hp] = _s3XGm::P64;
           R2 = Hp - 54;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XGo_info" {
     sat_s3XGo_info:
         const sat_s3XGo_entry;
         const 7;
         const 18446744069414584335;
         const u401Z_srtd;
 },
 section ""relreadonly" . u4020_srtd" {
     u4020_srtd:
         const S3Y0k_srt+360;
         const 42;
         const 2473901162497;
 },
 GHC.Read.$fRead(,,,,,,)_$creadList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c401U: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c401Y; else goto c401X;
       c401Y: // global
           HpAlloc = 72;
           R1 = GHC.Read.$fRead(,,,,,,)_$creadList_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c401X: // global
           I64[Hp - 64] = sat_s3XGo_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 30064771072;
         const u4020_srtd;
         const 7;
         const GHC.Read.$fRead(,,,,,,)_$creadList_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.973056694 UTC

[section ""data" . GHC.Read.$fRead(,,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,,)_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,,)_slow() //  [R1]
         { []
         }
     {offset
       c402u: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,,)_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3XGz_entry() //  [R1]
         { []
         }
     {offset
       c402C: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c402D; else goto c402E;
       c402D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c402E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)_$creadListPrec_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XGz_info" {
     sat_s3XGz_info:
         const sat_s3XGz_entry;
         const 7;
         const 4294967311;
         const S3Y0k_srt+672;
 },
 sat_s3XGy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c402K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c402L; else goto c402M;
       c402L: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c402M: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 46];
           P64[Sp - 24] = P64[R1 + 54];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)1_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XGy_info" {
     sat_s3XGy_info:
         const sat_s3XGy_entry;
         const 7;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+664;
 },
 sat_s3XGx_entry() //  [R1]
         { []
         }
     {offset
       c402R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c402S; else goto c402T;
       c402S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c402T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = P64[R1 + 64];
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,,,)_$creadList_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XGx_info" {
     sat_s3XGx_info:
         const sat_s3XGx_entry;
         const 7;
         const 4294967311;
         const S3Y0k_srt+688;
 },
 sat_s3XGw_entry() //  [R1, R2]
         { []
         }
     {offset
       c402Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4030; else goto c4031;
       c4030: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4031: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 55];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,,)_$creadsPrec_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XGw_info" {
     sat_s3XGw_info:
         const sat_s3XGw_entry;
         const 7;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+680;
 },
 GHC.Read.$fRead(,,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c4033: // global
           Hp = Hp + 312;
           if (Hp > HpLim) (likely: False) goto c4037; else goto c4036;
       c4037: // global
           HpAlloc = 312;
           R1 = GHC.Read.$fRead(,,,,,,)_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c4036: // global
           I64[Hp - 304] = sat_s3XGz_info;
           P64[Hp - 288] = R2;
           P64[Hp - 280] = R3;
           P64[Hp - 272] = R4;
           P64[Hp - 264] = R5;
           P64[Hp - 256] = R6;
           _s3XGu::P64 = P64[Sp];
           P64[Hp - 248] = _s3XGu::P64;
           _s3XGv::P64 = P64[Sp + 8];
           P64[Hp - 240] = _s3XGv::P64;
           I64[Hp - 232] = sat_s3XGy_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           P64[Hp - 200] = R5;
           P64[Hp - 192] = R6;
           P64[Hp - 184] = _s3XGu::P64;
           P64[Hp - 176] = _s3XGv::P64;
           I64[Hp - 168] = sat_s3XGx_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           P64[Hp - 120] = R6;
           P64[Hp - 112] = _s3XGu::P64;
           P64[Hp - 104] = _s3XGv::P64;
           I64[Hp - 96] = sat_s3XGw_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = _s3XGu::P64;
           P64[Hp - 40] = _s3XGv::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 95;
           P64[Hp - 16] = Hp - 168;
           P64[Hp - 8] = Hp - 230;
           P64[Hp] = Hp - 304;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,,)_info" {
     GHC.Read.$fRead(,,,,,,)_info:
         const GHC.Read.$fRead(,,,,,,)_entry;
         const 0;
         const 133143986190;
         const 30064771072;
         const S3Y0k_srt+664;
         const 7;
         const GHC.Read.$fRead(,,,,,,)_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.988100745 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,,)_$creadListPrec_info;
         const 0;
 },
 sat_s3XGG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c403X: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c403Y; else goto c403Z;
       c403Y: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c403Z: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XGG_info" {
     sat_s3XGG_info:
         const sat_s3XGG_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+704;
 },
 section ""relreadonly" . u4045_srtd" {
     u4045_srtd:
         const S3Y0k_srt+360;
         const 45;
         const 26388279066625;
 },
 GHC.Read.$fRead(,,,,,)_$creadListPrec_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       c4040: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c4044; else goto c4043;
       c4044: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,,)_$creadListPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c4043: // global
           I64[Hp - 48] = sat_s3XGG_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R2 = Hp - 46;
           Sp = Sp + 8;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 25769803802;
         const u4045_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:52.995897029 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,,)_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fRead(,,,,,)_$creadsPrec_slow() //  [R1]
         { []
         }
     {offset
       c404j: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Read.$fRead(,,,,,)_$creadsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s3XGO_entry() //  [R1]
         { []
         }
     {offset
       c404r: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c404s; else goto c404t;
       c404s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c404t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 56];
           P64[Sp - 32] = P64[R1 + 64];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XGO_info" {
     sat_s3XGO_info:
         const sat_s3XGO_entry;
         const 7;
         const 4294967311;
         const S3Y0k_srt+704;
 },
 GHC.Read.$fRead(,,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c404u: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c404y; else goto c404x;
       c404y: // global
           HpAlloc = 72;
           R1 = GHC.Read.$fRead(,,,,,)_$creadsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c404x: // global
           I64[Hp - 64] = sat_s3XGO_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 64;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 30064771072;
         const S3Y0k_srt+704;
         const 7;
         const GHC.Read.$fRead(,,,,,)_$creadsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.004429513 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,,)_$creadList_info;
         const 0;
 },
 sat_s3XGV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c4055: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4056; else goto c4057;
       c4056: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4057: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XGV_info" {
     sat_s3XGV_info:
         const sat_s3XGV_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+704;
 },
 section ""relreadonly" . u405i_srtd" {
     u405i_srtd:
         const S3Y0k_srt+360;
         const 44;
         const 8796093022209;
 },
 sat_s3XGW_entry() //  [R1]
         { []
         }
     {offset
       c4058: // global
           _s3XGW::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c4059; else goto c405a;
       c405a: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c405c; else goto c405b;
       c405c: // global
           HpAlloc = 56;
           goto c4059;
       c4059: // global
           R1 = _s3XGW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c405b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XGW::P64;
           _s3XGP::P64 = P64[_s3XGW::P64 + 16];
           _s3XGQ::P64 = P64[_s3XGW::P64 + 24];
           _s3XGR::P64 = P64[_s3XGW::P64 + 32];
           _s3XGS::P64 = P64[_s3XGW::P64 + 40];
           _s3XGT::P64 = P64[_s3XGW::P64 + 48];
           _s3XGU::P64 = P64[_s3XGW::P64 + 56];
           I64[Hp - 48] = sat_s3XGV_info;
           P64[Hp - 40] = _s3XGP::P64;
           P64[Hp - 32] = _s3XGQ::P64;
           P64[Hp - 24] = _s3XGR::P64;
           P64[Hp - 16] = _s3XGS::P64;
           P64[Hp - 8] = _s3XGT::P64;
           P64[Hp] = _s3XGU::P64;
           R2 = Hp - 46;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XGW_info" {
     sat_s3XGW_info:
         const sat_s3XGW_entry;
         const 6;
         const 18446744069414584335;
         const u405i_srtd;
 },
 section ""relreadonly" . u405j_srtd" {
     u405j_srtd:
         const S3Y0k_srt+360;
         const 47;
         const 79164837199873;
 },
 GHC.Read.$fRead(,,,,,)_$creadList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c405d: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c405h; else goto c405g;
       c405h: // global
           HpAlloc = 64;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,,)_$creadList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c405g: // global
           I64[Hp - 56] = sat_s3XGW_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R2 = Hp - 56;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 25769803802;
         const u405j_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.01743091 UTC

[section ""data" . GHC.Read.$fRead(,,,,,)_closure" {
     GHC.Read.$fRead(,,,,,)_closure:
         const GHC.Read.$fRead(,,,,,)_info;
         const 0;
 },
 sat_s3XH6_entry() //  [R1]
         { []
         }
     {offset
       c405Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c405R; else goto c405S;
       c405R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c405S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)_$creadListPrec_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XH6_info" {
     sat_s3XH6_info:
         const sat_s3XH6_entry;
         const 6;
         const 4294967311;
         const S3Y0k_srt+712;
 },
 sat_s3XH5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c405Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c405Z; else goto c4060;
       c405Z: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4060: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 46];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)1_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XH5_info" {
     sat_s3XH5_info:
         const sat_s3XH5_entry;
         const 6;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+704;
 },
 sat_s3XH4_entry() //  [R1]
         { []
         }
     {offset
       c4065: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4066; else goto c4067;
       c4066: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4067: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 56];
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,,,)_$creadList_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XH4_info" {
     sat_s3XH4_info:
         const sat_s3XH4_entry;
         const 6;
         const 4294967311;
         const S3Y0k_srt+728;
 },
 sat_s3XH3_entry() //  [R1, R2]
         { []
         }
     {offset
       c406d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c406e; else goto c406f;
       c406e: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c406f: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,,)_$creadsPrec_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XH3_info" {
     sat_s3XH3_info:
         const sat_s3XH3_entry;
         const 6;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+720;
 },
 GHC.Read.$fRead(,,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c406h: // global
           Hp = Hp + 280;
           if (Hp > HpLim) (likely: False) goto c406l; else goto c406k;
       c406l: // global
           HpAlloc = 280;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c406k: // global
           I64[Hp - 272] = sat_s3XH6_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           P64[Hp - 224] = R6;
           _s3XH2::P64 = P64[Sp];
           P64[Hp - 216] = _s3XH2::P64;
           I64[Hp - 208] = sat_s3XH5_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           P64[Hp - 184] = R4;
           P64[Hp - 176] = R5;
           P64[Hp - 168] = R6;
           P64[Hp - 160] = _s3XH2::P64;
           I64[Hp - 152] = sat_s3XH4_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           P64[Hp - 104] = R6;
           P64[Hp - 96] = _s3XH2::P64;
           I64[Hp - 88] = sat_s3XH3_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = _s3XH2::P64;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 87;
           P64[Hp - 16] = Hp - 152;
           P64[Hp - 8] = Hp - 206;
           P64[Hp] = Hp - 272;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,,)_info" {
     GHC.Read.$fRead(,,,,,)_info:
         const GHC.Read.$fRead(,,,,,)_entry;
         const 0;
         const 133143986190;
         const 25769803802;
         const S3Y0k_srt+704;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.030181838 UTC

[section ""data" . GHC.Read.$fRead(,,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,,)_$creadListPrec_info;
         const 0;
 },
 sat_s3XHc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c4075: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4076; else goto c4077;
       c4076: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4077: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XHc_info" {
     sat_s3XHc_info:
         const sat_s3XHc_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+744;
 },
 section ""relreadonly" . u407d_srtd" {
     u407d_srtd:
         const S3Y0k_srt+360;
         const 50;
         const 844424930131969;
 },
 GHC.Read.$fRead(,,,,)_$creadListPrec_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c4078: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c407c; else goto c407b;
       c407c: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,)_$creadListPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c407b: // global
           I64[Hp - 40] = sat_s3XHc_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 38;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u407d_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.037618008 UTC

[section ""data" . GHC.Read.$fRead(,,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,,)_$creadsPrec_info;
         const 0;
 },
 sat_s3XHj_entry() //  [R1]
         { []
         }
     {offset
       c407w: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c407x; else goto c407y;
       c407x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c407y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 56];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 32;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XHj_info" {
     sat_s3XHj_info:
         const sat_s3XHj_entry;
         const 6;
         const 4294967311;
         const S3Y0k_srt+744;
 },
 GHC.Read.$fRead(,,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c407z: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c407D; else goto c407C;
       c407D: // global
           HpAlloc = 64;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,)_$creadsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c407C: // global
           I64[Hp - 56] = sat_s3XHj_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R2 = Hp - 56;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 25769803802;
         const S3Y0k_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.045407428 UTC

[section ""data" . GHC.Read.$fRead(,,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,,)_$creadList_info;
         const 0;
 },
 sat_s3XHp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c4086: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4087; else goto c4088;
       c4087: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4088: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XHp_info" {
     sat_s3XHp_info:
         const sat_s3XHp_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+744;
 },
 section ""relreadonly" . u408j_srtd" {
     u408j_srtd:
         const S3Y0k_srt+360;
         const 49;
         const 281474976710657;
 },
 sat_s3XHq_entry() //  [R1]
         { []
         }
     {offset
       c4089: // global
           _s3XHq::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c408a; else goto c408b;
       c408b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c408d; else goto c408c;
       c408d: // global
           HpAlloc = 48;
           goto c408a;
       c408a: // global
           R1 = _s3XHq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c408c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XHq::P64;
           _s3XHk::P64 = P64[_s3XHq::P64 + 16];
           _s3XHl::P64 = P64[_s3XHq::P64 + 24];
           _s3XHm::P64 = P64[_s3XHq::P64 + 32];
           _s3XHn::P64 = P64[_s3XHq::P64 + 40];
           _s3XHo::P64 = P64[_s3XHq::P64 + 48];
           I64[Hp - 40] = sat_s3XHp_info;
           P64[Hp - 32] = _s3XHk::P64;
           P64[Hp - 24] = _s3XHl::P64;
           P64[Hp - 16] = _s3XHm::P64;
           P64[Hp - 8] = _s3XHn::P64;
           P64[Hp] = _s3XHo::P64;
           R2 = Hp - 38;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XHq_info" {
     sat_s3XHq_info:
         const sat_s3XHq_entry;
         const 5;
         const 18446744069414584335;
         const u408j_srtd;
 },
 section ""relreadonly" . u408k_srtd" {
     u408k_srtd:
         const S3Y0k_srt+360;
         const 52;
         const 2533274790395905;
 },
 GHC.Read.$fRead(,,,,)_$creadList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c408e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c408i; else goto c408h;
       c408i: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,)_$creadList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c408h: // global
           I64[Hp - 48] = sat_s3XHq_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u408k_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.058261487 UTC

[section ""data" . GHC.Read.$fRead(,,,,)_closure" {
     GHC.Read.$fRead(,,,,)_closure:
         const GHC.Read.$fRead(,,,,)_info;
         const 0;
 },
 sat_s3XHz_entry() //  [R1]
         { []
         }
     {offset
       c408P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c408Q; else goto c408R;
       c408Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c408R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)_$creadListPrec_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XHz_info" {
     sat_s3XHz_info:
         const sat_s3XHz_entry;
         const 5;
         const 4294967311;
         const S3Y0k_srt+752;
 },
 sat_s3XHy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c408X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c408Y; else goto c408Z;
       c408Y: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c408Z: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XHy_info" {
     sat_s3XHy_info:
         const sat_s3XHy_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+744;
 },
 sat_s3XHx_entry() //  [R1]
         { []
         }
     {offset
       c4094: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4095; else goto c4096;
       c4095: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4096: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,,)_$creadList_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XHx_info" {
     sat_s3XHx_info:
         const sat_s3XHx_entry;
         const 5;
         const 4294967311;
         const S3Y0k_srt+768;
 },
 sat_s3XHw_entry() //  [R1, R2]
         { []
         }
     {offset
       c409c: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c409d; else goto c409e;
       c409d: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c409e: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Read.$fRead(,,,,)_$creadsPrec_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XHw_info" {
     sat_s3XHw_info:
         const sat_s3XHw_entry;
         const 5;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+760;
 },
 GHC.Read.$fRead(,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c409g: // global
           Hp = Hp + 248;
           if (Hp > HpLim) (likely: False) goto c409k; else goto c409j;
       c409k: // global
           HpAlloc = 248;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c409j: // global
           I64[Hp - 240] = sat_s3XHz_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           P64[Hp - 208] = R4;
           P64[Hp - 200] = R5;
           P64[Hp - 192] = R6;
           I64[Hp - 184] = sat_s3XHy_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           P64[Hp - 144] = R6;
           I64[Hp - 136] = sat_s3XHx_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           I64[Hp - 80] = sat_s3XHw_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 79;
           P64[Hp - 16] = Hp - 136;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 240;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,,)_info" {
     GHC.Read.$fRead(,,,,)_info:
         const GHC.Read.$fRead(,,,,)_entry;
         const 0;
         const 133143986190;
         const 21474836505;
         const S3Y0k_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.07092895 UTC

[section ""data" . GHC.Read.$fRead(,,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,,)_$creadListPrec_info;
         const 0;
 },
 sat_s3XHE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40a0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c40a1; else goto c40a2;
       c40a1: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40a2: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Read.$fRead(,,,)1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XHE_info" {
     sat_s3XHE_info:
         const sat_s3XHE_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+784;
 },
 section ""relreadonly" . u40a8_srtd" {
     u40a8_srtd:
         const S3Y0k_srt+360;
         const 55;
         const 27021597764222977;
 },
 GHC.Read.$fRead(,,,)_$creadListPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c40a3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c40a7; else goto c40a6;
       c40a7: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)_$creadListPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40a6: // global
           I64[Hp - 32] = sat_s3XHE_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 30;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u40a8_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.077907986 UTC

[section ""data" . GHC.Read.$fRead(,,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,,)_$creadsPrec_info;
         const 0;
 },
 sat_s3XHK_entry() //  [R1]
         { []
         }
     {offset
       c40ar: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c40as; else goto c40at;
       c40as: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40at: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 24;
           call GHC.Read.$fRead(,,,)1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 32, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XHK_info" {
     sat_s3XHK_info:
         const sat_s3XHK_entry;
         const 5;
         const 4294967311;
         const S3Y0k_srt+784;
 },
 GHC.Read.$fRead(,,,)_$creadsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c40au: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c40ay; else goto c40ax;
       c40ay: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)_$creadsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40ax: // global
           I64[Hp - 48] = sat_s3XHK_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R2 = Hp - 48;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 21474836505;
         const S3Y0k_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.084991467 UTC

[section ""data" . GHC.Read.$fRead(,,,)_$creadList_closure" {
     GHC.Read.$fRead(,,,)_$creadList_closure:
         const GHC.Read.$fRead(,,,)_$creadList_info;
         const 0;
 },
 sat_s3XHP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40aZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c40b0; else goto c40b1;
       c40b0: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40b1: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Read.$fRead(,,,)1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XHP_info" {
     sat_s3XHP_info:
         const sat_s3XHP_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+784;
 },
 section ""relreadonly" . u40bc_srtd" {
     u40bc_srtd:
         const S3Y0k_srt+360;
         const 54;
         const 9007199254740993;
 },
 sat_s3XHQ_entry() //  [R1]
         { []
         }
     {offset
       c40b2: // global
           _s3XHQ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c40b3; else goto c40b4;
       c40b4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c40b6; else goto c40b5;
       c40b6: // global
           HpAlloc = 40;
           goto c40b3;
       c40b3: // global
           R1 = _s3XHQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40b5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XHQ::P64;
           _s3XHL::P64 = P64[_s3XHQ::P64 + 16];
           _s3XHM::P64 = P64[_s3XHQ::P64 + 24];
           _s3XHN::P64 = P64[_s3XHQ::P64 + 32];
           _s3XHO::P64 = P64[_s3XHQ::P64 + 40];
           I64[Hp - 32] = sat_s3XHP_info;
           P64[Hp - 24] = _s3XHL::P64;
           P64[Hp - 16] = _s3XHM::P64;
           P64[Hp - 8] = _s3XHN::P64;
           P64[Hp] = _s3XHO::P64;
           R2 = Hp - 30;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XHQ_info" {
     sat_s3XHQ_info:
         const sat_s3XHQ_entry;
         const 4;
         const 18446744069414584335;
         const u40bc_srtd;
 },
 section ""relreadonly" . u40bd_srtd" {
     u40bd_srtd:
         const S3Y0k_srt+360;
         const 57;
         const 81064793292668929;
 },
 GHC.Read.$fRead(,,,)_$creadList_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c40b7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c40bb; else goto c40ba;
       c40bb: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)_$creadList_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40ba: // global
           I64[Hp - 40] = sat_s3XHQ_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)_$creadList_info" {
     GHC.Read.$fRead(,,,)_$creadList_info:
         const GHC.Read.$fRead(,,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u40bd_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.097605829 UTC

[section ""data" . GHC.Read.$fRead(,,,)_closure" {
     GHC.Read.$fRead(,,,)_closure:
         const GHC.Read.$fRead(,,,)_info;
         const 0;
 },
 sat_s3XHY_entry() //  [R1]
         { []
         }
     {offset
       c40bI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40bJ; else goto c40bK;
       c40bJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40bK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)_$creadListPrec_entry(R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XHY_info" {
     sat_s3XHY_info:
         const sat_s3XHY_entry;
         const 4;
         const 4294967311;
         const S3Y0k_srt+792;
 },
 sat_s3XHX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40bQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c40bR; else goto c40bS;
       c40bR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40bS: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Read.$fRead(,,,)1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XHX_info" {
     sat_s3XHX_info:
         const sat_s3XHX_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+784;
 },
 sat_s3XHW_entry() //  [R1]
         { []
         }
     {offset
       c40bX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40bY; else goto c40bZ;
       c40bY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40bZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,,)_$creadList_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XHW_info" {
     sat_s3XHW_info:
         const sat_s3XHW_entry;
         const 4;
         const 4294967311;
         const S3Y0k_srt+808;
 },
 sat_s3XHV_entry() //  [R1, R2]
         { []
         }
     {offset
       c40c5: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,,,)_$creadsPrec_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XHV_info" {
     sat_s3XHV_info:
         const sat_s3XHV_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+800;
 },
 GHC.Read.$fRead(,,,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c40c9: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c40cd; else goto c40cc;
       c40cd: // global
           HpAlloc = 216;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,,)_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40cc: // global
           I64[Hp - 208] = sat_s3XHY_info;
           P64[Hp - 192] = R2;
           P64[Hp - 184] = R3;
           P64[Hp - 176] = R4;
           P64[Hp - 168] = R5;
           I64[Hp - 160] = sat_s3XHX_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           I64[Hp - 120] = sat_s3XHW_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           I64[Hp - 72] = sat_s3XHV_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 71;
           P64[Hp - 16] = Hp - 120;
           P64[Hp - 8] = Hp - 158;
           P64[Hp] = Hp - 208;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,,)_info" {
     GHC.Read.$fRead(,,,)_info:
         const GHC.Read.$fRead(,,,)_entry;
         const 0;
         const 133143986190;
         const 17179869208;
         const S3Y0k_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.110318052 UTC

[section ""data" . GHC.Read.$fRead(,,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,,)_$creadListPrec_info;
         const 0;
 },
 sat_s3XI2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40cS: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,,)1_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XI2_info" {
     sat_s3XI2_info:
         const sat_s3XI2_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+824;
 },
 section ""relreadonly" . u40d0_srtd" {
     u40d0_srtd:
         const S3Y0k_srt+360;
         const 60;
         const 864691128455135233;
 },
 GHC.Read.$fRead(,,)_$creadListPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c40cV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40cZ; else goto c40cY;
       c40cZ: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40cY: // global
           I64[Hp - 24] = sat_s3XI2_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 22;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)_$creadListPrec_info" {
     GHC.Read.$fRead(,,)_$creadListPrec_info:
         const GHC.Read.$fRead(,,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u40d0_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.117761544 UTC

[section ""data" . GHC.Read.$fRead(,,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,,)_$creadsPrec_info;
         const 0;
 },
 sat_s3XI7_entry() //  [R1]
         { []
         }
     {offset
       c40di: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40dj; else goto c40dk;
       c40dj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40dk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,)1_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XI7_info" {
     sat_s3XI7_info:
         const sat_s3XI7_entry;
         const 4;
         const 4294967311;
         const S3Y0k_srt+824;
 },
 GHC.Read.$fRead(,,)_$creadsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c40dl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c40dp; else goto c40do;
       c40dp: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)_$creadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40do: // global
           I64[Hp - 40] = sat_s3XI7_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)_$creadsPrec_info" {
     GHC.Read.$fRead(,,)_$creadsPrec_info:
         const GHC.Read.$fRead(,,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const S3Y0k_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.126713552 UTC

[section ""data" . GHC.Read.$fRead(,,)_$creadList_closure" {
     GHC.Read.$fRead(,,)_$creadList_closure:
         const GHC.Read.$fRead(,,)_$creadList_info;
         const 0;
 },
 sat_s3XIb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40dP: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,,)1_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XIb_info" {
     sat_s3XIb_info:
         const sat_s3XIb_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+824;
 },
 section ""relreadonly" . u40e2_srtd" {
     u40e2_srtd:
         const S3Y0k_srt+360;
         const 59;
         const 288230376151711745;
 },
 sat_s3XIc_entry() //  [R1]
         { []
         }
     {offset
       c40dS: // global
           _s3XIc::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c40dT; else goto c40dU;
       c40dU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40dW; else goto c40dV;
       c40dW: // global
           HpAlloc = 32;
           goto c40dT;
       c40dT: // global
           R1 = _s3XIc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40dV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XIc::P64;
           _s3XI8::P64 = P64[_s3XIc::P64 + 16];
           _s3XI9::P64 = P64[_s3XIc::P64 + 24];
           _s3XIa::P64 = P64[_s3XIc::P64 + 32];
           I64[Hp - 24] = sat_s3XIb_info;
           P64[Hp - 16] = _s3XI8::P64;
           P64[Hp - 8] = _s3XI9::P64;
           P64[Hp] = _s3XIa::P64;
           R2 = Hp - 22;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIc_info" {
     sat_s3XIc_info:
         const sat_s3XIc_entry;
         const 3;
         const 18446744069414584335;
         const u40e2_srtd;
 },
 section ""relreadonly" . u40e3_srtd" {
     u40e3_srtd:
         const S3Y0k_srt+360;
         const 62;
         const 2594073385365405697;
 },
 GHC.Read.$fRead(,,)_$creadList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c40dX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c40e1; else goto c40e0;
       c40e1: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40e0: // global
           I64[Hp - 32] = sat_s3XIc_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)_$creadList_info" {
     GHC.Read.$fRead(,,)_$creadList_info:
         const GHC.Read.$fRead(,,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u40e3_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.144413031 UTC

[section ""data" . GHC.Read.$fRead(,,)_closure" {
     GHC.Read.$fRead(,,)_closure:
         const GHC.Read.$fRead(,,)_info;
         const 0;
 },
 sat_s3XIj_entry() //  [R1]
         { []
         }
     {offset
       c40ex: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40ey; else goto c40ez;
       c40ey: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40ez: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,)_$creadListPrec_entry(R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIj_info" {
     sat_s3XIj_info:
         const sat_s3XIj_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+832;
 },
 sat_s3XIi_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40eF: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,,)1_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XIi_info" {
     sat_s3XIi_info:
         const sat_s3XIi_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+824;
 },
 sat_s3XIh_entry() //  [R1]
         { []
         }
     {offset
       c40eM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40eN; else goto c40eO;
       c40eN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40eO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,,)_$creadList_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIh_info" {
     sat_s3XIh_info:
         const sat_s3XIh_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+848;
 },
 sat_s3XIg_entry() //  [R1, R2]
         { []
         }
     {offset
       c40eU: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,,)_$creadsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XIg_info" {
     sat_s3XIg_info:
         const sat_s3XIg_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+840;
 },
 GHC.Read.$fRead(,,)_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c40eY: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c40f2; else goto c40f1;
       c40f2: // global
           HpAlloc = 184;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,,)_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40f1: // global
           I64[Hp - 176] = sat_s3XIj_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_s3XIi_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_s3XIh_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = sat_s3XIg_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           P64[Hp - 8] = Hp - 134;
           P64[Hp] = Hp - 176;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,,)_info" {
     GHC.Read.$fRead(,,)_info:
         const GHC.Read.$fRead(,,)_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const S3Y0k_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.163277524 UTC

[section ""data" . GHC.Read.$fRead(,)_$creadListPrec_closure" {
     GHC.Read.$fRead(,)_$creadListPrec_closure:
         const GHC.Read.$fRead(,)_$creadListPrec_info;
         const 0;
 },
 sat_s3XIm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40fG: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XIm_info" {
     sat_s3XIm_info:
         const sat_s3XIm_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3Y0k_srt+864;
 },
 section ""relreadonly" . u40fO_srtd" {
     u40fO_srtd:
         const S3Y0k_srt+360;
         const 65;
         const 9223372036854775809;
         const 1;
 },
 GHC.Read.$fRead(,)_$creadListPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c40fJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40fN; else goto c40fM;
       c40fN: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40fM: // global
           I64[Hp - 16] = sat_s3XIm_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)_$creadListPrec_info" {
     GHC.Read.$fRead(,)_$creadListPrec_info:
         const GHC.Read.$fRead(,)_$creadListPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u40fO_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.173599107 UTC

[section ""data" . GHC.Read.$fRead(,)_$creadsPrec_closure" {
     GHC.Read.$fRead(,)_$creadsPrec_closure:
         const GHC.Read.$fRead(,)_$creadsPrec_info;
         const 0;
 },
 sat_s3XIq_entry() //  [R1]
         { []
         }
     {offset
       c40g6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40g7; else goto c40g8;
       c40g7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40g8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIq_info" {
     sat_s3XIq_info:
         const sat_s3XIq_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+864;
 },
 GHC.Read.$fRead(,)_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c40g9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c40gd; else goto c40gc;
       c40gd: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40gc: // global
           I64[Hp - 32] = sat_s3XIq_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)_$creadsPrec_info" {
     GHC.Read.$fRead(,)_$creadsPrec_info:
         const GHC.Read.$fRead(,)_$creadsPrec_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S3Y0k_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.184237976 UTC

[section ""data" . GHC.Read.$fRead(,)_$creadList_closure" {
     GHC.Read.$fRead(,)_$creadList_closure:
         const GHC.Read.$fRead(,)_$creadList_info;
         const 0;
 },
 sat_s3XIt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40gD: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XIt_info" {
     sat_s3XIt_info:
         const sat_s3XIt_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3Y0k_srt+864;
 },
 section ""relreadonly" . u40gQ_srtd" {
     u40gQ_srtd:
         const S3Y0k_srt+360;
         const 64;
         const 9223372036854775809;
 },
 sat_s3XIu_entry() //  [R1]
         { []
         }
     {offset
       c40gG: // global
           _s3XIu::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c40gH; else goto c40gI;
       c40gI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40gK; else goto c40gJ;
       c40gK: // global
           HpAlloc = 24;
           goto c40gH;
       c40gH: // global
           R1 = _s3XIu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40gJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XIu::P64;
           _s3XIr::P64 = P64[_s3XIu::P64 + 16];
           _s3XIs::P64 = P64[_s3XIu::P64 + 24];
           I64[Hp - 16] = sat_s3XIt_info;
           P64[Hp - 8] = _s3XIr::P64;
           P64[Hp] = _s3XIs::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIu_info" {
     sat_s3XIu_info:
         const sat_s3XIu_entry;
         const 2;
         const 18446744069414584338;
         const u40gQ_srtd;
 },
 section ""relreadonly" . u40gR_srtd" {
     u40gR_srtd:
         const S3Y0k_srt+360;
         const 67;
         const 9223372036854775809;
         const 4;
 },
 GHC.Read.$fRead(,)_$creadList_entry() //  [R2, R3]
         { []
         }
     {offset
       c40gL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40gP; else goto c40gO;
       c40gP: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40gO: // global
           I64[Hp - 24] = sat_s3XIu_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)_$creadList_info" {
     GHC.Read.$fRead(,)_$creadList_info:
         const GHC.Read.$fRead(,)_$creadList_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u40gR_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.200355515 UTC

[section ""data" . GHC.Read.$fRead(,)_closure" {
     GHC.Read.$fRead(,)_closure:
         const GHC.Read.$fRead(,)_info;
         const 0;
 },
 sat_s3XIA_entry() //  [R1]
         { []
         }
     {offset
       c40hl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40hm; else goto c40hn;
       c40hm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40hn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)_$creadListPrec_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIA_info" {
     sat_s3XIA_info:
         const sat_s3XIA_entry;
         const 2;
         const 4294967314;
         const S3Y0k_srt+872;
 },
 sat_s3XIz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40ht: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XIz_info" {
     sat_s3XIz_info:
         const sat_s3XIz_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3Y0k_srt+864;
 },
 sat_s3XIy_entry() //  [R1]
         { []
         }
     {offset
       c40hA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40hB; else goto c40hC;
       c40hB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40hC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead(,)_$creadList_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIy_info" {
     sat_s3XIy_info:
         const sat_s3XIy_entry;
         const 2;
         const 4294967314;
         const S3Y0k_srt+888;
 },
 sat_s3XIx_entry() //  [R1, R2]
         { []
         }
     {offset
       c40hI: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead(,)_$creadsPrec_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XIx_info" {
     sat_s3XIx_info:
         const sat_s3XIx_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3Y0k_srt+880;
 },
 GHC.Read.$fRead(,)_entry() //  [R2, R3]
         { []
         }
     {offset
       c40hM: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c40hQ; else goto c40hP;
       c40hQ: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead(,)_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40hP: // global
           I64[Hp - 144] = sat_s3XIA_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s3XIz_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s3XIy_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s3XIx_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead(,)_info" {
     GHC.Read.$fRead(,)_info:
         const GHC.Read.$fRead(,)_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S3Y0k_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.216279221 UTC

[section ""data" . GHC.Read.$fReadLexeme_$creadListPrec_closure" {
     GHC.Read.$fReadLexeme_$creadListPrec_closure:
         const GHC.Read.$fReadLexeme_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadLexeme_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c40ir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40is; else goto c40it;
       c40is: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40it: // global
           (_c40io::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40io::I64 == 0) goto c40iq; else goto c40ip;
       c40iq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40ip: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40io::I64;
           R2 = GHC.Read.$fReadLexeme1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_$creadListPrec_info" {
     GHC.Read.$fReadLexeme_$creadListPrec_info:
         const GHC.Read.$fReadLexeme_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S3Y0k_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.21997089 UTC

[section ""data" . GHC.Read.$fReadLexeme_lvl117_closure" {
     GHC.Read.$fReadLexeme_lvl117_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const Text.Read.Lex.EOF_closure+7;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.222758904 UTC

[section ""data" . GHC.Read.$fReadLexeme8_closure" {
     GHC.Read.$fReadLexeme8_closure:
         const GHC.Read.$fReadLexeme8_info;
 },
 GHC.Read.$fReadLexeme8_entry() //  [R2]
         { []
         }
     {offset
       c40iO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c40iP; else goto c40iQ;
       c40iP: // global
           R2 = R2;
           R1 = GHC.Read.$fReadLexeme8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40iQ: // global
           I64[Sp - 8] = block_c40iH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40iX; else goto c40iI;
       u40iX: // global
           call _c40iH(R1) args: 0, res: 0, upd: 0;
       c40iI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme8_info" {
     GHC.Read.$fReadLexeme8_info:
         const GHC.Read.$fReadLexeme8_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c40iH() //  [R1]
         { []
         }
     {offset
       c40iH: // global
           if (R1 & 7 == 1) goto c40iL; else goto c40iM;
       c40iL: // global
           R1 = GHC.Read.$fReadLexeme_lvl117_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c40iM: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40iH_info" {
     block_c40iH_info:
         const _c40iH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.227941942 UTC

[section ""data" . GHC.Read.$fReadLexeme7_closure" {
     GHC.Read.$fReadLexeme7_closure:
         const Text.ParserCombinators.ReadP.Look_con_info;
         const GHC.Read.$fReadLexeme8_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.230301929 UTC

[section ""data" . GHC.Read.$fReadLexeme6_closure" {
     GHC.Read.$fReadLexeme6_closure:
         const GHC.Read.$fReadLexeme6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadLexeme6_entry() //  [R1]
         { []
         }
     {offset
       c40jk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40jl; else goto c40jm;
       c40jl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40jm: // global
           (_c40jh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40jh::I64 == 0) goto c40jj; else goto c40ji;
       c40jj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40ji: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40jh::I64;
           R2 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme6_info" {
     GHC.Read.$fReadLexeme6_info:
         const GHC.Read.$fReadLexeme6_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.234647892 UTC

[section ""data" . GHC.Read.$fReadLexeme_lvl116_closure" {
     GHC.Read.$fReadLexeme_lvl116_closure:
         const GHC.Read.$fReadLexeme_lvl116_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadLexeme_lvl116_entry() //  [R1]
         { []
         }
     {offset
       c40jC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40jD; else goto c40jE;
       c40jD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40jE: // global
           (_c40jz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40jz::I64 == 0) goto c40jB; else goto c40jA;
       c40jB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40jA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40jz::I64;
           R3 = GHC.Read.$fReadLexeme6_closure;
           R2 = GHC.Read.$fReadLexeme7_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_lvl116_info" {
     GHC.Read.$fReadLexeme_lvl116_info:
         const GHC.Read.$fReadLexeme_lvl116_entry;
         const 0;
         const 12884901909;
         const S3Y0k_srt+928;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.238948949 UTC

[section ""data" . GHC.Read.$fReadLexeme_k_closure" {
     GHC.Read.$fReadLexeme_k_closure:
         const GHC.Read.$fReadLexeme_k_info;
         const 0;
 },
 GHC.Read.$fReadLexeme_k_entry() //  []
         { []
         }
     {offset
       c40jR: // global
           R1 = GHC.Read.$fReadLexeme_lvl116_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_k_info" {
     GHC.Read.$fReadLexeme_k_info:
         const GHC.Read.$fReadLexeme_k_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+944;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.242567182 UTC

[section ""data" . GHC.Read.$fReadLexeme5_closure" {
     GHC.Read.$fReadLexeme5_closure:
         const GHC.Read.$fReadLexeme5_info;
         const 0;
 },
 GHC.Read.$fReadLexeme5_entry() //  [R2]
         { []
         }
     {offset
       c40k3: // global
           R3 = GHC.Read.$fReadLexeme_k_closure+1;
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme5_info" {
     GHC.Read.$fReadLexeme5_info:
         const GHC.Read.$fReadLexeme5_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+952;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.246463346 UTC

[section ""data" . GHC.Read.$fReadLexeme4_closure" {
     GHC.Read.$fReadLexeme4_closure:
         const Text.ParserCombinators.ReadP.Look_con_info;
         const GHC.Read.$fReadLexeme5_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.248540752 UTC

[section ""data" . GHC.Read.$fReadLexeme3_closure" {
     GHC.Read.$fReadLexeme3_closure:
         const GHC.Read.$fReadLexeme3_info;
         const 0;
 },
 GHC.Read.$fReadLexeme3_entry() //  [R2]
         { []
         }
     {offset
       c40kf: // global
           R3 = R2;
           R2 = GHC.Read.$fReadLexeme4_closure+2;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme3_info" {
     GHC.Read.$fReadLexeme3_info:
         const GHC.Read.$fReadLexeme3_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+960;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.251887747 UTC

[section ""data" . GHC.Read.$fReadLexeme_$creadsPrec_closure" {
     GHC.Read.$fReadLexeme_$creadsPrec_closure:
         const GHC.Read.$fReadLexeme_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fReadLexeme_$creadsPrec_entry() //  [R3]
         { []
         }
     {offset
       c40kq: // global
           R2 = R3;
           call GHC.Read.$fReadLexeme3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_$creadsPrec_info" {
     GHC.Read.$fReadLexeme_$creadsPrec_info:
         const GHC.Read.$fReadLexeme_$creadsPrec_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.255701553 UTC

[section ""data" . GHC.Read.$fReadLexeme2_closure" {
     GHC.Read.$fReadLexeme2_closure:
         const GHC.Read.$fReadLexeme2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadLexeme2_entry() //  [R1]
         { []
         }
     {offset
       c40kD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40kE; else goto c40kF;
       c40kE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40kF: // global
           (_c40kA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40kA::I64 == 0) goto c40kC; else goto c40kB;
       c40kC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40kB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40kA::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadLexeme_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme2_info" {
     GHC.Read.$fReadLexeme2_info:
         const GHC.Read.$fReadLexeme2_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+976;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.259933963 UTC

[section ""data" . GHC.Read.$fReadLexeme_$creadList_closure" {
     GHC.Read.$fReadLexeme_$creadList_closure:
         const GHC.Read.$fReadLexeme_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadLexeme_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c40kT: // global
           R3 = R2;
           R2 = GHC.Read.$fReadLexeme2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadLexeme_$creadList_info" {
     GHC.Read.$fReadLexeme_$creadList_info:
         const GHC.Read.$fReadLexeme_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.263176179 UTC

[section ""data" . GHC.Read.$fReadLexeme_closure" {
     GHC.Read.$fReadLexeme_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadLexeme_$creadsPrec_closure+2;
         const GHC.Read.$fReadLexeme_$creadList_closure+1;
         const GHC.Read.$fReadLexeme1_closure+2;
         const GHC.Read.$fReadLexeme_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.266751841 UTC

[section ""data" . GHC.Read.$dmreadList_closure" {
     GHC.Read.$dmreadList_closure:
         const GHC.Read.$dmreadList_info;
         const 0;
 },
 sat_s3XIJ_entry() //  [R1]
         { []
         }
     {offset
       c40ld: // global
           R2 = P64[R1 + 16];
           call GHC.Read.readPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XIJ_info" {
     sat_s3XIJ_info:
         const sat_s3XIJ_entry;
         const 1;
         const 16;
 },
 sat_s3XIK_entry() //  [R1]
         { []
         }
     {offset
       c40lg: // global
           _s3XIK::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c40lh; else goto c40li;
       c40li: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40lk; else goto c40lj;
       c40lk: // global
           HpAlloc = 24;
           goto c40lh;
       c40lh: // global
           R1 = _s3XIK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40lj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XIK::P64;
           _s3XII::P64 = P64[_s3XIK::P64 + 16];
           I64[Hp - 16] = sat_s3XIJ_info;
           P64[Hp] = _s3XII::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIK_info" {
     sat_s3XIK_info:
         const sat_s3XIK_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+904;
 },
 GHC.Read.$dmreadList_entry() //  [R2]
         { []
         }
     {offset
       c40ll: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40lp; else goto c40lo;
       c40lp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$dmreadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40lo: // global
           I64[Hp - 16] = sat_s3XIK_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$dmreadList_info" {
     GHC.Read.$dmreadList_info:
         const GHC.Read.$dmreadList_entry;
         const 0;
         const 8800387989518;
         const 4294967301;
         const S3Y0k_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.293066577 UTC

[section ""data" . GHC.Read.$fReadInteger_$sreadNumber_closure" {
     GHC.Read.$fReadInteger_$sreadNumber_closure:
         const GHC.Read.$fReadInteger_$sreadNumber_info;
         const 0;
 },
 sat_s3XIU_entry() //  [R1]
         { []
         }
     {offset
       c40m9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40ma; else goto c40mb;
       c40ma: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40mb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XIU_info" {
     sat_s3XIU_info:
         const sat_s3XIU_entry;
         const 1;
         const 16;
 },
 lvl3_s3XIS_entry() //  [R1, R2]
         { []
         }
     {offset
       c40mc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40mg; else goto c40mf;
       c40mg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40mf: // global
           _s3XIP::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3XIU_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = _s3XIP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XIS_info" {
     lvl3_s3XIS_info:
         const lvl3_s3XIS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3XIV_entry() //  [R1]
         { []
         }
     {offset
       c40ml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40mm; else goto c40mn;
       c40mm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40mn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XIV_info" {
     lvl117_s3XIV_info:
         const lvl117_s3XIV_entry;
         const 3;
         const 15;
 },
 sat_s3XJ3_entry() //  [R1, R2]
         { []
         }
     {offset
       c40mx: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XJ3_info" {
     sat_s3XJ3_info:
         const sat_s3XJ3_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3XJ4_entry() //  [R1]
         { []
         }
     {offset
       c40mA: // global
           _s3XJ4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40mB; else goto c40mC;
       c40mC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40mE; else goto c40mD;
       c40mE: // global
           HpAlloc = 32;
           goto c40mB;
       c40mB: // global
           R1 = _s3XJ4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40mD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XJ4::P64;
           _s3XIL::P64 = P64[_s3XJ4::P64 + 16];
           _s3XIO::P64 = P64[_s3XJ4::P64 + 24];
           _s3XIS::P64 = P64[_s3XJ4::P64 + 32];
           I64[Hp - 24] = sat_s3XJ3_info;
           P64[Hp - 16] = _s3XIL::P64;
           P64[Hp - 8] = _s3XIO::P64;
           P64[Hp] = _s3XIS::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XJ4_info" {
     sat_s3XJ4_info:
         const sat_s3XJ4_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+920;
 },
 sat_s3XJ0_entry() //  [R1, R2]
         { []
         }
     {offset
       c40mR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40mS; else goto c40mT;
       c40mS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40mT: // global
           I64[Sp - 16] = block_c40mK_info;
           _s3XIV::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XIV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40n0; else goto c40mL;
       u40n0: // global
           call _c40mK(R1) args: 0, res: 0, upd: 0;
       c40mL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XJ0_info" {
     sat_s3XJ0_info:
         const sat_s3XJ0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40mK() //  [R1]
         { []
         }
     {offset
       c40mK: // global
           if (R1 & 7 == 1) goto c40mO; else goto c40mP;
       c40mO: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40mP: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40mK_info" {
     block_c40mK_info:
         const _c40mK;
         const 1;
         const 30;
 },
 lvl2_s3XIR_entry() //  [R1]
         { []
         }
     {offset
       c40n2: // global
           _s3XIR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40n3; else goto c40n4;
       c40n4: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c40n6; else goto c40n5;
       c40n6: // global
           HpAlloc = 128;
           goto c40n3;
       c40n3: // global
           R1 = _s3XIR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40n5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XIR::P64;
           _s3XIL::P64 = P64[_s3XIR::P64 + 16];
           _s3XIO::P64 = P64[_s3XIR::P64 + 24];
           _s3XIP::P64 = P64[_s3XIR::P64 + 32];
           I64[Hp - 120] = lvl3_s3XIS_info;
           P64[Hp - 112] = _s3XIP::P64;
           I64[Hp - 104] = lvl117_s3XIV_info;
           P64[Hp - 88] = _s3XIL::P64;
           P64[Hp - 80] = _s3XIO::P64;
           _c40m0::P64 = Hp - 119;
           P64[Hp - 72] = _c40m0::P64;
           I64[Hp - 64] = sat_s3XJ4_info;
           P64[Hp - 48] = _s3XIL::P64;
           P64[Hp - 40] = _s3XIO::P64;
           P64[Hp - 32] = _c40m0::P64;
           I64[Hp - 24] = sat_s3XJ0_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3XIR_info" {
     lvl2_s3XIR_info:
         const lvl2_s3XIR_entry;
         const 3;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XJ5_entry() //  [R1]
         { []
         }
     {offset
       c40nc: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XJ5_info" {
     k_s3XJ5_info:
         const k_s3XJ5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3XJ7_entry() //  [R1, R2]
         { []
         }
     {offset
       c40nk: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XJ7_info" {
     lvl3_s3XJ7_info:
         const lvl3_s3XJ7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3XJa_entry() //  [R1, R2]
         { []
         }
     {offset
       c40nA: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c40nB; else goto c40nC;
       c40nB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40nC: // global
           I64[Sp - 40] = block_c40nt_info;
           _s3XIL::P64 = P64[R1 + 7];
           _s3XIO::P64 = P64[R1 + 15];
           _s3XIP::P64 = P64[R1 + 23];
           _s3XJ9::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3XIL::P64;
           P64[Sp - 24] = _s3XIO::P64;
           P64[Sp - 16] = _s3XIP::P64;
           P64[Sp - 8] = _s3XJ9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u40or; else goto c40nu;
       u40or: // global
           call _c40nt(R1) args: 0, res: 0, upd: 0;
       c40nu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3XJa_info" {
     w2_s3XJa_info:
         const w2_s3XJa_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c40nt() //  [R1]
         { []
         }
     {offset
       c40nt: // global
           if (R1 & 7 == 5) goto c40ny; else goto u40ol;
       c40ny: // global
           I64[Sp - 8] = block_c40nI_info;
           _s3XJc::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3XJc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40op; else goto c40nK;
       u40op: // global
           call _c40nI(R1) args: 0, res: 0, upd: 0;
       c40nK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40ol: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c40oi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40nt_info" {
     block_c40nt_info:
         const _c40nt;
         const 4;
         const 30;
 },
 _c40nI() //  [R1]
         { []
         }
     {offset
       c40nI: // global
           if (R1 & 7 == 1) goto u40om; else goto c40nV;
       u40om: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40oi() args: 0, res: 0, upd: 0;
       c40nV: // global
           I64[Sp - 8] = block_c40nT_info;
           _s3XJg::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XJg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40os; else goto c40nW;
       u40os: // global
           call _c40nT(R1) args: 0, res: 0, upd: 0;
       c40nW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c40nI_info" {
     block_c40nI_info:
         const _c40nI;
         const 5;
         const 30;
 },
 _c40nT() //  [R1]
         { []
         }
     {offset
       c40nT: // global
           if (I64[R1 + 7] == 45) goto c40o7; else goto u40on;
       c40o7: // global
           _s3XJg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c40o6_info;
           R1 = _s3XJg::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u40ou; else goto c40o8;
       u40ou: // global
           call _c40o6(R1) args: 0, res: 0, upd: 0;
       c40o8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40on: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c40oi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40nT_info" {
     block_c40nT_info:
         const _c40nT;
         const 6;
         const 30;
 },
 _c40o6() //  [R1]
         { []
         }
     {offset
       c40o6: // global
           if (R1 & 7 == 1) goto c40oe; else goto u40oo;
       c40oe: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u40oo: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40oi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40o6_info" {
     block_c40o6_info:
         const _c40o6;
         const 5;
         const 30;
 },
 _c40oi() //  []
         { []
         }
     {offset
       c40oi: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3XJn_entry() //  [R1]
         { []
         }
     {offset
       c40oB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40oC; else goto c40oD;
       c40oC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40oD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3XJa_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XJn_info" {
     lvl117_s3XJn_info:
         const lvl117_s3XJn_entry;
         const 1;
         const 16;
 },
 sat_s3XJu_entry() //  [R1]
         { []
         }
     {offset
       c40oI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40oJ; else goto c40oK;
       c40oJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40oK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XJu_info" {
     sat_s3XJu_info:
         const sat_s3XJu_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+920;
 },
 sat_s3XJs_entry() //  [R1, R2]
         { []
         }
     {offset
       c40oX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40oY; else goto c40oZ;
       c40oY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40oZ: // global
           I64[Sp - 16] = block_c40oQ_info;
           _s3XJn::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XJn::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40p6; else goto c40oR;
       u40p6: // global
           call _c40oQ(R1) args: 0, res: 0, upd: 0;
       c40oR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XJs_info" {
     sat_s3XJs_info:
         const sat_s3XJs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40oQ() //  [R1]
         { []
         }
     {offset
       c40oQ: // global
           if (R1 & 7 == 1) goto c40oU; else goto c40oV;
       c40oU: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40oV: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40oQ_info" {
     block_c40oQ_info:
         const _c40oQ;
         const 1;
         const 30;
 },
 lvl116_s3XIQ_entry() //  [R1]
         { []
         }
     {offset
       c40p8: // global
           _s3XIQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40p9; else goto c40pa;
       c40pa: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c40pc; else goto c40pb;
       c40pc: // global
           HpAlloc = 208;
           goto c40p9;
       c40p9: // global
           R1 = _s3XIQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40pb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XIQ::P64;
           _s3XIL::P64 = P64[_s3XIQ::P64 + 16];
           _s3XIO::P64 = P64[_s3XIQ::P64 + 24];
           _s3XIP::P64 = P64[_s3XIQ::P64 + 32];
           I64[Hp - 200] = lvl2_s3XIR_info;
           P64[Hp - 184] = _s3XIL::P64;
           P64[Hp - 176] = _s3XIO::P64;
           P64[Hp - 168] = _s3XIP::P64;
           I64[Hp - 160] = k_s3XJ5_info;
           P64[Hp - 152] = Hp - 200;
           I64[Hp - 144] = lvl3_s3XJ7_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3XJa_info;
           P64[Hp - 104] = _s3XIL::P64;
           P64[Hp - 96] = _s3XIO::P64;
           P64[Hp - 88] = _s3XIP::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3XJn_info;
           _c40no::P64 = Hp - 111;
           P64[Hp - 56] = _c40no::P64;
           I64[Hp - 48] = sat_s3XJu_info;
           P64[Hp - 32] = _c40no::P64;
           I64[Hp - 24] = sat_s3XJs_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XIQ_info" {
     lvl116_s3XIQ_info:
         const lvl116_s3XIQ_entry;
         const 3;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XJv_entry() //  [R1]
         { []
         }
     {offset
       c40pi: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XJv_info" {
     k_s3XJv_info:
         const k_s3XJv_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XJy_entry() //  [R1, R2]
         { []
         }
     {offset
       c40pq: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XJy_info" {
     sat_s3XJy_info:
         const sat_s3XJy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XJz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40pu: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c40py; else goto c40px;
       c40py: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40px: // global
           _s3XIL::P64 = P64[R1 + 6];
           I64[Hp - 80] = lvl116_s3XIQ_info;
           P64[Hp - 64] = _s3XIL::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3XJv_info;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3XJy_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XJz_info" {
     sat_s3XJz_info:
         const sat_s3XJz_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S3Y0k_srt+920;
 },
 section ""relreadonly" . u40pE_srtd" {
     u40pE_srtd:
         const S3Y0k_srt+216;
         const 99;
         const 1;
         const 17263755264;
 },
 GHC.Read.$fReadInteger_$sreadNumber_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c40pz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c40pD; else goto c40pC;
       c40pD: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadInteger_$sreadNumber_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40pC: // global
           I64[Hp - 8] = sat_s3XJz_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger_$sreadNumber_info" {
     GHC.Read.$fReadInteger_$sreadNumber_info:
         const GHC.Read.$fReadInteger_$sreadNumber_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u40pE_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.363343665 UTC

[section ""data" . GHC.Read.$fReadDouble_$sreadNumber_closure" {
     GHC.Read.$fReadDouble_$sreadNumber_closure:
         const GHC.Read.$fReadDouble_$sreadNumber_info;
         const 0;
 },
 sat_s3XJJ_entry() //  [R1]
         { []
         }
     {offset
       c40sL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40sM; else goto c40sN;
       c40sM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40sN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.negateDouble_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XJJ_info" {
     sat_s3XJJ_info:
         const sat_s3XJJ_entry;
         const 1;
         const 16;
 },
 lvl3_s3XJH_entry() //  [R1, R2]
         { []
         }
     {offset
       c40sO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40sS; else goto c40sR;
       c40sS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40sR: // global
           _s3XJE::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3XJJ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = _s3XJE::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XJH_info" {
     lvl3_s3XJH_info:
         const lvl3_s3XJH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3XJK_entry() //  [R1]
         { []
         }
     {offset
       c40sX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40sY; else goto c40sZ;
       c40sY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40sZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XJK_info" {
     lvl117_s3XJK_info:
         const lvl117_s3XJK_entry;
         const 3;
         const 15;
 },
 sat_s3XJS_entry() //  [R1, R2]
         { []
         }
     {offset
       c40t9: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XJS_info" {
     sat_s3XJS_info:
         const sat_s3XJS_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3XJT_entry() //  [R1]
         { []
         }
     {offset
       c40tc: // global
           _s3XJT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40td; else goto c40te;
       c40te: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40tg; else goto c40tf;
       c40tg: // global
           HpAlloc = 32;
           goto c40td;
       c40td: // global
           R1 = _s3XJT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40tf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XJT::P64;
           _s3XJA::P64 = P64[_s3XJT::P64 + 16];
           _s3XJD::P64 = P64[_s3XJT::P64 + 24];
           _s3XJH::P64 = P64[_s3XJT::P64 + 32];
           I64[Hp - 24] = sat_s3XJS_info;
           P64[Hp - 16] = _s3XJA::P64;
           P64[Hp - 8] = _s3XJD::P64;
           P64[Hp] = _s3XJH::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XJT_info" {
     sat_s3XJT_info:
         const sat_s3XJT_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+920;
 },
 sat_s3XJP_entry() //  [R1, R2]
         { []
         }
     {offset
       c40tt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40tu; else goto c40tv;
       c40tu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40tv: // global
           I64[Sp - 16] = block_c40tm_info;
           _s3XJK::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XJK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40tC; else goto c40tn;
       u40tC: // global
           call _c40tm(R1) args: 0, res: 0, upd: 0;
       c40tn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XJP_info" {
     sat_s3XJP_info:
         const sat_s3XJP_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40tm() //  [R1]
         { []
         }
     {offset
       c40tm: // global
           if (R1 & 7 == 1) goto c40tq; else goto c40tr;
       c40tq: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40tr: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40tm_info" {
     block_c40tm_info:
         const _c40tm;
         const 1;
         const 30;
 },
 lvl2_s3XJG_entry() //  [R1]
         { []
         }
     {offset
       c40tE: // global
           _s3XJG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40tF; else goto c40tG;
       c40tG: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c40tI; else goto c40tH;
       c40tI: // global
           HpAlloc = 128;
           goto c40tF;
       c40tF: // global
           R1 = _s3XJG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40tH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XJG::P64;
           _s3XJA::P64 = P64[_s3XJG::P64 + 16];
           _s3XJD::P64 = P64[_s3XJG::P64 + 24];
           _s3XJE::P64 = P64[_s3XJG::P64 + 32];
           I64[Hp - 120] = lvl3_s3XJH_info;
           P64[Hp - 112] = _s3XJE::P64;
           I64[Hp - 104] = lvl117_s3XJK_info;
           P64[Hp - 88] = _s3XJA::P64;
           P64[Hp - 80] = _s3XJD::P64;
           _c40sC::P64 = Hp - 119;
           P64[Hp - 72] = _c40sC::P64;
           I64[Hp - 64] = sat_s3XJT_info;
           P64[Hp - 48] = _s3XJA::P64;
           P64[Hp - 40] = _s3XJD::P64;
           P64[Hp - 32] = _c40sC::P64;
           I64[Hp - 24] = sat_s3XJP_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3XJG_info" {
     lvl2_s3XJG_info:
         const lvl2_s3XJG_entry;
         const 3;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XJU_entry() //  [R1]
         { []
         }
     {offset
       c40tO: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XJU_info" {
     k_s3XJU_info:
         const k_s3XJU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3XJW_entry() //  [R1, R2]
         { []
         }
     {offset
       c40tW: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XJW_info" {
     lvl3_s3XJW_info:
         const lvl3_s3XJW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3XJZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c40uc: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c40ud; else goto c40ue;
       c40ud: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40ue: // global
           I64[Sp - 40] = block_c40u5_info;
           _s3XJA::P64 = P64[R1 + 7];
           _s3XJD::P64 = P64[R1 + 15];
           _s3XJE::P64 = P64[R1 + 23];
           _s3XJY::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3XJA::P64;
           P64[Sp - 24] = _s3XJD::P64;
           P64[Sp - 16] = _s3XJE::P64;
           P64[Sp - 8] = _s3XJY::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u40v3; else goto c40u6;
       u40v3: // global
           call _c40u5(R1) args: 0, res: 0, upd: 0;
       c40u6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3XJZ_info" {
     w2_s3XJZ_info:
         const w2_s3XJZ_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c40u5() //  [R1]
         { []
         }
     {offset
       c40u5: // global
           if (R1 & 7 == 5) goto c40ua; else goto u40uX;
       c40ua: // global
           I64[Sp - 8] = block_c40uk_info;
           _s3XK1::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3XK1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40v1; else goto c40um;
       u40v1: // global
           call _c40uk(R1) args: 0, res: 0, upd: 0;
       c40um: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40uX: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c40uU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40u5_info" {
     block_c40u5_info:
         const _c40u5;
         const 4;
         const 30;
 },
 _c40uk() //  [R1]
         { []
         }
     {offset
       c40uk: // global
           if (R1 & 7 == 1) goto u40uY; else goto c40ux;
       u40uY: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40uU() args: 0, res: 0, upd: 0;
       c40ux: // global
           I64[Sp - 8] = block_c40uv_info;
           _s3XK5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XK5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40v4; else goto c40uy;
       u40v4: // global
           call _c40uv(R1) args: 0, res: 0, upd: 0;
       c40uy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c40uk_info" {
     block_c40uk_info:
         const _c40uk;
         const 5;
         const 30;
 },
 _c40uv() //  [R1]
         { []
         }
     {offset
       c40uv: // global
           if (I64[R1 + 7] == 45) goto c40uJ; else goto u40uZ;
       c40uJ: // global
           _s3XK5::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c40uI_info;
           R1 = _s3XK5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u40v6; else goto c40uK;
       u40v6: // global
           call _c40uI(R1) args: 0, res: 0, upd: 0;
       c40uK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40uZ: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c40uU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40uv_info" {
     block_c40uv_info:
         const _c40uv;
         const 6;
         const 30;
 },
 _c40uI() //  [R1]
         { []
         }
     {offset
       c40uI: // global
           if (R1 & 7 == 1) goto c40uQ; else goto u40v0;
       c40uQ: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u40v0: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40uU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40uI_info" {
     block_c40uI_info:
         const _c40uI;
         const 5;
         const 30;
 },
 _c40uU() //  []
         { []
         }
     {offset
       c40uU: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3XKc_entry() //  [R1]
         { []
         }
     {offset
       c40vd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40ve; else goto c40vf;
       c40ve: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40vf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3XJZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XKc_info" {
     lvl117_s3XKc_info:
         const lvl117_s3XKc_entry;
         const 1;
         const 16;
 },
 sat_s3XKj_entry() //  [R1]
         { []
         }
     {offset
       c40vk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40vl; else goto c40vm;
       c40vl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40vm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XKj_info" {
     sat_s3XKj_info:
         const sat_s3XKj_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+920;
 },
 sat_s3XKh_entry() //  [R1, R2]
         { []
         }
     {offset
       c40vz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40vA; else goto c40vB;
       c40vA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40vB: // global
           I64[Sp - 16] = block_c40vs_info;
           _s3XKc::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XKc::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40vI; else goto c40vt;
       u40vI: // global
           call _c40vs(R1) args: 0, res: 0, upd: 0;
       c40vt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XKh_info" {
     sat_s3XKh_info:
         const sat_s3XKh_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40vs() //  [R1]
         { []
         }
     {offset
       c40vs: // global
           if (R1 & 7 == 1) goto c40vw; else goto c40vx;
       c40vw: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40vx: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40vs_info" {
     block_c40vs_info:
         const _c40vs;
         const 1;
         const 30;
 },
 lvl116_s3XJF_entry() //  [R1]
         { []
         }
     {offset
       c40vK: // global
           _s3XJF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40vL; else goto c40vM;
       c40vM: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c40vO; else goto c40vN;
       c40vO: // global
           HpAlloc = 208;
           goto c40vL;
       c40vL: // global
           R1 = _s3XJF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40vN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XJF::P64;
           _s3XJA::P64 = P64[_s3XJF::P64 + 16];
           _s3XJD::P64 = P64[_s3XJF::P64 + 24];
           _s3XJE::P64 = P64[_s3XJF::P64 + 32];
           I64[Hp - 200] = lvl2_s3XJG_info;
           P64[Hp - 184] = _s3XJA::P64;
           P64[Hp - 176] = _s3XJD::P64;
           P64[Hp - 168] = _s3XJE::P64;
           I64[Hp - 160] = k_s3XJU_info;
           P64[Hp - 152] = Hp - 200;
           I64[Hp - 144] = lvl3_s3XJW_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3XJZ_info;
           P64[Hp - 104] = _s3XJA::P64;
           P64[Hp - 96] = _s3XJD::P64;
           P64[Hp - 88] = _s3XJE::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3XKc_info;
           _c40u0::P64 = Hp - 111;
           P64[Hp - 56] = _c40u0::P64;
           I64[Hp - 48] = sat_s3XKj_info;
           P64[Hp - 32] = _c40u0::P64;
           I64[Hp - 24] = sat_s3XKh_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XJF_info" {
     lvl116_s3XJF_info:
         const lvl116_s3XJF_entry;
         const 3;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XKk_entry() //  [R1]
         { []
         }
     {offset
       c40vU: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XKk_info" {
     k_s3XKk_info:
         const k_s3XKk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XKn_entry() //  [R1, R2]
         { []
         }
     {offset
       c40w2: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XKn_info" {
     sat_s3XKn_info:
         const sat_s3XKn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XKo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40w6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c40wa; else goto c40w9;
       c40wa: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40w9: // global
           _s3XJA::P64 = P64[R1 + 6];
           I64[Hp - 80] = lvl116_s3XJF_info;
           P64[Hp - 64] = _s3XJA::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3XKk_info;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3XKn_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XKo_info" {
     sat_s3XKo_info:
         const sat_s3XKo_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S3Y0k_srt+920;
 },
 section ""relreadonly" . u40wg_srtd" {
     u40wg_srtd:
         const S3Y0k_srt+216;
         const 100;
         const 1;
         const 34443624448;
 },
 GHC.Read.$fReadDouble_$sreadNumber_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c40wb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c40wf; else goto c40we;
       c40wf: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadDouble_$sreadNumber_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40we: // global
           I64[Hp - 8] = sat_s3XKo_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$sreadNumber_info" {
     GHC.Read.$fReadDouble_$sreadNumber_info:
         const GHC.Read.$fReadDouble_$sreadNumber_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u40wg_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.417748518 UTC

[section ""data" . GHC.Read.$fReadFloat_$sreadNumber_closure" {
     GHC.Read.$fReadFloat_$sreadNumber_closure:
         const GHC.Read.$fReadFloat_$sreadNumber_info;
         const 0;
 },
 sat_s3XKy_entry() //  [R1]
         { []
         }
     {offset
       c40zn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40zo; else goto c40zp;
       c40zo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40zp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Float.negateFloat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XKy_info" {
     sat_s3XKy_info:
         const sat_s3XKy_entry;
         const 1;
         const 16;
 },
 lvl3_s3XKw_entry() //  [R1, R2]
         { []
         }
     {offset
       c40zq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40zu; else goto c40zt;
       c40zu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40zt: // global
           _s3XKt::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3XKy_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = _s3XKt::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XKw_info" {
     lvl3_s3XKw_info:
         const lvl3_s3XKw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3XKz_entry() //  [R1]
         { []
         }
     {offset
       c40zz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40zA; else goto c40zB;
       c40zA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40zB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XKz_info" {
     lvl117_s3XKz_info:
         const lvl117_s3XKz_entry;
         const 3;
         const 15;
 },
 sat_s3XKH_entry() //  [R1, R2]
         { []
         }
     {offset
       c40zL: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XKH_info" {
     sat_s3XKH_info:
         const sat_s3XKH_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3XKI_entry() //  [R1]
         { []
         }
     {offset
       c40zO: // global
           _s3XKI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40zP; else goto c40zQ;
       c40zQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40zS; else goto c40zR;
       c40zS: // global
           HpAlloc = 32;
           goto c40zP;
       c40zP: // global
           R1 = _s3XKI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40zR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XKI::P64;
           _s3XKp::P64 = P64[_s3XKI::P64 + 16];
           _s3XKs::P64 = P64[_s3XKI::P64 + 24];
           _s3XKw::P64 = P64[_s3XKI::P64 + 32];
           I64[Hp - 24] = sat_s3XKH_info;
           P64[Hp - 16] = _s3XKp::P64;
           P64[Hp - 8] = _s3XKs::P64;
           P64[Hp] = _s3XKw::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XKI_info" {
     sat_s3XKI_info:
         const sat_s3XKI_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+920;
 },
 sat_s3XKE_entry() //  [R1, R2]
         { []
         }
     {offset
       c40A5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40A6; else goto c40A7;
       c40A6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40A7: // global
           I64[Sp - 16] = block_c40zY_info;
           _s3XKz::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XKz::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40Ae; else goto c40zZ;
       u40Ae: // global
           call _c40zY(R1) args: 0, res: 0, upd: 0;
       c40zZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XKE_info" {
     sat_s3XKE_info:
         const sat_s3XKE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40zY() //  [R1]
         { []
         }
     {offset
       c40zY: // global
           if (R1 & 7 == 1) goto c40A2; else goto c40A3;
       c40A2: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40A3: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40zY_info" {
     block_c40zY_info:
         const _c40zY;
         const 1;
         const 30;
 },
 lvl2_s3XKv_entry() //  [R1]
         { []
         }
     {offset
       c40Ag: // global
           _s3XKv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40Ah; else goto c40Ai;
       c40Ai: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c40Ak; else goto c40Aj;
       c40Ak: // global
           HpAlloc = 128;
           goto c40Ah;
       c40Ah: // global
           R1 = _s3XKv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40Aj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XKv::P64;
           _s3XKp::P64 = P64[_s3XKv::P64 + 16];
           _s3XKs::P64 = P64[_s3XKv::P64 + 24];
           _s3XKt::P64 = P64[_s3XKv::P64 + 32];
           I64[Hp - 120] = lvl3_s3XKw_info;
           P64[Hp - 112] = _s3XKt::P64;
           I64[Hp - 104] = lvl117_s3XKz_info;
           P64[Hp - 88] = _s3XKp::P64;
           P64[Hp - 80] = _s3XKs::P64;
           _c40ze::P64 = Hp - 119;
           P64[Hp - 72] = _c40ze::P64;
           I64[Hp - 64] = sat_s3XKI_info;
           P64[Hp - 48] = _s3XKp::P64;
           P64[Hp - 40] = _s3XKs::P64;
           P64[Hp - 32] = _c40ze::P64;
           I64[Hp - 24] = sat_s3XKE_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3XKv_info" {
     lvl2_s3XKv_info:
         const lvl2_s3XKv_entry;
         const 3;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XKJ_entry() //  [R1]
         { []
         }
     {offset
       c40Aq: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XKJ_info" {
     k_s3XKJ_info:
         const k_s3XKJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3XKL_entry() //  [R1, R2]
         { []
         }
     {offset
       c40Ay: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XKL_info" {
     lvl3_s3XKL_info:
         const lvl3_s3XKL_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3XKO_entry() //  [R1, R2]
         { []
         }
     {offset
       c40AO: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c40AP; else goto c40AQ;
       c40AP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40AQ: // global
           I64[Sp - 40] = block_c40AH_info;
           _s3XKp::P64 = P64[R1 + 7];
           _s3XKs::P64 = P64[R1 + 15];
           _s3XKt::P64 = P64[R1 + 23];
           _s3XKN::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3XKp::P64;
           P64[Sp - 24] = _s3XKs::P64;
           P64[Sp - 16] = _s3XKt::P64;
           P64[Sp - 8] = _s3XKN::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u40BF; else goto c40AI;
       u40BF: // global
           call _c40AH(R1) args: 0, res: 0, upd: 0;
       c40AI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3XKO_info" {
     w2_s3XKO_info:
         const w2_s3XKO_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c40AH() //  [R1]
         { []
         }
     {offset
       c40AH: // global
           if (R1 & 7 == 5) goto c40AM; else goto u40Bz;
       c40AM: // global
           I64[Sp - 8] = block_c40AW_info;
           _s3XKQ::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3XKQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40BD; else goto c40AY;
       u40BD: // global
           call _c40AW(R1) args: 0, res: 0, upd: 0;
       c40AY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40Bz: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c40Bw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40AH_info" {
     block_c40AH_info:
         const _c40AH;
         const 4;
         const 30;
 },
 _c40AW() //  [R1]
         { []
         }
     {offset
       c40AW: // global
           if (R1 & 7 == 1) goto u40BA; else goto c40B9;
       u40BA: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40Bw() args: 0, res: 0, upd: 0;
       c40B9: // global
           I64[Sp - 8] = block_c40B7_info;
           _s3XKU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XKU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40BG; else goto c40Ba;
       u40BG: // global
           call _c40B7(R1) args: 0, res: 0, upd: 0;
       c40Ba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c40AW_info" {
     block_c40AW_info:
         const _c40AW;
         const 5;
         const 30;
 },
 _c40B7() //  [R1]
         { []
         }
     {offset
       c40B7: // global
           if (I64[R1 + 7] == 45) goto c40Bl; else goto u40BB;
       c40Bl: // global
           _s3XKU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c40Bk_info;
           R1 = _s3XKU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u40BI; else goto c40Bm;
       u40BI: // global
           call _c40Bk(R1) args: 0, res: 0, upd: 0;
       c40Bm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40BB: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c40Bw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40B7_info" {
     block_c40B7_info:
         const _c40B7;
         const 6;
         const 30;
 },
 _c40Bk() //  [R1]
         { []
         }
     {offset
       c40Bk: // global
           if (R1 & 7 == 1) goto c40Bs; else goto u40BC;
       c40Bs: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u40BC: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40Bw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40Bk_info" {
     block_c40Bk_info:
         const _c40Bk;
         const 5;
         const 30;
 },
 _c40Bw() //  []
         { []
         }
     {offset
       c40Bw: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3XL1_entry() //  [R1]
         { []
         }
     {offset
       c40BP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40BQ; else goto c40BR;
       c40BQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40BR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3XKO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XL1_info" {
     lvl117_s3XL1_info:
         const lvl117_s3XL1_entry;
         const 1;
         const 16;
 },
 sat_s3XL8_entry() //  [R1]
         { []
         }
     {offset
       c40BW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40BX; else goto c40BY;
       c40BX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40BY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XL8_info" {
     sat_s3XL8_info:
         const sat_s3XL8_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+920;
 },
 sat_s3XL6_entry() //  [R1, R2]
         { []
         }
     {offset
       c40Cb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Cc; else goto c40Cd;
       c40Cc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40Cd: // global
           I64[Sp - 16] = block_c40C4_info;
           _s3XL1::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XL1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40Ck; else goto c40C5;
       u40Ck: // global
           call _c40C4(R1) args: 0, res: 0, upd: 0;
       c40C5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XL6_info" {
     sat_s3XL6_info:
         const sat_s3XL6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40C4() //  [R1]
         { []
         }
     {offset
       c40C4: // global
           if (R1 & 7 == 1) goto c40C8; else goto c40C9;
       c40C8: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40C9: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40C4_info" {
     block_c40C4_info:
         const _c40C4;
         const 1;
         const 30;
 },
 lvl116_s3XKu_entry() //  [R1]
         { []
         }
     {offset
       c40Cm: // global
           _s3XKu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40Cn; else goto c40Co;
       c40Co: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c40Cq; else goto c40Cp;
       c40Cq: // global
           HpAlloc = 208;
           goto c40Cn;
       c40Cn: // global
           R1 = _s3XKu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40Cp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XKu::P64;
           _s3XKp::P64 = P64[_s3XKu::P64 + 16];
           _s3XKs::P64 = P64[_s3XKu::P64 + 24];
           _s3XKt::P64 = P64[_s3XKu::P64 + 32];
           I64[Hp - 200] = lvl2_s3XKv_info;
           P64[Hp - 184] = _s3XKp::P64;
           P64[Hp - 176] = _s3XKs::P64;
           P64[Hp - 168] = _s3XKt::P64;
           I64[Hp - 160] = k_s3XKJ_info;
           P64[Hp - 152] = Hp - 200;
           I64[Hp - 144] = lvl3_s3XKL_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3XKO_info;
           P64[Hp - 104] = _s3XKp::P64;
           P64[Hp - 96] = _s3XKs::P64;
           P64[Hp - 88] = _s3XKt::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3XL1_info;
           _c40AC::P64 = Hp - 111;
           P64[Hp - 56] = _c40AC::P64;
           I64[Hp - 48] = sat_s3XL8_info;
           P64[Hp - 32] = _c40AC::P64;
           I64[Hp - 24] = sat_s3XL6_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XKu_info" {
     lvl116_s3XKu_info:
         const lvl116_s3XKu_entry;
         const 3;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XL9_entry() //  [R1]
         { []
         }
     {offset
       c40Cw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XL9_info" {
     k_s3XL9_info:
         const k_s3XL9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XLc_entry() //  [R1, R2]
         { []
         }
     {offset
       c40CE: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XLc_info" {
     sat_s3XLc_info:
         const sat_s3XLc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XLd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40CI: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c40CM; else goto c40CL;
       c40CM: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40CL: // global
           _s3XKp::P64 = P64[R1 + 6];
           I64[Hp - 80] = lvl116_s3XKu_info;
           P64[Hp - 64] = _s3XKp::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3XL9_info;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3XLc_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XLd_info" {
     sat_s3XLd_info:
         const sat_s3XLd_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S3Y0k_srt+920;
 },
 section ""relreadonly" . u40CS_srtd" {
     u40CS_srtd:
         const S3Y0k_srt+216;
         const 101;
         const 1;
         const 68803362816;
 },
 GHC.Read.$fReadFloat_$sreadNumber_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c40CN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c40CR; else goto c40CQ;
       c40CR: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadFloat_$sreadNumber_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40CQ: // global
           I64[Hp - 8] = sat_s3XLd_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$sreadNumber_info" {
     GHC.Read.$fReadFloat_$sreadNumber_info:
         const GHC.Read.$fReadFloat_$sreadNumber_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u40CS_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.47211287 UTC

[section ""data" . GHC.Read.$fReadInt_$sreadNumber_closure" {
     GHC.Read.$fReadInt_$sreadNumber_closure:
         const GHC.Read.$fReadInt_$sreadNumber_info;
         const 0;
 },
 sat_s3XLn_entry() //  [R1]
         { []
         }
     {offset
       c40FZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40G0; else goto c40G1;
       c40G0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40G1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.$fNumInt_$cnegate_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XLn_info" {
     sat_s3XLn_info:
         const sat_s3XLn_entry;
         const 1;
         const 16;
 },
 lvl3_s3XLl_entry() //  [R1, R2]
         { []
         }
     {offset
       c40G2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40G6; else goto c40G5;
       c40G6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40G5: // global
           _s3XLi::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s3XLn_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = _s3XLi::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XLl_info" {
     lvl3_s3XLl_info:
         const lvl3_s3XLl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl117_s3XLo_entry() //  [R1]
         { []
         }
     {offset
       c40Gb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Gc; else goto c40Gd;
       c40Gc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40Gd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XLo_info" {
     lvl117_s3XLo_info:
         const lvl117_s3XLo_entry;
         const 3;
         const 15;
 },
 sat_s3XLw_entry() //  [R1, R2]
         { []
         }
     {offset
       c40Gn: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XLw_info" {
     sat_s3XLw_info:
         const sat_s3XLw_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3XLx_entry() //  [R1]
         { []
         }
     {offset
       c40Gq: // global
           _s3XLx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40Gr; else goto c40Gs;
       c40Gs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40Gu; else goto c40Gt;
       c40Gu: // global
           HpAlloc = 32;
           goto c40Gr;
       c40Gr: // global
           R1 = _s3XLx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40Gt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XLx::P64;
           _s3XLe::P64 = P64[_s3XLx::P64 + 16];
           _s3XLh::P64 = P64[_s3XLx::P64 + 24];
           _s3XLl::P64 = P64[_s3XLx::P64 + 32];
           I64[Hp - 24] = sat_s3XLw_info;
           P64[Hp - 16] = _s3XLe::P64;
           P64[Hp - 8] = _s3XLh::P64;
           P64[Hp] = _s3XLl::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XLx_info" {
     sat_s3XLx_info:
         const sat_s3XLx_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+920;
 },
 sat_s3XLt_entry() //  [R1, R2]
         { []
         }
     {offset
       c40GH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40GI; else goto c40GJ;
       c40GI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40GJ: // global
           I64[Sp - 16] = block_c40GA_info;
           _s3XLo::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XLo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40GQ; else goto c40GB;
       u40GQ: // global
           call _c40GA(R1) args: 0, res: 0, upd: 0;
       c40GB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XLt_info" {
     sat_s3XLt_info:
         const sat_s3XLt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40GA() //  [R1]
         { []
         }
     {offset
       c40GA: // global
           if (R1 & 7 == 1) goto c40GE; else goto c40GF;
       c40GE: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40GF: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40GA_info" {
     block_c40GA_info:
         const _c40GA;
         const 1;
         const 30;
 },
 lvl2_s3XLk_entry() //  [R1]
         { []
         }
     {offset
       c40GS: // global
           _s3XLk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40GT; else goto c40GU;
       c40GU: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c40GW; else goto c40GV;
       c40GW: // global
           HpAlloc = 128;
           goto c40GT;
       c40GT: // global
           R1 = _s3XLk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40GV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XLk::P64;
           _s3XLe::P64 = P64[_s3XLk::P64 + 16];
           _s3XLh::P64 = P64[_s3XLk::P64 + 24];
           _s3XLi::P64 = P64[_s3XLk::P64 + 32];
           I64[Hp - 120] = lvl3_s3XLl_info;
           P64[Hp - 112] = _s3XLi::P64;
           I64[Hp - 104] = lvl117_s3XLo_info;
           P64[Hp - 88] = _s3XLe::P64;
           P64[Hp - 80] = _s3XLh::P64;
           _c40FQ::P64 = Hp - 119;
           P64[Hp - 72] = _c40FQ::P64;
           I64[Hp - 64] = sat_s3XLx_info;
           P64[Hp - 48] = _s3XLe::P64;
           P64[Hp - 40] = _s3XLh::P64;
           P64[Hp - 32] = _c40FQ::P64;
           I64[Hp - 24] = sat_s3XLt_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3XLk_info" {
     lvl2_s3XLk_info:
         const lvl2_s3XLk_entry;
         const 3;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XLy_entry() //  [R1]
         { []
         }
     {offset
       c40H2: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XLy_info" {
     k_s3XLy_info:
         const k_s3XLy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3XLA_entry() //  [R1, R2]
         { []
         }
     {offset
       c40Ha: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XLA_info" {
     lvl3_s3XLA_info:
         const lvl3_s3XLA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3XLD_entry() //  [R1, R2]
         { []
         }
     {offset
       c40Hq: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c40Hr; else goto c40Hs;
       c40Hr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40Hs: // global
           I64[Sp - 40] = block_c40Hj_info;
           _s3XLe::P64 = P64[R1 + 7];
           _s3XLh::P64 = P64[R1 + 15];
           _s3XLi::P64 = P64[R1 + 23];
           _s3XLC::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3XLe::P64;
           P64[Sp - 24] = _s3XLh::P64;
           P64[Sp - 16] = _s3XLi::P64;
           P64[Sp - 8] = _s3XLC::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u40Ih; else goto c40Hk;
       u40Ih: // global
           call _c40Hj(R1) args: 0, res: 0, upd: 0;
       c40Hk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3XLD_info" {
     w2_s3XLD_info:
         const w2_s3XLD_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c40Hj() //  [R1]
         { []
         }
     {offset
       c40Hj: // global
           if (R1 & 7 == 5) goto c40Ho; else goto u40Ib;
       c40Ho: // global
           I64[Sp - 8] = block_c40Hy_info;
           _s3XLF::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3XLF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40If; else goto c40HA;
       u40If: // global
           call _c40Hy(R1) args: 0, res: 0, upd: 0;
       c40HA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40Ib: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c40I8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40Hj_info" {
     block_c40Hj_info:
         const _c40Hj;
         const 4;
         const 30;
 },
 _c40Hy() //  [R1]
         { []
         }
     {offset
       c40Hy: // global
           if (R1 & 7 == 1) goto u40Ic; else goto c40HL;
       u40Ic: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40I8() args: 0, res: 0, upd: 0;
       c40HL: // global
           I64[Sp - 8] = block_c40HJ_info;
           _s3XLJ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XLJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40Ii; else goto c40HM;
       u40Ii: // global
           call _c40HJ(R1) args: 0, res: 0, upd: 0;
       c40HM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c40Hy_info" {
     block_c40Hy_info:
         const _c40Hy;
         const 5;
         const 30;
 },
 _c40HJ() //  [R1]
         { []
         }
     {offset
       c40HJ: // global
           if (I64[R1 + 7] == 45) goto c40HX; else goto u40Id;
       c40HX: // global
           _s3XLJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c40HW_info;
           R1 = _s3XLJ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u40Ik; else goto c40HY;
       u40Ik: // global
           call _c40HW(R1) args: 0, res: 0, upd: 0;
       c40HY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40Id: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c40I8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40HJ_info" {
     block_c40HJ_info:
         const _c40HJ;
         const 6;
         const 30;
 },
 _c40HW() //  [R1]
         { []
         }
     {offset
       c40HW: // global
           if (R1 & 7 == 1) goto c40I4; else goto u40Ie;
       c40I4: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u40Ie: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40I8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40HW_info" {
     block_c40HW_info:
         const _c40HW;
         const 5;
         const 30;
 },
 _c40I8() //  []
         { []
         }
     {offset
       c40I8: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3XLQ_entry() //  [R1]
         { []
         }
     {offset
       c40Ir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Is; else goto c40It;
       c40Is: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40It: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3XLD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XLQ_info" {
     lvl117_s3XLQ_info:
         const lvl117_s3XLQ_entry;
         const 1;
         const 16;
 },
 sat_s3XLX_entry() //  [R1]
         { []
         }
     {offset
       c40Iy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Iz; else goto c40IA;
       c40Iz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40IA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XLX_info" {
     sat_s3XLX_info:
         const sat_s3XLX_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+920;
 },
 sat_s3XLV_entry() //  [R1, R2]
         { []
         }
     {offset
       c40IN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40IO; else goto c40IP;
       c40IO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40IP: // global
           I64[Sp - 16] = block_c40IG_info;
           _s3XLQ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XLQ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40IW; else goto c40IH;
       u40IW: // global
           call _c40IG(R1) args: 0, res: 0, upd: 0;
       c40IH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XLV_info" {
     sat_s3XLV_info:
         const sat_s3XLV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40IG() //  [R1]
         { []
         }
     {offset
       c40IG: // global
           if (R1 & 7 == 1) goto c40IK; else goto c40IL;
       c40IK: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40IL: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40IG_info" {
     block_c40IG_info:
         const _c40IG;
         const 1;
         const 30;
 },
 lvl116_s3XLj_entry() //  [R1]
         { []
         }
     {offset
       c40IY: // global
           _s3XLj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40IZ; else goto c40J0;
       c40J0: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c40J2; else goto c40J1;
       c40J2: // global
           HpAlloc = 208;
           goto c40IZ;
       c40IZ: // global
           R1 = _s3XLj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40J1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XLj::P64;
           _s3XLe::P64 = P64[_s3XLj::P64 + 16];
           _s3XLh::P64 = P64[_s3XLj::P64 + 24];
           _s3XLi::P64 = P64[_s3XLj::P64 + 32];
           I64[Hp - 200] = lvl2_s3XLk_info;
           P64[Hp - 184] = _s3XLe::P64;
           P64[Hp - 176] = _s3XLh::P64;
           P64[Hp - 168] = _s3XLi::P64;
           I64[Hp - 160] = k_s3XLy_info;
           P64[Hp - 152] = Hp - 200;
           I64[Hp - 144] = lvl3_s3XLA_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3XLD_info;
           P64[Hp - 104] = _s3XLe::P64;
           P64[Hp - 96] = _s3XLh::P64;
           P64[Hp - 88] = _s3XLi::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3XLQ_info;
           _c40He::P64 = Hp - 111;
           P64[Hp - 56] = _c40He::P64;
           I64[Hp - 48] = sat_s3XLX_info;
           P64[Hp - 32] = _c40He::P64;
           I64[Hp - 24] = sat_s3XLV_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XLj_info" {
     lvl116_s3XLj_info:
         const lvl116_s3XLj_entry;
         const 3;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XLY_entry() //  [R1]
         { []
         }
     {offset
       c40J8: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XLY_info" {
     k_s3XLY_info:
         const k_s3XLY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XM1_entry() //  [R1, R2]
         { []
         }
     {offset
       c40Jg: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XM1_info" {
     sat_s3XM1_info:
         const sat_s3XM1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XM2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40Jk: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c40Jo; else goto c40Jn;
       c40Jo: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40Jn: // global
           _s3XLe::P64 = P64[R1 + 6];
           I64[Hp - 80] = lvl116_s3XLj_info;
           P64[Hp - 64] = _s3XLe::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3XLY_info;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3XM1_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XM2_info" {
     sat_s3XM2_info:
         const sat_s3XM2_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S3Y0k_srt+920;
 },
 section ""relreadonly" . u40Ju_srtd" {
     u40Ju_srtd:
         const S3Y0k_srt+216;
         const 102;
         const 1;
         const 137522839552;
 },
 GHC.Read.$fReadInt_$sreadNumber_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c40Jp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c40Jt; else goto c40Js;
       c40Jt: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadInt_$sreadNumber_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40Js: // global
           I64[Hp - 8] = sat_s3XM2_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt_$sreadNumber_info" {
     GHC.Read.$fReadInt_$sreadNumber_info:
         const GHC.Read.$fReadInt_$sreadNumber_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u40Ju_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.526750147 UTC

[section ""data" . GHC.Read.readNumber1_closure" {
     GHC.Read.readNumber1_closure:
         const GHC.Read.readNumber1_info;
         const 0;
 },
 sat_s3XMd_entry() //  [R1]
         { []
         }
     {offset
       c40MB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c40MC; else goto c40MD;
       c40MC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40MD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XMd_info" {
     sat_s3XMd_info:
         const sat_s3XMd_entry;
         const 2;
         const 18;
 },
 lvl3_s3XMb_entry() //  [R1, R2]
         { []
         }
     {offset
       c40ME: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40MI; else goto c40MH;
       c40MI: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40MH: // global
           _s3XM3::P64 = P64[R1 + 7];
           _s3XM8::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s3XMd_info;
           P64[Hp - 8] = _s3XM3::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s3XM8::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XMb_info" {
     lvl3_s3XMb_info:
         const lvl3_s3XMb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 lvl117_s3XMe_entry() //  [R1]
         { []
         }
     {offset
       c40MN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40MO; else goto c40MP;
       c40MO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40MP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XMe_info" {
     lvl117_s3XMe_info:
         const lvl117_s3XMe_entry;
         const 3;
         const 15;
 },
 sat_s3XMm_entry() //  [R1, R2]
         { []
         }
     {offset
       c40MZ: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XMm_info" {
     sat_s3XMm_info:
         const sat_s3XMm_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3XMn_entry() //  [R1]
         { []
         }
     {offset
       c40N2: // global
           _s3XMn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40N3; else goto c40N4;
       c40N4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c40N6; else goto c40N5;
       c40N6: // global
           HpAlloc = 32;
           goto c40N3;
       c40N3: // global
           R1 = _s3XMn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40N5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XMn::P64;
           _s3XM4::P64 = P64[_s3XMn::P64 + 16];
           _s3XM7::P64 = P64[_s3XMn::P64 + 24];
           _s3XMb::P64 = P64[_s3XMn::P64 + 32];
           I64[Hp - 24] = sat_s3XMm_info;
           P64[Hp - 16] = _s3XM4::P64;
           P64[Hp - 8] = _s3XM7::P64;
           P64[Hp] = _s3XMb::P64;
           R2 = Hp - 23;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XMn_info" {
     sat_s3XMn_info:
         const sat_s3XMn_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+920;
 },
 sat_s3XMj_entry() //  [R1, R2]
         { []
         }
     {offset
       c40Nj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Nk; else goto c40Nl;
       c40Nk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40Nl: // global
           I64[Sp - 16] = block_c40Nc_info;
           _s3XMe::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XMe::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40Ns; else goto c40Nd;
       u40Ns: // global
           call _c40Nc(R1) args: 0, res: 0, upd: 0;
       c40Nd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XMj_info" {
     sat_s3XMj_info:
         const sat_s3XMj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40Nc() //  [R1]
         { []
         }
     {offset
       c40Nc: // global
           if (R1 & 7 == 1) goto c40Ng; else goto c40Nh;
       c40Ng: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40Nh: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40Nc_info" {
     block_c40Nc_info:
         const _c40Nc;
         const 1;
         const 30;
 },
 lvl2_s3XMa_entry() //  [R1]
         { []
         }
     {offset
       c40Nu: // global
           _s3XMa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40Nv; else goto c40Nw;
       c40Nw: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c40Ny; else goto c40Nx;
       c40Ny: // global
           HpAlloc = 136;
           goto c40Nv;
       c40Nv: // global
           R1 = _s3XMa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40Nx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XMa::P64;
           _s3XM3::P64 = P64[_s3XMa::P64 + 16];
           _s3XM4::P64 = P64[_s3XMa::P64 + 24];
           _s3XM7::P64 = P64[_s3XMa::P64 + 32];
           _s3XM8::P64 = P64[_s3XMa::P64 + 40];
           I64[Hp - 128] = lvl3_s3XMb_info;
           P64[Hp - 120] = _s3XM3::P64;
           P64[Hp - 112] = _s3XM8::P64;
           I64[Hp - 104] = lvl117_s3XMe_info;
           P64[Hp - 88] = _s3XM4::P64;
           P64[Hp - 80] = _s3XM7::P64;
           _c40Ms::P64 = Hp - 127;
           P64[Hp - 72] = _c40Ms::P64;
           I64[Hp - 64] = sat_s3XMn_info;
           P64[Hp - 48] = _s3XM4::P64;
           P64[Hp - 40] = _s3XM7::P64;
           P64[Hp - 32] = _c40Ms::P64;
           I64[Hp - 24] = sat_s3XMj_info;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 64;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3XMa_info" {
     lvl2_s3XMa_info:
         const lvl2_s3XMa_entry;
         const 4;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XMo_entry() //  [R1]
         { []
         }
     {offset
       c40NE: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XMo_info" {
     k_s3XMo_info:
         const k_s3XMo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 lvl3_s3XMq_entry() //  [R1, R2]
         { []
         }
     {offset
       c40NM: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_s3XMq_info" {
     lvl3_s3XMq_info:
         const lvl3_s3XMq_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 w2_s3XMt_entry() //  [R1, R2]
         { []
         }
     {offset
       c40O2: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c40O3; else goto c40O4;
       c40O3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40O4: // global
           I64[Sp - 40] = block_c40NV_info;
           _s3XM4::P64 = P64[R1 + 7];
           _s3XM7::P64 = P64[R1 + 15];
           _s3XM8::P64 = P64[R1 + 23];
           _s3XMs::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 32] = _s3XM4::P64;
           P64[Sp - 24] = _s3XM7::P64;
           P64[Sp - 16] = _s3XM8::P64;
           P64[Sp - 8] = _s3XMs::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u40OT; else goto c40NW;
       u40OT: // global
           call _c40NV(R1) args: 0, res: 0, upd: 0;
       c40NW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3XMt_info" {
     w2_s3XMt_info:
         const w2_s3XMt_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c40NV() //  [R1]
         { []
         }
     {offset
       c40NV: // global
           if (R1 & 7 == 5) goto c40O0; else goto u40ON;
       c40O0: // global
           I64[Sp - 8] = block_c40Oa_info;
           _s3XMv::P64 = R1;
           R1 = P64[R1 + 3];
           P64[Sp] = _s3XMv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40OR; else goto c40Oc;
       u40OR: // global
           call _c40Oa(R1) args: 0, res: 0, upd: 0;
       c40Oc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40ON: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c40OK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40NV_info" {
     block_c40NV_info:
         const _c40NV;
         const 4;
         const 30;
 },
 _c40Oa() //  [R1]
         { []
         }
     {offset
       c40Oa: // global
           if (R1 & 7 == 1) goto u40OO; else goto c40On;
       u40OO: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40OK() args: 0, res: 0, upd: 0;
       c40On: // global
           I64[Sp - 8] = block_c40Ol_info;
           _s3XMz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XMz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u40OU; else goto c40Oo;
       u40OU: // global
           call _c40Ol(R1) args: 0, res: 0, upd: 0;
       c40Oo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c40Oa_info" {
     block_c40Oa_info:
         const _c40Oa;
         const 5;
         const 30;
 },
 _c40Ol() //  [R1]
         { []
         }
     {offset
       c40Ol: // global
           if (I64[R1 + 7] == 45) goto c40Oz; else goto u40OP;
       c40Oz: // global
           _s3XMz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c40Oy_info;
           R1 = _s3XMz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u40OW; else goto c40OA;
       u40OW: // global
           call _c40Oy(R1) args: 0, res: 0, upd: 0;
       c40OA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u40OP: // global
           P64[Sp + 48] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c40OK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40Ol_info" {
     block_c40Ol_info:
         const _c40Ol;
         const 6;
         const 30;
 },
 _c40Oy() //  [R1]
         { []
         }
     {offset
       c40Oy: // global
           if (R1 & 7 == 1) goto c40OG; else goto u40OQ;
       c40OG: // global
           R1 = P64[Sp + 40];
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u40OQ: // global
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c40OK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c40Oy_info" {
     block_c40Oy_info:
         const _c40Oy;
         const 5;
         const 30;
 },
 _c40OK() //  []
         { []
         }
     {offset
       c40OK: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           R1 = P64[Sp];
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3XMG_entry() //  [R1]
         { []
         }
     {offset
       c40P3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40P4; else goto c40P5;
       c40P4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40P5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3XMt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XMG_info" {
     lvl117_s3XMG_info:
         const lvl117_s3XMG_entry;
         const 1;
         const 16;
 },
 sat_s3XMN_entry() //  [R1]
         { []
         }
     {offset
       c40Pa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Pb; else goto c40Pc;
       c40Pb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40Pc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XMN_info" {
     sat_s3XMN_info:
         const sat_s3XMN_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+920;
 },
 sat_s3XML_entry() //  [R1, R2]
         { []
         }
     {offset
       c40Pp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Pq; else goto c40Pr;
       c40Pq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c40Pr: // global
           I64[Sp - 16] = block_c40Pi_info;
           _s3XMG::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XMG::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u40Py; else goto c40Pj;
       u40Py: // global
           call _c40Pi(R1) args: 0, res: 0, upd: 0;
       c40Pj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XML_info" {
     sat_s3XML_info:
         const sat_s3XML_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c40Pi() //  [R1]
         { []
         }
     {offset
       c40Pi: // global
           if (R1 & 7 == 1) goto c40Pm; else goto c40Pn;
       c40Pm: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c40Pn: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c40Pi_info" {
     block_c40Pi_info:
         const _c40Pi;
         const 1;
         const 30;
 },
 lvl116_s3XM9_entry() //  [R1]
         { []
         }
     {offset
       c40PA: // global
           _s3XM9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c40PB; else goto c40PC;
       c40PC: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto c40PE; else goto c40PD;
       c40PE: // global
           HpAlloc = 216;
           goto c40PB;
       c40PB: // global
           R1 = _s3XM9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40PD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XM9::P64;
           _s3XM3::P64 = P64[_s3XM9::P64 + 16];
           _s3XM4::P64 = P64[_s3XM9::P64 + 24];
           _s3XM7::P64 = P64[_s3XM9::P64 + 32];
           _s3XM8::P64 = P64[_s3XM9::P64 + 40];
           I64[Hp - 208] = lvl2_s3XMa_info;
           P64[Hp - 192] = _s3XM3::P64;
           P64[Hp - 184] = _s3XM4::P64;
           P64[Hp - 176] = _s3XM7::P64;
           P64[Hp - 168] = _s3XM8::P64;
           I64[Hp - 160] = k_s3XMo_info;
           P64[Hp - 152] = Hp - 208;
           I64[Hp - 144] = lvl3_s3XMq_info;
           P64[Hp - 136] = Hp - 159;
           I64[Hp - 128] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp - 120] = Hp - 143;
           I64[Hp - 112] = w2_s3XMt_info;
           P64[Hp - 104] = _s3XM4::P64;
           P64[Hp - 96] = _s3XM7::P64;
           P64[Hp - 88] = _s3XM8::P64;
           P64[Hp - 80] = Hp - 126;
           I64[Hp - 72] = lvl117_s3XMG_info;
           _c40NQ::P64 = Hp - 111;
           P64[Hp - 56] = _c40NQ::P64;
           I64[Hp - 48] = sat_s3XMN_info;
           P64[Hp - 32] = _c40NQ::P64;
           I64[Hp - 24] = sat_s3XML_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XM9_info" {
     lvl116_s3XM9_info:
         const lvl116_s3XM9_entry;
         const 4;
         const 21474836495;
         const S3Y0k_srt+920;
 },
 k_s3XMO_entry() //  [R1]
         { []
         }
     {offset
       c40PK: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XMO_info" {
     k_s3XMO_info:
         const k_s3XMO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XMR_entry() //  [R1, R2]
         { []
         }
     {offset
       c40PS: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XMR_info" {
     sat_s3XMR_info:
         const sat_s3XMR_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XMS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c40PW: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c40Q0; else goto c40PZ;
       c40Q0: // global
           HpAlloc = 96;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c40PZ: // global
           _s3XM3::P64 = P64[R1 + 6];
           _s3XM4::P64 = P64[R1 + 14];
           I64[Hp - 88] = lvl116_s3XM9_info;
           P64[Hp - 72] = _s3XM3::P64;
           P64[Hp - 64] = _s3XM4::P64;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = k_s3XMO_info;
           P64[Hp - 32] = Hp - 88;
           I64[Hp - 24] = sat_s3XMR_info;
           P64[Hp - 16] = Hp - 39;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XMS_info" {
     sat_s3XMS_info:
         const sat_s3XMS_entry;
         const 2;
         const 21474836491;
         const 8589934607;
         const S3Y0k_srt+920;
 },
 section ""relreadonly" . u40Q6_srtd" {
     u40Q6_srtd:
         const S3Y0k_srt+216;
         const 103;
         const 1;
         const 274961793024;
 },
 GHC.Read.readNumber1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c40Q1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c40Q5; else goto c40Q4;
       c40Q5: // global
           HpAlloc = 24;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.readNumber1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c40Q4: // global
           I64[Hp - 16] = sat_s3XMS_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           _s3XM5::P64 = R4;
           R4 = R5;
           R3 = _s3XM5::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readNumber1_info" {
     GHC.Read.readNumber1_info:
         const GHC.Read.readNumber1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u40Q6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.572582615 UTC

[section ""data" . GHC.Read.readNumber_closure" {
     GHC.Read.readNumber_closure:
         const GHC.Read.readNumber_info;
         const 0;
 },
 GHC.Read.readNumber_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c40ST: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Read.readNumber1_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.readNumber_info" {
     GHC.Read.readNumber_info:
         const GHC.Read.readNumber_entry;
         const 0;
         const 4294967310;
         const 17179869208;
         const S3Y0k_srt+1032;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.575810982 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory152_bytes" {
     GHC.Read.$fReadGeneralCategory152_bytes:
         I8[] [85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.578168105 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory151_closure" {
     GHC.Read.$fReadGeneralCategory151_closure:
         const GHC.Read.$fReadGeneralCategory151_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory151_entry() //  [R1]
         { []
         }
     {offset
       c40T7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40T8; else goto c40T9;
       c40T8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40T9: // global
           (_c40T4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40T4::I64 == 0) goto c40T6; else goto c40T5;
       c40T6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40T5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40T4::I64;
           R2 = GHC.Read.$fReadGeneralCategory152_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory151_info" {
     GHC.Read.$fReadGeneralCategory151_info:
         const GHC.Read.$fReadGeneralCategory151_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.582292752 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory150_closure" {
     GHC.Read.$fReadGeneralCategory150_closure:
         const GHC.Read.$fReadGeneralCategory150_info;
 },
 GHC.Read.$fReadGeneralCategory150_entry() //  [R3]
         { []
         }
     {offset
       c40Tm: // global
           R2 = GHC.Unicode.UppercaseLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory150_info" {
     GHC.Read.$fReadGeneralCategory150_info:
         const GHC.Read.$fReadGeneralCategory150_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.586130237 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory149_closure" {
     GHC.Read.$fReadGeneralCategory149_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory151_closure;
         const GHC.Read.$fReadGeneralCategory150_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.587851651 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory148_bytes" {
     GHC.Read.$fReadGeneralCategory148_bytes:
         I8[] [76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.590237272 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory147_closure" {
     GHC.Read.$fReadGeneralCategory147_closure:
         const GHC.Read.$fReadGeneralCategory147_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory147_entry() //  [R1]
         { []
         }
     {offset
       c40TC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40TD; else goto c40TE;
       c40TD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40TE: // global
           (_c40Tz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Tz::I64 == 0) goto c40TB; else goto c40TA;
       c40TB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40TA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Tz::I64;
           R2 = GHC.Read.$fReadGeneralCategory148_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory147_info" {
     GHC.Read.$fReadGeneralCategory147_info:
         const GHC.Read.$fReadGeneralCategory147_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.594374617 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory146_closure" {
     GHC.Read.$fReadGeneralCategory146_closure:
         const GHC.Read.$fReadGeneralCategory146_info;
 },
 GHC.Read.$fReadGeneralCategory146_entry() //  [R3]
         { []
         }
     {offset
       c40TR: // global
           R2 = GHC.Unicode.LowercaseLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory146_info" {
     GHC.Read.$fReadGeneralCategory146_info:
         const GHC.Read.$fReadGeneralCategory146_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.59770009 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory145_closure" {
     GHC.Read.$fReadGeneralCategory145_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory147_closure;
         const GHC.Read.$fReadGeneralCategory146_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.599400005 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory144_bytes" {
     GHC.Read.$fReadGeneralCategory144_bytes:
         I8[] [84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.602408418 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory143_closure" {
     GHC.Read.$fReadGeneralCategory143_closure:
         const GHC.Read.$fReadGeneralCategory143_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory143_entry() //  [R1]
         { []
         }
     {offset
       c40U7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40U8; else goto c40U9;
       c40U8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40U9: // global
           (_c40U4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40U4::I64 == 0) goto c40U6; else goto c40U5;
       c40U6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40U5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40U4::I64;
           R2 = GHC.Read.$fReadGeneralCategory144_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory143_info" {
     GHC.Read.$fReadGeneralCategory143_info:
         const GHC.Read.$fReadGeneralCategory143_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.606635629 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory142_closure" {
     GHC.Read.$fReadGeneralCategory142_closure:
         const GHC.Read.$fReadGeneralCategory142_info;
 },
 GHC.Read.$fReadGeneralCategory142_entry() //  [R3]
         { []
         }
     {offset
       c40Um: // global
           R2 = GHC.Unicode.TitlecaseLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory142_info" {
     GHC.Read.$fReadGeneralCategory142_info:
         const GHC.Read.$fReadGeneralCategory142_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.610014639 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory141_closure" {
     GHC.Read.$fReadGeneralCategory141_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory143_closure;
         const GHC.Read.$fReadGeneralCategory142_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.611778444 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory140_bytes" {
     GHC.Read.$fReadGeneralCategory140_bytes:
         I8[] [77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.614951716 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory139_closure" {
     GHC.Read.$fReadGeneralCategory139_closure:
         const GHC.Read.$fReadGeneralCategory139_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory139_entry() //  [R1]
         { []
         }
     {offset
       c40UC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40UD; else goto c40UE;
       c40UD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40UE: // global
           (_c40Uz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Uz::I64 == 0) goto c40UB; else goto c40UA;
       c40UB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40UA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Uz::I64;
           R2 = GHC.Read.$fReadGeneralCategory140_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory139_info" {
     GHC.Read.$fReadGeneralCategory139_info:
         const GHC.Read.$fReadGeneralCategory139_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.618908453 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory138_closure" {
     GHC.Read.$fReadGeneralCategory138_closure:
         const GHC.Read.$fReadGeneralCategory138_info;
 },
 GHC.Read.$fReadGeneralCategory138_entry() //  [R3]
         { []
         }
     {offset
       c40UR: // global
           R2 = GHC.Unicode.ModifierLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory138_info" {
     GHC.Read.$fReadGeneralCategory138_info:
         const GHC.Read.$fReadGeneralCategory138_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.622156054 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory137_closure" {
     GHC.Read.$fReadGeneralCategory137_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory139_closure;
         const GHC.Read.$fReadGeneralCategory138_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.62402406 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory136_bytes" {
     GHC.Read.$fReadGeneralCategory136_bytes:
         I8[] [79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.626641904 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory135_closure" {
     GHC.Read.$fReadGeneralCategory135_closure:
         const GHC.Read.$fReadGeneralCategory135_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory135_entry() //  [R1]
         { []
         }
     {offset
       c40V7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40V8; else goto c40V9;
       c40V8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40V9: // global
           (_c40V4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40V4::I64 == 0) goto c40V6; else goto c40V5;
       c40V6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40V5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40V4::I64;
           R2 = GHC.Read.$fReadGeneralCategory136_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory135_info" {
     GHC.Read.$fReadGeneralCategory135_info:
         const GHC.Read.$fReadGeneralCategory135_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.631853272 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory134_closure" {
     GHC.Read.$fReadGeneralCategory134_closure:
         const GHC.Read.$fReadGeneralCategory134_info;
 },
 GHC.Read.$fReadGeneralCategory134_entry() //  [R3]
         { []
         }
     {offset
       c40Vm: // global
           R2 = GHC.Unicode.OtherLetter_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory134_info" {
     GHC.Read.$fReadGeneralCategory134_info:
         const GHC.Read.$fReadGeneralCategory134_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.63696901 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory133_closure" {
     GHC.Read.$fReadGeneralCategory133_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory135_closure;
         const GHC.Read.$fReadGeneralCategory134_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.638929426 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory132_bytes" {
     GHC.Read.$fReadGeneralCategory132_bytes:
         I8[] [78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.641427382 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory131_closure" {
     GHC.Read.$fReadGeneralCategory131_closure:
         const GHC.Read.$fReadGeneralCategory131_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory131_entry() //  [R1]
         { []
         }
     {offset
       c40VC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40VD; else goto c40VE;
       c40VD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40VE: // global
           (_c40Vz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Vz::I64 == 0) goto c40VB; else goto c40VA;
       c40VB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40VA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Vz::I64;
           R2 = GHC.Read.$fReadGeneralCategory132_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory131_info" {
     GHC.Read.$fReadGeneralCategory131_info:
         const GHC.Read.$fReadGeneralCategory131_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.645533794 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory130_closure" {
     GHC.Read.$fReadGeneralCategory130_closure:
         const GHC.Read.$fReadGeneralCategory130_info;
 },
 GHC.Read.$fReadGeneralCategory130_entry() //  [R3]
         { []
         }
     {offset
       c40VR: // global
           R2 = GHC.Unicode.NonSpacingMark_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory130_info" {
     GHC.Read.$fReadGeneralCategory130_info:
         const GHC.Read.$fReadGeneralCategory130_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.648703594 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory129_closure" {
     GHC.Read.$fReadGeneralCategory129_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory131_closure;
         const GHC.Read.$fReadGeneralCategory130_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.650448159 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory128_bytes" {
     GHC.Read.$fReadGeneralCategory128_bytes:
         I8[] [83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.652763165 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory127_closure" {
     GHC.Read.$fReadGeneralCategory127_closure:
         const GHC.Read.$fReadGeneralCategory127_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory127_entry() //  [R1]
         { []
         }
     {offset
       c40W7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40W8; else goto c40W9;
       c40W8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40W9: // global
           (_c40W4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40W4::I64 == 0) goto c40W6; else goto c40W5;
       c40W6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40W5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40W4::I64;
           R2 = GHC.Read.$fReadGeneralCategory128_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory127_info" {
     GHC.Read.$fReadGeneralCategory127_info:
         const GHC.Read.$fReadGeneralCategory127_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.658969652 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory126_closure" {
     GHC.Read.$fReadGeneralCategory126_closure:
         const GHC.Read.$fReadGeneralCategory126_info;
 },
 GHC.Read.$fReadGeneralCategory126_entry() //  [R3]
         { []
         }
     {offset
       c40Wm: // global
           R2 = GHC.Unicode.SpacingCombiningMark_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory126_info" {
     GHC.Read.$fReadGeneralCategory126_info:
         const GHC.Read.$fReadGeneralCategory126_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.663097256 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory125_closure" {
     GHC.Read.$fReadGeneralCategory125_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory127_closure;
         const GHC.Read.$fReadGeneralCategory126_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.664803622 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory124_bytes" {
     GHC.Read.$fReadGeneralCategory124_bytes:
         I8[] [69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.667616621 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory123_closure" {
     GHC.Read.$fReadGeneralCategory123_closure:
         const GHC.Read.$fReadGeneralCategory123_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory123_entry() //  [R1]
         { []
         }
     {offset
       c40WC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40WD; else goto c40WE;
       c40WD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40WE: // global
           (_c40Wz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Wz::I64 == 0) goto c40WB; else goto c40WA;
       c40WB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40WA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Wz::I64;
           R2 = GHC.Read.$fReadGeneralCategory124_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory123_info" {
     GHC.Read.$fReadGeneralCategory123_info:
         const GHC.Read.$fReadGeneralCategory123_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.672340114 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory122_closure" {
     GHC.Read.$fReadGeneralCategory122_closure:
         const GHC.Read.$fReadGeneralCategory122_info;
 },
 GHC.Read.$fReadGeneralCategory122_entry() //  [R3]
         { []
         }
     {offset
       c40WR: // global
           R2 = GHC.Unicode.EnclosingMark_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory122_info" {
     GHC.Read.$fReadGeneralCategory122_info:
         const GHC.Read.$fReadGeneralCategory122_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.675522012 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory121_closure" {
     GHC.Read.$fReadGeneralCategory121_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory123_closure;
         const GHC.Read.$fReadGeneralCategory122_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.677318281 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory120_bytes" {
     GHC.Read.$fReadGeneralCategory120_bytes:
         I8[] [68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.680825589 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory119_closure" {
     GHC.Read.$fReadGeneralCategory119_closure:
         const GHC.Read.$fReadGeneralCategory119_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory119_entry() //  [R1]
         { []
         }
     {offset
       c40X7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40X8; else goto c40X9;
       c40X8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40X9: // global
           (_c40X4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40X4::I64 == 0) goto c40X6; else goto c40X5;
       c40X6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40X5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40X4::I64;
           R2 = GHC.Read.$fReadGeneralCategory120_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory119_info" {
     GHC.Read.$fReadGeneralCategory119_info:
         const GHC.Read.$fReadGeneralCategory119_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.685939436 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory118_closure" {
     GHC.Read.$fReadGeneralCategory118_closure:
         const GHC.Read.$fReadGeneralCategory118_info;
 },
 GHC.Read.$fReadGeneralCategory118_entry() //  [R3]
         { []
         }
     {offset
       c40Xm: // global
           R2 = GHC.Unicode.DecimalNumber_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory118_info" {
     GHC.Read.$fReadGeneralCategory118_info:
         const GHC.Read.$fReadGeneralCategory118_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.689190736 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory117_closure" {
     GHC.Read.$fReadGeneralCategory117_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory119_closure;
         const GHC.Read.$fReadGeneralCategory118_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.690917289 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory116_bytes" {
     GHC.Read.$fReadGeneralCategory116_bytes:
         I8[] [76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.693361703 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory115_closure" {
     GHC.Read.$fReadGeneralCategory115_closure:
         const GHC.Read.$fReadGeneralCategory115_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory115_entry() //  [R1]
         { []
         }
     {offset
       c40XC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40XD; else goto c40XE;
       c40XD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40XE: // global
           (_c40Xz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Xz::I64 == 0) goto c40XB; else goto c40XA;
       c40XB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40XA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Xz::I64;
           R2 = GHC.Read.$fReadGeneralCategory116_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory115_info" {
     GHC.Read.$fReadGeneralCategory115_info:
         const GHC.Read.$fReadGeneralCategory115_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.697738734 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory114_closure" {
     GHC.Read.$fReadGeneralCategory114_closure:
         const GHC.Read.$fReadGeneralCategory114_info;
 },
 GHC.Read.$fReadGeneralCategory114_entry() //  [R3]
         { []
         }
     {offset
       c40XR: // global
           R2 = GHC.Unicode.LetterNumber_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory114_info" {
     GHC.Read.$fReadGeneralCategory114_info:
         const GHC.Read.$fReadGeneralCategory114_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.701008587 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory113_closure" {
     GHC.Read.$fReadGeneralCategory113_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory115_closure;
         const GHC.Read.$fReadGeneralCategory114_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.702840509 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory112_bytes" {
     GHC.Read.$fReadGeneralCategory112_bytes:
         I8[] [79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.706026883 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory111_closure" {
     GHC.Read.$fReadGeneralCategory111_closure:
         const GHC.Read.$fReadGeneralCategory111_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory111_entry() //  [R1]
         { []
         }
     {offset
       c40Y7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Y8; else goto c40Y9;
       c40Y8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40Y9: // global
           (_c40Y4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Y4::I64 == 0) goto c40Y6; else goto c40Y5;
       c40Y6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40Y5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Y4::I64;
           R2 = GHC.Read.$fReadGeneralCategory112_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory111_info" {
     GHC.Read.$fReadGeneralCategory111_info:
         const GHC.Read.$fReadGeneralCategory111_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.711136615 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory110_closure" {
     GHC.Read.$fReadGeneralCategory110_closure:
         const GHC.Read.$fReadGeneralCategory110_info;
 },
 GHC.Read.$fReadGeneralCategory110_entry() //  [R3]
         { []
         }
     {offset
       c40Ym: // global
           R2 = GHC.Unicode.OtherNumber_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory110_info" {
     GHC.Read.$fReadGeneralCategory110_info:
         const GHC.Read.$fReadGeneralCategory110_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.714319877 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory109_closure" {
     GHC.Read.$fReadGeneralCategory109_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory111_closure;
         const GHC.Read.$fReadGeneralCategory110_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.715993292 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory108_bytes" {
     GHC.Read.$fReadGeneralCategory108_bytes:
         I8[] [67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.718441346 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory107_closure" {
     GHC.Read.$fReadGeneralCategory107_closure:
         const GHC.Read.$fReadGeneralCategory107_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory107_entry() //  [R1]
         { []
         }
     {offset
       c40YC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40YD; else goto c40YE;
       c40YD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40YE: // global
           (_c40Yz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Yz::I64 == 0) goto c40YB; else goto c40YA;
       c40YB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40YA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Yz::I64;
           R2 = GHC.Read.$fReadGeneralCategory108_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory107_info" {
     GHC.Read.$fReadGeneralCategory107_info:
         const GHC.Read.$fReadGeneralCategory107_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.722651152 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory106_closure" {
     GHC.Read.$fReadGeneralCategory106_closure:
         const GHC.Read.$fReadGeneralCategory106_info;
 },
 GHC.Read.$fReadGeneralCategory106_entry() //  [R3]
         { []
         }
     {offset
       c40YR: // global
           R2 = GHC.Unicode.ConnectorPunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory106_info" {
     GHC.Read.$fReadGeneralCategory106_info:
         const GHC.Read.$fReadGeneralCategory106_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.726071771 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory105_closure" {
     GHC.Read.$fReadGeneralCategory105_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory107_closure;
         const GHC.Read.$fReadGeneralCategory106_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.727769091 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory104_bytes" {
     GHC.Read.$fReadGeneralCategory104_bytes:
         I8[] [68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.730671542 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory103_closure" {
     GHC.Read.$fReadGeneralCategory103_closure:
         const GHC.Read.$fReadGeneralCategory103_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory103_entry() //  [R1]
         { []
         }
     {offset
       c40Z7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40Z8; else goto c40Z9;
       c40Z8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40Z9: // global
           (_c40Z4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Z4::I64 == 0) goto c40Z6; else goto c40Z5;
       c40Z6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40Z5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Z4::I64;
           R2 = GHC.Read.$fReadGeneralCategory104_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory103_info" {
     GHC.Read.$fReadGeneralCategory103_info:
         const GHC.Read.$fReadGeneralCategory103_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.734880624 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory102_closure" {
     GHC.Read.$fReadGeneralCategory102_closure:
         const GHC.Read.$fReadGeneralCategory102_info;
 },
 GHC.Read.$fReadGeneralCategory102_entry() //  [R3]
         { []
         }
     {offset
       c40Zm: // global
           R2 = GHC.Unicode.DashPunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory102_info" {
     GHC.Read.$fReadGeneralCategory102_info:
         const GHC.Read.$fReadGeneralCategory102_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.738706479 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory101_closure" {
     GHC.Read.$fReadGeneralCategory101_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory103_closure;
         const GHC.Read.$fReadGeneralCategory102_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.740556658 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory100_bytes" {
     GHC.Read.$fReadGeneralCategory100_bytes:
         I8[] [79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.743009272 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory99_closure" {
     GHC.Read.$fReadGeneralCategory99_closure:
         const GHC.Read.$fReadGeneralCategory99_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory99_entry() //  [R1]
         { []
         }
     {offset
       c40ZC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c40ZD; else goto c40ZE;
       c40ZD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c40ZE: // global
           (_c40Zz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c40Zz::I64 == 0) goto c40ZB; else goto c40ZA;
       c40ZB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c40ZA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c40Zz::I64;
           R2 = GHC.Read.$fReadGeneralCategory100_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory99_info" {
     GHC.Read.$fReadGeneralCategory99_info:
         const GHC.Read.$fReadGeneralCategory99_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.747680041 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory98_closure" {
     GHC.Read.$fReadGeneralCategory98_closure:
         const GHC.Read.$fReadGeneralCategory98_info;
 },
 GHC.Read.$fReadGeneralCategory98_entry() //  [R3]
         { []
         }
     {offset
       c40ZR: // global
           R2 = GHC.Unicode.OpenPunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory98_info" {
     GHC.Read.$fReadGeneralCategory98_info:
         const GHC.Read.$fReadGeneralCategory98_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.751052212 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory97_closure" {
     GHC.Read.$fReadGeneralCategory97_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory99_closure;
         const GHC.Read.$fReadGeneralCategory98_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.752751921 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory96_bytes" {
     GHC.Read.$fReadGeneralCategory96_bytes:
         I8[] [67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.75515761 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory95_closure" {
     GHC.Read.$fReadGeneralCategory95_closure:
         const GHC.Read.$fReadGeneralCategory95_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory95_entry() //  [R1]
         { []
         }
     {offset
       c4107: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4108; else goto c4109;
       c4108: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4109: // global
           (_c4104::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4104::I64 == 0) goto c4106; else goto c4105;
       c4106: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4105: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4104::I64;
           R2 = GHC.Read.$fReadGeneralCategory96_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory95_info" {
     GHC.Read.$fReadGeneralCategory95_info:
         const GHC.Read.$fReadGeneralCategory95_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.759748159 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory94_closure" {
     GHC.Read.$fReadGeneralCategory94_closure:
         const GHC.Read.$fReadGeneralCategory94_info;
 },
 GHC.Read.$fReadGeneralCategory94_entry() //  [R3]
         { []
         }
     {offset
       c410m: // global
           R2 = GHC.Unicode.ClosePunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory94_info" {
     GHC.Read.$fReadGeneralCategory94_info:
         const GHC.Read.$fReadGeneralCategory94_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.763148522 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory93_closure" {
     GHC.Read.$fReadGeneralCategory93_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory95_closure;
         const GHC.Read.$fReadGeneralCategory94_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.76488064 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory92_bytes" {
     GHC.Read.$fReadGeneralCategory92_bytes:
         I8[] [73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.767467941 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory91_closure" {
     GHC.Read.$fReadGeneralCategory91_closure:
         const GHC.Read.$fReadGeneralCategory91_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory91_entry() //  [R1]
         { []
         }
     {offset
       c410C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c410D; else goto c410E;
       c410D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c410E: // global
           (_c410z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c410z::I64 == 0) goto c410B; else goto c410A;
       c410B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c410A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c410z::I64;
           R2 = GHC.Read.$fReadGeneralCategory92_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory91_info" {
     GHC.Read.$fReadGeneralCategory91_info:
         const GHC.Read.$fReadGeneralCategory91_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.772247948 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory90_closure" {
     GHC.Read.$fReadGeneralCategory90_closure:
         const GHC.Read.$fReadGeneralCategory90_info;
 },
 GHC.Read.$fReadGeneralCategory90_entry() //  [R3]
         { []
         }
     {offset
       c410R: // global
           R2 = GHC.Unicode.InitialQuote_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory90_info" {
     GHC.Read.$fReadGeneralCategory90_info:
         const GHC.Read.$fReadGeneralCategory90_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.775486578 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory89_closure" {
     GHC.Read.$fReadGeneralCategory89_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory91_closure;
         const GHC.Read.$fReadGeneralCategory90_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.777176099 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory88_bytes" {
     GHC.Read.$fReadGeneralCategory88_bytes:
         I8[] [70,105,110,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.780179839 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory87_closure" {
     GHC.Read.$fReadGeneralCategory87_closure:
         const GHC.Read.$fReadGeneralCategory87_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory87_entry() //  [R1]
         { []
         }
     {offset
       c4117: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4118; else goto c4119;
       c4118: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4119: // global
           (_c4114::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4114::I64 == 0) goto c4116; else goto c4115;
       c4116: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4115: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4114::I64;
           R2 = GHC.Read.$fReadGeneralCategory88_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory87_info" {
     GHC.Read.$fReadGeneralCategory87_info:
         const GHC.Read.$fReadGeneralCategory87_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.78617467 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory86_closure" {
     GHC.Read.$fReadGeneralCategory86_closure:
         const GHC.Read.$fReadGeneralCategory86_info;
 },
 GHC.Read.$fReadGeneralCategory86_entry() //  [R3]
         { []
         }
     {offset
       c411m: // global
           R2 = GHC.Unicode.FinalQuote_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory86_info" {
     GHC.Read.$fReadGeneralCategory86_info:
         const GHC.Read.$fReadGeneralCategory86_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.789665406 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory85_closure" {
     GHC.Read.$fReadGeneralCategory85_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory87_closure;
         const GHC.Read.$fReadGeneralCategory86_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.791378243 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory84_bytes" {
     GHC.Read.$fReadGeneralCategory84_bytes:
         I8[] [79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.794275063 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory83_closure" {
     GHC.Read.$fReadGeneralCategory83_closure:
         const GHC.Read.$fReadGeneralCategory83_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory83_entry() //  [R1]
         { []
         }
     {offset
       c411C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c411D; else goto c411E;
       c411D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c411E: // global
           (_c411z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c411z::I64 == 0) goto c411B; else goto c411A;
       c411B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c411A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c411z::I64;
           R2 = GHC.Read.$fReadGeneralCategory84_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory83_info" {
     GHC.Read.$fReadGeneralCategory83_info:
         const GHC.Read.$fReadGeneralCategory83_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.799062155 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory82_closure" {
     GHC.Read.$fReadGeneralCategory82_closure:
         const GHC.Read.$fReadGeneralCategory82_info;
 },
 GHC.Read.$fReadGeneralCategory82_entry() //  [R3]
         { []
         }
     {offset
       c411R: // global
           R2 = GHC.Unicode.OtherPunctuation_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory82_info" {
     GHC.Read.$fReadGeneralCategory82_info:
         const GHC.Read.$fReadGeneralCategory82_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.802184183 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory81_closure" {
     GHC.Read.$fReadGeneralCategory81_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory83_closure;
         const GHC.Read.$fReadGeneralCategory82_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.803930456 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory80_bytes" {
     GHC.Read.$fReadGeneralCategory80_bytes:
         I8[] [77,97,116,104,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.807378924 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory79_closure" {
     GHC.Read.$fReadGeneralCategory79_closure:
         const GHC.Read.$fReadGeneralCategory79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory79_entry() //  [R1]
         { []
         }
     {offset
       c4127: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4128; else goto c4129;
       c4128: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4129: // global
           (_c4124::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4124::I64 == 0) goto c4126; else goto c4125;
       c4126: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4125: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4124::I64;
           R2 = GHC.Read.$fReadGeneralCategory80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory79_info" {
     GHC.Read.$fReadGeneralCategory79_info:
         const GHC.Read.$fReadGeneralCategory79_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.81141504 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory78_closure" {
     GHC.Read.$fReadGeneralCategory78_closure:
         const GHC.Read.$fReadGeneralCategory78_info;
 },
 GHC.Read.$fReadGeneralCategory78_entry() //  [R3]
         { []
         }
     {offset
       c412m: // global
           R2 = GHC.Unicode.MathSymbol_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory78_info" {
     GHC.Read.$fReadGeneralCategory78_info:
         const GHC.Read.$fReadGeneralCategory78_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.814602691 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory77_closure" {
     GHC.Read.$fReadGeneralCategory77_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory79_closure;
         const GHC.Read.$fReadGeneralCategory78_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.816301854 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory76_bytes" {
     GHC.Read.$fReadGeneralCategory76_bytes:
         I8[] [67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.818683775 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory75_closure" {
     GHC.Read.$fReadGeneralCategory75_closure:
         const GHC.Read.$fReadGeneralCategory75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory75_entry() //  [R1]
         { []
         }
     {offset
       c412C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c412D; else goto c412E;
       c412D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c412E: // global
           (_c412z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c412z::I64 == 0) goto c412B; else goto c412A;
       c412B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c412A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c412z::I64;
           R2 = GHC.Read.$fReadGeneralCategory76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory75_info" {
     GHC.Read.$fReadGeneralCategory75_info:
         const GHC.Read.$fReadGeneralCategory75_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.822971322 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory74_closure" {
     GHC.Read.$fReadGeneralCategory74_closure:
         const GHC.Read.$fReadGeneralCategory74_info;
 },
 GHC.Read.$fReadGeneralCategory74_entry() //  [R3]
         { []
         }
     {offset
       c412R: // global
           R2 = GHC.Unicode.CurrencySymbol_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory74_info" {
     GHC.Read.$fReadGeneralCategory74_info:
         const GHC.Read.$fReadGeneralCategory74_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.826218719 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory73_closure" {
     GHC.Read.$fReadGeneralCategory73_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory75_closure;
         const GHC.Read.$fReadGeneralCategory74_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.828014282 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory72_bytes" {
     GHC.Read.$fReadGeneralCategory72_bytes:
         I8[] [77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.830858994 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory71_closure" {
     GHC.Read.$fReadGeneralCategory71_closure:
         const GHC.Read.$fReadGeneralCategory71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory71_entry() //  [R1]
         { []
         }
     {offset
       c4137: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4138; else goto c4139;
       c4138: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4139: // global
           (_c4134::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4134::I64 == 0) goto c4136; else goto c4135;
       c4136: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4135: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4134::I64;
           R2 = GHC.Read.$fReadGeneralCategory72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory71_info" {
     GHC.Read.$fReadGeneralCategory71_info:
         const GHC.Read.$fReadGeneralCategory71_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.835053306 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory70_closure" {
     GHC.Read.$fReadGeneralCategory70_closure:
         const GHC.Read.$fReadGeneralCategory70_info;
 },
 GHC.Read.$fReadGeneralCategory70_entry() //  [R3]
         { []
         }
     {offset
       c413m: // global
           R2 = GHC.Unicode.ModifierSymbol_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory70_info" {
     GHC.Read.$fReadGeneralCategory70_info:
         const GHC.Read.$fReadGeneralCategory70_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.838849863 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory69_closure" {
     GHC.Read.$fReadGeneralCategory69_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory71_closure;
         const GHC.Read.$fReadGeneralCategory70_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.840712565 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory68_bytes" {
     GHC.Read.$fReadGeneralCategory68_bytes:
         I8[] [79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.843127782 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory67_closure" {
     GHC.Read.$fReadGeneralCategory67_closure:
         const GHC.Read.$fReadGeneralCategory67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory67_entry() //  [R1]
         { []
         }
     {offset
       c413C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c413D; else goto c413E;
       c413D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c413E: // global
           (_c413z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c413z::I64 == 0) goto c413B; else goto c413A;
       c413B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c413A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c413z::I64;
           R2 = GHC.Read.$fReadGeneralCategory68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory67_info" {
     GHC.Read.$fReadGeneralCategory67_info:
         const GHC.Read.$fReadGeneralCategory67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.847088188 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory66_closure" {
     GHC.Read.$fReadGeneralCategory66_closure:
         const GHC.Read.$fReadGeneralCategory66_info;
 },
 GHC.Read.$fReadGeneralCategory66_entry() //  [R3]
         { []
         }
     {offset
       c413R: // global
           R2 = GHC.Unicode.OtherSymbol_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory66_info" {
     GHC.Read.$fReadGeneralCategory66_info:
         const GHC.Read.$fReadGeneralCategory66_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.850731904 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory65_closure" {
     GHC.Read.$fReadGeneralCategory65_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory67_closure;
         const GHC.Read.$fReadGeneralCategory66_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.852404294 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory64_bytes" {
     GHC.Read.$fReadGeneralCategory64_bytes:
         I8[] [83,112,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.854806871 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory63_closure" {
     GHC.Read.$fReadGeneralCategory63_closure:
         const GHC.Read.$fReadGeneralCategory63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory63_entry() //  [R1]
         { []
         }
     {offset
       c4147: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4148; else goto c4149;
       c4148: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4149: // global
           (_c4144::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4144::I64 == 0) goto c4146; else goto c4145;
       c4146: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4145: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4144::I64;
           R2 = GHC.Read.$fReadGeneralCategory64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory63_info" {
     GHC.Read.$fReadGeneralCategory63_info:
         const GHC.Read.$fReadGeneralCategory63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.859192662 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory62_closure" {
     GHC.Read.$fReadGeneralCategory62_closure:
         const GHC.Read.$fReadGeneralCategory62_info;
 },
 GHC.Read.$fReadGeneralCategory62_entry() //  [R3]
         { []
         }
     {offset
       c414m: // global
           R2 = GHC.Unicode.Space_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory62_info" {
     GHC.Read.$fReadGeneralCategory62_info:
         const GHC.Read.$fReadGeneralCategory62_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.862541299 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory61_closure" {
     GHC.Read.$fReadGeneralCategory61_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory63_closure;
         const GHC.Read.$fReadGeneralCategory62_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.865098915 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory60_bytes" {
     GHC.Read.$fReadGeneralCategory60_bytes:
         I8[] [76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.868664109 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory59_closure" {
     GHC.Read.$fReadGeneralCategory59_closure:
         const GHC.Read.$fReadGeneralCategory59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory59_entry() //  [R1]
         { []
         }
     {offset
       c414C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c414D; else goto c414E;
       c414D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c414E: // global
           (_c414z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c414z::I64 == 0) goto c414B; else goto c414A;
       c414B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c414A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c414z::I64;
           R2 = GHC.Read.$fReadGeneralCategory60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory59_info" {
     GHC.Read.$fReadGeneralCategory59_info:
         const GHC.Read.$fReadGeneralCategory59_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.873350882 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory58_closure" {
     GHC.Read.$fReadGeneralCategory58_closure:
         const GHC.Read.$fReadGeneralCategory58_info;
 },
 GHC.Read.$fReadGeneralCategory58_entry() //  [R3]
         { []
         }
     {offset
       c414R: // global
           R2 = GHC.Unicode.LineSeparator_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory58_info" {
     GHC.Read.$fReadGeneralCategory58_info:
         const GHC.Read.$fReadGeneralCategory58_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.876500975 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory57_closure" {
     GHC.Read.$fReadGeneralCategory57_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory59_closure;
         const GHC.Read.$fReadGeneralCategory58_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.878288745 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory56_bytes" {
     GHC.Read.$fReadGeneralCategory56_bytes:
         I8[] [80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.880473688 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory55_closure" {
     GHC.Read.$fReadGeneralCategory55_closure:
         const GHC.Read.$fReadGeneralCategory55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory55_entry() //  [R1]
         { []
         }
     {offset
       c4157: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4158; else goto c4159;
       c4158: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4159: // global
           (_c4154::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4154::I64 == 0) goto c4156; else goto c4155;
       c4156: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4155: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4154::I64;
           R2 = GHC.Read.$fReadGeneralCategory56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory55_info" {
     GHC.Read.$fReadGeneralCategory55_info:
         const GHC.Read.$fReadGeneralCategory55_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.884495209 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory54_closure" {
     GHC.Read.$fReadGeneralCategory54_closure:
         const GHC.Read.$fReadGeneralCategory54_info;
 },
 GHC.Read.$fReadGeneralCategory54_entry() //  [R3]
         { []
         }
     {offset
       c415m: // global
           R2 = GHC.Unicode.ParagraphSeparator_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory54_info" {
     GHC.Read.$fReadGeneralCategory54_info:
         const GHC.Read.$fReadGeneralCategory54_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.887696788 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory53_closure" {
     GHC.Read.$fReadGeneralCategory53_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory55_closure;
         const GHC.Read.$fReadGeneralCategory54_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.889435106 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory52_bytes" {
     GHC.Read.$fReadGeneralCategory52_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.891709567 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory51_closure" {
     GHC.Read.$fReadGeneralCategory51_closure:
         const GHC.Read.$fReadGeneralCategory51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory51_entry() //  [R1]
         { []
         }
     {offset
       c415C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c415D; else goto c415E;
       c415D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c415E: // global
           (_c415z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c415z::I64 == 0) goto c415B; else goto c415A;
       c415B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c415A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c415z::I64;
           R2 = GHC.Read.$fReadGeneralCategory52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory51_info" {
     GHC.Read.$fReadGeneralCategory51_info:
         const GHC.Read.$fReadGeneralCategory51_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.895897263 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory50_closure" {
     GHC.Read.$fReadGeneralCategory50_closure:
         const GHC.Read.$fReadGeneralCategory50_info;
 },
 GHC.Read.$fReadGeneralCategory50_entry() //  [R3]
         { []
         }
     {offset
       c415R: // global
           R2 = GHC.Unicode.Control_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory50_info" {
     GHC.Read.$fReadGeneralCategory50_info:
         const GHC.Read.$fReadGeneralCategory50_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.899020057 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory49_closure" {
     GHC.Read.$fReadGeneralCategory49_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory51_closure;
         const GHC.Read.$fReadGeneralCategory50_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.9006963 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory48_bytes" {
     GHC.Read.$fReadGeneralCategory48_bytes:
         I8[] [70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.903930522 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory47_closure" {
     GHC.Read.$fReadGeneralCategory47_closure:
         const GHC.Read.$fReadGeneralCategory47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory47_entry() //  [R1]
         { []
         }
     {offset
       c4167: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4168; else goto c4169;
       c4168: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4169: // global
           (_c4164::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4164::I64 == 0) goto c4166; else goto c4165;
       c4166: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4165: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4164::I64;
           R2 = GHC.Read.$fReadGeneralCategory48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory47_info" {
     GHC.Read.$fReadGeneralCategory47_info:
         const GHC.Read.$fReadGeneralCategory47_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.908028606 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory46_closure" {
     GHC.Read.$fReadGeneralCategory46_closure:
         const GHC.Read.$fReadGeneralCategory46_info;
 },
 GHC.Read.$fReadGeneralCategory46_entry() //  [R3]
         { []
         }
     {offset
       c416m: // global
           R2 = GHC.Unicode.Format_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory46_info" {
     GHC.Read.$fReadGeneralCategory46_info:
         const GHC.Read.$fReadGeneralCategory46_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.911268982 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory45_closure" {
     GHC.Read.$fReadGeneralCategory45_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory47_closure;
         const GHC.Read.$fReadGeneralCategory46_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.912902029 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory44_bytes" {
     GHC.Read.$fReadGeneralCategory44_bytes:
         I8[] [83,117,114,114,111,103,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.915766865 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory43_closure" {
     GHC.Read.$fReadGeneralCategory43_closure:
         const GHC.Read.$fReadGeneralCategory43_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory43_entry() //  [R1]
         { []
         }
     {offset
       c416C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c416D; else goto c416E;
       c416D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c416E: // global
           (_c416z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c416z::I64 == 0) goto c416B; else goto c416A;
       c416B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c416A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c416z::I64;
           R2 = GHC.Read.$fReadGeneralCategory44_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory43_info" {
     GHC.Read.$fReadGeneralCategory43_info:
         const GHC.Read.$fReadGeneralCategory43_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.919744927 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory42_closure" {
     GHC.Read.$fReadGeneralCategory42_closure:
         const GHC.Read.$fReadGeneralCategory42_info;
 },
 GHC.Read.$fReadGeneralCategory42_entry() //  [R3]
         { []
         }
     {offset
       c416R: // global
           R2 = GHC.Unicode.Surrogate_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory42_info" {
     GHC.Read.$fReadGeneralCategory42_info:
         const GHC.Read.$fReadGeneralCategory42_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.922978148 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory41_closure" {
     GHC.Read.$fReadGeneralCategory41_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory43_closure;
         const GHC.Read.$fReadGeneralCategory42_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.92456049 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory40_bytes" {
     GHC.Read.$fReadGeneralCategory40_bytes:
         I8[] [80,114,105,118,97,116,101,85,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.926898628 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory39_closure" {
     GHC.Read.$fReadGeneralCategory39_closure:
         const GHC.Read.$fReadGeneralCategory39_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory39_entry() //  [R1]
         { []
         }
     {offset
       c4177: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4178; else goto c4179;
       c4178: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4179: // global
           (_c4174::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4174::I64 == 0) goto c4176; else goto c4175;
       c4176: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4175: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4174::I64;
           R2 = GHC.Read.$fReadGeneralCategory40_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory39_info" {
     GHC.Read.$fReadGeneralCategory39_info:
         const GHC.Read.$fReadGeneralCategory39_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.930737744 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory38_closure" {
     GHC.Read.$fReadGeneralCategory38_closure:
         const GHC.Read.$fReadGeneralCategory38_info;
 },
 GHC.Read.$fReadGeneralCategory38_entry() //  [R3]
         { []
         }
     {offset
       c417m: // global
           R2 = GHC.Unicode.PrivateUse_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory38_info" {
     GHC.Read.$fReadGeneralCategory38_info:
         const GHC.Read.$fReadGeneralCategory38_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.934424409 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory37_closure" {
     GHC.Read.$fReadGeneralCategory37_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory39_closure;
         const GHC.Read.$fReadGeneralCategory38_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.936201062 UTC

[section ""cstring" . GHC.Read.$fReadGeneralCategory35_bytes" {
     GHC.Read.$fReadGeneralCategory35_bytes:
         I8[] [78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.938485895 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory34_closure" {
     GHC.Read.$fReadGeneralCategory34_closure:
         const GHC.Read.$fReadGeneralCategory34_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory34_entry() //  [R1]
         { []
         }
     {offset
       c417C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c417D; else goto c417E;
       c417D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c417E: // global
           (_c417z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c417z::I64 == 0) goto c417B; else goto c417A;
       c417B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c417A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c417z::I64;
           R2 = GHC.Read.$fReadGeneralCategory35_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory34_info" {
     GHC.Read.$fReadGeneralCategory34_info:
         const GHC.Read.$fReadGeneralCategory34_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.942448863 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory33_closure" {
     GHC.Read.$fReadGeneralCategory33_closure:
         const GHC.Read.$fReadGeneralCategory33_info;
 },
 GHC.Read.$fReadGeneralCategory33_entry() //  [R3]
         { []
         }
     {offset
       c417R: // global
           R2 = GHC.Unicode.NotAssigned_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory33_info" {
     GHC.Read.$fReadGeneralCategory33_info:
         const GHC.Read.$fReadGeneralCategory33_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.945576863 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory32_closure" {
     GHC.Read.$fReadGeneralCategory32_closure:
         const (,)_con_info;
         const GHC.Read.$fReadGeneralCategory34_closure;
         const GHC.Read.$fReadGeneralCategory33_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.947688663 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory31_closure" {
     GHC.Read.$fReadGeneralCategory31_closure:
         const GHC.Read.$fReadGeneralCategory31_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory31_entry() //  [R2]
         { []
         }
     {offset
       c4184: // global
           R4 = R2;
           R3 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           R2 = GHC.Read.$fReadGeneralCategory32_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory31_info" {
     GHC.Read.$fReadGeneralCategory31_info:
         const GHC.Read.$fReadGeneralCategory31_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3Y0k_srt+1040;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.951957584 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory30_closure" {
     GHC.Read.$fReadGeneralCategory30_closure:
         const GHC.Read.$fReadGeneralCategory30_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory30_entry() //  [R2]
         { []
         }
     {offset
       c418g: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory31_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory37_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory30_info" {
     GHC.Read.$fReadGeneralCategory30_info:
         const GHC.Read.$fReadGeneralCategory30_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.955375968 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory29_closure" {
     GHC.Read.$fReadGeneralCategory29_closure:
         const GHC.Read.$fReadGeneralCategory29_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory29_entry() //  [R2]
         { []
         }
     {offset
       c418r: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory30_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory41_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory29_info" {
     GHC.Read.$fReadGeneralCategory29_info:
         const GHC.Read.$fReadGeneralCategory29_entry;
         const 0;
         const 107374182414;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.958874483 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory28_closure" {
     GHC.Read.$fReadGeneralCategory28_closure:
         const GHC.Read.$fReadGeneralCategory28_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory28_entry() //  [R2]
         { []
         }
     {offset
       c418C: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory29_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory45_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory28_info" {
     GHC.Read.$fReadGeneralCategory28_info:
         const GHC.Read.$fReadGeneralCategory28_entry;
         const 0;
         const 416611827726;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.962808724 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory27_closure" {
     GHC.Read.$fReadGeneralCategory27_closure:
         const GHC.Read.$fReadGeneralCategory27_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory27_entry() //  [R2]
         { []
         }
     {offset
       c418N: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory28_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory49_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory27_info" {
     GHC.Read.$fReadGeneralCategory27_info:
         const GHC.Read.$fReadGeneralCategory27_entry;
         const 0;
         const 1653562408974;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.966940897 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory26_closure" {
     GHC.Read.$fReadGeneralCategory26_closure:
         const GHC.Read.$fReadGeneralCategory26_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory26_entry() //  [R2]
         { []
         }
     {offset
       c418Y: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory27_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory53_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory26_info" {
     GHC.Read.$fReadGeneralCategory26_info:
         const GHC.Read.$fReadGeneralCategory26_entry;
         const 0;
         const 6601364733966;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.970340151 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory25_closure" {
     GHC.Read.$fReadGeneralCategory25_closure:
         const GHC.Read.$fReadGeneralCategory25_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory25_entry() //  [R2]
         { []
         }
     {offset
       c4199: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory26_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory57_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory25_info" {
     GHC.Read.$fReadGeneralCategory25_info:
         const GHC.Read.$fReadGeneralCategory25_entry;
         const 0;
         const 26392574033934;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.973798514 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory24_closure" {
     GHC.Read.$fReadGeneralCategory24_closure:
         const GHC.Read.$fReadGeneralCategory24_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory24_entry() //  [R2]
         { []
         }
     {offset
       c419k: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory25_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory61_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory24_info" {
     GHC.Read.$fReadGeneralCategory24_info:
         const GHC.Read.$fReadGeneralCategory24_entry;
         const 0;
         const 105557411233806;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.977071025 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory23_closure" {
     GHC.Read.$fReadGeneralCategory23_closure:
         const GHC.Read.$fReadGeneralCategory23_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory23_entry() //  [R2]
         { []
         }
     {offset
       c419v: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory24_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory65_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory23_info" {
     GHC.Read.$fReadGeneralCategory23_info:
         const GHC.Read.$fReadGeneralCategory23_entry;
         const 0;
         const 422216760033294;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.980350066 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory22_closure" {
     GHC.Read.$fReadGeneralCategory22_closure:
         const GHC.Read.$fReadGeneralCategory22_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory22_entry() //  [R2]
         { []
         }
     {offset
       c419G: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory23_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory69_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory22_info" {
     GHC.Read.$fReadGeneralCategory22_info:
         const GHC.Read.$fReadGeneralCategory22_entry;
         const 0;
         const 1688854155231246;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.983792494 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory21_closure" {
     GHC.Read.$fReadGeneralCategory21_closure:
         const GHC.Read.$fReadGeneralCategory21_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory21_entry() //  [R2]
         { []
         }
     {offset
       c419R: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory22_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory73_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory21_info" {
     GHC.Read.$fReadGeneralCategory21_info:
         const GHC.Read.$fReadGeneralCategory21_entry;
         const 0;
         const 6755403736023054;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.987189612 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory20_closure" {
     GHC.Read.$fReadGeneralCategory20_closure:
         const GHC.Read.$fReadGeneralCategory20_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory20_entry() //  [R2]
         { []
         }
     {offset
       c41a2: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory21_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory77_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory20_info" {
     GHC.Read.$fReadGeneralCategory20_info:
         const GHC.Read.$fReadGeneralCategory20_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.99116198 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory19_closure" {
     GHC.Read.$fReadGeneralCategory19_closure:
         const GHC.Read.$fReadGeneralCategory19_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory19_entry() //  [R2]
         { []
         }
     {offset
       c41ad: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory20_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory81_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory19_info" {
     GHC.Read.$fReadGeneralCategory19_info:
         const GHC.Read.$fReadGeneralCategory19_entry;
         const 0;
         const 108086395351859214;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.994533056 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory18_closure" {
     GHC.Read.$fReadGeneralCategory18_closure:
         const GHC.Read.$fReadGeneralCategory18_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory18_entry() //  [R2]
         { []
         }
     {offset
       c41ao: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory19_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory85_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory18_info" {
     GHC.Read.$fReadGeneralCategory18_info:
         const GHC.Read.$fReadGeneralCategory18_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:53.998624275 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory17_closure" {
     GHC.Read.$fReadGeneralCategory17_closure:
         const GHC.Read.$fReadGeneralCategory17_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory17_entry() //  [R2]
         { []
         }
     {offset
       c41az: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory18_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory89_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory17_info" {
     GHC.Read.$fReadGeneralCategory17_info:
         const GHC.Read.$fReadGeneralCategory17_entry;
         const 0;
         const 1729382261205237774;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.002107298 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory16_closure" {
     GHC.Read.$fReadGeneralCategory16_closure:
         const GHC.Read.$fReadGeneralCategory16_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory16_entry() //  [R2]
         { []
         }
     {offset
       c41aK: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory17_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory93_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory16_info" {
     GHC.Read.$fReadGeneralCategory16_info:
         const GHC.Read.$fReadGeneralCategory16_entry;
         const 0;
         const 6917529031936049166;
         const 4294967301;
         const S3Y0k_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.005492625 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory15_closure" {
     GHC.Read.$fReadGeneralCategory15_closure:
         const GHC.Read.$fReadGeneralCategory15_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory15_entry() //  [R2]
         { []
         }
     {offset
       c41aV: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory16_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory97_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory15_info" {
     GHC.Read.$fReadGeneralCategory15_info:
         const GHC.Read.$fReadGeneralCategory15_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3Y0k_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.008757315 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory14_closure" {
     GHC.Read.$fReadGeneralCategory14_closure:
         const GHC.Read.$fReadGeneralCategory14_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory14_entry() //  [R2]
         { []
         }
     {offset
       c41b6: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory15_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory101_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory14_info" {
     GHC.Read.$fReadGeneralCategory14_info:
         const GHC.Read.$fReadGeneralCategory14_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.011975036 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory13_closure" {
     GHC.Read.$fReadGeneralCategory13_closure:
         const GHC.Read.$fReadGeneralCategory13_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory13_entry() //  [R2]
         { []
         }
     {offset
       c41bh: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory14_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory105_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory13_info" {
     GHC.Read.$fReadGeneralCategory13_info:
         const GHC.Read.$fReadGeneralCategory13_entry;
         const 0;
         const 107374182414;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.015235187 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory12_closure" {
     GHC.Read.$fReadGeneralCategory12_closure:
         const GHC.Read.$fReadGeneralCategory12_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory12_entry() //  [R2]
         { []
         }
     {offset
       c41bs: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory13_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory109_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory12_info" {
     GHC.Read.$fReadGeneralCategory12_info:
         const GHC.Read.$fReadGeneralCategory12_entry;
         const 0;
         const 416611827726;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.018684614 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory11_closure" {
     GHC.Read.$fReadGeneralCategory11_closure:
         const GHC.Read.$fReadGeneralCategory11_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory11_entry() //  [R2]
         { []
         }
     {offset
       c41bD: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory12_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory113_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory11_info" {
     GHC.Read.$fReadGeneralCategory11_info:
         const GHC.Read.$fReadGeneralCategory11_entry;
         const 0;
         const 1653562408974;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.02271525 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory10_closure" {
     GHC.Read.$fReadGeneralCategory10_closure:
         const GHC.Read.$fReadGeneralCategory10_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory10_entry() //  [R2]
         { []
         }
     {offset
       c41bO: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory11_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory117_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory10_info" {
     GHC.Read.$fReadGeneralCategory10_info:
         const GHC.Read.$fReadGeneralCategory10_entry;
         const 0;
         const 6601364733966;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.026900196 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory9_closure" {
     GHC.Read.$fReadGeneralCategory9_closure:
         const GHC.Read.$fReadGeneralCategory9_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory9_entry() //  [R2]
         { []
         }
     {offset
       c41bZ: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory10_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory121_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory9_info" {
     GHC.Read.$fReadGeneralCategory9_info:
         const GHC.Read.$fReadGeneralCategory9_entry;
         const 0;
         const 26392574033934;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.03087427 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory8_closure" {
     GHC.Read.$fReadGeneralCategory8_closure:
         const GHC.Read.$fReadGeneralCategory8_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory8_entry() //  [R2]
         { []
         }
     {offset
       c41ca: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory9_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory125_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory8_info" {
     GHC.Read.$fReadGeneralCategory8_info:
         const GHC.Read.$fReadGeneralCategory8_entry;
         const 0;
         const 105557411233806;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.034323454 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory7_closure" {
     GHC.Read.$fReadGeneralCategory7_closure:
         const GHC.Read.$fReadGeneralCategory7_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory7_entry() //  [R2]
         { []
         }
     {offset
       c41cl: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory8_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory129_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory7_info" {
     GHC.Read.$fReadGeneralCategory7_info:
         const GHC.Read.$fReadGeneralCategory7_entry;
         const 0;
         const 422216760033294;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.03791644 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory6_closure" {
     GHC.Read.$fReadGeneralCategory6_closure:
         const GHC.Read.$fReadGeneralCategory6_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory6_entry() //  [R2]
         { []
         }
     {offset
       c41cw: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory7_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory133_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory6_info" {
     GHC.Read.$fReadGeneralCategory6_info:
         const GHC.Read.$fReadGeneralCategory6_entry;
         const 0;
         const 1688854155231246;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.04137785 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory5_closure" {
     GHC.Read.$fReadGeneralCategory5_closure:
         const GHC.Read.$fReadGeneralCategory5_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory5_entry() //  [R2]
         { []
         }
     {offset
       c41cH: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory6_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory137_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory5_info" {
     GHC.Read.$fReadGeneralCategory5_info:
         const GHC.Read.$fReadGeneralCategory5_entry;
         const 0;
         const 6755403736023054;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.04486816 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory4_closure" {
     GHC.Read.$fReadGeneralCategory4_closure:
         const GHC.Read.$fReadGeneralCategory4_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory4_entry() //  [R2]
         { []
         }
     {offset
       c41cS: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory5_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory141_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory4_info" {
     GHC.Read.$fReadGeneralCategory4_info:
         const GHC.Read.$fReadGeneralCategory4_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.048291206 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory3_closure" {
     GHC.Read.$fReadGeneralCategory3_closure:
         const GHC.Read.$fReadGeneralCategory3_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory3_entry() //  [R2]
         { []
         }
     {offset
       c41d3: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory4_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory145_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory3_info" {
     GHC.Read.$fReadGeneralCategory3_info:
         const GHC.Read.$fReadGeneralCategory3_entry;
         const 0;
         const 108086395351859214;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.051742913 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory2_closure" {
     GHC.Read.$fReadGeneralCategory2_closure:
         const GHC.Read.$fReadGeneralCategory2_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory2_entry() //  [R2]
         { []
         }
     {offset
       c41de: // global
           R4 = R2;
           R3 = GHC.Read.$fReadGeneralCategory3_closure+1;
           R2 = GHC.Read.$fReadGeneralCategory149_closure+1;
           call GHC.Read.$fReadGeneralCategory36_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory2_info" {
     GHC.Read.$fReadGeneralCategory2_info:
         const GHC.Read.$fReadGeneralCategory2_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const S3Y0k_srt+1312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.055444074 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory1_closure" {
     GHC.Read.$fReadGeneralCategory1_closure:
         const GHC.Read.$fReadGeneralCategory1_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory1_entry() //  [R2, R3]
         { []
         }
     {offset
       c41dp: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadGeneralCategory2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory1_info" {
     GHC.Read.$fReadGeneralCategory1_info:
         const GHC.Read.$fReadGeneralCategory1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.060095449 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory_$creadsPrec_closure" {
     GHC.Read.$fReadGeneralCategory_$creadsPrec_closure:
         const GHC.Read.$fReadGeneralCategory_$creadsPrec_info;
         const 0;
 },
 sat_s3XNS_entry() //  [R1]
         { []
         }
     {offset
       c41dE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41dF; else goto c41dG;
       c41dF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41dG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadGeneralCategory2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XNS_info" {
     sat_s3XNS_info:
         const sat_s3XNS_entry;
         const 1;
         const 12884901904;
         const S3Y0k_srt+1528;
 },
 GHC.Read.$fReadGeneralCategory_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c41dH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41dL; else goto c41dK;
       c41dL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadGeneralCategory_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41dK: // global
           I64[Hp - 16] = sat_s3XNS_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory_$creadsPrec_info" {
     GHC.Read.$fReadGeneralCategory_$creadsPrec_info:
         const GHC.Read.$fReadGeneralCategory_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3Y0k_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.066274872 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory_$creadListPrec_closure" {
     GHC.Read.$fReadGeneralCategory_$creadListPrec_closure:
         const GHC.Read.$fReadGeneralCategory_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c41e4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41e5; else goto c41e6;
       c41e5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41e6: // global
           (_c41e1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41e1::I64 == 0) goto c41e3; else goto c41e2;
       c41e3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41e2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41e1::I64;
           R2 = GHC.Read.$fReadGeneralCategory1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory_$creadListPrec_info" {
     GHC.Read.$fReadGeneralCategory_$creadListPrec_info:
         const GHC.Read.$fReadGeneralCategory_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S3Y0k_srt+1552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.070463809 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory153_closure" {
     GHC.Read.$fReadGeneralCategory153_closure:
         const GHC.Read.$fReadGeneralCategory153_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory153_entry() //  [R1]
         { []
         }
     {offset
       c41el: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41em; else goto c41en;
       c41em: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41en: // global
           (_c41ei::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41ei::I64 == 0) goto c41ek; else goto c41ej;
       c41ek: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41ej: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41ei::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadGeneralCategory_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory153_info" {
     GHC.Read.$fReadGeneralCategory153_info:
         const GHC.Read.$fReadGeneralCategory153_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+1568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.074517286 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory_$creadList_closure" {
     GHC.Read.$fReadGeneralCategory_$creadList_closure:
         const GHC.Read.$fReadGeneralCategory_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadGeneralCategory_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c41eB: // global
           R3 = R2;
           R2 = GHC.Read.$fReadGeneralCategory153_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadGeneralCategory_$creadList_info" {
     GHC.Read.$fReadGeneralCategory_$creadList_info:
         const GHC.Read.$fReadGeneralCategory_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+1576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.077806754 UTC

[section ""data" . GHC.Read.$fReadGeneralCategory_closure" {
     GHC.Read.$fReadGeneralCategory_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadGeneralCategory_$creadsPrec_closure+1;
         const GHC.Read.$fReadGeneralCategory_$creadList_closure+1;
         const GHC.Read.$fReadGeneralCategory1_closure+2;
         const GHC.Read.$fReadGeneralCategory_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.079821438 UTC

[section ""data" . GHC.Read.$fRead()4_closure" {
     GHC.Read.$fRead()4_closure:
         const GHC.Read.$fRead()4_info;
 },
 GHC.Read.$fRead()4_entry() //  [R3]
         { []
         }
     {offset
       c41eN: // global
           R2 = GHC.Tuple.()_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()4_info" {
     GHC.Read.$fRead()4_info:
         const GHC.Read.$fRead()4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.083777416 UTC

[section ""data" . GHC.Read.$fRead()3_closure" {
     GHC.Read.$fRead()3_closure:
         const GHC.Read.$fRead()3_info;
 },
 GHC.Read.$fRead()3_entry() //  [R2, R3]
         { []
         }
     {offset
       c41f2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41f3; else goto c41f4;
       c41f3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead()3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41f4: // global
           I64[Sp - 8] = block_c41eZ_info;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fRead()4_closure+2;
           Sp = Sp - 8;
           call GHC.Read.$wparen'_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()3_info" {
     GHC.Read.$fRead()3_info:
         const GHC.Read.$fRead()3_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c41eZ() //  [R1]
         { []
         }
     {offset
       c41eZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41f7; else goto c41f6;
       c41f7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41f6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41eZ_info" {
     block_c41eZ_info:
         const _c41eZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.08961754 UTC

[section ""data" . GHC.Read.$fRead()2_closure" {
     GHC.Read.$fRead()2_closure:
         const GHC.Read.$fRead()2_info;
 },
 GHC.Read.$fRead()2_entry() //  [R2, R3]
         { []
         }
     {offset
       c41fq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41fr; else goto c41fs;
       c41fr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead()2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41fs: // global
           I64[Sp - 8] = block_c41fn_info;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fRead()3_closure+2;
           Sp = Sp - 8;
           call GHC.Read.$wskipSpacesThenP_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()2_info" {
     GHC.Read.$fRead()2_info:
         const GHC.Read.$fRead()2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c41fn() //  [R1]
         { []
         }
     {offset
       c41fn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41fv; else goto c41fu;
       c41fv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41fu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41fn_info" {
     block_c41fn_info:
         const _c41fn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.095630995 UTC

[section ""data" . GHC.Read.$fRead()1_closure" {
     GHC.Read.$fRead()1_closure:
         const GHC.Read.$fRead()1_info;
         const 0;
 },
 GHC.Read.$fRead()1_entry() //  [R2, R3]
         { []
         }
     {offset
       c41fL: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fRead()2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()1_info" {
     GHC.Read.$fRead()1_info:
         const GHC.Read.$fRead()1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.099668898 UTC

[section ""data" . GHC.Read.$fRead()_$creadsPrec_closure" {
     GHC.Read.$fRead()_$creadsPrec_closure:
         const GHC.Read.$fRead()_$creadsPrec_info;
         const 0;
 },
 sat_s3XO4_entry() //  [R1]
         { []
         }
     {offset
       c41g0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41g1; else goto c41g2;
       c41g1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41g2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fRead()2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XO4_info" {
     sat_s3XO4_info:
         const sat_s3XO4_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+1536;
 },
 GHC.Read.$fRead()_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c41g3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41g7; else goto c41g6;
       c41g7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead()_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41g6: // global
           I64[Hp - 16] = sat_s3XO4_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()_$creadsPrec_info" {
     GHC.Read.$fRead()_$creadsPrec_info:
         const GHC.Read.$fRead()_$creadsPrec_entry;
         const 0;
         const 279172874254;
         const 4294967301;
         const S3Y0k_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.107167823 UTC

[section ""data" . GHC.Read.$fRead()_$creadListPrec_closure" {
     GHC.Read.$fRead()_$creadListPrec_closure:
         const GHC.Read.$fRead()_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead()_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c41gq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41gr; else goto c41gs;
       c41gr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41gs: // global
           (_c41gn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41gn::I64 == 0) goto c41gp; else goto c41go;
       c41gp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41go: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41gn::I64;
           R2 = GHC.Read.$fRead()1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()_$creadListPrec_info" {
     GHC.Read.$fRead()_$creadListPrec_info:
         const GHC.Read.$fRead()_$creadListPrec_entry;
         const 0;
         const 73014444053;
         const S3Y0k_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.112116334 UTC

[section ""data" . GHC.Read.$fRead()6_closure" {
     GHC.Read.$fRead()6_closure:
         const GHC.Read.$fRead()6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead()6_entry() //  [R1]
         { []
         }
     {offset
       c41gH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41gI; else goto c41gJ;
       c41gI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41gJ: // global
           (_c41gE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41gE::I64 == 0) goto c41gG; else goto c41gF;
       c41gG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41gF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41gE::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fRead()_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()6_info" {
     GHC.Read.$fRead()6_info:
         const GHC.Read.$fRead()6_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+1600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.116327956 UTC

[section ""data" . GHC.Read.$fRead()_$creadList_closure" {
     GHC.Read.$fRead()_$creadList_closure:
         const GHC.Read.$fRead()_$creadList_info;
         const 0;
 },
 GHC.Read.$fRead()_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c41gX: // global
           R3 = R2;
           R2 = GHC.Read.$fRead()6_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead()_$creadList_info" {
     GHC.Read.$fRead()_$creadList_info:
         const GHC.Read.$fRead()_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+1608;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.119632899 UTC

[section ""data" . GHC.Read.$fRead()_closure" {
     GHC.Read.$fRead()_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fRead()_$creadsPrec_closure+1;
         const GHC.Read.$fRead()_$creadList_closure+1;
         const GHC.Read.$fRead()1_closure+2;
         const GHC.Read.$fRead()_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.121497288 UTC

[section ""data" . GHC.Read.$fReadRatio5_closure" {
     GHC.Read.$fReadRatio5_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.123180651 UTC

[section ""cstring" . GHC.Read.$fReadRatio4_bytes" {
     GHC.Read.$fReadRatio4_bytes:
         I8[] [37]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.125617555 UTC

[section ""data" . GHC.Read.$fReadRatio3_closure" {
     GHC.Read.$fReadRatio3_closure:
         const GHC.Read.$fReadRatio3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadRatio3_entry() //  [R1]
         { []
         }
     {offset
       c41hd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41he; else goto c41hf;
       c41he: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41hf: // global
           (_c41ha::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41ha::I64 == 0) goto c41hc; else goto c41hb;
       c41hc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41hb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41ha::I64;
           R2 = GHC.Read.$fReadRatio4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio3_info" {
     GHC.Read.$fReadRatio3_info:
         const GHC.Read.$fReadRatio3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.130545455 UTC

[section ""data" . GHC.Read.$fReadRatio2_closure" {
     GHC.Read.$fReadRatio2_closure:
         const Text.Read.Lex.Symbol_con_info;
         const GHC.Read.$fReadRatio3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.138543822 UTC

[section ""data" . GHC.Read.$fReadRatio1_closure" {
     GHC.Read.$fReadRatio1_closure:
         const GHC.Read.$fReadRatio1_info;
         const 0;
 },
 ds1_s3XO9_entry() //  [R1]
         { []
         }
     {offset
       c41hx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c41hy; else goto c41hz;
       c41hy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41hz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Read.$fReadRatio5_closure+1;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3XO9_info" {
     ds1_s3XO9_info:
         const ds1_s3XO9_entry;
         const 1;
         const 16;
 },
 sat_s3XOi_entry() //  [R1]
         { []
         }
     {offset
       c41i7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41i8; else goto c41i9;
       c41i8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41i9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.%_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XOi_info" {
     sat_s3XOi_info:
         const sat_s3XOi_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+1616;
 },
 sat_s3XOj_entry() //  [R1, R2]
         { []
         }
     {offset
       c41ia: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c41ie; else goto c41id;
       c41ie: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41id: // global
           _s3XO5::P64 = P64[R1 + 7];
           _s3XOb::P64 = P64[R1 + 15];
           _s3XOf::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_s3XOi_info;
           P64[Hp - 16] = _s3XO5::P64;
           P64[Hp - 8] = _s3XOf::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3XOb::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOj_info" {
     sat_s3XOj_info:
         const sat_s3XOj_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+1616;
 },
 sat_s3XOk_entry() //  [R1, R2]
         { []
         }
     {offset
       c41if: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c41ij; else goto c41ii;
       c41ij: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41ii: // global
           _s3XO5::P64 = P64[R1 + 7];
           _s3XO9::P64 = P64[R1 + 15];
           _s3XOb::P64 = P64[R1 + 23];
           _s3XOf::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_s3XOj_info;
           P64[Hp - 16] = _s3XO5::P64;
           P64[Hp - 8] = _s3XOb::P64;
           P64[Hp] = _s3XOf::P64;
           R2 = Hp - 23;
           R1 = _s3XO9::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOk_info" {
     sat_s3XOk_info:
         const sat_s3XOk_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+1616;
 },
 section ""relreadonly" . u41iK_srtd" {
     u41iK_srtd:
         const S3Y0k_srt+120;
         const 189;
         const 1;
         const 0;
         const 1729382256910270464;
 },
 sat_s3XOn_entry() //  [R1, R2]
         { []
         }
     {offset
       c41in: // global
           _s3XOf::P64 = R2;
           _s3XOn::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c41io; else goto c41ip;
       c41ip: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c41ir; else goto c41iq;
       c41ir: // global
           HpAlloc = 40;
           goto c41io;
       c41io: // global
           R2 = _s3XOf::P64;
           R1 = _s3XOn::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41iq: // global
           _s3XO5::P64 = P64[_s3XOn::P64 + 7];
           _s3XO9::P64 = P64[_s3XOn::P64 + 15];
           _s3XOb::P64 = P64[_s3XOn::P64 + 23];
           I64[Hp - 32] = sat_s3XOk_info;
           P64[Hp - 24] = _s3XO5::P64;
           P64[Hp - 16] = _s3XO9::P64;
           P64[Hp - 8] = _s3XOb::P64;
           P64[Hp] = _s3XOf::P64;
           I64[Sp - 8] = block_c41ik_info;
           R3 = Hp - 31;
           R2 = GHC.Read.$fReadRatio2_closure+5;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOn_info" {
     sat_s3XOn_info:
         const sat_s3XOn_entry;
         const 3;
         const 18446744069414584328;
         const 4294967301;
         const u41iK_srtd;
 },
 _c41ik() //  [R1]
         { []
         }
     {offset
       c41ik: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41iu; else goto c41it;
       c41iu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41it: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41ik_info" {
     block_c41ik_info:
         const _c41ik;
         const 0;
         const 30;
 },
 section ""relreadonly" . u41iL_srtd" {
     u41iL_srtd:
         const S3Y0k_srt+120;
         const 189;
         const 1;
         const 0;
         const 1729382256910270464;
 },
 sat_s3XOo_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c41iv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c41iw; else goto c41ix;
       c41iw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41ix: // global
           I64[Sp - 32] = block_c41hF_info;
           _s3XO5::P64 = P64[R1 + 6];
           _s3XO9::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s3XO5::P64;
           P64[Sp - 16] = _s3XO9::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u41iE; else goto c41hG;
       u41iE: // global
           call _c41hF(R1) args: 0, res: 0, upd: 0;
       c41hG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOo_info" {
     sat_s3XOo_info:
         const sat_s3XOo_entry;
         const 2;
         const 18446744069414584331;
         const 8589934607;
         const u41iL_srtd;
 },
 section ""relreadonly" . u41iM_srtd" {
     u41iM_srtd:
         const S3Y0k_srt+120;
         const 189;
         const 1;
         const 0;
         const 1729382256910270464;
 },
 _c41hF() //  [R1]
         { []
         }
     {offset
       c41hF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c41iA; else goto c41iz;
       c41iA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41iz: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 7)) goto c41iC; else goto c41iD;
       c41iC: // global
           Hp = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c41iD: // global
           I64[Hp - 24] = sat_s3XOn_info;
           P64[Hp - 16] = P64[Sp + 8];
           _s3XO9::P64 = P64[Sp + 16];
           P64[Hp - 8] = _s3XO9::P64;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 23;
           R1 = _s3XO9::P64;
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41hF_info" {
     block_c41hF_info:
         const _c41hF;
         const 3;
         const 18446744069414584350;
         const u41iM_srtd;
 },
 section ""relreadonly" . u41iN_srtd" {
     u41iN_srtd:
         const S3Y0k_srt+120;
         const 190;
         const 1;
         const 0;
         const 4035788216077385728;
 },
 GHC.Read.$fReadRatio1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c41iF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c41iJ; else goto c41iI;
       c41iJ: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c41iI: // global
           I64[Hp - 40] = ds1_s3XO9_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s3XOo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           _s3XO7::P64 = R4;
           R4 = R5;
           R3 = _s3XO7::P64;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio1_info" {
     GHC.Read.$fReadRatio1_info:
         const GHC.Read.$fReadRatio1_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u41iN_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.165067276 UTC

[section ""data" . GHC.Read.$fReadRatio_$creadsPrec_closure" {
     GHC.Read.$fReadRatio_$creadsPrec_closure:
         const GHC.Read.$fReadRatio_$creadsPrec_info;
         const 0;
 },
 sat_s3XOs_entry() //  [R1]
         { []
         }
     {offset
       c41jQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41jR; else goto c41jS;
       c41jR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41jS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadRatio1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XOs_info" {
     sat_s3XOs_info:
         const sat_s3XOs_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+1632;
 },
 GHC.Read.$fReadRatio_$creadsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c41jT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c41jX; else goto c41jW;
       c41jX: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio_$creadsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c41jW: // global
           I64[Hp - 32] = sat_s3XOs_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio_$creadsPrec_info" {
     GHC.Read.$fReadRatio_$creadsPrec_info:
         const GHC.Read.$fReadRatio_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S3Y0k_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.171406835 UTC

[section ""data" . GHC.Read.$fReadRatio_$creadListPrec_closure" {
     GHC.Read.$fReadRatio_$creadListPrec_closure:
         const GHC.Read.$fReadRatio_$creadListPrec_info;
         const 0;
 },
 sat_s3XOv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c41kj: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadRatio1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOv_info" {
     sat_s3XOv_info:
         const sat_s3XOv_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3Y0k_srt+1632;
 },
 GHC.Read.$fReadRatio_$creadListPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c41km: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41kq; else goto c41kp;
       c41kq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio_$creadListPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41kp: // global
           I64[Hp - 16] = sat_s3XOv_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 14;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio_$creadListPrec_info" {
     GHC.Read.$fReadRatio_$creadListPrec_info:
         const GHC.Read.$fReadRatio_$creadListPrec_entry;
         const 0;
         const 10999411245070;
         const 8589934607;
         const S3Y0k_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.179140166 UTC

[section ""data" . GHC.Read.$fReadRatio_$creadList_closure" {
     GHC.Read.$fReadRatio_$creadList_closure:
         const GHC.Read.$fReadRatio_$creadList_info;
         const 0;
 },
 sat_s3XOy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c41kM: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadRatio1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOy_info" {
     sat_s3XOy_info:
         const sat_s3XOy_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3Y0k_srt+1632;
 },
 sat_s3XOz_entry() //  [R1]
         { []
         }
     {offset
       c41kP: // global
           _s3XOz::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c41kQ; else goto c41kR;
       c41kR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41kT; else goto c41kS;
       c41kT: // global
           HpAlloc = 24;
           goto c41kQ;
       c41kQ: // global
           R1 = _s3XOz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41kS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XOz::P64;
           _s3XOw::P64 = P64[_s3XOz::P64 + 16];
           _s3XOx::P64 = P64[_s3XOz::P64 + 24];
           I64[Hp - 16] = sat_s3XOy_info;
           P64[Hp - 8] = _s3XOw::P64;
           P64[Hp] = _s3XOx::P64;
           R2 = Hp - 14;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XOz_info" {
     sat_s3XOz_info:
         const sat_s3XOz_entry;
         const 2;
         const 2203318222866;
         const S3Y0k_srt+1560;
 },
 GHC.Read.$fReadRatio_$creadList_entry() //  [R2, R3]
         { []
         }
     {offset
       c41kU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c41kY; else goto c41kX;
       c41kY: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio_$creadList_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41kX: // global
           I64[Hp - 24] = sat_s3XOz_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio_$creadList_info" {
     GHC.Read.$fReadRatio_$creadList_info:
         const GHC.Read.$fReadRatio_$creadList_entry;
         const 0;
         const 19795504267278;
         const 8589934607;
         const S3Y0k_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.190263259 UTC

[section ""data" . GHC.Read.$fReadRatio_closure" {
     GHC.Read.$fReadRatio_closure:
         const GHC.Read.$fReadRatio_info;
         const 0;
 },
 sat_s3XOF_entry() //  [R1]
         { []
         }
     {offset
       c41lq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41lr; else goto c41ls;
       c41lr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41ls: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadRatio_$creadListPrec_entry(R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XOF_info" {
     sat_s3XOF_info:
         const sat_s3XOF_entry;
         const 2;
         const 4294967314;
         const S3Y0k_srt+1648;
 },
 sat_s3XOE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c41ly: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadRatio1_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOE_info" {
     sat_s3XOE_info:
         const sat_s3XOE_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3Y0k_srt+1632;
 },
 sat_s3XOD_entry() //  [R1]
         { []
         }
     {offset
       c41lF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41lG; else goto c41lH;
       c41lG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41lH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadRatio_$creadList_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XOD_info" {
     sat_s3XOD_info:
         const sat_s3XOD_entry;
         const 2;
         const 4294967314;
         const S3Y0k_srt+1656;
 },
 sat_s3XOC_entry() //  [R1, R2]
         { []
         }
     {offset
       c41lN: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadRatio_$creadsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOC_info" {
     sat_s3XOC_info:
         const sat_s3XOC_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S3Y0k_srt+1640;
 },
 GHC.Read.$fReadRatio_entry() //  [R2, R3]
         { []
         }
     {offset
       c41lR: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c41lV; else goto c41lU;
       c41lV: // global
           HpAlloc = 152;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadRatio_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41lU: // global
           I64[Hp - 144] = sat_s3XOF_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s3XOE_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s3XOD_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_s3XOC_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 88;
           P64[Hp - 8] = Hp - 110;
           P64[Hp] = Hp - 144;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadRatio_info" {
     GHC.Read.$fReadRatio_info:
         const GHC.Read.$fReadRatio_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S3Y0k_srt+1632;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.201792517 UTC

[section ""cstring" . GHC.Read.$fReadMaybe5_bytes" {
     GHC.Read.$fReadMaybe5_bytes:
         I8[] [78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.204395916 UTC

[section ""data" . GHC.Read.$fReadMaybe4_closure" {
     GHC.Read.$fReadMaybe4_closure:
         const GHC.Read.$fReadMaybe4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadMaybe4_entry() //  [R1]
         { []
         }
     {offset
       c41mx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41my; else goto c41mz;
       c41my: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41mz: // global
           (_c41mu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41mu::I64 == 0) goto c41mw; else goto c41mv;
       c41mw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41mv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41mu::I64;
           R2 = GHC.Read.$fReadMaybe5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe4_info" {
     GHC.Read.$fReadMaybe4_info:
         const GHC.Read.$fReadMaybe4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.208903255 UTC

[section ""data" . GHC.Read.$fReadMaybe_lexeme1_closure" {
     GHC.Read.$fReadMaybe_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.Read.$fReadMaybe4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.210927235 UTC

[section ""cstring" . GHC.Read.$fReadMaybe3_bytes" {
     GHC.Read.$fReadMaybe3_bytes:
         I8[] [74,117,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.213687395 UTC

[section ""data" . GHC.Read.$fReadMaybe2_closure" {
     GHC.Read.$fReadMaybe2_closure:
         const GHC.Read.$fReadMaybe2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadMaybe2_entry() //  [R1]
         { []
         }
     {offset
       c41mQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41mR; else goto c41mS;
       c41mR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41mS: // global
           (_c41mN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41mN::I64 == 0) goto c41mP; else goto c41mO;
       c41mP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41mO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41mN::I64;
           R2 = GHC.Read.$fReadMaybe3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe2_info" {
     GHC.Read.$fReadMaybe2_info:
         const GHC.Read.$fReadMaybe2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.218082705 UTC

[section ""data" . GHC.Read.$fReadMaybe_lexeme_closure" {
     GHC.Read.$fReadMaybe_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.Read.$fReadMaybe2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.219854449 UTC

[section ""data" . GHC.Read.$fReadArray2_closure" {
     GHC.Read.$fReadArray2_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.230569666 UTC

[section ""data" . GHC.Read.$fReadMaybe1_closure" {
     GHC.Read.$fReadMaybe1_closure:
         const GHC.Read.$fReadMaybe1_info;
         const 0;
 },
 sat_s3XOM_entry() //  [R1]
         { []
         }
     {offset
       c41nh: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOM_info" {
     sat_s3XOM_info:
         const sat_s3XOM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XOW_entry() //  [R1, R2]
         { []
         }
     {offset
       c41nK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41nO; else goto c41nN;
       c41nO: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41nN: // global
           _s3XOK::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           R1 = _s3XOK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOW_info" {
     sat_s3XOW_info:
         const sat_s3XOW_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XOX_entry() //  [R1, R2]
         { []
         }
     {offset
       c41nP: // global
           _s3XOT::P64 = R2;
           _s3XOX::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c41nQ; else goto c41nR;
       c41nR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41nT; else goto c41nS;
       c41nT: // global
           HpAlloc = 16;
           goto c41nQ;
       c41nQ: // global
           R2 = _s3XOT::P64;
           R1 = _s3XOX::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41nS: // global
           _s3XOG::P64 = P64[_s3XOX::P64 + 7];
           _s3XOK::P64 = P64[_s3XOX::P64 + 15];
           I64[Hp - 8] = sat_s3XOW_info;
           P64[Hp] = _s3XOK::P64;
           R2 = _s3XOG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = GHC.Read.$fReadArray2_closure+1;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Read.readPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XOX_info" {
     sat_s3XOX_info:
         const sat_s3XOX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3XP0_entry() //  [R1]
         { []
         }
     {offset
       c41nU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c41nV; else goto c41nW;
       c41nV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41nW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c41nq_info;
           _s3XOG::P64 = P64[R1 + 16];
           _s3XOK::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s3XOG::P64;
           P64[Sp - 24] = _s3XOK::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u41o9; else goto c41nr;
       u41o9: // global
           call _c41nq(R1) args: 0, res: 0, upd: 0;
       c41nr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XP0_info" {
     sat_s3XP0_info:
         const sat_s3XP0_entry;
         const 3;
         const 12884901903;
         const S3Y0k_srt+1672;
 },
 _c41nq() //  [R1]
         { []
         }
     {offset
       c41nq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41nZ; else goto c41nY;
       c41nZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c41nY: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c41o1; else goto c41o5;
       c41o1: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c41o5: // global
           I64[Hp - 16] = sat_s3XOX_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c41o2_info;
           R3 = Hp - 15;
           R2 = GHC.Read.$fReadMaybe_lexeme_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c41nq_info" {
     block_c41nq_info:
         const _c41nq;
         const 2;
         const 12884901918;
         const S3Y0k_srt+1672;
 },
 _c41o2() //  [R1]
         { []
         }
     {offset
       c41o2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41o8; else goto c41o7;
       c41o8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c41o7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c41o2_info" {
     block_c41o2_info:
         const _c41o2;
         const 0;
         const 30;
 },
 section ""relreadonly" . u41oo_srtd" {
     u41oo_srtd:
         const S3Y0k_srt+936;
         const 95;
         const 1;
         const 1879048192;
 },
 sat_s3XP1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c41ob: // global
           _s3XOK::P64 = R3;
           _s3XOJ::P64 = R2;
           _s3XP1::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c41oc; else goto c41od;
       c41od: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41of; else goto c41oe;
       c41of: // global
           HpAlloc = 16;
           goto c41oc;
       c41oc: // global
           R3 = _s3XOK::P64;
           R2 = _s3XOJ::P64;
           R1 = _s3XP1::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41oe: // global
           _s3XOG::P64 = P64[_s3XP1::P64 + 6];
           I64[Hp - 8] = sat_s3XOM_info;
           P64[Hp] = _s3XOK::P64;
           I64[Sp - 32] = block_c41nk_info;
           R3 = Hp - 7;
           R2 = GHC.Read.$fReadMaybe_lexeme1_closure+4;
           P64[Sp - 24] = _s3XOG::P64;
           P64[Sp - 16] = _s3XOJ::P64;
           P64[Sp - 8] = _s3XOK::P64;
           Sp = Sp - 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XP1_info" {
     sat_s3XP1_info:
         const sat_s3XP1_entry;
         const 1;
         const 18446744069414584329;
         const 8589934607;
         const u41oo_srtd;
 },
 section ""relreadonly" . u41op_srtd" {
     u41op_srtd:
         const S3Y0k_srt+936;
         const 94;
         const 1;
         const 805306368;
 },
 _c41nk() //  [R1]
         { []
         }
     {offset
       c41nk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c41oi; else goto c41oh;
       c41oi: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41oh: // global
           I64[Hp - 48] = sat_s3XP0_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp + 32;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41nk_info" {
     block_c41nk_info:
         const _c41nk;
         const 3;
         const 18446744069414584350;
         const u41op_srtd;
 },
 section ""relreadonly" . u41oq_srtd" {
     u41oq_srtd:
         const S3Y0k_srt+936;
         const 96;
         const 1;
         const 4026533888;
 },
 GHC.Read.$fReadMaybe1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c41oj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41on; else goto c41om;
       c41on: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c41om: // global
           I64[Hp - 8] = sat_s3XP1_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 6;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe1_info" {
     GHC.Read.$fReadMaybe1_info:
         const GHC.Read.$fReadMaybe1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u41oq_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.258884193 UTC

[section ""data" . GHC.Read.$fReadMaybe_$creadsPrec_closure" {
     GHC.Read.$fReadMaybe_$creadsPrec_closure:
         const GHC.Read.$fReadMaybe_$creadsPrec_info;
         const 0;
 },
 sat_s3XP4_entry() //  [R1]
         { []
         }
     {offset
       c41pw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41px; else goto c41py;
       c41px: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41py: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XP4_info" {
     sat_s3XP4_info:
         const sat_s3XP4_entry;
         const 2;
         const 4294967314;
         const S3Y0k_srt+1696;
 },
 GHC.Read.$fReadMaybe_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c41pz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c41pD; else goto c41pC;
       c41pD: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41pC: // global
           I64[Hp - 24] = sat_s3XP4_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe_$creadsPrec_info" {
     GHC.Read.$fReadMaybe_$creadsPrec_info:
         const GHC.Read.$fReadMaybe_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+1696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.268866278 UTC

[section ""data" . GHC.Read.$fReadMaybe_$creadListPrec_closure" {
     GHC.Read.$fReadMaybe_$creadListPrec_closure:
         const GHC.Read.$fReadMaybe_$creadListPrec_info;
         const 0;
 },
 sat_s3XP6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c41pZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XP6_info" {
     sat_s3XP6_info:
         const sat_s3XP6_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3Y0k_srt+1696;
 },
 GHC.Read.$fReadMaybe_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c41q2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41q6; else goto c41q5;
       c41q6: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41q5: // global
           I64[Hp - 8] = sat_s3XP6_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe_$creadListPrec_info" {
     GHC.Read.$fReadMaybe_$creadListPrec_info:
         const GHC.Read.$fReadMaybe_$creadListPrec_entry;
         const 0;
         const 2814754062073870;
         const 4294967301;
         const S3Y0k_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.280087691 UTC

[section ""data" . GHC.Read.$fReadMaybe_$creadList_closure" {
     GHC.Read.$fReadMaybe_$creadList_closure:
         const GHC.Read.$fReadMaybe_$creadList_info;
         const 0;
 },
 sat_s3XP8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c41qs: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XP8_info" {
     sat_s3XP8_info:
         const sat_s3XP8_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3Y0k_srt+1696;
 },
 sat_s3XP9_entry() //  [R1]
         { []
         }
     {offset
       c41qv: // global
           _s3XP9::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c41qw; else goto c41qx;
       c41qx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41qz; else goto c41qy;
       c41qz: // global
           HpAlloc = 16;
           goto c41qw;
       c41qw: // global
           R1 = _s3XP9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41qy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XP9::P64;
           _s3XP7::P64 = P64[_s3XP9::P64 + 16];
           I64[Hp - 8] = sat_s3XP8_info;
           P64[Hp] = _s3XP7::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XP9_info" {
     sat_s3XP9_info:
         const sat_s3XP9_entry;
         const 1;
         const 562954248388624;
         const S3Y0k_srt+1560;
 },
 GHC.Read.$fReadMaybe_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c41qA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41qE; else goto c41qD;
       c41qE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41qD: // global
           I64[Hp - 16] = sat_s3XP9_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe_$creadList_info" {
     GHC.Read.$fReadMaybe_$creadList_info:
         const GHC.Read.$fReadMaybe_$creadList_entry;
         const 0;
         const 5066553875759118;
         const 4294967301;
         const S3Y0k_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.29344713 UTC

[section ""data" . GHC.Read.$fReadMaybe_closure" {
     GHC.Read.$fReadMaybe_closure:
         const GHC.Read.$fReadMaybe_info;
         const 0;
 },
 sat_s3XPe_entry() //  [R1]
         { []
         }
     {offset
       c41r6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41r7; else goto c41r8;
       c41r7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41r8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadMaybe_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XPe_info" {
     sat_s3XPe_info:
         const sat_s3XPe_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+1712;
 },
 sat_s3XPd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c41re: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XPd_info" {
     sat_s3XPd_info:
         const sat_s3XPd_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3Y0k_srt+1696;
 },
 sat_s3XPc_entry() //  [R1]
         { []
         }
     {offset
       c41rl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41rm; else goto c41rn;
       c41rm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41rn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadMaybe_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XPc_info" {
     sat_s3XPc_info:
         const sat_s3XPc_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+1720;
 },
 sat_s3XPb_entry() //  [R1, R2]
         { []
         }
     {offset
       c41rt: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadMaybe_$creadsPrec_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XPb_info" {
     sat_s3XPb_info:
         const sat_s3XPb_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+1704;
 },
 GHC.Read.$fReadMaybe_entry() //  [R2]
         { []
         }
     {offset
       c41rx: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c41rB; else goto c41rA;
       c41rB: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = GHC.Read.$fReadMaybe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41rA: // global
           I64[Hp - 112] = sat_s3XPe_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s3XPd_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s3XPc_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3XPb_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadMaybe_info" {
     GHC.Read.$fReadMaybe_info:
         const GHC.Read.$fReadMaybe_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S3Y0k_srt+1696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.308068449 UTC

[section ""cstring" . GHC.Read.$fReadOrdering4_bytes" {
     GHC.Read.$fReadOrdering4_bytes:
         I8[] [76,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.311708412 UTC

[section ""data" . GHC.Read.$fReadOrdering3_closure" {
     GHC.Read.$fReadOrdering3_closure:
         const GHC.Read.$fReadOrdering3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering3_entry() //  [R1]
         { []
         }
     {offset
       c41sd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41se; else goto c41sf;
       c41se: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41sf: // global
           (_c41sa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41sa::I64 == 0) goto c41sc; else goto c41sb;
       c41sc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41sb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41sa::I64;
           R2 = GHC.Read.$fReadOrdering4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering3_info" {
     GHC.Read.$fReadOrdering3_info:
         const GHC.Read.$fReadOrdering3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.31790512 UTC

[section ""cstring" . GHC.Read.$fReadOrdering6_bytes" {
     GHC.Read.$fReadOrdering6_bytes:
         I8[] [71,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.321503112 UTC

[section ""data" . GHC.Read.$fReadOrdering5_closure" {
     GHC.Read.$fReadOrdering5_closure:
         const GHC.Read.$fReadOrdering5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering5_entry() //  [R1]
         { []
         }
     {offset
       c41sv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41sw; else goto c41sx;
       c41sw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41sx: // global
           (_c41ss::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41ss::I64 == 0) goto c41su; else goto c41st;
       c41su: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41st: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41ss::I64;
           R2 = GHC.Read.$fReadOrdering6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering5_info" {
     GHC.Read.$fReadOrdering5_info:
         const GHC.Read.$fReadOrdering5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.326955948 UTC

[section ""cstring" . GHC.Read.$fReadOrdering8_bytes" {
     GHC.Read.$fReadOrdering8_bytes:
         I8[] [69,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.331951648 UTC

[section ""data" . GHC.Read.$fReadOrdering7_closure" {
     GHC.Read.$fReadOrdering7_closure:
         const GHC.Read.$fReadOrdering7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering7_entry() //  [R1]
         { []
         }
     {offset
       c41sN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41sO; else goto c41sP;
       c41sO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41sP: // global
           (_c41sK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41sK::I64 == 0) goto c41sM; else goto c41sL;
       c41sM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41sL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41sK::I64;
           R2 = GHC.Read.$fReadOrdering8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering7_info" {
     GHC.Read.$fReadOrdering7_info:
         const GHC.Read.$fReadOrdering7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.348177387 UTC

[section ""data" . GHC.Read.$w$creadPrec2_closure" {
     GHC.Read.$w$creadPrec2_closure:
         const GHC.Read.$w$creadPrec2_info;
         const 0;
 },
 lvl2_s3XPh_entry() //  [R1]
         { []
         }
     {offset
       c41ta: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41tb; else goto c41tc;
       c41tb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41tc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.EQ_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3XPh_info" {
     lvl2_s3XPh_info:
         const lvl2_s3XPh_entry;
         const 1;
         const 16;
 },
 lvl3_s3XPi_entry() //  [R1]
         { []
         }
     {offset
       c41th: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41ti; else goto c41tj;
       c41ti: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41tj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.GT_closure+3;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_s3XPi_info" {
     lvl3_s3XPi_info:
         const lvl3_s3XPi_entry;
         const 1;
         const 16;
 },
 lvl4_s3XPj_entry() //  [R1]
         { []
         }
     {offset
       c41to: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41tp; else goto c41tq;
       c41tp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41tq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.LT_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_s3XPj_info" {
     lvl4_s3XPj_info:
         const lvl4_s3XPj_entry;
         const 1;
         const 16;
 },
 w2_s3XPk_entry() //  [R1, R2]
         { []
         }
     {offset
       c41tD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c41tE; else goto c41tF;
       c41tE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41tF: // global
           I64[Sp - 32] = block_c41tw_info;
           _s3XPh::P64 = P64[R1 + 7];
           _s3XPi::P64 = P64[R1 + 15];
           _s3XPj::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 24] = _s3XPh::P64;
           P64[Sp - 16] = _s3XPi::P64;
           P64[Sp - 8] = _s3XPj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u41up; else goto c41tx;
       u41up: // global
           call _c41tw(R1) args: 0, res: 0, upd: 0;
       c41tx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w2_s3XPk_info" {
     w2_s3XPk_info:
         const w2_s3XPk_entry;
         const 3;
         const 30064771080;
         const 4294967301;
         const S3Y0k_srt+1736;
 },
 _c41tw() //  [R1]
         { []
         }
     {offset
       c41tw: // global
           if (R1 & 7 == 4) goto c41tB; else goto u41um;
       c41tB: // global
           I64[Sp - 8] = block_c41tL_info;
           R3 = GHC.Read.$fReadOrdering7_closure;
           _s3XPn::P64 = P64[R1 + 4];
           R2 = _s3XPn::P64;
           P64[Sp] = _s3XPn::P64;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u41um: // global
           Sp = Sp + 32;
           call _c41u6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c41tw_info" {
     block_c41tw_info:
         const _c41tw;
         const 3;
         const 30064771102;
         const S3Y0k_srt+1736;
 },
 _c41tL() //  [R1]
         { []
         }
     {offset
       c41tL: // global
           if (R1 & 7 == 1) goto c41tT; else goto c41ui;
       c41tT: // global
           I64[Sp] = block_c41tQ_info;
           R3 = GHC.Read.$fReadOrdering5_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c41ui: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41tL_info" {
     block_c41tL_info:
         const _c41tL;
         const 4;
         const 12884901918;
         const S3Y0k_srt+1736;
 },
 _c41tQ() //  [R1]
         { []
         }
     {offset
       c41tQ: // global
           if (R1 & 7 == 1) goto c41u0; else goto c41ue;
       c41u0: // global
           I64[Sp + 24] = block_c41tX_info;
           R3 = GHC.Read.$fReadOrdering3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c41ue: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41tQ_info" {
     block_c41tQ_info:
         const _c41tQ;
         const 132;
         const 4294967326;
         const S3Y0k_srt+1736;
 },
 _c41tX() //  [R1]
         { []
         }
     {offset
       c41tX: // global
           if (R1 & 7 == 1) goto u41un; else goto c41ua;
       u41un: // global
           Sp = Sp + 16;
           call _c41u6() args: 0, res: 0, upd: 0;
       c41ua: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41tX_info" {
     block_c41tX_info:
         const _c41tX;
         const 1;
         const 30;
 },
 _c41u6() //  []
         { []
         }
     {offset
       c41u6: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl117_s3XPr_entry() //  [R1]
         { []
         }
     {offset
       c41uv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41uw; else goto c41ux;
       c41uw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41ux: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = Text.Read.Lex.EOF_closure+7;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call w2_s3XPk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl117_s3XPr_info" {
     lvl117_s3XPr_info:
         const lvl117_s3XPr_entry;
         const 1;
         const 30064771088;
         const S3Y0k_srt+1736;
 },
 sat_s3XPy_entry() //  [R1]
         { []
         }
     {offset
       c41uC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41uD; else goto c41uE;
       c41uD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41uE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XPy_info" {
     sat_s3XPy_info:
         const sat_s3XPy_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+1760;
 },
 sat_s3XPw_entry() //  [R1, R2]
         { []
         }
     {offset
       c41uR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41uS; else goto c41uT;
       c41uS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41uT: // global
           I64[Sp - 16] = block_c41uK_info;
           _s3XPr::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XPr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u41v0; else goto c41uL;
       u41v0: // global
           call _c41uK(R1) args: 0, res: 0, upd: 0;
       c41uL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XPw_info" {
     sat_s3XPw_info:
         const sat_s3XPw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c41uK() //  [R1]
         { []
         }
     {offset
       c41uK: // global
           if (R1 & 7 == 1) goto c41uO; else goto c41uP;
       c41uO: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c41uP: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41uK_info" {
     block_c41uK_info:
         const _c41uK;
         const 1;
         const 30;
 },
 section ""relreadonly" . u41vs_srtd" {
     u41vs_srtd:
         const S3Y0k_srt+936;
         const 104;
         const 1;
         const 1030792151040;
 },
 lvl116_s3XPg_entry() //  [R1]
         { []
         }
     {offset
       c41v2: // global
           _s3XPg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41v3; else goto c41v4;
       c41v4: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c41v6; else goto c41v5;
       c41v6: // global
           HpAlloc = 184;
           goto c41v3;
       c41v3: // global
           R1 = _s3XPg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41v5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XPg::P64;
           _s3XPf::P64 = P64[_s3XPg::P64 + 16];
           I64[Hp - 176] = lvl2_s3XPh_info;
           P64[Hp - 160] = _s3XPf::P64;
           I64[Hp - 152] = lvl3_s3XPi_info;
           P64[Hp - 136] = _s3XPf::P64;
           I64[Hp - 128] = lvl4_s3XPj_info;
           P64[Hp - 112] = _s3XPf::P64;
           I64[Hp - 104] = w2_s3XPk_info;
           P64[Hp - 96] = Hp - 176;
           P64[Hp - 88] = Hp - 152;
           P64[Hp - 80] = Hp - 128;
           I64[Hp - 72] = lvl117_s3XPr_info;
           _c41tr::P64 = Hp - 103;
           P64[Hp - 56] = _c41tr::P64;
           I64[Hp - 48] = sat_s3XPy_info;
           P64[Hp - 32] = _c41tr::P64;
           I64[Hp - 24] = sat_s3XPw_info;
           P64[Hp - 16] = Hp - 72;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 48;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XPg_info" {
     lvl116_s3XPg_info:
         const lvl116_s3XPg_entry;
         const 1;
         const 18446744069414584336;
         const u41vs_srtd;
 },
 k_s3XPz_entry() //  [R1]
         { []
         }
     {offset
       c41vc: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XPz_info" {
     k_s3XPz_info:
         const k_s3XPz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XPC_entry() //  [R1, R2]
         { []
         }
     {offset
       c41vk: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XPC_info" {
     sat_s3XPC_info:
         const sat_s3XPC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 section ""relreadonly" . u41vt_srtd" {
     u41vt_srtd:
         const S3Y0k_srt+936;
         const 105;
         const 1;
         const 2130303778816;
 },
 GHC.Read.$w$creadPrec2_entry() //  [R2]
         { []
         }
     {offset
       c41vn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c41vr; else goto c41vq;
       c41vr: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Read.$w$creadPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41vq: // global
           I64[Hp - 48] = lvl116_s3XPg_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3XPz_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3XPC_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$w$creadPrec2_info" {
     GHC.Read.$w$creadPrec2_info:
         const GHC.Read.$w$creadPrec2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u41vt_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.396073686 UTC

[section ""data" . GHC.Read.$fReadOrdering2_closure" {
     GHC.Read.$fReadOrdering2_closure:
         const GHC.Read.$fReadOrdering2_info;
         const 0;
 },
 GHC.Read.$fReadOrdering2_entry() //  [R2, R3]
         { []
         }
     {offset
       c41xy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41xz; else goto c41xA;
       c41xz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadOrdering2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41xA: // global
           I64[Sp - 8] = block_c41xv_info;
           R2 = R3;
           Sp = Sp - 8;
           call GHC.Read.$w$creadPrec2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering2_info" {
     GHC.Read.$fReadOrdering2_info:
         const GHC.Read.$fReadOrdering2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+1768;
 },
 _c41xv() //  [R1]
         { []
         }
     {offset
       c41xv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41xD; else goto c41xC;
       c41xD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41xC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41xv_info" {
     block_c41xv_info:
         const _c41xv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.404320978 UTC

[section ""data" . GHC.Read.$fReadOrdering1_closure" {
     GHC.Read.$fReadOrdering1_closure:
         const GHC.Read.$fReadOrdering1_info;
         const 0;
 },
 GHC.Read.$fReadOrdering1_entry() //  [R2, R3]
         { []
         }
     {offset
       c41xT: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadOrdering2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering1_info" {
     GHC.Read.$fReadOrdering1_info:
         const GHC.Read.$fReadOrdering1_entry;
         const 0;
         const 4611686022722355214;
         const 8589934607;
         const S3Y0k_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.410540635 UTC

[section ""data" . GHC.Read.$fReadOrdering_$creadsPrec_closure" {
     GHC.Read.$fReadOrdering_$creadsPrec_closure:
         const GHC.Read.$fReadOrdering_$creadsPrec_info;
         const 0;
 },
 sat_s3XPI_entry() //  [R1]
         { []
         }
     {offset
       c41y8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41y9; else goto c41ya;
       c41y9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41ya: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadOrdering2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XPI_info" {
     sat_s3XPI_info:
         const sat_s3XPI_entry;
         const 1;
         const 4611686022722355216;
         const S3Y0k_srt+1536;
 },
 GHC.Read.$fReadOrdering_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c41yb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41yf; else goto c41ye;
       c41yf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadOrdering_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41ye: // global
           I64[Hp - 16] = sat_s3XPI_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering_$creadsPrec_info" {
     GHC.Read.$fReadOrdering_$creadsPrec_info:
         const GHC.Read.$fReadOrdering_$creadsPrec_entry;
         const 0;
         const 13835058059577131022;
         const 4294967301;
         const S3Y0k_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.419075088 UTC

[section ""data" . GHC.Read.$fReadOrdering_$creadListPrec_closure" {
     GHC.Read.$fReadOrdering_$creadListPrec_closure:
         const GHC.Read.$fReadOrdering_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c41yy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41yz; else goto c41yA;
       c41yz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41yA: // global
           (_c41yv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41yv::I64 == 0) goto c41yx; else goto c41yw;
       c41yx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41yw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41yv::I64;
           R2 = GHC.Read.$fReadOrdering1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering_$creadListPrec_info" {
     GHC.Read.$fReadOrdering_$creadListPrec_info:
         const GHC.Read.$fReadOrdering_$creadListPrec_entry;
         const 0;
         const 2305843013508661269;
         const S3Y0k_srt+1560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.425819357 UTC

[section ""data" . GHC.Read.$fReadOrdering9_closure" {
     GHC.Read.$fReadOrdering9_closure:
         const GHC.Read.$fReadOrdering9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadOrdering9_entry() //  [R1]
         { []
         }
     {offset
       c41yP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41yQ; else goto c41yR;
       c41yQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41yR: // global
           (_c41yM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41yM::I64 == 0) goto c41yO; else goto c41yN;
       c41yO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41yN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41yM::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadOrdering_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering9_info" {
     GHC.Read.$fReadOrdering9_info:
         const GHC.Read.$fReadOrdering9_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+1800;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.432790794 UTC

[section ""data" . GHC.Read.$fReadOrdering_$creadList_closure" {
     GHC.Read.$fReadOrdering_$creadList_closure:
         const GHC.Read.$fReadOrdering_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadOrdering_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c41z5: // global
           R3 = R2;
           R2 = GHC.Read.$fReadOrdering9_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadOrdering_$creadList_info" {
     GHC.Read.$fReadOrdering_$creadList_info:
         const GHC.Read.$fReadOrdering_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+1808;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.437651217 UTC

[section ""data" . GHC.Read.$fReadOrdering_closure" {
     GHC.Read.$fReadOrdering_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadOrdering_$creadsPrec_closure+1;
         const GHC.Read.$fReadOrdering_$creadList_closure+1;
         const GHC.Read.$fReadOrdering1_closure+2;
         const GHC.Read.$fReadOrdering_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.439489344 UTC

[section ""cstring" . GHC.Read.$fReadBool4_bytes" {
     GHC.Read.$fReadBool4_bytes:
         I8[] [84,114,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.44332282 UTC

[section ""data" . GHC.Read.$fReadBool3_closure" {
     GHC.Read.$fReadBool3_closure:
         const GHC.Read.$fReadBool3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadBool3_entry() //  [R1]
         { []
         }
     {offset
       c41zk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41zl; else goto c41zm;
       c41zl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41zm: // global
           (_c41zh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41zh::I64 == 0) goto c41zj; else goto c41zi;
       c41zj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41zi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41zh::I64;
           R2 = GHC.Read.$fReadBool4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool3_info" {
     GHC.Read.$fReadBool3_info:
         const GHC.Read.$fReadBool3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.447287567 UTC

[section ""cstring" . GHC.Read.$fReadBool6_bytes" {
     GHC.Read.$fReadBool6_bytes:
         I8[] [70,97,108,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.449766115 UTC

[section ""data" . GHC.Read.$fReadBool5_closure" {
     GHC.Read.$fReadBool5_closure:
         const GHC.Read.$fReadBool5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadBool5_entry() //  [R1]
         { []
         }
     {offset
       c41zC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41zD; else goto c41zE;
       c41zD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41zE: // global
           (_c41zz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41zz::I64 == 0) goto c41zB; else goto c41zA;
       c41zB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41zA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41zz::I64;
           R2 = GHC.Read.$fReadBool6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool5_info" {
     GHC.Read.$fReadBool5_info:
         const GHC.Read.$fReadBool5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.458740349 UTC

[section ""data" . GHC.Read.$w$creadPrec_closure" {
     GHC.Read.$w$creadPrec_closure:
         const GHC.Read.$w$creadPrec_info;
         const 0;
 },
 lvl2_s3XPL_entry() //  [R1]
         { []
         }
     {offset
       c41zZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41A0; else goto c41A1;
       c41A0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41A1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.False_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_s3XPL_info" {
     lvl2_s3XPL_info:
         const lvl2_s3XPL_entry;
         const 1;
         const 16;
 },
 lvl3_s3XPM_entry() //  [R1]
         { []
         }
     {offset
       c41A6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41A7; else goto c41A8;
       c41A7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41A8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.True_closure+2;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_s3XPM_info" {
     lvl3_s3XPM_info:
         const lvl3_s3XPM_entry;
         const 1;
         const 16;
 },
 sat_s3XPW_entry() //  [R1, R2]
         { []
         }
     {offset
       c41Ap: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c41Aq; else goto c41Ar;
       c41Aq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41Ar: // global
           I64[Sp - 24] = block_c41Ai_info;
           _s3XPL::P64 = P64[R1 + 7];
           _s3XPM::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s3XPL::P64;
           P64[Sp - 8] = _s3XPM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u41AZ; else goto c41Aj;
       u41AZ: // global
           call _c41Ai(R1) args: 0, res: 0, upd: 0;
       c41Aj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XPW_info" {
     sat_s3XPW_info:
         const sat_s3XPW_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3Y0k_srt+1816;
 },
 _c41Ai() //  [R1]
         { []
         }
     {offset
       c41Ai: // global
           if (R1 & 7 == 4) goto c41An; else goto u41AW;
       c41An: // global
           I64[Sp - 8] = block_c41Ax_info;
           R3 = GHC.Read.$fReadBool5_closure;
           _s3XPT::P64 = P64[R1 + 4];
           R2 = _s3XPT::P64;
           P64[Sp] = _s3XPT::P64;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u41AW: // global
           Sp = Sp + 24;
           call _c41AL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c41Ai_info" {
     block_c41Ai_info:
         const _c41Ai;
         const 2;
         const 12884901918;
         const S3Y0k_srt+1816;
 },
 _c41Ax() //  [R1]
         { []
         }
     {offset
       c41Ax: // global
           if (R1 & 7 == 1) goto c41AF; else goto c41AT;
       c41AF: // global
           I64[Sp + 16] = block_c41AC_info;
           R3 = GHC.Read.$fReadBool3_closure;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c41AT: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Ax_info" {
     block_c41Ax_info:
         const _c41Ax;
         const 3;
         const 4294967326;
         const S3Y0k_srt+1816;
 },
 _c41AC() //  [R1]
         { []
         }
     {offset
       c41AC: // global
           if (R1 & 7 == 1) goto u41AX; else goto c41AP;
       u41AX: // global
           Sp = Sp + 16;
           call _c41AL() args: 0, res: 0, upd: 0;
       c41AP: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41AC_info" {
     block_c41AC_info:
         const _c41AC;
         const 1;
         const 30;
 },
 _c41AL() //  []
         { []
         }
     {offset
       c41AL: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3XPX_entry() //  [R1]
         { []
         }
     {offset
       c41B1: // global
           _s3XPX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41B2; else goto c41B3;
       c41B3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41B5; else goto c41B4;
       c41B5: // global
           HpAlloc = 24;
           goto c41B2;
       c41B2: // global
           R1 = _s3XPX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41B4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XPX::P64;
           _s3XPL::P64 = P64[_s3XPX::P64 + 16];
           _s3XPM::P64 = P64[_s3XPX::P64 + 24];
           I64[Hp - 16] = sat_s3XPW_info;
           P64[Hp - 8] = _s3XPL::P64;
           P64[Hp] = _s3XPM::P64;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XPX_info" {
     sat_s3XPX_info:
         const sat_s3XPX_entry;
         const 2;
         const 1653562408978;
         const S3Y0k_srt+1760;
 },
 sat_s3XPP_entry() //  [R1, R2]
         { []
         }
     {offset
       c41Be: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41Bf; else goto c41Bg;
       c41Bf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41Bg: // global
           I64[Sp - 8] = block_c41Bb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41Bk; else goto c41Bc;
       u41Bk: // global
           call _c41Bb() args: 0, res: 0, upd: 0;
       c41Bc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XPP_info" {
     sat_s3XPP_info:
         const sat_s3XPP_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _c41Bb() //  []
         { []
         }
     {offset
       c41Bb: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Bb_info" {
     block_c41Bb_info:
         const _c41Bb;
         const 0;
         const 30;
 },
 section ""relreadonly" . u41BM_srtd" {
     u41BM_srtd:
         const S3Y0k_srt+936;
         const 112;
         const 1;
         const 211655988346880;
 },
 lvl116_s3XPK_entry() //  [R1]
         { []
         }
     {offset
       c41Bm: // global
           _s3XPK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41Bn; else goto c41Bo;
       c41Bo: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c41Bq; else goto c41Bp;
       c41Bq: // global
           HpAlloc = 112;
           goto c41Bn;
       c41Bn: // global
           R1 = _s3XPK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41Bp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XPK::P64;
           _s3XPJ::P64 = P64[_s3XPK::P64 + 16];
           I64[Hp - 104] = lvl2_s3XPL_info;
           P64[Hp - 88] = _s3XPJ::P64;
           I64[Hp - 80] = lvl3_s3XPM_info;
           P64[Hp - 64] = _s3XPJ::P64;
           I64[Hp - 56] = sat_s3XPX_info;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 80;
           I64[Hp - 24] = sat_s3XPP_info;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XPK_info" {
     lvl116_s3XPK_info:
         const lvl116_s3XPK_entry;
         const 1;
         const 18446744069414584336;
         const u41BM_srtd;
 },
 k_s3XPY_entry() //  [R1]
         { []
         }
     {offset
       c41Bw: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XPY_info" {
     k_s3XPY_info:
         const k_s3XPY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XQ1_entry() //  [R1, R2]
         { []
         }
     {offset
       c41BE: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XQ1_info" {
     sat_s3XQ1_info:
         const sat_s3XQ1_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 section ""relreadonly" . u41BN_srtd" {
     u41BN_srtd:
         const S3Y0k_srt+936;
         const 113;
         const 1;
         const 493130965057536;
 },
 GHC.Read.$w$creadPrec_entry() //  [R2]
         { []
         }
     {offset
       c41BH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c41BL; else goto c41BK;
       c41BL: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Read.$w$creadPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41BK: // global
           I64[Hp - 48] = lvl116_s3XPK_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3XPY_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3XQ1_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$w$creadPrec_info" {
     GHC.Read.$w$creadPrec_info:
         const GHC.Read.$w$creadPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u41BN_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.486787369 UTC

[section ""data" . GHC.Read.$fReadBool2_closure" {
     GHC.Read.$fReadBool2_closure:
         const GHC.Read.$fReadBool2_info;
         const 0;
 },
 GHC.Read.$fReadBool2_entry() //  [R2, R3]
         { []
         }
     {offset
       c41Dq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41Dr; else goto c41Ds;
       c41Dr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadBool2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41Ds: // global
           I64[Sp - 8] = block_c41Dn_info;
           R2 = R3;
           Sp = Sp - 8;
           call GHC.Read.$w$creadPrec_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool2_info" {
     GHC.Read.$fReadBool2_info:
         const GHC.Read.$fReadBool2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+1832;
 },
 _c41Dn() //  [R1]
         { []
         }
     {offset
       c41Dn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Dv; else goto c41Du;
       c41Dv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41Du: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Dn_info" {
     block_c41Dn_info:
         const _c41Dn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.494326089 UTC

[section ""data" . GHC.Read.$fReadBool1_closure" {
     GHC.Read.$fReadBool1_closure:
         const GHC.Read.$fReadBool1_info;
         const 0;
 },
 section ""relreadonly" . u41DO_srtd" {
     u41DO_srtd:
         const S3Y0k_srt+1536;
         const 39;
         const 274877906945;
 },
 GHC.Read.$fReadBool1_entry() //  [R2, R3]
         { []
         }
     {offset
       c41DL: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadBool2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool1_info" {
     GHC.Read.$fReadBool1_info:
         const GHC.Read.$fReadBool1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u41DO_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.502379967 UTC

[section ""data" . GHC.Read.$fReadBool_$creadsPrec_closure" {
     GHC.Read.$fReadBool_$creadsPrec_closure:
         const GHC.Read.$fReadBool_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u41Ea_srtd" {
     u41Ea_srtd:
         const S3Y0k_srt+1536;
         const 39;
         const 274877906945;
 },
 sat_s3XQ7_entry() //  [R1]
         { []
         }
     {offset
       c41E2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41E3; else goto c41E4;
       c41E3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41E4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadBool2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XQ7_info" {
     sat_s3XQ7_info:
         const sat_s3XQ7_entry;
         const 1;
         const 18446744069414584336;
         const u41Ea_srtd;
 },
 section ""relreadonly" . u41Eb_srtd" {
     u41Eb_srtd:
         const S3Y0k_srt+1536;
         const 40;
         const 824633720833;
 },
 GHC.Read.$fReadBool_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c41E5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41E9; else goto c41E8;
       c41E9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadBool_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41E8: // global
           I64[Hp - 16] = sat_s3XQ7_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool_$creadsPrec_info" {
     GHC.Read.$fReadBool_$creadsPrec_info:
         const GHC.Read.$fReadBool_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u41Eb_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.512994557 UTC

[section ""data" . GHC.Read.$fReadBool_$creadListPrec_closure" {
     GHC.Read.$fReadBool_$creadListPrec_closure:
         const GHC.Read.$fReadBool_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadBool_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c41Ew: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41Ex; else goto c41Ey;
       c41Ex: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41Ey: // global
           (_c41Et::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41Et::I64 == 0) goto c41Ev; else goto c41Eu;
       c41Ev: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41Eu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41Et::I64;
           R2 = GHC.Read.$fReadBool1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool_$creadListPrec_info" {
     GHC.Read.$fReadBool_$creadListPrec_info:
         const GHC.Read.$fReadBool_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S3Y0k_srt+1856;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.519832494 UTC

[section ""data" . GHC.Read.$fReadBool7_closure" {
     GHC.Read.$fReadBool7_closure:
         const GHC.Read.$fReadBool7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadBool7_entry() //  [R1]
         { []
         }
     {offset
       c41EN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41EO; else goto c41EP;
       c41EO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41EP: // global
           (_c41EK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41EK::I64 == 0) goto c41EM; else goto c41EL;
       c41EM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41EL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41EK::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadBool_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool7_info" {
     GHC.Read.$fReadBool7_info:
         const GHC.Read.$fReadBool7_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+1872;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.525151911 UTC

[section ""data" . GHC.Read.$fReadBool_$creadList_closure" {
     GHC.Read.$fReadBool_$creadList_closure:
         const GHC.Read.$fReadBool_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadBool_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c41F3: // global
           R3 = R2;
           R2 = GHC.Read.$fReadBool7_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadBool_$creadList_info" {
     GHC.Read.$fReadBool_$creadList_info:
         const GHC.Read.$fReadBool_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+1880;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.528440391 UTC

[section ""data" . GHC.Read.$fReadBool_closure" {
     GHC.Read.$fReadBool_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadBool_$creadsPrec_closure+1;
         const GHC.Read.$fReadBool_$creadList_closure+1;
         const GHC.Read.$fReadBool1_closure+2;
         const GHC.Read.$fReadBool_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.534882569 UTC

[section ""data" . GHC.Read.$w$creadPrec1_closure" {
     GHC.Read.$w$creadPrec1_closure:
         const GHC.Read.$w$creadPrec1_info;
         const 0;
 },
 sat_s3XQd_entry() //  [R1, R2]
         { []
         }
     {offset
       c41Fz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41FA; else goto c41FB;
       c41FA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41FB: // global
           I64[Sp - 16] = block_c41Fs_info;
           _s3XQ8::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XQ8::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u41FI; else goto c41Ft;
       u41FI: // global
           call _c41Fs(R1) args: 0, res: 0, upd: 0;
       c41Ft: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XQd_info" {
     sat_s3XQd_info:
         const sat_s3XQd_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c41Fs() //  [R1]
         { []
         }
     {offset
       c41Fs: // global
           if (R1 & 7 == 1) goto c41Fx; else goto c41Fw;
       c41Fx: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c41Fw: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Fs_info" {
     block_c41Fs_info:
         const _c41Fs;
         const 1;
         const 30;
 },
 sat_s3XQe_entry() //  [R1]
         { []
         }
     {offset
       c41FJ: // global
           _s3XQe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41FK; else goto c41FL;
       c41FL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41FN; else goto c41FM;
       c41FN: // global
           HpAlloc = 16;
           goto c41FK;
       c41FK: // global
           R1 = _s3XQe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41FM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XQe::P64;
           _s3XQ8::P64 = P64[_s3XQe::P64 + 16];
           I64[Hp - 8] = sat_s3XQd_info;
           P64[Hp] = _s3XQ8::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XQe_info" {
     sat_s3XQe_info:
         const sat_s3XQe_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+1760;
 },
 section ""relreadonly" . u41Ge_srtd" {
     u41Ge_srtd:
         const S3Y0k_srt+936;
         const 104;
         const 1;
         const 549755813888;
 },
 lvl116_s3XQ9_entry() //  [R1]
         { []
         }
     {offset
       c41FO: // global
           _s3XQ9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41FP; else goto c41FQ;
       c41FQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41FS; else goto c41FR;
       c41FS: // global
           HpAlloc = 24;
           goto c41FP;
       c41FP: // global
           R1 = _s3XQ9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41FR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XQ9::P64;
           _s3XQ8::P64 = P64[_s3XQ9::P64 + 16];
           I64[Hp - 16] = sat_s3XQe_info;
           P64[Hp] = _s3XQ8::P64;
           R3 = Hp - 16;
           R2 = GHC.Read.$fReadChar3_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XQ9_info" {
     lvl116_s3XQ9_info:
         const lvl116_s3XQ9_entry;
         const 1;
         const 18446744069414584336;
         const u41Ge_srtd;
 },
 k_s3XQf_entry() //  [R1]
         { []
         }
     {offset
       c41FY: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k_s3XQf_info" {
     k_s3XQf_info:
         const k_s3XQf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XQi_entry() //  [R1, R2]
         { []
         }
     {offset
       c41G6: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XQi_info" {
     sat_s3XQi_info:
         const sat_s3XQi_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 section ""relreadonly" . u41Gf_srtd" {
     u41Gf_srtd:
         const S3Y0k_srt+936;
         const 120;
         const 1;
         const 36029346774777856;
 },
 GHC.Read.$w$creadPrec1_entry() //  [R2]
         { []
         }
     {offset
       c41G9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c41Gd; else goto c41Gc;
       c41Gd: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Read.$w$creadPrec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41Gc: // global
           I64[Hp - 48] = lvl116_s3XQ9_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = k_s3XQf_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s3XQi_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$w$creadPrec1_info" {
     GHC.Read.$w$creadPrec1_info:
         const GHC.Read.$w$creadPrec1_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u41Gf_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.550743311 UTC

[section ""data" . GHC.Read.$fReadChar7_closure" {
     GHC.Read.$fReadChar7_closure:
         const GHC.Read.$fReadChar7_info;
         const 0;
 },
 GHC.Read.$fReadChar7_entry() //  [R2, R3]
         { []
         }
     {offset
       c41H6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41H7; else goto c41H8;
       c41H7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadChar7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41H8: // global
           I64[Sp - 8] = block_c41H3_info;
           R2 = R3;
           Sp = Sp - 8;
           call GHC.Read.$w$creadPrec1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar7_info" {
     GHC.Read.$fReadChar7_info:
         const GHC.Read.$fReadChar7_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+1888;
 },
 _c41H3() //  [R1]
         { []
         }
     {offset
       c41H3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Hb; else goto c41Ha;
       c41Hb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41Ha: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41H3_info" {
     block_c41H3_info:
         const _c41H3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.556596497 UTC

[section ""data" . GHC.Read.$fReadChar6_closure" {
     GHC.Read.$fReadChar6_closure:
         const GHC.Read.$fReadChar6_info;
         const 0;
 },
 section ""relreadonly" . u41Hu_srtd" {
     u41Hu_srtd:
         const S3Y0k_srt+1536;
         const 46;
         const 35184372088833;
 },
 GHC.Read.$fReadChar6_entry() //  [R2, R3]
         { []
         }
     {offset
       c41Hr: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadChar7_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar6_info" {
     GHC.Read.$fReadChar6_info:
         const GHC.Read.$fReadChar6_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u41Hu_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.562811688 UTC

[section ""data" . GHC.Read.$fReadInteger2_closure" {
     GHC.Read.$fReadInteger2_closure:
         const GHC.Read.$fReadInteger2_info;
         const 0;
 },
 sat_s3XQu_entry() //  [R1, R3]
         { []
         }
     {offset
       c41HU: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XQu_info" {
     sat_s3XQu_info:
         const sat_s3XQu_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.$fReadInteger2_entry() //  [R2]
         { []
         }
     {offset
       c41I1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41I2; else goto c41I3;
       c41I2: // global
           R2 = R2;
           R1 = GHC.Read.$fReadInteger2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41I3: // global
           I64[Sp - 8] = block_c41HE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41Ik; else goto c41HF;
       u41Ik: // global
           call _c41HE(R1) args: 0, res: 0, upd: 0;
       c41HF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger2_info" {
     GHC.Read.$fReadInteger2_info:
         const GHC.Read.$fReadInteger2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3Y0k_srt+1904;
 },
 _c41HE() //  [R1]
         { []
         }
     {offset
       c41HE: // global
           if (R1 & 7 == 6) goto c41HZ; else goto u41Ig;
       c41HZ: // global
           I64[Sp] = block_c41HK_info;
           R2 = P64[R1 + 2];
           call Text.Read.Lex.numberToInteger_entry(R2) args: 8, res: 8, upd: 8;
       u41Ig: // global
           Sp = Sp + 8;
           call _c41Ia() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c41HE_info" {
     block_c41HE_info:
         const _c41HE;
         const 0;
         const 4294967326;
         const S3Y0k_srt+1904;
 },
 _c41HK() //  [R1]
         { []
         }
     {offset
       c41HK: // global
           if (R1 & 7 == 1) goto u41Ih; else goto c41Ib;
       u41Ih: // global
           Sp = Sp + 8;
           call _c41Ia() args: 0, res: 0, upd: 0;
       c41Ib: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Ie; else goto c41Id;
       c41Ie: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41Id: // global
           _s3XQr::P64 = P64[R1 + 6];
           I64[Hp - 8] = sat_s3XQu_info;
           P64[Hp] = _s3XQr::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41HK_info" {
     block_c41HK_info:
         const _c41HK;
         const 0;
         const 30;
 },
 _c41Ia() //  []
         { []
         }
     {offset
       c41Ia: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.573207113 UTC

[section ""data" . GHC.Read.$fReadInteger1_closure" {
     GHC.Read.$fReadInteger1_closure:
         const GHC.Read.$fReadInteger1_info;
         const 0;
 },
 section ""relreadonly" . u41IT_srtd" {
     u41IT_srtd:
         const S3Y0k_srt+1000;
         const 115;
         const 1;
         const 1125899906842624;
 },
 GHC.Read.$fReadInteger1_entry() //  [R2, R3]
         { []
         }
     {offset
       c41IQ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger1_info" {
     GHC.Read.$fReadInteger1_info:
         const GHC.Read.$fReadInteger1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u41IT_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.578898726 UTC

[section ""data" . GHC.Read.$fReadInteger_$creadsPrec_closure" {
     GHC.Read.$fReadInteger_$creadsPrec_closure:
         const GHC.Read.$fReadInteger_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u41Jf_srtd" {
     u41Jf_srtd:
         const S3Y0k_srt+1000;
         const 115;
         const 1;
         const 1125899906842624;
 },
 sat_s3XQw_entry() //  [R1]
         { []
         }
     {offset
       c41J7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41J8; else goto c41J9;
       c41J8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41J9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadInteger2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XQw_info" {
     sat_s3XQw_info:
         const sat_s3XQw_entry;
         const 1;
         const 18446744069414584336;
         const u41Jf_srtd;
 },
 section ""relreadonly" . u41Jg_srtd" {
     u41Jg_srtd:
         const S3Y0k_srt+1000;
         const 116;
         const 1;
         const 3377699720527872;
 },
 GHC.Read.$fReadInteger_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c41Ja: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c41Je; else goto c41Jd;
       c41Je: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadInteger_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41Jd: // global
           I64[Hp - 16] = sat_s3XQw_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger_$creadsPrec_info" {
     GHC.Read.$fReadInteger_$creadsPrec_info:
         const GHC.Read.$fReadInteger_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u41Jg_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.589045336 UTC

[section ""data" . GHC.Read.$fReadInteger_$creadListPrec_closure" {
     GHC.Read.$fReadInteger_$creadListPrec_closure:
         const GHC.Read.$fReadInteger_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadInteger_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c41JB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41JC; else goto c41JD;
       c41JC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41JD: // global
           (_c41Jy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41Jy::I64 == 0) goto c41JA; else goto c41Jz;
       c41JA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41Jz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41Jy::I64;
           R2 = GHC.Read.$fReadInteger1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger_$creadListPrec_info" {
     GHC.Read.$fReadInteger_$creadListPrec_info:
         const GHC.Read.$fReadInteger_$creadListPrec_entry;
         const 0;
         const 1103806595093;
         const S3Y0k_srt+1864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.593684936 UTC

[section ""data" . GHC.Read.$fReadInteger3_closure" {
     GHC.Read.$fReadInteger3_closure:
         const GHC.Read.$fReadInteger3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadInteger3_entry() //  [R1]
         { []
         }
     {offset
       c41JS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41JT; else goto c41JU;
       c41JT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41JU: // global
           (_c41JP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41JP::I64 == 0) goto c41JR; else goto c41JQ;
       c41JR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41JQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41JP::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadInteger_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger3_info" {
     GHC.Read.$fReadInteger3_info:
         const GHC.Read.$fReadInteger3_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+1936;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.597971358 UTC

[section ""data" . GHC.Read.$fReadInteger_$creadList_closure" {
     GHC.Read.$fReadInteger_$creadList_closure:
         const GHC.Read.$fReadInteger_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadInteger_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c41K8: // global
           R3 = R2;
           R2 = GHC.Read.$fReadInteger3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInteger_$creadList_info" {
     GHC.Read.$fReadInteger_$creadList_info:
         const GHC.Read.$fReadInteger_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+1944;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.60139867 UTC

[section ""data" . GHC.Read.$fReadInteger_closure" {
     GHC.Read.$fReadInteger_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInteger_$creadsPrec_closure+1;
         const GHC.Read.$fReadInteger_$creadList_closure+1;
         const GHC.Read.$fReadInteger1_closure+2;
         const GHC.Read.$fReadInteger_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.605775464 UTC

[section ""data" . GHC.Read.$fReadWord64_go_closure" {
     GHC.Read.$fReadWord64_go_closure:
         const GHC.Read.$fReadWord64_go_info;
 },
 sat_s3XQG_entry() //  [R1]
         { []
         }
     {offset
       c41Kz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41KA; else goto c41KB;
       c41KA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41KB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord64_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XQG_info" {
     sat_s3XQG_info:
         const sat_s3XQG_entry;
         const 1;
         const 16;
 },
 sat_s3XQE_entry() //  [R1]
         { []
         }
     {offset
       c41KG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41KH; else goto c41KI;
       c41KH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41KI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Word.$fNumWord64_$cfromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XQE_info" {
     sat_s3XQE_info:
         const sat_s3XQE_entry;
         const 1;
         const 16;
 },
 GHC.Read.$fReadWord64_go_entry() //  [R2]
         { []
         }
     {offset
       c41KN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41KO; else goto c41KP;
       c41KO: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord64_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41KP: // global
           I64[Sp - 8] = block_c41Kk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41KZ; else goto c41Kl;
       u41KZ: // global
           call _c41Kk(R1) args: 0, res: 0, upd: 0;
       c41Kl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord64_go_info" {
     GHC.Read.$fReadWord64_go_info:
         const GHC.Read.$fReadWord64_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c41Kk() //  [R1]
         { []
         }
     {offset
       c41Kk: // global
           if (R1 & 7 == 1) goto c41KK; else goto c41KL;
       c41KK: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c41KL: // global
           I64[Sp - 8] = block_c41Kq_info;
           _s3XQA::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XQA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41KY; else goto c41Kr;
       u41KY: // global
           call _c41Kq(R1) args: 0, res: 0, upd: 0;
       c41Kr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Kk_info" {
     block_c41Kk_info:
         const _c41Kk;
         const 0;
         const 30;
 },
 _c41Kq() //  [R1]
         { []
         }
     {offset
       c41Kq: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c41KX; else goto c41KW;
       c41KX: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41KW: // global
           _s3XQC::P64 = P64[R1 + 7];
           _s3XQD::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3XQG_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3XQE_info;
           P64[Hp - 48] = _s3XQC::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3XQD::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Kq_info" {
     block_c41Kq_info:
         const _c41Kq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.620361273 UTC

[section ""data" . GHC.Read.$fReadWord64_$creadsPrec_closure" {
     GHC.Read.$fReadWord64_$creadsPrec_closure:
         const GHC.Read.$fReadWord64_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u41LT_srtd" {
     u41LT_srtd:
         const S3Y0k_srt+1000;
         const 120;
         const 1;
         const 37154696925806592;
 },
 GHC.Read.$fReadWord64_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c41LI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41LM; else goto c41LN;
       c41LM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord64_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41LN: // global
           I64[Sp - 16] = block_c41LG_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3XQI::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           P64[Sp - 8] = _s3XQI::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord64_$creadsPrec_info" {
     GHC.Read.$fReadWord64_$creadsPrec_info:
         const GHC.Read.$fReadWord64_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u41LT_srtd;
 },
 _c41LG() //  [R1]
         { []
         }
     {offset
       c41LG: // global
           _s3XQI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c41LL_info;
           R3 = _s3XQI::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c41LG_info" {
     block_c41LG_info:
         const _c41LG;
         const 1;
         const 30;
 },
 _c41LL() //  [R1]
         { []
         }
     {offset
       c41LL: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord64_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41LL_info" {
     block_c41LL_info:
         const _c41LL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.632861908 UTC

[section ""data" . GHC.Read.$fReadWord13_closure" {
     GHC.Read.$fReadWord13_closure:
         const GHC.Read.$fReadWord13_info;
         const 0;
 },
 sat_s3XQN_entry() //  [R1, R2]
         { []
         }
     {offset
       c41Mi: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord64_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XQN_info" {
     sat_s3XQN_info:
         const sat_s3XQN_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+1952;
 },
 GHC.Read.$fReadWord13_entry() //  [R2, R3]
         { []
         }
     {offset
       c41Mo: // global
           _s3XQM::P64 = R3;
           _s3XQL::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c41Mp; else goto c41Mq;
       c41Mq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Ms; else goto c41Mr;
       c41Ms: // global
           HpAlloc = 16;
           goto c41Mp;
       c41Mp: // global
           R3 = _s3XQM::P64;
           R2 = _s3XQL::P64;
           R1 = GHC.Read.$fReadWord13_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41Mr: // global
           I64[Hp - 8] = sat_s3XQN_info;
           P64[Hp] = _s3XQL::P64;
           I64[Sp - 8] = block_c41Ml_info;
           R3 = _s3XQM::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord13_info" {
     GHC.Read.$fReadWord13_info:
         const GHC.Read.$fReadWord13_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+1952;
 },
 _c41Ml() //  [R1]
         { []
         }
     {offset
       c41Ml: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Mv; else goto c41Mu;
       c41Mv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41Mu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Ml_info" {
     block_c41Ml_info:
         const _c41Ml;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.645553189 UTC

[section ""data" . GHC.Read.$fReadWord12_closure" {
     GHC.Read.$fReadWord12_closure:
         const GHC.Read.$fReadWord12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord12_entry() //  [R1]
         { []
         }
     {offset
       c41MR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c41MS; else goto c41MT;
       c41MS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41MT: // global
           (_c41MO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41MO::I64 == 0) goto c41MQ; else goto c41MP;
       c41MQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41MP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41MO::I64;
           R2 = GHC.Read.$fReadWord13_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord12_info" {
     GHC.Read.$fReadWord12_info:
         const GHC.Read.$fReadWord12_entry;
         const 0;
         const 17596481011733;
         const S3Y0k_srt+1864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.650180344 UTC

[section ""data" . GHC.Read.$fReadWord64_$creadList_closure" {
     GHC.Read.$fReadWord64_$creadList_closure:
         const GHC.Read.$fReadWord64_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord64_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c41Na: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord12_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord64_$creadList_info" {
     GHC.Read.$fReadWord64_$creadList_info:
         const GHC.Read.$fReadWord64_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+1968;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.654409239 UTC

[section ""data" . GHC.Read.$fReadWord11_closure" {
     GHC.Read.$fReadWord11_closure:
         const GHC.Read.$fReadWord11_info;
         const 0;
 },
 GHC.Read.$fReadWord11_entry() //  [R2, R3]
         { []
         }
     {offset
       c41No: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41Np; else goto c41Nq;
       c41Np: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord11_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41Nq: // global
           I64[Sp - 8] = block_c41Nl_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord64_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord11_info" {
     GHC.Read.$fReadWord11_info:
         const GHC.Read.$fReadWord11_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+1976;
 },
 _c41Nl() //  [R1]
         { []
         }
     {offset
       c41Nl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Nt; else goto c41Ns;
       c41Nt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41Ns: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Nl_info" {
     block_c41Nl_info:
         const _c41Nl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.659684296 UTC

[section ""data" . GHC.Read.$fReadWord64_closure" {
     GHC.Read.$fReadWord64_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord64_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord64_$creadList_closure+1;
         const GHC.Read.$fReadWord13_closure+2;
         const GHC.Read.$fReadWord11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.665764155 UTC

[section ""data" . GHC.Read.$fReadWord_go_closure" {
     GHC.Read.$fReadWord_go_closure:
         const GHC.Read.$fReadWord_go_info;
 },
 sat_s3XR3_entry() //  [R1]
         { []
         }
     {offset
       c41NZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41O0; else goto c41O1;
       c41O0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41O1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XR3_info" {
     sat_s3XR3_info:
         const sat_s3XR3_entry;
         const 1;
         const 16;
 },
 sat_s3XR1_entry() //  [R1]
         { []
         }
     {offset
       c41O6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41O7; else goto c41O8;
       c41O7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41O8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Num.$fNumWord_$cfromInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XR1_info" {
     sat_s3XR1_info:
         const sat_s3XR1_entry;
         const 1;
         const 16;
 },
 GHC.Read.$fReadWord_go_entry() //  [R2]
         { []
         }
     {offset
       c41Od: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41Oe; else goto c41Of;
       c41Oe: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41Of: // global
           I64[Sp - 8] = block_c41NK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41Op; else goto c41NL;
       u41Op: // global
           call _c41NK(R1) args: 0, res: 0, upd: 0;
       c41NL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord_go_info" {
     GHC.Read.$fReadWord_go_info:
         const GHC.Read.$fReadWord_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c41NK() //  [R1]
         { []
         }
     {offset
       c41NK: // global
           if (R1 & 7 == 1) goto c41Oa; else goto c41Ob;
       c41Oa: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c41Ob: // global
           I64[Sp - 8] = block_c41NQ_info;
           _s3XQX::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XQX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41Oo; else goto c41NR;
       u41Oo: // global
           call _c41NQ(R1) args: 0, res: 0, upd: 0;
       c41NR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c41NK_info" {
     block_c41NK_info:
         const _c41NK;
         const 0;
         const 30;
 },
 _c41NQ() //  [R1]
         { []
         }
     {offset
       c41NQ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c41On; else goto c41Om;
       c41On: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41Om: // global
           _s3XQZ::P64 = P64[R1 + 7];
           _s3XR0::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3XR3_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3XR1_info;
           P64[Hp - 48] = _s3XQZ::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3XR0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41NQ_info" {
     block_c41NQ_info:
         const _c41NQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.678470672 UTC

[section ""data" . GHC.Read.$fReadWord_$creadsPrec_closure" {
     GHC.Read.$fReadWord_$creadsPrec_closure:
         const GHC.Read.$fReadWord_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u41Pj_srtd" {
     u41Pj_srtd:
         const S3Y0k_srt+1000;
         const 125;
         const 1;
         const 1154047404513689600;
 },
 GHC.Read.$fReadWord_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c41P8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41Pc; else goto c41Pd;
       c41Pc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41Pd: // global
           I64[Sp - 16] = block_c41P6_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3XR5::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           P64[Sp - 8] = _s3XR5::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord_$creadsPrec_info" {
     GHC.Read.$fReadWord_$creadsPrec_info:
         const GHC.Read.$fReadWord_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u41Pj_srtd;
 },
 _c41P6() //  [R1]
         { []
         }
     {offset
       c41P6: // global
           _s3XR5::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c41Pb_info;
           R3 = _s3XR5::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c41P6_info" {
     block_c41P6_info:
         const _c41P6;
         const 1;
         const 30;
 },
 _c41Pb() //  [R1]
         { []
         }
     {offset
       c41Pb: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Pb_info" {
     block_c41Pb_info:
         const _c41Pb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.687059901 UTC

[section ""data" . GHC.Read.$fReadWord3_closure" {
     GHC.Read.$fReadWord3_closure:
         const GHC.Read.$fReadWord3_info;
         const 0;
 },
 sat_s3XRa_entry() //  [R1, R2]
         { []
         }
     {offset
       c41PI: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord_$creadsPrec_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XRa_info" {
     sat_s3XRa_info:
         const sat_s3XRa_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+1992;
 },
 GHC.Read.$fReadWord3_entry() //  [R2, R3]
         { []
         }
     {offset
       c41PO: // global
           _s3XR9::P64 = R3;
           _s3XR8::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c41PP; else goto c41PQ;
       c41PQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41PS; else goto c41PR;
       c41PS: // global
           HpAlloc = 16;
           goto c41PP;
       c41PP: // global
           R3 = _s3XR9::P64;
           R2 = _s3XR8::P64;
           R1 = GHC.Read.$fReadWord3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41PR: // global
           I64[Hp - 8] = sat_s3XRa_info;
           P64[Hp] = _s3XR8::P64;
           I64[Sp - 8] = block_c41PL_info;
           R3 = _s3XR9::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord3_info" {
     GHC.Read.$fReadWord3_info:
         const GHC.Read.$fReadWord3_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+1992;
 },
 _c41PL() //  [R1]
         { []
         }
     {offset
       c41PL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41PV; else goto c41PU;
       c41PV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41PU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41PL_info" {
     block_c41PL_info:
         const _c41PL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.695046084 UTC

[section ""data" . GHC.Read.$fReadWord2_closure" {
     GHC.Read.$fReadWord2_closure:
         const GHC.Read.$fReadWord2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord2_entry() //  [R1]
         { []
         }
     {offset
       c41Qh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c41Qi; else goto c41Qj;
       c41Qi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41Qj: // global
           (_c41Qe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41Qe::I64 == 0) goto c41Qg; else goto c41Qf;
       c41Qg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41Qf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41Qe::I64;
           R2 = GHC.Read.$fReadWord3_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord2_info" {
     GHC.Read.$fReadWord2_info:
         const GHC.Read.$fReadWord2_entry;
         const 0;
         const 562954248388629;
         const S3Y0k_srt+1864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.699398326 UTC

[section ""data" . GHC.Read.$fReadWord_$creadList_closure" {
     GHC.Read.$fReadWord_$creadList_closure:
         const GHC.Read.$fReadWord_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c41QA: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord_$creadList_info" {
     GHC.Read.$fReadWord_$creadList_info:
         const GHC.Read.$fReadWord_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.705050671 UTC

[section ""data" . GHC.Read.$fReadWord1_closure" {
     GHC.Read.$fReadWord1_closure:
         const GHC.Read.$fReadWord1_info;
         const 0;
 },
 GHC.Read.$fReadWord1_entry() //  [R2, R3]
         { []
         }
     {offset
       c41QO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41QP; else goto c41QQ;
       c41QP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c41QQ: // global
           I64[Sp - 8] = block_c41QL_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord1_info" {
     GHC.Read.$fReadWord1_info:
         const GHC.Read.$fReadWord1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+2016;
 },
 _c41QL() //  [R1]
         { []
         }
     {offset
       c41QL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41QT; else goto c41QS;
       c41QT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41QS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41QL_info" {
     block_c41QL_info:
         const _c41QL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.711487151 UTC

[section ""data" . GHC.Read.$fReadWord_closure" {
     GHC.Read.$fReadWord_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord_$creadList_closure+1;
         const GHC.Read.$fReadWord3_closure+2;
         const GHC.Read.$fReadWord1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.71587003 UTC

[section ""data" . GHC.Read.$fReadInt2_closure" {
     GHC.Read.$fReadInt2_closure:
         const GHC.Read.$fReadInt2_info;
         const 0;
 },
 x_s3XRm_entry() //  [R1]
         { []
         }
     {offset
       c41Rr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c41Rv; else goto c41Rw;
       c41Rv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41Rw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c41Rp_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s3XRm_info" {
     x_s3XRm_info:
         const x_s3XRm_entry;
         const 1;
         const 16;
 },
 _c41Rp() //  [R1]
         { []
         }
     {offset
       c41Rp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Rz; else goto c41Ry;
       c41Rz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c41Ry: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c41Rp_info" {
     block_c41Rp_info:
         const _c41Rp;
         const 0;
         const 30;
 },
 sat_s3XRq_entry() //  [R1, R3]
         { []
         }
     {offset
       c41RF: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XRq_info" {
     sat_s3XRq_info:
         const sat_s3XRq_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.$fReadInt2_entry() //  [R2]
         { []
         }
     {offset
       c41RM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c41RN; else goto c41RO;
       c41RN: // global
           R2 = R2;
           R1 = GHC.Read.$fReadInt2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41RO: // global
           I64[Sp - 8] = block_c41Ra_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41S5; else goto c41Rb;
       u41S5: // global
           call _c41Ra(R1) args: 0, res: 0, upd: 0;
       c41Rb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt2_info" {
     GHC.Read.$fReadInt2_info:
         const GHC.Read.$fReadInt2_entry;
         const 0;
         const 281479271677966;
         const 4294967301;
         const S3Y0k_srt+1904;
 },
 _c41Ra() //  [R1]
         { []
         }
     {offset
       c41Ra: // global
           if (R1 & 7 == 6) goto c41RK; else goto u41S1;
       c41RK: // global
           I64[Sp] = block_c41Rg_info;
           R2 = P64[R1 + 2];
           call Text.Read.Lex.numberToInteger_entry(R2) args: 8, res: 8, upd: 8;
       u41S1: // global
           Sp = Sp + 8;
           call _c41RV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c41Ra_info" {
     block_c41Ra_info:
         const _c41Ra;
         const 0;
         const 4294967326;
         const S3Y0k_srt+1904;
 },
 _c41Rg() //  [R1]
         { []
         }
     {offset
       c41Rg: // global
           if (R1 & 7 == 1) goto u41S2; else goto c41RW;
       u41S2: // global
           Sp = Sp + 8;
           call _c41RV() args: 0, res: 0, upd: 0;
       c41RW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c41RZ; else goto c41RY;
       c41RZ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41RY: // global
           _s3XRl::P64 = P64[R1 + 6];
           I64[Hp - 32] = x_s3XRm_info;
           P64[Hp - 16] = _s3XRl::P64;
           I64[Hp - 8] = sat_s3XRq_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Rg_info" {
     block_c41Rg_info:
         const _c41Rg;
         const 0;
         const 30;
 },
 _c41RV() //  []
         { []
         }
     {offset
       c41RV: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.730241159 UTC

[section ""data" . GHC.Read.$fReadInt1_closure" {
     GHC.Read.$fReadInt1_closure:
         const GHC.Read.$fReadInt1_info;
         const 0;
 },
 section ""relreadonly" . u41SR_srtd" {
     u41SR_srtd:
         const S3Y0k_srt+1024;
         const 127;
         const 1;
         const 4611686018427387904;
 },
 GHC.Read.$fReadInt1_entry() //  [R2, R3]
         { []
         }
     {offset
       c41SO: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInt2_closure+1;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt1_info" {
     GHC.Read.$fReadInt1_info:
         const GHC.Read.$fReadInt1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u41SR_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.735350263 UTC

[section ""data" . GHC.Read.$fReadDouble_x1_closure" {
     GHC.Read.$fReadDouble_x1_closure:
         const GHC.Read.$fReadDouble_x1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble_x1_entry() //  [R1]
         { []
         }
     {offset
       c41T5: // global
           _r3MZX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41T8; else goto c41T9;
       c41T9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Tb; else goto c41Ta;
       c41Tb: // global
           HpAlloc = 16;
           goto c41T8;
       c41T8: // global
           R1 = _r3MZX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41Ta: // global
           (_c41T0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3MZX::P64);
           if (_c41T0::I64 == 0) goto c41T2; else goto c41T1;
       c41T2: // global
           call (I64[I64[_r3MZX::P64]])() args: 8, res: 0, upd: 8;
       c41T1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41T0::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(0.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_x1_info" {
     GHC.Read.$fReadDouble_x1_info:
         const GHC.Read.$fReadDouble_x1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.739783955 UTC

[section ""data" . GHC.Read.$fReadDouble3_closure" {
     GHC.Read.$fReadDouble3_closure:
         const GHC.Read.$fReadDouble3_info;
         const 0;
 },
 GHC.Read.$fReadDouble3_entry() //  [R3]
         { []
         }
     {offset
       c41Tt: // global
           R2 = GHC.Read.$fReadDouble_x1_closure;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble3_info" {
     GHC.Read.$fReadDouble3_info:
         const GHC.Read.$fReadDouble3_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+2040;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.744162326 UTC

[section ""cstring" . GHC.Read.$fReadDouble5_bytes" {
     GHC.Read.$fReadDouble5_bytes:
         I8[] [78,97,78]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.746922323 UTC

[section ""data" . GHC.Read.$fReadDouble4_closure" {
     GHC.Read.$fReadDouble4_closure:
         const GHC.Read.$fReadDouble4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble4_entry() //  [R1]
         { []
         }
     {offset
       c41TH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41TI; else goto c41TJ;
       c41TI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41TJ: // global
           (_c41TE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41TE::I64 == 0) goto c41TG; else goto c41TF;
       c41TG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41TF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41TE::I64;
           R2 = GHC.Read.$fReadDouble5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble4_info" {
     GHC.Read.$fReadDouble4_info:
         const GHC.Read.$fReadDouble4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.751556336 UTC

[section ""data" . GHC.Read.$fReadDouble_x_closure" {
     GHC.Read.$fReadDouble_x_closure:
         const GHC.Read.$fReadDouble_x_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble_x_entry() //  [R1]
         { []
         }
     {offset
       c41U0: // global
           _r3MZV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41U3; else goto c41U4;
       c41U4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41U6; else goto c41U5;
       c41U6: // global
           HpAlloc = 16;
           goto c41U3;
       c41U3: // global
           R1 = _r3MZV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41U5: // global
           (_c41TV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3MZV::P64);
           if (_c41TV::I64 == 0) goto c41TX; else goto c41TW;
       c41TX: // global
           call (I64[I64[_r3MZV::P64]])() args: 8, res: 0, upd: 8;
       c41TW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41TV::I64;
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = %MO_F_Quot_W64(1.0 :: W64, 0.0 :: W64);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_x_info" {
     GHC.Read.$fReadDouble_x_info:
         const GHC.Read.$fReadDouble_x_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.757040566 UTC

[section ""data" . GHC.Read.$fReadDouble2_closure" {
     GHC.Read.$fReadDouble2_closure:
         const GHC.Read.$fReadDouble2_info;
         const 0;
 },
 GHC.Read.$fReadDouble2_entry() //  [R3]
         { []
         }
     {offset
       c41Up: // global
           R2 = GHC.Read.$fReadDouble_x_closure;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble2_info" {
     GHC.Read.$fReadDouble2_info:
         const GHC.Read.$fReadDouble2_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+2048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.760243103 UTC

[section ""cstring" . GHC.Read.$fReadDouble7_bytes" {
     GHC.Read.$fReadDouble7_bytes:
         I8[] [73,110,102,105,110,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.762886044 UTC

[section ""data" . GHC.Read.$fReadDouble6_closure" {
     GHC.Read.$fReadDouble6_closure:
         const GHC.Read.$fReadDouble6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble6_entry() //  [R1]
         { []
         }
     {offset
       c41UD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41UE; else goto c41UF;
       c41UE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41UF: // global
           (_c41UA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c41UA::I64 == 0) goto c41UC; else goto c41UB;
       c41UC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c41UB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41UA::I64;
           R2 = GHC.Read.$fReadDouble7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble6_info" {
     GHC.Read.$fReadDouble6_info:
         const GHC.Read.$fReadDouble6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.770418881 UTC

[section ""data" . GHC.Read.$fReadDouble_$sconvertFrac_closure" {
     GHC.Read.$fReadDouble_$sconvertFrac_closure:
         const GHC.Read.$fReadDouble_$sconvertFrac_info;
         const 0;
 },
 x_s3XRF_entry() //  [R1]
         { []
         }
     {offset
       c41Vb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c41Vc; else goto c41Vd;
       c41Vc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41Vd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c41V8_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u41Vh; else goto c41V9;
       u41Vh: // global
           call _c41V8(R1) args: 0, res: 0, upd: 0;
       c41V9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s3XRF_info" {
     x_s3XRF_info:
         const x_s3XRF_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2056;
 },
 _c41V8() //  [R1]
         { []
         }
     {offset
       c41V8: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Float.rationalToDouble_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c41V8_info" {
     block_c41V8_info:
         const _c41V8;
         const 0;
         const 4294967326;
         const S3Y0k_srt+2056;
 },
 sat_s3XRL_entry() //  [R1, R3]
         { []
         }
     {offset
       c41Vn: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XRL_info" {
     sat_s3XRL_info:
         const sat_s3XRL_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.$fReadDouble_$sconvertFrac_entry() //  [R2]
         { []
         }
     {offset
       c41Vv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41Vw; else goto c41Vx;
       c41Vw: // global
           R2 = R2;
           R1 = GHC.Read.$fReadDouble_$sconvertFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41Vx: // global
           I64[Sp - 8] = block_c41US_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41Wh; else goto c41UT;
       u41Wh: // global
           call _c41US(R1) args: 0, res: 0, upd: 0;
       c41UT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$sconvertFrac_info" {
     GHC.Read.$fReadDouble_$sconvertFrac_info:
         const GHC.Read.$fReadDouble_$sconvertFrac_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const S3Y0k_srt+2056;
 },
 _c41US() //  [R1]
         { []
         }
     {offset
       c41US: // global
           _c41Vu::P64 = R1 & 7;
           if (_c41Vu::P64 == 4) goto c41Vs; else goto u41Wa;
       c41Vs: // global
           I64[Sp - 8] = block_c41VB_info;
           R3 = GHC.Read.$fReadDouble6_closure;
           _s3XRz::P64 = P64[R1 + 4];
           R2 = _s3XRz::P64;
           P64[Sp] = _s3XRz::P64;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u41Wa: // global
           if (_c41Vu::P64 == 6) goto c41Vt; else goto u41Wb;
       c41Vt: // global
           I64[Sp] = block_c41UZ_info;
           R4 = P64[R1 + 2];
           R3 = GHC.Float.$fRealFloatDouble2_closure;
           R2 = GHC.Float.$fRealFloatDouble3_closure;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
       u41Wb: // global
           Sp = Sp + 8;
           call _c41VP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c41US_info" {
     block_c41US_info:
         const _c41US;
         const 0;
         const 528280977438;
         const S3Y0k_srt+2056;
 },
 _c41VB() //  [R1]
         { []
         }
     {offset
       c41VB: // global
           if (R1 & 7 == 1) goto c41VJ; else goto u41Wd;
       c41VJ: // global
           _s3XRz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c41VG_info;
           R3 = GHC.Read.$fReadDouble4_closure;
           R2 = _s3XRz::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u41Wd: // global
           Sp = Sp + 16;
           call _c41W2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c41VB_info" {
     block_c41VB_info:
         const _c41VB;
         const 1;
         const 30064771102;
         const S3Y0k_srt+2080;
 },
 _c41VG() //  [R1]
         { []
         }
     {offset
       c41VG: // global
           if (R1 & 7 == 1) goto u41We; else goto c41VT;
       u41We: // global
           Sp = Sp + 8;
           call _c41VP() args: 0, res: 0, upd: 0;
       c41VT: // global
           R1 = GHC.Read.$fReadDouble3_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41VG_info" {
     block_c41VG_info:
         const _c41VG;
         const 0;
         const 4294967326;
         const S3Y0k_srt+2088;
 },
 _c41UZ() //  [R1]
         { []
         }
     {offset
       c41UZ: // global
           if (R1 & 7 == 1) goto u41Wc; else goto c41W3;
       u41Wc: // global
           Sp = Sp + 8;
           call _c41W2() args: 0, res: 0, upd: 0;
       c41W3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c41W6; else goto c41W5;
       c41W6: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41W5: // global
           _s3XRE::P64 = P64[R1 + 6];
           I64[Hp - 32] = x_s3XRF_info;
           P64[Hp - 16] = _s3XRE::P64;
           I64[Hp - 8] = sat_s3XRL_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41UZ_info" {
     block_c41UZ_info:
         const _c41UZ;
         const 0;
         const 38654705694;
         const S3Y0k_srt+2056;
 },
 _c41W2() //  []
         { []
         }
     {offset
       c41W2: // global
           R1 = GHC.Read.$fReadDouble2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c41VP() //  []
         { []
         }
     {offset
       c41VP: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.78932658 UTC

[section ""data" . GHC.Read.$fReadFloat_x1_closure" {
     GHC.Read.$fReadFloat_x1_closure:
         const GHC.Read.$fReadFloat_x1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadFloat_x1_entry() //  [R1]
         { []
         }
     {offset
       c41Xk: // global
           _r3N0c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41Xn; else goto c41Xo;
       c41Xo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Xq; else goto c41Xp;
       c41Xq: // global
           HpAlloc = 16;
           goto c41Xn;
       c41Xn: // global
           R1 = _r3N0c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41Xp: // global
           (_c41Xf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3N0c::P64);
           if (_c41Xf::I64 == 0) goto c41Xh; else goto c41Xg;
       c41Xh: // global
           call (I64[I64[_r3N0c::P64]])() args: 8, res: 0, upd: 8;
       c41Xg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41Xf::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(0.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_x1_info" {
     GHC.Read.$fReadFloat_x1_info:
         const GHC.Read.$fReadFloat_x1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.794151204 UTC

[section ""data" . GHC.Read.$fReadFloat3_closure" {
     GHC.Read.$fReadFloat3_closure:
         const GHC.Read.$fReadFloat3_info;
         const 0;
 },
 GHC.Read.$fReadFloat3_entry() //  [R3]
         { []
         }
     {offset
       c41XI: // global
           R2 = GHC.Read.$fReadFloat_x1_closure;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat3_info" {
     GHC.Read.$fReadFloat3_info:
         const GHC.Read.$fReadFloat3_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+2112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.798846223 UTC

[section ""data" . GHC.Read.$fReadFloat_x_closure" {
     GHC.Read.$fReadFloat_x_closure:
         const GHC.Read.$fReadFloat_x_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadFloat_x_entry() //  [R1]
         { []
         }
     {offset
       c41XX: // global
           _r3N0a::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c41Y0; else goto c41Y1;
       c41Y1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c41Y3; else goto c41Y2;
       c41Y3: // global
           HpAlloc = 16;
           goto c41Y0;
       c41Y0: // global
           R1 = _r3N0a::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41Y2: // global
           (_c41XS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3N0a::P64);
           if (_c41XS::I64 == 0) goto c41XU; else goto c41XT;
       c41XU: // global
           call (I64[I64[_r3N0a::P64]])() args: 8, res: 0, upd: 8;
       c41XT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c41XS::I64;
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = %MO_F_Quot_W32(1.0 :: W32, 0.0 :: W32);
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_x_info" {
     GHC.Read.$fReadFloat_x_info:
         const GHC.Read.$fReadFloat_x_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.804339852 UTC

[section ""data" . GHC.Read.$fReadFloat2_closure" {
     GHC.Read.$fReadFloat2_closure:
         const GHC.Read.$fReadFloat2_info;
         const 0;
 },
 GHC.Read.$fReadFloat2_entry() //  [R3]
         { []
         }
     {offset
       c41Ym: // global
           R2 = GHC.Read.$fReadFloat_x_closure;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat2_info" {
     GHC.Read.$fReadFloat2_info:
         const GHC.Read.$fReadFloat2_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S3Y0k_srt+2120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.811196002 UTC

[section ""data" . GHC.Read.$fReadFloat_$sconvertFrac_closure" {
     GHC.Read.$fReadFloat_$sconvertFrac_closure:
         const GHC.Read.$fReadFloat_$sconvertFrac_info;
         const 0;
 },
 x_s3XS0_entry() //  [R1]
         { []
         }
     {offset
       c41YQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c41YR; else goto c41YS;
       c41YR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c41YS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c41YN_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u41YW; else goto c41YO;
       u41YW: // global
           call _c41YN(R1) args: 0, res: 0, upd: 0;
       c41YO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s3XS0_info" {
     x_s3XS0_info:
         const x_s3XS0_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2128;
 },
 _c41YN() //  [R1]
         { []
         }
     {offset
       c41YN: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Float.rationalToFloat_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c41YN_info" {
     block_c41YN_info:
         const _c41YN;
         const 0;
         const 4294967326;
         const S3Y0k_srt+2128;
 },
 sat_s3XS6_entry() //  [R1, R3]
         { []
         }
     {offset
       c41Z2: // global
           R2 = P64[R1 + 6];
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XS6_info" {
     sat_s3XS6_info:
         const sat_s3XS6_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Read.$fReadFloat_$sconvertFrac_entry() //  [R2]
         { []
         }
     {offset
       c41Za: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c41Zb; else goto c41Zc;
       c41Zb: // global
           R2 = R2;
           R1 = GHC.Read.$fReadFloat_$sconvertFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c41Zc: // global
           I64[Sp - 8] = block_c41Yx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u41ZW; else goto c41Yy;
       u41ZW: // global
           call _c41Yx(R1) args: 0, res: 0, upd: 0;
       c41Yy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$sconvertFrac_info" {
     GHC.Read.$fReadFloat_$sconvertFrac_info:
         const GHC.Read.$fReadFloat_$sconvertFrac_entry;
         const 0;
         const 16703127814158;
         const 4294967301;
         const S3Y0k_srt+2064;
 },
 _c41Yx() //  [R1]
         { []
         }
     {offset
       c41Yx: // global
           _c41Z9::P64 = R1 & 7;
           if (_c41Z9::P64 == 4) goto c41Z7; else goto u41ZP;
       c41Z7: // global
           I64[Sp - 8] = block_c41Zg_info;
           R3 = GHC.Read.$fReadDouble6_closure;
           _s3XRU::P64 = P64[R1 + 4];
           R2 = _s3XRU::P64;
           P64[Sp] = _s3XRU::P64;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u41ZP: // global
           if (_c41Z9::P64 == 6) goto c41Z8; else goto u41ZQ;
       c41Z8: // global
           I64[Sp] = block_c41YE_info;
           R4 = P64[R1 + 2];
           R3 = GHC.Float.$fRealFloatFloat2_closure;
           R2 = GHC.Float.$fRealFloatFloat3_closure;
           call Text.Read.Lex.$wnumberToRangedRational_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
       u41ZQ: // global
           Sp = Sp + 8;
           call _c41Zu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c41Yx_info" {
     block_c41Yx_info:
         const _c41Yx;
         const 0;
         const 14504104558622;
         const S3Y0k_srt+2064;
 },
 _c41Zg() //  [R1]
         { []
         }
     {offset
       c41Zg: // global
           if (R1 & 7 == 1) goto c41Zo; else goto u41ZS;
       c41Zo: // global
           _s3XRU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c41Zl_info;
           R3 = GHC.Read.$fReadDouble4_closure;
           R2 = _s3XRU::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       u41ZS: // global
           Sp = Sp + 16;
           call _c41ZH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c41Zg_info" {
     block_c41Zg_info:
         const _c41Zg;
         const 1;
         const 828928688158;
         const S3Y0k_srt+2096;
 },
 _c41Zl() //  [R1]
         { []
         }
     {offset
       c41Zl: // global
           if (R1 & 7 == 1) goto u41ZT; else goto c41Zy;
       u41ZT: // global
           Sp = Sp + 8;
           call _c41Zu() args: 0, res: 0, upd: 0;
       c41Zy: // global
           R1 = GHC.Read.$fReadFloat3_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41Zl_info" {
     block_c41Zl_info:
         const _c41Zl;
         const 0;
         const 4294967326;
         const S3Y0k_srt+2152;
 },
 _c41YE() //  [R1]
         { []
         }
     {offset
       c41YE: // global
           if (R1 & 7 == 1) goto u41ZR; else goto c41ZI;
       u41ZR: // global
           Sp = Sp + 8;
           call _c41ZH() args: 0, res: 0, upd: 0;
       c41ZI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c41ZL; else goto c41ZK;
       c41ZL: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c41ZK: // global
           _s3XRZ::P64 = P64[R1 + 6];
           I64[Hp - 32] = x_s3XS0_info;
           P64[Hp - 16] = _s3XRZ::P64;
           I64[Hp - 8] = sat_s3XS6_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c41YE_info" {
     block_c41YE_info:
         const _c41YE;
         const 0;
         const 21474836510;
         const S3Y0k_srt+2128;
 },
 _c41ZH() //  []
         { []
         }
     {offset
       c41ZH: // global
           R1 = GHC.Read.$fReadFloat2_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c41Zu() //  []
         { []
         }
     {offset
       c41Zu: // global
           R1 = Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.832502628 UTC

[section ""data" . GHC.Read.$fReadDouble1_closure" {
     GHC.Read.$fReadDouble1_closure:
         const GHC.Read.$fReadDouble1_info;
         const 0;
 },
 section ""relreadonly" . u420Y_srtd" {
     u420Y_srtd:
         const S3Y0k_srt+1008;
         const 134;
         const 1;
         const 0;
         const 32;
 },
 GHC.Read.$fReadDouble1_entry() //  [R2, R3]
         { []
         }
     {offset
       c420V: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadDouble_$sconvertFrac_closure+1;
           call GHC.Read.$fReadDouble_$sreadNumber_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble1_info" {
     GHC.Read.$fReadDouble1_info:
         const GHC.Read.$fReadDouble1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u420Y_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.838135844 UTC

[section ""data" . GHC.Read.$fReadDouble_$creadsPrec_closure" {
     GHC.Read.$fReadDouble_$creadsPrec_closure:
         const GHC.Read.$fReadDouble_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u421k_srtd" {
     u421k_srtd:
         const S3Y0k_srt+1008;
         const 134;
         const 1;
         const 0;
         const 32;
 },
 sat_s3XS8_entry() //  [R1]
         { []
         }
     {offset
       c421c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c421d; else goto c421e;
       c421d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c421e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadDouble_$sconvertFrac_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadDouble_$sreadNumber_entry(R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XS8_info" {
     sat_s3XS8_info:
         const sat_s3XS8_entry;
         const 1;
         const 18446744069414584336;
         const u421k_srtd;
 },
 section ""relreadonly" . u421l_srtd" {
     u421l_srtd:
         const S3Y0k_srt+1008;
         const 145;
         const 1;
         const 0;
         const 65568;
 },
 GHC.Read.$fReadDouble_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c421f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c421j; else goto c421i;
       c421j: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadDouble_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c421i: // global
           I64[Hp - 16] = sat_s3XS8_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$creadsPrec_info" {
     GHC.Read.$fReadDouble_$creadsPrec_info:
         const GHC.Read.$fReadDouble_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u421l_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.846041144 UTC

[section ""data" . GHC.Read.$fReadDouble_$creadListPrec_closure" {
     GHC.Read.$fReadDouble_$creadListPrec_closure:
         const GHC.Read.$fReadDouble_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c421G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c421H; else goto c421I;
       c421H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c421I: // global
           (_c421D::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c421D::I64 == 0) goto c421F; else goto c421E;
       c421F: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c421E: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c421D::I64;
           R2 = GHC.Read.$fReadDouble1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$creadListPrec_info" {
     GHC.Read.$fReadDouble_$creadListPrec_info:
         const GHC.Read.$fReadDouble_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S3Y0k_srt+2168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.851750802 UTC

[section ""data" . GHC.Read.$fReadDouble8_closure" {
     GHC.Read.$fReadDouble8_closure:
         const GHC.Read.$fReadDouble8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadDouble8_entry() //  [R1]
         { []
         }
     {offset
       c421X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c421Y; else goto c421Z;
       c421Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c421Z: // global
           (_c421U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c421U::I64 == 0) goto c421W; else goto c421V;
       c421W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c421V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c421U::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadDouble_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble8_info" {
     GHC.Read.$fReadDouble8_info:
         const GHC.Read.$fReadDouble8_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+2184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.855940521 UTC

[section ""data" . GHC.Read.$fReadDouble_$creadList_closure" {
     GHC.Read.$fReadDouble_$creadList_closure:
         const GHC.Read.$fReadDouble_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadDouble_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c422d: // global
           R3 = R2;
           R2 = GHC.Read.$fReadDouble8_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadDouble_$creadList_info" {
     GHC.Read.$fReadDouble_$creadList_info:
         const GHC.Read.$fReadDouble_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.859123093 UTC

[section ""data" . GHC.Read.$fReadDouble_closure" {
     GHC.Read.$fReadDouble_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadDouble_$creadsPrec_closure+1;
         const GHC.Read.$fReadDouble_$creadList_closure+1;
         const GHC.Read.$fReadDouble1_closure+2;
         const GHC.Read.$fReadDouble_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.862503922 UTC

[section ""data" . GHC.Read.$fReadFloat1_closure" {
     GHC.Read.$fReadFloat1_closure:
         const GHC.Read.$fReadFloat1_info;
         const 0;
 },
 section ""relreadonly" . u422s_srtd" {
     u422s_srtd:
         const S3Y0k_srt+1016;
         const 141;
         const 1;
         const 0;
         const 4096;
 },
 GHC.Read.$fReadFloat1_entry() //  [R2, R3]
         { []
         }
     {offset
       c422p: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadFloat_$sconvertFrac_closure+1;
           call GHC.Read.$fReadFloat_$sreadNumber_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat1_info" {
     GHC.Read.$fReadFloat1_info:
         const GHC.Read.$fReadFloat1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u422s_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.86948812 UTC

[section ""data" . GHC.Read.$fReadFloat_$creadsPrec_closure" {
     GHC.Read.$fReadFloat_$creadsPrec_closure:
         const GHC.Read.$fReadFloat_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u422O_srtd" {
     u422O_srtd:
         const S3Y0k_srt+1016;
         const 141;
         const 1;
         const 0;
         const 4096;
 },
 sat_s3XSa_entry() //  [R1]
         { []
         }
     {offset
       c422G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c422H; else goto c422I;
       c422H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c422I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadFloat_$sconvertFrac_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadFloat_$sreadNumber_entry(R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XSa_info" {
     sat_s3XSa_info:
         const sat_s3XSa_entry;
         const 1;
         const 18446744069414584336;
         const u422O_srtd;
 },
 section ""relreadonly" . u422P_srtd" {
     u422P_srtd:
         const S3Y0k_srt+1016;
         const 149;
         const 1;
         const 0;
         const 1052672;
 },
 GHC.Read.$fReadFloat_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c422J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c422N; else goto c422M;
       c422N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadFloat_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c422M: // global
           I64[Hp - 16] = sat_s3XSa_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$creadsPrec_info" {
     GHC.Read.$fReadFloat_$creadsPrec_info:
         const GHC.Read.$fReadFloat_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u422P_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.878935599 UTC

[section ""data" . GHC.Read.$fReadFloat_$creadListPrec_closure" {
     GHC.Read.$fReadFloat_$creadListPrec_closure:
         const GHC.Read.$fReadFloat_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadFloat_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c423a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c423b; else goto c423c;
       c423b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c423c: // global
           (_c4237::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4237::I64 == 0) goto c4239; else goto c4238;
       c4239: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4238: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4237::I64;
           R2 = GHC.Read.$fReadFloat1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$creadListPrec_info" {
     GHC.Read.$fReadFloat_$creadListPrec_info:
         const GHC.Read.$fReadFloat_$creadListPrec_entry;
         const 0;
         const 73014444053;
         const S3Y0k_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.883661915 UTC

[section ""data" . GHC.Read.$fReadFloat4_closure" {
     GHC.Read.$fReadFloat4_closure:
         const GHC.Read.$fReadFloat4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadFloat4_entry() //  [R1]
         { []
         }
     {offset
       c423r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c423s; else goto c423t;
       c423s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c423t: // global
           (_c423o::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c423o::I64 == 0) goto c423q; else goto c423p;
       c423q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c423p: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c423o::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadFloat_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat4_info" {
     GHC.Read.$fReadFloat4_info:
         const GHC.Read.$fReadFloat4_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+2216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.887826739 UTC

[section ""data" . GHC.Read.$fReadFloat_$creadList_closure" {
     GHC.Read.$fReadFloat_$creadList_closure:
         const GHC.Read.$fReadFloat_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadFloat_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c423H: // global
           R3 = R2;
           R2 = GHC.Read.$fReadFloat4_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadFloat_$creadList_info" {
     GHC.Read.$fReadFloat_$creadList_info:
         const GHC.Read.$fReadFloat_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.891377686 UTC

[section ""data" . GHC.Read.$fReadFloat_closure" {
     GHC.Read.$fReadFloat_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadFloat_$creadsPrec_closure+1;
         const GHC.Read.$fReadFloat_$creadList_closure+1;
         const GHC.Read.$fReadFloat1_closure+2;
         const GHC.Read.$fReadFloat_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.893089613 UTC

[section ""cstring" . GHC.Read.$trModule4_bytes" {
     GHC.Read.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.894856273 UTC

[section ""data" . GHC.Read.$trModule3_closure" {
     GHC.Read.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Read.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.896547641 UTC

[section ""cstring" . GHC.Read.$trModule2_bytes" {
     GHC.Read.$trModule2_bytes:
         I8[] [71,72,67,46,82,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.898282448 UTC

[section ""data" . GHC.Read.$trModule1_closure" {
     GHC.Read.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Read.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.900001606 UTC

[section ""data" . GHC.Read.$trModule_closure" {
     GHC.Read.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Read.$trModule3_closure+1;
         const GHC.Read.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.902098702 UTC

[section ""data" . $krep_r3N5l_closure" {
     $krep_r3N5l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.904444308 UTC

[section ""data" . $krep1_r3N5m_closure" {
     $krep1_r3N5m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.906246209 UTC

[section ""data" . $krep2_r3N5n_closure" {
     $krep2_r3N5n_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.908028793 UTC

[section ""data" . $krep3_r3N5o_closure" {
     $krep3_r3N5o_closure:
         const :_con_info;
         const $krep_r3N5l_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.909821134 UTC

[section ""data" . $krep4_r3N5p_closure" {
     $krep4_r3N5p_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_r3N5o_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.911543239 UTC

[section ""data" . GHC.Read.$tcRead1_closure" {
     GHC.Read.$tcRead1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep2_r3N5n_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.913565858 UTC

[section ""data" . $krep5_r3N5q_closure" {
     $krep5_r3N5q_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.915206339 UTC

[section ""data" . $krep6_r3N5r_closure" {
     $krep6_r3N5r_closure:
         const :_con_info;
         const $krep4_r3N5p_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.916892587 UTC

[section ""data" . $krep7_r3N5s_closure" {
     $krep7_r3N5s_closure:
         const :_con_info;
         const $krep5_r3N5q_closure+2;
         const $krep6_r3N5r_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.918649569 UTC

[section ""data" . $krep8_r3N5t_closure" {
     $krep8_r3N5t_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep7_r3N5s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.920355287 UTC

[section ""data" . $krep9_r3N5u_closure" {
     $krep9_r3N5u_closure:
         const :_con_info;
         const $krep8_r3N5t_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.922096695 UTC

[section ""data" . $krep10_r3N5v_closure" {
     $krep10_r3N5v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep9_r3N5u_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.92376964 UTC

[section ""data" . $krep11_r3N5w_closure" {
     $krep11_r3N5w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3N5p_closure+1;
         const $krep10_r3N5v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.925846453 UTC

[section ""data" . $krep12_r3N5x_closure" {
     $krep12_r3N5x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3N5m_closure+1;
         const $krep11_r3N5w_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.927571762 UTC

[section ""data" . $krep13_r3N5y_closure" {
     $krep13_r3N5y_closure:
         const :_con_info;
         const $krep5_r3N5q_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.929908516 UTC

[section ""data" . $krep14_r3N5z_closure" {
     $krep14_r3N5z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep13_r3N5y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.931692602 UTC

[section ""data" . $krep15_r3N5A_closure" {
     $krep15_r3N5A_closure:
         const :_con_info;
         const $krep14_r3N5z_closure+1;
         const $krep6_r3N5r_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.933415594 UTC

[section ""data" . $krep16_r3N5B_closure" {
     $krep16_r3N5B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep15_r3N5A_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.935161356 UTC

[section ""data" . $krep17_r3N5C_closure" {
     $krep17_r3N5C_closure:
         const :_con_info;
         const $krep16_r3N5B_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.936875364 UTC

[section ""data" . $krep18_r3N5D_closure" {
     $krep18_r3N5D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep17_r3N5C_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.93889515 UTC

[section ""data" . $krep19_r3N5E_closure" {
     $krep19_r3N5E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r3N5p_closure+1;
         const $krep18_r3N5D_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.940579976 UTC

[section ""data" . $krep20_r3N5F_closure" {
     $krep20_r3N5F_closure:
         const :_con_info;
         const $krep14_r3N5z_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.942288075 UTC

[section ""data" . $krep21_r3N5G_closure" {
     $krep21_r3N5G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec_closure;
         const $krep20_r3N5F_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.943982548 UTC

[section ""data" . $krep22_r3N5H_closure" {
     $krep22_r3N5H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Text.ParserCombinators.ReadPrec.$tcReadPrec_closure;
         const $krep13_r3N5y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.945719323 UTC

[section ""cstring" . GHC.Read.$tcRead3_bytes" {
     GHC.Read.$tcRead3_bytes:
         I8[] [82,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.947395957 UTC

[section ""data" . GHC.Read.$tcRead2_closure" {
     GHC.Read.$tcRead2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Read.$tcRead3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.949118635 UTC

[section ""data" . GHC.Read.$tcRead_closure" {
     GHC.Read.$tcRead_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Read.$trModule_closure+1;
         const GHC.Read.$tcRead2_closure+1;
         const GHC.Read.$tcRead1_closure+4;
         const 2005723268194049725;
         const 6708234688584993214;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.950976098 UTC

[section ""data" . $krep23_r3N5I_closure" {
     $krep23_r3N5I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Read.$tcRead_closure+1;
         const $krep13_r3N5y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.95273811 UTC

[section ""data" . $krep24_r3N5J_closure" {
     $krep24_r3N5J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep21_r3N5G_closure+1;
         const $krep23_r3N5I_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.955534505 UTC

[section ""data" . $krep25_r3N5K_closure" {
     $krep25_r3N5K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r3N5H_closure+1;
         const $krep24_r3N5J_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.95745323 UTC

[section ""data" . $krep26_r3N5L_closure" {
     $krep26_r3N5L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r3N5E_closure+4;
         const $krep25_r3N5K_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.959081121 UTC

[section ""data" . GHC.Read.$tc'C:Read1_closure" {
     GHC.Read.$tc'C:Read1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r3N5x_closure+4;
         const $krep26_r3N5L_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.960731538 UTC

[section ""cstring" . GHC.Read.$tc'C:Read3_bytes" {
     GHC.Read.$tc'C:Read3_bytes:
         I8[] [39,67,58,82,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.962418826 UTC

[section ""data" . GHC.Read.$tc'C:Read2_closure" {
     GHC.Read.$tc'C:Read2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Read.$tc'C:Read3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.964118703 UTC

[section ""data" . GHC.Read.$tc'C:Read_closure" {
     GHC.Read.$tc'C:Read_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Read.$trModule_closure+1;
         const GHC.Read.$tc'C:Read2_closure+1;
         const GHC.Read.$tc'C:Read1_closure+4;
         const 14808553548329602455;
         const 6533111827003124976;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.967294342 UTC

[section ""data" . GHC.Read.$fReadInt_$creadsPrec_closure" {
     GHC.Read.$fReadInt_$creadsPrec_closure:
         const GHC.Read.$fReadInt_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u424J_srtd" {
     u424J_srtd:
         const S3Y0k_srt+1024;
         const 127;
         const 1;
         const 4611686018427387904;
 },
 sat_s3XSc_entry() //  [R1]
         { []
         }
     {offset
       c424B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c424C; else goto c424D;
       c424C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c424D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadInt2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XSc_info" {
     sat_s3XSc_info:
         const sat_s3XSc_entry;
         const 1;
         const 18446744069414584336;
         const u424J_srtd;
 },
 section ""relreadonly" . u424K_srtd" {
     u424K_srtd:
         const S3Y0k_srt+1024;
         const 152;
         const 1;
         const 4611686018427387904;
         const 8388608;
 },
 GHC.Read.$fReadInt_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c424E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c424I; else goto c424H;
       c424I: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadInt_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c424H: // global
           I64[Hp - 16] = sat_s3XSc_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt_$creadsPrec_info" {
     GHC.Read.$fReadInt_$creadsPrec_info:
         const GHC.Read.$fReadInt_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u424K_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.974251549 UTC

[section ""data" . GHC.Read.$fReadInt_$creadListPrec_closure" {
     GHC.Read.$fReadInt_$creadListPrec_closure:
         const GHC.Read.$fReadInt_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadInt_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c4255: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4256; else goto c4257;
       c4256: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4257: // global
           (_c4252::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4252::I64 == 0) goto c4254; else goto c4253;
       c4254: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4253: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4252::I64;
           R2 = GHC.Read.$fReadInt1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt_$creadListPrec_info" {
     GHC.Read.$fReadInt_$creadListPrec_info:
         const GHC.Read.$fReadInt_$creadListPrec_entry;
         const 0;
         const 1103806595093;
         const S3Y0k_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.978566569 UTC

[section ""data" . GHC.Read.$fReadInt3_closure" {
     GHC.Read.$fReadInt3_closure:
         const GHC.Read.$fReadInt3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadInt3_entry() //  [R1]
         { []
         }
     {offset
       c425m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c425n; else goto c425o;
       c425n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c425o: // global
           (_c425j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c425j::I64 == 0) goto c425l; else goto c425k;
       c425l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c425k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c425j::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fReadInt_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt3_info" {
     GHC.Read.$fReadInt3_info:
         const GHC.Read.$fReadInt3_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+2248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.983193786 UTC

[section ""data" . GHC.Read.$fReadInt_$creadList_closure" {
     GHC.Read.$fReadInt_$creadList_closure:
         const GHC.Read.$fReadInt_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadInt_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c425C: // global
           R3 = R2;
           R2 = GHC.Read.$fReadInt3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadInt_$creadList_info" {
     GHC.Read.$fReadInt_$creadList_info:
         const GHC.Read.$fReadInt_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.986410064 UTC

[section ""data" . GHC.Read.$fReadInt_closure" {
     GHC.Read.$fReadInt_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadInt_$creadsPrec_closure+1;
         const GHC.Read.$fReadInt_$creadList_closure+1;
         const GHC.Read.$fReadInt1_closure+2;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:54.991519368 UTC

[section ""data" . GHC.Read.$fReadWord32_go_closure" {
     GHC.Read.$fReadWord32_go_closure:
         const GHC.Read.$fReadWord32_go_info;
 },
 sat_s3XSq_entry() //  [R1]
         { []
         }
     {offset
       c4263: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4264; else goto c4265;
       c4264: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4265: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord32_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XSq_info" {
     sat_s3XSq_info:
         const sat_s3XSq_entry;
         const 1;
         const 16;
 },
 sat_s3XSo_entry() //  [R1]
         { []
         }
     {offset
       c426d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c426n; else goto c426o;
       c426n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c426o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c426a_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u426s; else goto c426b;
       u426s: // global
           call _c426a(R1) args: 0, res: 0, upd: 0;
       c426b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XSo_info" {
     sat_s3XSo_info:
         const sat_s3XSo_entry;
         const 1;
         const 16;
 },
 _c426a() //  [R1]
         { []
         }
     {offset
       c426a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c426r; else goto c426q;
       c426r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c426q: // global
           _s3XSn::I64 = %MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W32#_con_info;
           I64[Hp] = _s3XSn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c426a_info" {
     block_c426a_info:
         const _c426a;
         const 0;
         const 30;
 },
 GHC.Read.$fReadWord32_go_entry() //  [R2]
         { []
         }
     {offset
       c426x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c426y; else goto c426z;
       c426y: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord32_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c426z: // global
           I64[Sp - 8] = block_c425O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u426J; else goto c425P;
       u426J: // global
           call _c425O(R1) args: 0, res: 0, upd: 0;
       c425P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord32_go_info" {
     GHC.Read.$fReadWord32_go_info:
         const GHC.Read.$fReadWord32_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c425O() //  [R1]
         { []
         }
     {offset
       c425O: // global
           if (R1 & 7 == 1) goto c426u; else goto c426v;
       c426u: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c426v: // global
           I64[Sp - 8] = block_c425U_info;
           _s3XSg::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XSg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u426I; else goto c425V;
       u426I: // global
           call _c425U(R1) args: 0, res: 0, upd: 0;
       c425V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c425O_info" {
     block_c425O_info:
         const _c425O;
         const 0;
         const 30;
 },
 _c425U() //  [R1]
         { []
         }
     {offset
       c425U: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c426H; else goto c426G;
       c426H: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c426G: // global
           _s3XSi::P64 = P64[R1 + 7];
           _s3XSj::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3XSq_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3XSo_info;
           P64[Hp - 48] = _s3XSi::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3XSj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c425U_info" {
     block_c425U_info:
         const _c425U;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.00441384 UTC

[section ""data" . GHC.Read.$fReadWord32_$creadsPrec_closure" {
     GHC.Read.$fReadWord32_$creadsPrec_closure:
         const GHC.Read.$fReadWord32_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u427L_srtd" {
     u427L_srtd:
         const S3Y0k_srt+1024;
         const 156;
         const 1;
         const 4611686018427387904;
         const 134217728;
 },
 GHC.Read.$fReadWord32_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c427A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c427E; else goto c427F;
       c427E: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord32_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c427F: // global
           I64[Sp - 16] = block_c427y_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3XSs::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInt2_closure+1;
           P64[Sp - 8] = _s3XSs::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord32_$creadsPrec_info" {
     GHC.Read.$fReadWord32_$creadsPrec_info:
         const GHC.Read.$fReadWord32_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u427L_srtd;
 },
 _c427y() //  [R1]
         { []
         }
     {offset
       c427y: // global
           _s3XSs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c427D_info;
           R3 = _s3XSs::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c427y_info" {
     block_c427y_info:
         const _c427y;
         const 1;
         const 30;
 },
 _c427D() //  [R1]
         { []
         }
     {offset
       c427D: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord32_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c427D_info" {
     block_c427D_info:
         const _c427D;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.012583204 UTC

[section ""data" . GHC.Read.$fReadWord10_closure" {
     GHC.Read.$fReadWord10_closure:
         const GHC.Read.$fReadWord10_info;
         const 0;
 },
 sat_s3XSx_entry() //  [R1, R2]
         { []
         }
     {offset
       c428a: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord32_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XSx_info" {
     sat_s3XSx_info:
         const sat_s3XSx_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+2264;
 },
 GHC.Read.$fReadWord10_entry() //  [R2, R3]
         { []
         }
     {offset
       c428g: // global
           _s3XSw::P64 = R3;
           _s3XSv::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c428h; else goto c428i;
       c428i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c428k; else goto c428j;
       c428k: // global
           HpAlloc = 16;
           goto c428h;
       c428h: // global
           R3 = _s3XSw::P64;
           R2 = _s3XSv::P64;
           R1 = GHC.Read.$fReadWord10_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c428j: // global
           I64[Hp - 8] = sat_s3XSx_info;
           P64[Hp] = _s3XSv::P64;
           I64[Sp - 8] = block_c428d_info;
           R3 = _s3XSw::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord10_info" {
     GHC.Read.$fReadWord10_info:
         const GHC.Read.$fReadWord10_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+2264;
 },
 _c428d() //  [R1]
         { []
         }
     {offset
       c428d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c428n; else goto c428m;
       c428n: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c428m: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c428d_info" {
     block_c428d_info:
         const _c428d;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.019790828 UTC

[section ""data" . GHC.Read.$fReadWord9_closure" {
     GHC.Read.$fReadWord9_closure:
         const GHC.Read.$fReadWord9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord9_entry() //  [R1]
         { []
         }
     {offset
       c428J: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c428K; else goto c428L;
       c428K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c428L: // global
           (_c428G::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c428G::I64 == 0) goto c428I; else goto c428H;
       c428I: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c428H: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c428G::I64;
           R2 = GHC.Read.$fReadWord10_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord9_info" {
     GHC.Read.$fReadWord9_info:
         const GHC.Read.$fReadWord9_entry;
         const 0;
         const 17596481011733;
         const S3Y0k_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.024047134 UTC

[section ""data" . GHC.Read.$fReadWord32_$creadList_closure" {
     GHC.Read.$fReadWord32_$creadList_closure:
         const GHC.Read.$fReadWord32_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord32_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c4292: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord9_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord32_$creadList_info" {
     GHC.Read.$fReadWord32_$creadList_info:
         const GHC.Read.$fReadWord32_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.028991618 UTC

[section ""data" . GHC.Read.$fReadWord7_closure" {
     GHC.Read.$fReadWord7_closure:
         const GHC.Read.$fReadWord7_info;
         const 0;
 },
 GHC.Read.$fReadWord7_entry() //  [R2, R3]
         { []
         }
     {offset
       c429g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c429h; else goto c429i;
       c429h: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord7_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c429i: // global
           I64[Sp - 8] = block_c429d_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord32_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord7_info" {
     GHC.Read.$fReadWord7_info:
         const GHC.Read.$fReadWord7_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+2288;
 },
 _c429d() //  [R1]
         { []
         }
     {offset
       c429d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c429l; else goto c429k;
       c429l: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c429k: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c429d_info" {
     block_c429d_info:
         const _c429d;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.034448044 UTC

[section ""data" . GHC.Read.$fReadWord32_closure" {
     GHC.Read.$fReadWord32_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord32_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord32_$creadList_closure+1;
         const GHC.Read.$fReadWord10_closure+2;
         const GHC.Read.$fReadWord7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.038929478 UTC

[section ""data" . GHC.Read.$fReadWord16_go_closure" {
     GHC.Read.$fReadWord16_go_closure:
         const GHC.Read.$fReadWord16_go_info;
 },
 sat_s3XSR_entry() //  [R1]
         { []
         }
     {offset
       c429R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c429S; else goto c429T;
       c429S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c429T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord16_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XSR_info" {
     sat_s3XSR_info:
         const sat_s3XSR_entry;
         const 1;
         const 16;
 },
 sat_s3XSP_entry() //  [R1]
         { []
         }
     {offset
       c42a1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c42ab; else goto c42ac;
       c42ab: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42ac: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c429Y_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u42ag; else goto c429Z;
       u42ag: // global
           call _c429Y(R1) args: 0, res: 0, upd: 0;
       c429Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XSP_info" {
     sat_s3XSP_info:
         const sat_s3XSP_entry;
         const 1;
         const 16;
 },
 _c429Y() //  [R1]
         { []
         }
     {offset
       c429Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42af; else goto c42ae;
       c42af: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c42ae: // global
           _s3XSO::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W16#_con_info;
           I64[Hp] = _s3XSO::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c429Y_info" {
     block_c429Y_info:
         const _c429Y;
         const 0;
         const 30;
 },
 GHC.Read.$fReadWord16_go_entry() //  [R2]
         { []
         }
     {offset
       c42al: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42am; else goto c42an;
       c42am: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord16_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42an: // global
           I64[Sp - 8] = block_c429C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u42ax; else goto c429D;
       u42ax: // global
           call _c429C(R1) args: 0, res: 0, upd: 0;
       c429D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord16_go_info" {
     GHC.Read.$fReadWord16_go_info:
         const GHC.Read.$fReadWord16_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c429C() //  [R1]
         { []
         }
     {offset
       c429C: // global
           if (R1 & 7 == 1) goto c42ai; else goto c42aj;
       c42ai: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c42aj: // global
           I64[Sp - 8] = block_c429I_info;
           _s3XSH::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XSH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u42aw; else goto c429J;
       u42aw: // global
           call _c429I(R1) args: 0, res: 0, upd: 0;
       c429J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c429C_info" {
     block_c429C_info:
         const _c429C;
         const 0;
         const 30;
 },
 _c429I() //  [R1]
         { []
         }
     {offset
       c429I: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c42av; else goto c42au;
       c42av: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42au: // global
           _s3XSJ::P64 = P64[R1 + 7];
           _s3XSK::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3XSR_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3XSP_info;
           P64[Hp - 48] = _s3XSJ::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3XSK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c429I_info" {
     block_c429I_info:
         const _c429I;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.052421015 UTC

[section ""data" . GHC.Read.$fReadWord16_$creadsPrec_closure" {
     GHC.Read.$fReadWord16_$creadsPrec_closure:
         const GHC.Read.$fReadWord16_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fReadWord16_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c42bo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42bs; else goto c42bt;
       c42bs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord16_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42bt: // global
           I64[Sp - 16] = block_c42bm_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3XST::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInt2_closure+1;
           P64[Sp - 8] = _s3XST::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord16_$creadsPrec_info" {
     GHC.Read.$fReadWord16_$creadsPrec_info:
         const GHC.Read.$fReadWord16_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S3Y0k_srt+2304;
 },
 _c42bm() //  [R1]
         { []
         }
     {offset
       c42bm: // global
           _s3XST::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c42br_info;
           R3 = _s3XST::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c42bm_info" {
     block_c42bm_info:
         const _c42bm;
         const 1;
         const 30;
 },
 _c42br() //  [R1]
         { []
         }
     {offset
       c42br: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord16_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42br_info" {
     block_c42br_info:
         const _c42br;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.060107782 UTC

[section ""data" . GHC.Read.$fReadWord6_closure" {
     GHC.Read.$fReadWord6_closure:
         const GHC.Read.$fReadWord6_info;
         const 0;
 },
 sat_s3XSY_entry() //  [R1, R2]
         { []
         }
     {offset
       c42bW: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord16_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XSY_info" {
     sat_s3XSY_info:
         const sat_s3XSY_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+2304;
 },
 GHC.Read.$fReadWord6_entry() //  [R2, R3]
         { []
         }
     {offset
       c42c2: // global
           _s3XSX::P64 = R3;
           _s3XSW::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c42c3; else goto c42c4;
       c42c4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42c6; else goto c42c5;
       c42c6: // global
           HpAlloc = 16;
           goto c42c3;
       c42c3: // global
           R3 = _s3XSX::P64;
           R2 = _s3XSW::P64;
           R1 = GHC.Read.$fReadWord6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42c5: // global
           I64[Hp - 8] = sat_s3XSY_info;
           P64[Hp] = _s3XSW::P64;
           I64[Sp - 8] = block_c42bZ_info;
           R3 = _s3XSX::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord6_info" {
     GHC.Read.$fReadWord6_info:
         const GHC.Read.$fReadWord6_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S3Y0k_srt+2304;
 },
 _c42bZ() //  [R1]
         { []
         }
     {offset
       c42bZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42c9; else goto c42c8;
       c42c9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42c8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42bZ_info" {
     block_c42bZ_info:
         const _c42bZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.068715462 UTC

[section ""data" . GHC.Read.$fReadWord5_closure" {
     GHC.Read.$fReadWord5_closure:
         const GHC.Read.$fReadWord5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord5_entry() //  [R1]
         { []
         }
     {offset
       c42cv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c42cw; else goto c42cx;
       c42cw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42cx: // global
           (_c42cs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42cs::I64 == 0) goto c42cu; else goto c42ct;
       c42cu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42ct: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42cs::I64;
           R2 = GHC.Read.$fReadWord6_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord5_info" {
     GHC.Read.$fReadWord5_info:
         const GHC.Read.$fReadWord5_entry;
         const 0;
         const 2251804108652565;
         const S3Y0k_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.073043164 UTC

[section ""data" . GHC.Read.$fReadWord16_$creadList_closure" {
     GHC.Read.$fReadWord16_$creadList_closure:
         const GHC.Read.$fReadWord16_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord16_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c42cO: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord5_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord16_$creadList_info" {
     GHC.Read.$fReadWord16_$creadList_info:
         const GHC.Read.$fReadWord16_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2336;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.077205349 UTC

[section ""data" . GHC.Read.$fReadWord4_closure" {
     GHC.Read.$fReadWord4_closure:
         const GHC.Read.$fReadWord4_info;
         const 0;
 },
 GHC.Read.$fReadWord4_entry() //  [R2, R3]
         { []
         }
     {offset
       c42d2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c42d3; else goto c42d4;
       c42d3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42d4: // global
           I64[Sp - 8] = block_c42cZ_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord16_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord4_info" {
     GHC.Read.$fReadWord4_info:
         const GHC.Read.$fReadWord4_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+2344;
 },
 _c42cZ() //  [R1]
         { []
         }
     {offset
       c42cZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42d7; else goto c42d6;
       c42d7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42d6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42cZ_info" {
     block_c42cZ_info:
         const _c42cZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.08260108 UTC

[section ""data" . GHC.Read.$fReadWord16_closure" {
     GHC.Read.$fReadWord16_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord16_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord16_$creadList_closure+1;
         const GHC.Read.$fReadWord6_closure+2;
         const GHC.Read.$fReadWord4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.087912347 UTC

[section ""data" . GHC.Read.$fReadWord8_go_closure" {
     GHC.Read.$fReadWord8_go_closure:
         const GHC.Read.$fReadWord8_go_info;
 },
 sat_s3XTi_entry() //  [R1]
         { []
         }
     {offset
       c42dD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42dE; else goto c42dF;
       c42dE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42dF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadWord8_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XTi_info" {
     sat_s3XTi_info:
         const sat_s3XTi_entry;
         const 1;
         const 16;
 },
 sat_s3XTg_entry() //  [R1]
         { []
         }
     {offset
       c42dN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c42dX; else goto c42dY;
       c42dX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42dY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c42dK_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u42e2; else goto c42dL;
       u42e2: // global
           call _c42dK(R1) args: 0, res: 0, upd: 0;
       c42dL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XTg_info" {
     sat_s3XTg_info:
         const sat_s3XTg_entry;
         const 1;
         const 16;
 },
 _c42dK() //  [R1]
         { []
         }
     {offset
       c42dK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42e1; else goto c42e0;
       c42e1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c42e0: // global
           _s3XTf::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _s3XTf::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c42dK_info" {
     block_c42dK_info:
         const _c42dK;
         const 0;
         const 30;
 },
 GHC.Read.$fReadWord8_go_entry() //  [R2]
         { []
         }
     {offset
       c42e7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42e8; else goto c42e9;
       c42e8: // global
           R2 = R2;
           R1 = GHC.Read.$fReadWord8_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42e9: // global
           I64[Sp - 8] = block_c42do_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u42ej; else goto c42dp;
       u42ej: // global
           call _c42do(R1) args: 0, res: 0, upd: 0;
       c42dp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord8_go_info" {
     GHC.Read.$fReadWord8_go_info:
         const GHC.Read.$fReadWord8_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c42do() //  [R1]
         { []
         }
     {offset
       c42do: // global
           if (R1 & 7 == 1) goto c42e4; else goto c42e5;
       c42e4: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c42e5: // global
           I64[Sp - 8] = block_c42du_info;
           _s3XT8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XT8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u42ei; else goto c42dv;
       u42ei: // global
           call _c42du(R1) args: 0, res: 0, upd: 0;
       c42dv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c42do_info" {
     block_c42do_info:
         const _c42do;
         const 0;
         const 30;
 },
 _c42du() //  [R1]
         { []
         }
     {offset
       c42du: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c42eh; else goto c42eg;
       c42eh: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42eg: // global
           _s3XTa::P64 = P64[R1 + 7];
           _s3XTb::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s3XTi_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = sat_s3XTg_info;
           P64[Hp - 48] = _s3XTa::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = _s3XTb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42du_info" {
     block_c42du_info:
         const _c42du;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.107676437 UTC

[section ""data" . GHC.Read.$fReadWord8_$creadsPrec_closure" {
     GHC.Read.$fReadWord8_$creadsPrec_closure:
         const GHC.Read.$fReadWord8_$creadsPrec_info;
         const 0;
 },
 GHC.Read.$fReadWord8_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c42fa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42fe; else goto c42ff;
       c42fe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord8_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42ff: // global
           I64[Sp - 16] = block_c42f8_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s3XTk::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInt2_closure+1;
           P64[Sp - 8] = _s3XTk::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInt_$sreadNumber_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord8_$creadsPrec_info" {
     GHC.Read.$fReadWord8_$creadsPrec_info:
         const GHC.Read.$fReadWord8_$creadsPrec_entry;
         const 0;
         const 287762808846;
         const 8589934607;
         const S3Y0k_srt+2312;
 },
 _c42f8() //  [R1]
         { []
         }
     {offset
       c42f8: // global
           _s3XTk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c42fd_info;
           R3 = _s3XTk::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c42f8_info" {
     block_c42f8_info:
         const _c42f8;
         const 1;
         const 30;
 },
 _c42fd() //  [R1]
         { []
         }
     {offset
       c42fd: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Read.$fReadWord8_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42fd_info" {
     block_c42fd_info:
         const _c42fd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.121940431 UTC

[section ""data" . GHC.Read.$fReadWord17_closure" {
     GHC.Read.$fReadWord17_closure:
         const GHC.Read.$fReadWord17_info;
         const 0;
 },
 sat_s3XTp_entry() //  [R1, R2]
         { []
         }
     {offset
       c42fI: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadWord8_$creadsPrec_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XTp_info" {
     sat_s3XTp_info:
         const sat_s3XTp_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+2360;
 },
 GHC.Read.$fReadWord17_entry() //  [R2, R3]
         { []
         }
     {offset
       c42fO: // global
           _s3XTo::P64 = R3;
           _s3XTn::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c42fP; else goto c42fQ;
       c42fQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42fS; else goto c42fR;
       c42fS: // global
           HpAlloc = 16;
           goto c42fP;
       c42fP: // global
           R3 = _s3XTo::P64;
           R2 = _s3XTn::P64;
           R1 = GHC.Read.$fReadWord17_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42fR: // global
           I64[Hp - 8] = sat_s3XTp_info;
           P64[Hp] = _s3XTn::P64;
           I64[Sp - 8] = block_c42fL_info;
           R3 = _s3XTo::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord17_info" {
     GHC.Read.$fReadWord17_info:
         const GHC.Read.$fReadWord17_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+2360;
 },
 _c42fL() //  [R1]
         { []
         }
     {offset
       c42fL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42fV; else goto c42fU;
       c42fV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42fU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42fL_info" {
     block_c42fL_info:
         const _c42fL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.131474884 UTC

[section ""data" . GHC.Read.$fReadWord15_closure" {
     GHC.Read.$fReadWord15_closure:
         const GHC.Read.$fReadWord15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadWord15_entry() //  [R1]
         { []
         }
     {offset
       c42gh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c42gi; else goto c42gj;
       c42gi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42gj: // global
           (_c42ge::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42ge::I64 == 0) goto c42gg; else goto c42gf;
       c42gg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42gf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42ge::I64;
           R2 = GHC.Read.$fReadWord17_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord15_info" {
     GHC.Read.$fReadWord15_info:
         const GHC.Read.$fReadWord15_entry;
         const 0;
         const 72057598332895253;
         const S3Y0k_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.137942848 UTC

[section ""data" . GHC.Read.$fReadWord8_$creadList_closure" {
     GHC.Read.$fReadWord8_$creadList_closure:
         const GHC.Read.$fReadWord8_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadWord8_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c42gA: // global
           R3 = R2;
           R2 = GHC.Read.$fReadWord15_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord8_$creadList_info" {
     GHC.Read.$fReadWord8_$creadList_info:
         const GHC.Read.$fReadWord8_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.144507924 UTC

[section ""data" . GHC.Read.$fReadWord14_closure" {
     GHC.Read.$fReadWord14_closure:
         const GHC.Read.$fReadWord14_info;
         const 0;
 },
 GHC.Read.$fReadWord14_entry() //  [R2, R3]
         { []
         }
     {offset
       c42gO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c42gP; else goto c42gQ;
       c42gP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadWord14_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42gQ: // global
           I64[Sp - 8] = block_c42gL_info;
           R3 = R3;
           R2 = GHC.Read.$fReadWord8_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadWord14_info" {
     GHC.Read.$fReadWord14_info:
         const GHC.Read.$fReadWord14_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+2384;
 },
 _c42gL() //  [R1]
         { []
         }
     {offset
       c42gL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42gT; else goto c42gS;
       c42gT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42gS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42gL_info" {
     block_c42gL_info:
         const _c42gL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.152089948 UTC

[section ""data" . GHC.Read.$fReadWord8_closure" {
     GHC.Read.$fReadWord8_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadWord8_$creadsPrec_closure+2;
         const GHC.Read.$fReadWord8_$creadList_closure+1;
         const GHC.Read.$fReadWord17_closure+2;
         const GHC.Read.$fReadWord14_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.156754023 UTC

[section ""data" . GHC.Read.$fReadChar_$creadsPrec_closure" {
     GHC.Read.$fReadChar_$creadsPrec_closure:
         const GHC.Read.$fReadChar_$creadsPrec_info;
         const 0;
 },
 sat_s3XTx_entry() //  [R1]
         { []
         }
     {offset
       c42he: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42hf; else goto c42hg;
       c42hf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42hg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadChar7_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XTx_info" {
     sat_s3XTx_info:
         const sat_s3XTx_entry;
         const 1;
         const 12884901904;
         const S3Y0k_srt+2400;
 },
 GHC.Read.$fReadChar_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c42hh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42hl; else goto c42hk;
       c42hl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadChar_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42hk: // global
           I64[Hp - 16] = sat_s3XTx_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar_$creadsPrec_info" {
     GHC.Read.$fReadChar_$creadsPrec_info:
         const GHC.Read.$fReadChar_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S3Y0k_srt+2400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.165530345 UTC

[section ""data" . GHC.Read.$fReadChar5_closure" {
     GHC.Read.$fReadChar5_closure:
         const GHC.Read.$fReadChar5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadChar5_entry() //  [R1]
         { []
         }
     {offset
       c42hE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42hF; else goto c42hG;
       c42hF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42hG: // global
           (_c42hB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42hB::I64 == 0) goto c42hD; else goto c42hC;
       c42hD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42hC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42hB::I64;
           R2 = GHC.Read.$fReadChar6_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar5_info" {
     GHC.Read.$fReadChar5_info:
         const GHC.Read.$fReadChar5_entry;
         const 0;
         const 9223372041149743125;
         const S3Y0k_srt+2176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.175534505 UTC

[section ""data" . GHC.Read.$fReadChar2_closure" {
     GHC.Read.$fReadChar2_closure:
         const GHC.Read.$fReadChar2_info;
         const 0;
 },
 ds3_s3XTz_entry() //  [R1]
         { []
         }
     {offset
       c42hX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42hY; else goto c42hZ;
       c42hY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42hZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           R1 = GHC.Read.$fReadChar5_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds3_s3XTz_info" {
     ds3_s3XTz_info:
         const ds3_s3XTz_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2432;
 },
 sat_s3XTF_entry() //  [R1, R2]
         { []
         }
     {offset
       c42ip: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42iq; else goto c42ir;
       c42iq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42ir: // global
           I64[Sp - 16] = block_c42ii_info;
           _s3XTA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s3XTA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u42iy; else goto c42ij;
       u42iy: // global
           call _c42ii(R1) args: 0, res: 0, upd: 0;
       c42ij: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XTF_info" {
     sat_s3XTF_info:
         const sat_s3XTF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c42ii() //  [R1]
         { []
         }
     {offset
       c42ii: // global
           if (R1 & 7 == 2) goto c42in; else goto c42im;
       c42in: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c42im: // global
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42ii_info" {
     block_c42ii_info:
         const _c42ii;
         const 1;
         const 30;
 },
 sat_s3XTG_entry() //  [R1]
         { []
         }
     {offset
       c42iz: // global
           _s3XTG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c42iA; else goto c42iB;
       c42iB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42iD; else goto c42iC;
       c42iD: // global
           HpAlloc = 16;
           goto c42iA;
       c42iA: // global
           R1 = _s3XTG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42iC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XTG::P64;
           _s3XTA::P64 = P64[_s3XTG::P64 + 16];
           I64[Hp - 8] = sat_s3XTF_info;
           P64[Hp] = _s3XTA::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Text.Read.Lex.expect2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XTG_info" {
     sat_s3XTG_info:
         const sat_s3XTG_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2440;
 },
 section ""relreadonly" . u42jb_srtd" {
     u42jb_srtd:
         const S3Y0k_srt+936;
         const 189;
         const 1;
         const 0;
         const 1152921504606846976;
 },
 lvl116_s3XTB_entry() //  [R1]
         { []
         }
     {offset
       c42iE: // global
           _s3XTB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c42iF; else goto c42iG;
       c42iG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42iI; else goto c42iH;
       c42iI: // global
           HpAlloc = 24;
           goto c42iF;
       c42iF: // global
           R1 = _s3XTB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42iH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XTB::P64;
           _s3XTA::P64 = P64[_s3XTB::P64 + 16];
           I64[Hp - 16] = sat_s3XTG_info;
           P64[Hp] = _s3XTA::P64;
           R3 = Hp - 16;
           R2 = GHC.Read.$fReadChar3_closure+2;
           Sp = Sp - 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl116_s3XTB_info" {
     lvl116_s3XTB_info:
         const lvl116_s3XTB_entry;
         const 1;
         const 18446744069414584336;
         const u42jb_srtd;
 },
 k1_s3XTH_entry() //  [R1]
         { []
         }
     {offset
       c42iO: // global
           R1 = P64[R1 + 7] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . k1_s3XTH_info" {
     k1_s3XTH_info:
         const k1_s3XTH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s3XTK_entry() //  [R1, R2]
         { []
         }
     {offset
       c42iX: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call Text.ParserCombinators.ReadP.skipSpaces2_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XTK_info" {
     sat_s3XTK_info:
         const sat_s3XTK_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 section ""relreadonly" . u42jc_srtd" {
     u42jc_srtd:
         const S3Y0k_srt+936;
         const 189;
         const 1;
         const 0;
         const 1152921504606846976;
 },
 sat_s3XTN_entry() //  [R1, R2]
         { []
         }
     {offset
       c42j1: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c42j5; else goto c42j4;
       c42j5: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42j4: // global
           _s3XTz::P64 = P64[R1 + 7];
           I64[Hp - 96] = lvl116_s3XTB_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = k1_s3XTH_info;
           P64[Hp - 64] = Hp - 96;
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _s3XTz::P64;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s3XTK_info;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = Hp - 23;
           R3 = Hp - 56;
           R2 = Hp - 6;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XTN_info" {
     sat_s3XTN_info:
         const sat_s3XTN_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const u42jc_srtd;
 },
 section ""relreadonly" . u42jd_srtd" {
     u42jd_srtd:
         const S3Y0k_srt+936;
         const 190;
         const 1;
         const 0;
         const 4035225266123964416;
 },
 GHC.Read.$fReadChar2_entry() //  [R2]
         { []
         }
     {offset
       c42j6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c42ja; else goto c42j9;
       c42ja: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Read.$fReadChar2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42j9: // global
           I64[Hp - 32] = ds3_s3XTz_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s3XTN_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar2_info" {
     GHC.Read.$fReadChar2_info:
         const GHC.Read.$fReadChar2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u42jd_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.195151631 UTC

[section ""data" . GHC.Read.$fReadChar1_closure" {
     GHC.Read.$fReadChar1_closure:
         const GHC.Read.$fReadChar1_info;
         const 0;
 },
 GHC.Read.$fReadChar1_entry() //  [R2, R3]
         { []
         }
     {offset
       c42kg: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadChar2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar1_info" {
     GHC.Read.$fReadChar1_info:
         const GHC.Read.$fReadChar1_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S3Y0k_srt+2408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.199055735 UTC

[section ""data" . GHC.Read.$fReadChar8_closure" {
     GHC.Read.$fReadChar8_closure:
         const GHC.Read.$fReadChar8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadChar8_entry() //  [R1]
         { []
         }
     {offset
       c42kt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42ku; else goto c42kv;
       c42ku: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42kv: // global
           (_c42kq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42kq::I64 == 0) goto c42ks; else goto c42kr;
       c42ks: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42kr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42kq::I64;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = GHC.Read.$fRead()7_closure+1;
           R2 = GHC.Read.$fReadChar2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar8_info" {
     GHC.Read.$fReadChar8_info:
         const GHC.Read.$fReadChar8_entry;
         const 0;
         const 141733920789;
         const S3Y0k_srt+2408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.203190061 UTC

[section ""data" . GHC.Read.$fReadChar_$creadList_closure" {
     GHC.Read.$fReadChar_$creadList_closure:
         const GHC.Read.$fReadChar_$creadList_info;
         const 0;
 },
 GHC.Read.$fReadChar_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c42kJ: // global
           R3 = R2;
           R2 = GHC.Read.$fReadChar8_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadChar_$creadList_info" {
     GHC.Read.$fReadChar_$creadList_info:
         const GHC.Read.$fReadChar_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.20753121 UTC

[section ""data" . GHC.Read.$fReadChar_closure" {
     GHC.Read.$fReadChar_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fReadChar_$creadsPrec_closure+1;
         const GHC.Read.$fReadChar_$creadList_closure+1;
         const GHC.Read.$fReadChar6_closure+2;
         const GHC.Read.$fReadChar1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.210368961 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadListPrec1_closure" {
     GHC.Read.$fRead[]_$s$creadListPrec1_closure:
         const GHC.Read.$fRead[]_$s$creadListPrec1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadListPrec1_entry() //  [R1]
         { []
         }
     {offset
       c42kX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42kY; else goto c42kZ;
       c42kY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42kZ: // global
           (_c42kU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42kU::I64 == 0) goto c42kW; else goto c42kV;
       c42kW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42kV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42kU::I64;
           R2 = GHC.Read.$fReadChar1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadListPrec1_info" {
     GHC.Read.$fRead[]_$s$creadListPrec1_info:
         const GHC.Read.$fRead[]_$s$creadListPrec1_entry;
         const 0;
         const 12884901909;
         const S3Y0k_srt+2464;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.215135546 UTC

[section ""data" . GHC.Read.$fRead[]2_closure" {
     GHC.Read.$fRead[]2_closure:
         const GHC.Read.$fRead[]2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]2_entry() //  [R1]
         { []
         }
     {offset
       c42le: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42lf; else goto c42lg;
       c42lf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42lg: // global
           (_c42lb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42lb::I64 == 0) goto c42ld; else goto c42lc;
       c42ld: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42lc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42lb::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fRead[]_$s$creadListPrec1_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]2_info" {
     GHC.Read.$fRead[]2_info:
         const GHC.Read.$fRead[]2_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+2480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.219600393 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadList1_closure" {
     GHC.Read.$fRead[]_$s$creadList1_closure:
         const GHC.Read.$fRead[]_$s$creadList1_info;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadList1_entry() //  [R2]
         { []
         }
     {offset
       c42lu: // global
           R3 = R2;
           R2 = GHC.Read.$fRead[]2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadList1_info" {
     GHC.Read.$fRead[]_$s$creadList1_info:
         const GHC.Read.$fRead[]_$s$creadList1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2488;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.225639811 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadListPrec_closure" {
     GHC.Read.$fRead[]_$s$creadListPrec_closure:
         const GHC.Read.$fRead[]_$s$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c42lH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42lI; else goto c42lJ;
       c42lI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42lJ: // global
           (_c42lE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42lE::I64 == 0) goto c42lG; else goto c42lF;
       c42lG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42lF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42lE::I64;
           R2 = GHC.Read.$fReadInt_$creadListPrec_closure;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadListPrec_info" {
     GHC.Read.$fRead[]_$s$creadListPrec_info:
         const GHC.Read.$fRead[]_$s$creadListPrec_entry;
         const 0;
         const 1152921508901814293;
         const S3Y0k_srt+2248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.231333592 UTC

[section ""data" . GHC.Read.$fRead[]1_closure" {
     GHC.Read.$fRead[]1_closure:
         const GHC.Read.$fRead[]1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]1_entry() //  [R1]
         { []
         }
     {offset
       c42lY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42lZ; else goto c42m0;
       c42lZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42m0: // global
           (_c42lV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42lV::I64 == 0) goto c42lX; else goto c42lW;
       c42lX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42lW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42lV::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fRead[]_$s$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]1_info" {
     GHC.Read.$fRead[]1_info:
         const GHC.Read.$fRead[]1_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+2496;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.236056326 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadList_closure" {
     GHC.Read.$fRead[]_$s$creadList_closure:
         const GHC.Read.$fRead[]_$s$creadList_info;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadList_entry() //  [R2]
         { []
         }
     {offset
       c42me: // global
           R3 = R2;
           R2 = GHC.Read.$fRead[]1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadList_info" {
     GHC.Read.$fRead[]_$s$creadList_info:
         const GHC.Read.$fRead[]_$s$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2504;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.240263825 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadsPrec1_closure" {
     GHC.Read.$fRead[]_$s$creadsPrec1_closure:
         const GHC.Read.$fRead[]_$s$creadsPrec1_info;
         const 0;
 },
 sat_s3XTP_entry() //  [R1]
         { []
         }
     {offset
       c42mt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42mu; else goto c42mv;
       c42mu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42mv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadChar2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XTP_info" {
     sat_s3XTP_info:
         const sat_s3XTP_entry;
         const 1;
         const 141733920784;
         const S3Y0k_srt+2408;
 },
 GHC.Read.$fRead[]_$s$creadsPrec1_entry() //  [R2]
         { []
         }
     {offset
       c42mw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42mA; else goto c42mz;
       c42mA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$s$creadsPrec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42mz: // global
           I64[Hp - 16] = sat_s3XTP_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadsPrec1_info" {
     GHC.Read.$fRead[]_$s$creadsPrec1_info:
         const GHC.Read.$fRead[]_$s$creadsPrec1_entry;
         const 0;
         const 35326106009614;
         const 4294967301;
         const S3Y0k_srt+2408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.246768032 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadsPrec_closure" {
     GHC.Read.$fRead[]_$s$creadsPrec_closure:
         const GHC.Read.$fRead[]_$s$creadsPrec_info;
         const 0;
 },
 sat_s3XTR_entry() //  [R1]
         { []
         }
     {offset
       c42mV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42mW; else goto c42mX;
       c42mW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42mX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 16];
           R1 = GHC.Read.$fReadInt_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XTR_info" {
     sat_s3XTR_info:
         const sat_s3XTR_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2520;
 },
 GHC.Read.$fRead[]_$s$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c42mY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42n2; else goto c42n1;
       c42n2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$s$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42n1: // global
           I64[Hp - 16] = sat_s3XTR_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadsPrec_info" {
     GHC.Read.$fRead[]_$s$creadsPrec_info:
         const GHC.Read.$fRead[]_$s$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3Y0k_srt+2520;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.252666278 UTC

[section ""data" . GHC.Read.$fRead[]_$s$fRead[]_closure" {
     GHC.Read.$fRead[]_$s$fRead[]_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fRead[]_$s$creadsPrec_closure+1;
         const GHC.Read.$fRead[]_$s$creadList_closure+1;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.254499315 UTC

[section ""data" . GHC.Read.$fRead[]_$s$fRead[]1_closure" {
     GHC.Read.$fRead[]_$s$fRead[]1_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fRead[]_$s$creadsPrec1_closure+1;
         const GHC.Read.$fRead[]_$s$creadList1_closure+1;
         const GHC.Read.$fReadChar1_closure+2;
         const GHC.Read.$fRead[]_$s$creadListPrec1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.257217673 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadsPrec2_closure" {
     GHC.Read.$fRead[]_$s$creadsPrec2_closure:
         const GHC.Read.$fRead[]_$s$creadsPrec2_info;
         const 0;
 },
 sat_s3XTT_entry() //  [R1]
         { []
         }
     {offset
       c42np: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42nq; else goto c42nr;
       c42nq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42nr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 16];
           R1 = GHC.Read.$fRead[]_$s$creadListPrec1_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XTT_info" {
     sat_s3XTT_info:
         const sat_s3XTT_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2480;
 },
 GHC.Read.$fRead[]_$s$creadsPrec2_entry() //  [R2]
         { []
         }
     {offset
       c42ns: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42nw; else goto c42nv;
       c42nw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$s$creadsPrec2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42nv: // global
           I64[Hp - 16] = sat_s3XTT_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadsPrec2_info" {
     GHC.Read.$fRead[]_$s$creadsPrec2_info:
         const GHC.Read.$fRead[]_$s$creadsPrec2_entry;
         const 0;
         const 554050781198;
         const 4294967301;
         const S3Y0k_srt+2480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.263667025 UTC

[section ""data" . GHC.Read.$fRead[]_$creadsPrec_closure" {
     GHC.Read.$fRead[]_$creadsPrec_closure:
         const GHC.Read.$fRead[]_$creadsPrec_info;
 },
 sat_s3XTW_entry() //  [R1]
         { []
         }
     {offset
       c42nR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c42nS; else goto c42nT;
       c42nS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42nT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.readListPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XTW_info" {
     sat_s3XTW_info:
         const sat_s3XTW_entry;
         const 2;
         const 18;
 },
 GHC.Read.$fRead[]_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c42nU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c42nY; else goto c42nX;
       c42nY: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42nX: // global
           I64[Hp - 24] = sat_s3XTW_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$creadsPrec_info" {
     GHC.Read.$fRead[]_$creadsPrec_info:
         const GHC.Read.$fRead[]_$creadsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.269721738 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadListPrec2_closure" {
     GHC.Read.$fRead[]_$s$creadListPrec2_closure:
         const GHC.Read.$fRead[]_$s$creadListPrec2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadListPrec2_entry() //  [R1]
         { []
         }
     {offset
       c42ok: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42ol; else goto c42om;
       c42ol: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42om: // global
           (_c42oh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42oh::I64 == 0) goto c42oj; else goto c42oi;
       c42oj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42oi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42oh::I64;
           R2 = GHC.Read.$fRead[]_$s$creadListPrec1_closure;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadListPrec2_info" {
     GHC.Read.$fRead[]_$s$creadListPrec2_info:
         const GHC.Read.$fRead[]_$s$creadListPrec2_entry;
         const 0;
         const 12884901909;
         const S3Y0k_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.274360468 UTC

[section ""data" . GHC.Read.$fRead[]_$creadListPrec_closure" {
     GHC.Read.$fRead[]_$creadListPrec_closure:
         const GHC.Read.$fRead[]_$creadListPrec_info;
         const 0;
 },
 sat_s3XTY_entry() //  [R1]
         { []
         }
     {offset
       c42oD: // global
           R2 = P64[R1 + 16];
           call GHC.Read.readListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XTY_info" {
     sat_s3XTY_info:
         const sat_s3XTY_entry;
         const 1;
         const 16;
 },
 GHC.Read.$fRead[]_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c42oG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42oK; else goto c42oJ;
       c42oK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42oJ: // global
           I64[Hp - 16] = sat_s3XTY_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$creadListPrec_info" {
     GHC.Read.$fRead[]_$creadListPrec_info:
         const GHC.Read.$fRead[]_$creadListPrec_entry;
         const 0;
         const 2203318222862;
         const 4294967301;
         const S3Y0k_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.280545123 UTC

[section ""data" . GHC.Read.$fRead[]3_closure" {
     GHC.Read.$fRead[]3_closure:
         const GHC.Read.$fRead[]3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fRead[]3_entry() //  [R1]
         { []
         }
     {offset
       c42oZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42p0; else goto c42p1;
       c42p0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42p1: // global
           (_c42oW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42oW::I64 == 0) goto c42oY; else goto c42oX;
       c42oY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42oX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42oW::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure+1;
           R1 = GHC.Read.$fRead[]_$s$creadListPrec2_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]3_info" {
     GHC.Read.$fRead[]3_info:
         const GHC.Read.$fRead[]3_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+2552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.285093808 UTC

[section ""data" . GHC.Read.$fRead[]_$s$creadList2_closure" {
     GHC.Read.$fRead[]_$s$creadList2_closure:
         const GHC.Read.$fRead[]_$s$creadList2_info;
         const 0;
 },
 GHC.Read.$fRead[]_$s$creadList2_entry() //  [R2]
         { []
         }
     {offset
       c42pf: // global
           R3 = R2;
           R2 = GHC.Read.$fRead[]3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$s$creadList2_info" {
     GHC.Read.$fRead[]_$s$creadList2_info:
         const GHC.Read.$fRead[]_$s$creadList2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2560;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.289306881 UTC

[section ""data" . GHC.Read.$fRead[]_$s$fRead[]2_closure" {
     GHC.Read.$fRead[]_$s$fRead[]2_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Read.$fRead[]_$s$creadsPrec2_closure+1;
         const GHC.Read.$fRead[]_$s$creadList2_closure+1;
         const GHC.Read.$fRead[]_$s$creadListPrec1_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.292600499 UTC

[section ""data" . GHC.Read.$fRead[]_$creadList_closure" {
     GHC.Read.$fRead[]_$creadList_closure:
         const GHC.Read.$fRead[]_$creadList_info;
         const 0;
 },
 sat_s3XU0_entry() //  [R1]
         { []
         }
     {offset
       c42pz: // global
           R2 = P64[R1 + 16];
           call GHC.Read.readListPrec_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XU0_info" {
     sat_s3XU0_info:
         const sat_s3XU0_entry;
         const 1;
         const 16;
 },
 sat_s3XU1_entry() //  [R1]
         { []
         }
     {offset
       c42pC: // global
           _s3XU1::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c42pD; else goto c42pE;
       c42pE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42pG; else goto c42pF;
       c42pG: // global
           HpAlloc = 24;
           goto c42pD;
       c42pD: // global
           R1 = _s3XU1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42pF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XU1::P64;
           _s3XTZ::P64 = P64[_s3XU1::P64 + 16];
           I64[Hp - 16] = sat_s3XU0_info;
           P64[Hp] = _s3XTZ::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XU1_info" {
     sat_s3XU1_info:
         const sat_s3XU1_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2472;
 },
 GHC.Read.$fRead[]_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c42pH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42pL; else goto c42pK;
       c42pL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42pK: // global
           I64[Hp - 16] = sat_s3XU1_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_$creadList_info" {
     GHC.Read.$fRead[]_$creadList_info:
         const GHC.Read.$fRead[]_$creadList_entry;
         const 0;
         const 17596481011726;
         const 4294967301;
         const S3Y0k_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.302107835 UTC

[section ""data" . GHC.Read.$fRead[]_closure" {
     GHC.Read.$fRead[]_closure:
         const GHC.Read.$fRead[]_info;
         const 0;
 },
 sat_s3XU6_entry() //  [R1]
         { []
         }
     {offset
       c42qd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42qe; else goto c42qf;
       c42qe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42qf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead[]_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XU6_info" {
     sat_s3XU6_info:
         const sat_s3XU6_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2544;
 },
 sat_s3XU5_entry() //  [R1]
         { []
         }
     {offset
       c42qk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42ql; else goto c42qm;
       c42ql: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42qm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.readListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XU5_info" {
     sat_s3XU5_info:
         const sat_s3XU5_entry;
         const 1;
         const 16;
 },
 sat_s3XU4_entry() //  [R1]
         { []
         }
     {offset
       c42qr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42qs; else goto c42qt;
       c42qs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42qt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fRead[]_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XU4_info" {
     sat_s3XU4_info:
         const sat_s3XU4_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2568;
 },
 sat_s3XU3_entry() //  [R1, R2]
         { []
         }
     {offset
       c42qz: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fRead[]_$creadsPrec_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XU3_info" {
     sat_s3XU3_info:
         const sat_s3XU3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Read.$fRead[]_entry() //  [R2]
         { []
         }
     {offset
       c42qD: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c42qH; else goto c42qG;
       c42qH: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = GHC.Read.$fRead[]_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42qG: // global
           I64[Hp - 120] = sat_s3XU6_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s3XU5_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s3XU4_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3XU3_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 96;
           P64[Hp] = Hp - 120;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fRead[]_info" {
     GHC.Read.$fRead[]_info:
         const GHC.Read.$fRead[]_entry;
         const 0;
         const 107374182414;
         const 4294967301;
         const S3Y0k_srt+2544;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.312454146 UTC

[section ""data" . GHC.Read.$fReadNonEmpty5_closure" {
     GHC.Read.$fReadNonEmpty5_closure:
         const GHC.Types.I#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.31433508 UTC

[section ""cstring" . GHC.Read.$fReadNonEmpty4_bytes" {
     GHC.Read.$fReadNonEmpty4_bytes:
         I8[] [58,124]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.316780628 UTC

[section ""data" . GHC.Read.$fReadNonEmpty3_closure" {
     GHC.Read.$fReadNonEmpty3_closure:
         const GHC.Read.$fReadNonEmpty3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadNonEmpty3_entry() //  [R1]
         { []
         }
     {offset
       c42rm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42rn; else goto c42ro;
       c42rn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42ro: // global
           (_c42rj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42rj::I64 == 0) goto c42rl; else goto c42rk;
       c42rl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42rk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42rj::I64;
           R2 = GHC.Read.$fReadNonEmpty4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty3_info" {
     GHC.Read.$fReadNonEmpty3_info:
         const GHC.Read.$fReadNonEmpty3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.320554393 UTC

[section ""data" . GHC.Read.$fReadNonEmpty2_closure" {
     GHC.Read.$fReadNonEmpty2_closure:
         const Text.Read.Lex.Symbol_con_info;
         const GHC.Read.$fReadNonEmpty3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.327772537 UTC

[section ""data" . GHC.Read.$fReadNonEmpty1_closure" {
     GHC.Read.$fReadNonEmpty1_closure:
         const GHC.Read.$fReadNonEmpty1_info;
         const 0;
 },
 ds1_s3XUa_entry() //  [R1]
         { []
         }
     {offset
       c42rG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c42rH; else goto c42rI;
       c42rH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42rI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Read.$fReadNonEmpty5_closure+1;
           Sp = Sp - 32;
           call GHC.Read.readPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3XUa_info" {
     ds1_s3XUa_info:
         const ds1_s3XUa_entry;
         const 1;
         const 16;
 },
 sat_s3XUk_entry() //  [R1, R2]
         { []
         }
     {offset
       c42sd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42sh; else goto c42sg;
       c42sh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42sg: // global
           _s3XUc::P64 = P64[R1 + 7];
           _s3XUg::P64 = P64[R1 + 15];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _s3XUg::P64;
           P64[Hp] = R2;
           R2 = Hp - 15;
           R1 = _s3XUc::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUk_info" {
     sat_s3XUk_info:
         const sat_s3XUk_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s3XUl_entry() //  [R1, R2]
         { []
         }
     {offset
       c42si: // global
           _s3XUh::P64 = R2;
           _s3XUl::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c42sj; else goto c42sk;
       c42sk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42sm; else goto c42sl;
       c42sm: // global
           HpAlloc = 24;
           goto c42sj;
       c42sj: // global
           R2 = _s3XUh::P64;
           R1 = _s3XUl::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42sl: // global
           _s3XU7::P64 = P64[_s3XUl::P64 + 7];
           _s3XUc::P64 = P64[_s3XUl::P64 + 15];
           _s3XUg::P64 = P64[_s3XUl::P64 + 23];
           I64[Hp - 16] = sat_s3XUk_info;
           P64[Hp - 8] = _s3XUc::P64;
           P64[Hp] = _s3XUg::P64;
           R2 = _s3XU7::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = GHC.Read.$fReadNonEmpty5_closure+1;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Read.readListPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUl_info" {
     sat_s3XUl_info:
         const sat_s3XUl_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s3XUo_entry() //  [R1, R2]
         { []
         }
     {offset
       c42sq: // global
           _s3XUg::P64 = R2;
           _s3XUo::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c42sr; else goto c42ss;
       c42ss: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c42su; else goto c42st;
       c42su: // global
           HpAlloc = 32;
           goto c42sr;
       c42sr: // global
           R2 = _s3XUg::P64;
           R1 = _s3XUo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42st: // global
           _s3XU7::P64 = P64[_s3XUo::P64 + 7];
           _s3XUc::P64 = P64[_s3XUo::P64 + 15];
           I64[Hp - 24] = sat_s3XUl_info;
           P64[Hp - 16] = _s3XU7::P64;
           P64[Hp - 8] = _s3XUc::P64;
           P64[Hp] = _s3XUg::P64;
           I64[Sp - 8] = block_c42sn_info;
           R3 = Hp - 23;
           R2 = GHC.Read.$fReadNonEmpty2_closure+5;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUo_info" {
     sat_s3XUo_info:
         const sat_s3XUo_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S3Y0k_srt+2584;
 },
 _c42sn() //  [R1]
         { []
         }
     {offset
       c42sn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42sx; else goto c42sw;
       c42sx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42sw: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42sn_info" {
     block_c42sn_info:
         const _c42sn;
         const 0;
         const 30;
 },
 sat_s3XUp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42sy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c42sz; else goto c42sA;
       c42sz: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42sA: // global
           I64[Sp - 32] = block_c42rO_info;
           _s3XU7::P64 = P64[R1 + 6];
           _s3XUa::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s3XU7::P64;
           P64[Sp - 16] = _s3XUa::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u42sH; else goto c42rP;
       u42sH: // global
           call _c42rO(R1) args: 0, res: 0, upd: 0;
       c42rP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUp_info" {
     sat_s3XUp_info:
         const sat_s3XUp_entry;
         const 2;
         const 12884901899;
         const 8589934607;
         const S3Y0k_srt+2584;
 },
 _c42rO() //  [R1]
         { []
         }
     {offset
       c42rO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42sD; else goto c42sC;
       c42sD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42sC: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 5)) goto c42sF; else goto c42sG;
       c42sF: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c42sG: // global
           I64[Hp - 16] = sat_s3XUo_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 15;
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42rO_info" {
     block_c42rO_info:
         const _c42rO;
         const 3;
         const 12884901918;
         const S3Y0k_srt+2584;
 },
 GHC.Read.$fReadNonEmpty1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c42sI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c42sM; else goto c42sL;
       c42sM: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c42sL: // global
           I64[Hp - 40] = ds1_s3XUa_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s3XUp_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 14;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty1_info" {
     GHC.Read.$fReadNonEmpty1_info:
         const GHC.Read.$fReadNonEmpty1_entry;
         const 0;
         const 126100793861341198;
         const 12884901911;
         const S3Y0k_srt+2408;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.345884124 UTC

[section ""data" . GHC.Read.$fReadNonEmpty_$creadsPrec_closure" {
     GHC.Read.$fReadNonEmpty_$creadsPrec_closure:
         const GHC.Read.$fReadNonEmpty_$creadsPrec_info;
         const 0;
 },
 sat_s3XUs_entry() //  [R1]
         { []
         }
     {offset
       c42tK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42tL; else goto c42tM;
       c42tL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42tM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadNonEmpty1_entry(R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XUs_info" {
     sat_s3XUs_info:
         const sat_s3XUs_entry;
         const 2;
         const 4294967314;
         const S3Y0k_srt+2600;
 },
 GHC.Read.$fReadNonEmpty_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c42tN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c42tR; else goto c42tQ;
       c42tR: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42tQ: // global
           I64[Hp - 24] = sat_s3XUs_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty_$creadsPrec_info" {
     GHC.Read.$fReadNonEmpty_$creadsPrec_info:
         const GHC.Read.$fReadNonEmpty_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S3Y0k_srt+2600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.352124136 UTC

[section ""data" . GHC.Read.$fReadNonEmpty_$creadListPrec_closure" {
     GHC.Read.$fReadNonEmpty_$creadListPrec_closure:
         const GHC.Read.$fReadNonEmpty_$creadListPrec_info;
         const 0;
 },
 sat_s3XUu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42ud: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadNonEmpty1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUu_info" {
     sat_s3XUu_info:
         const sat_s3XUu_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3Y0k_srt+2600;
 },
 GHC.Read.$fReadNonEmpty_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c42ug: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42uk; else goto c42uj;
       c42uk: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42uj: // global
           I64[Hp - 8] = sat_s3XUu_info;
           P64[Hp] = R2;
           R2 = Hp - 6;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty_$creadListPrec_info" {
     GHC.Read.$fReadNonEmpty_$creadListPrec_info:
         const GHC.Read.$fReadNonEmpty_$creadListPrec_entry;
         const 0;
         const 1407379178520590;
         const 4294967301;
         const S3Y0k_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.35850245 UTC

[section ""data" . GHC.Read.$fReadNonEmpty_$creadList_closure" {
     GHC.Read.$fReadNonEmpty_$creadList_closure:
         const GHC.Read.$fReadNonEmpty_$creadList_info;
         const 0;
 },
 sat_s3XUw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42uG: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadNonEmpty1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUw_info" {
     sat_s3XUw_info:
         const sat_s3XUw_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3Y0k_srt+2600;
 },
 sat_s3XUx_entry() //  [R1]
         { []
         }
     {offset
       c42uJ: // global
           _s3XUx::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c42uK; else goto c42uL;
       c42uL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42uN; else goto c42uM;
       c42uN: // global
           HpAlloc = 16;
           goto c42uK;
       c42uK: // global
           R1 = _s3XUx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42uM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XUx::P64;
           _s3XUv::P64 = P64[_s3XUx::P64 + 16];
           I64[Hp - 8] = sat_s3XUw_info;
           P64[Hp] = _s3XUv::P64;
           R2 = Hp - 6;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XUx_info" {
     sat_s3XUx_info:
         const sat_s3XUx_entry;
         const 1;
         const 281479271677968;
         const S3Y0k_srt+2472;
 },
 GHC.Read.$fReadNonEmpty_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c42uO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42uS; else goto c42uR;
       c42uS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42uR: // global
           I64[Hp - 16] = sat_s3XUx_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty_$creadList_info" {
     GHC.Read.$fReadNonEmpty_$creadList_info:
         const GHC.Read.$fReadNonEmpty_$creadList_entry;
         const 0;
         const 2533279085363214;
         const 4294967301;
         const S3Y0k_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.367564351 UTC

[section ""data" . GHC.Read.$fReadNonEmpty_closure" {
     GHC.Read.$fReadNonEmpty_closure:
         const GHC.Read.$fReadNonEmpty_info;
         const 0;
 },
 sat_s3XUC_entry() //  [R1]
         { []
         }
     {offset
       c42vk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42vl; else goto c42vm;
       c42vl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42vm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadNonEmpty_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XUC_info" {
     sat_s3XUC_info:
         const sat_s3XUC_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2616;
 },
 sat_s3XUB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42vs: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadNonEmpty1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUB_info" {
     sat_s3XUB_info:
         const sat_s3XUB_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S3Y0k_srt+2600;
 },
 sat_s3XUA_entry() //  [R1]
         { []
         }
     {offset
       c42vz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42vA; else goto c42vB;
       c42vA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42vB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadNonEmpty_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XUA_info" {
     sat_s3XUA_info:
         const sat_s3XUA_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2624;
 },
 sat_s3XUz_entry() //  [R1, R2]
         { []
         }
     {offset
       c42vH: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadNonEmpty_$creadsPrec_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUz_info" {
     sat_s3XUz_info:
         const sat_s3XUz_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S3Y0k_srt+2608;
 },
 GHC.Read.$fReadNonEmpty_entry() //  [R2]
         { []
         }
     {offset
       c42vL: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c42vP; else goto c42vO;
       c42vP: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = GHC.Read.$fReadNonEmpty_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42vO: // global
           I64[Hp - 112] = sat_s3XUC_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s3XUB_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s3XUA_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s3XUz_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadNonEmpty_info" {
     GHC.Read.$fReadNonEmpty_info:
         const GHC.Read.$fReadNonEmpty_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S3Y0k_srt+2600;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.3782406 UTC

[section ""cstring" . GHC.Read.$fReadArray4_bytes" {
     GHC.Read.$fReadArray4_bytes:
         I8[] [97,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.380712022 UTC

[section ""data" . GHC.Read.$fReadArray3_closure" {
     GHC.Read.$fReadArray3_closure:
         const GHC.Read.$fReadArray3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.$fReadArray3_entry() //  [R1]
         { []
         }
     {offset
       c42wr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42ws; else goto c42wt;
       c42ws: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42wt: // global
           (_c42wo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42wo::I64 == 0) goto c42wq; else goto c42wp;
       c42wq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42wp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42wo::I64;
           R2 = GHC.Read.$fReadArray4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray3_info" {
     GHC.Read.$fReadArray3_info:
         const GHC.Read.$fReadArray3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.384756968 UTC

[section ""data" . GHC.Read.$fReadArray_lexeme_closure" {
     GHC.Read.$fReadArray_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.Read.$fReadArray3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.391436134 UTC

[section ""data" . GHC.Read.$fReadArray1_closure" {
     GHC.Read.$fReadArray1_closure:
         const GHC.Read.$fReadArray1_info;
         const 0;
 },
 lvl2_s3XUI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42wM: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_s3XUI_info" {
     lvl2_s3XUI_info:
         const lvl2_s3XUI_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S3Y0k_srt+2640;
 },
 sat_s3XUR_entry() //  [R1]
         { []
         }
     {offset
       c42xm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42xn; else goto c42xo;
       c42xn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42xo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.array_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XUR_info" {
     sat_s3XUR_info:
         const sat_s3XUR_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+2648;
 },
 sat_s3XUS_entry() //  [R1, R2]
         { []
         }
     {offset
       c42xp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c42xt; else goto c42xs;
       c42xt: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42xs: // global
           _s3XUD::P64 = P64[R1 + 7];
           _s3XUK::P64 = P64[R1 + 15];
           _s3XUP::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_s3XUR_info;
           P64[Hp - 16] = _s3XUD::P64;
           P64[Hp - 8] = _s3XUP::P64;
           P64[Hp] = R2;
           R2 = Hp - 32;
           R1 = _s3XUK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUS_info" {
     sat_s3XUS_info:
         const sat_s3XUS_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+2648;
 },
 sat_s3XUT_entry() //  [R1, R2]
         { []
         }
     {offset
       c42xu: // global
           _s3XUP::P64 = R2;
           _s3XUT::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c42xv; else goto c42xw;
       c42xw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c42xy; else goto c42xx;
       c42xy: // global
           HpAlloc = 32;
           goto c42xv;
       c42xv: // global
           R2 = _s3XUP::P64;
           R1 = _s3XUT::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42xx: // global
           _s3XUD::P64 = P64[_s3XUT::P64 + 7];
           _s3XUI::P64 = P64[_s3XUT::P64 + 15];
           _s3XUK::P64 = P64[_s3XUT::P64 + 23];
           I64[Hp - 24] = sat_s3XUS_info;
           P64[Hp - 16] = _s3XUD::P64;
           P64[Hp - 8] = _s3XUK::P64;
           P64[Hp] = _s3XUP::P64;
           R2 = _s3XUI::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = GHC.Read.$fReadArray2_closure+1;
           P64[Sp - 8] = Hp - 23;
           Sp = Sp - 24;
           call GHC.Read.list_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUT_info" {
     sat_s3XUT_info:
         const sat_s3XUT_entry;
         const 3;
         const 18014402804449288;
         const 4294967301;
         const S3Y0k_srt+2472;
 },
 sat_s3XUU_entry() //  [R1, R2]
         { []
         }
     {offset
       c42xz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c42xD; else goto c42xC;
       c42xD: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42xC: // global
           _s3XUD::P64 = P64[R1 + 7];
           _s3XUE::P64 = P64[R1 + 15];
           _s3XUI::P64 = P64[R1 + 23];
           _s3XUK::P64 = P64[R1 + 31];
           I64[Hp - 24] = sat_s3XUT_info;
           P64[Hp - 16] = _s3XUD::P64;
           P64[Hp - 8] = _s3XUI::P64;
           P64[Hp] = _s3XUK::P64;
           R5 = Hp - 23;
           R4 = GHC.Read.$fReadArray2_closure+1;
           R3 = _s3XUE::P64;
           R2 = _s3XUE::P64;
           call GHC.Read.$fRead(,)1_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUU_info" {
     sat_s3XUU_info:
         const sat_s3XUU_entry;
         const 4;
         const 27021602059190280;
         const 4294967301;
         const S3Y0k_srt+2472;
 },
 sat_s3XUX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42xE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c42xF; else goto c42xG;
       c42xF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c42xG: // global
           I64[Sp - 40] = block_c42wU_info;
           _s3XUD::P64 = P64[R1 + 6];
           _s3XUE::P64 = P64[R1 + 14];
           _s3XUI::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 32] = _s3XUD::P64;
           P64[Sp - 24] = _s3XUE::P64;
           P64[Sp - 16] = _s3XUI::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u42xT; else goto c42wV;
       u42xT: // global
           call _c42wU(R1) args: 0, res: 0, upd: 0;
       c42wV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XUX_info" {
     sat_s3XUX_info:
         const sat_s3XUX_entry;
         const 3;
         const 63191136566509576;
         const 8589934607;
         const S3Y0k_srt+2472;
 },
 _c42wU() //  [R1]
         { []
         }
     {offset
       c42wU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c42xJ; else goto c42xI;
       c42xJ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42xI: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c42xL; else goto c42xP;
       c42xL: // global
           Hp = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c42xP: // global
           I64[Hp - 32] = sat_s3XUU_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_c42xM_info;
           R3 = Hp - 31;
           R2 = GHC.Read.$fReadArray_lexeme_closure+4;
           Sp = Sp + 32;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c42wU_info" {
     block_c42wU_info:
         const _c42wU;
         const 4;
         const 63191136566509598;
         const S3Y0k_srt+2472;
 },
 _c42xM() //  [R1]
         { []
         }
     {offset
       c42xM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42xS; else goto c42xR;
       c42xS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42xR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42xM_info" {
     block_c42xM_info:
         const _c42xM;
         const 0;
         const 30;
 },
 section ""relreadonly" . u42xZ_srtd" {
     u42xZ_srtd:
         const S3Y0k_srt+2408;
         const 33;
         const 8061452545;
 },
 GHC.Read.$fReadArray1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c42xU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c42xY; else goto c42xX;
       c42xY: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c42xX: // global
           I64[Hp - 48] = lvl2_s3XUI_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = sat_s3XUX_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 46;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 22;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray1_info" {
     GHC.Read.$fReadArray1_info:
         const GHC.Read.$fReadArray1_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u42xZ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.413708295 UTC

[section ""data" . GHC.Read.$fReadArray_$creadsPrec_closure" {
     GHC.Read.$fReadArray_$creadsPrec_closure:
         const GHC.Read.$fReadArray_$creadsPrec_info;
         const 0;
 },
 sat_s3XV2_entry() //  [R1]
         { []
         }
     {offset
       c42z0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42z1; else goto c42z2;
       c42z1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42z2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadArray1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XV2_info" {
     sat_s3XV2_info:
         const sat_s3XV2_entry;
         const 4;
         const 4294967311;
         const S3Y0k_srt+2664;
 },
 GHC.Read.$fReadArray_$creadsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c42z3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c42z7; else goto c42z6;
       c42z7: // global
           HpAlloc = 48;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray_$creadsPrec_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c42z6: // global
           I64[Hp - 40] = sat_s3XV2_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 40;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray_$creadsPrec_info" {
     GHC.Read.$fReadArray_$creadsPrec_info:
         const GHC.Read.$fReadArray_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S3Y0k_srt+2664;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.420920319 UTC

[section ""data" . GHC.Read.$fReadArray_$creadListPrec_closure" {
     GHC.Read.$fReadArray_$creadListPrec_closure:
         const GHC.Read.$fReadArray_$creadListPrec_info;
         const 0;
 },
 sat_s3XV6_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42zt: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadArray1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XV6_info" {
     sat_s3XV6_info:
         const sat_s3XV6_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+2664;
 },
 GHC.Read.$fReadArray_$creadListPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c42zw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c42zA; else goto c42zz;
       c42zA: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray_$creadListPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c42zz: // global
           I64[Hp - 24] = sat_s3XV6_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 22;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray_$creadListPrec_info" {
     GHC.Read.$fReadArray_$creadListPrec_info:
         const GHC.Read.$fReadArray_$creadListPrec_entry;
         const 0;
         const 360287974484606990;
         const 12884901911;
         const S3Y0k_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.428960074 UTC

[section ""data" . GHC.Read.$fReadArray_$creadList_closure" {
     GHC.Read.$fReadArray_$creadList_closure:
         const GHC.Read.$fReadArray_$creadList_info;
         const 0;
 },
 sat_s3XVa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42zW: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadArray1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XVa_info" {
     sat_s3XVa_info:
         const sat_s3XVa_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+2664;
 },
 sat_s3XVb_entry() //  [R1]
         { []
         }
     {offset
       c42zZ: // global
           _s3XVb::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c42A0; else goto c42A1;
       c42A1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c42A3; else goto c42A2;
       c42A3: // global
           HpAlloc = 32;
           goto c42A0;
       c42A0: // global
           R1 = _s3XVb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42A2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3XVb::P64;
           _s3XV7::P64 = P64[_s3XVb::P64 + 16];
           _s3XV8::P64 = P64[_s3XVb::P64 + 24];
           _s3XV9::P64 = P64[_s3XVb::P64 + 32];
           I64[Hp - 24] = sat_s3XVa_info;
           P64[Hp - 16] = _s3XV7::P64;
           P64[Hp - 8] = _s3XV8::P64;
           P64[Hp] = _s3XV9::P64;
           R2 = Hp - 22;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XVb_info" {
     sat_s3XVb_info:
         const sat_s3XVb_entry;
         const 3;
         const 72057598332895247;
         const S3Y0k_srt+2472;
 },
 GHC.Read.$fReadArray_$creadList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c42A4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c42A8; else goto c42A7;
       c42A8: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray_$creadList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c42A7: // global
           I64[Hp - 32] = sat_s3XVb_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = Hp - 32;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray_$creadList_info" {
     GHC.Read.$fReadArray_$creadList_info:
         const GHC.Read.$fReadArray_$creadList_entry;
         const 0;
         const 648518350636318734;
         const 12884901911;
         const S3Y0k_srt+2472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.440718934 UTC

[section ""data" . GHC.Read.$fReadArray_closure" {
     GHC.Read.$fReadArray_closure:
         const GHC.Read.$fReadArray_info;
         const 0;
 },
 sat_s3XVi_entry() //  [R1]
         { []
         }
     {offset
       c42AA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42AB; else goto c42AC;
       c42AB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42AC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadArray_$creadListPrec_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XVi_info" {
     sat_s3XVi_info:
         const sat_s3XVi_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+2680;
 },
 sat_s3XVh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c42AI: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Read.$fReadArray1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XVh_info" {
     sat_s3XVh_info:
         const sat_s3XVh_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S3Y0k_srt+2664;
 },
 sat_s3XVg_entry() //  [R1]
         { []
         }
     {offset
       c42AP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42AQ; else goto c42AR;
       c42AQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42AR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.$fReadArray_$creadList_entry(R4,
                                                      R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XVg_info" {
     sat_s3XVg_info:
         const sat_s3XVg_entry;
         const 3;
         const 4294967311;
         const S3Y0k_srt+2688;
 },
 sat_s3XVf_entry() //  [R1, R2]
         { []
         }
     {offset
       c42AX: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Read.$fReadArray_$creadsPrec_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s3XVf_info" {
     sat_s3XVf_info:
         const sat_s3XVf_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S3Y0k_srt+2672;
 },
 GHC.Read.$fReadArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c42B1: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c42B5; else goto c42B4;
       c42B5: // global
           HpAlloc = 184;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.$fReadArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c42B4: // global
           I64[Hp - 176] = sat_s3XVi_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           P64[Hp - 144] = R4;
           I64[Hp - 136] = sat_s3XVh_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           P64[Hp - 112] = R4;
           I64[Hp - 104] = sat_s3XVg_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           I64[Hp - 64] = sat_s3XVf_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           P64[Hp - 8] = Hp - 134;
           P64[Hp] = Hp - 176;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.$fReadArray_info" {
     GHC.Read.$fReadArray_info:
         const GHC.Read.$fReadArray_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const S3Y0k_srt+2664;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.45732807 UTC

[section ""data" . lvl1_r3N5M_closure" {
     lvl1_r3N5M_closure:
         const lvl1_r3N5M_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r3N5M_entry() //  [R1]
         { []
         }
     {offset
       c42BG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42BH; else goto c42BI;
       c42BH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42BI: // global
           (_c42BD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42BD::I64 == 0) goto c42BF; else goto c42BE;
       c42BF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42BE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42BD::I64;
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Read.lexLitChar_removeNulls_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r3N5M_info" {
     lvl1_r3N5M_info:
         const lvl1_r3N5M_entry;
         const 0;
         const 4294967317;
         const S3Y0k_srt+2704;
 },
 section ""data" . GHC.Read.lexLitChar_removeNulls_closure" {
     GHC.Read.lexLitChar_removeNulls_closure:
         const GHC.Read.lexLitChar_removeNulls_info;
         const 0;
 },
 sat_s3XVq_entry() //  [R1]
         { []
         }
     {offset
       c42C4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42C5; else goto c42C6;
       c42C5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42C6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.lexLitChar_removeNulls_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XVq_info" {
     sat_s3XVq_info:
         const sat_s3XVq_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2704;
 },
 sat_s3XVx_entry() //  [R1]
         { []
         }
     {offset
       c42Cp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42Cq; else goto c42Cr;
       c42Cq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42Cr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.lexLitChar_removeNulls_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XVx_info" {
     sat_s3XVx_info:
         const sat_s3XVx_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2704;
 },
 GHC.Read.lexLitChar_removeNulls_entry() //  [R2]
         { []
         }
     {offset
       c42Cw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c42Cx; else goto u42D0;
       c42Cx: // global
           R2 = R2;
           R1 = GHC.Read.lexLitChar_removeNulls_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u42D0: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c42BK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar_removeNulls_info" {
     GHC.Read.lexLitChar_removeNulls_info:
         const GHC.Read.lexLitChar_removeNulls_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S3Y0k_srt+2704;
 },
 _c42BK() //  []
         { []
         }
     {offset
       c42BK: // global
           _s3XVj::P64 = P64[Sp];
           I64[Sp] = block_c42BN_info;
           R1 = _s3XVj::P64;
           if (R1 & 7 != 0) goto u42D2; else goto c42BO;
       u42D2: // global
           call _c42BN(R1) args: 0, res: 0, upd: 0;
       c42BO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c42BN() //  [R1]
         { []
         }
     {offset
       c42BN: // global
           if (R1 & 7 == 1) goto c42Ct; else goto c42Cu;
       c42Ct: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c42Cu: // global
           I64[Sp - 8] = block_c42BT_info;
           _s3XVm::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3XVm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u42D3; else goto c42BU;
       u42D3: // global
           call _c42BT(R1) args: 0, res: 0, upd: 0;
       c42BU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c42BN_info" {
     block_c42BN_info:
         const _c42BN;
         const 0;
         const 12884901918;
         const S3Y0k_srt+2704;
 },
 _c42BT() //  [R1]
         { []
         }
     {offset
       c42BT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c42CE; else goto c42CD;
       c42CE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42CD: // global
           _s3XVm::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 92) goto c42CI; else goto c42CH;
       c42CI: // global
           Hp = Hp - 48;
           I64[Sp] = block_c42C8_info;
           _s3XVn::P64 = R1;
           R1 = _s3XVm::P64;
           P64[Sp + 8] = _s3XVn::P64;
           if (R1 & 7 != 0) goto u42D4; else goto c42C9;
       u42D4: // global
           call _c42C8(R1) args: 0, res: 0, upd: 0;
       c42C9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c42CH: // global
           I64[Hp - 40] = sat_s3XVq_info;
           P64[Hp - 24] = _s3XVm::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42BT_info" {
     block_c42BT_info:
         const _c42BT;
         const 1;
         const 12884901918;
         const S3Y0k_srt+2704;
 },
 _c42C8() //  [R1]
         { []
         }
     {offset
       c42C8: // global
           if (R1 & 7 == 1) goto c42CM; else goto c42CR;
       c42CM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c42CP; else goto c42CO;
       c42CP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42CO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = lvl1_r3N5M_closure;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c42CR: // global
           I64[Sp - 16] = block_c42Ce_info;
           _s3XVr::P64 = R1;
           _s3XVt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s3XVt::P64;
           P64[Sp] = _s3XVr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u42D5; else goto c42Cf;
       u42D5: // global
           call _c42Ce(R1) args: 0, res: 0, upd: 0;
       c42Cf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c42C8_info" {
     block_c42C8_info:
         const _c42C8;
         const 1;
         const 12884901918;
         const S3Y0k_srt+2704;
 },
 _c42Ce() //  [R1]
         { []
         }
     {offset
       c42Ce: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c42CU; else goto c42CT;
       c42CU: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c42CT: // global
           if (I64[R1 + 7] == 38) goto c42CY; else goto c42CX;
       c42CY: // global
           Hp = Hp - 48;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 24;
           call _c42BK() args: 0, res: 0, upd: 0;
       c42CX: // global
           I64[Hp - 40] = sat_s3XVx_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c42Ce_info" {
     block_c42Ce_info:
         const _c42Ce;
         const 3;
         const 12884901918;
         const S3Y0k_srt+2704;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.478636552 UTC

[section ""data" . GHC.Read.lexLitChar4_closure" {
     GHC.Read.lexLitChar4_closure:
         const GHC.Read.lexLitChar4_info;
         const 0;
 },
 sat_s3XVz_entry() //  [R1]
         { []
         }
     {offset
       c42El: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c42Em; else goto c42En;
       c42Em: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42En: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Read.lexLitChar_removeNulls_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3XVz_info" {
     sat_s3XVz_info:
         const sat_s3XVz_entry;
         const 1;
         const 4294967312;
         const S3Y0k_srt+2704;
 },
 GHC.Read.lexLitChar4_entry() //  [R2]
         { []
         }
     {offset
       c42Ep: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c42Et; else goto c42Es;
       c42Et: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Read.lexLitChar4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c42Es: // global
           I64[Hp - 40] = sat_s3XVz_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Text.ParserCombinators.ReadP.Result_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Text.ParserCombinators.ReadP.Fail_closure+3;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar4_info" {
     GHC.Read.lexLitChar4_info:
         const GHC.Read.lexLitChar4_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S3Y0k_srt+2704;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.484100368 UTC

[section ""data" . GHC.Read.lexLitChar3_closure" {
     GHC.Read.lexLitChar3_closure:
         const Text.ParserCombinators.ReadP.Result_con_info;
         const GHC.Read.lexLitChar4_closure+1;
         const Text.ParserCombinators.ReadP.Fail_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.486951815 UTC

[section ""data" . GHC.Read.lexLitChar2_closure" {
     GHC.Read.lexLitChar2_closure:
         const GHC.Read.lexLitChar2_info;
         const 0;
 },
 GHC.Read.lexLitChar2_entry() //  []
         { []
         }
     {offset
       c42EO: // global
           R1 = GHC.Read.lexLitChar3_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar2_info" {
     GHC.Read.lexLitChar2_info:
         const GHC.Read.lexLitChar2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.492315604 UTC

[section ""data" . GHC.Read.lexLitChar1_closure" {
     GHC.Read.lexLitChar1_closure:
         const GHC.Read.lexLitChar1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Read.lexLitChar1_entry() //  [R1]
         { []
         }
     {offset
       c42F5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c42F6; else goto c42F7;
       c42F6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c42F7: // global
           (_c42EZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c42EZ::I64 == 0) goto c42F1; else goto c42F0;
       c42F1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c42F0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c42EZ::I64;
           I64[Sp - 24] = block_c42F2_info;
           R2 = GHC.Read.lexLitChar2_closure+1;
           Sp = Sp - 24;
           call Text.Read.Lex.$wlexChar_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar1_info" {
     GHC.Read.lexLitChar1_info:
         const GHC.Read.lexLitChar1_entry;
         const 0;
         const 30064771093;
         const S3Y0k_srt+2736;
 },
 _c42F2() //  [R1]
         { []
         }
     {offset
       c42F2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c42Fa; else goto c42F9;
       c42Fa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c42F9: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Get_con_info;
           P64[Hp] = R1;
           R3 = Hp - 7;
           R2 = GHC.Base.id_closure+1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.gather_gath_entry(R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c42F2_info" {
     block_c42F2_info:
         const _c42F2;
         const 0;
         const 4294967326;
         const S3Y0k_srt+2736;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.499219955 UTC

[section ""data" . GHC.Read.lexLitChar_closure" {
     GHC.Read.lexLitChar_closure:
         const GHC.Read.lexLitChar_info;
         const 0;
 },
 GHC.Read.lexLitChar_entry() //  [R2]
         { []
         }
     {offset
       c42Ft: // global
           R3 = R2;
           R2 = GHC.Read.lexLitChar1_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.lexLitChar_info" {
     GHC.Read.lexLitChar_info:
         const GHC.Read.lexLitChar_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S3Y0k_srt+2760;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.503148054 UTC

[section ""data" . GHC.Read.C:Read_closure" {
     GHC.Read.C:Read_closure:
         const GHC.Read.C:Read_info;
 },
 GHC.Read.C:Read_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c42FF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c42FJ; else goto c42FI;
       c42FJ: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Read.C:Read_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c42FI: // global
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.C:Read_info" {
     GHC.Read.C:Read_info:
         const GHC.Read.C:Read_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.506807214 UTC

[section ""cstring" . i42FR_str" {
     i42FR_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,100,46,67,58,82,101,97,100]
 },
 GHC.Read.C:Read_con_entry() //  [R1]
         { []
         }
     {offset
       c42FQ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Read.C:Read_con_info" {
     GHC.Read.C:Read_con_info:
         const GHC.Read.C:Read_con_entry;
         const 4;
         const 1;
         const i42FR_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:58:55.511826354 UTC

[section ""relreadonly" . S3Y0k_srt" {
     S3Y0k_srt:
         const Text.Read.Lex.$whsLex_closure;
         const GHC.Read.lex1_closure;
         const GHC.Read.readParen1_closure;
         const GHC.Read.readParen_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const GHC.Read.readLitChar1_closure;
         const Text.Read.Lex.lex1_closure;
         const GHC.Read.$fReadLexeme1_closure;
         const Text.Read.Lex.expect2_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const GHC.Read.$fReadGeneralCategory36_closure;
         const GHC.Read.choose2_closure;
         const GHC.Read.choose1_closure;
         const Text.Read.Lex.expect1_closure;
         const GHC.Read.expectP1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.Read.readField_lexeme_closure;
         const GHC.Read.$wreadField_closure;
         const GHC.Read.readField1_closure;
         const GHC.Read.readSymField_lexeme_closure;
         const GHC.Read.$wreadSymField_closure;
         const GHC.Read.readSymField_lexeme1_closure;
         const GHC.Read.readSymField1_closure;
         const GHC.Read.$fRead(,)_lexeme_closure;
         const GHC.Read.$fRead(,)2_closure;
         const GHC.Read.$fRead(,,,)2_closure;
         const GHC.Read.$fRead(,,,,,,,)2_closure;
         const GHC.Read.list3_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,)1_closure;
         const GHC.Read.$fRead(,,,)1_closure;
         const GHC.Read.$fRead(,,)1_closure;
         const GHC.Read.$fRead(,)1_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const Text.Read.Lex.expect2_closure;
         const GHC.Read.list_lexeme_closure;
         const GHC.Read.list_closure;
         const GHC.Read.readListPrecDefault_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,,)_closure;
         const GHC.Read.$fRead(,,,,,)1_closure;
         const GHC.Read.$fRead(,,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,,)_closure;
         const GHC.Read.$fRead(,,,,)1_closure;
         const GHC.Read.$fRead(,,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,,)_closure;
         const GHC.Read.$fRead(,,,)1_closure;
         const GHC.Read.$fRead(,,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,,)_$creadList_closure;
         const GHC.Read.$fRead(,,,)_closure;
         const GHC.Read.$fRead(,,)1_closure;
         const GHC.Read.$fRead(,,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,,)_$creadList_closure;
         const GHC.Read.$fRead(,,)_closure;
         const GHC.Read.$fRead(,)1_closure;
         const GHC.Read.$fRead(,)_$creadListPrec_closure;
         const GHC.Read.$fRead(,)_$creadsPrec_closure;
         const GHC.Read.$fRead(,)_$creadList_closure;
         const GHC.Read.$fRead(,)_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fReadLexeme1_closure;
         const Text.Read.Lex.expect2_closure;
         const GHC.Read.$fReadLexeme6_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const GHC.Read.$fReadLexeme_lvl116_closure;
         const GHC.Read.$fReadLexeme_k_closure;
         const GHC.Read.$fReadLexeme4_closure;
         const GHC.Read.$fReadLexeme3_closure;
         const GHC.Read.$fReadLexeme_$creadListPrec_closure;
         const GHC.Read.$fReadLexeme2_closure;
         const GHC.Read.$dmreadList_closure;
         const GHC.Read.$fReadInteger_$sreadNumber_closure;
         const GHC.Read.$fReadDouble_$sreadNumber_closure;
         const GHC.Read.$fReadFloat_$sreadNumber_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const GHC.Read.readNumber1_closure;
         const GHC.Read.$fReadGeneralCategory32_closure;
         const GHC.Read.$fReadGeneralCategory36_closure;
         const GHC.Read.$fReadGeneralCategory31_closure;
         const GHC.Read.$fReadGeneralCategory37_closure;
         const GHC.Read.$fReadGeneralCategory30_closure;
         const GHC.Read.$fReadGeneralCategory41_closure;
         const GHC.Read.$fReadGeneralCategory29_closure;
         const GHC.Read.$fReadGeneralCategory45_closure;
         const GHC.Read.$fReadGeneralCategory28_closure;
         const GHC.Read.$fReadGeneralCategory49_closure;
         const GHC.Read.$fReadGeneralCategory27_closure;
         const GHC.Read.$fReadGeneralCategory53_closure;
         const GHC.Read.$fReadGeneralCategory26_closure;
         const GHC.Read.$fReadGeneralCategory57_closure;
         const GHC.Read.$fReadGeneralCategory25_closure;
         const GHC.Read.$fReadGeneralCategory61_closure;
         const GHC.Read.$fReadGeneralCategory24_closure;
         const GHC.Read.$fReadGeneralCategory65_closure;
         const GHC.Read.$fReadGeneralCategory23_closure;
         const GHC.Read.$fReadGeneralCategory69_closure;
         const GHC.Read.$fReadGeneralCategory22_closure;
         const GHC.Read.$fReadGeneralCategory73_closure;
         const GHC.Read.$fReadGeneralCategory21_closure;
         const GHC.Read.$fReadGeneralCategory77_closure;
         const GHC.Read.$fReadGeneralCategory20_closure;
         const GHC.Read.$fReadGeneralCategory81_closure;
         const GHC.Read.$fReadGeneralCategory19_closure;
         const GHC.Read.$fReadGeneralCategory85_closure;
         const GHC.Read.$fReadGeneralCategory18_closure;
         const GHC.Read.$fReadGeneralCategory89_closure;
         const GHC.Read.$fReadGeneralCategory17_closure;
         const GHC.Read.$fReadGeneralCategory93_closure;
         const GHC.Read.$fReadGeneralCategory16_closure;
         const GHC.Read.$fReadGeneralCategory97_closure;
         const GHC.Read.$fReadGeneralCategory36_closure;
         const GHC.Read.$fReadGeneralCategory15_closure;
         const GHC.Read.$fReadGeneralCategory101_closure;
         const GHC.Read.$fReadGeneralCategory14_closure;
         const GHC.Read.$fReadGeneralCategory105_closure;
         const GHC.Read.$fReadGeneralCategory13_closure;
         const GHC.Read.$fReadGeneralCategory109_closure;
         const GHC.Read.$fReadGeneralCategory12_closure;
         const GHC.Read.$fReadGeneralCategory113_closure;
         const GHC.Read.$fReadGeneralCategory11_closure;
         const GHC.Read.$fReadGeneralCategory117_closure;
         const GHC.Read.$fReadGeneralCategory10_closure;
         const GHC.Read.$fReadGeneralCategory121_closure;
         const GHC.Read.$fReadGeneralCategory9_closure;
         const GHC.Read.$fReadGeneralCategory125_closure;
         const GHC.Read.$fReadGeneralCategory8_closure;
         const GHC.Read.$fReadGeneralCategory129_closure;
         const GHC.Read.$fReadGeneralCategory7_closure;
         const GHC.Read.$fReadGeneralCategory133_closure;
         const GHC.Read.$fReadGeneralCategory6_closure;
         const GHC.Read.$fReadGeneralCategory137_closure;
         const GHC.Read.$fReadGeneralCategory5_closure;
         const GHC.Read.$fReadGeneralCategory141_closure;
         const GHC.Read.$fReadGeneralCategory4_closure;
         const GHC.Read.$fReadGeneralCategory145_closure;
         const GHC.Read.$fReadGeneralCategory3_closure;
         const GHC.Read.$fReadGeneralCategory149_closure;
         const GHC.Read.$fReadGeneralCategory2_closure;
         const GHC.Read.list3_closure;
         const GHC.Read.$fReadGeneralCategory_$creadsPrec_closure;
         const GHC.Read.$fReadGeneralCategory1_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fReadGeneralCategory_$creadListPrec_closure;
         const GHC.Read.$fReadGeneralCategory153_closure;
         const GHC.Read.$fRead()_$creadsPrec_closure;
         const GHC.Read.$fRead()1_closure;
         const GHC.Read.$fRead()_$creadListPrec_closure;
         const GHC.Read.$fRead()6_closure;
         const GHC.Real.%_closure;
         const GHC.Read.$fReadRatio2_closure;
         const GHC.Read.$fReadRatio1_closure;
         const GHC.Read.$fReadRatio_$creadsPrec_closure;
         const GHC.Read.$fReadRatio_$creadListPrec_closure;
         const GHC.Read.$fReadRatio_$creadList_closure;
         const GHC.Read.$fReadRatio_closure;
         const GHC.Read.$fReadMaybe_lexeme_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.Read.$fReadMaybe_lexeme1_closure;
         const GHC.Read.$fReadMaybe1_closure;
         const GHC.Read.$fReadMaybe_$creadsPrec_closure;
         const GHC.Read.$fReadMaybe_$creadListPrec_closure;
         const GHC.Read.$fReadMaybe_$creadList_closure;
         const GHC.Read.$fReadMaybe_closure;
         const GHC.Read.$fReadOrdering3_closure;
         const GHC.Read.$fReadOrdering5_closure;
         const GHC.Read.$fReadOrdering7_closure;
         const Text.Read.Lex.expect2_closure;
         const GHC.Read.$w$creadPrec2_closure;
         const GHC.Read.$fReadOrdering2_closure;
         const GHC.Read.$fReadOrdering_$creadsPrec_closure;
         const GHC.Read.$fReadOrdering1_closure;
         const GHC.Read.$fReadOrdering_$creadListPrec_closure;
         const GHC.Read.$fReadOrdering9_closure;
         const GHC.Read.$fReadBool3_closure;
         const GHC.Read.$fReadBool5_closure;
         const GHC.Read.$w$creadPrec_closure;
         const GHC.Read.$fReadBool2_closure;
         const GHC.Read.$fReadBool_$creadsPrec_closure;
         const GHC.Read.$fReadBool1_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fReadBool_$creadListPrec_closure;
         const GHC.Read.$fReadBool7_closure;
         const GHC.Read.$w$creadPrec1_closure;
         const GHC.Read.$fReadChar7_closure;
         const Text.Read.Lex.numberToInteger_closure;
         const GHC.Read.$fReadInteger2_closure;
         const GHC.Read.$fReadInteger_$creadsPrec_closure;
         const GHC.Read.$fReadInteger1_closure;
         const GHC.Read.$fReadInteger_$creadListPrec_closure;
         const GHC.Read.$fReadInteger3_closure;
         const GHC.Read.$fReadWord64_$creadsPrec_closure;
         const GHC.Read.$fReadWord13_closure;
         const GHC.Read.$fReadWord12_closure;
         const GHC.Read.$fReadWord11_closure;
         const GHC.Read.$fReadWord64_$creadList_closure;
         const GHC.Read.$fReadWord_$creadsPrec_closure;
         const GHC.Read.$fReadWord3_closure;
         const GHC.Read.$fReadWord2_closure;
         const GHC.Read.$fReadWord1_closure;
         const GHC.Read.$fReadWord_$creadList_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadDouble_x1_closure;
         const GHC.Read.$fReadDouble_x_closure;
         const GHC.Float.rationalToDouble_closure;
         const Text.Read.Lex.$wnumberToRangedRational_closure;
         const GHC.Read.$fReadDouble_$sconvertFrac_closure;
         const GHC.Read.$fReadDouble2_closure;
         const GHC.Read.$fReadDouble3_closure;
         const GHC.Read.$fReadDouble4_closure;
         const GHC.Read.$fReadDouble6_closure;
         const GHC.Read.$fReadFloat_x1_closure;
         const GHC.Read.$fReadFloat_x_closure;
         const GHC.Float.rationalToFloat_closure;
         const GHC.Read.$fReadFloat_$sconvertFrac_closure;
         const GHC.Read.$fReadFloat2_closure;
         const GHC.Read.$fReadFloat3_closure;
         const GHC.Read.$fReadDouble_$creadsPrec_closure;
         const GHC.Read.$fReadDouble1_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fReadDouble_$creadListPrec_closure;
         const GHC.Read.$fReadDouble8_closure;
         const GHC.Read.$fReadFloat_$creadsPrec_closure;
         const GHC.Read.$fReadFloat1_closure;
         const GHC.Read.$fReadFloat_$creadListPrec_closure;
         const GHC.Read.$fReadFloat4_closure;
         const GHC.Read.$fReadInt_$creadsPrec_closure;
         const GHC.Read.$fReadInt1_closure;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const GHC.Read.$fReadInt3_closure;
         const GHC.Read.$fReadWord32_$creadsPrec_closure;
         const GHC.Read.$fReadWord10_closure;
         const GHC.Read.$fReadWord9_closure;
         const GHC.Read.$fReadWord7_closure;
         const GHC.Read.$fReadWord32_$creadList_closure;
         const GHC.Read.$fReadWord16_$creadsPrec_closure;
         const GHC.Read.$fReadInt2_closure;
         const GHC.Read.$fReadInt_$sreadNumber_closure;
         const GHC.Read.$fReadWord6_closure;
         const GHC.Read.$fReadWord5_closure;
         const GHC.Read.$fReadWord4_closure;
         const GHC.Read.$fReadWord16_$creadList_closure;
         const GHC.Read.$fReadWord8_$creadsPrec_closure;
         const GHC.Read.$fReadWord17_closure;
         const GHC.Read.$fReadWord15_closure;
         const GHC.Read.$fReadWord14_closure;
         const GHC.Read.$fReadWord8_$creadList_closure;
         const GHC.Read.$fReadChar7_closure;
         const GHC.Read.list3_closure;
         const GHC.Read.$fReadChar_$creadsPrec_closure;
         const GHC.Read.$fReadChar6_closure;
         const GHC.Read.$fReadChar5_closure;
         const Text.Read.Lex.expect2_closure;
         const GHC.Read.$fReadChar2_closure;
         const GHC.Read.$fReadChar8_closure;
         const GHC.Read.$fReadChar1_closure;
         const GHC.Read.list_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec1_closure;
         const GHC.Read.$fRead[]2_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec_closure;
         const GHC.Read.$fRead[]1_closure;
         const GHC.Read.$fRead[]_$s$creadsPrec1_closure;
         const GHC.Read.$fReadInt_$creadListPrec_closure;
         const GHC.Read.$fRead[]_$s$creadsPrec_closure;
         const GHC.Read.$fRead[]_$s$creadsPrec2_closure;
         const GHC.Read.$fRead[]_$creadListPrec_closure;
         const GHC.Read.$fRead[]_$s$creadListPrec2_closure;
         const GHC.Read.$fRead[]3_closure;
         const GHC.Read.$fRead[]_$creadList_closure;
         const GHC.Read.$fRead[]_closure;
         const GHC.Read.$fReadNonEmpty2_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.Read.$fReadNonEmpty1_closure;
         const GHC.Read.$fReadNonEmpty_$creadsPrec_closure;
         const GHC.Read.$fReadNonEmpty_$creadListPrec_closure;
         const GHC.Read.$fReadNonEmpty_$creadList_closure;
         const GHC.Read.$fReadNonEmpty_closure;
         const GHC.Read.$fRead(,)1_closure;
         const GHC.Arr.array_closure;
         const GHC.Read.$fReadArray_lexeme_closure;
         const GHC.Read.$fReadArray1_closure;
         const GHC.Read.$fReadArray_$creadsPrec_closure;
         const GHC.Read.$fReadArray_$creadListPrec_closure;
         const GHC.Read.$fReadArray_$creadList_closure;
         const GHC.Read.$fReadArray_closure;
         const GHC.Read.lexLitChar_removeNulls_closure;
         const lvl1_r3N5M_closure;
         const GHC.Read.lexLitChar4_closure;
         const GHC.Read.lexLitChar3_closure;
         const Text.ParserCombinators.ReadP.gather_gath_closure;
         const GHC.Read.lexLitChar2_closure;
         const Text.Read.Lex.$wlexChar_closure;
         const GHC.Read.lexLitChar1_closure;
 }]

