
==================== Output Cmm ====================
2018-03-16 15:54:59.300478067 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:59.301033318 UTC

[section ""cstring" . GHC.Profiling.$trModule4_bytes" {
     GHC.Profiling.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.30166755 UTC

[section ""data" . GHC.Profiling.$trModule3_closure" {
     GHC.Profiling.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.302177705 UTC

[section ""cstring" . GHC.Profiling.$trModule2_bytes" {
     GHC.Profiling.$trModule2_bytes:
         I8[] [71,72,67,46,80,114,111,102,105,108,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.302696807 UTC

[section ""data" . GHC.Profiling.$trModule1_closure" {
     GHC.Profiling.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.303247831 UTC

[section ""data" . GHC.Profiling.$trModule_closure" {
     GHC.Profiling.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Profiling.$trModule3_closure+1;
         const GHC.Profiling.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.304230878 UTC

[section ""data" . stopProfTimer1_rlyb_closure" {
     stopProfTimer1_rlyb_closure:
         const stopProfTimer1_rlyb_info;
 },
 stopProfTimer1_rlyb_entry() //  []
         { info_tbl: [(clyt,
                       label: stopProfTimer1_rlyb_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clyt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clyu; else goto clyv;
       clyu: // global
           R1 = stopProfTimer1_rlyb_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clyv: // global
           I64[Sp - 8] = block_clyr_info;
           Sp = Sp - 8;
           _ulyz::P64 = CurrentTSO;
           I64[I64[_ulyz::P64 + 24] + 16] = Sp;
           _ulyA::I64 = CurrentNursery;
           P64[_ulyA::I64 + 8] = Hp + 8;
           I64[_ulyz::P64 + 104] = I64[_ulyz::P64 + 104] - ((Hp + 8) - I64[_ulyA::I64]);
           (_ulyx::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] stopProfTimer();
           (_ulyy::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulyx::I64);
           BaseReg = _ulyy::I64;
           _ulyB::P64 = CurrentTSO;
           _ulyC::P64 = I64[_ulyB::P64 + 24];
           Sp = I64[_ulyC::P64 + 16];
           SpLim = _ulyC::P64 + 192;
           HpAlloc = 0;
           _ulyD::I64 = CurrentNursery;
           _ulyE::I64 = I64[_ulyD::I64 + 8];
           Hp = _ulyE::I64 - 8;
           _ulyF::I64 = I64[_ulyD::I64];
           HpLim = _ulyF::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulyD::I64 + 48]) << 12) - 1);
           I64[_ulyB::P64 + 104] = I64[_ulyB::P64 + 104] + (_ulyE::I64 - _ulyF::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 _clyr() //  []
         { info_tbl: [(clyr,
                       label: block_clyr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clyr: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.305707918 UTC

[section ""data" . GHC.Profiling.stopProfTimer_closure" {
     GHC.Profiling.stopProfTimer_closure:
         const GHC.Profiling.stopProfTimer_info;
 },
 GHC.Profiling.stopProfTimer_entry() //  []
         { info_tbl: [(clyL,
                       label: GHC.Profiling.stopProfTimer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clyL: // global
           call stopProfTimer1_rlyb_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.306604886 UTC

[section ""data" . startProfTimer1_rlyc_closure" {
     startProfTimer1_rlyc_closure:
         const startProfTimer1_rlyc_info;
 },
 startProfTimer1_rlyc_entry() //  []
         { info_tbl: [(clyV,
                       label: startProfTimer1_rlyc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clyV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clyW; else goto clyX;
       clyW: // global
           R1 = startProfTimer1_rlyc_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clyX: // global
           I64[Sp - 8] = block_clyT_info;
           Sp = Sp - 8;
           _ulz1::P64 = CurrentTSO;
           I64[I64[_ulz1::P64 + 24] + 16] = Sp;
           _ulz2::I64 = CurrentNursery;
           P64[_ulz2::I64 + 8] = Hp + 8;
           I64[_ulz1::P64 + 104] = I64[_ulz1::P64 + 104] - ((Hp + 8) - I64[_ulz2::I64]);
           (_ulyZ::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] startProfTimer();
           (_ulz0::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulyZ::I64);
           BaseReg = _ulz0::I64;
           _ulz3::P64 = CurrentTSO;
           _ulz4::P64 = I64[_ulz3::P64 + 24];
           Sp = I64[_ulz4::P64 + 16];
           SpLim = _ulz4::P64 + 192;
           HpAlloc = 0;
           _ulz5::I64 = CurrentNursery;
           _ulz6::I64 = I64[_ulz5::I64 + 8];
           Hp = _ulz6::I64 - 8;
           _ulz7::I64 = I64[_ulz5::I64];
           HpLim = _ulz7::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulz5::I64 + 48]) << 12) - 1);
           I64[_ulz3::P64 + 104] = I64[_ulz3::P64 + 104] + (_ulz6::I64 - _ulz7::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 _clyT() //  []
         { info_tbl: [(clyT,
                       label: block_clyT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clyT: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.307865715 UTC

[section ""data" . GHC.Profiling.startProfTimer_closure" {
     GHC.Profiling.startProfTimer_closure:
         const GHC.Profiling.startProfTimer_info;
 },
 GHC.Profiling.startProfTimer_entry() //  []
         { info_tbl: [(clzd,
                       label: GHC.Profiling.startProfTimer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clzd: // global
           call startProfTimer1_rlyc_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.308515341 UTC

[section ""relreadonly" . Slzg_srt" { Slzg_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.309036731 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:59.309607101 UTC

[section ""cstring" . GHC.Profiling.$trModule4_bytes" {
     GHC.Profiling.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.310131659 UTC

[section ""data" . GHC.Profiling.$trModule3_closure" {
     GHC.Profiling.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.310668616 UTC

[section ""cstring" . GHC.Profiling.$trModule2_bytes" {
     GHC.Profiling.$trModule2_bytes:
         I8[] [71,72,67,46,80,114,111,102,105,108,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.311186995 UTC

[section ""data" . GHC.Profiling.$trModule1_closure" {
     GHC.Profiling.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.311721385 UTC

[section ""data" . GHC.Profiling.$trModule_closure" {
     GHC.Profiling.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Profiling.$trModule3_closure+1;
         const GHC.Profiling.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.312565376 UTC

[section ""data" . stopProfTimer1_rlyb_closure" {
     stopProfTimer1_rlyb_closure:
         const stopProfTimer1_rlyb_info;
 },
 stopProfTimer1_rlyb_entry() //  []
         { info_tbl: [(clzo,
                       label: stopProfTimer1_rlyb_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clzo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clzp; else goto clzq;
       clzp: // global
           R1 = stopProfTimer1_rlyb_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clzq: // global
           I64[Sp - 8] = block_clzm_info;
           Sp = Sp - 8;
           _ulzu::P64 = CurrentTSO;
           I64[I64[_ulzu::P64 + 24] + 16] = Sp;
           _ulzv::I64 = CurrentNursery;
           P64[_ulzv::I64 + 8] = Hp + 8;
           I64[_ulzu::P64 + 104] = I64[_ulzu::P64 + 104] - ((Hp + 8) - I64[_ulzv::I64]);
           (_ulzs::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] stopProfTimer();
           (_ulzt::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulzs::I64);
           BaseReg = _ulzt::I64;
           _ulzw::P64 = CurrentTSO;
           _ulzx::P64 = I64[_ulzw::P64 + 24];
           Sp = I64[_ulzx::P64 + 16];
           SpLim = _ulzx::P64 + 192;
           HpAlloc = 0;
           _ulzy::I64 = CurrentNursery;
           _ulzz::I64 = I64[_ulzy::I64 + 8];
           Hp = _ulzz::I64 - 8;
           _ulzA::I64 = I64[_ulzy::I64];
           HpLim = _ulzA::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulzy::I64 + 48]) << 12) - 1);
           I64[_ulzw::P64 + 104] = I64[_ulzw::P64 + 104] + (_ulzz::I64 - _ulzA::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 _clzm() //  []
         { info_tbl: [(clzm,
                       label: block_clzm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clzm: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.314169233 UTC

[section ""data" . GHC.Profiling.stopProfTimer_closure" {
     GHC.Profiling.stopProfTimer_closure:
         const GHC.Profiling.stopProfTimer_info;
 },
 GHC.Profiling.stopProfTimer_entry() //  []
         { info_tbl: [(clzG,
                       label: GHC.Profiling.stopProfTimer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clzG: // global
           call stopProfTimer1_rlyb_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.31507518 UTC

[section ""data" . startProfTimer1_rlyc_closure" {
     startProfTimer1_rlyc_closure:
         const startProfTimer1_rlyc_info;
 },
 startProfTimer1_rlyc_entry() //  []
         { info_tbl: [(clzQ,
                       label: startProfTimer1_rlyc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clzQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clzR; else goto clzS;
       clzR: // global
           R1 = startProfTimer1_rlyc_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clzS: // global
           I64[Sp - 8] = block_clzO_info;
           Sp = Sp - 8;
           _ulzW::P64 = CurrentTSO;
           I64[I64[_ulzW::P64 + 24] + 16] = Sp;
           _ulzX::I64 = CurrentNursery;
           P64[_ulzX::I64 + 8] = Hp + 8;
           I64[_ulzW::P64 + 104] = I64[_ulzW::P64 + 104] - ((Hp + 8) - I64[_ulzX::I64]);
           (_ulzU::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] startProfTimer();
           (_ulzV::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulzU::I64);
           BaseReg = _ulzV::I64;
           _ulzY::P64 = CurrentTSO;
           _ulzZ::P64 = I64[_ulzY::P64 + 24];
           Sp = I64[_ulzZ::P64 + 16];
           SpLim = _ulzZ::P64 + 192;
           HpAlloc = 0;
           _ulA0::I64 = CurrentNursery;
           _ulA1::I64 = I64[_ulA0::I64 + 8];
           Hp = _ulA1::I64 - 8;
           _ulA2::I64 = I64[_ulA0::I64];
           HpLim = _ulA2::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulA0::I64 + 48]) << 12) - 1);
           I64[_ulzY::P64 + 104] = I64[_ulzY::P64 + 104] + (_ulA1::I64 - _ulA2::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 _clzO() //  []
         { info_tbl: [(clzO,
                       label: block_clzO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clzO: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.316332415 UTC

[section ""data" . GHC.Profiling.startProfTimer_closure" {
     GHC.Profiling.startProfTimer_closure:
         const GHC.Profiling.startProfTimer_info;
 },
 GHC.Profiling.startProfTimer_entry() //  []
         { info_tbl: [(clA8,
                       label: GHC.Profiling.startProfTimer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clA8: // global
           call startProfTimer1_rlyc_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.316949654 UTC

[section ""relreadonly" . Slzg_srt" { Slzg_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.317773648 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:59.318849016 UTC

[section ""cstring" . GHC.Profiling.$trModule4_bytes" {
     GHC.Profiling.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.320540376 UTC

[section ""data" . GHC.Profiling.$trModule3_closure" {
     GHC.Profiling.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.322253388 UTC

[section ""cstring" . GHC.Profiling.$trModule2_bytes" {
     GHC.Profiling.$trModule2_bytes:
         I8[] [71,72,67,46,80,114,111,102,105,108,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.323883618 UTC

[section ""data" . GHC.Profiling.$trModule1_closure" {
     GHC.Profiling.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.325682339 UTC

[section ""data" . GHC.Profiling.$trModule_closure" {
     GHC.Profiling.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Profiling.$trModule3_closure+1;
         const GHC.Profiling.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.328396404 UTC

[section ""data" . stopProfTimer1_rlyb_closure" {
     stopProfTimer1_rlyb_closure:
         const stopProfTimer1_rlyb_info;
 },
 stopProfTimer1_rlyb_entry() //  []
         { info_tbl: [(clAn,
                       label: stopProfTimer1_rlyb_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clAn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clAo; else goto clAp;
       clAo: // global
           R1 = stopProfTimer1_rlyb_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clAp: // global
           I64[Sp - 8] = block_clAl_info;
           Sp = Sp - 8;
           _ulAt::P64 = CurrentTSO;
           I64[I64[_ulAt::P64 + 24] + 16] = Sp;
           _ulAu::I64 = CurrentNursery;
           P64[_ulAu::I64 + 8] = Hp + 8;
           I64[_ulAt::P64 + 104] = I64[_ulAt::P64 + 104] - ((Hp + 8) - I64[_ulAu::I64]);
           (_ulAr::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] stopProfTimer();
           (_ulAs::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulAr::I64);
           BaseReg = _ulAs::I64;
           _ulAv::P64 = CurrentTSO;
           _ulAw::P64 = I64[_ulAv::P64 + 24];
           Sp = I64[_ulAw::P64 + 16];
           SpLim = _ulAw::P64 + 192;
           HpAlloc = 0;
           _ulAx::I64 = CurrentNursery;
           _ulAy::I64 = I64[_ulAx::I64 + 8];
           Hp = _ulAy::I64 - 8;
           _ulAz::I64 = I64[_ulAx::I64];
           HpLim = _ulAz::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulAx::I64 + 48]) << 12) - 1);
           I64[_ulAv::P64 + 104] = I64[_ulAv::P64 + 104] + (_ulAy::I64 - _ulAz::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 _clAl() //  []
         { info_tbl: [(clAl,
                       label: block_clAl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clAl: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.334493042 UTC

[section ""data" . GHC.Profiling.stopProfTimer_closure" {
     GHC.Profiling.stopProfTimer_closure:
         const GHC.Profiling.stopProfTimer_info;
 },
 GHC.Profiling.stopProfTimer_entry() //  []
         { info_tbl: [(clB3,
                       label: GHC.Profiling.stopProfTimer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clB3: // global
           call stopProfTimer1_rlyb_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.337747605 UTC

[section ""data" . startProfTimer1_rlyc_closure" {
     startProfTimer1_rlyc_closure:
         const startProfTimer1_rlyc_info;
 },
 startProfTimer1_rlyc_entry() //  []
         { info_tbl: [(clBh,
                       label: startProfTimer1_rlyc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clBh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clBi; else goto clBj;
       clBi: // global
           R1 = startProfTimer1_rlyc_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clBj: // global
           I64[Sp - 8] = block_clBf_info;
           Sp = Sp - 8;
           _ulBn::P64 = CurrentTSO;
           I64[I64[_ulBn::P64 + 24] + 16] = Sp;
           _ulBo::I64 = CurrentNursery;
           P64[_ulBo::I64 + 8] = Hp + 8;
           I64[_ulBn::P64 + 104] = I64[_ulBn::P64 + 104] - ((Hp + 8) - I64[_ulBo::I64]);
           (_ulBl::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] startProfTimer();
           (_ulBm::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulBl::I64);
           BaseReg = _ulBm::I64;
           _ulBp::P64 = CurrentTSO;
           _ulBq::P64 = I64[_ulBp::P64 + 24];
           Sp = I64[_ulBq::P64 + 16];
           SpLim = _ulBq::P64 + 192;
           HpAlloc = 0;
           _ulBr::I64 = CurrentNursery;
           _ulBs::I64 = I64[_ulBr::I64 + 8];
           Hp = _ulBs::I64 - 8;
           _ulBt::I64 = I64[_ulBr::I64];
           HpLim = _ulBt::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulBr::I64 + 48]) << 12) - 1);
           I64[_ulBp::P64 + 104] = I64[_ulBp::P64 + 104] + (_ulBs::I64 - _ulBt::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 _clBf() //  []
         { info_tbl: [(clBf,
                       label: block_clBf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clBf: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.343825011 UTC

[section ""data" . GHC.Profiling.startProfTimer_closure" {
     GHC.Profiling.startProfTimer_closure:
         const GHC.Profiling.startProfTimer_info;
 },
 GHC.Profiling.startProfTimer_entry() //  []
         { info_tbl: [(clBX,
                       label: GHC.Profiling.startProfTimer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clBX: // global
           call startProfTimer1_rlyc_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.347589479 UTC

[section ""relreadonly" . Slzg_srt" { Slzg_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.389787005 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:59.390897095 UTC

[section ""cstring" . GHC.Profiling.$trModule4_bytes" {
     GHC.Profiling.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.392692233 UTC

[section ""data" . GHC.Profiling.$trModule3_closure" {
     GHC.Profiling.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.394443001 UTC

[section ""cstring" . GHC.Profiling.$trModule2_bytes" {
     GHC.Profiling.$trModule2_bytes:
         I8[] [71,72,67,46,80,114,111,102,105,108,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.396206171 UTC

[section ""data" . GHC.Profiling.$trModule1_closure" {
     GHC.Profiling.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.397998795 UTC

[section ""data" . GHC.Profiling.$trModule_closure" {
     GHC.Profiling.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Profiling.$trModule3_closure+1;
         const GHC.Profiling.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.40027707 UTC

[section ""data" . stopProfTimer1_rlyb_closure" {
     stopProfTimer1_rlyb_closure:
         const stopProfTimer1_rlyb_info;
 },
 stopProfTimer1_rlyb_entry() //  []
         { info_tbl: [(clCp,
                       label: stopProfTimer1_rlyb_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clCp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clCq; else goto clCr;
       clCq: // global
           R1 = stopProfTimer1_rlyb_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clCr: // global
           I64[Sp - 8] = block_clCn_info;
           Sp = Sp - 8;
           _ulCv::P64 = CurrentTSO;
           I64[I64[_ulCv::P64 + 24] + 16] = Sp;
           _ulCw::I64 = CurrentNursery;
           P64[_ulCw::I64 + 8] = Hp + 8;
           I64[_ulCv::P64 + 104] = I64[_ulCv::P64 + 104] - ((Hp + 8) - I64[_ulCw::I64]);
           (_ulCt::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] stopProfTimer();
           (_ulCu::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulCt::I64);
           BaseReg = _ulCu::I64;
           _ulCx::P64 = CurrentTSO;
           _ulCy::P64 = I64[_ulCx::P64 + 24];
           Sp = I64[_ulCy::P64 + 16];
           SpLim = _ulCy::P64 + 192;
           HpAlloc = 0;
           _ulCz::I64 = CurrentNursery;
           _ulCA::I64 = I64[_ulCz::I64 + 8];
           Hp = _ulCA::I64 - 8;
           _ulCB::I64 = I64[_ulCz::I64];
           HpLim = _ulCB::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulCz::I64 + 48]) << 12) - 1);
           I64[_ulCx::P64 + 104] = I64[_ulCx::P64 + 104] + (_ulCA::I64 - _ulCB::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 _clCn() //  []
         { info_tbl: [(clCn,
                       label: block_clCn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clCn: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.408853158 UTC

[section ""data" . GHC.Profiling.stopProfTimer_closure" {
     GHC.Profiling.stopProfTimer_closure:
         const GHC.Profiling.stopProfTimer_info;
 },
 GHC.Profiling.stopProfTimer_entry() //  []
         { info_tbl: [(clD7,
                       label: GHC.Profiling.stopProfTimer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clD7: // global
           call stopProfTimer1_rlyb_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.412710345 UTC

[section ""data" . startProfTimer1_rlyc_closure" {
     startProfTimer1_rlyc_closure:
         const startProfTimer1_rlyc_info;
 },
 startProfTimer1_rlyc_entry() //  []
         { info_tbl: [(clDl,
                       label: startProfTimer1_rlyc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clDl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clDm; else goto clDn;
       clDm: // global
           R1 = startProfTimer1_rlyc_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clDn: // global
           I64[Sp - 8] = block_clDj_info;
           Sp = Sp - 8;
           _ulDr::P64 = CurrentTSO;
           I64[I64[_ulDr::P64 + 24] + 16] = Sp;
           _ulDs::I64 = CurrentNursery;
           P64[_ulDs::I64 + 8] = Hp + 8;
           I64[_ulDr::P64 + 104] = I64[_ulDr::P64 + 104] - ((Hp + 8) - I64[_ulDs::I64]);
           (_ulDp::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] startProfTimer();
           (_ulDq::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulDp::I64);
           BaseReg = _ulDq::I64;
           _ulDt::P64 = CurrentTSO;
           _ulDu::P64 = I64[_ulDt::P64 + 24];
           Sp = I64[_ulDu::P64 + 16];
           SpLim = _ulDu::P64 + 192;
           HpAlloc = 0;
           _ulDv::I64 = CurrentNursery;
           _ulDw::I64 = I64[_ulDv::I64 + 8];
           Hp = _ulDw::I64 - 8;
           _ulDx::I64 = I64[_ulDv::I64];
           HpLim = _ulDx::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulDv::I64 + 48]) << 12) - 1);
           I64[_ulDt::P64 + 104] = I64[_ulDt::P64 + 104] + (_ulDw::I64 - _ulDx::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 _clDj() //  []
         { info_tbl: [(clDj,
                       label: block_clDj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clDj: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.420352637 UTC

[section ""data" . GHC.Profiling.startProfTimer_closure" {
     GHC.Profiling.startProfTimer_closure:
         const GHC.Profiling.startProfTimer_info;
 },
 GHC.Profiling.startProfTimer_entry() //  []
         { info_tbl: [(clE3,
                       label: GHC.Profiling.startProfTimer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       clE3: // global
           call startProfTimer1_rlyc_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:59.423829861 UTC

[section ""relreadonly" . SlEa_srt" { SlEa_srt:
 }]

