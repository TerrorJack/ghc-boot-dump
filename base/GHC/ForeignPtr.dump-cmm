
==================== Output Cmm ====================
2018-03-16 16:02:49.790014266 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:49.791255552 UTC

[section ""data" . GHC.ForeignPtr.$WPlainForeignPtr_closure" {
     GHC.ForeignPtr.$WPlainForeignPtr_closure:
         const GHC.ForeignPtr.$WPlainForeignPtr_info;
 },
 GHC.ForeignPtr.$WPlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KjF,
                       label: GHC.ForeignPtr.$WPlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KjF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KjJ; else goto c7KjK;
       c7KjJ: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$WPlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KjK: // global
           I64[Sp - 8] = block_c7KjC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KjO; else goto c7KjD;
       u7KjO: // global
           call _c7KjC(R1) args: 0, res: 0, upd: 0;
       c7KjD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KjC() //  [R1]
         { info_tbl: [(c7KjC,
                       label: block_c7KjC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KjC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KjN; else goto c7KjM;
       c7KjN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KjM: // global
           _s7KbE::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _s7KbE::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.792817244 UTC

[section ""data" . GHC.ForeignPtr.$WMallocPtr_closure" {
     GHC.ForeignPtr.$WMallocPtr_closure:
         const GHC.ForeignPtr.$WMallocPtr_info;
 },
 GHC.ForeignPtr.$WMallocPtr_entry() //  [R2, R3]
         { info_tbl: [(c7KjW,
                       label: GHC.ForeignPtr.$WMallocPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KjW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kk0; else goto c7Kk1;
       c7Kk0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$WMallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Kk1: // global
           I64[Sp - 16] = block_c7KjT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Kk5; else goto c7KjU;
       u7Kk5: // global
           call _c7KjT(R1) args: 0, res: 0, upd: 0;
       c7KjU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KjT() //  [R1]
         { info_tbl: [(c7KjT,
                       label: block_c7KjT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KjT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Kk4; else goto c7Kk3;
       c7Kk4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Kk3: // global
           _s7KbI::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7KbI::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.794039235 UTC

[section ""cstring" . lvl_r7KaV_bytes" {
     lvl_r7KaV_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.794850987 UTC

[section ""data" . lvl1_r7KaW_closure" {
     lvl1_r7KaW_closure:
         const lvl1_r7KaW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r7KaW_entry() //  [R1]
         { info_tbl: [(c7Kkc,
                       label: lvl1_r7KaW_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kkc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kkd; else goto c7Kke;
       c7Kkd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Kke: // global
           (_c7Kk9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Kk9::I64 == 0) goto c7Kkb; else goto c7Kka;
       c7Kkb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Kka: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Kk9::I64;
           R2 = lvl_r7KaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.795840078 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule4_bytes" {
     GHC.ForeignPtr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.796654972 UTC

[section ""data" . lvl2_r7KaX_closure" {
     lvl2_r7KaX_closure:
         const lvl2_r7KaX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r7KaX_entry() //  [R1]
         { info_tbl: [(c7Kkl,
                       label: lvl2_r7KaX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kkl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kkm; else goto c7Kkn;
       c7Kkm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Kkn: // global
           (_c7Kki::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Kki::I64 == 0) goto c7Kkk; else goto c7Kkj;
       c7Kkk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Kkj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Kki::I64;
           R2 = GHC.ForeignPtr.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.797674052 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule2_bytes" {
     GHC.ForeignPtr.$trModule2_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.798427057 UTC

[section ""data" . lvl3_r7KaY_closure" {
     lvl3_r7KaY_closure:
         const lvl3_r7KaY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r7KaY_entry() //  [R1]
         { info_tbl: [(c7Kku,
                       label: lvl3_r7KaY_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kku: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kkv; else goto c7Kkw;
       c7Kkv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Kkw: // global
           (_c7Kkr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Kkr::I64 == 0) goto c7Kkt; else goto c7Kks;
       c7Kkt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Kks: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Kkr::I64;
           R2 = GHC.ForeignPtr.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.799457065 UTC

[section ""cstring" . lvl4_r7KaZ_bytes" {
     lvl4_r7KaZ_bytes:
         I8[] [46,47,71,72,67,47,70,111,114,101,105,103,110,80,116,114,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.80024837 UTC

[section ""data" . lvl5_r7Kb0_closure" {
     lvl5_r7Kb0_closure:
         const lvl5_r7Kb0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r7Kb0_entry() //  [R1]
         { info_tbl: [(c7KkD,
                       label: lvl5_r7Kb0_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KkD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KkE; else goto c7KkF;
       c7KkE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KkF: // global
           (_c7KkA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KkA::I64 == 0) goto c7KkC; else goto c7KkB;
       c7KkC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KkB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KkA::I64;
           R2 = lvl4_r7KaZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.80118498 UTC

[section ""data" . lvl6_r7Kb1_closure" {
     lvl6_r7Kb1_closure:
         const GHC.Types.I#_con_info;
         const 214;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.801813379 UTC

[section ""data" . lvl7_r7Kb2_closure" {
     lvl7_r7Kb2_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.802414902 UTC

[section ""data" . lvl8_r7Kb3_closure" {
     lvl8_r7Kb3_closure:
         const GHC.Types.I#_con_info;
         const 43;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.803045736 UTC

[section ""data" . lvl9_r7Kb4_closure" {
     lvl9_r7Kb4_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl6_r7Kb1_closure+1;
         const lvl7_r7Kb2_closure+1;
         const lvl6_r7Kb1_closure+1;
         const lvl8_r7Kb3_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.803753123 UTC

[section ""data" . lvl10_r7Kb5_closure" {
     lvl10_r7Kb5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl9_r7Kb4_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.804620516 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr2_entry() //  [R1]
         { info_tbl: [(c7KkM,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KkM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KkN; else goto c7KkO;
       c7KkN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KkO: // global
           (_c7KkJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KkJ::I64 == 0) goto c7KkL; else goto c7KkK;
       c7KkL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KkK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KkJ::I64;
           R2 = lvl10_r7Kb5_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.805683458 UTC

[section ""cstring" . lvl11_r7Kb6_bytes" {
     lvl11_r7Kb6_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.806616981 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr2_closure" {
     GHC.ForeignPtr.mallocForeignPtr2_closure:
         const GHC.ForeignPtr.mallocForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr2_entry() //  [R1]
         { info_tbl: [(c7KkY,
                       label: GHC.ForeignPtr.mallocForeignPtr2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KkY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KkZ; else goto c7Kl0;
       c7KkZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Kl0: // global
           (_c7KkT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KkT::I64 == 0) goto c7KkV; else goto c7KkU;
       c7KkV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KkU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KkT::I64;
           I64[Sp - 24] = block_c7KkW_info;
           R2 = lvl11_r7Kb6_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KkW() //  [R1]
         { info_tbl: [(c7KkW,
                       label: block_c7KkW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KkW: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.808354869 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7Kla,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kla: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Kle; else goto c7Klf;
       c7Kle: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Klf: // global
           I64[Sp - 16] = block_c7Kl8_info;
           _s7KbK::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           P64[Sp - 8] = _s7KbK::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7Kl8() //  [R1]
         { info_tbl: [(c7Kl8,
                       label: block_c7Kl8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kl8: // global
           I64[Sp] = block_c7Kld_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7Kld() //  [R1]
         { info_tbl: [(c7Kld,
                       label: block_c7Kld_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kld: // global
           _s7KbP::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KbP::I64, 0)) goto c7Klw; else goto c7KlA;
       c7Klw: // global
           _s7KbN::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7Klo_info;
           R2 = _s7KbN::I64;
           R1 = _s7KbP::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c7KlA: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Klo() //  [R1]
         { info_tbl: [(c7Klo,
                       label: block_c7Klo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Klo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Klz; else goto c7Kly;
       c7Klz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Kly: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.810266464 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KlF,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KlF: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.811047394 UTC

[section ""cstring" . lvl12_r7Kb7_bytes" {
     lvl12_r7Kb7_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.811925114 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes2_entry() //  [R1]
         { info_tbl: [(c7KlQ,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KlQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KlR; else goto c7KlS;
       c7KlR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KlS: // global
           (_c7KlL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KlL::I64 == 0) goto c7KlN; else goto c7KlM;
       c7KlN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KlM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KlL::I64;
           I64[Sp - 24] = block_c7KlO_info;
           R2 = lvl12_r7Kb7_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KlO() //  [R1]
         { info_tbl: [(c7KlO,
                       label: block_c7KlO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KlO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.813589272 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry() //  [R2]
         { info_tbl: [(c7Km3,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Km3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Km4; else goto c7Km5;
       c7Km4: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Km5: // global
           I64[Sp - 8] = block_c7Km0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Kmp; else goto c7Km1;
       u7Kmp: // global
           call _c7Km0(R1) args: 0, res: 0, upd: 0;
       c7Km1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Km0() //  [R1]
         { info_tbl: [(c7Km0,
                       label: block_c7Km0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Km0: // global
           _s7Kc2::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kc2::I64, 0)) goto c7Kmk; else goto c7Kmo;
       c7Kmk: // global
           I64[Sp] = block_c7Kmc_info;
           R1 = _s7Kc2::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7Kmo: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Kmc() //  [R1]
         { info_tbl: [(c7Kmc,
                       label: block_c7Kmc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kmc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Kmn; else goto c7Kmm;
       c7Kmn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Kmm: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.815281775 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes_entry() //  [R2]
         { info_tbl: [(c7Kmu,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kmu: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.816130494 UTC

[section ""cstring" . lvl13_r7Kb8_bytes" {
     lvl13_r7Kb8_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.817043643 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_entry() //  [R1]
         { info_tbl: [(c7KmF,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KmF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KmG; else goto c7KmH;
       c7KmG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KmH: // global
           (_c7KmA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KmA::I64 == 0) goto c7KmC; else goto c7KmB;
       c7KmC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KmB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KmA::I64;
           I64[Sp - 24] = block_c7KmD_info;
           R2 = lvl13_r7Kb8_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KmD() //  [R1]
         { info_tbl: [(c7KmD,
                       label: block_c7KmD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KmD: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.820390753 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c7KmS,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KmS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KmT; else goto c7KmU;
       c7KmT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KmU: // global
           I64[Sp - 16] = block_c7KmP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Knl; else goto c7KmQ;
       u7Knl: // global
           call _c7KmP(R1) args: 0, res: 0, upd: 0;
       c7KmQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KmP() //  [R1]
         { info_tbl: [(c7KmP,
                       label: block_c7KmP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KmP: // global
           _s7Kcg::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kcg::I64, 0)) goto c7Kne; else goto c7Knj;
       c7Kne: // global
           I64[Sp] = block_c7Kn1_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kcg::I64;
           if (R1 & 7 != 0) goto u7Knk; else goto c7Kn2;
       u7Knk: // global
           call _c7Kn1(R1) args: 0, res: 0, upd: 0;
       c7Kn2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Knj: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Kn1() //  [R1]
         { info_tbl: [(c7Kn1,
                       label: block_c7Kn1_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kn1: // global
           _s7Kcg::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7Kn6_info;
           R2 = I64[R1 + 7];
           R1 = _s7Kcg::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kn6() //  [R1]
         { info_tbl: [(c7Kn6,
                       label: block_c7Kn6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kn6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Kni; else goto c7Knh;
       c7Kni: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Knh: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.822273328 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c7Knq,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Knq: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.8230439 UTC

[section ""cstring" . lvl14_r7Kb9_bytes" {
     lvl14_r7Kb9_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,109,105,120,32,72,97,115,107,101,108,108,32,97,110,100,32,67,32,102,105,110,97,108,105,122,101,114,115,32,105,110,32,116,104,101,32,115,97,109,101,32,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.823875219 UTC

[section ""data" . GHC.ForeignPtr.noMixingError_closure" {
     GHC.ForeignPtr.noMixingError_closure:
         const GHC.ForeignPtr.noMixingError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.noMixingError_entry() //  [R1]
         { info_tbl: [(c7KnB,
                       label: GHC.ForeignPtr.noMixingError_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KnB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KnC; else goto c7KnD;
       c7KnC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KnD: // global
           (_c7Knw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Knw::I64 == 0) goto c7Kny; else goto c7Knx;
       c7Kny: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Knx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Knw::I64;
           I64[Sp - 24] = block_c7Knz_info;
           R2 = lvl14_r7Kb9_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7Knz() //  [R1]
         { info_tbl: [(c7Knz,
                       label: block_c7Knz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Knz: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.825273921 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr1_closure" {
     GHC.ForeignPtr.touchForeignPtr1_closure:
         const GHC.ForeignPtr.touchForeignPtr1_info;
 },
 GHC.ForeignPtr.touchForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7KnO,
                       label: GHC.ForeignPtr.touchForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KnO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KnP; else goto c7KnQ;
       c7KnP: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.touchForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KnQ: // global
           I64[Sp - 8] = block_c7KnL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KnV; else goto c7KnM;
       u7KnV: // global
           call _c7KnL(R1) args: 0, res: 0, upd: 0;
       c7KnM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KnL() //  [R1]
         { info_tbl: [(c7KnL,
                       label: block_c7KnL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KnL: // global
           call MO_Touch(P64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.826511748 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr_closure" {
     GHC.ForeignPtr.touchForeignPtr_closure:
         const GHC.ForeignPtr.touchForeignPtr_info;
 },
 GHC.ForeignPtr.touchForeignPtr_entry() //  [R2]
         { info_tbl: [(c7Ko0,
                       label: GHC.ForeignPtr.touchForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ko0: // global
           R2 = R2;
           call GHC.ForeignPtr.touchForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.827520498 UTC

[section ""data" . GHC.ForeignPtr.unsafeForeignPtrToPtr_closure" {
     GHC.ForeignPtr.unsafeForeignPtrToPtr_closure:
         const GHC.ForeignPtr.unsafeForeignPtrToPtr_info;
 },
 GHC.ForeignPtr.unsafeForeignPtrToPtr_entry() //  [R2]
         { info_tbl: [(c7Koa,
                       label: GHC.ForeignPtr.unsafeForeignPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Koa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Koe; else goto c7Kof;
       c7Koe: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.unsafeForeignPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Kof: // global
           I64[Sp - 8] = block_c7Ko7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Koj; else goto c7Ko8;
       u7Koj: // global
           call _c7Ko7(R1) args: 0, res: 0, upd: 0;
       c7Ko8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ko7() //  [R1]
         { info_tbl: [(c7Ko7,
                       label: block_c7Ko7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ko7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Koi; else goto c7Koh;
       c7Koi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Koh: // global
           _s7KcA::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7KcA::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.829083641 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(c7Kor,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kor: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kox; else goto c7Koy;
       c7Kox: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Koy: // global
           I64[Sp - 16] = block_c7Koo_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KoD; else goto c7Kop;
       u7KoD: // global
           call _c7Koo(R1) args: 0, res: 0, upd: 0;
       c7Kop: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Koo() //  [R1]
         { info_tbl: [(c7Koo,
                       label: block_c7Koo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Koo: // global
           _s7KcE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7Kou_info;
           R3 = _s7KcE::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kou() //  [R1, R2]
         { info_tbl: [(c7Kou,
                       label: block_c7Kou_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kou: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KoC; else goto c7KoB;
       c7KoC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7KoB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.830880181 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshow_entry() //  [R2]
         { info_tbl: [(c7KoL,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KoL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KoR; else goto c7KoS;
       c7KoR: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KoS: // global
           I64[Sp - 8] = block_c7KoI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KoX; else goto c7KoJ;
       u7KoX: // global
           call _c7KoI(R1) args: 0, res: 0, upd: 0;
       c7KoJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KoI() //  [R1]
         { info_tbl: [(c7KoI,
                       label: block_c7KoI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KoI: // global
           I64[Sp] = block_c7KoO_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 15];
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7KoO() //  [R1, R2]
         { info_tbl: [(c7KoO,
                       label: block_c7KoO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KoO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KoW; else goto c7KoV;
       c7KoW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7KoV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.832533358 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr1_closure" {
     GHC.ForeignPtr.$fShowForeignPtr1_closure:
         const GHC.ForeignPtr.$fShowForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr1_entry() //  [R2, R3]
         { info_tbl: [(c7Kp5,
                       label: GHC.ForeignPtr.$fShowForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kp5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kpb; else goto c7Kpc;
       c7Kpb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Kpc: // global
           I64[Sp - 16] = block_c7Kp2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Kph; else goto c7Kp3;
       u7Kph: // global
           call _c7Kp2(R1) args: 0, res: 0, upd: 0;
       c7Kp3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kp2() //  [R1]
         { info_tbl: [(c7Kp2,
                       label: block_c7Kp2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kp2: // global
           _s7KcT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7Kp8_info;
           R3 = _s7KcT::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kp8() //  [R1, R2]
         { info_tbl: [(c7Kp8,
                       label: block_c7Kp8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kp8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Kpg; else goto c7Kpf;
       c7Kpg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7Kpf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.834111138 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7Kpm,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kpm: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ForeignPtr.$fShowForeignPtr1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.834908465 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure+3;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure+1;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.835985452 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7Kpw,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kpw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KpA; else goto c7KpB;
       c7KpA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KpB: // global
           I64[Sp - 16] = block_c7Kpt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KpU; else goto c7Kpu;
       u7KpU: // global
           call _c7Kpt(R1) args: 0, res: 0, upd: 0;
       c7Kpu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kpt() //  [R1]
         { info_tbl: [(c7Kpt,
                       label: block_c7Kpt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kpt: // global
           I64[Sp] = block_c7Kpz_info;
           _s7Kd5::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kd5::I64;
           if (R1 & 7 != 0) goto u7KpT; else goto c7KpD;
       u7KpT: // global
           call _c7Kpz(R1) args: 0, res: 0, upd: 0;
       c7KpD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kpz() //  [R1]
         { info_tbl: [(c7Kpz,
                       label: block_c7Kpz_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kpz: // global
           _s7Kd5::I64 = I64[Sp + 8];
           _s7Kd8::I64 = I64[R1 + 15];
           if (_s7Kd5::I64 >= _s7Kd8::I64) goto c7KpR; else goto c7KpS;
       c7KpR: // global
           if (_s7Kd5::I64 == _s7Kd8::I64) goto c7KpP; else goto c7KpO;
       c7KpP: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KpO: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KpS: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.838405803 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c==_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c==_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7Kq2,
                       label: GHC.ForeignPtr.$fEqForeignPtr_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kq2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kq6; else goto c7Kq7;
       c7Kq6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Kq7: // global
           I64[Sp - 16] = block_c7KpZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Kqg; else goto c7Kq0;
       u7Kqg: // global
           call _c7KpZ(R1) args: 0, res: 0, upd: 0;
       c7Kq0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KpZ() //  [R1]
         { info_tbl: [(c7KpZ,
                       label: block_c7KpZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KpZ: // global
           I64[Sp] = block_c7Kq5_info;
           _s7Kdf::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdf::I64;
           if (R1 & 7 != 0) goto u7Kqf; else goto c7Kq9;
       u7Kqf: // global
           call _c7Kq5(R1) args: 0, res: 0, upd: 0;
       c7Kq9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kq5() //  [R1]
         { info_tbl: [(c7Kq5,
                       label: block_c7Kq5_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kq5: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.8401035 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7Kqo,
                       label: GHC.ForeignPtr.$fEqForeignPtr_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kqo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kqs; else goto c7Kqt;
       c7Kqs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Kqt: // global
           I64[Sp - 16] = block_c7Kql_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KqG; else goto c7Kqm;
       u7KqG: // global
           call _c7Kql(R1) args: 0, res: 0, upd: 0;
       c7Kqm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kql() //  [R1]
         { info_tbl: [(c7Kql,
                       label: block_c7Kql_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kql: // global
           I64[Sp] = block_c7Kqr_info;
           _s7Kdo::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdo::I64;
           if (R1 & 7 != 0) goto u7KqF; else goto c7Kqv;
       u7KqF: // global
           call _c7Kqr(R1) args: 0, res: 0, upd: 0;
       c7Kqv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kqr() //  [R1]
         { info_tbl: [(c7Kqr,
                       label: block_c7Kqr_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kqr: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7KqE; else goto c7KqD;
       c7KqE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KqD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.841484157 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_closure+2;
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.84247973 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7KqO,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KqO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KqS; else goto c7KqT;
       c7KqS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KqT: // global
           I64[Sp - 16] = block_c7KqL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Kr6; else goto c7KqM;
       u7Kr6: // global
           call _c7KqL(R1) args: 0, res: 0, upd: 0;
       c7KqM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KqL() //  [R1]
         { info_tbl: [(c7KqL,
                       label: block_c7KqL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KqL: // global
           I64[Sp] = block_c7KqR_info;
           _s7Kdx::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdx::I64;
           if (R1 & 7 != 0) goto u7Kr5; else goto c7KqV;
       u7Kr5: // global
           call _c7KqR(R1) args: 0, res: 0, upd: 0;
       c7KqV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KqR() //  [R1]
         { info_tbl: [(c7KqR,
                       label: block_c7KqR_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KqR: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7Kr3; else goto c7Kr4;
       c7Kr3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Kr4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.844191296 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7Kre,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kre: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kri; else goto c7Krj;
       c7Kri: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Krj: // global
           I64[Sp - 16] = block_c7Krb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Krw; else goto c7Krc;
       u7Krw: // global
           call _c7Krb(R1) args: 0, res: 0, upd: 0;
       c7Krc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Krb() //  [R1]
         { info_tbl: [(c7Krb,
                       label: block_c7Krb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Krb: // global
           I64[Sp] = block_c7Krh_info;
           _s7KdG::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdG::I64;
           if (R1 & 7 != 0) goto u7Krv; else goto c7Krl;
       u7Krv: // global
           call _c7Krh(R1) args: 0, res: 0, upd: 0;
       c7Krl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Krh() //  [R1]
         { info_tbl: [(c7Krh,
                       label: block_c7Krh_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Krh: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7Krt; else goto c7Kru;
       c7Krt: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Kru: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.845971971 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7KrE,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KrE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KrI; else goto c7KrJ;
       c7KrI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KrJ: // global
           I64[Sp - 16] = block_c7KrB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Ks2; else goto c7KrC;
       u7Ks2: // global
           call _c7KrB(R1) args: 0, res: 0, upd: 0;
       c7KrC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KrB() //  [R1]
         { info_tbl: [(c7KrB,
                       label: block_c7KrB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KrB: // global
           I64[Sp] = block_c7KrH_info;
           _s7KdP::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdP::I64;
           if (R1 & 7 != 0) goto u7Ks1; else goto c7KrL;
       u7Ks1: // global
           call _c7KrH(R1) args: 0, res: 0, upd: 0;
       c7KrL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KrH() //  [R1]
         { info_tbl: [(c7KrH,
                       label: block_c7KrH_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KrH: // global
           _s7KdP::I64 = I64[Sp + 8];
           _s7KdS::I64 = I64[R1 + 15];
           if (_s7KdP::I64 < _s7KdS::I64) goto c7Ks0; else goto c7KrZ;
       c7KrZ: // global
           if (_s7KdP::I64 == _s7KdS::I64) goto c7Ks0; else goto c7KrW;
       c7Ks0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KrW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.847800167 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7Ksa,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ksa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kse; else goto c7Ksf;
       c7Kse: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ksf: // global
           I64[Sp - 16] = block_c7Ks7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Ksy; else goto c7Ks8;
       u7Ksy: // global
           call _c7Ks7(R1) args: 0, res: 0, upd: 0;
       c7Ks8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ks7() //  [R1]
         { info_tbl: [(c7Ks7,
                       label: block_c7Ks7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ks7: // global
           I64[Sp] = block_c7Ksd_info;
           _s7KdZ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdZ::I64;
           if (R1 & 7 != 0) goto u7Ksx; else goto c7Ksh;
       u7Ksx: // global
           call _c7Ksd(R1) args: 0, res: 0, upd: 0;
       c7Ksh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ksd() //  [R1]
         { info_tbl: [(c7Ksd,
                       label: block_c7Ksd_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ksd: // global
           _s7KdZ::I64 = I64[Sp + 8];
           _s7Ke2::I64 = I64[R1 + 15];
           if (_s7KdZ::I64 < _s7Ke2::I64) goto c7Ksw; else goto c7Ksv;
       c7Ksv: // global
           if (_s7KdZ::I64 == _s7Ke2::I64) goto c7Ksw; else goto c7Kss;
       c7Ksw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Kss: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.849687026 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7KsG,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KsG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KsK; else goto c7KsL;
       c7KsK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KsL: // global
           I64[Sp - 16] = block_c7KsD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Kt4; else goto c7KsE;
       u7Kt4: // global
           call _c7KsD(R1) args: 0, res: 0, upd: 0;
       c7KsE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KsD() //  [R1]
         { info_tbl: [(c7KsD,
                       label: block_c7KsD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KsD: // global
           I64[Sp - 8] = block_c7KsJ_info;
           _s7Ke8::P64 = R1;
           _s7Ke9::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7Ke9::I64;
           P64[Sp + 8] = _s7Ke8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Kt3; else goto c7KsN;
       u7Kt3: // global
           call _c7KsJ(R1) args: 0, res: 0, upd: 0;
       c7KsN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KsJ() //  [R1]
         { info_tbl: [(c7KsJ,
                       label: block_c7KsJ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KsJ: // global
           _s7Ke9::I64 = I64[Sp + 8];
           _s7Keb::P64 = R1;
           _s7Kec::I64 = I64[R1 + 15];
           if (_s7Ke9::I64 < _s7Kec::I64) goto c7Kt2; else goto c7Kt1;
       c7Kt1: // global
           if (_s7Ke9::I64 == _s7Kec::I64) goto c7Kt2; else goto c7KsY;
       c7Kt2: // global
           R1 = _s7Keb::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7KsY: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.851635621 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7Ktc,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ktc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Ktg; else goto c7Kth;
       c7Ktg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Kth: // global
           I64[Sp - 16] = block_c7Kt9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KtA; else goto c7Kta;
       u7KtA: // global
           call _c7Kt9(R1) args: 0, res: 0, upd: 0;
       c7Kta: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kt9() //  [R1]
         { info_tbl: [(c7Kt9,
                       label: block_c7Kt9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kt9: // global
           I64[Sp - 8] = block_c7Ktf_info;
           _s7Kei::P64 = R1;
           _s7Kej::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7Kej::I64;
           P64[Sp + 8] = _s7Kei::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ktz; else goto c7Ktj;
       u7Ktz: // global
           call _c7Ktf(R1) args: 0, res: 0, upd: 0;
       c7Ktj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ktf() //  [R1]
         { info_tbl: [(c7Ktf,
                       label: block_c7Ktf_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ktf: // global
           _s7Kei::P64 = P64[Sp + 16];
           _s7Kej::I64 = I64[Sp + 8];
           _s7Kem::I64 = I64[R1 + 15];
           if (_s7Kej::I64 < _s7Kem::I64) goto c7Kty; else goto c7Ktx;
       c7Ktx: // global
           if (_s7Kej::I64 == _s7Kem::I64) goto c7Kty; else goto c7Ktu;
       c7Kty: // global
           R1 = _s7Kei::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Ktu: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.853165079 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_closure+1;
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.85420338 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr1_closure" {
     GHC.ForeignPtr.castForeignPtr1_closure:
         const GHC.ForeignPtr.castForeignPtr1_info;
 },
 GHC.ForeignPtr.castForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7KtF,
                       label: GHC.ForeignPtr.castForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KtF: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.855091121 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr_closure" {
     GHC.ForeignPtr.castForeignPtr_closure:
         const GHC.ForeignPtr.castForeignPtr_info;
 },
 GHC.ForeignPtr.castForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KtM,
                       label: GHC.ForeignPtr.castForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KtM: // global
           R2 = R2;
           call GHC.ForeignPtr.castForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.856319387 UTC

[section ""data" . GHC.ForeignPtr.plusForeignPtr_closure" {
     GHC.ForeignPtr.plusForeignPtr_closure:
         const GHC.ForeignPtr.plusForeignPtr_info;
 },
 GHC.ForeignPtr.plusForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7KtW,
                       label: GHC.ForeignPtr.plusForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KtW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Ku8; else goto c7Ku9;
       c7Ku8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.plusForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ku9: // global
           I64[Sp - 16] = block_c7KtT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Kuf; else goto c7KtU;
       u7Kuf: // global
           call _c7KtT(R1) args: 0, res: 0, upd: 0;
       c7KtU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KtT() //  [R1]
         { info_tbl: [(c7KtT,
                       label: block_c7KtT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KtT: // global
           I64[Sp - 8] = block_c7KtZ_info;
           _s7Kev::P64 = P64[R1 + 7];
           _s7Keu::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Kev::P64;
           I64[Sp + 8] = _s7Keu::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Kue; else goto c7Ku0;
       u7Kue: // global
           call _c7KtZ(R1) args: 0, res: 0, upd: 0;
       c7Ku0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KtZ() //  [R1]
         { info_tbl: [(c7KtZ,
                       label: block_c7KtZ_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KtZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Kud; else goto c7Kuc;
       c7Kud: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Kuc: // global
           _s7Key::I64 = I64[Sp + 16] + I64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7Key::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.857834169 UTC

[section ""data" . GHC.ForeignPtr.$trModule3_closure" {
     GHC.ForeignPtr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.858492283 UTC

[section ""data" . GHC.ForeignPtr.$trModule1_closure" {
     GHC.ForeignPtr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.859157044 UTC

[section ""data" . GHC.ForeignPtr.$trModule_closure" {
     GHC.ForeignPtr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ForeignPtr.$trModule3_closure+1;
         const GHC.ForeignPtr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.859805265 UTC

[section ""data" . $krep_r7Kba_closure" {
     $krep_r7Kba_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.860498289 UTC

[section ""data" . $krep1_r7Kbb_closure" {
     $krep1_r7Kbb_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.861181819 UTC

[section ""data" . $krep2_r7Kbc_closure" {
     $krep2_r7Kbc_closure:
         const :_con_info;
         const $krep1_r7Kbb_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.861934109 UTC

[section ""data" . $krep3_r7Kbd_closure" {
     $krep3_r7Kbd_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.862607037 UTC

[section ""data" . $krep4_r7Kbe_closure" {
     $krep4_r7Kbe_closure:
         const :_con_info;
         const $krep3_r7Kbd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.864887834 UTC

[section ""data" . $krep5_r7Kbf_closure" {
     $krep5_r7Kbf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_r7Kbe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.865791842 UTC

[section ""data" . $krep6_r7Kbg_closure" {
     $krep6_r7Kbg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.86638924 UTC

[section ""data" . $krep7_r7Kbh_closure" {
     $krep7_r7Kbh_closure:
         const :_con_info;
         const $krep_r7Kba_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.866982634 UTC

[section ""data" . $krep8_r7Kbi_closure" {
     $krep8_r7Kbi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep7_r7Kbh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.867594172 UTC

[section ""data" . $krep9_r7Kbj_closure" {
     $krep9_r7Kbj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWeak#_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.868251599 UTC

[section ""data" . $krep10_r7Kbk_closure" {
     $krep10_r7Kbk_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcAddr#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.868874472 UTC

[section ""cstring" . GHC.ForeignPtr.$tcFinalizers2_bytes" {
     GHC.ForeignPtr.$tcFinalizers2_bytes:
         I8[] [70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.86945558 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers1_closure" {
     GHC.ForeignPtr.$tcFinalizers1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcFinalizers2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.870063602 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers_closure" {
     GHC.ForeignPtr.$tcFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcFinalizers1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2126386461452460014;
         const 14391791758474672075;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.870684026 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers1_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcFinalizers_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.871302619 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'NoFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'NoFinalizers3_bytes:
         I8[] [39,78,111,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.871943558 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers2_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.872514781 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 1940741700794708869;
         const 15606281748314638871;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.8731586 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers1_closure" {
     GHC.ForeignPtr.$tc'CFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.873768332 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'CFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'CFinalizers3_bytes:
         I8[] [39,67,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.874367875 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers2_closure" {
     GHC.ForeignPtr.$tc'CFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'CFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.874932387 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers_closure" {
     GHC.ForeignPtr.$tc'CFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers1_closure+4;
         const 5471016724267814004;
         const 11112927960337249170;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.875555057 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers1_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7Kbf_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.876158515 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes:
         I8[] [39,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.876743826 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers2_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.877390327 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers1_closure+4;
         const 2766439294378598012;
         const 9182349323511249767;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.87804342 UTC

[section ""data" . $krep11_r7Kbl_closure" {
     $krep11_r7Kbl_closure:
         const :_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.878684441 UTC

[section ""data" . $krep12_r7Kbm_closure" {
     $krep12_r7Kbm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7Kbl_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.879296205 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtrContents2_bytes" {
     GHC.ForeignPtr.$tcForeignPtrContents2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114,67,111,110,116,101,110,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.879845465 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents1_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.88044683 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtrContents1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2960910307208088010;
         const 1419315288615932334;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.881087216 UTC

[section ""data" . $krep13_r7Kbn_closure" {
     $krep13_r7Kbn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.881722775 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.8822626 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainPtr3_bytes:
         I8[] [39,80,108,97,105,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.882819646 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.883479935 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr_closure" {
     GHC.ForeignPtr.$tc'PlainPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr1_closure+4;
         const 10386497703892305970;
         const 4483570029522342780;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.884143876 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7Kbm_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.884768747 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes:
         I8[] [39,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.885427423 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.886051683 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 9658214180323125435;
         const 4797612916438137994;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.886699935 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr1_closure" {
     GHC.ForeignPtr.$tc'MallocPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.887284654 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MallocPtr3_bytes" {
     GHC.ForeignPtr.$tc'MallocPtr3_bytes:
         I8[] [39,77,97,108,108,111,99,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.88785892 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr2_closure" {
     GHC.ForeignPtr.$tc'MallocPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MallocPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.888441879 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr_closure" {
     GHC.ForeignPtr.$tc'MallocPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr2_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr1_closure+4;
         const 1358169953258233372;
         const 15155489453511463859;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.889113849 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtr2_bytes" {
     GHC.ForeignPtr.$tcForeignPtr2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.889757838 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr1_closure" {
     GHC.ForeignPtr.$tcForeignPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.890368213 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr_closure" {
     GHC.ForeignPtr.$tcForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13645276010227069957;
         const 424768606850180054;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.892079509 UTC

[section ""data" . $krep14_r7Kbo_closure" {
     $krep14_r7Kbo_closure:
         const :_con_info;
         const $krep6_r7Kbg_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.892757653 UTC

[section ""data" . $krep15_r7Kbp_closure" {
     $krep15_r7Kbp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure+1;
         const $krep14_r7Kbo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.893401244 UTC

[section ""data" . $krep16_r7Kbq_closure" {
     $krep16_r7Kbq_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7Kbn_closure+1;
         const $krep15_r7Kbp_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.893964855 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7Kbk_closure+1;
         const $krep16_r7Kbq_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.894543494 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'ForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'ForeignPtr3_bytes:
         I8[] [39,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.895123836 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'ForeignPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.895753442 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr1_closure+4;
         const 15066988800190837275;
         const 12331496810414125071;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.896372748 UTC

[section ""cstring" . GHC.ForeignPtr.$tcMyWeak2_bytes" {
     GHC.ForeignPtr.$tcMyWeak2_bytes:
         I8[] [77,121,87,101,97,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.896893497 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak1_closure" {
     GHC.ForeignPtr.$tcMyWeak1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcMyWeak2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.897701295 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak_closure" {
     GHC.ForeignPtr.$tcMyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcMyWeak1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18176044154139657744;
         const 6003369520845561213;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.898340924 UTC

[section ""data" . $krep17_r7Kbr_closure" {
     $krep17_r7Kbr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcMyWeak_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.898923091 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak1_closure" {
     GHC.ForeignPtr.$tc'MyWeak1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const $krep17_r7Kbr_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.899562584 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MyWeak3_bytes" {
     GHC.ForeignPtr.$tc'MyWeak3_bytes:
         I8[] [39,77,121,87,101,97,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.900088231 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak2_closure" {
     GHC.ForeignPtr.$tc'MyWeak2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MyWeak3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.90071596 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak_closure" {
     GHC.ForeignPtr.$tc'MyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak2_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak1_closure+4;
         const 12419514784912020020;
         const 3312746660203758866;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.901985882 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr_1_closure" {
     GHC.ForeignPtr.newForeignPtr_1_closure:
         const GHC.ForeignPtr.newForeignPtr_1_info;
 },
 GHC.ForeignPtr.newForeignPtr_1_entry() //  [R2]
         { info_tbl: [(c7Kun,
                       label: GHC.ForeignPtr.newForeignPtr_1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kun: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kuu; else goto c7Kuv;
       c7Kuu: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.newForeignPtr_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Kuv: // global
           I64[Sp - 8] = block_c7Kuk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KuA; else goto c7Kul;
       u7KuA: // global
           call _c7Kuk(R1) args: 0, res: 0, upd: 0;
       c7Kul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kuk() //  [R1]
         { info_tbl: [(c7Kuk,
                       label: block_c7Kuk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kuk: // global
           I64[Sp - 8] = block_c7Kuq_info;
           _s7KeC::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KeC::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kuq() //  [R1]
         { info_tbl: [(c7Kuq,
                       label: block_c7Kuq_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kuq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Kuz; else goto c7Kuy;
       c7Kuz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Kuy: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.903500594 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr__closure" {
     GHC.ForeignPtr.newForeignPtr__closure:
         const GHC.ForeignPtr.newForeignPtr__info;
 },
 GHC.ForeignPtr.newForeignPtr__entry() //  [R2]
         { info_tbl: [(c7KuF,
                       label: GHC.ForeignPtr.newForeignPtr__info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KuF: // global
           R2 = R2;
           call GHC.ForeignPtr.newForeignPtr_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.907167013 UTC

[section ""data" . GHC.ForeignPtr.$winsertCFinalizer_closure" {
     GHC.ForeignPtr.$winsertCFinalizer_closure:
         const GHC.ForeignPtr.$winsertCFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$winsertCFinalizer_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KuJ: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_s7Kf6_entry() //  [R1, R2]
         { info_tbl: [(c7Kvb,
                       label: sat_s7Kf6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kvb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Kvc; else goto c7Kvd;
       c7Kvc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Kvd: // global
           I64[Sp - 16] = block_c7Kv3_info;
           _s7KeZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s7KeZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Kvt; else goto c7Kv4;
       u7Kvt: // global
           call _c7Kv3(R1) args: 0, res: 0, upd: 0;
       c7Kv4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kv3() //  [R1]
         { info_tbl: [(c7Kv3,
                       label: block_c7Kv3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kv3: // global
           _c7Kva::P64 = R1 & 7;
           if (_c7Kva::P64 < 3) goto u7Kvs; else goto c7Kv9;
       u7Kvs: // global
           if (_c7Kva::P64 < 2) goto c7Kv7; else goto c7Kv8;
       c7Kv7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Kv8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7Kvo; else goto c7Kvn;
       c7Kvo: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Kvn: // global
           _s7Kf2::P64 = P64[R1 + 6];
           I64[Hp - 56] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 48] = _s7Kf2::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 39;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Kv9: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$winsertCFinalizer_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7Kvz,
                       label: GHC.ForeignPtr.$winsertCFinalizer_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, True, True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kvz: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7KvA; else goto u7KwK;
       c7KvA: // global
           R1 = GHC.ForeignPtr.$winsertCFinalizer_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       u7KwK: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _c7KuK() args: 0, res: 0, upd: 0;
     }
 },
 _c7KuK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KuK: // global
           _s7KeR::P64 = P64[P64[Sp] + 8];
           I64[Sp - 8] = block_c7KuN_info;
           R1 = _s7KeR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KwS; else goto c7KuO;
       u7KwS: // global
           call _c7KuN(R1) args: 0, res: 0, upd: 0;
       c7KuO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KuN() //  [R1]
         { info_tbl: [(c7KuN,
                       label: block_c7KuN_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KuN: // global
           _c7Kvy::P64 = R1 & 7;
           if (_c7Kvy::P64 < 3) goto u7KwJ; else goto c7Kvx;
       u7KwJ: // global
           if (_c7Kvy::P64 < 2) goto c7Kvv; else goto c7Kvw;
       c7Kvv: // global
           I64[Sp] = block_c7KuS_info;
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 8];
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
       c7Kvw: // global
           I64[Sp] = block_c7Kwx_info;
           R5 = P64[R1 + 6];
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
       c7Kvx: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KuS() //  [R1]
         { info_tbl: [(c7KuS,
                       label: block_c7KuS_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KuS: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7KvI; else goto c7KvH;
       c7KvI: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KvH: // global
           I64[Hp - 88] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.False_closure+1;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 86;
           P64[Hp - 16] = Hp - 55;
           I64[Hp - 8] = sat_s7Kf6_info;
           P64[Hp] = Hp - 31;
           I64[Sp - 8] = block_c7KvC_info;
           R2 = Hp - 7;
           _s7KeV::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s7KeV::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KvC() //  [R1]
         { info_tbl: [(c7KvC,
                       label: block_c7KvC_info
                       rep:StackRep [False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KvC: // global
           I64[Sp] = block_c7KvE_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7KwU; else goto c7KvK;
       u7KwU: // global
           call _c7KvE(R1) args: 0, res: 0, upd: 0;
       c7KvK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KvE() //  [R1]
         { info_tbl: [(c7KvE,
                       label: block_c7KvE_info
                       rep:StackRep [False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KvE: // global
           I64[Sp - 8] = block_c7KvQ_info;
           _s7Kfb::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s7Kfb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KwV; else goto c7Kw3;
       u7KwV: // global
           call _c7KvQ(R1) args: 0, res: 0, upd: 0;
       c7Kw3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KvQ() //  [R1]
         { info_tbl: [(c7KvQ,
                       label: block_c7KvQ_info
                       rep:StackRep [False, False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KvQ: // global
           if (R1 & 7 == 1) goto c7Kwa; else goto c7Kwo;
       c7Kwa: // global
           I64[Sp + 16] = block_c7Kw7_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7KwW; else goto c7Kwb;
       u7KwW: // global
           call _c7Kw7(R1) args: 0, res: 0, upd: 0;
       c7Kwb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Kwo: // global
           I64[Sp] = block_c7Kwi_info;
           R1 = P64[Sp + 16];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kw7() //  [R1]
         { info_tbl: [(c7Kw7,
                       label: block_c7Kw7_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kw7: // global
           P64[Sp] = P64[R1 + 7];
           call _s7Kfd() args: 0, res: 0, upd: 0;
     }
 },
 _c7Kwi() //  []
         { info_tbl: [(c7Kwi,
                       label: block_c7Kwi_info
                       rep:StackRep [False, True, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kwi: // global
           I64[Sp + 16] = block_c7Kwm_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7Kx0; else goto c7Kwq;
       u7Kx0: // global
           call _c7Kwm(R1) args: 0, res: 0, upd: 0;
       c7Kwq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kwm() //  [R1]
         { info_tbl: [(c7Kwm,
                       label: block_c7Kwm_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kwm: // global
           P64[Sp] = P64[R1 + 7];
           call _s7Kfd() args: 0, res: 0, upd: 0;
     }
 },
 _s7Kfd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7Kfd: // global
           _s7Kff::P64 = P64[Sp];
           I64[Sp] = block_c7KvV_info;
           R5 = _s7Kff::P64;
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KvV() //  [R1]
         { info_tbl: [(c7KvV,
                       label: block_c7KvV_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KvV: // global
           if (R1 == 1) goto u7KwN; else goto u7KwO;
       u7KwN: // global
           Sp = Sp + 56;
           call _c7KwE() args: 0, res: 0, upd: 0;
       u7KwO: // global
           Sp = Sp + 8;
           call _c7KwD() args: 0, res: 0, upd: 0;
     }
 },
 _c7Kwx() //  [R1]
         { info_tbl: [(c7Kwx,
                       label: block_c7Kwx_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kwx: // global
           if (R1 == 1) goto u7KwP; else goto u7KwQ;
       u7KwP: // global
           Sp = Sp + 56;
           call _c7KwE() args: 0, res: 0, upd: 0;
       u7KwQ: // global
           Sp = Sp + 8;
           call _c7KwD() args: 0, res: 0, upd: 0;
     }
 },
 _c7KwE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KwE: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KwD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KwD: // global
           P64[Sp] = P64[Sp];
           I64[Sp + 8] = I64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           call _c7KuK() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.912276436 UTC

[section ""cstring" . lvl15_r7Kbs_bytes" {
     lvl15_r7Kbs_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,97,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.913217195 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer2_entry() //  [R1]
         { info_tbl: [(c7Kxd,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kxd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Kxe; else goto c7Kxf;
       c7Kxe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Kxf: // global
           (_c7Kx8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Kx8::I64 == 0) goto c7Kxa; else goto c7Kx9;
       c7Kxa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Kx9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Kx8::I64;
           I64[Sp - 24] = block_c7Kxb_info;
           R2 = lvl15_r7Kbs_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7Kxb() //  [R1]
         { info_tbl: [(c7Kxb,
                       label: block_c7Kxb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kxb: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.91489146 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kxk: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry() //  [R2, R3, R4,
                                                         R5]
         { info_tbl: [(c7Kxw,
                       label: GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kxw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Kxx; else goto c7Kxy;
       c7Kxx: // global
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7Kxy: // global
           I64[Sp - 32] = block_c7Kxo_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7KxJ; else goto c7Kxp;
       u7KxJ: // global
           call _c7Kxo(R1) args: 0, res: 0, upd: 0;
       c7Kxp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kxo() //  [R1]
         { info_tbl: [(c7Kxo,
                       label: block_c7Kxo_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kxo: // global
           _c7Kxv::P64 = R1 & 7;
           if (_c7Kxv::P64 < 3) goto u7KxI; else goto c7Kxu;
       u7KxI: // global
           _s7KfB::I64 = I64[Sp + 8];
           _s7KfC::I64 = I64[Sp + 16];
           _s7KfD::I64 = I64[Sp + 24];
           if (_c7Kxv::P64 < 2) goto c7Kxs; else goto c7Kxt;
       c7Kxs: // global
           R6 = _s7KfD::I64;
           R5 = _s7KfC::I64;
           R4 = 1;
           R3 = _s7KfB::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 24] = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7Kxt: // global
           R6 = _s7KfD::I64;
           R5 = _s7KfC::I64;
           R4 = 1;
           R3 = _s7KfB::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7Kxu: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.916912529 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7KxR,
                       label: GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KxR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Ky0; else goto c7Ky1;
       c7Ky0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ky1: // global
           I64[Sp - 24] = block_c7KxO_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Kya; else goto c7KxP;
       u7Kya: // global
           call _c7KxO(R1) args: 0, res: 0, upd: 0;
       c7KxP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KxO() //  [R1]
         { info_tbl: [(c7KxO,
                       label: block_c7KxO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KxO: // global
           I64[Sp] = block_c7KxU_info;
           _s7KfR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KfR::I64;
           if (R1 & 7 != 0) goto u7Ky9; else goto c7KxV;
       u7Ky9: // global
           call _c7KxU(R1) args: 0, res: 0, upd: 0;
       c7KxV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KxU() //  [R1]
         { info_tbl: [(c7KxU,
                       label: block_c7KxU_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KxU: // global
           I64[Sp] = block_c7KxZ_info;
           _s7KfT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7KfT::I64;
           if (R1 & 7 != 0) goto u7Kyb; else goto c7Ky4;
       u7Kyb: // global
           call _c7KxZ(R1) args: 0, res: 0, upd: 0;
       c7Ky4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KxZ() //  [R1]
         { info_tbl: [(c7KxZ,
                       label: block_c7KxZ_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KxZ: // global
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 15];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.918640479 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Kyg,
                       label: GHC.ForeignPtr.addForeignPtrFinalizerEnv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kyg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.919907967 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizer_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Kyv,
                       label: GHC.ForeignPtr.$waddForeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kyv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Kyw; else goto c7Kyx;
       c7Kyw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Kyx: // global
           I64[Sp - 24] = block_c7Kyn_info;
           R1 = R4;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7KyI; else goto c7Kyo;
       u7KyI: // global
           call _c7Kyn(R1) args: 0, res: 0, upd: 0;
       c7Kyo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kyn() //  [R1]
         { info_tbl: [(c7Kyn,
                       label: block_c7Kyn_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kyn: // global
           _c7Kyu::P64 = R1 & 7;
           if (_c7Kyu::P64 < 3) goto u7KyH; else goto c7Kyt;
       u7KyH: // global
           _s7KfX::I64 = I64[Sp + 8];
           _s7KfY::I64 = I64[Sp + 16];
           if (_c7Kyu::P64 < 2) goto c7Kyr; else goto c7Kys;
       c7Kyr: // global
           R6 = _s7KfY::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7KfX::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 16] = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7Kys: // global
           R6 = _s7KfY::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7KfX::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7Kyt: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.922000676 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer1_entry() //  [R2, R3]
         { info_tbl: [(c7KyQ,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KyQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KyU; else goto c7KyV;
       c7KyU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KyV: // global
           I64[Sp - 16] = block_c7KyN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Kz3; else goto c7KyO;
       u7Kz3: // global
           call _c7KyN(R1) args: 0, res: 0, upd: 0;
       c7KyO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KyN() //  [R1]
         { info_tbl: [(c7KyN,
                       label: block_c7KyN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KyN: // global
           I64[Sp] = block_c7KyT_info;
           _s7Kgb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kgb::I64;
           if (R1 & 7 != 0) goto u7Kz2; else goto c7KyX;
       u7Kz2: // global
           call _c7KyT(R1) args: 0, res: 0, upd: 0;
       c7KyX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KyT() //  [R1]
         { info_tbl: [(c7KyT,
                       label: block_c7KyT_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KyT: // global
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 15];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrFinalizer_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.92347608 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7Kz8,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kz8: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizer1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.924244928 UTC

[section ""cstring" . lvl16_r7Kbt_bytes" {
     lvl16_r7Kbt_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.925076177 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_entry() //  [R1]
         { info_tbl: [(c7Kzj,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kzj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Kzk; else goto c7Kzl;
       c7Kzk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Kzl: // global
           (_c7Kze::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Kze::I64 == 0) goto c7Kzg; else goto c7Kzf;
       c7Kzg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Kzf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Kze::I64;
           I64[Sp - 24] = block_c7Kzh_info;
           R2 = lvl16_r7Kbt_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7Kzh() //  [R1]
         { info_tbl: [(c7Kzh,
                       label: block_c7Kzh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kzh: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.92687697 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry() //  [R2, R3]
         { info_tbl: [(c7Kzw,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kzw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Kzx; else goto c7Kzy;
       c7Kzx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Kzy: // global
           I64[Sp - 16] = block_c7Kzt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KA2; else goto c7Kzu;
       u7KA2: // global
           call _c7Kzt(R1) args: 0, res: 0, upd: 0;
       c7Kzu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Kzt() //  [R1]
         { info_tbl: [(c7Kzt,
                       label: block_c7Kzt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Kzt: // global
           _s7Kgk::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kgk::I64, 0)) goto c7KzU; else goto c7KA0;
       c7KzU: // global
           I64[Sp] = block_c7KzF_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kgk::I64;
           if (R1 & 7 != 0) goto u7KA1; else goto c7KzG;
       u7KA1: // global
           call _c7KzF(R1) args: 0, res: 0, upd: 0;
       c7KzG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7KA0: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KzF() //  [R1]
         { info_tbl: [(c7KzF,
                       label: block_c7KzF_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KzF: // global
           I64[Sp - 8] = block_c7KzK_info;
           _s7Kgn::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7Kgn::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KzK() //  [R1]
         { info_tbl: [(c7KzK,
                       label: block_c7KzK_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KzK: // global
           _s7Kgn::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7KzM_info;
           R2 = _s7Kgn::I64;
           _s7Kgq::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s7Kgq::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KzM() //  [R1]
         { info_tbl: [(c7KzM,
                       label: block_c7KzM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KzM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7KzZ; else goto c7KzY;
       c7KzZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KzY: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.928957917 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes_entry() //  [R2, R3]
         { info_tbl: [(c7KA7,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KA7: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.929817817 UTC

[section ""cstring" . lvl17_r7Kbu_bytes" {
     lvl17_r7Kbu_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.930669114 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes2_entry() //  [R1]
         { info_tbl: [(c7KAi,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KAi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KAj; else goto c7KAk;
       c7KAj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KAk: // global
           (_c7KAd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KAd::I64 == 0) goto c7KAf; else goto c7KAe;
       c7KAf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KAe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KAd::I64;
           I64[Sp - 24] = block_c7KAg_info;
           R2 = lvl17_r7Kbu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KAg() //  [R1]
         { info_tbl: [(c7KAg,
                       label: block_c7KAg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KAg: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.932353216 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes1_entry() //  [R2]
         { info_tbl: [(c7KAv,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KAv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KAw; else goto c7KAx;
       c7KAw: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KAx: // global
           I64[Sp - 8] = block_c7KAs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KAU; else goto c7KAt;
       u7KAU: // global
           call _c7KAs(R1) args: 0, res: 0, upd: 0;
       c7KAt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KAs() //  [R1]
         { info_tbl: [(c7KAs,
                       label: block_c7KAs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KAs: // global
           _s7KgC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KgC::I64, 0)) goto c7KAO; else goto c7KAT;
       c7KAO: // global
           I64[Sp - 8] = block_c7KAE_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KgC::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7KAT: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KAE() //  [R1]
         { info_tbl: [(c7KAE,
                       label: block_c7KAE_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KAE: // global
           I64[Sp] = block_c7KAG_info;
           _s7KgG::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7KgG::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KAG() //  [R1]
         { info_tbl: [(c7KAG,
                       label: block_c7KAG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KAG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7KAS; else goto c7KAR;
       c7KAS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KAR: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.934233831 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes_entry() //  [R2]
         { info_tbl: [(c7KAZ,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KAZ: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.935057273 UTC

[section ""data" . lvl18_r7Kbv_closure" {
     lvl18_r7Kbv_closure:
         const GHC.Types.I#_con_info;
         const 159;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.935701813 UTC

[section ""data" . lvl19_r7Kbw_closure" {
     lvl19_r7Kbw_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.938110058 UTC

[section ""data" . lvl20_r7Kbx_closure" {
     lvl20_r7Kbx_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.938647434 UTC

[section ""data" . lvl21_r7Kby_closure" {
     lvl21_r7Kby_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl18_r7Kbv_closure+1;
         const lvl19_r7Kbw_closure+1;
         const lvl18_r7Kbv_closure+1;
         const lvl20_r7Kbx_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.939269489 UTC

[section ""data" . lvl22_r7Kbz_closure" {
     lvl22_r7Kbz_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl21_r7Kby_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.94010535 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr3_closure" {
     GHC.ForeignPtr.mallocForeignPtr3_closure:
         const GHC.ForeignPtr.mallocForeignPtr3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr3_entry() //  [R1]
         { info_tbl: [(c7KB8,
                       label: GHC.ForeignPtr.mallocForeignPtr3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KB8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KB9; else goto c7KBa;
       c7KB9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KBa: // global
           (_c7KB5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KB5::I64 == 0) goto c7KB7; else goto c7KB6;
       c7KB7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KB6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KB5::I64;
           R2 = lvl22_r7Kbz_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.941613864 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr1_closure" {
     GHC.ForeignPtr.mallocForeignPtr1_closure:
         const GHC.ForeignPtr.mallocForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7KBh,
                       label: GHC.ForeignPtr.mallocForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KBh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7KBl; else goto c7KBm;
       c7KBl: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KBm: // global
           I64[Sp - 16] = block_c7KBf_info;
           _s7KgO::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           P64[Sp - 8] = _s7KgO::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7KBf() //  [R1]
         { info_tbl: [(c7KBf,
                       label: block_c7KBf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KBf: // global
           I64[Sp] = block_c7KBk_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7KBk() //  [R1]
         { info_tbl: [(c7KBk,
                       label: block_c7KBk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KBk: // global
           _s7KgT::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KgT::I64, 0)) goto c7KBF; else goto c7KBK;
       c7KBF: // global
           I64[Sp - 8] = block_c7KBv_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KgT::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7KBK: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KBv() //  [R1]
         { info_tbl: [(c7KBv,
                       label: block_c7KBv_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KBv: // global
           _s7KgT::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7KBx_info;
           R2 = I64[Sp + 16];
           _s7KgX::P64 = R1;
           R1 = _s7KgT::I64;
           P64[Sp + 16] = _s7KgX::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KBx() //  [R1]
         { info_tbl: [(c7KBx,
                       label: block_c7KBx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KBx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7KBJ; else goto c7KBI;
       c7KBJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KBI: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.943477162 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr_closure" {
     GHC.ForeignPtr.mallocForeignPtr_closure:
         const GHC.ForeignPtr.mallocForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KBP,
                       label: GHC.ForeignPtr.mallocForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KBP: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.944366922 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer3_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer3_entry() //  [R2]
         { info_tbl: [(c7KBX,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KBX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KC1; else goto c7KC0;
       c7KC1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KC0: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.945685359 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer4_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry() //  [R2]
         { info_tbl: [(c7KCd,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KCd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KCe; else goto u7KCp;
       c7KCe: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7KCp: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c7KC3() args: 0, res: 0, upd: 0;
     }
 },
 _c7KC3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KC3: // global
           _s7Kh6::P64 = P64[Sp];
           I64[Sp] = block_c7KC6_info;
           R1 = _s7Kh6::P64;
           if (R1 & 7 != 0) goto u7KCr; else goto c7KC7;
       u7KCr: // global
           call _c7KC6(R1) args: 0, res: 0, upd: 0;
       c7KC7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KC6() //  [R1]
         { info_tbl: [(c7KC6,
                       label: block_c7KC6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KC6: // global
           if (R1 & 7 == 1) goto c7KCa; else goto c7KCb;
       c7KCa: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KCb: // global
           I64[Sp - 8] = block_c7KCl_info;
           _s7Kha::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7Kha::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KCl() //  []
         { info_tbl: [(c7KCl,
                       label: block_c7KCl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KCl: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7KC3() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.947545774 UTC

[section ""data" . GHC.ForeignPtr.$wforeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$wforeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$wforeignPtrFinalizer_info;
 },
 GHC.ForeignPtr.$wforeignPtrFinalizer_entry() //  [R2]
         { info_tbl: [(c7KCI,
                       label: GHC.ForeignPtr.$wforeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KCI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KCJ; else goto c7KCK;
       c7KCJ: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$wforeignPtrFinalizer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KCK: // global
           I64[Sp - 8] = block_c7KCy_info;
           _s7Khe::P64 = R2;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           R1 = _s7Khe::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KCy() //  [R1]
         { info_tbl: [(c7KCy,
                       label: block_c7KCy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KCy: // global
           I64[Sp] = block_c7KCA_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7KD7; else goto c7KCB;
       u7KD7: // global
           call _c7KCA(R1) args: 0, res: 0, upd: 0;
       c7KCB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KCA() //  [R1]
         { info_tbl: [(c7KCA,
                       label: block_c7KCA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KCA: // global
           _c7KCH::P64 = R1 & 7;
           if (_c7KCH::P64 < 3) goto u7KD4; else goto c7KCG;
       u7KD4: // global
           if (_c7KCH::P64 < 2) goto u7KD5; else goto c7KCF;
       u7KD5: // global
           Sp = Sp + 8;
           call _c7KCZ() args: 0, res: 0, upd: 0;
       c7KCF: // global
           I64[Sp] = block_c7KCR_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7KCG: // global
           R2 = P64[R1 + 5];
           Sp = Sp + 8;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7KCR() //  [R1, R2]
         { info_tbl: [(c7KCR,
                       label: block_c7KCR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KCR: // global
           if (R1 == 1) goto c7KD0; else goto u7KD6;
       c7KD0: // global
           R1 = R2;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       u7KD6: // global
           Sp = Sp + 8;
           call _c7KCZ() args: 0, res: 0, upd: 0;
     }
 },
 _c7KCZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KCZ: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.949371425 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr2_closure" {
     GHC.ForeignPtr.finalizeForeignPtr2_closure:
         const GHC.ForeignPtr.finalizeForeignPtr2_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr2_entry() //  [R2]
         { info_tbl: [(c7KDh,
                       label: GHC.ForeignPtr.finalizeForeignPtr2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KDh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KDi; else goto c7KDj;
       c7KDi: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KDj: // global
           I64[Sp - 8] = block_c7KDe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KDn; else goto c7KDf;
       u7KDn: // global
           call _c7KDe(R1) args: 0, res: 0, upd: 0;
       c7KDf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KDe() //  [R1]
         { info_tbl: [(c7KDe,
                       label: block_c7KDe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KDe: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.950720984 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr1_closure" {
     GHC.ForeignPtr.finalizeForeignPtr1_closure:
         const GHC.ForeignPtr.finalizeForeignPtr1_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7KDv,
                       label: GHC.ForeignPtr.finalizeForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KDv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KDw; else goto c7KDx;
       c7KDw: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KDx: // global
           I64[Sp - 8] = block_c7KDs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KDU; else goto c7KDt;
       u7KDU: // global
           call _c7KDs(R1) args: 0, res: 0, upd: 0;
       c7KDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KDs() //  [R1]
         { info_tbl: [(c7KDs,
                       label: block_c7KDs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KDs: // global
           I64[Sp] = block_c7KDA_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u7KDT; else goto c7KDC;
       u7KDT: // global
           call _c7KDA(R1) args: 0, res: 0, upd: 0;
       c7KDC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KDA() //  [R1]
         { info_tbl: [(c7KDA,
                       label: block_c7KDA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KDA: // global
           _c7KDR::P64 = R1 & 7;
           if (_c7KDR::P64 < 3) goto u7KDS; else goto c7KDQ;
       u7KDS: // global
           if (_c7KDR::P64 < 2) goto c7KDI; else goto c7KDM;
       c7KDI: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7KDM: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7KDQ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.952150842 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr_closure" {
     GHC.ForeignPtr.finalizeForeignPtr_closure:
         const GHC.ForeignPtr.finalizeForeignPtr_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KDZ,
                       label: GHC.ForeignPtr.finalizeForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KDZ: // global
           R2 = R2;
           call GHC.ForeignPtr.finalizeForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.9528654 UTC

[section ""cstring" . lvl23_r7KbA_bytes" {
     lvl23_r7KbA_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.953936874 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer2_entry() //  [R1]
         { info_tbl: [(c7KEa,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KEa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KEb; else goto c7KEc;
       c7KEb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KEc: // global
           (_c7KE5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KE5::I64 == 0) goto c7KE7; else goto c7KE6;
       c7KE7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KE6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KE5::I64;
           I64[Sp - 24] = block_c7KE8_info;
           R2 = lvl23_r7KbA_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KE8() //  [R1]
         { info_tbl: [(c7KE8,
                       label: block_c7KE8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KE8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.958104491 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info;
         const 0;
 },
 sat_s7KhU_entry() //  [R1, R2]
         { info_tbl: [(c7KEF,
                       label: sat_s7KhU_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KEF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KEG; else goto c7KEH;
       c7KEG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KEH: // global
           I64[Sp - 24] = block_c7KEx_info;
           _s7KhH::P64 = P64[R1 + 7];
           _s7KhN::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7KhH::P64;
           P64[Sp - 8] = _s7KhN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7KEX; else goto c7KEy;
       u7KEX: // global
           call _c7KEx(R1) args: 0, res: 0, upd: 0;
       c7KEy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KEx() //  [R1]
         { info_tbl: [(c7KEx,
                       label: block_c7KEx_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KEx: // global
           _c7KEE::P64 = R1 & 7;
           if (_c7KEE::P64 < 3) goto u7KEW; else goto c7KED;
       u7KEW: // global
           if (_c7KEE::P64 < 2) goto c7KEB; else goto c7KEC;
       c7KEB: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KEC: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7KED: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7KEV; else goto c7KEU;
       c7KEV: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KEU: // global
           _s7KhR::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7KhR::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Ki0_entry() //  [R1]
         { info_tbl: [(c7KFb,
                       label: sat_s7Ki0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KFb: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Kif_entry() //  [R1, R2]
         { info_tbl: [(c7KFw,
                       label: sat_s7Kif_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KFw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KFx; else goto c7KFy;
       c7KFx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KFy: // global
           I64[Sp - 24] = block_c7KFo_info;
           _s7KhH::P64 = P64[R1 + 7];
           _s7Ki8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7KhH::P64;
           P64[Sp - 8] = _s7Ki8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7KFO; else goto c7KFp;
       u7KFO: // global
           call _c7KFo(R1) args: 0, res: 0, upd: 0;
       c7KFp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KFo() //  [R1]
         { info_tbl: [(c7KFo,
                       label: block_c7KFo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KFo: // global
           _c7KFv::P64 = R1 & 7;
           if (_c7KFv::P64 < 3) goto u7KFN; else goto c7KFu;
       u7KFN: // global
           if (_c7KFv::P64 < 2) goto c7KFs; else goto c7KFt;
       c7KFs: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KFt: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7KFu: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7KFM; else goto c7KFL;
       c7KFM: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KFL: // global
           _s7Kic::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7Kic::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7KiO_entry() //  [R1]
         { info_tbl: [(c7KGc,
                       label: sat_s7KiO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KGc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KGd; else goto c7KGe;
       c7KGd: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7KGe: // global
           I64[Sp - 16] = block_c7KG2_info;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           _s7KhJ::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s7KhJ::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KG2() //  [R1]
         { info_tbl: [(c7KG2,
                       label: block_c7KG2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KG2: // global
           I64[Sp] = block_c7KG4_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7KHc; else goto c7KG5;
       u7KHc: // global
           call _c7KG4(R1) args: 0, res: 0, upd: 0;
       c7KG5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KG4() //  [R1]
         { info_tbl: [(c7KG4,
                       label: block_c7KG4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KG4: // global
           _c7KGb::P64 = R1 & 7;
           if (_c7KGb::P64 < 3) goto u7KH9; else goto c7KGa;
       u7KH9: // global
           if (_c7KGb::P64 < 2) goto c7KG8; else goto c7KG9;
       c7KG8: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KG9: // global
           I64[Sp] = block_c7KGl_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7KGa: // global
           P64[Sp] = P64[R1 + 5];
           call _c7KGM() args: 0, res: 0, upd: 0;
     }
 },
 _c7KGl() //  [R1, R2]
         { info_tbl: [(c7KGl,
                       label: block_c7KGl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KGl: // global
           if (R1 == 1) goto c7KGx; else goto c7KGt;
       c7KGx: // global
           I64[Sp] = block_c7KGw_info;
           R1 = R2;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c7KGt: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KGw() //  []
         { info_tbl: [(c7KGw,
                       label: block_c7KGw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KGw: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KGM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KGM: // global
           _s7KiG::P64 = P64[Sp];
           I64[Sp] = block_c7KGO_info;
           R1 = _s7KiG::P64;
           if (R1 & 7 != 0) goto u7KHe; else goto c7KGQ;
       u7KHe: // global
           call _c7KGO(R1) args: 0, res: 0, upd: 0;
       c7KGQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KGO() //  [R1]
         { info_tbl: [(c7KGO,
                       label: block_c7KGO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KGO: // global
           if (R1 & 7 == 1) goto c7KGW; else goto c7KH1;
       c7KGW: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KH1: // global
           I64[Sp - 8] = block_c7KGZ_info;
           _s7KiK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7KiK::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KGZ() //  []
         { info_tbl: [(c7KGZ,
                       label: block_c7KGZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KGZ: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7KGM() args: 0, res: 0, upd: 0;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7KHl,
                       label: GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KHl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7KHm; else goto c7KHn;
       c7KHm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KHn: // global
           I64[Sp - 16] = block_c7KEk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KI4; else goto c7KEl;
       u7KI4: // global
           call _c7KEk(R1) args: 0, res: 0, upd: 0;
       c7KEl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KEk() //  [R1]
         { info_tbl: [(c7KEk,
                       label: block_c7KEk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KEk: // global
           _c7KHk::P64 = R1 & 7;
           if (_c7KHk::P64 < 3) goto u7KHX; else goto c7KHj;
       u7KHX: // global
           _s7KhH::P64 = P64[Sp + 8];
           if (_c7KHk::P64 < 2) goto c7KHh; else goto c7KHi;
       c7KHh: // global
           Hp = Hp + 88;
           _s7KhJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7KHF; else goto c7KHp;
       c7KHp: // global
           _s7KhK::P64 = P64[_s7KhJ::P64 + 7];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7KhH::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7KhU_info;
           P64[Hp - 8] = _s7KhH::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7KEY_info;
           R2 = Hp - 15;
           R1 = _s7KhK::P64;
           P64[Sp + 8] = _s7KhK::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7KHi: // global
           Hp = Hp + 88;
           _s7KhJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7KHF; else goto c7KHE;
       c7KHF: // global
           HpAlloc = 88;
           R1 = _s7KhJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KHE: // global
           _s7Ki4::P64 = P64[_s7KhJ::P64 + 6];
           _s7Ki5::P64 = P64[_s7KhJ::P64 + 14];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7KhH::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7Kif_info;
           P64[Hp - 8] = _s7KhH::P64;
           P64[Hp] = Hp - 39;
           I64[Sp - 16] = block_c7KFP_info;
           R2 = Hp - 15;
           R1 = _s7Ki5::P64;
           P64[Sp - 8] = _s7Ki5::P64;
           P64[Sp] = _s7Ki4::P64;
           P64[Sp + 8] = _s7KhJ::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7KHj: // global
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KEY() //  [R1]
         { info_tbl: [(c7KEY,
                       label: block_c7KEY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KEY: // global
           I64[Sp] = block_c7KF0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7KI0; else goto c7KF1;
       u7KI0: // global
           call _c7KF0(R1) args: 0, res: 0, upd: 0;
       c7KF1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KF0() //  [R1]
         { info_tbl: [(c7KF0,
                       label: block_c7KF0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KF0: // global
           if (R1 & 7 == 1) goto u7KHY; else goto c7KHx;
       u7KHY: // global
           Sp = Sp + 16;
           call _c7KHK() args: 0, res: 0, upd: 0;
       c7KHx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KHA; else goto c7KHz;
       c7KHA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KHz: // global
           I64[Hp - 8] = sat_s7Ki0_info;
           _s7KhK::P64 = P64[Sp + 8];
           P64[Hp] = _s7KhK::P64;
           I64[Sp + 8] = block_c7KHw_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7KhK::P64;
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KHw() //  []
         { info_tbl: [(c7KHw,
                       label: block_c7KHw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KHw: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KFP() //  [R1]
         { info_tbl: [(c7KFP,
                       label: block_c7KFP_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KFP: // global
           I64[Sp] = block_c7KFR_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7KI2; else goto c7KFS;
       u7KI2: // global
           call _c7KFR(R1) args: 0, res: 0, upd: 0;
       c7KFS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KFR() //  [R1]
         { info_tbl: [(c7KFR,
                       label: block_c7KFR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KFR: // global
           if (R1 & 7 == 1) goto u7KHZ; else goto c7KHM;
       u7KHZ: // global
           Sp = Sp + 32;
           call _c7KHK() args: 0, res: 0, upd: 0;
       c7KHM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KHP; else goto c7KHO;
       c7KHP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KHO: // global
           I64[Hp - 16] = sat_s7KiO_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_c7KHL_info;
           R3 = Hp - 15;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KHK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KHK: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KHL() //  []
         { info_tbl: [(c7KHL,
                       label: block_c7KHL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KHL: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.965014168 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry() //  [R2, R3]
         { info_tbl: [(c7KIc,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KIc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KId; else goto c7KIe;
       c7KId: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KIe: // global
           I64[Sp - 16] = block_c7KI9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KIi; else goto c7KIa;
       u7KIi: // global
           call _c7KI9(R1) args: 0, res: 0, upd: 0;
       c7KIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KI9() //  [R1]
         { info_tbl: [(c7KI9,
                       label: block_c7KI9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KI9: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.966265408 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7KIn,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KIn: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.968316712 UTC

[section ""data" . GHC.ForeignPtr.$wnewConcForeignPtr_closure" {
     GHC.ForeignPtr.$wnewConcForeignPtr_closure:
         const GHC.ForeignPtr.$wnewConcForeignPtr_info;
         const 0;
 },
 sat_s7Kjf_entry() //  [R1, R2]
         { info_tbl: [(c7KIM,
                       label: sat_s7Kjf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KIM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KIN; else goto c7KIO;
       c7KIN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KIO: // global
           I64[Sp - 24] = block_c7KIE_info;
           _s7Kj1::P64 = P64[R1 + 7];
           _s7Kj8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7Kj1::P64;
           P64[Sp - 8] = _s7Kj8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7KJ4; else goto c7KIF;
       u7KJ4: // global
           call _c7KIE(R1) args: 0, res: 0, upd: 0;
       c7KIF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KIE() //  [R1]
         { info_tbl: [(c7KIE,
                       label: block_c7KIE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KIE: // global
           _c7KIL::P64 = R1 & 7;
           if (_c7KIL::P64 < 3) goto u7KJ3; else goto c7KIK;
       u7KJ3: // global
           if (_c7KIL::P64 < 2) goto c7KII; else goto c7KIJ;
       c7KII: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KIJ: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7KIK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7KJ2; else goto c7KJ1;
       c7KJ2: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KJ1: // global
           _s7Kjc::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7Kjc::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Kjn_entry() //  [R1]
         { info_tbl: [(c7KJi,
                       label: sat_s7Kjn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KJi: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$wnewConcForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7KJp,
                       label: GHC.ForeignPtr.$wnewConcForeignPtr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KJp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KJq; else goto c7KJr;
       c7KJq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$wnewConcForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KJr: // global
           I64[Sp - 24] = block_c7KIu_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KIu() //  [R1]
         { info_tbl: [(c7KIu,
                       label: block_c7KIu_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KIu: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c7KJu; else goto c7KJt;
       c7KJu: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KJt: // global
           I64[Hp - 80] = :_con_info;
           _s7Kj1::P64 = P64[Sp + 16];
           P64[Hp - 72] = _s7Kj1::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7Kjf_info;
           P64[Hp - 8] = _s7Kj1::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7KJ5_info;
           R2 = Hp - 15;
           _s7Kj5::P64 = R1;
           R1 = R1;
           P64[Sp + 16] = _s7Kj5::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KJ5() //  [R1]
         { info_tbl: [(c7KJ5,
                       label: block_c7KJ5_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KJ5: // global
           I64[Sp] = block_c7KJ7_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7KJM; else goto c7KJ8;
       u7KJM: // global
           call _c7KJ7(R1) args: 0, res: 0, upd: 0;
       c7KJ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KJ7() //  [R1]
         { info_tbl: [(c7KJ7,
                       label: block_c7KJ7_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KJ7: // global
           _s7Kj5::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7KJm; else goto c7KJn;
       c7KJm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7KJB; else goto c7KJA;
       c7KJB: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KJA: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = _s7Kj5::P64;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KJn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KJI; else goto c7KJH;
       c7KJI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KJH: // global
           I64[Hp - 8] = sat_s7Kjn_info;
           P64[Hp] = _s7Kj5::P64;
           I64[Sp] = block_c7KJC_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7Kj5::P64;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KJC() //  [R1]
         { info_tbl: [(c7KJC,
                       label: block_c7KJC_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KJC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7KJL; else goto c7KJK;
       c7KJL: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KJK: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.971932258 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr1_closure" {
     GHC.ForeignPtr.newConcForeignPtr1_closure:
         const GHC.ForeignPtr.newConcForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr1_entry() //  [R2, R3]
         { info_tbl: [(c7KJU,
                       label: GHC.ForeignPtr.newConcForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KJV; else goto c7KJW;
       c7KJV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.newConcForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KJW: // global
           I64[Sp - 16] = block_c7KJR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KK0; else goto c7KJS;
       u7KK0: // global
           call _c7KJR(R1) args: 0, res: 0, upd: 0;
       c7KJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KJR() //  [R1]
         { info_tbl: [(c7KJR,
                       label: block_c7KJR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KJR: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$wnewConcForeignPtr_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.973162257 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr_closure" {
     GHC.ForeignPtr.newConcForeignPtr_closure:
         const GHC.ForeignPtr.newConcForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7KK5,
                       label: GHC.ForeignPtr.newConcForeignPtr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KK5: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.newConcForeignPtr1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.974384205 UTC

[section ""data" . GHC.ForeignPtr.MyWeak_closure" {
     GHC.ForeignPtr.MyWeak_closure:
         const GHC.ForeignPtr.MyWeak_info;
 },
 GHC.ForeignPtr.MyWeak_entry() //  [R2]
         { info_tbl: [(c7KKd,
                       label: GHC.ForeignPtr.MyWeak_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KKd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KKh; else goto c7KKg;
       c7KKh: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.MyWeak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KKg: // global
           I64[Hp - 8] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.975416398 UTC

[section ""data" . GHC.ForeignPtr.PlainForeignPtr_closure" {
     GHC.ForeignPtr.PlainForeignPtr_closure:
         const GHC.ForeignPtr.PlainForeignPtr_info;
 },
 GHC.ForeignPtr.PlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KKn,
                       label: GHC.ForeignPtr.PlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KKn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KKr; else goto c7KKq;
       c7KKr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KKq: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.976491361 UTC

[section ""data" . GHC.ForeignPtr.MallocPtr_closure" {
     GHC.ForeignPtr.MallocPtr_closure:
         const GHC.ForeignPtr.MallocPtr_info;
 },
 GHC.ForeignPtr.MallocPtr_entry() //  [R2, R3]
         { info_tbl: [(c7KKx,
                       label: GHC.ForeignPtr.MallocPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KKx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KKB; else goto c7KKA;
       c7KKB: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.MallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KKA: // global
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.977582391 UTC

[section ""data" . GHC.ForeignPtr.PlainPtr_closure" {
     GHC.ForeignPtr.PlainPtr_closure:
         const GHC.ForeignPtr.PlainPtr_info;
 },
 GHC.ForeignPtr.PlainPtr_entry() //  [R2]
         { info_tbl: [(c7KKH,
                       label: GHC.ForeignPtr.PlainPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KKH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KKL; else goto c7KKK;
       c7KKL: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KKK: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.978585306 UTC

[section ""data" . GHC.ForeignPtr.NoFinalizers_closure" {
     GHC.ForeignPtr.NoFinalizers_closure:
         const GHC.ForeignPtr.NoFinalizers_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.97939172 UTC

[section ""data" . GHC.ForeignPtr.CFinalizers_closure" {
     GHC.ForeignPtr.CFinalizers_closure:
         const GHC.ForeignPtr.CFinalizers_info;
 },
 GHC.ForeignPtr.CFinalizers_entry() //  [R2]
         { info_tbl: [(c7KKR,
                       label: GHC.ForeignPtr.CFinalizers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KKR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KKV; else goto c7KKU;
       c7KKV: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.CFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KKU: // global
           I64[Hp - 8] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.980473564 UTC

[section ""data" . GHC.ForeignPtr.HaskellFinalizers_closure" {
     GHC.ForeignPtr.HaskellFinalizers_closure:
         const GHC.ForeignPtr.HaskellFinalizers_info;
 },
 GHC.ForeignPtr.HaskellFinalizers_entry() //  [R2]
         { info_tbl: [(c7KL1,
                       label: GHC.ForeignPtr.HaskellFinalizers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KL1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KL5; else goto c7KL4;
       c7KL5: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.HaskellFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KL4: // global
           I64[Hp - 8] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.981649485 UTC

[section ""data" . GHC.ForeignPtr.ForeignPtr_closure" {
     GHC.ForeignPtr.ForeignPtr_closure:
         const GHC.ForeignPtr.ForeignPtr_info;
 },
 GHC.ForeignPtr.ForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7KLb,
                       label: GHC.ForeignPtr.ForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KLf; else goto c7KLe;
       c7KLf: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.ForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KLe: // global
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.984577817 UTC

[GHC.ForeignPtr.MyWeak_con_entry() //  [R1]
         { info_tbl: [(c7KLg,
                       label: GHC.ForeignPtr.MyWeak_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,121,87,101,97,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.985360834 UTC

[GHC.ForeignPtr.PlainForeignPtr_con_entry() //  [R1]
         { info_tbl: [(c7KLh,
                       label: GHC.ForeignPtr.PlainForeignPtr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.986114966 UTC

[GHC.ForeignPtr.MallocPtr_con_entry() //  [R1]
         { info_tbl: [(c7KLi,
                       label: GHC.ForeignPtr.MallocPtr_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,97,108,108,111,99,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLi: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.986786425 UTC

[GHC.ForeignPtr.PlainPtr_con_entry() //  [R1]
         { info_tbl: [(c7KLj,
                       label: GHC.ForeignPtr.PlainPtr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLj: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.987483785 UTC

[GHC.ForeignPtr.NoFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7KLk,
                       label: GHC.ForeignPtr.NoFinalizers_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,78,111,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.988181697 UTC

[GHC.ForeignPtr.CFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7KLl,
                       label: GHC.ForeignPtr.CFinalizers_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,67,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLl: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.988973746 UTC

[GHC.ForeignPtr.HaskellFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7KLm,
                       label: GHC.ForeignPtr.HaskellFinalizers_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLm: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.989885176 UTC

[GHC.ForeignPtr.ForeignPtr_con_entry() //  [R1]
         { info_tbl: [(c7KLn,
                       label: GHC.ForeignPtr.ForeignPtr_con_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,70,111,114,101,105,103,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.99056588 UTC

[section ""relreadonly" . S7KkP_srt" {
     S7KkP_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r7Kb5_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ForeignPtr.mallocForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
         const GHC.ForeignPtr.$fShowForeignPtr1_closure;
         const GHC.ForeignPtr.noMixingError_closure;
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const lvl22_r7Kbz_closure;
         const GHC.ForeignPtr.mallocForeignPtr1_closure;
         const GHC.ForeignPtr.mallocForeignPtr3_closure;
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
         const GHC.ForeignPtr.$wnewConcForeignPtr_closure;
         const GHC.ForeignPtr.newConcForeignPtr1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.991283622 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:49.99220436 UTC

[section ""data" . GHC.ForeignPtr.$WPlainForeignPtr_closure" {
     GHC.ForeignPtr.$WPlainForeignPtr_closure:
         const GHC.ForeignPtr.$WPlainForeignPtr_info;
 },
 GHC.ForeignPtr.$WPlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KLv,
                       label: GHC.ForeignPtr.$WPlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KLz; else goto c7KLA;
       c7KLz: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$WPlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KLA: // global
           I64[Sp - 8] = block_c7KLs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KLE; else goto c7KLt;
       u7KLE: // global
           call _c7KLs(R1) args: 0, res: 0, upd: 0;
       c7KLt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KLs() //  [R1]
         { info_tbl: [(c7KLs,
                       label: block_c7KLs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KLD; else goto c7KLC;
       c7KLD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KLC: // global
           _s7KbE::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _s7KbE::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.993672774 UTC

[section ""data" . GHC.ForeignPtr.$WMallocPtr_closure" {
     GHC.ForeignPtr.$WMallocPtr_closure:
         const GHC.ForeignPtr.$WMallocPtr_info;
 },
 GHC.ForeignPtr.$WMallocPtr_entry() //  [R2, R3]
         { info_tbl: [(c7KLM,
                       label: GHC.ForeignPtr.$WMallocPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KLQ; else goto c7KLR;
       c7KLQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$WMallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KLR: // global
           I64[Sp - 16] = block_c7KLJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KLV; else goto c7KLK;
       u7KLV: // global
           call _c7KLJ(R1) args: 0, res: 0, upd: 0;
       c7KLK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KLJ() //  [R1]
         { info_tbl: [(c7KLJ,
                       label: block_c7KLJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KLJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KLU; else goto c7KLT;
       c7KLU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KLT: // global
           _s7KbI::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7KbI::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.994817729 UTC

[section ""cstring" . lvl_r7KaV_bytes" {
     lvl_r7KaV_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.995577117 UTC

[section ""data" . lvl1_r7KaW_closure" {
     lvl1_r7KaW_closure:
         const lvl1_r7KaW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r7KaW_entry() //  [R1]
         { info_tbl: [(c7KM2,
                       label: lvl1_r7KaW_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KM2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KM3; else goto c7KM4;
       c7KM3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KM4: // global
           (_c7KLZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KLZ::I64 == 0) goto c7KM1; else goto c7KM0;
       c7KM1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KM0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KLZ::I64;
           R2 = lvl_r7KaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.996501442 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule4_bytes" {
     GHC.ForeignPtr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.997274897 UTC

[section ""data" . lvl2_r7KaX_closure" {
     lvl2_r7KaX_closure:
         const lvl2_r7KaX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r7KaX_entry() //  [R1]
         { info_tbl: [(c7KMb,
                       label: lvl2_r7KaX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KMb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KMc; else goto c7KMd;
       c7KMc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KMd: // global
           (_c7KM8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KM8::I64 == 0) goto c7KMa; else goto c7KM9;
       c7KMa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KM9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KM8::I64;
           R2 = GHC.ForeignPtr.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.998214205 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule2_bytes" {
     GHC.ForeignPtr.$trModule2_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.99894062 UTC

[section ""data" . lvl3_r7KaY_closure" {
     lvl3_r7KaY_closure:
         const lvl3_r7KaY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r7KaY_entry() //  [R1]
         { info_tbl: [(c7KMk,
                       label: lvl3_r7KaY_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KMk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KMl; else goto c7KMm;
       c7KMl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KMm: // global
           (_c7KMh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KMh::I64 == 0) goto c7KMj; else goto c7KMi;
       c7KMj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KMi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KMh::I64;
           R2 = GHC.ForeignPtr.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:49.999794457 UTC

[section ""cstring" . lvl4_r7KaZ_bytes" {
     lvl4_r7KaZ_bytes:
         I8[] [46,47,71,72,67,47,70,111,114,101,105,103,110,80,116,114,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.000529165 UTC

[section ""data" . lvl5_r7Kb0_closure" {
     lvl5_r7Kb0_closure:
         const lvl5_r7Kb0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r7Kb0_entry() //  [R1]
         { info_tbl: [(c7KMt,
                       label: lvl5_r7Kb0_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KMt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KMu; else goto c7KMv;
       c7KMu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KMv: // global
           (_c7KMq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KMq::I64 == 0) goto c7KMs; else goto c7KMr;
       c7KMs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KMr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KMq::I64;
           R2 = lvl4_r7KaZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.001682336 UTC

[section ""data" . lvl6_r7Kb1_closure" {
     lvl6_r7Kb1_closure:
         const GHC.Types.I#_con_info;
         const 214;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.002237597 UTC

[section ""data" . lvl7_r7Kb2_closure" {
     lvl7_r7Kb2_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.00276186 UTC

[section ""data" . lvl8_r7Kb3_closure" {
     lvl8_r7Kb3_closure:
         const GHC.Types.I#_con_info;
         const 43;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.003311996 UTC

[section ""data" . lvl9_r7Kb4_closure" {
     lvl9_r7Kb4_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl6_r7Kb1_closure+1;
         const lvl7_r7Kb2_closure+1;
         const lvl6_r7Kb1_closure+1;
         const lvl8_r7Kb3_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.003923251 UTC

[section ""data" . lvl10_r7Kb5_closure" {
     lvl10_r7Kb5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl9_r7Kb4_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.004724267 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr2_entry() //  [R1]
         { info_tbl: [(c7KMC,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KMC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KMD; else goto c7KME;
       c7KMD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KME: // global
           (_c7KMz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KMz::I64 == 0) goto c7KMB; else goto c7KMA;
       c7KMB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KMA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KMz::I64;
           R2 = lvl10_r7Kb5_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.005716088 UTC

[section ""cstring" . lvl11_r7Kb6_bytes" {
     lvl11_r7Kb6_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.00650203 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr2_closure" {
     GHC.ForeignPtr.mallocForeignPtr2_closure:
         const GHC.ForeignPtr.mallocForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr2_entry() //  [R1]
         { info_tbl: [(c7KMN,
                       label: GHC.ForeignPtr.mallocForeignPtr2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KMN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KMO; else goto c7KMP;
       c7KMO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KMP: // global
           (_c7KMI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KMI::I64 == 0) goto c7KMK; else goto c7KMJ;
       c7KMK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KMJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KMI::I64;
           I64[Sp - 24] = block_c7KML_info;
           R2 = lvl11_r7Kb6_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KML() //  [R1]
         { info_tbl: [(c7KML,
                       label: block_c7KML_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KML: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.008085571 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7KMZ,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KMZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7KN3; else goto c7KN4;
       c7KN3: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KN4: // global
           I64[Sp - 16] = block_c7KMX_info;
           _s7KbK::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           P64[Sp - 8] = _s7KbK::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7KMX() //  [R1]
         { info_tbl: [(c7KMX,
                       label: block_c7KMX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KMX: // global
           I64[Sp] = block_c7KN2_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7KN2() //  [R1]
         { info_tbl: [(c7KN2,
                       label: block_c7KN2_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KN2: // global
           _s7KbP::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KbP::I64, 0)) goto c7KNl; else goto c7KNp;
       c7KNl: // global
           _s7KbN::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7KNd_info;
           R2 = _s7KbN::I64;
           R1 = _s7KbP::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c7KNp: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KNd() //  [R1]
         { info_tbl: [(c7KNd,
                       label: block_c7KNd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KNd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7KNo; else goto c7KNn;
       c7KNo: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KNn: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.009834165 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KNu,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KNu: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.010546435 UTC

[section ""cstring" . lvl12_r7Kb7_bytes" {
     lvl12_r7Kb7_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.011346366 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes2_entry() //  [R1]
         { info_tbl: [(c7KNF,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KNF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KNG; else goto c7KNH;
       c7KNG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KNH: // global
           (_c7KNA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KNA::I64 == 0) goto c7KNC; else goto c7KNB;
       c7KNC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KNB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KNA::I64;
           I64[Sp - 24] = block_c7KND_info;
           R2 = lvl12_r7Kb7_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KND() //  [R1]
         { info_tbl: [(c7KND,
                       label: block_c7KND_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KND: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.012818836 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry() //  [R2]
         { info_tbl: [(c7KNS,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KNS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KNT; else goto c7KNU;
       c7KNT: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KNU: // global
           I64[Sp - 8] = block_c7KNP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KOe; else goto c7KNQ;
       u7KOe: // global
           call _c7KNP(R1) args: 0, res: 0, upd: 0;
       c7KNQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KNP() //  [R1]
         { info_tbl: [(c7KNP,
                       label: block_c7KNP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KNP: // global
           _s7Kc2::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kc2::I64, 0)) goto c7KO9; else goto c7KOd;
       c7KO9: // global
           I64[Sp] = block_c7KO1_info;
           R1 = _s7Kc2::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7KOd: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KO1() //  [R1]
         { info_tbl: [(c7KO1,
                       label: block_c7KO1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KO1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7KOc; else goto c7KOb;
       c7KOc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KOb: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.014331759 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes_entry() //  [R2]
         { info_tbl: [(c7KOj,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KOj: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.015079264 UTC

[section ""cstring" . lvl13_r7Kb8_bytes" {
     lvl13_r7Kb8_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.015850942 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_entry() //  [R1]
         { info_tbl: [(c7KOu,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KOu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KOv; else goto c7KOw;
       c7KOv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KOw: // global
           (_c7KOp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KOp::I64 == 0) goto c7KOr; else goto c7KOq;
       c7KOr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KOq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KOp::I64;
           I64[Sp - 24] = block_c7KOs_info;
           R2 = lvl13_r7Kb8_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KOs() //  [R1]
         { info_tbl: [(c7KOs,
                       label: block_c7KOs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KOs: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.0174459 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c7KOH,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KOH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KOI; else goto c7KOJ;
       c7KOI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KOJ: // global
           I64[Sp - 16] = block_c7KOE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KPa; else goto c7KOF;
       u7KPa: // global
           call _c7KOE(R1) args: 0, res: 0, upd: 0;
       c7KOF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KOE() //  [R1]
         { info_tbl: [(c7KOE,
                       label: block_c7KOE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KOE: // global
           _s7Kcg::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kcg::I64, 0)) goto c7KP3; else goto c7KP8;
       c7KP3: // global
           I64[Sp] = block_c7KOQ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kcg::I64;
           if (R1 & 7 != 0) goto u7KP9; else goto c7KOR;
       u7KP9: // global
           call _c7KOQ(R1) args: 0, res: 0, upd: 0;
       c7KOR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7KP8: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KOQ() //  [R1]
         { info_tbl: [(c7KOQ,
                       label: block_c7KOQ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KOQ: // global
           _s7Kcg::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7KOV_info;
           R2 = I64[R1 + 7];
           R1 = _s7Kcg::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KOV() //  [R1]
         { info_tbl: [(c7KOV,
                       label: block_c7KOV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KOV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7KP7; else goto c7KP6;
       c7KP7: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KP6: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.019232437 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c7KPf,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KPf: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.020065523 UTC

[section ""cstring" . lvl14_r7Kb9_bytes" {
     lvl14_r7Kb9_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,109,105,120,32,72,97,115,107,101,108,108,32,97,110,100,32,67,32,102,105,110,97,108,105,122,101,114,115,32,105,110,32,116,104,101,32,115,97,109,101,32,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.020843213 UTC

[section ""data" . GHC.ForeignPtr.noMixingError_closure" {
     GHC.ForeignPtr.noMixingError_closure:
         const GHC.ForeignPtr.noMixingError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.noMixingError_entry() //  [R1]
         { info_tbl: [(c7KPq,
                       label: GHC.ForeignPtr.noMixingError_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KPq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KPr; else goto c7KPs;
       c7KPr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KPs: // global
           (_c7KPl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KPl::I64 == 0) goto c7KPn; else goto c7KPm;
       c7KPn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KPm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KPl::I64;
           I64[Sp - 24] = block_c7KPo_info;
           R2 = lvl14_r7Kb9_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KPo() //  [R1]
         { info_tbl: [(c7KPo,
                       label: block_c7KPo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KPo: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.022406331 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr1_closure" {
     GHC.ForeignPtr.touchForeignPtr1_closure:
         const GHC.ForeignPtr.touchForeignPtr1_info;
 },
 GHC.ForeignPtr.touchForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7KPD,
                       label: GHC.ForeignPtr.touchForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KPD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KPE; else goto c7KPF;
       c7KPE: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.touchForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KPF: // global
           I64[Sp - 8] = block_c7KPA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KPK; else goto c7KPB;
       u7KPK: // global
           call _c7KPA(R1) args: 0, res: 0, upd: 0;
       c7KPB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KPA() //  [R1]
         { info_tbl: [(c7KPA,
                       label: block_c7KPA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KPA: // global
           call MO_Touch(P64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.023671159 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr_closure" {
     GHC.ForeignPtr.touchForeignPtr_closure:
         const GHC.ForeignPtr.touchForeignPtr_info;
 },
 GHC.ForeignPtr.touchForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KPP,
                       label: GHC.ForeignPtr.touchForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KPP: // global
           R2 = R2;
           call GHC.ForeignPtr.touchForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.026531034 UTC

[section ""data" . GHC.ForeignPtr.unsafeForeignPtrToPtr_closure" {
     GHC.ForeignPtr.unsafeForeignPtrToPtr_closure:
         const GHC.ForeignPtr.unsafeForeignPtrToPtr_info;
 },
 GHC.ForeignPtr.unsafeForeignPtrToPtr_entry() //  [R2]
         { info_tbl: [(c7KPZ,
                       label: GHC.ForeignPtr.unsafeForeignPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KPZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KQ3; else goto c7KQ4;
       c7KQ3: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.unsafeForeignPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KQ4: // global
           I64[Sp - 8] = block_c7KPW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KQ8; else goto c7KPX;
       u7KQ8: // global
           call _c7KPW(R1) args: 0, res: 0, upd: 0;
       c7KPX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KPW() //  [R1]
         { info_tbl: [(c7KPW,
                       label: block_c7KPW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KPW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7KQ7; else goto c7KQ6;
       c7KQ7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KQ6: // global
           _s7KcA::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7KcA::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.028023374 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(c7KQg,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KQm; else goto c7KQn;
       c7KQm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KQn: // global
           I64[Sp - 16] = block_c7KQd_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KQs; else goto c7KQe;
       u7KQs: // global
           call _c7KQd(R1) args: 0, res: 0, upd: 0;
       c7KQe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KQd() //  [R1]
         { info_tbl: [(c7KQd,
                       label: block_c7KQd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQd: // global
           _s7KcE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7KQj_info;
           R3 = _s7KcE::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7KQj() //  [R1, R2]
         { info_tbl: [(c7KQj,
                       label: block_c7KQj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KQr; else goto c7KQq;
       c7KQr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7KQq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.02970728 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshow_entry() //  [R2]
         { info_tbl: [(c7KQA,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7KQG; else goto c7KQH;
       c7KQG: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KQH: // global
           I64[Sp - 8] = block_c7KQx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KQM; else goto c7KQy;
       u7KQM: // global
           call _c7KQx(R1) args: 0, res: 0, upd: 0;
       c7KQy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KQx() //  [R1]
         { info_tbl: [(c7KQx,
                       label: block_c7KQx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQx: // global
           I64[Sp] = block_c7KQD_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 15];
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7KQD() //  [R1, R2]
         { info_tbl: [(c7KQD,
                       label: block_c7KQD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KQL; else goto c7KQK;
       c7KQL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7KQK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.031295183 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr1_closure" {
     GHC.ForeignPtr.$fShowForeignPtr1_closure:
         const GHC.ForeignPtr.$fShowForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr1_entry() //  [R2, R3]
         { info_tbl: [(c7KQU,
                       label: GHC.ForeignPtr.$fShowForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KR0; else goto c7KR1;
       c7KR0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KR1: // global
           I64[Sp - 16] = block_c7KQR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KR6; else goto c7KQS;
       u7KR6: // global
           call _c7KQR(R1) args: 0, res: 0, upd: 0;
       c7KQS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KQR() //  [R1]
         { info_tbl: [(c7KQR,
                       label: block_c7KQR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQR: // global
           _s7KcT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7KQX_info;
           R3 = _s7KcT::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7KQX() //  [R1, R2]
         { info_tbl: [(c7KQX,
                       label: block_c7KQX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KQX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KR5; else goto c7KR4;
       c7KR5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7KR4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.032742413 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7KRb,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KRb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ForeignPtr.$fShowForeignPtr1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.033555825 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure+3;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure+1;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.034563957 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7KRl,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KRl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KRp; else goto c7KRq;
       c7KRp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KRq: // global
           I64[Sp - 16] = block_c7KRi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KRJ; else goto c7KRj;
       u7KRJ: // global
           call _c7KRi(R1) args: 0, res: 0, upd: 0;
       c7KRj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KRi() //  [R1]
         { info_tbl: [(c7KRi,
                       label: block_c7KRi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KRi: // global
           I64[Sp] = block_c7KRo_info;
           _s7Kd5::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kd5::I64;
           if (R1 & 7 != 0) goto u7KRI; else goto c7KRs;
       u7KRI: // global
           call _c7KRo(R1) args: 0, res: 0, upd: 0;
       c7KRs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KRo() //  [R1]
         { info_tbl: [(c7KRo,
                       label: block_c7KRo_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KRo: // global
           _s7Kd5::I64 = I64[Sp + 8];
           _s7Kd8::I64 = I64[R1 + 15];
           if (_s7Kd5::I64 >= _s7Kd8::I64) goto c7KRG; else goto c7KRH;
       c7KRG: // global
           if (_s7Kd5::I64 == _s7Kd8::I64) goto c7KRE; else goto c7KRD;
       c7KRE: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KRD: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KRH: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.03626276 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c==_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c==_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7KRR,
                       label: GHC.ForeignPtr.$fEqForeignPtr_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KRR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KRV; else goto c7KRW;
       c7KRV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KRW: // global
           I64[Sp - 16] = block_c7KRO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KS5; else goto c7KRP;
       u7KS5: // global
           call _c7KRO(R1) args: 0, res: 0, upd: 0;
       c7KRP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KRO() //  [R1]
         { info_tbl: [(c7KRO,
                       label: block_c7KRO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KRO: // global
           I64[Sp] = block_c7KRU_info;
           _s7Kdf::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdf::I64;
           if (R1 & 7 != 0) goto u7KS4; else goto c7KRY;
       u7KS4: // global
           call _c7KRU(R1) args: 0, res: 0, upd: 0;
       c7KRY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KRU() //  [R1]
         { info_tbl: [(c7KRU,
                       label: block_c7KRU_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KRU: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.03827025 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7KSd,
                       label: GHC.ForeignPtr.$fEqForeignPtr_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KSd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KSh; else goto c7KSi;
       c7KSh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KSi: // global
           I64[Sp - 16] = block_c7KSa_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KSv; else goto c7KSb;
       u7KSv: // global
           call _c7KSa(R1) args: 0, res: 0, upd: 0;
       c7KSb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KSa() //  [R1]
         { info_tbl: [(c7KSa,
                       label: block_c7KSa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KSa: // global
           I64[Sp] = block_c7KSg_info;
           _s7Kdo::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdo::I64;
           if (R1 & 7 != 0) goto u7KSu; else goto c7KSk;
       u7KSu: // global
           call _c7KSg(R1) args: 0, res: 0, upd: 0;
       c7KSk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KSg() //  [R1]
         { info_tbl: [(c7KSg,
                       label: block_c7KSg_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KSg: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7KSt; else goto c7KSs;
       c7KSt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KSs: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.039555394 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_closure+2;
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.040546711 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7KSD,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KSD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KSH; else goto c7KSI;
       c7KSH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KSI: // global
           I64[Sp - 16] = block_c7KSA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KSV; else goto c7KSB;
       u7KSV: // global
           call _c7KSA(R1) args: 0, res: 0, upd: 0;
       c7KSB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KSA() //  [R1]
         { info_tbl: [(c7KSA,
                       label: block_c7KSA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KSA: // global
           I64[Sp] = block_c7KSG_info;
           _s7Kdx::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdx::I64;
           if (R1 & 7 != 0) goto u7KSU; else goto c7KSK;
       u7KSU: // global
           call _c7KSG(R1) args: 0, res: 0, upd: 0;
       c7KSK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KSG() //  [R1]
         { info_tbl: [(c7KSG,
                       label: block_c7KSG_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KSG: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7KSS; else goto c7KST;
       c7KSS: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KST: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.042248911 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7KT3,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KT3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KT7; else goto c7KT8;
       c7KT7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KT8: // global
           I64[Sp - 16] = block_c7KT0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KTl; else goto c7KT1;
       u7KTl: // global
           call _c7KT0(R1) args: 0, res: 0, upd: 0;
       c7KT1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KT0() //  [R1]
         { info_tbl: [(c7KT0,
                       label: block_c7KT0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KT0: // global
           I64[Sp] = block_c7KT6_info;
           _s7KdG::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdG::I64;
           if (R1 & 7 != 0) goto u7KTk; else goto c7KTa;
       u7KTk: // global
           call _c7KT6(R1) args: 0, res: 0, upd: 0;
       c7KTa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KT6() //  [R1]
         { info_tbl: [(c7KT6,
                       label: block_c7KT6_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KT6: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7KTi; else goto c7KTj;
       c7KTi: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KTj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.044029216 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7KTt,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KTt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KTx; else goto c7KTy;
       c7KTx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KTy: // global
           I64[Sp - 16] = block_c7KTq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KTR; else goto c7KTr;
       u7KTR: // global
           call _c7KTq(R1) args: 0, res: 0, upd: 0;
       c7KTr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KTq() //  [R1]
         { info_tbl: [(c7KTq,
                       label: block_c7KTq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KTq: // global
           I64[Sp] = block_c7KTw_info;
           _s7KdP::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdP::I64;
           if (R1 & 7 != 0) goto u7KTQ; else goto c7KTA;
       u7KTQ: // global
           call _c7KTw(R1) args: 0, res: 0, upd: 0;
       c7KTA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KTw() //  [R1]
         { info_tbl: [(c7KTw,
                       label: block_c7KTw_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KTw: // global
           _s7KdP::I64 = I64[Sp + 8];
           _s7KdS::I64 = I64[R1 + 15];
           if (_s7KdP::I64 < _s7KdS::I64) goto c7KTP; else goto c7KTO;
       c7KTO: // global
           if (_s7KdP::I64 == _s7KdS::I64) goto c7KTP; else goto c7KTL;
       c7KTP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KTL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.045830698 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7KTZ,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KTZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KU3; else goto c7KU4;
       c7KU3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KU4: // global
           I64[Sp - 16] = block_c7KTW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KUn; else goto c7KTX;
       u7KUn: // global
           call _c7KTW(R1) args: 0, res: 0, upd: 0;
       c7KTX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KTW() //  [R1]
         { info_tbl: [(c7KTW,
                       label: block_c7KTW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KTW: // global
           I64[Sp] = block_c7KU2_info;
           _s7KdZ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdZ::I64;
           if (R1 & 7 != 0) goto u7KUm; else goto c7KU6;
       u7KUm: // global
           call _c7KU2(R1) args: 0, res: 0, upd: 0;
       c7KU6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KU2() //  [R1]
         { info_tbl: [(c7KU2,
                       label: block_c7KU2_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KU2: // global
           _s7KdZ::I64 = I64[Sp + 8];
           _s7Ke2::I64 = I64[R1 + 15];
           if (_s7KdZ::I64 < _s7Ke2::I64) goto c7KUl; else goto c7KUk;
       c7KUk: // global
           if (_s7KdZ::I64 == _s7Ke2::I64) goto c7KUl; else goto c7KUh;
       c7KUl: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KUh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.047664568 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7KUv,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KUv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KUz; else goto c7KUA;
       c7KUz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KUA: // global
           I64[Sp - 16] = block_c7KUs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KUT; else goto c7KUt;
       u7KUT: // global
           call _c7KUs(R1) args: 0, res: 0, upd: 0;
       c7KUt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KUs() //  [R1]
         { info_tbl: [(c7KUs,
                       label: block_c7KUs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KUs: // global
           I64[Sp - 8] = block_c7KUy_info;
           _s7Ke8::P64 = R1;
           _s7Ke9::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7Ke9::I64;
           P64[Sp + 8] = _s7Ke8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KUS; else goto c7KUC;
       u7KUS: // global
           call _c7KUy(R1) args: 0, res: 0, upd: 0;
       c7KUC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KUy() //  [R1]
         { info_tbl: [(c7KUy,
                       label: block_c7KUy_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KUy: // global
           _s7Ke9::I64 = I64[Sp + 8];
           _s7Keb::P64 = R1;
           _s7Kec::I64 = I64[R1 + 15];
           if (_s7Ke9::I64 < _s7Kec::I64) goto c7KUR; else goto c7KUQ;
       c7KUQ: // global
           if (_s7Ke9::I64 == _s7Kec::I64) goto c7KUR; else goto c7KUN;
       c7KUR: // global
           R1 = _s7Keb::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7KUN: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.049670339 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7KV1,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KV1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KV5; else goto c7KV6;
       c7KV5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KV6: // global
           I64[Sp - 16] = block_c7KUY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KVp; else goto c7KUZ;
       u7KVp: // global
           call _c7KUY(R1) args: 0, res: 0, upd: 0;
       c7KUZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KUY() //  [R1]
         { info_tbl: [(c7KUY,
                       label: block_c7KUY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KUY: // global
           I64[Sp - 8] = block_c7KV4_info;
           _s7Kei::P64 = R1;
           _s7Kej::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7Kej::I64;
           P64[Sp + 8] = _s7Kei::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KVo; else goto c7KV8;
       u7KVo: // global
           call _c7KV4(R1) args: 0, res: 0, upd: 0;
       c7KV8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KV4() //  [R1]
         { info_tbl: [(c7KV4,
                       label: block_c7KV4_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KV4: // global
           _s7Kei::P64 = P64[Sp + 16];
           _s7Kej::I64 = I64[Sp + 8];
           _s7Kem::I64 = I64[R1 + 15];
           if (_s7Kej::I64 < _s7Kem::I64) goto c7KVn; else goto c7KVm;
       c7KVm: // global
           if (_s7Kej::I64 == _s7Kem::I64) goto c7KVn; else goto c7KVj;
       c7KVn: // global
           R1 = _s7Kei::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7KVj: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.051121858 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_closure+1;
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.05193546 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr1_closure" {
     GHC.ForeignPtr.castForeignPtr1_closure:
         const GHC.ForeignPtr.castForeignPtr1_info;
 },
 GHC.ForeignPtr.castForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7KVu,
                       label: GHC.ForeignPtr.castForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KVu: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.052801304 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr_closure" {
     GHC.ForeignPtr.castForeignPtr_closure:
         const GHC.ForeignPtr.castForeignPtr_info;
 },
 GHC.ForeignPtr.castForeignPtr_entry() //  [R2]
         { info_tbl: [(c7KVB,
                       label: GHC.ForeignPtr.castForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KVB: // global
           R2 = R2;
           call GHC.ForeignPtr.castForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.053959165 UTC

[section ""data" . GHC.ForeignPtr.plusForeignPtr_closure" {
     GHC.ForeignPtr.plusForeignPtr_closure:
         const GHC.ForeignPtr.plusForeignPtr_info;
 },
 GHC.ForeignPtr.plusForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7KVL,
                       label: GHC.ForeignPtr.plusForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KVL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KVX; else goto c7KVY;
       c7KVX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.plusForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KVY: // global
           I64[Sp - 16] = block_c7KVI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KW4; else goto c7KVJ;
       u7KW4: // global
           call _c7KVI(R1) args: 0, res: 0, upd: 0;
       c7KVJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KVI() //  [R1]
         { info_tbl: [(c7KVI,
                       label: block_c7KVI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KVI: // global
           I64[Sp - 8] = block_c7KVO_info;
           _s7Kev::P64 = P64[R1 + 7];
           _s7Keu::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Kev::P64;
           I64[Sp + 8] = _s7Keu::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KW3; else goto c7KVP;
       u7KW3: // global
           call _c7KVO(R1) args: 0, res: 0, upd: 0;
       c7KVP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KVO() //  [R1]
         { info_tbl: [(c7KVO,
                       label: block_c7KVO_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KVO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7KW2; else goto c7KW1;
       c7KW2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KW1: // global
           _s7Key::I64 = I64[Sp + 16] + I64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7Key::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.055408582 UTC

[section ""data" . GHC.ForeignPtr.$trModule3_closure" {
     GHC.ForeignPtr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.056006378 UTC

[section ""data" . GHC.ForeignPtr.$trModule1_closure" {
     GHC.ForeignPtr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.056633349 UTC

[section ""data" . GHC.ForeignPtr.$trModule_closure" {
     GHC.ForeignPtr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ForeignPtr.$trModule3_closure+1;
         const GHC.ForeignPtr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.057330891 UTC

[section ""data" . $krep_r7Kba_closure" {
     $krep_r7Kba_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.057990547 UTC

[section ""data" . $krep1_r7Kbb_closure" {
     $krep1_r7Kbb_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.058570371 UTC

[section ""data" . $krep2_r7Kbc_closure" {
     $krep2_r7Kbc_closure:
         const :_con_info;
         const $krep1_r7Kbb_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.059229078 UTC

[section ""data" . $krep3_r7Kbd_closure" {
     $krep3_r7Kbd_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.059827343 UTC

[section ""data" . $krep4_r7Kbe_closure" {
     $krep4_r7Kbe_closure:
         const :_con_info;
         const $krep3_r7Kbd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.060444186 UTC

[section ""data" . $krep5_r7Kbf_closure" {
     $krep5_r7Kbf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_r7Kbe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.061109383 UTC

[section ""data" . $krep6_r7Kbg_closure" {
     $krep6_r7Kbg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.061772491 UTC

[section ""data" . $krep7_r7Kbh_closure" {
     $krep7_r7Kbh_closure:
         const :_con_info;
         const $krep_r7Kba_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.062433284 UTC

[section ""data" . $krep8_r7Kbi_closure" {
     $krep8_r7Kbi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep7_r7Kbh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.062987504 UTC

[section ""data" . $krep9_r7Kbj_closure" {
     $krep9_r7Kbj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWeak#_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.06361288 UTC

[section ""data" . $krep10_r7Kbk_closure" {
     $krep10_r7Kbk_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcAddr#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.064242785 UTC

[section ""cstring" . GHC.ForeignPtr.$tcFinalizers2_bytes" {
     GHC.ForeignPtr.$tcFinalizers2_bytes:
         I8[] [70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.06486499 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers1_closure" {
     GHC.ForeignPtr.$tcFinalizers1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcFinalizers2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.065661919 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers_closure" {
     GHC.ForeignPtr.$tcFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcFinalizers1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2126386461452460014;
         const 14391791758474672075;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.066395348 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers1_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcFinalizers_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.067027209 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'NoFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'NoFinalizers3_bytes:
         I8[] [39,78,111,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.067660172 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers2_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.070039751 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 1940741700794708869;
         const 15606281748314638871;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.070731852 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers1_closure" {
     GHC.ForeignPtr.$tc'CFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.071316142 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'CFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'CFinalizers3_bytes:
         I8[] [39,67,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.071861651 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers2_closure" {
     GHC.ForeignPtr.$tc'CFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'CFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.072442302 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers_closure" {
     GHC.ForeignPtr.$tc'CFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers1_closure+4;
         const 5471016724267814004;
         const 11112927960337249170;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.073022198 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers1_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7Kbf_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.07367124 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes:
         I8[] [39,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.074237441 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers2_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.074822059 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers1_closure+4;
         const 2766439294378598012;
         const 9182349323511249767;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.075441581 UTC

[section ""data" . $krep11_r7Kbl_closure" {
     $krep11_r7Kbl_closure:
         const :_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.076083199 UTC

[section ""data" . $krep12_r7Kbm_closure" {
     $krep12_r7Kbm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7Kbl_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.076705604 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtrContents2_bytes" {
     GHC.ForeignPtr.$tcForeignPtrContents2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114,67,111,110,116,101,110,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.077280914 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents1_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.077878064 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtrContents1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2960910307208088010;
         const 1419315288615932334;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.078527724 UTC

[section ""data" . $krep13_r7Kbn_closure" {
     $krep13_r7Kbn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.079106679 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.079754597 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainPtr3_bytes:
         I8[] [39,80,108,97,105,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.080290743 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.080897128 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr_closure" {
     GHC.ForeignPtr.$tc'PlainPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr1_closure+4;
         const 10386497703892305970;
         const 4483570029522342780;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.081822742 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7Kbm_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.082412939 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes:
         I8[] [39,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.082979246 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.083573733 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 9658214180323125435;
         const 4797612916438137994;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.084232219 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr1_closure" {
     GHC.ForeignPtr.$tc'MallocPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.084886933 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MallocPtr3_bytes" {
     GHC.ForeignPtr.$tc'MallocPtr3_bytes:
         I8[] [39,77,97,108,108,111,99,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.085490297 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr2_closure" {
     GHC.ForeignPtr.$tc'MallocPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MallocPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.086139515 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr_closure" {
     GHC.ForeignPtr.$tc'MallocPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr2_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr1_closure+4;
         const 1358169953258233372;
         const 15155489453511463859;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.08676524 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtr2_bytes" {
     GHC.ForeignPtr.$tcForeignPtr2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.087324146 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr1_closure" {
     GHC.ForeignPtr.$tcForeignPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.087907836 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr_closure" {
     GHC.ForeignPtr.$tcForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13645276010227069957;
         const 424768606850180054;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.088566632 UTC

[section ""data" . $krep14_r7Kbo_closure" {
     $krep14_r7Kbo_closure:
         const :_con_info;
         const $krep6_r7Kbg_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.089178502 UTC

[section ""data" . $krep15_r7Kbp_closure" {
     $krep15_r7Kbp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure+1;
         const $krep14_r7Kbo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.089831489 UTC

[section ""data" . $krep16_r7Kbq_closure" {
     $krep16_r7Kbq_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7Kbn_closure+1;
         const $krep15_r7Kbp_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.090486165 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7Kbk_closure+1;
         const $krep16_r7Kbq_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.09110859 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'ForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'ForeignPtr3_bytes:
         I8[] [39,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.0916873 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'ForeignPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.092279112 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr1_closure+4;
         const 15066988800190837275;
         const 12331496810414125071;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.092892433 UTC

[section ""cstring" . GHC.ForeignPtr.$tcMyWeak2_bytes" {
     GHC.ForeignPtr.$tcMyWeak2_bytes:
         I8[] [77,121,87,101,97,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.09355078 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak1_closure" {
     GHC.ForeignPtr.$tcMyWeak1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcMyWeak2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.094209115 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak_closure" {
     GHC.ForeignPtr.$tcMyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcMyWeak1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18176044154139657744;
         const 6003369520845561213;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.094870756 UTC

[section ""data" . $krep17_r7Kbr_closure" {
     $krep17_r7Kbr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcMyWeak_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.095475526 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak1_closure" {
     GHC.ForeignPtr.$tc'MyWeak1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const $krep17_r7Kbr_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.097168891 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MyWeak3_bytes" {
     GHC.ForeignPtr.$tc'MyWeak3_bytes:
         I8[] [39,77,121,87,101,97,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.097773771 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak2_closure" {
     GHC.ForeignPtr.$tc'MyWeak2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MyWeak3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.098430936 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak_closure" {
     GHC.ForeignPtr.$tc'MyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak2_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak1_closure+4;
         const 12419514784912020020;
         const 3312746660203758866;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.099697783 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr_1_closure" {
     GHC.ForeignPtr.newForeignPtr_1_closure:
         const GHC.ForeignPtr.newForeignPtr_1_info;
 },
 GHC.ForeignPtr.newForeignPtr_1_entry() //  [R2]
         { info_tbl: [(c7KWc,
                       label: GHC.ForeignPtr.newForeignPtr_1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KWc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KWj; else goto c7KWk;
       c7KWj: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.newForeignPtr_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KWk: // global
           I64[Sp - 8] = block_c7KW9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KWp; else goto c7KWa;
       u7KWp: // global
           call _c7KW9(R1) args: 0, res: 0, upd: 0;
       c7KWa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KW9() //  [R1]
         { info_tbl: [(c7KW9,
                       label: block_c7KW9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KW9: // global
           I64[Sp - 8] = block_c7KWf_info;
           _s7KeC::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KeC::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KWf() //  [R1]
         { info_tbl: [(c7KWf,
                       label: block_c7KWf_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KWf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7KWo; else goto c7KWn;
       c7KWo: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KWn: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.101215586 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr__closure" {
     GHC.ForeignPtr.newForeignPtr__closure:
         const GHC.ForeignPtr.newForeignPtr__info;
 },
 GHC.ForeignPtr.newForeignPtr__entry() //  [R2]
         { info_tbl: [(c7KWu,
                       label: GHC.ForeignPtr.newForeignPtr__info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KWu: // global
           R2 = R2;
           call GHC.ForeignPtr.newForeignPtr_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.104658964 UTC

[section ""data" . GHC.ForeignPtr.$winsertCFinalizer_closure" {
     GHC.ForeignPtr.$winsertCFinalizer_closure:
         const GHC.ForeignPtr.$winsertCFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$winsertCFinalizer_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KWy: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_s7Kf6_entry() //  [R1, R2]
         { info_tbl: [(c7KX0,
                       label: sat_s7Kf6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KX0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7KX1; else goto c7KX2;
       c7KX1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7KX2: // global
           I64[Sp - 16] = block_c7KWS_info;
           _s7KeZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s7KeZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7KXi; else goto c7KWT;
       u7KXi: // global
           call _c7KWS(R1) args: 0, res: 0, upd: 0;
       c7KWT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KWS() //  [R1]
         { info_tbl: [(c7KWS,
                       label: block_c7KWS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KWS: // global
           _c7KWZ::P64 = R1 & 7;
           if (_c7KWZ::P64 < 3) goto u7KXh; else goto c7KWY;
       u7KXh: // global
           if (_c7KWZ::P64 < 2) goto c7KWW; else goto c7KWX;
       c7KWW: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KWX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7KXd; else goto c7KXc;
       c7KXd: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KXc: // global
           _s7Kf2::P64 = P64[R1 + 6];
           I64[Hp - 56] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 48] = _s7Kf2::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 39;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7KWY: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$winsertCFinalizer_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7KXo,
                       label: GHC.ForeignPtr.$winsertCFinalizer_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, True, True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KXo: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7KXp; else goto u7KYz;
       c7KXp: // global
           R1 = GHC.ForeignPtr.$winsertCFinalizer_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       u7KYz: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _c7KWz() args: 0, res: 0, upd: 0;
     }
 },
 _c7KWz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KWz: // global
           _s7KeR::P64 = P64[P64[Sp] + 8];
           I64[Sp - 8] = block_c7KWC_info;
           R1 = _s7KeR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KYH; else goto c7KWD;
       u7KYH: // global
           call _c7KWC(R1) args: 0, res: 0, upd: 0;
       c7KWD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KWC() //  [R1]
         { info_tbl: [(c7KWC,
                       label: block_c7KWC_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KWC: // global
           _c7KXn::P64 = R1 & 7;
           if (_c7KXn::P64 < 3) goto u7KYy; else goto c7KXm;
       u7KYy: // global
           if (_c7KXn::P64 < 2) goto c7KXk; else goto c7KXl;
       c7KXk: // global
           I64[Sp] = block_c7KWH_info;
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 8];
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
       c7KXl: // global
           I64[Sp] = block_c7KYm_info;
           R5 = P64[R1 + 6];
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
       c7KXm: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KWH() //  [R1]
         { info_tbl: [(c7KWH,
                       label: block_c7KWH_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KWH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7KXx; else goto c7KXw;
       c7KXx: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7KXw: // global
           I64[Hp - 88] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.False_closure+1;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 86;
           P64[Hp - 16] = Hp - 55;
           I64[Hp - 8] = sat_s7Kf6_info;
           P64[Hp] = Hp - 31;
           I64[Sp - 8] = block_c7KXr_info;
           R2 = Hp - 7;
           _s7KeV::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s7KeV::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KXr() //  [R1]
         { info_tbl: [(c7KXr,
                       label: block_c7KXr_info
                       rep:StackRep [False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KXr: // global
           I64[Sp] = block_c7KXt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7KYJ; else goto c7KXz;
       u7KYJ: // global
           call _c7KXt(R1) args: 0, res: 0, upd: 0;
       c7KXz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KXt() //  [R1]
         { info_tbl: [(c7KXt,
                       label: block_c7KXt_info
                       rep:StackRep [False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KXt: // global
           I64[Sp - 8] = block_c7KXF_info;
           _s7Kfb::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s7Kfb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7KYK; else goto c7KXS;
       u7KYK: // global
           call _c7KXF(R1) args: 0, res: 0, upd: 0;
       c7KXS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KXF() //  [R1]
         { info_tbl: [(c7KXF,
                       label: block_c7KXF_info
                       rep:StackRep [False, False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KXF: // global
           if (R1 & 7 == 1) goto c7KXZ; else goto c7KYd;
       c7KXZ: // global
           I64[Sp + 16] = block_c7KXW_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7KYL; else goto c7KY0;
       u7KYL: // global
           call _c7KXW(R1) args: 0, res: 0, upd: 0;
       c7KY0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7KYd: // global
           I64[Sp] = block_c7KY7_info;
           R1 = P64[Sp + 16];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KXW() //  [R1]
         { info_tbl: [(c7KXW,
                       label: block_c7KXW_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KXW: // global
           P64[Sp] = P64[R1 + 7];
           call _s7Kfd() args: 0, res: 0, upd: 0;
     }
 },
 _c7KY7() //  []
         { info_tbl: [(c7KY7,
                       label: block_c7KY7_info
                       rep:StackRep [False, True, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KY7: // global
           I64[Sp + 16] = block_c7KYb_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7KYP; else goto c7KYf;
       u7KYP: // global
           call _c7KYb(R1) args: 0, res: 0, upd: 0;
       c7KYf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KYb() //  [R1]
         { info_tbl: [(c7KYb,
                       label: block_c7KYb_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KYb: // global
           P64[Sp] = P64[R1 + 7];
           call _s7Kfd() args: 0, res: 0, upd: 0;
     }
 },
 _s7Kfd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7Kfd: // global
           _s7Kff::P64 = P64[Sp];
           I64[Sp] = block_c7KXK_info;
           R5 = _s7Kff::P64;
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KXK() //  [R1]
         { info_tbl: [(c7KXK,
                       label: block_c7KXK_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KXK: // global
           if (R1 == 1) goto u7KYC; else goto u7KYD;
       u7KYC: // global
           Sp = Sp + 56;
           call _c7KYt() args: 0, res: 0, upd: 0;
       u7KYD: // global
           Sp = Sp + 8;
           call _c7KYs() args: 0, res: 0, upd: 0;
     }
 },
 _c7KYm() //  [R1]
         { info_tbl: [(c7KYm,
                       label: block_c7KYm_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KYm: // global
           if (R1 == 1) goto u7KYE; else goto u7KYF;
       u7KYE: // global
           Sp = Sp + 56;
           call _c7KYt() args: 0, res: 0, upd: 0;
       u7KYF: // global
           Sp = Sp + 8;
           call _c7KYs() args: 0, res: 0, upd: 0;
     }
 },
 _c7KYt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KYt: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7KYs() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KYs: // global
           P64[Sp] = P64[Sp];
           I64[Sp + 8] = I64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           call _c7KWz() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.109582453 UTC

[section ""cstring" . lvl15_r7Kbs_bytes" {
     lvl15_r7Kbs_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,97,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.110535764 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer2_entry() //  [R1]
         { info_tbl: [(c7KZ2,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZ2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KZ3; else goto c7KZ4;
       c7KZ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7KZ4: // global
           (_c7KYX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7KYX::I64 == 0) goto c7KYZ; else goto c7KYY;
       c7KYZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7KYY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7KYX::I64;
           I64[Sp - 24] = block_c7KZ0_info;
           R2 = lvl15_r7Kbs_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7KZ0() //  [R1]
         { info_tbl: [(c7KZ0,
                       label: block_c7KZ0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZ0: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.112276044 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZ9: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry() //  [R2, R3, R4,
                                                         R5]
         { info_tbl: [(c7KZl,
                       label: GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7KZm; else goto c7KZn;
       c7KZm: // global
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7KZn: // global
           I64[Sp - 32] = block_c7KZd_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7KZy; else goto c7KZe;
       u7KZy: // global
           call _c7KZd(R1) args: 0, res: 0, upd: 0;
       c7KZe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KZd() //  [R1]
         { info_tbl: [(c7KZd,
                       label: block_c7KZd_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZd: // global
           _c7KZk::P64 = R1 & 7;
           if (_c7KZk::P64 < 3) goto u7KZx; else goto c7KZj;
       u7KZx: // global
           _s7KfB::I64 = I64[Sp + 8];
           _s7KfC::I64 = I64[Sp + 16];
           _s7KfD::I64 = I64[Sp + 24];
           if (_c7KZk::P64 < 2) goto c7KZh; else goto c7KZi;
       c7KZh: // global
           R6 = _s7KfD::I64;
           R5 = _s7KfC::I64;
           R4 = 1;
           R3 = _s7KfB::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 24] = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7KZi: // global
           R6 = _s7KfD::I64;
           R5 = _s7KfC::I64;
           R4 = 1;
           R3 = _s7KfB::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7KZj: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.114365912 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7KZG,
                       label: GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7KZP; else goto c7KZQ;
       c7KZP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7KZQ: // global
           I64[Sp - 24] = block_c7KZD_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7KZZ; else goto c7KZE;
       u7KZZ: // global
           call _c7KZD(R1) args: 0, res: 0, upd: 0;
       c7KZE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KZD() //  [R1]
         { info_tbl: [(c7KZD,
                       label: block_c7KZD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZD: // global
           I64[Sp] = block_c7KZJ_info;
           _s7KfR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KfR::I64;
           if (R1 & 7 != 0) goto u7KZY; else goto c7KZK;
       u7KZY: // global
           call _c7KZJ(R1) args: 0, res: 0, upd: 0;
       c7KZK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KZJ() //  [R1]
         { info_tbl: [(c7KZJ,
                       label: block_c7KZJ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZJ: // global
           I64[Sp] = block_c7KZO_info;
           _s7KfT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7KfT::I64;
           if (R1 & 7 != 0) goto u7L00; else goto c7KZT;
       u7L00: // global
           call _c7KZO(R1) args: 0, res: 0, upd: 0;
       c7KZT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7KZO() //  [R1]
         { info_tbl: [(c7KZO,
                       label: block_c7KZO_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7KZO: // global
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 15];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.116065742 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv_entry() //  [R2, R3, R4]
         { info_tbl: [(c7L05,
                       label: GHC.ForeignPtr.addForeignPtrFinalizerEnv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L05: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.117326566 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizer_entry() //  [R2, R3, R4]
         { info_tbl: [(c7L0k,
                       label: GHC.ForeignPtr.$waddForeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L0k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7L0l; else goto c7L0m;
       c7L0l: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7L0m: // global
           I64[Sp - 24] = block_c7L0c_info;
           R1 = R4;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7L0x; else goto c7L0d;
       u7L0x: // global
           call _c7L0c(R1) args: 0, res: 0, upd: 0;
       c7L0d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L0c() //  [R1]
         { info_tbl: [(c7L0c,
                       label: block_c7L0c_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L0c: // global
           _c7L0j::P64 = R1 & 7;
           if (_c7L0j::P64 < 3) goto u7L0w; else goto c7L0i;
       u7L0w: // global
           _s7KfX::I64 = I64[Sp + 8];
           _s7KfY::I64 = I64[Sp + 16];
           if (_c7L0j::P64 < 2) goto c7L0g; else goto c7L0h;
       c7L0g: // global
           R6 = _s7KfY::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7KfX::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 16] = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7L0h: // global
           R6 = _s7KfY::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7KfX::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7L0i: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.119068158 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer1_entry() //  [R2, R3]
         { info_tbl: [(c7L0F,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L0F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7L0J; else goto c7L0K;
       c7L0J: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7L0K: // global
           I64[Sp - 16] = block_c7L0C_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7L0S; else goto c7L0D;
       u7L0S: // global
           call _c7L0C(R1) args: 0, res: 0, upd: 0;
       c7L0D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L0C() //  [R1]
         { info_tbl: [(c7L0C,
                       label: block_c7L0C_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L0C: // global
           I64[Sp] = block_c7L0I_info;
           _s7Kgb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kgb::I64;
           if (R1 & 7 != 0) goto u7L0R; else goto c7L0M;
       u7L0R: // global
           call _c7L0I(R1) args: 0, res: 0, upd: 0;
       c7L0M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L0I() //  [R1]
         { info_tbl: [(c7L0I,
                       label: block_c7L0I_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L0I: // global
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 15];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrFinalizer_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.120478171 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7L0X,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L0X: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizer1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.121233276 UTC

[section ""cstring" . lvl16_r7Kbt_bytes" {
     lvl16_r7Kbt_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.122598138 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_entry() //  [R1]
         { info_tbl: [(c7L18,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L18: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7L19; else goto c7L1a;
       c7L19: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7L1a: // global
           (_c7L13::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7L13::I64 == 0) goto c7L15; else goto c7L14;
       c7L15: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7L14: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7L13::I64;
           I64[Sp - 24] = block_c7L16_info;
           R2 = lvl16_r7Kbt_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7L16() //  [R1]
         { info_tbl: [(c7L16,
                       label: block_c7L16_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L16: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.124286355 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry() //  [R2, R3]
         { info_tbl: [(c7L1l,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L1l: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7L1m; else goto c7L1n;
       c7L1m: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7L1n: // global
           I64[Sp - 16] = block_c7L1i_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7L1R; else goto c7L1j;
       u7L1R: // global
           call _c7L1i(R1) args: 0, res: 0, upd: 0;
       c7L1j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L1i() //  [R1]
         { info_tbl: [(c7L1i,
                       label: block_c7L1i_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L1i: // global
           _s7Kgk::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kgk::I64, 0)) goto c7L1J; else goto c7L1P;
       c7L1J: // global
           I64[Sp] = block_c7L1u_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kgk::I64;
           if (R1 & 7 != 0) goto u7L1Q; else goto c7L1v;
       u7L1Q: // global
           call _c7L1u(R1) args: 0, res: 0, upd: 0;
       c7L1v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7L1P: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7L1u() //  [R1]
         { info_tbl: [(c7L1u,
                       label: block_c7L1u_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L1u: // global
           I64[Sp - 8] = block_c7L1z_info;
           _s7Kgn::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7Kgn::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L1z() //  [R1]
         { info_tbl: [(c7L1z,
                       label: block_c7L1z_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L1z: // global
           _s7Kgn::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7L1B_info;
           R2 = _s7Kgn::I64;
           _s7Kgq::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s7Kgq::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L1B() //  [R1]
         { info_tbl: [(c7L1B,
                       label: block_c7L1B_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L1B: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7L1O; else goto c7L1N;
       c7L1O: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7L1N: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.126293916 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes_entry() //  [R2, R3]
         { info_tbl: [(c7L1W,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L1W: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.127041703 UTC

[section ""cstring" . lvl17_r7Kbu_bytes" {
     lvl17_r7Kbu_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.127839674 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes2_entry() //  [R1]
         { info_tbl: [(c7L27,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L27: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7L28; else goto c7L29;
       c7L28: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7L29: // global
           (_c7L22::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7L22::I64 == 0) goto c7L24; else goto c7L23;
       c7L24: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7L23: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7L22::I64;
           I64[Sp - 24] = block_c7L25_info;
           R2 = lvl17_r7Kbu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7L25() //  [R1]
         { info_tbl: [(c7L25,
                       label: block_c7L25_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L25: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.129481454 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes1_entry() //  [R2]
         { info_tbl: [(c7L2k,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L2k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7L2l; else goto c7L2m;
       c7L2l: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7L2m: // global
           I64[Sp - 8] = block_c7L2h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7L2J; else goto c7L2i;
       u7L2J: // global
           call _c7L2h(R1) args: 0, res: 0, upd: 0;
       c7L2i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L2h() //  [R1]
         { info_tbl: [(c7L2h,
                       label: block_c7L2h_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L2h: // global
           _s7KgC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KgC::I64, 0)) goto c7L2D; else goto c7L2I;
       c7L2D: // global
           I64[Sp - 8] = block_c7L2t_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KgC::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7L2I: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7L2t() //  [R1]
         { info_tbl: [(c7L2t,
                       label: block_c7L2t_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L2t: // global
           I64[Sp] = block_c7L2v_info;
           _s7KgG::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7KgG::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L2v() //  [R1]
         { info_tbl: [(c7L2v,
                       label: block_c7L2v_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L2v: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7L2H; else goto c7L2G;
       c7L2H: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7L2G: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.131250915 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes_entry() //  [R2]
         { info_tbl: [(c7L2O,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L2O: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.13204259 UTC

[section ""data" . lvl18_r7Kbv_closure" {
     lvl18_r7Kbv_closure:
         const GHC.Types.I#_con_info;
         const 159;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.132648184 UTC

[section ""data" . lvl19_r7Kbw_closure" {
     lvl19_r7Kbw_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.13322407 UTC

[section ""data" . lvl20_r7Kbx_closure" {
     lvl20_r7Kbx_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.133828282 UTC

[section ""data" . lvl21_r7Kby_closure" {
     lvl21_r7Kby_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl18_r7Kbv_closure+1;
         const lvl19_r7Kbw_closure+1;
         const lvl18_r7Kbv_closure+1;
         const lvl20_r7Kbx_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.134513051 UTC

[section ""data" . lvl22_r7Kbz_closure" {
     lvl22_r7Kbz_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl21_r7Kby_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.135373326 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr3_closure" {
     GHC.ForeignPtr.mallocForeignPtr3_closure:
         const GHC.ForeignPtr.mallocForeignPtr3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr3_entry() //  [R1]
         { info_tbl: [(c7L2X,
                       label: GHC.ForeignPtr.mallocForeignPtr3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L2X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7L2Y; else goto c7L2Z;
       c7L2Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7L2Z: // global
           (_c7L2U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7L2U::I64 == 0) goto c7L2W; else goto c7L2V;
       c7L2W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7L2V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7L2U::I64;
           R2 = lvl22_r7Kbz_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.136909237 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr1_closure" {
     GHC.ForeignPtr.mallocForeignPtr1_closure:
         const GHC.ForeignPtr.mallocForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7L36,
                       label: GHC.ForeignPtr.mallocForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L36: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7L3a; else goto c7L3b;
       c7L3a: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7L3b: // global
           I64[Sp - 16] = block_c7L34_info;
           _s7KgO::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           P64[Sp - 8] = _s7KgO::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7L34() //  [R1]
         { info_tbl: [(c7L34,
                       label: block_c7L34_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L34: // global
           I64[Sp] = block_c7L39_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7L39() //  [R1]
         { info_tbl: [(c7L39,
                       label: block_c7L39_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L39: // global
           _s7KgT::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KgT::I64, 0)) goto c7L3u; else goto c7L3z;
       c7L3u: // global
           I64[Sp - 8] = block_c7L3k_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KgT::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7L3z: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7L3k() //  [R1]
         { info_tbl: [(c7L3k,
                       label: block_c7L3k_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L3k: // global
           _s7KgT::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7L3m_info;
           R2 = I64[Sp + 16];
           _s7KgX::P64 = R1;
           R1 = _s7KgT::I64;
           P64[Sp + 16] = _s7KgX::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L3m() //  [R1]
         { info_tbl: [(c7L3m,
                       label: block_c7L3m_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L3m: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7L3y; else goto c7L3x;
       c7L3y: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7L3x: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.139192765 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr_closure" {
     GHC.ForeignPtr.mallocForeignPtr_closure:
         const GHC.ForeignPtr.mallocForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr_entry() //  [R2]
         { info_tbl: [(c7L3E,
                       label: GHC.ForeignPtr.mallocForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L3E: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.140165941 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer3_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer3_entry() //  [R2]
         { info_tbl: [(c7L3M,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L3M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7L3Q; else goto c7L3P;
       c7L3Q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7L3P: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.141599511 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer4_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry() //  [R2]
         { info_tbl: [(c7L42,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L42: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7L43; else goto u7L4e;
       c7L43: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7L4e: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c7L3S() args: 0, res: 0, upd: 0;
     }
 },
 _c7L3S() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L3S: // global
           _s7Kh6::P64 = P64[Sp];
           I64[Sp] = block_c7L3V_info;
           R1 = _s7Kh6::P64;
           if (R1 & 7 != 0) goto u7L4g; else goto c7L3W;
       u7L4g: // global
           call _c7L3V(R1) args: 0, res: 0, upd: 0;
       c7L3W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L3V() //  [R1]
         { info_tbl: [(c7L3V,
                       label: block_c7L3V_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L3V: // global
           if (R1 & 7 == 1) goto c7L3Z; else goto c7L40;
       c7L3Z: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7L40: // global
           I64[Sp - 8] = block_c7L4a_info;
           _s7Kha::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7Kha::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L4a() //  []
         { info_tbl: [(c7L4a,
                       label: block_c7L4a_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L4a: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7L3S() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.145637892 UTC

[section ""data" . GHC.ForeignPtr.$wforeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$wforeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$wforeignPtrFinalizer_info;
 },
 GHC.ForeignPtr.$wforeignPtrFinalizer_entry() //  [R2]
         { info_tbl: [(c7L4x,
                       label: GHC.ForeignPtr.$wforeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L4x: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7L4y; else goto c7L4z;
       c7L4y: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$wforeignPtrFinalizer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7L4z: // global
           I64[Sp - 8] = block_c7L4n_info;
           _s7Khe::P64 = R2;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           R1 = _s7Khe::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L4n() //  [R1]
         { info_tbl: [(c7L4n,
                       label: block_c7L4n_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L4n: // global
           I64[Sp] = block_c7L4p_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7L4W; else goto c7L4q;
       u7L4W: // global
           call _c7L4p(R1) args: 0, res: 0, upd: 0;
       c7L4q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L4p() //  [R1]
         { info_tbl: [(c7L4p,
                       label: block_c7L4p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L4p: // global
           _c7L4w::P64 = R1 & 7;
           if (_c7L4w::P64 < 3) goto u7L4T; else goto c7L4v;
       u7L4T: // global
           if (_c7L4w::P64 < 2) goto u7L4U; else goto c7L4u;
       u7L4U: // global
           Sp = Sp + 8;
           call _c7L4O() args: 0, res: 0, upd: 0;
       c7L4u: // global
           I64[Sp] = block_c7L4G_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7L4v: // global
           R2 = P64[R1 + 5];
           Sp = Sp + 8;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7L4G() //  [R1, R2]
         { info_tbl: [(c7L4G,
                       label: block_c7L4G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L4G: // global
           if (R1 == 1) goto c7L4P; else goto u7L4V;
       c7L4P: // global
           R1 = R2;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       u7L4V: // global
           Sp = Sp + 8;
           call _c7L4O() args: 0, res: 0, upd: 0;
     }
 },
 _c7L4O() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L4O: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.147422647 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr2_closure" {
     GHC.ForeignPtr.finalizeForeignPtr2_closure:
         const GHC.ForeignPtr.finalizeForeignPtr2_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr2_entry() //  [R2]
         { info_tbl: [(c7L56,
                       label: GHC.ForeignPtr.finalizeForeignPtr2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L56: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7L57; else goto c7L58;
       c7L57: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7L58: // global
           I64[Sp - 8] = block_c7L53_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7L5c; else goto c7L54;
       u7L5c: // global
           call _c7L53(R1) args: 0, res: 0, upd: 0;
       c7L54: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L53() //  [R1]
         { info_tbl: [(c7L53,
                       label: block_c7L53_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L53: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.148847311 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr1_closure" {
     GHC.ForeignPtr.finalizeForeignPtr1_closure:
         const GHC.ForeignPtr.finalizeForeignPtr1_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7L5k,
                       label: GHC.ForeignPtr.finalizeForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L5k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7L5l; else goto c7L5m;
       c7L5l: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7L5m: // global
           I64[Sp - 8] = block_c7L5h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7L5J; else goto c7L5i;
       u7L5J: // global
           call _c7L5h(R1) args: 0, res: 0, upd: 0;
       c7L5i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L5h() //  [R1]
         { info_tbl: [(c7L5h,
                       label: block_c7L5h_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L5h: // global
           I64[Sp] = block_c7L5p_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u7L5I; else goto c7L5r;
       u7L5I: // global
           call _c7L5p(R1) args: 0, res: 0, upd: 0;
       c7L5r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L5p() //  [R1]
         { info_tbl: [(c7L5p,
                       label: block_c7L5p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L5p: // global
           _c7L5G::P64 = R1 & 7;
           if (_c7L5G::P64 < 3) goto u7L5H; else goto c7L5F;
       u7L5H: // global
           if (_c7L5G::P64 < 2) goto c7L5x; else goto c7L5B;
       c7L5x: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7L5B: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7L5F: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.150334687 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr_closure" {
     GHC.ForeignPtr.finalizeForeignPtr_closure:
         const GHC.ForeignPtr.finalizeForeignPtr_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr_entry() //  [R2]
         { info_tbl: [(c7L5O,
                       label: GHC.ForeignPtr.finalizeForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L5O: // global
           R2 = R2;
           call GHC.ForeignPtr.finalizeForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.151064113 UTC

[section ""cstring" . lvl23_r7KbA_bytes" {
     lvl23_r7KbA_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.151978039 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer2_entry() //  [R1]
         { info_tbl: [(c7L5Z,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L5Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7L60; else goto c7L61;
       c7L60: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7L61: // global
           (_c7L5U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7L5U::I64 == 0) goto c7L5W; else goto c7L5V;
       c7L5W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7L5V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7L5U::I64;
           I64[Sp - 24] = block_c7L5X_info;
           R2 = lvl23_r7KbA_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7L5X() //  [R1]
         { info_tbl: [(c7L5X,
                       label: block_c7L5X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L5X: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.156494443 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info;
         const 0;
 },
 sat_s7KhU_entry() //  [R1, R2]
         { info_tbl: [(c7L6u,
                       label: sat_s7KhU_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L6u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7L6v; else goto c7L6w;
       c7L6v: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7L6w: // global
           I64[Sp - 24] = block_c7L6m_info;
           _s7KhH::P64 = P64[R1 + 7];
           _s7KhN::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7KhH::P64;
           P64[Sp - 8] = _s7KhN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7L6M; else goto c7L6n;
       u7L6M: // global
           call _c7L6m(R1) args: 0, res: 0, upd: 0;
       c7L6n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L6m() //  [R1]
         { info_tbl: [(c7L6m,
                       label: block_c7L6m_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L6m: // global
           _c7L6t::P64 = R1 & 7;
           if (_c7L6t::P64 < 3) goto u7L6L; else goto c7L6s;
       u7L6L: // global
           if (_c7L6t::P64 < 2) goto c7L6q; else goto c7L6r;
       c7L6q: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7L6r: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7L6s: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7L6K; else goto c7L6J;
       c7L6K: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7L6J: // global
           _s7KhR::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7KhR::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Ki0_entry() //  [R1]
         { info_tbl: [(c7L70,
                       label: sat_s7Ki0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L70: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Kif_entry() //  [R1, R2]
         { info_tbl: [(c7L7l,
                       label: sat_s7Kif_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L7l: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7L7m; else goto c7L7n;
       c7L7m: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7L7n: // global
           I64[Sp - 24] = block_c7L7d_info;
           _s7KhH::P64 = P64[R1 + 7];
           _s7Ki8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7KhH::P64;
           P64[Sp - 8] = _s7Ki8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7L7D; else goto c7L7e;
       u7L7D: // global
           call _c7L7d(R1) args: 0, res: 0, upd: 0;
       c7L7e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L7d() //  [R1]
         { info_tbl: [(c7L7d,
                       label: block_c7L7d_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L7d: // global
           _c7L7k::P64 = R1 & 7;
           if (_c7L7k::P64 < 3) goto u7L7C; else goto c7L7j;
       u7L7C: // global
           if (_c7L7k::P64 < 2) goto c7L7h; else goto c7L7i;
       c7L7h: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7L7i: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7L7j: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7L7B; else goto c7L7A;
       c7L7B: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7L7A: // global
           _s7Kic::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7Kic::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7KiO_entry() //  [R1]
         { info_tbl: [(c7L81,
                       label: sat_s7KiO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L81: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7L82; else goto c7L83;
       c7L82: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7L83: // global
           I64[Sp - 16] = block_c7L7R_info;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           _s7KhJ::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s7KhJ::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L7R() //  [R1]
         { info_tbl: [(c7L7R,
                       label: block_c7L7R_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L7R: // global
           I64[Sp] = block_c7L7T_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7L91; else goto c7L7U;
       u7L91: // global
           call _c7L7T(R1) args: 0, res: 0, upd: 0;
       c7L7U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L7T() //  [R1]
         { info_tbl: [(c7L7T,
                       label: block_c7L7T_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L7T: // global
           _c7L80::P64 = R1 & 7;
           if (_c7L80::P64 < 3) goto u7L8Y; else goto c7L7Z;
       u7L8Y: // global
           if (_c7L80::P64 < 2) goto c7L7X; else goto c7L7Y;
       c7L7X: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7L7Y: // global
           I64[Sp] = block_c7L8a_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7L7Z: // global
           P64[Sp] = P64[R1 + 5];
           call _c7L8B() args: 0, res: 0, upd: 0;
     }
 },
 _c7L8a() //  [R1, R2]
         { info_tbl: [(c7L8a,
                       label: block_c7L8a_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L8a: // global
           if (R1 == 1) goto c7L8m; else goto c7L8i;
       c7L8m: // global
           I64[Sp] = block_c7L8l_info;
           R1 = R2;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c7L8i: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7L8l() //  []
         { info_tbl: [(c7L8l,
                       label: block_c7L8l_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L8l: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7L8B() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L8B: // global
           _s7KiG::P64 = P64[Sp];
           I64[Sp] = block_c7L8D_info;
           R1 = _s7KiG::P64;
           if (R1 & 7 != 0) goto u7L93; else goto c7L8F;
       u7L93: // global
           call _c7L8D(R1) args: 0, res: 0, upd: 0;
       c7L8F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L8D() //  [R1]
         { info_tbl: [(c7L8D,
                       label: block_c7L8D_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L8D: // global
           if (R1 & 7 == 1) goto c7L8L; else goto c7L8Q;
       c7L8L: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7L8Q: // global
           I64[Sp - 8] = block_c7L8O_info;
           _s7KiK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7KiK::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L8O() //  []
         { info_tbl: [(c7L8O,
                       label: block_c7L8O_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L8O: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7L8B() args: 0, res: 0, upd: 0;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7L9a,
                       label: GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L9a: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7L9b; else goto c7L9c;
       c7L9b: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7L9c: // global
           I64[Sp - 16] = block_c7L69_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7L9T; else goto c7L6a;
       u7L9T: // global
           call _c7L69(R1) args: 0, res: 0, upd: 0;
       c7L6a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L69() //  [R1]
         { info_tbl: [(c7L69,
                       label: block_c7L69_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L69: // global
           _c7L99::P64 = R1 & 7;
           if (_c7L99::P64 < 3) goto u7L9M; else goto c7L98;
       u7L9M: // global
           _s7KhH::P64 = P64[Sp + 8];
           if (_c7L99::P64 < 2) goto c7L96; else goto c7L97;
       c7L96: // global
           Hp = Hp + 88;
           _s7KhJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7L9u; else goto c7L9e;
       c7L9e: // global
           _s7KhK::P64 = P64[_s7KhJ::P64 + 7];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7KhH::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7KhU_info;
           P64[Hp - 8] = _s7KhH::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7L6N_info;
           R2 = Hp - 15;
           R1 = _s7KhK::P64;
           P64[Sp + 8] = _s7KhK::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7L97: // global
           Hp = Hp + 88;
           _s7KhJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7L9u; else goto c7L9t;
       c7L9u: // global
           HpAlloc = 88;
           R1 = _s7KhJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7L9t: // global
           _s7Ki4::P64 = P64[_s7KhJ::P64 + 6];
           _s7Ki5::P64 = P64[_s7KhJ::P64 + 14];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7KhH::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7Kif_info;
           P64[Hp - 8] = _s7KhH::P64;
           P64[Hp] = Hp - 39;
           I64[Sp - 16] = block_c7L7E_info;
           R2 = Hp - 15;
           R1 = _s7Ki5::P64;
           P64[Sp - 8] = _s7Ki5::P64;
           P64[Sp] = _s7Ki4::P64;
           P64[Sp + 8] = _s7KhJ::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7L98: // global
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7L6N() //  [R1]
         { info_tbl: [(c7L6N,
                       label: block_c7L6N_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L6N: // global
           I64[Sp] = block_c7L6P_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7L9P; else goto c7L6Q;
       u7L9P: // global
           call _c7L6P(R1) args: 0, res: 0, upd: 0;
       c7L6Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L6P() //  [R1]
         { info_tbl: [(c7L6P,
                       label: block_c7L6P_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L6P: // global
           if (R1 & 7 == 1) goto u7L9N; else goto c7L9m;
       u7L9N: // global
           Sp = Sp + 16;
           call _c7L9z() args: 0, res: 0, upd: 0;
       c7L9m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7L9p; else goto c7L9o;
       c7L9p: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7L9o: // global
           I64[Hp - 8] = sat_s7Ki0_info;
           _s7KhK::P64 = P64[Sp + 8];
           P64[Hp] = _s7KhK::P64;
           I64[Sp + 8] = block_c7L9l_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7KhK::P64;
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L9l() //  []
         { info_tbl: [(c7L9l,
                       label: block_c7L9l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L9l: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7L7E() //  [R1]
         { info_tbl: [(c7L7E,
                       label: block_c7L7E_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L7E: // global
           I64[Sp] = block_c7L7G_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7L9R; else goto c7L7H;
       u7L9R: // global
           call _c7L7G(R1) args: 0, res: 0, upd: 0;
       c7L7H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L7G() //  [R1]
         { info_tbl: [(c7L7G,
                       label: block_c7L7G_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L7G: // global
           if (R1 & 7 == 1) goto u7L9O; else goto c7L9B;
       u7L9O: // global
           Sp = Sp + 32;
           call _c7L9z() args: 0, res: 0, upd: 0;
       c7L9B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7L9E; else goto c7L9D;
       c7L9E: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7L9D: // global
           I64[Hp - 16] = sat_s7KiO_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_c7L9A_info;
           R3 = Hp - 15;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L9z() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L9z: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7L9A() //  []
         { info_tbl: [(c7L9A,
                       label: block_c7L9A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L9A: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.1638023 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry() //  [R2, R3]
         { info_tbl: [(c7La1,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7La1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7La2; else goto c7La3;
       c7La2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7La3: // global
           I64[Sp - 16] = block_c7L9Y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7La7; else goto c7L9Z;
       u7La7: // global
           call _c7L9Y(R1) args: 0, res: 0, upd: 0;
       c7L9Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7L9Y() //  [R1]
         { info_tbl: [(c7L9Y,
                       label: block_c7L9Y_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7L9Y: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.165046147 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7Lac,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lac: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.167381731 UTC

[section ""data" . GHC.ForeignPtr.$wnewConcForeignPtr_closure" {
     GHC.ForeignPtr.$wnewConcForeignPtr_closure:
         const GHC.ForeignPtr.$wnewConcForeignPtr_info;
         const 0;
 },
 sat_s7Kjf_entry() //  [R1, R2]
         { info_tbl: [(c7LaB,
                       label: sat_s7Kjf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LaB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LaC; else goto c7LaD;
       c7LaC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LaD: // global
           I64[Sp - 24] = block_c7Lat_info;
           _s7Kj1::P64 = P64[R1 + 7];
           _s7Kj8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7Kj1::P64;
           P64[Sp - 8] = _s7Kj8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LaT; else goto c7Lau;
       u7LaT: // global
           call _c7Lat(R1) args: 0, res: 0, upd: 0;
       c7Lau: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lat() //  [R1]
         { info_tbl: [(c7Lat,
                       label: block_c7Lat_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lat: // global
           _c7LaA::P64 = R1 & 7;
           if (_c7LaA::P64 < 3) goto u7LaS; else goto c7Laz;
       u7LaS: // global
           if (_c7LaA::P64 < 2) goto c7Lax; else goto c7Lay;
       c7Lax: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lay: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7Laz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7LaR; else goto c7LaQ;
       c7LaR: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LaQ: // global
           _s7Kjc::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7Kjc::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Kjn_entry() //  [R1]
         { info_tbl: [(c7Lb7,
                       label: sat_s7Kjn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lb7: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$wnewConcForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7Lbe,
                       label: GHC.ForeignPtr.$wnewConcForeignPtr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lbe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lbf; else goto c7Lbg;
       c7Lbf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$wnewConcForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lbg: // global
           I64[Sp - 24] = block_c7Laj_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Laj() //  [R1]
         { info_tbl: [(c7Laj,
                       label: block_c7Laj_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Laj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c7Lbj; else goto c7Lbi;
       c7Lbj: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lbi: // global
           I64[Hp - 80] = :_con_info;
           _s7Kj1::P64 = P64[Sp + 16];
           P64[Hp - 72] = _s7Kj1::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7Kjf_info;
           P64[Hp - 8] = _s7Kj1::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7LaU_info;
           R2 = Hp - 15;
           _s7Kj5::P64 = R1;
           R1 = R1;
           P64[Sp + 16] = _s7Kj5::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LaU() //  [R1]
         { info_tbl: [(c7LaU,
                       label: block_c7LaU_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LaU: // global
           I64[Sp] = block_c7LaW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LbB; else goto c7LaX;
       u7LbB: // global
           call _c7LaW(R1) args: 0, res: 0, upd: 0;
       c7LaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LaW() //  [R1]
         { info_tbl: [(c7LaW,
                       label: block_c7LaW_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LaW: // global
           _s7Kj5::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7Lbb; else goto c7Lbc;
       c7Lbb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Lbq; else goto c7Lbp;
       c7Lbq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lbp: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = _s7Kj5::P64;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lbc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Lbx; else goto c7Lbw;
       c7Lbx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lbw: // global
           I64[Hp - 8] = sat_s7Kjn_info;
           P64[Hp] = _s7Kj5::P64;
           I64[Sp] = block_c7Lbr_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7Kj5::P64;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lbr() //  [R1]
         { info_tbl: [(c7Lbr,
                       label: block_c7Lbr_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lbr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7LbA; else goto c7Lbz;
       c7LbA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lbz: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.171026611 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr1_closure" {
     GHC.ForeignPtr.newConcForeignPtr1_closure:
         const GHC.ForeignPtr.newConcForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr1_entry() //  [R2, R3]
         { info_tbl: [(c7LbJ,
                       label: GHC.ForeignPtr.newConcForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LbK; else goto c7LbL;
       c7LbK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.newConcForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LbL: // global
           I64[Sp - 16] = block_c7LbG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LbP; else goto c7LbH;
       u7LbP: // global
           call _c7LbG(R1) args: 0, res: 0, upd: 0;
       c7LbH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LbG() //  [R1]
         { info_tbl: [(c7LbG,
                       label: block_c7LbG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LbG: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$wnewConcForeignPtr_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.172278848 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr_closure" {
     GHC.ForeignPtr.newConcForeignPtr_closure:
         const GHC.ForeignPtr.newConcForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7LbU,
                       label: GHC.ForeignPtr.newConcForeignPtr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LbU: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.newConcForeignPtr1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.17321615 UTC

[section ""data" . GHC.ForeignPtr.MyWeak_closure" {
     GHC.ForeignPtr.MyWeak_closure:
         const GHC.ForeignPtr.MyWeak_info;
 },
 GHC.ForeignPtr.MyWeak_entry() //  [R2]
         { info_tbl: [(c7Lc2,
                       label: GHC.ForeignPtr.MyWeak_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lc2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Lc6; else goto c7Lc5;
       c7Lc6: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.MyWeak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lc5: // global
           I64[Hp - 8] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.174262247 UTC

[section ""data" . GHC.ForeignPtr.PlainForeignPtr_closure" {
     GHC.ForeignPtr.PlainForeignPtr_closure:
         const GHC.ForeignPtr.PlainForeignPtr_info;
 },
 GHC.ForeignPtr.PlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7Lcc,
                       label: GHC.ForeignPtr.PlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lcc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Lcg; else goto c7Lcf;
       c7Lcg: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lcf: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.175372278 UTC

[section ""data" . GHC.ForeignPtr.MallocPtr_closure" {
     GHC.ForeignPtr.MallocPtr_closure:
         const GHC.ForeignPtr.MallocPtr_info;
 },
 GHC.ForeignPtr.MallocPtr_entry() //  [R2, R3]
         { info_tbl: [(c7Lcm,
                       label: GHC.ForeignPtr.MallocPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lcm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Lcq; else goto c7Lcp;
       c7Lcq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.MallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lcp: // global
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.176458361 UTC

[section ""data" . GHC.ForeignPtr.PlainPtr_closure" {
     GHC.ForeignPtr.PlainPtr_closure:
         const GHC.ForeignPtr.PlainPtr_info;
 },
 GHC.ForeignPtr.PlainPtr_entry() //  [R2]
         { info_tbl: [(c7Lcw,
                       label: GHC.ForeignPtr.PlainPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lcw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LcA; else goto c7Lcz;
       c7LcA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lcz: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.177373454 UTC

[section ""data" . GHC.ForeignPtr.NoFinalizers_closure" {
     GHC.ForeignPtr.NoFinalizers_closure:
         const GHC.ForeignPtr.NoFinalizers_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.178165586 UTC

[section ""data" . GHC.ForeignPtr.CFinalizers_closure" {
     GHC.ForeignPtr.CFinalizers_closure:
         const GHC.ForeignPtr.CFinalizers_info;
 },
 GHC.ForeignPtr.CFinalizers_entry() //  [R2]
         { info_tbl: [(c7LcG,
                       label: GHC.ForeignPtr.CFinalizers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LcG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LcK; else goto c7LcJ;
       c7LcK: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.CFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LcJ: // global
           I64[Hp - 8] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.179223389 UTC

[section ""data" . GHC.ForeignPtr.HaskellFinalizers_closure" {
     GHC.ForeignPtr.HaskellFinalizers_closure:
         const GHC.ForeignPtr.HaskellFinalizers_info;
 },
 GHC.ForeignPtr.HaskellFinalizers_entry() //  [R2]
         { info_tbl: [(c7LcQ,
                       label: GHC.ForeignPtr.HaskellFinalizers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LcQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LcU; else goto c7LcT;
       c7LcU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.HaskellFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LcT: // global
           I64[Hp - 8] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.180361211 UTC

[section ""data" . GHC.ForeignPtr.ForeignPtr_closure" {
     GHC.ForeignPtr.ForeignPtr_closure:
         const GHC.ForeignPtr.ForeignPtr_info;
 },
 GHC.ForeignPtr.ForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7Ld0,
                       label: GHC.ForeignPtr.ForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ld0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Ld4; else goto c7Ld3;
       c7Ld4: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.ForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ld3: // global
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.18138635 UTC

[GHC.ForeignPtr.MyWeak_con_entry() //  [R1]
         { info_tbl: [(c7Ld5,
                       label: GHC.ForeignPtr.MyWeak_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,121,87,101,97,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ld5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.182184505 UTC

[GHC.ForeignPtr.PlainForeignPtr_con_entry() //  [R1]
         { info_tbl: [(c7Ld7,
                       label: GHC.ForeignPtr.PlainForeignPtr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ld7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.182916477 UTC

[GHC.ForeignPtr.MallocPtr_con_entry() //  [R1]
         { info_tbl: [(c7Ld9,
                       label: GHC.ForeignPtr.MallocPtr_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,97,108,108,111,99,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ld9: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.18364915 UTC

[GHC.ForeignPtr.PlainPtr_con_entry() //  [R1]
         { info_tbl: [(c7Ldb,
                       label: GHC.ForeignPtr.PlainPtr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ldb: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.184430804 UTC

[GHC.ForeignPtr.NoFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7Ldd,
                       label: GHC.ForeignPtr.NoFinalizers_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,78,111,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ldd: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.185311222 UTC

[GHC.ForeignPtr.CFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7Ldf,
                       label: GHC.ForeignPtr.CFinalizers_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,67,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ldf: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.186178723 UTC

[GHC.ForeignPtr.HaskellFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7Ldh,
                       label: GHC.ForeignPtr.HaskellFinalizers_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ldh: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.187083608 UTC

[GHC.ForeignPtr.ForeignPtr_con_entry() //  [R1]
         { info_tbl: [(c7Ldj,
                       label: GHC.ForeignPtr.ForeignPtr_con_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,70,111,114,101,105,103,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ldj: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.187932322 UTC

[section ""relreadonly" . S7KkP_srt" {
     S7KkP_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r7Kb5_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ForeignPtr.mallocForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
         const GHC.ForeignPtr.$fShowForeignPtr1_closure;
         const GHC.ForeignPtr.noMixingError_closure;
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const lvl22_r7Kbz_closure;
         const GHC.ForeignPtr.mallocForeignPtr1_closure;
         const GHC.ForeignPtr.mallocForeignPtr3_closure;
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
         const GHC.ForeignPtr.$wnewConcForeignPtr_closure;
         const GHC.ForeignPtr.newConcForeignPtr1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.191252132 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:50.192922379 UTC

[section ""data" . GHC.ForeignPtr.$WPlainForeignPtr_closure" {
     GHC.ForeignPtr.$WPlainForeignPtr_closure:
         const GHC.ForeignPtr.$WPlainForeignPtr_info;
 },
 GHC.ForeignPtr.$WPlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7Lds,
                       label: GHC.ForeignPtr.$WPlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lds: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ldw; else goto c7Ldx;
       c7Ldw: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$WPlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ldx: // global
           I64[Sp - 8] = block_c7Ldp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LdB; else goto c7Ldq;
       u7LdB: // global
           call _c7Ldp(R1) args: 0, res: 0, upd: 0;
       c7Ldq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ldp() //  [R1]
         { info_tbl: [(c7Ldp,
                       label: block_c7Ldp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ldp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LdA; else goto c7Ldz;
       c7LdA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ldz: // global
           _s7KbE::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _s7KbE::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.199707735 UTC

[section ""data" . GHC.ForeignPtr.$WMallocPtr_closure" {
     GHC.ForeignPtr.$WMallocPtr_closure:
         const GHC.ForeignPtr.$WMallocPtr_info;
 },
 GHC.ForeignPtr.$WMallocPtr_entry() //  [R2, R3]
         { info_tbl: [(c7LdT,
                       label: GHC.ForeignPtr.$WMallocPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LdT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LdX; else goto c7LdY;
       c7LdX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$WMallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LdY: // global
           I64[Sp - 16] = block_c7LdQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Le2; else goto c7LdR;
       u7Le2: // global
           call _c7LdQ(R1) args: 0, res: 0, upd: 0;
       c7LdR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LdQ() //  [R1]
         { info_tbl: [(c7LdQ,
                       label: block_c7LdQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LdQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Le1; else goto c7Le0;
       c7Le1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Le0: // global
           _s7KbI::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7KbI::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.205651835 UTC

[section ""cstring" . lvl_r7KaV_bytes" {
     lvl_r7KaV_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.207847486 UTC

[section ""data" . lvl1_r7KaW_closure" {
     lvl1_r7KaW_closure:
         const lvl1_r7KaW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r7KaW_entry() //  [R1]
         { info_tbl: [(c7Lel,
                       label: lvl1_r7KaW_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lel: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lem; else goto c7Len;
       c7Lem: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Len: // global
           (_c7Lei::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lei::I64 == 0) goto c7Lek; else goto c7Lej;
       c7Lek: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lej: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lei::I64;
           R2 = lvl_r7KaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.212443978 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule4_bytes" {
     GHC.ForeignPtr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.214613339 UTC

[section ""data" . lvl2_r7KaX_closure" {
     lvl2_r7KaX_closure:
         const lvl2_r7KaX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r7KaX_entry() //  [R1]
         { info_tbl: [(c7LeC,
                       label: lvl2_r7KaX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LeC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LeD; else goto c7LeE;
       c7LeD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LeE: // global
           (_c7Lez::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lez::I64 == 0) goto c7LeB; else goto c7LeA;
       c7LeB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LeA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lez::I64;
           R2 = GHC.ForeignPtr.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.218886047 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule2_bytes" {
     GHC.ForeignPtr.$trModule2_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.221041091 UTC

[section ""data" . lvl3_r7KaY_closure" {
     lvl3_r7KaY_closure:
         const lvl3_r7KaY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r7KaY_entry() //  [R1]
         { info_tbl: [(c7LeT,
                       label: lvl3_r7KaY_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LeT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LeU; else goto c7LeV;
       c7LeU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LeV: // global
           (_c7LeQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LeQ::I64 == 0) goto c7LeS; else goto c7LeR;
       c7LeS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LeR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LeQ::I64;
           R2 = GHC.ForeignPtr.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.225460024 UTC

[section ""cstring" . lvl4_r7KaZ_bytes" {
     lvl4_r7KaZ_bytes:
         I8[] [46,47,71,72,67,47,70,111,114,101,105,103,110,80,116,114,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.228510112 UTC

[section ""data" . lvl5_r7Kb0_closure" {
     lvl5_r7Kb0_closure:
         const lvl5_r7Kb0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r7Kb0_entry() //  [R1]
         { info_tbl: [(c7Lfa,
                       label: lvl5_r7Kb0_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lfa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lfb; else goto c7Lfc;
       c7Lfb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Lfc: // global
           (_c7Lf7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lf7::I64 == 0) goto c7Lf9; else goto c7Lf8;
       c7Lf9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lf8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lf7::I64;
           R2 = lvl4_r7KaZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.232615758 UTC

[section ""data" . lvl6_r7Kb1_closure" {
     lvl6_r7Kb1_closure:
         const GHC.Types.I#_con_info;
         const 214;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.23441497 UTC

[section ""data" . lvl7_r7Kb2_closure" {
     lvl7_r7Kb2_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.236287786 UTC

[section ""data" . lvl8_r7Kb3_closure" {
     lvl8_r7Kb3_closure:
         const GHC.Types.I#_con_info;
         const 43;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.238417518 UTC

[section ""data" . lvl9_r7Kb4_closure" {
     lvl9_r7Kb4_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl6_r7Kb1_closure+1;
         const lvl7_r7Kb2_closure+1;
         const lvl6_r7Kb1_closure+1;
         const lvl8_r7Kb3_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.240319956 UTC

[section ""data" . lvl10_r7Kb5_closure" {
     lvl10_r7Kb5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl9_r7Kb4_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.242647823 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr2_entry() //  [R1]
         { info_tbl: [(c7Lfv,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lfv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lfw; else goto c7Lfx;
       c7Lfw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Lfx: // global
           (_c7Lfs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lfs::I64 == 0) goto c7Lfu; else goto c7Lft;
       c7Lfu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lft: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lfs::I64;
           R2 = lvl10_r7Kb5_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.247136754 UTC

[section ""cstring" . lvl11_r7Kb6_bytes" {
     lvl11_r7Kb6_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.249402249 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr2_closure" {
     GHC.ForeignPtr.mallocForeignPtr2_closure:
         const GHC.ForeignPtr.mallocForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr2_entry() //  [R1]
         { info_tbl: [(c7LfO,
                       label: GHC.ForeignPtr.mallocForeignPtr2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LfO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LfP; else goto c7LfQ;
       c7LfP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LfQ: // global
           (_c7LfJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LfJ::I64 == 0) goto c7LfL; else goto c7LfK;
       c7LfL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LfK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LfJ::I64;
           I64[Sp - 24] = block_c7LfM_info;
           R2 = lvl11_r7Kb6_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7LfM() //  [R1]
         { info_tbl: [(c7LfM,
                       label: block_c7LfM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LfM: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.25652687 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7Lga,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lga: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Lge; else goto c7Lgf;
       c7Lge: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lgf: // global
           I64[Sp - 16] = block_c7Lg8_info;
           _s7KbK::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           P64[Sp - 8] = _s7KbK::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7Lg8() //  [R1]
         { info_tbl: [(c7Lg8,
                       label: block_c7Lg8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lg8: // global
           I64[Sp] = block_c7Lgd_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7Lgd() //  [R1]
         { info_tbl: [(c7Lgd,
                       label: block_c7Lgd_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lgd: // global
           _s7KbP::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KbP::I64, 0)) goto c7Lgw; else goto c7LgA;
       c7Lgw: // global
           _s7KbN::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7Lgo_info;
           R2 = _s7KbN::I64;
           R1 = _s7KbP::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c7LgA: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Lgo() //  [R1]
         { info_tbl: [(c7Lgo,
                       label: block_c7Lgo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lgo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Lgz; else goto c7Lgy;
       c7Lgz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lgy: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.268128912 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7LgX,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LgX: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.271695044 UTC

[section ""cstring" . lvl12_r7Kb7_bytes" {
     lvl12_r7Kb7_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.273920505 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes2_entry() //  [R1]
         { info_tbl: [(c7Lhd,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lhd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lhe; else goto c7Lhf;
       c7Lhe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Lhf: // global
           (_c7Lh8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lh8::I64 == 0) goto c7Lha; else goto c7Lh9;
       c7Lha: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lh9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lh8::I64;
           I64[Sp - 24] = block_c7Lhb_info;
           R2 = lvl12_r7Kb7_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7Lhb() //  [R1]
         { info_tbl: [(c7Lhb,
                       label: block_c7Lhb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lhb: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.28064264 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry() //  [R2]
         { info_tbl: [(c7LhA,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LhA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7LhB; else goto c7LhC;
       c7LhB: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LhC: // global
           I64[Sp - 8] = block_c7Lhx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LhW; else goto c7Lhy;
       u7LhW: // global
           call _c7Lhx(R1) args: 0, res: 0, upd: 0;
       c7Lhy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lhx() //  [R1]
         { info_tbl: [(c7Lhx,
                       label: block_c7Lhx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lhx: // global
           _s7Kc2::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kc2::I64, 0)) goto c7LhR; else goto c7LhV;
       c7LhR: // global
           I64[Sp] = block_c7LhJ_info;
           R1 = _s7Kc2::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7LhV: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LhJ() //  [R1]
         { info_tbl: [(c7LhJ,
                       label: block_c7LhJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LhJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7LhU; else goto c7LhT;
       c7LhU: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LhT: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.289403445 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes_entry() //  [R2]
         { info_tbl: [(c7Lig,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lig: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.292852674 UTC

[section ""cstring" . lvl13_r7Kb8_bytes" {
     lvl13_r7Kb8_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.295142583 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_entry() //  [R1]
         { info_tbl: [(c7Liw,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Liw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lix; else goto c7Liy;
       c7Lix: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Liy: // global
           (_c7Lir::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lir::I64 == 0) goto c7Lit; else goto c7Lis;
       c7Lit: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lis: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lir::I64;
           I64[Sp - 24] = block_c7Liu_info;
           R2 = lvl13_r7Kb8_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7Liu() //  [R1]
         { info_tbl: [(c7Liu,
                       label: block_c7Liu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Liu: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.30272995 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c7LiT,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LiT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LiU; else goto c7LiV;
       c7LiU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LiV: // global
           I64[Sp - 16] = block_c7LiQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Ljm; else goto c7LiR;
       u7Ljm: // global
           call _c7LiQ(R1) args: 0, res: 0, upd: 0;
       c7LiR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LiQ() //  [R1]
         { info_tbl: [(c7LiQ,
                       label: block_c7LiQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LiQ: // global
           _s7Kcg::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kcg::I64, 0)) goto c7Ljf; else goto c7Ljk;
       c7Ljf: // global
           I64[Sp] = block_c7Lj2_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kcg::I64;
           if (R1 & 7 != 0) goto u7Ljl; else goto c7Lj3;
       u7Ljl: // global
           call _c7Lj2(R1) args: 0, res: 0, upd: 0;
       c7Lj3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Ljk: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Lj2() //  [R1]
         { info_tbl: [(c7Lj2,
                       label: block_c7Lj2_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lj2: // global
           _s7Kcg::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7Lj7_info;
           R2 = I64[R1 + 7];
           R1 = _s7Kcg::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lj7() //  [R1]
         { info_tbl: [(c7Lj7,
                       label: block_c7Lj7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lj7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Ljj; else goto c7Lji;
       c7Ljj: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lji: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.312858125 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c7LjK,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LjK: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.316568014 UTC

[section ""cstring" . lvl14_r7Kb9_bytes" {
     lvl14_r7Kb9_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,109,105,120,32,72,97,115,107,101,108,108,32,97,110,100,32,67,32,102,105,110,97,108,105,122,101,114,115,32,105,110,32,116,104,101,32,115,97,109,101,32,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.318736594 UTC

[section ""data" . GHC.ForeignPtr.noMixingError_closure" {
     GHC.ForeignPtr.noMixingError_closure:
         const GHC.ForeignPtr.noMixingError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.noMixingError_entry() //  [R1]
         { info_tbl: [(c7Lk0,
                       label: GHC.ForeignPtr.noMixingError_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lk0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lk1; else goto c7Lk2;
       c7Lk1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Lk2: // global
           (_c7LjV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LjV::I64 == 0) goto c7LjX; else goto c7LjW;
       c7LjX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LjW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LjV::I64;
           I64[Sp - 24] = block_c7LjY_info;
           R2 = lvl14_r7Kb9_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7LjY() //  [R1]
         { info_tbl: [(c7LjY,
                       label: block_c7LjY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LjY: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.32499537 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr1_closure" {
     GHC.ForeignPtr.touchForeignPtr1_closure:
         const GHC.ForeignPtr.touchForeignPtr1_info;
 },
 GHC.ForeignPtr.touchForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7Lkn,
                       label: GHC.ForeignPtr.touchForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lkn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Lko; else goto c7Lkp;
       c7Lko: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.touchForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lkp: // global
           I64[Sp - 8] = block_c7Lkk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Lku; else goto c7Lkl;
       u7Lku: // global
           call _c7Lkk(R1) args: 0, res: 0, upd: 0;
       c7Lkl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lkk() //  [R1]
         { info_tbl: [(c7Lkk,
                       label: block_c7Lkk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lkk: // global
           call MO_Touch(P64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.33132226 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr_closure" {
     GHC.ForeignPtr.touchForeignPtr_closure:
         const GHC.ForeignPtr.touchForeignPtr_info;
 },
 GHC.ForeignPtr.touchForeignPtr_entry() //  [R2]
         { info_tbl: [(c7LkJ,
                       label: GHC.ForeignPtr.touchForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LkJ: // global
           R2 = R2;
           call GHC.ForeignPtr.touchForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.335196327 UTC

[section ""data" . GHC.ForeignPtr.unsafeForeignPtrToPtr_closure" {
     GHC.ForeignPtr.unsafeForeignPtrToPtr_closure:
         const GHC.ForeignPtr.unsafeForeignPtrToPtr_info;
 },
 GHC.ForeignPtr.unsafeForeignPtrToPtr_entry() //  [R2]
         { info_tbl: [(c7LkX,
                       label: GHC.ForeignPtr.unsafeForeignPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LkX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ll1; else goto c7Ll2;
       c7Ll1: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.unsafeForeignPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ll2: // global
           I64[Sp - 8] = block_c7LkU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ll6; else goto c7LkV;
       u7Ll6: // global
           call _c7LkU(R1) args: 0, res: 0, upd: 0;
       c7LkV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LkU() //  [R1]
         { info_tbl: [(c7LkU,
                       label: block_c7LkU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LkU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Ll5; else goto c7Ll4;
       c7Ll5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ll4: // global
           _s7KcA::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7KcA::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.342956179 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(c7Llo,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Llo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Llu; else goto c7Llv;
       c7Llu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Llv: // global
           I64[Sp - 16] = block_c7Lll_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LlA; else goto c7Llm;
       u7LlA: // global
           call _c7Lll(R1) args: 0, res: 0, upd: 0;
       c7Llm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lll() //  [R1]
         { info_tbl: [(c7Lll,
                       label: block_c7Lll_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lll: // global
           _s7KcE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7Llr_info;
           R3 = _s7KcE::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7Llr() //  [R1, R2]
         { info_tbl: [(c7Llr,
                       label: block_c7Llr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Llr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Llz; else goto c7Lly;
       c7Llz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7Lly: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.35163794 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshow_entry() //  [R2]
         { info_tbl: [(c7LlV,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LlV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Lm1; else goto c7Lm2;
       c7Lm1: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lm2: // global
           I64[Sp - 8] = block_c7LlS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Lm7; else goto c7LlT;
       u7Lm7: // global
           call _c7LlS(R1) args: 0, res: 0, upd: 0;
       c7LlT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LlS() //  [R1]
         { info_tbl: [(c7LlS,
                       label: block_c7LlS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LlS: // global
           I64[Sp] = block_c7LlY_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 15];
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7LlY() //  [R1, R2]
         { info_tbl: [(c7LlY,
                       label: block_c7LlY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LlY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Lm6; else goto c7Lm5;
       c7Lm6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7Lm5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.360306407 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr1_closure" {
     GHC.ForeignPtr.$fShowForeignPtr1_closure:
         const GHC.ForeignPtr.$fShowForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr1_entry() //  [R2, R3]
         { info_tbl: [(c7Lms,
                       label: GHC.ForeignPtr.$fShowForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lms: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lmy; else goto c7Lmz;
       c7Lmy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lmz: // global
           I64[Sp - 16] = block_c7Lmp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LmE; else goto c7Lmq;
       u7LmE: // global
           call _c7Lmp(R1) args: 0, res: 0, upd: 0;
       c7Lmq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lmp() //  [R1]
         { info_tbl: [(c7Lmp,
                       label: block_c7Lmp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lmp: // global
           _s7KcT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7Lmv_info;
           R3 = _s7KcT::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lmv() //  [R1, R2]
         { info_tbl: [(c7Lmv,
                       label: block_c7Lmv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lmv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LmD; else goto c7LmC;
       c7LmD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7LmC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.369137238 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7LmW,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LmW: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ForeignPtr.$fShowForeignPtr1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.372976043 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure+3;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure+1;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.375731327 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7Lnb,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lnb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lnf; else goto c7Lng;
       c7Lnf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lng: // global
           I64[Sp - 16] = block_c7Ln8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lnz; else goto c7Ln9;
       u7Lnz: // global
           call _c7Ln8(R1) args: 0, res: 0, upd: 0;
       c7Ln9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ln8() //  [R1]
         { info_tbl: [(c7Ln8,
                       label: block_c7Ln8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ln8: // global
           I64[Sp] = block_c7Lne_info;
           _s7Kd5::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kd5::I64;
           if (R1 & 7 != 0) goto u7Lny; else goto c7Lni;
       u7Lny: // global
           call _c7Lne(R1) args: 0, res: 0, upd: 0;
       c7Lni: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lne() //  [R1]
         { info_tbl: [(c7Lne,
                       label: block_c7Lne_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lne: // global
           _s7Kd5::I64 = I64[Sp + 8];
           _s7Kd8::I64 = I64[R1 + 15];
           if (_s7Kd5::I64 >= _s7Kd8::I64) goto c7Lnw; else goto c7Lnx;
       c7Lnw: // global
           if (_s7Kd5::I64 == _s7Kd8::I64) goto c7Lnu; else goto c7Lnt;
       c7Lnu: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lnt: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lnx: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.385914928 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c==_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c==_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7LnX,
                       label: GHC.ForeignPtr.$fEqForeignPtr_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LnX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lo1; else goto c7Lo2;
       c7Lo1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lo2: // global
           I64[Sp - 16] = block_c7LnU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lob; else goto c7LnV;
       u7Lob: // global
           call _c7LnU(R1) args: 0, res: 0, upd: 0;
       c7LnV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LnU() //  [R1]
         { info_tbl: [(c7LnU,
                       label: block_c7LnU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LnU: // global
           I64[Sp] = block_c7Lo0_info;
           _s7Kdf::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdf::I64;
           if (R1 & 7 != 0) goto u7Loa; else goto c7Lo4;
       u7Loa: // global
           call _c7Lo0(R1) args: 0, res: 0, upd: 0;
       c7Lo4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lo0() //  [R1]
         { info_tbl: [(c7Lo0,
                       label: block_c7Lo0_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lo0: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.394310323 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7LoA,
                       label: GHC.ForeignPtr.$fEqForeignPtr_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LoA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LoE; else goto c7LoF;
       c7LoE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LoF: // global
           I64[Sp - 16] = block_c7Lox_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LoS; else goto c7Loy;
       u7LoS: // global
           call _c7Lox(R1) args: 0, res: 0, upd: 0;
       c7Loy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lox() //  [R1]
         { info_tbl: [(c7Lox,
                       label: block_c7Lox_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lox: // global
           I64[Sp] = block_c7LoD_info;
           _s7Kdo::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdo::I64;
           if (R1 & 7 != 0) goto u7LoR; else goto c7LoH;
       u7LoR: // global
           call _c7LoD(R1) args: 0, res: 0, upd: 0;
       c7LoH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LoD() //  [R1]
         { info_tbl: [(c7LoD,
                       label: block_c7LoD_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LoD: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7LoQ; else goto c7LoP;
       c7LoQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LoP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.402080676 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_closure+2;
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.404605988 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7Lph,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lph: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lpl; else goto c7Lpm;
       c7Lpl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lpm: // global
           I64[Sp - 16] = block_c7Lpe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lpz; else goto c7Lpf;
       u7Lpz: // global
           call _c7Lpe(R1) args: 0, res: 0, upd: 0;
       c7Lpf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lpe() //  [R1]
         { info_tbl: [(c7Lpe,
                       label: block_c7Lpe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lpe: // global
           I64[Sp] = block_c7Lpk_info;
           _s7Kdx::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdx::I64;
           if (R1 & 7 != 0) goto u7Lpy; else goto c7Lpo;
       u7Lpy: // global
           call _c7Lpk(R1) args: 0, res: 0, upd: 0;
       c7Lpo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lpk() //  [R1]
         { info_tbl: [(c7Lpk,
                       label: block_c7Lpk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lpk: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7Lpw; else goto c7Lpx;
       c7Lpw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lpx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.413664965 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7LpX,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LpX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lq1; else goto c7Lq2;
       c7Lq1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lq2: // global
           I64[Sp - 16] = block_c7LpU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lqf; else goto c7LpV;
       u7Lqf: // global
           call _c7LpU(R1) args: 0, res: 0, upd: 0;
       c7LpV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LpU() //  [R1]
         { info_tbl: [(c7LpU,
                       label: block_c7LpU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LpU: // global
           I64[Sp] = block_c7Lq0_info;
           _s7KdG::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdG::I64;
           if (R1 & 7 != 0) goto u7Lqe; else goto c7Lq4;
       u7Lqe: // global
           call _c7Lq0(R1) args: 0, res: 0, upd: 0;
       c7Lq4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lq0() //  [R1]
         { info_tbl: [(c7Lq0,
                       label: block_c7Lq0_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lq0: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7Lqc; else goto c7Lqd;
       c7Lqc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lqd: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.423928326 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7LqD,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LqD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LqH; else goto c7LqI;
       c7LqH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LqI: // global
           I64[Sp - 16] = block_c7LqA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lr1; else goto c7LqB;
       u7Lr1: // global
           call _c7LqA(R1) args: 0, res: 0, upd: 0;
       c7LqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LqA() //  [R1]
         { info_tbl: [(c7LqA,
                       label: block_c7LqA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LqA: // global
           I64[Sp] = block_c7LqG_info;
           _s7KdP::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdP::I64;
           if (R1 & 7 != 0) goto u7Lr0; else goto c7LqK;
       u7Lr0: // global
           call _c7LqG(R1) args: 0, res: 0, upd: 0;
       c7LqK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LqG() //  [R1]
         { info_tbl: [(c7LqG,
                       label: block_c7LqG_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LqG: // global
           _s7KdP::I64 = I64[Sp + 8];
           _s7KdS::I64 = I64[R1 + 15];
           if (_s7KdP::I64 < _s7KdS::I64) goto c7LqZ; else goto c7LqY;
       c7LqY: // global
           if (_s7KdP::I64 == _s7KdS::I64) goto c7LqZ; else goto c7LqV;
       c7LqZ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LqV: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.433039358 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7Lro,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lro: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lrs; else goto c7Lrt;
       c7Lrs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lrt: // global
           I64[Sp - 16] = block_c7Lrl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LrM; else goto c7Lrm;
       u7LrM: // global
           call _c7Lrl(R1) args: 0, res: 0, upd: 0;
       c7Lrm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lrl() //  [R1]
         { info_tbl: [(c7Lrl,
                       label: block_c7Lrl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lrl: // global
           I64[Sp] = block_c7Lrr_info;
           _s7KdZ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdZ::I64;
           if (R1 & 7 != 0) goto u7LrL; else goto c7Lrv;
       u7LrL: // global
           call _c7Lrr(R1) args: 0, res: 0, upd: 0;
       c7Lrv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lrr() //  [R1]
         { info_tbl: [(c7Lrr,
                       label: block_c7Lrr_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lrr: // global
           _s7KdZ::I64 = I64[Sp + 8];
           _s7Ke2::I64 = I64[R1 + 15];
           if (_s7KdZ::I64 < _s7Ke2::I64) goto c7LrK; else goto c7LrJ;
       c7LrJ: // global
           if (_s7KdZ::I64 == _s7Ke2::I64) goto c7LrK; else goto c7LrG;
       c7LrK: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LrG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.442063972 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7Ls9,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ls9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lsd; else goto c7Lse;
       c7Lsd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lse: // global
           I64[Sp - 16] = block_c7Ls6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lsx; else goto c7Ls7;
       u7Lsx: // global
           call _c7Ls6(R1) args: 0, res: 0, upd: 0;
       c7Ls7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ls6() //  [R1]
         { info_tbl: [(c7Ls6,
                       label: block_c7Ls6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ls6: // global
           I64[Sp - 8] = block_c7Lsc_info;
           _s7Ke8::P64 = R1;
           _s7Ke9::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7Ke9::I64;
           P64[Sp + 8] = _s7Ke8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Lsw; else goto c7Lsg;
       u7Lsw: // global
           call _c7Lsc(R1) args: 0, res: 0, upd: 0;
       c7Lsg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lsc() //  [R1]
         { info_tbl: [(c7Lsc,
                       label: block_c7Lsc_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lsc: // global
           _s7Ke9::I64 = I64[Sp + 8];
           _s7Keb::P64 = R1;
           _s7Kec::I64 = I64[R1 + 15];
           if (_s7Ke9::I64 < _s7Kec::I64) goto c7Lsv; else goto c7Lsu;
       c7Lsu: // global
           if (_s7Ke9::I64 == _s7Kec::I64) goto c7Lsv; else goto c7Lsr;
       c7Lsv: // global
           R1 = _s7Keb::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Lsr: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.450958227 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7LsW,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LsW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lt0; else goto c7Lt1;
       c7Lt0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lt1: // global
           I64[Sp - 16] = block_c7LsT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Ltk; else goto c7LsU;
       u7Ltk: // global
           call _c7LsT(R1) args: 0, res: 0, upd: 0;
       c7LsU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LsT() //  [R1]
         { info_tbl: [(c7LsT,
                       label: block_c7LsT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LsT: // global
           I64[Sp - 8] = block_c7LsZ_info;
           _s7Kei::P64 = R1;
           _s7Kej::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7Kej::I64;
           P64[Sp + 8] = _s7Kei::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ltj; else goto c7Lt3;
       u7Ltj: // global
           call _c7LsZ(R1) args: 0, res: 0, upd: 0;
       c7Lt3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LsZ() //  [R1]
         { info_tbl: [(c7LsZ,
                       label: block_c7LsZ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LsZ: // global
           _s7Kei::P64 = P64[Sp + 16];
           _s7Kej::I64 = I64[Sp + 8];
           _s7Kem::I64 = I64[R1 + 15];
           if (_s7Kej::I64 < _s7Kem::I64) goto c7Lti; else goto c7Lth;
       c7Lth: // global
           if (_s7Kej::I64 == _s7Kem::I64) goto c7Lti; else goto c7Lte;
       c7Lti: // global
           R1 = _s7Kei::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Lte: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.460143136 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_closure+1;
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.462709789 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr1_closure" {
     GHC.ForeignPtr.castForeignPtr1_closure:
         const GHC.ForeignPtr.castForeignPtr1_info;
 },
 GHC.ForeignPtr.castForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7LtH,
                       label: GHC.ForeignPtr.castForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LtH: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.467704589 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr_closure" {
     GHC.ForeignPtr.castForeignPtr_closure:
         const GHC.ForeignPtr.castForeignPtr_info;
 },
 GHC.ForeignPtr.castForeignPtr_entry() //  [R2]
         { info_tbl: [(c7LtU,
                       label: GHC.ForeignPtr.castForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LtU: // global
           R2 = R2;
           call GHC.ForeignPtr.castForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.471806904 UTC

[section ""data" . GHC.ForeignPtr.plusForeignPtr_closure" {
     GHC.ForeignPtr.plusForeignPtr_closure:
         const GHC.ForeignPtr.plusForeignPtr_info;
 },
 GHC.ForeignPtr.plusForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7Lu8,
                       label: GHC.ForeignPtr.plusForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lu8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Luk; else goto c7Lul;
       c7Luk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.plusForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lul: // global
           I64[Sp - 16] = block_c7Lu5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lur; else goto c7Lu6;
       u7Lur: // global
           call _c7Lu5(R1) args: 0, res: 0, upd: 0;
       c7Lu6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lu5() //  [R1]
         { info_tbl: [(c7Lu5,
                       label: block_c7Lu5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lu5: // global
           I64[Sp - 8] = block_c7Lub_info;
           _s7Kev::P64 = P64[R1 + 7];
           _s7Keu::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Kev::P64;
           I64[Sp + 8] = _s7Keu::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Luq; else goto c7Luc;
       u7Luq: // global
           call _c7Lub(R1) args: 0, res: 0, upd: 0;
       c7Luc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lub() //  [R1]
         { info_tbl: [(c7Lub,
                       label: block_c7Lub_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lub: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Lup; else goto c7Luo;
       c7Lup: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Luo: // global
           _s7Key::I64 = I64[Sp + 16] + I64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7Key::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.480253958 UTC

[section ""data" . GHC.ForeignPtr.$trModule3_closure" {
     GHC.ForeignPtr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.482245925 UTC

[section ""data" . GHC.ForeignPtr.$trModule1_closure" {
     GHC.ForeignPtr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.484170201 UTC

[section ""data" . GHC.ForeignPtr.$trModule_closure" {
     GHC.ForeignPtr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ForeignPtr.$trModule3_closure+1;
         const GHC.ForeignPtr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.486070977 UTC

[section ""data" . $krep_r7Kba_closure" {
     $krep_r7Kba_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.487942732 UTC

[section ""data" . $krep1_r7Kbb_closure" {
     $krep1_r7Kbb_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.489982778 UTC

[section ""data" . $krep2_r7Kbc_closure" {
     $krep2_r7Kbc_closure:
         const :_con_info;
         const $krep1_r7Kbb_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.49166986 UTC

[section ""data" . $krep3_r7Kbd_closure" {
     $krep3_r7Kbd_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.493461426 UTC

[section ""data" . $krep4_r7Kbe_closure" {
     $krep4_r7Kbe_closure:
         const :_con_info;
         const $krep3_r7Kbd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.49520871 UTC

[section ""data" . $krep5_r7Kbf_closure" {
     $krep5_r7Kbf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_r7Kbe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.497480685 UTC

[section ""data" . $krep6_r7Kbg_closure" {
     $krep6_r7Kbg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.499123274 UTC

[section ""data" . $krep7_r7Kbh_closure" {
     $krep7_r7Kbh_closure:
         const :_con_info;
         const $krep_r7Kba_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.500747806 UTC

[section ""data" . $krep8_r7Kbi_closure" {
     $krep8_r7Kbi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep7_r7Kbh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.502505185 UTC

[section ""data" . $krep9_r7Kbj_closure" {
     $krep9_r7Kbj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWeak#_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.504192317 UTC

[section ""data" . $krep10_r7Kbk_closure" {
     $krep10_r7Kbk_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcAddr#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.505902326 UTC

[section ""cstring" . GHC.ForeignPtr.$tcFinalizers2_bytes" {
     GHC.ForeignPtr.$tcFinalizers2_bytes:
         I8[] [70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.507531086 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers1_closure" {
     GHC.ForeignPtr.$tcFinalizers1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcFinalizers2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.509210991 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers_closure" {
     GHC.ForeignPtr.$tcFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcFinalizers1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2126386461452460014;
         const 14391791758474672075;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.51112194 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers1_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcFinalizers_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.512877512 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'NoFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'NoFinalizers3_bytes:
         I8[] [39,78,111,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.514468425 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers2_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.516120315 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 1940741700794708869;
         const 15606281748314638871;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.517960789 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers1_closure" {
     GHC.ForeignPtr.$tc'CFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.519715941 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'CFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'CFinalizers3_bytes:
         I8[] [39,67,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.52187716 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers2_closure" {
     GHC.ForeignPtr.$tc'CFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'CFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.523700236 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers_closure" {
     GHC.ForeignPtr.$tc'CFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers1_closure+4;
         const 5471016724267814004;
         const 11112927960337249170;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.526015498 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers1_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7Kbf_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.527649899 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes:
         I8[] [39,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.529282984 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers2_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.530891349 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers1_closure+4;
         const 2766439294378598012;
         const 9182349323511249767;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.532773986 UTC

[section ""data" . $krep11_r7Kbl_closure" {
     $krep11_r7Kbl_closure:
         const :_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.534503694 UTC

[section ""data" . $krep12_r7Kbm_closure" {
     $krep12_r7Kbm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7Kbl_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.536264871 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtrContents2_bytes" {
     GHC.ForeignPtr.$tcForeignPtrContents2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114,67,111,110,116,101,110,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.538472739 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents1_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.540186671 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtrContents1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2960910307208088010;
         const 1419315288615932334;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.542112886 UTC

[section ""data" . $krep13_r7Kbn_closure" {
     $krep13_r7Kbn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.543849348 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.545887222 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainPtr3_bytes:
         I8[] [39,80,108,97,105,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.547571864 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.54992652 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr_closure" {
     GHC.ForeignPtr.$tc'PlainPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr1_closure+4;
         const 10386497703892305970;
         const 4483570029522342780;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.55171871 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7Kbm_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.553464554 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes:
         I8[] [39,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.555125834 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.556792483 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 9658214180323125435;
         const 4797612916438137994;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.558871884 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr1_closure" {
     GHC.ForeignPtr.$tc'MallocPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.560534786 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MallocPtr3_bytes" {
     GHC.ForeignPtr.$tc'MallocPtr3_bytes:
         I8[] [39,77,97,108,108,111,99,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.56226172 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr2_closure" {
     GHC.ForeignPtr.$tc'MallocPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MallocPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.563946739 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr_closure" {
     GHC.ForeignPtr.$tc'MallocPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr2_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr1_closure+4;
         const 1358169953258233372;
         const 15155489453511463859;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.565827963 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtr2_bytes" {
     GHC.ForeignPtr.$tcForeignPtr2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.567538438 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr1_closure" {
     GHC.ForeignPtr.$tcForeignPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.56922484 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr_closure" {
     GHC.ForeignPtr.$tcForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13645276010227069957;
         const 424768606850180054;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.571005428 UTC

[section ""data" . $krep14_r7Kbo_closure" {
     $krep14_r7Kbo_closure:
         const :_con_info;
         const $krep6_r7Kbg_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.572698857 UTC

[section ""data" . $krep15_r7Kbp_closure" {
     $krep15_r7Kbp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure+1;
         const $krep14_r7Kbo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.575222553 UTC

[section ""data" . $krep16_r7Kbq_closure" {
     $krep16_r7Kbq_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7Kbn_closure+1;
         const $krep15_r7Kbp_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.576934727 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7Kbk_closure+1;
         const $krep16_r7Kbq_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.578688551 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'ForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'ForeignPtr3_bytes:
         I8[] [39,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.580375552 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'ForeignPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.58208942 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr1_closure+4;
         const 15066988800190837275;
         const 12331496810414125071;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.583876982 UTC

[section ""cstring" . GHC.ForeignPtr.$tcMyWeak2_bytes" {
     GHC.ForeignPtr.$tcMyWeak2_bytes:
         I8[] [77,121,87,101,97,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.585877164 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak1_closure" {
     GHC.ForeignPtr.$tcMyWeak1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcMyWeak2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.587630563 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak_closure" {
     GHC.ForeignPtr.$tcMyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcMyWeak1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18176044154139657744;
         const 6003369520845561213;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.589397987 UTC

[section ""data" . $krep17_r7Kbr_closure" {
     $krep17_r7Kbr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcMyWeak_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.591100928 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak1_closure" {
     GHC.ForeignPtr.$tc'MyWeak1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const $krep17_r7Kbr_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.5928265 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MyWeak3_bytes" {
     GHC.ForeignPtr.$tc'MyWeak3_bytes:
         I8[] [39,77,121,87,101,97,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.594540451 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak2_closure" {
     GHC.ForeignPtr.$tc'MyWeak2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MyWeak3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.596299501 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak_closure" {
     GHC.ForeignPtr.$tc'MyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak2_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak1_closure+4;
         const 12419514784912020020;
         const 3312746660203758866;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.598750679 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr_1_closure" {
     GHC.ForeignPtr.newForeignPtr_1_closure:
         const GHC.ForeignPtr.newForeignPtr_1_info;
 },
 GHC.ForeignPtr.newForeignPtr_1_entry() //  [R2]
         { info_tbl: [(c7LvT,
                       label: GHC.ForeignPtr.newForeignPtr_1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LvT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lw0; else goto c7Lw1;
       c7Lw0: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.newForeignPtr_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lw1: // global
           I64[Sp - 8] = block_c7LvQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Lw6; else goto c7LvR;
       u7Lw6: // global
           call _c7LvQ(R1) args: 0, res: 0, upd: 0;
       c7LvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LvQ() //  [R1]
         { info_tbl: [(c7LvQ,
                       label: block_c7LvQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LvQ: // global
           I64[Sp - 8] = block_c7LvW_info;
           _s7KeC::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KeC::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LvW() //  [R1]
         { info_tbl: [(c7LvW,
                       label: block_c7LvW_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LvW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Lw5; else goto c7Lw4;
       c7Lw5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lw4: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.607202303 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr__closure" {
     GHC.ForeignPtr.newForeignPtr__closure:
         const GHC.ForeignPtr.newForeignPtr__info;
 },
 GHC.ForeignPtr.newForeignPtr__entry() //  [R2]
         { info_tbl: [(c7Lwq,
                       label: GHC.ForeignPtr.newForeignPtr__info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lwq: // global
           R2 = R2;
           call GHC.ForeignPtr.newForeignPtr_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.612497123 UTC

[section ""data" . GHC.ForeignPtr.$winsertCFinalizer_closure" {
     GHC.ForeignPtr.$winsertCFinalizer_closure:
         const GHC.ForeignPtr.$winsertCFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$winsertCFinalizer_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lwy: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_s7Kf6_entry() //  [R1, R2]
         { info_tbl: [(c7Lx0,
                       label: sat_s7Kf6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lx0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lx1; else goto c7Lx2;
       c7Lx1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lx2: // global
           I64[Sp - 16] = block_c7LwS_info;
           _s7KeZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s7KeZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lxi; else goto c7LwT;
       u7Lxi: // global
           call _c7LwS(R1) args: 0, res: 0, upd: 0;
       c7LwT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LwS() //  [R1]
         { info_tbl: [(c7LwS,
                       label: block_c7LwS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LwS: // global
           _c7LwZ::P64 = R1 & 7;
           if (_c7LwZ::P64 < 3) goto u7Lxh; else goto c7LwY;
       u7Lxh: // global
           if (_c7LwZ::P64 < 2) goto c7LwW; else goto c7LwX;
       c7LwW: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LwX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7Lxd; else goto c7Lxc;
       c7Lxd: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lxc: // global
           _s7Kf2::P64 = P64[R1 + 6];
           I64[Hp - 56] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 48] = _s7Kf2::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 39;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LwY: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$winsertCFinalizer_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7Lxo,
                       label: GHC.ForeignPtr.$winsertCFinalizer_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, True, True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lxo: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7Lxp; else goto u7Lyz;
       c7Lxp: // global
           R1 = GHC.ForeignPtr.$winsertCFinalizer_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       u7Lyz: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _c7Lwz() args: 0, res: 0, upd: 0;
     }
 },
 _c7Lwz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lwz: // global
           _s7KeR::P64 = P64[P64[Sp] + 8];
           I64[Sp - 8] = block_c7LwC_info;
           R1 = _s7KeR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LyH; else goto c7LwD;
       u7LyH: // global
           call _c7LwC(R1) args: 0, res: 0, upd: 0;
       c7LwD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LwC() //  [R1]
         { info_tbl: [(c7LwC,
                       label: block_c7LwC_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LwC: // global
           _c7Lxn::P64 = R1 & 7;
           if (_c7Lxn::P64 < 3) goto u7Lyy; else goto c7Lxm;
       u7Lyy: // global
           if (_c7Lxn::P64 < 2) goto c7Lxk; else goto c7Lxl;
       c7Lxk: // global
           I64[Sp] = block_c7LwH_info;
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 8];
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
       c7Lxl: // global
           I64[Sp] = block_c7Lym_info;
           R5 = P64[R1 + 6];
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
       c7Lxm: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LwH() //  [R1]
         { info_tbl: [(c7LwH,
                       label: block_c7LwH_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LwH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7Lxx; else goto c7Lxw;
       c7Lxx: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lxw: // global
           I64[Hp - 88] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.False_closure+1;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 86;
           P64[Hp - 16] = Hp - 55;
           I64[Hp - 8] = sat_s7Kf6_info;
           P64[Hp] = Hp - 31;
           I64[Sp - 8] = block_c7Lxr_info;
           R2 = Hp - 7;
           _s7KeV::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s7KeV::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lxr() //  [R1]
         { info_tbl: [(c7Lxr,
                       label: block_c7Lxr_info
                       rep:StackRep [False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lxr: // global
           I64[Sp] = block_c7Lxt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LyJ; else goto c7Lxz;
       u7LyJ: // global
           call _c7Lxt(R1) args: 0, res: 0, upd: 0;
       c7Lxz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lxt() //  [R1]
         { info_tbl: [(c7Lxt,
                       label: block_c7Lxt_info
                       rep:StackRep [False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lxt: // global
           I64[Sp - 8] = block_c7LxF_info;
           _s7Kfb::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s7Kfb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LyK; else goto c7LxS;
       u7LyK: // global
           call _c7LxF(R1) args: 0, res: 0, upd: 0;
       c7LxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LxF() //  [R1]
         { info_tbl: [(c7LxF,
                       label: block_c7LxF_info
                       rep:StackRep [False, False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LxF: // global
           if (R1 & 7 == 1) goto c7LxZ; else goto c7Lyd;
       c7LxZ: // global
           I64[Sp + 16] = block_c7LxW_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7LyL; else goto c7Ly0;
       u7LyL: // global
           call _c7LxW(R1) args: 0, res: 0, upd: 0;
       c7Ly0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Lyd: // global
           I64[Sp] = block_c7Ly7_info;
           R1 = P64[Sp + 16];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LxW() //  [R1]
         { info_tbl: [(c7LxW,
                       label: block_c7LxW_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LxW: // global
           P64[Sp] = P64[R1 + 7];
           call _s7Kfd() args: 0, res: 0, upd: 0;
     }
 },
 _c7Ly7() //  []
         { info_tbl: [(c7Ly7,
                       label: block_c7Ly7_info
                       rep:StackRep [False, True, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ly7: // global
           I64[Sp + 16] = block_c7Lyb_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7LyP; else goto c7Lyf;
       u7LyP: // global
           call _c7Lyb(R1) args: 0, res: 0, upd: 0;
       c7Lyf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Lyb() //  [R1]
         { info_tbl: [(c7Lyb,
                       label: block_c7Lyb_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lyb: // global
           P64[Sp] = P64[R1 + 7];
           call _s7Kfd() args: 0, res: 0, upd: 0;
     }
 },
 _s7Kfd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7Kfd: // global
           _s7Kff::P64 = P64[Sp];
           I64[Sp] = block_c7LxK_info;
           R5 = _s7Kff::P64;
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LxK() //  [R1]
         { info_tbl: [(c7LxK,
                       label: block_c7LxK_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LxK: // global
           if (R1 == 1) goto u7LyC; else goto u7LyD;
       u7LyC: // global
           Sp = Sp + 56;
           call _c7Lyt() args: 0, res: 0, upd: 0;
       u7LyD: // global
           Sp = Sp + 8;
           call _c7Lys() args: 0, res: 0, upd: 0;
     }
 },
 _c7Lym() //  [R1]
         { info_tbl: [(c7Lym,
                       label: block_c7Lym_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lym: // global
           if (R1 == 1) goto u7LyE; else goto u7LyF;
       u7LyE: // global
           Sp = Sp + 56;
           call _c7Lyt() args: 0, res: 0, upd: 0;
       u7LyF: // global
           Sp = Sp + 8;
           call _c7Lys() args: 0, res: 0, upd: 0;
     }
 },
 _c7Lyt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lyt: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Lys() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Lys: // global
           P64[Sp] = P64[Sp];
           I64[Sp + 8] = I64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           call _c7Lwz() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.645330148 UTC

[section ""cstring" . lvl15_r7Kbs_bytes" {
     lvl15_r7Kbs_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,97,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.647470987 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer2_entry() //  [R1]
         { info_tbl: [(c7LAl,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LAl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LAm; else goto c7LAn;
       c7LAm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LAn: // global
           (_c7LAg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LAg::I64 == 0) goto c7LAi; else goto c7LAh;
       c7LAi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LAh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LAg::I64;
           I64[Sp - 24] = block_c7LAj_info;
           R2 = lvl15_r7Kbs_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7LAj() //  [R1]
         { info_tbl: [(c7LAj,
                       label: block_c7LAj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LAj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.6537196 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LAC: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry() //  [R2, R3, R4,
                                                         R5]
         { info_tbl: [(c7LAO,
                       label: GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LAO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7LAP; else goto c7LAQ;
       c7LAP: // global
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7LAQ: // global
           I64[Sp - 32] = block_c7LAG_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7LB1; else goto c7LAH;
       u7LB1: // global
           call _c7LAG(R1) args: 0, res: 0, upd: 0;
       c7LAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LAG() //  [R1]
         { info_tbl: [(c7LAG,
                       label: block_c7LAG_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LAG: // global
           _c7LAN::P64 = R1 & 7;
           if (_c7LAN::P64 < 3) goto u7LB0; else goto c7LAM;
       u7LB0: // global
           _s7KfB::I64 = I64[Sp + 8];
           _s7KfC::I64 = I64[Sp + 16];
           _s7KfD::I64 = I64[Sp + 24];
           if (_c7LAN::P64 < 2) goto c7LAK; else goto c7LAL;
       c7LAK: // global
           R6 = _s7KfD::I64;
           R5 = _s7KfC::I64;
           R4 = 1;
           R3 = _s7KfB::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 24] = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7LAL: // global
           R6 = _s7KfD::I64;
           R5 = _s7KfC::I64;
           R4 = 1;
           R3 = _s7KfB::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7LAM: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.661533266 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7LBl,
                       label: GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LBl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LBu; else goto c7LBv;
       c7LBu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LBv: // global
           I64[Sp - 24] = block_c7LBi_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LBE; else goto c7LBj;
       u7LBE: // global
           call _c7LBi(R1) args: 0, res: 0, upd: 0;
       c7LBj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LBi() //  [R1]
         { info_tbl: [(c7LBi,
                       label: block_c7LBi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LBi: // global
           I64[Sp] = block_c7LBo_info;
           _s7KfR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KfR::I64;
           if (R1 & 7 != 0) goto u7LBD; else goto c7LBp;
       u7LBD: // global
           call _c7LBo(R1) args: 0, res: 0, upd: 0;
       c7LBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LBo() //  [R1]
         { info_tbl: [(c7LBo,
                       label: block_c7LBo_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LBo: // global
           I64[Sp] = block_c7LBt_info;
           _s7KfT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7KfT::I64;
           if (R1 & 7 != 0) goto u7LBF; else goto c7LBy;
       u7LBF: // global
           call _c7LBt(R1) args: 0, res: 0, upd: 0;
       c7LBy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LBt() //  [R1]
         { info_tbl: [(c7LBt,
                       label: block_c7LBt_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LBt: // global
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 15];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.670938724 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv_entry() //  [R2, R3, R4]
         { info_tbl: [(c7LC1,
                       label: GHC.ForeignPtr.addForeignPtrFinalizerEnv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LC1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.675473032 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizer_entry() //  [R2, R3, R4]
         { info_tbl: [(c7LCk,
                       label: GHC.ForeignPtr.$waddForeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LCk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LCl; else goto c7LCm;
       c7LCl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LCm: // global
           I64[Sp - 24] = block_c7LCc_info;
           R1 = R4;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LCx; else goto c7LCd;
       u7LCx: // global
           call _c7LCc(R1) args: 0, res: 0, upd: 0;
       c7LCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LCc() //  [R1]
         { info_tbl: [(c7LCc,
                       label: block_c7LCc_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LCc: // global
           _c7LCj::P64 = R1 & 7;
           if (_c7LCj::P64 < 3) goto u7LCw; else goto c7LCi;
       u7LCw: // global
           _s7KfX::I64 = I64[Sp + 8];
           _s7KfY::I64 = I64[Sp + 16];
           if (_c7LCj::P64 < 2) goto c7LCg; else goto c7LCh;
       c7LCg: // global
           R6 = _s7KfY::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7KfX::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 16] = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7LCh: // global
           R6 = _s7KfY::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7KfX::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7LCi: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.682443043 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer1_entry() //  [R2, R3]
         { info_tbl: [(c7LCP,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LCP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LCT; else goto c7LCU;
       c7LCT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LCU: // global
           I64[Sp - 16] = block_c7LCM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LD2; else goto c7LCN;
       u7LD2: // global
           call _c7LCM(R1) args: 0, res: 0, upd: 0;
       c7LCN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LCM() //  [R1]
         { info_tbl: [(c7LCM,
                       label: block_c7LCM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LCM: // global
           I64[Sp] = block_c7LCS_info;
           _s7Kgb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kgb::I64;
           if (R1 & 7 != 0) goto u7LD1; else goto c7LCW;
       u7LD1: // global
           call _c7LCS(R1) args: 0, res: 0, upd: 0;
       c7LCW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LCS() //  [R1]
         { info_tbl: [(c7LCS,
                       label: block_c7LCS_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LCS: // global
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 15];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrFinalizer_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.689440654 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7LDk,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LDk: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizer1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.692619911 UTC

[section ""cstring" . lvl16_r7Kbt_bytes" {
     lvl16_r7Kbt_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.694825849 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_entry() //  [R1]
         { info_tbl: [(c7LDA,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LDA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LDB; else goto c7LDC;
       c7LDB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LDC: // global
           (_c7LDv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LDv::I64 == 0) goto c7LDx; else goto c7LDw;
       c7LDx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LDw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LDv::I64;
           I64[Sp - 24] = block_c7LDy_info;
           R2 = lvl16_r7Kbt_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7LDy() //  [R1]
         { info_tbl: [(c7LDy,
                       label: block_c7LDy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LDy: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.70081619 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry() //  [R2, R3]
         { info_tbl: [(c7LDX,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LDX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LDY; else goto c7LDZ;
       c7LDY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LDZ: // global
           I64[Sp - 16] = block_c7LDU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LEt; else goto c7LDV;
       u7LEt: // global
           call _c7LDU(R1) args: 0, res: 0, upd: 0;
       c7LDV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LDU() //  [R1]
         { info_tbl: [(c7LDU,
                       label: block_c7LDU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LDU: // global
           _s7Kgk::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kgk::I64, 0)) goto c7LEl; else goto c7LEr;
       c7LEl: // global
           I64[Sp] = block_c7LE6_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kgk::I64;
           if (R1 & 7 != 0) goto u7LEs; else goto c7LE7;
       u7LEs: // global
           call _c7LE6(R1) args: 0, res: 0, upd: 0;
       c7LE7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7LEr: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LE6() //  [R1]
         { info_tbl: [(c7LE6,
                       label: block_c7LE6_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LE6: // global
           I64[Sp - 8] = block_c7LEb_info;
           _s7Kgn::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7Kgn::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LEb() //  [R1]
         { info_tbl: [(c7LEb,
                       label: block_c7LEb_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LEb: // global
           _s7Kgn::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7LEd_info;
           R2 = _s7Kgn::I64;
           _s7Kgq::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s7Kgq::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LEd() //  [R1]
         { info_tbl: [(c7LEd,
                       label: block_c7LEd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LEd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7LEq; else goto c7LEp;
       c7LEq: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LEp: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.713331105 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes_entry() //  [R2, R3]
         { info_tbl: [(c7LEV,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LEV: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.716501985 UTC

[section ""cstring" . lvl17_r7Kbu_bytes" {
     lvl17_r7Kbu_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.718470683 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes2_entry() //  [R1]
         { info_tbl: [(c7LFb,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LFb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LFc; else goto c7LFd;
       c7LFc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LFd: // global
           (_c7LF6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LF6::I64 == 0) goto c7LF8; else goto c7LF7;
       c7LF8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LF7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LF6::I64;
           I64[Sp - 24] = block_c7LF9_info;
           R2 = lvl17_r7Kbu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7LF9() //  [R1]
         { info_tbl: [(c7LF9,
                       label: block_c7LF9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LF9: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.72462952 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes1_entry() //  [R2]
         { info_tbl: [(c7LFy,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LFy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LFz; else goto c7LFA;
       c7LFz: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LFA: // global
           I64[Sp - 8] = block_c7LFv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LFX; else goto c7LFw;
       u7LFX: // global
           call _c7LFv(R1) args: 0, res: 0, upd: 0;
       c7LFw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LFv() //  [R1]
         { info_tbl: [(c7LFv,
                       label: block_c7LFv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LFv: // global
           _s7KgC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KgC::I64, 0)) goto c7LFR; else goto c7LFW;
       c7LFR: // global
           I64[Sp - 8] = block_c7LFH_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KgC::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7LFW: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LFH() //  [R1]
         { info_tbl: [(c7LFH,
                       label: block_c7LFH_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LFH: // global
           I64[Sp] = block_c7LFJ_info;
           _s7KgG::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7KgG::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LFJ() //  [R1]
         { info_tbl: [(c7LFJ,
                       label: block_c7LFJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LFJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7LFV; else goto c7LFU;
       c7LFV: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LFU: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.733711173 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes_entry() //  [R2]
         { info_tbl: [(c7LGl,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LGl: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.736908535 UTC

[section ""data" . lvl18_r7Kbv_closure" {
     lvl18_r7Kbv_closure:
         const GHC.Types.I#_con_info;
         const 159;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.738994663 UTC

[section ""data" . lvl19_r7Kbw_closure" {
     lvl19_r7Kbw_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.740622727 UTC

[section ""data" . lvl20_r7Kbx_closure" {
     lvl20_r7Kbx_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.742319325 UTC

[section ""data" . lvl21_r7Kby_closure" {
     lvl21_r7Kby_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl18_r7Kbv_closure+1;
         const lvl19_r7Kbw_closure+1;
         const lvl18_r7Kbv_closure+1;
         const lvl20_r7Kbx_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.744746294 UTC

[section ""data" . lvl22_r7Kbz_closure" {
     lvl22_r7Kbz_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl21_r7Kby_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.746691804 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr3_closure" {
     GHC.ForeignPtr.mallocForeignPtr3_closure:
         const GHC.ForeignPtr.mallocForeignPtr3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr3_entry() //  [R1]
         { info_tbl: [(c7LGD,
                       label: GHC.ForeignPtr.mallocForeignPtr3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LGD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LGE; else goto c7LGF;
       c7LGE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LGF: // global
           (_c7LGA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LGA::I64 == 0) goto c7LGC; else goto c7LGB;
       c7LGC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LGB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LGA::I64;
           R2 = lvl22_r7Kbz_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.751162486 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr1_closure" {
     GHC.ForeignPtr.mallocForeignPtr1_closure:
         const GHC.ForeignPtr.mallocForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7LGT,
                       label: GHC.ForeignPtr.mallocForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LGT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7LGX; else goto c7LGY;
       c7LGX: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LGY: // global
           I64[Sp - 16] = block_c7LGR_info;
           _s7KgO::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           P64[Sp - 8] = _s7KgO::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7LGR() //  [R1]
         { info_tbl: [(c7LGR,
                       label: block_c7LGR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LGR: // global
           I64[Sp] = block_c7LGW_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7LGW() //  [R1]
         { info_tbl: [(c7LGW,
                       label: block_c7LGW_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LGW: // global
           _s7KgT::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KgT::I64, 0)) goto c7LHh; else goto c7LHm;
       c7LHh: // global
           I64[Sp - 8] = block_c7LH7_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KgT::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7LHm: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LH7() //  [R1]
         { info_tbl: [(c7LH7,
                       label: block_c7LH7_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LH7: // global
           _s7KgT::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7LH9_info;
           R2 = I64[Sp + 16];
           _s7KgX::P64 = R1;
           R1 = _s7KgT::I64;
           P64[Sp + 16] = _s7KgX::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LH9() //  [R1]
         { info_tbl: [(c7LH9,
                       label: block_c7LH9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LH9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7LHl; else goto c7LHk;
       c7LHl: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LHk: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.762108464 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr_closure" {
     GHC.ForeignPtr.mallocForeignPtr_closure:
         const GHC.ForeignPtr.mallocForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr_entry() //  [R2]
         { info_tbl: [(c7LHN,
                       label: GHC.ForeignPtr.mallocForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LHN: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.765561476 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer3_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer3_entry() //  [R2]
         { info_tbl: [(c7LHZ,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LHZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LI3; else goto c7LI2;
       c7LI3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LI2: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.770030282 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer4_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry() //  [R2]
         { info_tbl: [(c7LIk,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LIk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LIl; else goto u7LIw;
       c7LIl: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7LIw: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c7LIa() args: 0, res: 0, upd: 0;
     }
 },
 _c7LIa() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LIa: // global
           _s7Kh6::P64 = P64[Sp];
           I64[Sp] = block_c7LId_info;
           R1 = _s7Kh6::P64;
           if (R1 & 7 != 0) goto u7LIy; else goto c7LIe;
       u7LIy: // global
           call _c7LId(R1) args: 0, res: 0, upd: 0;
       c7LIe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LId() //  [R1]
         { info_tbl: [(c7LId,
                       label: block_c7LId_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LId: // global
           if (R1 & 7 == 1) goto c7LIh; else goto c7LIi;
       c7LIh: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LIi: // global
           I64[Sp - 8] = block_c7LIs_info;
           _s7Kha::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7Kha::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LIs() //  []
         { info_tbl: [(c7LIs,
                       label: block_c7LIs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LIs: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7LIa() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.778924758 UTC

[section ""data" . GHC.ForeignPtr.$wforeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$wforeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$wforeignPtrFinalizer_info;
 },
 GHC.ForeignPtr.$wforeignPtrFinalizer_entry() //  [R2]
         { info_tbl: [(c7LJ7,
                       label: GHC.ForeignPtr.$wforeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LJ7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7LJ8; else goto c7LJ9;
       c7LJ8: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$wforeignPtrFinalizer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LJ9: // global
           I64[Sp - 8] = block_c7LIX_info;
           _s7Khe::P64 = R2;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           R1 = _s7Khe::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LIX() //  [R1]
         { info_tbl: [(c7LIX,
                       label: block_c7LIX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LIX: // global
           I64[Sp] = block_c7LIZ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LJw; else goto c7LJ0;
       u7LJw: // global
           call _c7LIZ(R1) args: 0, res: 0, upd: 0;
       c7LJ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LIZ() //  [R1]
         { info_tbl: [(c7LIZ,
                       label: block_c7LIZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LIZ: // global
           _c7LJ6::P64 = R1 & 7;
           if (_c7LJ6::P64 < 3) goto u7LJt; else goto c7LJ5;
       u7LJt: // global
           if (_c7LJ6::P64 < 2) goto u7LJu; else goto c7LJ4;
       u7LJu: // global
           Sp = Sp + 8;
           call _c7LJo() args: 0, res: 0, upd: 0;
       c7LJ4: // global
           I64[Sp] = block_c7LJg_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7LJ5: // global
           R2 = P64[R1 + 5];
           Sp = Sp + 8;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7LJg() //  [R1, R2]
         { info_tbl: [(c7LJg,
                       label: block_c7LJg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LJg: // global
           if (R1 == 1) goto c7LJp; else goto u7LJv;
       c7LJp: // global
           R1 = R2;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       u7LJv: // global
           Sp = Sp + 8;
           call _c7LJo() args: 0, res: 0, upd: 0;
     }
 },
 _c7LJo() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LJo: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.789000906 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr2_closure" {
     GHC.ForeignPtr.finalizeForeignPtr2_closure:
         const GHC.ForeignPtr.finalizeForeignPtr2_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr2_entry() //  [R2]
         { info_tbl: [(c7LJZ,
                       label: GHC.ForeignPtr.finalizeForeignPtr2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LJZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7LK0; else goto c7LK1;
       c7LK0: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LK1: // global
           I64[Sp - 8] = block_c7LJW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LK5; else goto c7LJX;
       u7LK5: // global
           call _c7LJW(R1) args: 0, res: 0, upd: 0;
       c7LJX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LJW() //  [R1]
         { info_tbl: [(c7LJW,
                       label: block_c7LJW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LJW: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.79468964 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr1_closure" {
     GHC.ForeignPtr.finalizeForeignPtr1_closure:
         const GHC.ForeignPtr.finalizeForeignPtr1_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7LKm,
                       label: GHC.ForeignPtr.finalizeForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LKm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7LKn; else goto c7LKo;
       c7LKn: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LKo: // global
           I64[Sp - 8] = block_c7LKj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LKL; else goto c7LKk;
       u7LKL: // global
           call _c7LKj(R1) args: 0, res: 0, upd: 0;
       c7LKk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LKj() //  [R1]
         { info_tbl: [(c7LKj,
                       label: block_c7LKj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LKj: // global
           I64[Sp] = block_c7LKr_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u7LKK; else goto c7LKt;
       u7LKK: // global
           call _c7LKr(R1) args: 0, res: 0, upd: 0;
       c7LKt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LKr() //  [R1]
         { info_tbl: [(c7LKr,
                       label: block_c7LKr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LKr: // global
           _c7LKI::P64 = R1 & 7;
           if (_c7LKI::P64 < 3) goto u7LKJ; else goto c7LKH;
       u7LKJ: // global
           if (_c7LKI::P64 < 2) goto c7LKz; else goto c7LKD;
       c7LKz: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7LKD: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7LKH: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.802014959 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr_closure" {
     GHC.ForeignPtr.finalizeForeignPtr_closure:
         const GHC.ForeignPtr.finalizeForeignPtr_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr_entry() //  [R2]
         { info_tbl: [(c7LL5,
                       label: GHC.ForeignPtr.finalizeForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LL5: // global
           R2 = R2;
           call GHC.ForeignPtr.finalizeForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.805189254 UTC

[section ""cstring" . lvl23_r7KbA_bytes" {
     lvl23_r7KbA_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.807189586 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer2_entry() //  [R1]
         { info_tbl: [(c7LLl,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LLl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LLm; else goto c7LLn;
       c7LLm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LLn: // global
           (_c7LLg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LLg::I64 == 0) goto c7LLi; else goto c7LLh;
       c7LLi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LLh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LLg::I64;
           I64[Sp - 24] = block_c7LLj_info;
           R2 = lvl23_r7KbA_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7LLj() //  [R1]
         { info_tbl: [(c7LLj,
                       label: block_c7LLj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LLj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.817114634 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info;
         const 0;
 },
 sat_s7KhU_entry() //  [R1, R2]
         { info_tbl: [(c7LM0,
                       label: sat_s7KhU_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LM0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LM1; else goto c7LM2;
       c7LM1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LM2: // global
           I64[Sp - 24] = block_c7LLS_info;
           _s7KhH::P64 = P64[R1 + 7];
           _s7KhN::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7KhH::P64;
           P64[Sp - 8] = _s7KhN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LMi; else goto c7LLT;
       u7LMi: // global
           call _c7LLS(R1) args: 0, res: 0, upd: 0;
       c7LLT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LLS() //  [R1]
         { info_tbl: [(c7LLS,
                       label: block_c7LLS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LLS: // global
           _c7LLZ::P64 = R1 & 7;
           if (_c7LLZ::P64 < 3) goto u7LMh; else goto c7LLY;
       u7LMh: // global
           if (_c7LLZ::P64 < 2) goto c7LLW; else goto c7LLX;
       c7LLW: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LLX: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7LLY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7LMg; else goto c7LMf;
       c7LMg: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LMf: // global
           _s7KhR::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7KhR::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Ki0_entry() //  [R1]
         { info_tbl: [(c7LMw,
                       label: sat_s7Ki0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LMw: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Kif_entry() //  [R1, R2]
         { info_tbl: [(c7LMR,
                       label: sat_s7Kif_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LMR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LMS; else goto c7LMT;
       c7LMS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LMT: // global
           I64[Sp - 24] = block_c7LMJ_info;
           _s7KhH::P64 = P64[R1 + 7];
           _s7Ki8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7KhH::P64;
           P64[Sp - 8] = _s7Ki8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LN9; else goto c7LMK;
       u7LN9: // global
           call _c7LMJ(R1) args: 0, res: 0, upd: 0;
       c7LMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LMJ() //  [R1]
         { info_tbl: [(c7LMJ,
                       label: block_c7LMJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LMJ: // global
           _c7LMQ::P64 = R1 & 7;
           if (_c7LMQ::P64 < 3) goto u7LN8; else goto c7LMP;
       u7LN8: // global
           if (_c7LMQ::P64 < 2) goto c7LMN; else goto c7LMO;
       c7LMN: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LMO: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7LMP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7LN7; else goto c7LN6;
       c7LN7: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LN6: // global
           _s7Kic::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7Kic::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7KiO_entry() //  [R1]
         { info_tbl: [(c7LNx,
                       label: sat_s7KiO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LNx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LNy; else goto c7LNz;
       c7LNy: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7LNz: // global
           I64[Sp - 16] = block_c7LNn_info;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           _s7KhJ::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s7KhJ::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LNn() //  [R1]
         { info_tbl: [(c7LNn,
                       label: block_c7LNn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LNn: // global
           I64[Sp] = block_c7LNp_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LOx; else goto c7LNq;
       u7LOx: // global
           call _c7LNp(R1) args: 0, res: 0, upd: 0;
       c7LNq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LNp() //  [R1]
         { info_tbl: [(c7LNp,
                       label: block_c7LNp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LNp: // global
           _c7LNw::P64 = R1 & 7;
           if (_c7LNw::P64 < 3) goto u7LOu; else goto c7LNv;
       u7LOu: // global
           if (_c7LNw::P64 < 2) goto c7LNt; else goto c7LNu;
       c7LNt: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LNu: // global
           I64[Sp] = block_c7LNG_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7LNv: // global
           P64[Sp] = P64[R1 + 5];
           call _c7LO7() args: 0, res: 0, upd: 0;
     }
 },
 _c7LNG() //  [R1, R2]
         { info_tbl: [(c7LNG,
                       label: block_c7LNG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LNG: // global
           if (R1 == 1) goto c7LNS; else goto c7LNO;
       c7LNS: // global
           I64[Sp] = block_c7LNR_info;
           R1 = R2;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c7LNO: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LNR() //  []
         { info_tbl: [(c7LNR,
                       label: block_c7LNR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LNR: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LO7() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LO7: // global
           _s7KiG::P64 = P64[Sp];
           I64[Sp] = block_c7LO9_info;
           R1 = _s7KiG::P64;
           if (R1 & 7 != 0) goto u7LOz; else goto c7LOb;
       u7LOz: // global
           call _c7LO9(R1) args: 0, res: 0, upd: 0;
       c7LOb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LO9() //  [R1]
         { info_tbl: [(c7LO9,
                       label: block_c7LO9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LO9: // global
           if (R1 & 7 == 1) goto c7LOh; else goto c7LOm;
       c7LOh: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LOm: // global
           I64[Sp - 8] = block_c7LOk_info;
           _s7KiK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7KiK::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LOk() //  []
         { info_tbl: [(c7LOk,
                       label: block_c7LOk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LOk: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7LO7() args: 0, res: 0, upd: 0;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7LOG,
                       label: GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LOG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7LOH; else goto c7LOI;
       c7LOH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LOI: // global
           I64[Sp - 16] = block_c7LLF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LPp; else goto c7LLG;
       u7LPp: // global
           call _c7LLF(R1) args: 0, res: 0, upd: 0;
       c7LLG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LLF() //  [R1]
         { info_tbl: [(c7LLF,
                       label: block_c7LLF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LLF: // global
           _c7LOF::P64 = R1 & 7;
           if (_c7LOF::P64 < 3) goto u7LPi; else goto c7LOE;
       u7LPi: // global
           _s7KhH::P64 = P64[Sp + 8];
           if (_c7LOF::P64 < 2) goto c7LOC; else goto c7LOD;
       c7LOC: // global
           Hp = Hp + 88;
           _s7KhJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7LP0; else goto c7LOK;
       c7LOK: // global
           _s7KhK::P64 = P64[_s7KhJ::P64 + 7];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7KhH::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7KhU_info;
           P64[Hp - 8] = _s7KhH::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7LMj_info;
           R2 = Hp - 15;
           R1 = _s7KhK::P64;
           P64[Sp + 8] = _s7KhK::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7LOD: // global
           Hp = Hp + 88;
           _s7KhJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7LP0; else goto c7LOZ;
       c7LP0: // global
           HpAlloc = 88;
           R1 = _s7KhJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LOZ: // global
           _s7Ki4::P64 = P64[_s7KhJ::P64 + 6];
           _s7Ki5::P64 = P64[_s7KhJ::P64 + 14];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7KhH::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7Kif_info;
           P64[Hp - 8] = _s7KhH::P64;
           P64[Hp] = Hp - 39;
           I64[Sp - 16] = block_c7LNa_info;
           R2 = Hp - 15;
           R1 = _s7Ki5::P64;
           P64[Sp - 8] = _s7Ki5::P64;
           P64[Sp] = _s7Ki4::P64;
           P64[Sp + 8] = _s7KhJ::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7LOE: // global
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LMj() //  [R1]
         { info_tbl: [(c7LMj,
                       label: block_c7LMj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LMj: // global
           I64[Sp] = block_c7LMl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LPl; else goto c7LMm;
       u7LPl: // global
           call _c7LMl(R1) args: 0, res: 0, upd: 0;
       c7LMm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LMl() //  [R1]
         { info_tbl: [(c7LMl,
                       label: block_c7LMl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LMl: // global
           if (R1 & 7 == 1) goto u7LPj; else goto c7LOS;
       u7LPj: // global
           Sp = Sp + 16;
           call _c7LP5() args: 0, res: 0, upd: 0;
       c7LOS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LOV; else goto c7LOU;
       c7LOV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LOU: // global
           I64[Hp - 8] = sat_s7Ki0_info;
           _s7KhK::P64 = P64[Sp + 8];
           P64[Hp] = _s7KhK::P64;
           I64[Sp + 8] = block_c7LOR_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7KhK::P64;
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LOR() //  []
         { info_tbl: [(c7LOR,
                       label: block_c7LOR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LOR: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LNa() //  [R1]
         { info_tbl: [(c7LNa,
                       label: block_c7LNa_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LNa: // global
           I64[Sp] = block_c7LNc_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LPn; else goto c7LNd;
       u7LPn: // global
           call _c7LNc(R1) args: 0, res: 0, upd: 0;
       c7LNd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LNc() //  [R1]
         { info_tbl: [(c7LNc,
                       label: block_c7LNc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LNc: // global
           if (R1 & 7 == 1) goto u7LPk; else goto c7LP7;
       u7LPk: // global
           Sp = Sp + 32;
           call _c7LP5() args: 0, res: 0, upd: 0;
       c7LP7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LPa; else goto c7LP9;
       c7LPa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LP9: // global
           I64[Hp - 16] = sat_s7KiO_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_c7LP6_info;
           R3 = Hp - 15;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LP5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LP5: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LP6() //  []
         { info_tbl: [(c7LP6,
                       label: block_c7LP6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LP6: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.860617436 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry() //  [R2, R3]
         { info_tbl: [(c7LRm,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LRm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LRn; else goto c7LRo;
       c7LRn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LRo: // global
           I64[Sp - 16] = block_c7LRj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LRs; else goto c7LRk;
       u7LRs: // global
           call _c7LRj(R1) args: 0, res: 0, upd: 0;
       c7LRk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LRj() //  [R1]
         { info_tbl: [(c7LRj,
                       label: block_c7LRj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LRj: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.866475584 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7LRG,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LRG: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.871019002 UTC

[section ""data" . GHC.ForeignPtr.$wnewConcForeignPtr_closure" {
     GHC.ForeignPtr.$wnewConcForeignPtr_closure:
         const GHC.ForeignPtr.$wnewConcForeignPtr_info;
         const 0;
 },
 sat_s7Kjf_entry() //  [R1, R2]
         { info_tbl: [(c7LS9,
                       label: sat_s7Kjf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LS9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LSa; else goto c7LSb;
       c7LSa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LSb: // global
           I64[Sp - 24] = block_c7LS1_info;
           _s7Kj1::P64 = P64[R1 + 7];
           _s7Kj8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7Kj1::P64;
           P64[Sp - 8] = _s7Kj8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LSr; else goto c7LS2;
       u7LSr: // global
           call _c7LS1(R1) args: 0, res: 0, upd: 0;
       c7LS2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LS1() //  [R1]
         { info_tbl: [(c7LS1,
                       label: block_c7LS1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LS1: // global
           _c7LS8::P64 = R1 & 7;
           if (_c7LS8::P64 < 3) goto u7LSq; else goto c7LS7;
       u7LSq: // global
           if (_c7LS8::P64 < 2) goto c7LS5; else goto c7LS6;
       c7LS5: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LS6: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7LS7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7LSp; else goto c7LSo;
       c7LSp: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LSo: // global
           _s7Kjc::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7Kjc::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7Kjn_entry() //  [R1]
         { info_tbl: [(c7LSF,
                       label: sat_s7Kjn_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LSF: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$wnewConcForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7LSM,
                       label: GHC.ForeignPtr.$wnewConcForeignPtr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LSM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LSN; else goto c7LSO;
       c7LSN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$wnewConcForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LSO: // global
           I64[Sp - 24] = block_c7LRR_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LRR() //  [R1]
         { info_tbl: [(c7LRR,
                       label: block_c7LRR_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LRR: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c7LSR; else goto c7LSQ;
       c7LSR: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LSQ: // global
           I64[Hp - 80] = :_con_info;
           _s7Kj1::P64 = P64[Sp + 16];
           P64[Hp - 72] = _s7Kj1::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7Kjf_info;
           P64[Hp - 8] = _s7Kj1::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7LSs_info;
           R2 = Hp - 15;
           _s7Kj5::P64 = R1;
           R1 = R1;
           P64[Sp + 16] = _s7Kj5::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LSs() //  [R1]
         { info_tbl: [(c7LSs,
                       label: block_c7LSs_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LSs: // global
           I64[Sp] = block_c7LSu_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LT9; else goto c7LSv;
       u7LT9: // global
           call _c7LSu(R1) args: 0, res: 0, upd: 0;
       c7LSv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LSu() //  [R1]
         { info_tbl: [(c7LSu,
                       label: block_c7LSu_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LSu: // global
           _s7Kj5::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7LSJ; else goto c7LSK;
       c7LSJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7LSY; else goto c7LSX;
       c7LSY: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LSX: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = _s7Kj5::P64;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LSK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LT5; else goto c7LT4;
       c7LT5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LT4: // global
           I64[Hp - 8] = sat_s7Kjn_info;
           P64[Hp] = _s7Kj5::P64;
           I64[Sp] = block_c7LSZ_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7Kj5::P64;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LSZ() //  [R1]
         { info_tbl: [(c7LSZ,
                       label: block_c7LSZ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LSZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7LT8; else goto c7LT7;
       c7LT8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LT7: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.890798169 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr1_closure" {
     GHC.ForeignPtr.newConcForeignPtr1_closure:
         const GHC.ForeignPtr.newConcForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr1_entry() //  [R2, R3]
         { info_tbl: [(c7LU2,
                       label: GHC.ForeignPtr.newConcForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LU2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LU3; else goto c7LU4;
       c7LU3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.newConcForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LU4: // global
           I64[Sp - 16] = block_c7LTZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LU8; else goto c7LU0;
       u7LU8: // global
           call _c7LTZ(R1) args: 0, res: 0, upd: 0;
       c7LU0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LTZ() //  [R1]
         { info_tbl: [(c7LTZ,
                       label: block_c7LTZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LTZ: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$wnewConcForeignPtr_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.896293358 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr_closure" {
     GHC.ForeignPtr.newConcForeignPtr_closure:
         const GHC.ForeignPtr.newConcForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7LUm,
                       label: GHC.ForeignPtr.newConcForeignPtr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LUm: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.newConcForeignPtr1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.899594623 UTC

[section ""data" . GHC.ForeignPtr.MyWeak_closure" {
     GHC.ForeignPtr.MyWeak_closure:
         const GHC.ForeignPtr.MyWeak_info;
 },
 GHC.ForeignPtr.MyWeak_entry() //  [R2]
         { info_tbl: [(c7LUy,
                       label: GHC.ForeignPtr.MyWeak_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LUy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LUC; else goto c7LUB;
       c7LUC: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.MyWeak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LUB: // global
           I64[Hp - 8] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.903284815 UTC

[section ""data" . GHC.ForeignPtr.PlainForeignPtr_closure" {
     GHC.ForeignPtr.PlainForeignPtr_closure:
         const GHC.ForeignPtr.PlainForeignPtr_info;
 },
 GHC.ForeignPtr.PlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7LUN,
                       label: GHC.ForeignPtr.PlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LUN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LUR; else goto c7LUQ;
       c7LUR: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LUQ: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.907312967 UTC

[section ""data" . GHC.ForeignPtr.MallocPtr_closure" {
     GHC.ForeignPtr.MallocPtr_closure:
         const GHC.ForeignPtr.MallocPtr_info;
 },
 GHC.ForeignPtr.MallocPtr_entry() //  [R2, R3]
         { info_tbl: [(c7LV2,
                       label: GHC.ForeignPtr.MallocPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LV2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LV6; else goto c7LV5;
       c7LV6: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.MallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LV5: // global
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.911043368 UTC

[section ""data" . GHC.ForeignPtr.PlainPtr_closure" {
     GHC.ForeignPtr.PlainPtr_closure:
         const GHC.ForeignPtr.PlainPtr_info;
 },
 GHC.ForeignPtr.PlainPtr_entry() //  [R2]
         { info_tbl: [(c7LVh,
                       label: GHC.ForeignPtr.PlainPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LVh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LVl; else goto c7LVk;
       c7LVl: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LVk: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.914553291 UTC

[section ""data" . GHC.ForeignPtr.NoFinalizers_closure" {
     GHC.ForeignPtr.NoFinalizers_closure:
         const GHC.ForeignPtr.NoFinalizers_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.916465247 UTC

[section ""data" . GHC.ForeignPtr.CFinalizers_closure" {
     GHC.ForeignPtr.CFinalizers_closure:
         const GHC.ForeignPtr.CFinalizers_info;
 },
 GHC.ForeignPtr.CFinalizers_entry() //  [R2]
         { info_tbl: [(c7LVx,
                       label: GHC.ForeignPtr.CFinalizers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LVx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LVB; else goto c7LVA;
       c7LVB: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.CFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LVA: // global
           I64[Hp - 8] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.920286004 UTC

[section ""data" . GHC.ForeignPtr.HaskellFinalizers_closure" {
     GHC.ForeignPtr.HaskellFinalizers_closure:
         const GHC.ForeignPtr.HaskellFinalizers_info;
 },
 GHC.ForeignPtr.HaskellFinalizers_entry() //  [R2]
         { info_tbl: [(c7LVM,
                       label: GHC.ForeignPtr.HaskellFinalizers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LVM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LVQ; else goto c7LVP;
       c7LVQ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.HaskellFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LVP: // global
           I64[Hp - 8] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.925354355 UTC

[section ""data" . GHC.ForeignPtr.ForeignPtr_closure" {
     GHC.ForeignPtr.ForeignPtr_closure:
         const GHC.ForeignPtr.ForeignPtr_info;
 },
 GHC.ForeignPtr.ForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7LW1,
                       label: GHC.ForeignPtr.ForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LW1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LW5; else goto c7LW4;
       c7LW5: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.ForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LW4: // global
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.929449009 UTC

[GHC.ForeignPtr.MyWeak_con_entry() //  [R1]
         { info_tbl: [(c7LWb,
                       label: GHC.ForeignPtr.MyWeak_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,121,87,101,97,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LWb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.932960916 UTC

[GHC.ForeignPtr.PlainForeignPtr_con_entry() //  [R1]
         { info_tbl: [(c7LWh,
                       label: GHC.ForeignPtr.PlainForeignPtr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LWh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.936353114 UTC

[GHC.ForeignPtr.MallocPtr_con_entry() //  [R1]
         { info_tbl: [(c7LWn,
                       label: GHC.ForeignPtr.MallocPtr_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,97,108,108,111,99,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LWn: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.940044768 UTC

[GHC.ForeignPtr.PlainPtr_con_entry() //  [R1]
         { info_tbl: [(c7LWt,
                       label: GHC.ForeignPtr.PlainPtr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LWt: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.943606093 UTC

[GHC.ForeignPtr.NoFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7LWz,
                       label: GHC.ForeignPtr.NoFinalizers_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,78,111,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LWz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.947068178 UTC

[GHC.ForeignPtr.CFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7LWF,
                       label: GHC.ForeignPtr.CFinalizers_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,67,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LWF: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.950610228 UTC

[GHC.ForeignPtr.HaskellFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7LWL,
                       label: GHC.ForeignPtr.HaskellFinalizers_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LWL: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.955259154 UTC

[GHC.ForeignPtr.ForeignPtr_con_entry() //  [R1]
         { info_tbl: [(c7LWR,
                       label: GHC.ForeignPtr.ForeignPtr_con_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,70,111,114,101,105,103,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7LWR: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:50.958783773 UTC

[section ""relreadonly" . S7KkP_srt" {
     S7KkP_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r7Kb5_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ForeignPtr.mallocForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
         const GHC.ForeignPtr.$fShowForeignPtr1_closure;
         const GHC.ForeignPtr.noMixingError_closure;
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const lvl22_r7Kbz_closure;
         const GHC.ForeignPtr.mallocForeignPtr1_closure;
         const GHC.ForeignPtr.mallocForeignPtr3_closure;
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
         const GHC.ForeignPtr.$wnewConcForeignPtr_closure;
         const GHC.ForeignPtr.newConcForeignPtr1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:52.985443998 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:52.986860431 UTC

[section ""data" . GHC.ForeignPtr.$WPlainForeignPtr_closure" {
     GHC.ForeignPtr.$WPlainForeignPtr_closure:
         const GHC.ForeignPtr.$WPlainForeignPtr_info;
 },
 GHC.ForeignPtr.$WPlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7M51,
                       label: GHC.ForeignPtr.$WPlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M51: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7M55; else goto c7M56;
       c7M55: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$WPlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7M56: // global
           I64[Sp - 8] = block_c7M4Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7M5a; else goto c7M4Z;
       u7M5a: // global
           call _c7M4Y(R1) args: 0, res: 0, upd: 0;
       c7M4Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7M4Y() //  [R1]
         { info_tbl: [(c7M4Y,
                       label: block_c7M4Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M4Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7M59; else goto c7M58;
       c7M59: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7M58: // global
           _s7LX0::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _s7LX0::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:52.993382908 UTC

[section ""data" . GHC.ForeignPtr.$WMallocPtr_closure" {
     GHC.ForeignPtr.$WMallocPtr_closure:
         const GHC.ForeignPtr.$WMallocPtr_info;
 },
 GHC.ForeignPtr.$WMallocPtr_entry() //  [R2, R3]
         { info_tbl: [(c7M5u,
                       label: GHC.ForeignPtr.$WMallocPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M5u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M5y; else goto c7M5z;
       c7M5y: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$WMallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7M5z: // global
           I64[Sp - 16] = block_c7M5r_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7M5D; else goto c7M5s;
       u7M5D: // global
           call _c7M5r(R1) args: 0, res: 0, upd: 0;
       c7M5s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7M5r() //  [R1]
         { info_tbl: [(c7M5r,
                       label: block_c7M5r_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M5r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7M5C; else goto c7M5B;
       c7M5C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7M5B: // global
           _s7LX4::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7LX4::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:52.99885879 UTC

[section ""cstring" . lvl_r7KaV_bytes" {
     lvl_r7KaV_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.00076404 UTC

[section ""data" . lvl1_r7KaW_closure" {
     lvl1_r7KaW_closure:
         const lvl1_r7KaW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r7KaW_entry() //  [R1]
         { info_tbl: [(c7M5Y,
                       label: lvl1_r7KaW_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M5Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M5Z; else goto c7M60;
       c7M5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M60: // global
           (_c7M5V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M5V::I64 == 0) goto c7M5X; else goto c7M5W;
       c7M5X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M5W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M5V::I64;
           R2 = lvl_r7KaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.004382067 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule4_bytes" {
     GHC.ForeignPtr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.006280657 UTC

[section ""data" . lvl2_r7KaX_closure" {
     lvl2_r7KaX_closure:
         const lvl2_r7KaX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r7KaX_entry() //  [R1]
         { info_tbl: [(c7M6g,
                       label: lvl2_r7KaX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M6g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M6h; else goto c7M6i;
       c7M6h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M6i: // global
           (_c7M6d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M6d::I64 == 0) goto c7M6f; else goto c7M6e;
       c7M6f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M6e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M6d::I64;
           R2 = GHC.ForeignPtr.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.010065025 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule2_bytes" {
     GHC.ForeignPtr.$trModule2_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.011771801 UTC

[section ""data" . lvl3_r7KaY_closure" {
     lvl3_r7KaY_closure:
         const lvl3_r7KaY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r7KaY_entry() //  [R1]
         { info_tbl: [(c7M6y,
                       label: lvl3_r7KaY_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M6y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M6z; else goto c7M6A;
       c7M6z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M6A: // global
           (_c7M6v::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M6v::I64 == 0) goto c7M6x; else goto c7M6w;
       c7M6x: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M6w: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M6v::I64;
           R2 = GHC.ForeignPtr.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.015760168 UTC

[section ""cstring" . lvl4_r7KaZ_bytes" {
     lvl4_r7KaZ_bytes:
         I8[] [46,47,71,72,67,47,70,111,114,101,105,103,110,80,116,114,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.017476094 UTC

[section ""data" . lvl5_r7Kb0_closure" {
     lvl5_r7Kb0_closure:
         const lvl5_r7Kb0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r7Kb0_entry() //  [R1]
         { info_tbl: [(c7M6Q,
                       label: lvl5_r7Kb0_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M6Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M6R; else goto c7M6S;
       c7M6R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M6S: // global
           (_c7M6N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M6N::I64 == 0) goto c7M6P; else goto c7M6O;
       c7M6P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M6O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M6N::I64;
           R2 = lvl4_r7KaZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.021012477 UTC

[section ""data" . lvl6_r7Kb1_closure" {
     lvl6_r7Kb1_closure:
         const GHC.Types.I#_con_info;
         const 214;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.022531978 UTC

[section ""data" . lvl7_r7Kb2_closure" {
     lvl7_r7Kb2_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.024058375 UTC

[section ""data" . lvl8_r7Kb3_closure" {
     lvl8_r7Kb3_closure:
         const GHC.Types.I#_con_info;
         const 43;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.025788537 UTC

[section ""data" . lvl9_r7Kb4_closure" {
     lvl9_r7Kb4_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl6_r7Kb1_closure+1;
         const lvl7_r7Kb2_closure+1;
         const lvl6_r7Kb1_closure+1;
         const lvl8_r7Kb3_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.027483247 UTC

[section ""data" . lvl10_r7Kb5_closure" {
     lvl10_r7Kb5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl9_r7Kb4_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.029985119 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr2_entry() //  [R1]
         { info_tbl: [(c7M7c,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M7c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M7d; else goto c7M7e;
       c7M7d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M7e: // global
           (_c7M79::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M79::I64 == 0) goto c7M7b; else goto c7M7a;
       c7M7b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M7a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M79::I64;
           R2 = lvl10_r7Kb5_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.035160893 UTC

[section ""cstring" . lvl11_r7Kb6_bytes" {
     lvl11_r7Kb6_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.0388475 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr2_closure" {
     GHC.ForeignPtr.mallocForeignPtr2_closure:
         const GHC.ForeignPtr.mallocForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr2_entry() //  [R1]
         { info_tbl: [(c7M7x,
                       label: GHC.ForeignPtr.mallocForeignPtr2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M7x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7M7y; else goto c7M7z;
       c7M7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M7z: // global
           (_c7M7s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M7s::I64 == 0) goto c7M7u; else goto c7M7t;
       c7M7u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M7t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M7s::I64;
           I64[Sp - 24] = block_c7M7v_info;
           R2 = lvl11_r7Kb6_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7M7v() //  [R1]
         { info_tbl: [(c7M7v,
                       label: block_c7M7v_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M7v: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.046592706 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7M7V,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M7V: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7M7Z; else goto c7M80;
       c7M7Z: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7M80: // global
           I64[Sp - 16] = block_c7M7T_info;
           _s7LX6::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           P64[Sp - 8] = _s7LX6::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7M7T() //  [R1]
         { info_tbl: [(c7M7T,
                       label: block_c7M7T_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M7T: // global
           I64[Sp] = block_c7M7Y_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7M7Y() //  [R1]
         { info_tbl: [(c7M7Y,
                       label: block_c7M7Y_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M7Y: // global
           _s7LXb::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7LXb::I64, 0)) goto c7M8h; else goto c7M8l;
       c7M8h: // global
           _s7LX9::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7M89_info;
           R2 = _s7LX9::I64;
           R1 = _s7LXb::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c7M8l: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7M89() //  [R1]
         { info_tbl: [(c7M89,
                       label: block_c7M89_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M89: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7M8k; else goto c7M8j;
       c7M8k: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7M8j: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.057697057 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7M8R,
                       label: GHC.ForeignPtr.mallocPlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M8R: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.0615433 UTC

[section ""cstring" . lvl12_r7Kb7_bytes" {
     lvl12_r7Kb7_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.063860753 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes2_entry() //  [R1]
         { info_tbl: [(c7M97,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M97: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7M98; else goto c7M99;
       c7M98: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M99: // global
           (_c7M92::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M92::I64 == 0) goto c7M94; else goto c7M93;
       c7M94: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M93: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M92::I64;
           I64[Sp - 24] = block_c7M95_info;
           R2 = lvl12_r7Kb7_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7M95() //  [R1]
         { info_tbl: [(c7M95,
                       label: block_c7M95_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M95: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.070129476 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry() //  [R2]
         { info_tbl: [(c7M9w,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M9w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7M9x; else goto c7M9y;
       c7M9x: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7M9y: // global
           I64[Sp - 8] = block_c7M9t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7M9S; else goto c7M9u;
       u7M9S: // global
           call _c7M9t(R1) args: 0, res: 0, upd: 0;
       c7M9u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7M9t() //  [R1]
         { info_tbl: [(c7M9t,
                       label: block_c7M9t_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M9t: // global
           _s7LXo::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7LXo::I64, 0)) goto c7M9N; else goto c7M9R;
       c7M9N: // global
           I64[Sp] = block_c7M9F_info;
           R1 = _s7LXo::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7M9R: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7M9F() //  [R1]
         { info_tbl: [(c7M9F,
                       label: block_c7M9F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7M9F: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7M9Q; else goto c7M9P;
       c7M9Q: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7M9P: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.07737906 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes_entry() //  [R2]
         { info_tbl: [(c7Mag,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrBytes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mag: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.080565514 UTC

[section ""cstring" . lvl13_r7Kb8_bytes" {
     lvl13_r7Kb8_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.082399497 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_entry() //  [R1]
         { info_tbl: [(c7Maw,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Maw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Max; else goto c7May;
       c7Max: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7May: // global
           (_c7Mar::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Mar::I64 == 0) goto c7Mat; else goto c7Mas;
       c7Mat: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Mas: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Mar::I64;
           I64[Sp - 24] = block_c7Mau_info;
           R2 = lvl13_r7Kb8_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7Mau() //  [R1]
         { info_tbl: [(c7Mau,
                       label: block_c7Mau_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mau: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.088136804 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c7MaV,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MaV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MaW; else goto c7MaX;
       c7MaW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MaX: // global
           I64[Sp - 16] = block_c7MaS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mbo; else goto c7MaT;
       u7Mbo: // global
           call _c7MaS(R1) args: 0, res: 0, upd: 0;
       c7MaT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MaS() //  [R1]
         { info_tbl: [(c7MaS,
                       label: block_c7MaS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MaS: // global
           _s7LXC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7LXC::I64, 0)) goto c7Mbh; else goto c7Mbm;
       c7Mbh: // global
           I64[Sp] = block_c7Mb4_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LXC::I64;
           if (R1 & 7 != 0) goto u7Mbn; else goto c7Mb5;
       u7Mbn: // global
           call _c7Mb4(R1) args: 0, res: 0, upd: 0;
       c7Mb5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Mbm: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Mb4() //  [R1]
         { info_tbl: [(c7Mb4,
                       label: block_c7Mb4_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mb4: // global
           _s7LXC::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7Mb9_info;
           R2 = I64[R1 + 7];
           R1 = _s7LXC::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mb9() //  [R1]
         { info_tbl: [(c7Mb9,
                       label: block_c7Mb9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mb9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Mbl; else goto c7Mbk;
       c7Mbl: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mbk: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.097774416 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c7MbR,
                       label: GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MbR: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.100972002 UTC

[section ""cstring" . lvl14_r7Kb9_bytes" {
     lvl14_r7Kb9_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,109,105,120,32,72,97,115,107,101,108,108,32,97,110,100,32,67,32,102,105,110,97,108,105,122,101,114,115,32,105,110,32,116,104,101,32,115,97,109,101,32,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.10283749 UTC

[section ""data" . GHC.ForeignPtr.noMixingError_closure" {
     GHC.ForeignPtr.noMixingError_closure:
         const GHC.ForeignPtr.noMixingError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.noMixingError_entry() //  [R1]
         { info_tbl: [(c7Mc7,
                       label: GHC.ForeignPtr.noMixingError_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mc7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Mc8; else goto c7Mc9;
       c7Mc8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Mc9: // global
           (_c7Mc2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Mc2::I64 == 0) goto c7Mc4; else goto c7Mc3;
       c7Mc4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Mc3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Mc2::I64;
           I64[Sp - 24] = block_c7Mc5_info;
           R2 = lvl14_r7Kb9_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7Mc5() //  [R1]
         { info_tbl: [(c7Mc5,
                       label: block_c7Mc5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mc5: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.109000471 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr1_closure" {
     GHC.ForeignPtr.touchForeignPtr1_closure:
         const GHC.ForeignPtr.touchForeignPtr1_info;
 },
 GHC.ForeignPtr.touchForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7Mcw,
                       label: GHC.ForeignPtr.touchForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mcw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Mcx; else goto c7Mcy;
       c7Mcx: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.touchForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mcy: // global
           I64[Sp - 8] = block_c7Mct_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7McD; else goto c7Mcu;
       u7McD: // global
           call _c7Mct(R1) args: 0, res: 0, upd: 0;
       c7Mcu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mct() //  [R1]
         { info_tbl: [(c7Mct,
                       label: block_c7Mct_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mct: // global
           call MO_Touch(P64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.114500272 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr_closure" {
     GHC.ForeignPtr.touchForeignPtr_closure:
         const GHC.ForeignPtr.touchForeignPtr_info;
 },
 GHC.ForeignPtr.touchForeignPtr_entry() //  [R2]
         { info_tbl: [(c7McU,
                       label: GHC.ForeignPtr.touchForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7McU: // global
           R2 = R2;
           call GHC.ForeignPtr.touchForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.118315442 UTC

[section ""data" . GHC.ForeignPtr.unsafeForeignPtrToPtr_closure" {
     GHC.ForeignPtr.unsafeForeignPtrToPtr_closure:
         const GHC.ForeignPtr.unsafeForeignPtrToPtr_info;
 },
 GHC.ForeignPtr.unsafeForeignPtrToPtr_entry() //  [R2]
         { info_tbl: [(c7Md8,
                       label: GHC.ForeignPtr.unsafeForeignPtrToPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Md8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Mdc; else goto c7Mdd;
       c7Mdc: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.unsafeForeignPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mdd: // global
           I64[Sp - 8] = block_c7Md5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mdh; else goto c7Md6;
       u7Mdh: // global
           call _c7Md5(R1) args: 0, res: 0, upd: 0;
       c7Md6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Md5() //  [R1]
         { info_tbl: [(c7Md5,
                       label: block_c7Md5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Md5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Mdg; else goto c7Mdf;
       c7Mdg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mdf: // global
           _s7LXW::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7LXW::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.124162651 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(c7MdB,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MdB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MdH; else goto c7MdI;
       c7MdH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MdI: // global
           I64[Sp - 16] = block_c7Mdy_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MdN; else goto c7Mdz;
       u7MdN: // global
           call _c7Mdy(R1) args: 0, res: 0, upd: 0;
       c7Mdz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mdy() //  [R1]
         { info_tbl: [(c7Mdy,
                       label: block_c7Mdy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mdy: // global
           _s7LY0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7MdE_info;
           R3 = _s7LY0::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7MdE() //  [R1, R2]
         { info_tbl: [(c7MdE,
                       label: block_c7MdE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MdE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MdM; else goto c7MdL;
       c7MdM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7MdL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.132270897 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshow_entry() //  [R2]
         { info_tbl: [(c7Meb,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Meb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Meh; else goto c7Mei;
       c7Meh: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mei: // global
           I64[Sp - 8] = block_c7Me8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Men; else goto c7Me9;
       u7Men: // global
           call _c7Me8(R1) args: 0, res: 0, upd: 0;
       c7Me9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Me8() //  [R1]
         { info_tbl: [(c7Me8,
                       label: block_c7Me8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Me8: // global
           I64[Sp] = block_c7Mee_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 15];
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mee() //  [R1, R2]
         { info_tbl: [(c7Mee,
                       label: block_c7Mee_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mee: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Mem; else goto c7Mel;
       c7Mem: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7Mel: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.139520047 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr1_closure" {
     GHC.ForeignPtr.$fShowForeignPtr1_closure:
         const GHC.ForeignPtr.$fShowForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr1_entry() //  [R2, R3]
         { info_tbl: [(c7MeM,
                       label: GHC.ForeignPtr.$fShowForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MeM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MeS; else goto c7MeT;
       c7MeS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MeT: // global
           I64[Sp - 16] = block_c7MeJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MeY; else goto c7MeK;
       u7MeY: // global
           call _c7MeJ(R1) args: 0, res: 0, upd: 0;
       c7MeK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MeJ() //  [R1]
         { info_tbl: [(c7MeJ,
                       label: block_c7MeJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MeJ: // global
           _s7LYf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7MeP_info;
           R3 = _s7LYf::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7MeP() //  [R1, R2]
         { info_tbl: [(c7MeP,
                       label: block_c7MeP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MeP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MeX; else goto c7MeW;
       c7MeX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7MeW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.147093296 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7Mfj,
                       label: GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mfj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ForeignPtr.$fShowForeignPtr1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.150315135 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure+3;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure+1;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.15267726 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7Mfy,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mfy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MfC; else goto c7MfD;
       c7MfC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MfD: // global
           I64[Sp - 16] = block_c7Mfv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MfW; else goto c7Mfw;
       u7MfW: // global
           call _c7Mfv(R1) args: 0, res: 0, upd: 0;
       c7Mfw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mfv() //  [R1]
         { info_tbl: [(c7Mfv,
                       label: block_c7Mfv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mfv: // global
           I64[Sp] = block_c7MfB_info;
           _s7LYr::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LYr::I64;
           if (R1 & 7 != 0) goto u7MfV; else goto c7MfF;
       u7MfV: // global
           call _c7MfB(R1) args: 0, res: 0, upd: 0;
       c7MfF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MfB() //  [R1]
         { info_tbl: [(c7MfB,
                       label: block_c7MfB_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MfB: // global
           _s7LYr::I64 = I64[Sp + 8];
           _s7LYu::I64 = I64[R1 + 15];
           if (_s7LYr::I64 >= _s7LYu::I64) goto c7MfT; else goto c7MfU;
       c7MfT: // global
           if (_s7LYr::I64 == _s7LYu::I64) goto c7MfR; else goto c7MfQ;
       c7MfR: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MfQ: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MfU: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.160618233 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c==_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c==_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7Mgp,
                       label: GHC.ForeignPtr.$fEqForeignPtr_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mgp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mgt; else goto c7Mgu;
       c7Mgt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mgu: // global
           I64[Sp - 16] = block_c7Mgm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MgD; else goto c7Mgn;
       u7MgD: // global
           call _c7Mgm(R1) args: 0, res: 0, upd: 0;
       c7Mgn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mgm() //  [R1]
         { info_tbl: [(c7Mgm,
                       label: block_c7Mgm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mgm: // global
           I64[Sp] = block_c7Mgs_info;
           _s7LYB::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LYB::I64;
           if (R1 & 7 != 0) goto u7MgC; else goto c7Mgw;
       u7MgC: // global
           call _c7Mgs(R1) args: 0, res: 0, upd: 0;
       c7Mgw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mgs() //  [R1]
         { info_tbl: [(c7Mgs,
                       label: block_c7Mgs_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mgs: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.168200937 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7Mh5,
                       label: GHC.ForeignPtr.$fEqForeignPtr_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mh5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mh9; else goto c7Mha;
       c7Mh9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mha: // global
           I64[Sp - 16] = block_c7Mh2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mhn; else goto c7Mh3;
       u7Mhn: // global
           call _c7Mh2(R1) args: 0, res: 0, upd: 0;
       c7Mh3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mh2() //  [R1]
         { info_tbl: [(c7Mh2,
                       label: block_c7Mh2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mh2: // global
           I64[Sp] = block_c7Mh8_info;
           _s7LYK::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LYK::I64;
           if (R1 & 7 != 0) goto u7Mhm; else goto c7Mhc;
       u7Mhm: // global
           call _c7Mh8(R1) args: 0, res: 0, upd: 0;
       c7Mhc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mh8() //  [R1]
         { info_tbl: [(c7Mh8,
                       label: block_c7Mh8_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mh8: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7Mhl; else goto c7Mhk;
       c7Mhl: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Mhk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.175257984 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_closure+2;
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.177406771 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7MhQ,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MhQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MhU; else goto c7MhV;
       c7MhU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MhV: // global
           I64[Sp - 16] = block_c7MhN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mi8; else goto c7MhO;
       u7Mi8: // global
           call _c7MhN(R1) args: 0, res: 0, upd: 0;
       c7MhO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MhN() //  [R1]
         { info_tbl: [(c7MhN,
                       label: block_c7MhN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MhN: // global
           I64[Sp] = block_c7MhT_info;
           _s7LYT::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LYT::I64;
           if (R1 & 7 != 0) goto u7Mi7; else goto c7MhX;
       u7Mi7: // global
           call _c7MhT(R1) args: 0, res: 0, upd: 0;
       c7MhX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MhT() //  [R1]
         { info_tbl: [(c7MhT,
                       label: block_c7MhT_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MhT: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7Mi5; else goto c7Mi6;
       c7Mi5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Mi6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.184671928 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7MiA,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MiA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MiE; else goto c7MiF;
       c7MiE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MiF: // global
           I64[Sp - 16] = block_c7Mix_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MiS; else goto c7Miy;
       u7MiS: // global
           call _c7Mix(R1) args: 0, res: 0, upd: 0;
       c7Miy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mix() //  [R1]
         { info_tbl: [(c7Mix,
                       label: block_c7Mix_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mix: // global
           I64[Sp] = block_c7MiD_info;
           _s7LZ2::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LZ2::I64;
           if (R1 & 7 != 0) goto u7MiR; else goto c7MiH;
       u7MiR: // global
           call _c7MiD(R1) args: 0, res: 0, upd: 0;
       c7MiH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MiD() //  [R1]
         { info_tbl: [(c7MiD,
                       label: block_c7MiD_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MiD: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7MiP; else goto c7MiQ;
       c7MiP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MiQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.19199596 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7Mjk,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mjk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mjo; else goto c7Mjp;
       c7Mjo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mjp: // global
           I64[Sp - 16] = block_c7Mjh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MjI; else goto c7Mji;
       u7MjI: // global
           call _c7Mjh(R1) args: 0, res: 0, upd: 0;
       c7Mji: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mjh() //  [R1]
         { info_tbl: [(c7Mjh,
                       label: block_c7Mjh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mjh: // global
           I64[Sp] = block_c7Mjn_info;
           _s7LZb::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LZb::I64;
           if (R1 & 7 != 0) goto u7MjH; else goto c7Mjr;
       u7MjH: // global
           call _c7Mjn(R1) args: 0, res: 0, upd: 0;
       c7Mjr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mjn() //  [R1]
         { info_tbl: [(c7Mjn,
                       label: block_c7Mjn_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mjn: // global
           _s7LZb::I64 = I64[Sp + 8];
           _s7LZe::I64 = I64[R1 + 15];
           if (_s7LZb::I64 < _s7LZe::I64) goto c7MjG; else goto c7MjF;
       c7MjF: // global
           if (_s7LZb::I64 == _s7LZe::I64) goto c7MjG; else goto c7MjC;
       c7MjG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MjC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.199922989 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7Mk9,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mk9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mkd; else goto c7Mke;
       c7Mkd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mke: // global
           I64[Sp - 16] = block_c7Mk6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mkx; else goto c7Mk7;
       u7Mkx: // global
           call _c7Mk6(R1) args: 0, res: 0, upd: 0;
       c7Mk7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mk6() //  [R1]
         { info_tbl: [(c7Mk6,
                       label: block_c7Mk6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mk6: // global
           I64[Sp] = block_c7Mkc_info;
           _s7LZl::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LZl::I64;
           if (R1 & 7 != 0) goto u7Mkw; else goto c7Mkg;
       u7Mkw: // global
           call _c7Mkc(R1) args: 0, res: 0, upd: 0;
       c7Mkg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mkc() //  [R1]
         { info_tbl: [(c7Mkc,
                       label: block_c7Mkc_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mkc: // global
           _s7LZl::I64 = I64[Sp + 8];
           _s7LZo::I64 = I64[R1 + 15];
           if (_s7LZl::I64 < _s7LZo::I64) goto c7Mkv; else goto c7Mku;
       c7Mku: // global
           if (_s7LZl::I64 == _s7LZo::I64) goto c7Mkv; else goto c7Mkr;
       c7Mkv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Mkr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.207212141 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7MkY,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MkY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Ml2; else goto c7Ml3;
       c7Ml2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ml3: // global
           I64[Sp - 16] = block_c7MkV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mlm; else goto c7MkW;
       u7Mlm: // global
           call _c7MkV(R1) args: 0, res: 0, upd: 0;
       c7MkW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MkV() //  [R1]
         { info_tbl: [(c7MkV,
                       label: block_c7MkV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MkV: // global
           I64[Sp - 8] = block_c7Ml1_info;
           _s7LZu::P64 = R1;
           _s7LZv::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7LZv::I64;
           P64[Sp + 8] = _s7LZu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mll; else goto c7Ml5;
       u7Mll: // global
           call _c7Ml1(R1) args: 0, res: 0, upd: 0;
       c7Ml5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ml1() //  [R1]
         { info_tbl: [(c7Ml1,
                       label: block_c7Ml1_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ml1: // global
           _s7LZv::I64 = I64[Sp + 8];
           _s7LZx::P64 = R1;
           _s7LZy::I64 = I64[R1 + 15];
           if (_s7LZv::I64 < _s7LZy::I64) goto c7Mlk; else goto c7Mlj;
       c7Mlj: // global
           if (_s7LZv::I64 == _s7LZy::I64) goto c7Mlk; else goto c7Mlg;
       c7Mlk: // global
           R1 = _s7LZx::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Mlg: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.215412976 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7MlN,
                       label: GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MlN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MlR; else goto c7MlS;
       c7MlR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MlS: // global
           I64[Sp - 16] = block_c7MlK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mmb; else goto c7MlL;
       u7Mmb: // global
           call _c7MlK(R1) args: 0, res: 0, upd: 0;
       c7MlL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MlK() //  [R1]
         { info_tbl: [(c7MlK,
                       label: block_c7MlK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MlK: // global
           I64[Sp - 8] = block_c7MlQ_info;
           _s7LZE::P64 = R1;
           _s7LZF::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7LZF::I64;
           P64[Sp + 8] = _s7LZE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mma; else goto c7MlU;
       u7Mma: // global
           call _c7MlQ(R1) args: 0, res: 0, upd: 0;
       c7MlU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MlQ() //  [R1]
         { info_tbl: [(c7MlQ,
                       label: block_c7MlQ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MlQ: // global
           _s7LZE::P64 = P64[Sp + 16];
           _s7LZF::I64 = I64[Sp + 8];
           _s7LZI::I64 = I64[R1 + 15];
           if (_s7LZF::I64 < _s7LZI::I64) goto c7Mm9; else goto c7Mm8;
       c7Mm8: // global
           if (_s7LZF::I64 == _s7LZI::I64) goto c7Mm9; else goto c7Mm5;
       c7Mm9: // global
           R1 = _s7LZE::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Mm5: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.223843851 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_closure+1;
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.22616882 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr1_closure" {
     GHC.ForeignPtr.castForeignPtr1_closure:
         const GHC.ForeignPtr.castForeignPtr1_info;
 },
 GHC.ForeignPtr.castForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7MmA,
                       label: GHC.ForeignPtr.castForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MmA: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.230240898 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr_closure" {
     GHC.ForeignPtr.castForeignPtr_closure:
         const GHC.ForeignPtr.castForeignPtr_info;
 },
 GHC.ForeignPtr.castForeignPtr_entry() //  [R2]
         { info_tbl: [(c7MmN,
                       label: GHC.ForeignPtr.castForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MmN: // global
           R2 = R2;
           call GHC.ForeignPtr.castForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.234166553 UTC

[section ""data" . GHC.ForeignPtr.plusForeignPtr_closure" {
     GHC.ForeignPtr.plusForeignPtr_closure:
         const GHC.ForeignPtr.plusForeignPtr_info;
 },
 GHC.ForeignPtr.plusForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7Mn1,
                       label: GHC.ForeignPtr.plusForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mn1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Mnd; else goto c7Mne;
       c7Mnd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.plusForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mne: // global
           I64[Sp - 16] = block_c7MmY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mnk; else goto c7MmZ;
       u7Mnk: // global
           call _c7MmY(R1) args: 0, res: 0, upd: 0;
       c7MmZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MmY() //  [R1]
         { info_tbl: [(c7MmY,
                       label: block_c7MmY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MmY: // global
           I64[Sp - 8] = block_c7Mn4_info;
           _s7LZR::P64 = P64[R1 + 7];
           _s7LZQ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7LZR::P64;
           I64[Sp + 8] = _s7LZQ::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mnj; else goto c7Mn5;
       u7Mnj: // global
           call _c7Mn4(R1) args: 0, res: 0, upd: 0;
       c7Mn5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mn4() //  [R1]
         { info_tbl: [(c7Mn4,
                       label: block_c7Mn4_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mn4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Mni; else goto c7Mnh;
       c7Mni: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mnh: // global
           _s7LZU::I64 = I64[Sp + 16] + I64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7LZU::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.24284473 UTC

[section ""data" . GHC.ForeignPtr.$trModule3_closure" {
     GHC.ForeignPtr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.244584446 UTC

[section ""data" . GHC.ForeignPtr.$trModule1_closure" {
     GHC.ForeignPtr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.246674728 UTC

[section ""data" . GHC.ForeignPtr.$trModule_closure" {
     GHC.ForeignPtr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ForeignPtr.$trModule3_closure+1;
         const GHC.ForeignPtr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.248386472 UTC

[section ""data" . $krep_r7Kba_closure" {
     $krep_r7Kba_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.250360837 UTC

[section ""data" . $krep1_r7Kbb_closure" {
     $krep1_r7Kbb_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.252261637 UTC

[section ""data" . $krep2_r7Kbc_closure" {
     $krep2_r7Kbc_closure:
         const :_con_info;
         const $krep1_r7Kbb_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.254108682 UTC

[section ""data" . $krep3_r7Kbd_closure" {
     $krep3_r7Kbd_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.255890656 UTC

[section ""data" . $krep4_r7Kbe_closure" {
     $krep4_r7Kbe_closure:
         const :_con_info;
         const $krep3_r7Kbd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.257671997 UTC

[section ""data" . $krep5_r7Kbf_closure" {
     $krep5_r7Kbf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_r7Kbe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.259317047 UTC

[section ""data" . $krep6_r7Kbg_closure" {
     $krep6_r7Kbg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.260877837 UTC

[section ""data" . $krep7_r7Kbh_closure" {
     $krep7_r7Kbh_closure:
         const :_con_info;
         const $krep_r7Kba_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.262829623 UTC

[section ""data" . $krep8_r7Kbi_closure" {
     $krep8_r7Kbi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep7_r7Kbh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.264511654 UTC

[section ""data" . $krep9_r7Kbj_closure" {
     $krep9_r7Kbj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWeak#_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.266314074 UTC

[section ""data" . $krep10_r7Kbk_closure" {
     $krep10_r7Kbk_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcAddr#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.267957674 UTC

[section ""cstring" . GHC.ForeignPtr.$tcFinalizers2_bytes" {
     GHC.ForeignPtr.$tcFinalizers2_bytes:
         I8[] [70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.269614224 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers1_closure" {
     GHC.ForeignPtr.$tcFinalizers1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcFinalizers2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.271412896 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers_closure" {
     GHC.ForeignPtr.$tcFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcFinalizers1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2126386461452460014;
         const 14391791758474672075;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.273080425 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers1_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcFinalizers_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.274903757 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'NoFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'NoFinalizers3_bytes:
         I8[] [39,78,111,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.276491437 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers2_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.278495164 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 1940741700794708869;
         const 15606281748314638871;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.280305042 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers1_closure" {
     GHC.ForeignPtr.$tc'CFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.28201099 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'CFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'CFinalizers3_bytes:
         I8[] [39,67,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.283494627 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers2_closure" {
     GHC.ForeignPtr.$tc'CFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'CFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.28516333 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers_closure" {
     GHC.ForeignPtr.$tc'CFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers1_closure+4;
         const 5471016724267814004;
         const 11112927960337249170;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.286857848 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers1_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7Kbf_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.288590205 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes:
         I8[] [39,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.290523255 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers2_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.292106767 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers1_closure+4;
         const 2766439294378598012;
         const 9182349323511249767;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.294036236 UTC

[section ""data" . $krep11_r7Kbl_closure" {
     $krep11_r7Kbl_closure:
         const :_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.295691504 UTC

[section ""data" . $krep12_r7Kbm_closure" {
     $krep12_r7Kbm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7Kbl_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.297636913 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtrContents2_bytes" {
     GHC.ForeignPtr.$tcForeignPtrContents2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114,67,111,110,116,101,110,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.299159904 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents1_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.300671584 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtrContents1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2960910307208088010;
         const 1419315288615932334;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.302533275 UTC

[section ""data" . $krep13_r7Kbn_closure" {
     $krep13_r7Kbn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.304105916 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.305729616 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainPtr3_bytes:
         I8[] [39,80,108,97,105,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.307379908 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.308945648 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr_closure" {
     GHC.ForeignPtr.$tc'PlainPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr1_closure+4;
         const 10386497703892305970;
         const 4483570029522342780;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.311494031 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7Kbm_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.313437027 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes:
         I8[] [39,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.315105269 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.316937604 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 9658214180323125435;
         const 4797612916438137994;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.318656186 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr1_closure" {
     GHC.ForeignPtr.$tc'MallocPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.320315101 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MallocPtr3_bytes" {
     GHC.ForeignPtr.$tc'MallocPtr3_bytes:
         I8[] [39,77,97,108,108,111,99,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.322481583 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr2_closure" {
     GHC.ForeignPtr.$tc'MallocPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MallocPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.324073316 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr_closure" {
     GHC.ForeignPtr.$tc'MallocPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr2_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr1_closure+4;
         const 1358169953258233372;
         const 15155489453511463859;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.325865694 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtr2_bytes" {
     GHC.ForeignPtr.$tcForeignPtr2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.327660811 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr1_closure" {
     GHC.ForeignPtr.$tcForeignPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.329430552 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr_closure" {
     GHC.ForeignPtr.$tcForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13645276010227069957;
         const 424768606850180054;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.331433044 UTC

[section ""data" . $krep14_r7Kbo_closure" {
     $krep14_r7Kbo_closure:
         const :_con_info;
         const $krep6_r7Kbg_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.333111724 UTC

[section ""data" . $krep15_r7Kbp_closure" {
     $krep15_r7Kbp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure+1;
         const $krep14_r7Kbo_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.334720028 UTC

[section ""data" . $krep16_r7Kbq_closure" {
     $krep16_r7Kbq_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7Kbn_closure+1;
         const $krep15_r7Kbp_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.336432005 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7Kbk_closure+1;
         const $krep16_r7Kbq_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.338396362 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'ForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'ForeignPtr3_bytes:
         I8[] [39,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.339872669 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'ForeignPtr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.341641091 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr1_closure+4;
         const 15066988800190837275;
         const 12331496810414125071;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.343275306 UTC

[section ""cstring" . GHC.ForeignPtr.$tcMyWeak2_bytes" {
     GHC.ForeignPtr.$tcMyWeak2_bytes:
         I8[] [77,121,87,101,97,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.344795088 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak1_closure" {
     GHC.ForeignPtr.$tcMyWeak1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcMyWeak2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.3466267 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak_closure" {
     GHC.ForeignPtr.$tcMyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcMyWeak1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18176044154139657744;
         const 6003369520845561213;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.348355319 UTC

[section ""data" . $krep17_r7Kbr_closure" {
     $krep17_r7Kbr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcMyWeak_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.350258806 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak1_closure" {
     GHC.ForeignPtr.$tc'MyWeak1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const $krep17_r7Kbr_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.351962623 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MyWeak3_bytes" {
     GHC.ForeignPtr.$tc'MyWeak3_bytes:
         I8[] [39,77,121,87,101,97,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.354207816 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak2_closure" {
     GHC.ForeignPtr.$tc'MyWeak2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MyWeak3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.356084874 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak_closure" {
     GHC.ForeignPtr.$tc'MyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak2_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak1_closure+4;
         const 12419514784912020020;
         const 3312746660203758866;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.358271843 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr_1_closure" {
     GHC.ForeignPtr.newForeignPtr_1_closure:
         const GHC.ForeignPtr.newForeignPtr_1_info;
 },
 GHC.ForeignPtr.newForeignPtr_1_entry() //  [R2]
         { info_tbl: [(c7MoP,
                       label: GHC.ForeignPtr.newForeignPtr_1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MoP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MoW; else goto c7MoX;
       c7MoW: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.newForeignPtr_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MoX: // global
           I64[Sp - 8] = block_c7MoM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mp2; else goto c7MoN;
       u7Mp2: // global
           call _c7MoM(R1) args: 0, res: 0, upd: 0;
       c7MoN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MoM() //  [R1]
         { info_tbl: [(c7MoM,
                       label: block_c7MoM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MoM: // global
           I64[Sp - 8] = block_c7MoS_info;
           _s7LZY::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7LZY::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MoS() //  [R1]
         { info_tbl: [(c7MoS,
                       label: block_c7MoS_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MoS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Mp1; else goto c7Mp0;
       c7Mp1: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mp0: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.365660837 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr__closure" {
     GHC.ForeignPtr.newForeignPtr__closure:
         const GHC.ForeignPtr.newForeignPtr__info;
 },
 GHC.ForeignPtr.newForeignPtr__entry() //  [R2]
         { info_tbl: [(c7Mpq,
                       label: GHC.ForeignPtr.newForeignPtr__info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mpq: // global
           R2 = R2;
           call GHC.ForeignPtr.newForeignPtr_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.371377676 UTC

[section ""data" . GHC.ForeignPtr.$winsertCFinalizer_closure" {
     GHC.ForeignPtr.$winsertCFinalizer_closure:
         const GHC.ForeignPtr.$winsertCFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$winsertCFinalizer_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mpy: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_s7M0s_entry() //  [R1, R2]
         { info_tbl: [(c7Mq0,
                       label: sat_s7M0s_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mq0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mq1; else goto c7Mq2;
       c7Mq1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mq2: // global
           I64[Sp - 16] = block_c7MpS_info;
           _s7M0l::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s7M0l::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mqi; else goto c7MpT;
       u7Mqi: // global
           call _c7MpS(R1) args: 0, res: 0, upd: 0;
       c7MpT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MpS() //  [R1]
         { info_tbl: [(c7MpS,
                       label: block_c7MpS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MpS: // global
           _c7MpZ::P64 = R1 & 7;
           if (_c7MpZ::P64 < 3) goto u7Mqh; else goto c7MpY;
       u7Mqh: // global
           if (_c7MpZ::P64 < 2) goto c7MpW; else goto c7MpX;
       c7MpW: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MpX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7Mqd; else goto c7Mqc;
       c7Mqd: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mqc: // global
           _s7M0o::P64 = P64[R1 + 6];
           I64[Hp - 56] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 48] = _s7M0o::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 39;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MpY: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$winsertCFinalizer_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7Mqo,
                       label: GHC.ForeignPtr.$winsertCFinalizer_info
                       rep:HeapRep static {
                             Fun {arity: 7
                                  fun_type: ArgGen [False, True, True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mqo: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7Mqp; else goto u7Mrz;
       c7Mqp: // global
           R1 = GHC.ForeignPtr.$winsertCFinalizer_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       u7Mrz: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _c7Mpz() args: 0, res: 0, upd: 0;
     }
 },
 _c7Mpz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mpz: // global
           _s7M0d::P64 = P64[P64[Sp] + 8];
           I64[Sp - 8] = block_c7MpC_info;
           R1 = _s7M0d::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MrH; else goto c7MpD;
       u7MrH: // global
           call _c7MpC(R1) args: 0, res: 0, upd: 0;
       c7MpD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MpC() //  [R1]
         { info_tbl: [(c7MpC,
                       label: block_c7MpC_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MpC: // global
           _c7Mqn::P64 = R1 & 7;
           if (_c7Mqn::P64 < 3) goto u7Mry; else goto c7Mqm;
       u7Mry: // global
           if (_c7Mqn::P64 < 2) goto c7Mqk; else goto c7Mql;
       c7Mqk: // global
           I64[Sp] = block_c7MpH_info;
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 8];
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
       c7Mql: // global
           I64[Sp] = block_c7Mrm_info;
           R5 = P64[R1 + 6];
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
       c7Mqm: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MpH() //  [R1]
         { info_tbl: [(c7MpH,
                       label: block_c7MpH_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MpH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7Mqx; else goto c7Mqw;
       c7Mqx: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mqw: // global
           I64[Hp - 88] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.False_closure+1;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 86;
           P64[Hp - 16] = Hp - 55;
           I64[Hp - 8] = sat_s7M0s_info;
           P64[Hp] = Hp - 31;
           I64[Sp - 8] = block_c7Mqr_info;
           R2 = Hp - 7;
           _s7M0h::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s7M0h::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mqr() //  [R1]
         { info_tbl: [(c7Mqr,
                       label: block_c7Mqr_info
                       rep:StackRep [False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mqr: // global
           I64[Sp] = block_c7Mqt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MrJ; else goto c7Mqz;
       u7MrJ: // global
           call _c7Mqt(R1) args: 0, res: 0, upd: 0;
       c7Mqz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mqt() //  [R1]
         { info_tbl: [(c7Mqt,
                       label: block_c7Mqt_info
                       rep:StackRep [False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mqt: // global
           I64[Sp - 8] = block_c7MqF_info;
           _s7M0x::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s7M0x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MrK; else goto c7MqS;
       u7MrK: // global
           call _c7MqF(R1) args: 0, res: 0, upd: 0;
       c7MqS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MqF() //  [R1]
         { info_tbl: [(c7MqF,
                       label: block_c7MqF_info
                       rep:StackRep [False, False, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MqF: // global
           if (R1 & 7 == 1) goto c7MqZ; else goto c7Mrd;
       c7MqZ: // global
           I64[Sp + 16] = block_c7MqW_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7MrL; else goto c7Mr0;
       u7MrL: // global
           call _c7MqW(R1) args: 0, res: 0, upd: 0;
       c7Mr0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Mrd: // global
           I64[Sp] = block_c7Mr7_info;
           R1 = P64[Sp + 16];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MqW() //  [R1]
         { info_tbl: [(c7MqW,
                       label: block_c7MqW_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MqW: // global
           P64[Sp] = P64[R1 + 7];
           call _s7M0z() args: 0, res: 0, upd: 0;
     }
 },
 _c7Mr7() //  []
         { info_tbl: [(c7Mr7,
                       label: block_c7Mr7_info
                       rep:StackRep [False, True, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mr7: // global
           I64[Sp + 16] = block_c7Mrb_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7MrP; else goto c7Mrf;
       u7MrP: // global
           call _c7Mrb(R1) args: 0, res: 0, upd: 0;
       c7Mrf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mrb() //  [R1]
         { info_tbl: [(c7Mrb,
                       label: block_c7Mrb_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mrb: // global
           P64[Sp] = P64[R1 + 7];
           call _s7M0z() args: 0, res: 0, upd: 0;
     }
 },
 _s7M0z() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       s7M0z: // global
           _s7M0B::P64 = P64[Sp];
           I64[Sp] = block_c7MqK_info;
           R5 = _s7M0B::P64;
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MqK() //  [R1]
         { info_tbl: [(c7MqK,
                       label: block_c7MqK_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MqK: // global
           if (R1 == 1) goto u7MrC; else goto u7MrD;
       u7MrC: // global
           Sp = Sp + 56;
           call _c7Mrt() args: 0, res: 0, upd: 0;
       u7MrD: // global
           Sp = Sp + 8;
           call _c7Mrs() args: 0, res: 0, upd: 0;
     }
 },
 _c7Mrm() //  [R1]
         { info_tbl: [(c7Mrm,
                       label: block_c7Mrm_info
                       rep:StackRep [False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mrm: // global
           if (R1 == 1) goto u7MrE; else goto u7MrF;
       u7MrE: // global
           Sp = Sp + 56;
           call _c7Mrt() args: 0, res: 0, upd: 0;
       u7MrF: // global
           Sp = Sp + 8;
           call _c7Mrs() args: 0, res: 0, upd: 0;
     }
 },
 _c7Mrt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mrt: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Mrs() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mrs: // global
           P64[Sp] = P64[Sp];
           I64[Sp + 8] = I64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           call _c7Mpz() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.407221767 UTC

[section ""cstring" . lvl15_r7Kbs_bytes" {
     lvl15_r7Kbs_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,97,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.40922765 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer2_entry() //  [R1]
         { info_tbl: [(c7MtJ,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MtJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MtK; else goto c7MtL;
       c7MtK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7MtL: // global
           (_c7MtE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7MtE::I64 == 0) goto c7MtG; else goto c7MtF;
       c7MtG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7MtF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7MtE::I64;
           I64[Sp - 24] = block_c7MtH_info;
           R2 = lvl15_r7Kbs_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7MtH() //  [R1]
         { info_tbl: [(c7MtH,
                       label: block_c7MtH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MtH: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.415678121 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mu2: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry() //  [R2, R3, R4,
                                                         R5]
         { info_tbl: [(c7Mue,
                       label: GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [True, True, True, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mue: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Muf; else goto c7Mug;
       c7Muf: // global
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7Mug: // global
           I64[Sp - 32] = block_c7Mu6_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Mur; else goto c7Mu7;
       u7Mur: // global
           call _c7Mu6(R1) args: 0, res: 0, upd: 0;
       c7Mu7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mu6() //  [R1]
         { info_tbl: [(c7Mu6,
                       label: block_c7Mu6_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mu6: // global
           _c7Mud::P64 = R1 & 7;
           if (_c7Mud::P64 < 3) goto u7Muq; else goto c7Muc;
       u7Muq: // global
           _s7M0X::I64 = I64[Sp + 8];
           _s7M0Y::I64 = I64[Sp + 16];
           _s7M0Z::I64 = I64[Sp + 24];
           if (_c7Mud::P64 < 2) goto c7Mua; else goto c7Mub;
       c7Mua: // global
           R6 = _s7M0Z::I64;
           R5 = _s7M0Y::I64;
           R4 = 1;
           R3 = _s7M0X::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 24] = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7Mub: // global
           R6 = _s7M0Z::I64;
           R5 = _s7M0Y::I64;
           R4 = 1;
           R3 = _s7M0X::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7Muc: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.425292787 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7MuO,
                       label: GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MuO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MuX; else goto c7MuY;
       c7MuX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MuY: // global
           I64[Sp - 24] = block_c7MuL_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Mv7; else goto c7MuM;
       u7Mv7: // global
           call _c7MuL(R1) args: 0, res: 0, upd: 0;
       c7MuM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MuL() //  [R1]
         { info_tbl: [(c7MuL,
                       label: block_c7MuL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MuL: // global
           I64[Sp] = block_c7MuR_info;
           _s7M1d::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7M1d::I64;
           if (R1 & 7 != 0) goto u7Mv6; else goto c7MuS;
       u7Mv6: // global
           call _c7MuR(R1) args: 0, res: 0, upd: 0;
       c7MuS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MuR() //  [R1]
         { info_tbl: [(c7MuR,
                       label: block_c7MuR_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MuR: // global
           I64[Sp] = block_c7MuW_info;
           _s7M1f::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7M1f::I64;
           if (R1 & 7 != 0) goto u7Mv8; else goto c7Mv1;
       u7Mv8: // global
           call _c7MuW(R1) args: 0, res: 0, upd: 0;
       c7Mv1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MuW() //  [R1]
         { info_tbl: [(c7MuW,
                       label: block_c7MuW_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MuW: // global
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 15];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.438574664 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Mvx,
                       label: GHC.ForeignPtr.addForeignPtrFinalizerEnv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mvx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.444236638 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizer_entry() //  [R2, R3, R4]
         { info_tbl: [(c7MvQ,
                       label: GHC.ForeignPtr.$waddForeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MvQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MvR; else goto c7MvS;
       c7MvR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MvS: // global
           I64[Sp - 24] = block_c7MvI_info;
           R1 = R4;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Mw3; else goto c7MvJ;
       u7Mw3: // global
           call _c7MvI(R1) args: 0, res: 0, upd: 0;
       c7MvJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MvI() //  [R1]
         { info_tbl: [(c7MvI,
                       label: block_c7MvI_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MvI: // global
           _c7MvP::P64 = R1 & 7;
           if (_c7MvP::P64 < 3) goto u7Mw2; else goto c7MvO;
       u7Mw2: // global
           _s7M1j::I64 = I64[Sp + 8];
           _s7M1k::I64 = I64[Sp + 16];
           if (_c7MvP::P64 < 2) goto c7MvM; else goto c7MvN;
       c7MvM: // global
           R6 = _s7M1k::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7M1j::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 16] = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7MvN: // global
           R6 = _s7M1k::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7M1j::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7MvO: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.454146183 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer1_entry() //  [R2, R3]
         { info_tbl: [(c7Mwo,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mwo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mws; else goto c7Mwt;
       c7Mws: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mwt: // global
           I64[Sp - 16] = block_c7Mwl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MwB; else goto c7Mwm;
       u7MwB: // global
           call _c7Mwl(R1) args: 0, res: 0, upd: 0;
       c7Mwm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mwl() //  [R1]
         { info_tbl: [(c7Mwl,
                       label: block_c7Mwl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mwl: // global
           I64[Sp] = block_c7Mwr_info;
           _s7M1x::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7M1x::I64;
           if (R1 & 7 != 0) goto u7MwA; else goto c7Mwv;
       u7MwA: // global
           call _c7Mwr(R1) args: 0, res: 0, upd: 0;
       c7Mwv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mwr() //  [R1]
         { info_tbl: [(c7Mwr,
                       label: block_c7Mwr_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mwr: // global
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 15];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrFinalizer_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.464539048 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7MwV,
                       label: GHC.ForeignPtr.addForeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MwV: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizer1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.469143528 UTC

[section ""cstring" . lvl16_r7Kbt_bytes" {
     lvl16_r7Kbt_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.471735813 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_entry() //  [R1]
         { info_tbl: [(c7Mxb,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mxb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Mxc; else goto c7Mxd;
       c7Mxc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Mxd: // global
           (_c7Mx6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Mx6::I64 == 0) goto c7Mx8; else goto c7Mx7;
       c7Mx8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Mx7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Mx6::I64;
           I64[Sp - 24] = block_c7Mx9_info;
           R2 = lvl16_r7Kbt_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7Mx9() //  [R1]
         { info_tbl: [(c7Mx9,
                       label: block_c7Mx9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mx9: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.4802213 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry() //  [R2, R3]
         { info_tbl: [(c7MxA,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MxA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MxB; else goto c7MxC;
       c7MxB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MxC: // global
           I64[Sp - 16] = block_c7Mxx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7My6; else goto c7Mxy;
       u7My6: // global
           call _c7Mxx(R1) args: 0, res: 0, upd: 0;
       c7Mxy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mxx() //  [R1]
         { info_tbl: [(c7Mxx,
                       label: block_c7Mxx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mxx: // global
           _s7M1G::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7M1G::I64, 0)) goto c7MxY; else goto c7My4;
       c7MxY: // global
           I64[Sp] = block_c7MxJ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7M1G::I64;
           if (R1 & 7 != 0) goto u7My5; else goto c7MxK;
       u7My5: // global
           call _c7MxJ(R1) args: 0, res: 0, upd: 0;
       c7MxK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7My4: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MxJ() //  [R1]
         { info_tbl: [(c7MxJ,
                       label: block_c7MxJ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MxJ: // global
           I64[Sp - 8] = block_c7MxO_info;
           _s7M1J::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7M1J::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MxO() //  [R1]
         { info_tbl: [(c7MxO,
                       label: block_c7MxO_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MxO: // global
           _s7M1J::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7MxQ_info;
           R2 = _s7M1J::I64;
           _s7M1M::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s7M1M::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MxQ() //  [R1]
         { info_tbl: [(c7MxQ,
                       label: block_c7MxQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MxQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7My3; else goto c7My2;
       c7My3: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7My2: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.492137969 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes_entry() //  [R2, R3]
         { info_tbl: [(c7MyE,
                       label: GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MyE: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.495119825 UTC

[section ""cstring" . lvl17_r7Kbu_bytes" {
     lvl17_r7Kbu_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.497062662 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes2_entry() //  [R1]
         { info_tbl: [(c7MyU,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MyU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MyV; else goto c7MyW;
       c7MyV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7MyW: // global
           (_c7MyP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7MyP::I64 == 0) goto c7MyR; else goto c7MyQ;
       c7MyR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7MyQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7MyP::I64;
           I64[Sp - 24] = block_c7MyS_info;
           R2 = lvl17_r7Kbu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7MyS() //  [R1]
         { info_tbl: [(c7MyS,
                       label: block_c7MyS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MyS: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.503120721 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes1_entry() //  [R2]
         { info_tbl: [(c7Mzj,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mzj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mzk; else goto c7Mzl;
       c7Mzk: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mzl: // global
           I64[Sp - 8] = block_c7Mzg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MzI; else goto c7Mzh;
       u7MzI: // global
           call _c7Mzg(R1) args: 0, res: 0, upd: 0;
       c7Mzh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mzg() //  [R1]
         { info_tbl: [(c7Mzg,
                       label: block_c7Mzg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mzg: // global
           _s7M1Y::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7M1Y::I64, 0)) goto c7MzC; else goto c7MzH;
       c7MzC: // global
           I64[Sp - 8] = block_c7Mzs_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7M1Y::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7MzH: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Mzs() //  [R1]
         { info_tbl: [(c7Mzs,
                       label: block_c7Mzs_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mzs: // global
           I64[Sp] = block_c7Mzu_info;
           _s7M22::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7M22::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Mzu() //  [R1]
         { info_tbl: [(c7Mzu,
                       label: block_c7Mzu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Mzu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7MzG; else goto c7MzF;
       c7MzG: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MzF: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.512164062 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes_entry() //  [R2]
         { info_tbl: [(c7MAb,
                       label: GHC.ForeignPtr.mallocForeignPtrBytes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MAb: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.515125886 UTC

[section ""data" . lvl18_r7Kbv_closure" {
     lvl18_r7Kbv_closure:
         const GHC.Types.I#_con_info;
         const 159;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.516893706 UTC

[section ""data" . lvl19_r7Kbw_closure" {
     lvl19_r7Kbw_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.518890466 UTC

[section ""data" . lvl20_r7Kbx_closure" {
     lvl20_r7Kbx_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.520464827 UTC

[section ""data" . lvl21_r7Kby_closure" {
     lvl21_r7Kby_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl18_r7Kbv_closure+1;
         const lvl19_r7Kbw_closure+1;
         const lvl18_r7Kbv_closure+1;
         const lvl20_r7Kbx_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.522359519 UTC

[section ""data" . lvl22_r7Kbz_closure" {
     lvl22_r7Kbz_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl21_r7Kby_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.524249401 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr3_closure" {
     GHC.ForeignPtr.mallocForeignPtr3_closure:
         const GHC.ForeignPtr.mallocForeignPtr3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr3_entry() //  [R1]
         { info_tbl: [(c7MAt,
                       label: GHC.ForeignPtr.mallocForeignPtr3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MAt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MAu; else goto c7MAv;
       c7MAu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7MAv: // global
           (_c7MAq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7MAq::I64 == 0) goto c7MAs; else goto c7MAr;
       c7MAs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7MAr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7MAq::I64;
           R2 = lvl22_r7Kbz_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.52890084 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr1_closure" {
     GHC.ForeignPtr.mallocForeignPtr1_closure:
         const GHC.ForeignPtr.mallocForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7MAK,
                       label: GHC.ForeignPtr.mallocForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MAK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7MAO; else goto c7MAP;
       c7MAO: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MAP: // global
           I64[Sp - 16] = block_c7MAI_info;
           _s7M2a::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           P64[Sp - 8] = _s7M2a::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7MAI() //  [R1]
         { info_tbl: [(c7MAI,
                       label: block_c7MAI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MAI: // global
           I64[Sp] = block_c7MAN_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c7MAN() //  [R1]
         { info_tbl: [(c7MAN,
                       label: block_c7MAN_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MAN: // global
           _s7M2f::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7M2f::I64, 0)) goto c7MB8; else goto c7MBd;
       c7MB8: // global
           I64[Sp - 8] = block_c7MAY_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7M2f::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7MBd: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MAY() //  [R1]
         { info_tbl: [(c7MAY,
                       label: block_c7MAY_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MAY: // global
           _s7M2f::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7MB0_info;
           R2 = I64[Sp + 16];
           _s7M2j::P64 = R1;
           R1 = _s7M2f::I64;
           P64[Sp + 16] = _s7M2j::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MB0() //  [R1]
         { info_tbl: [(c7MB0,
                       label: block_c7MB0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MB0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7MBc; else goto c7MBb;
       c7MBc: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MBb: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.544790089 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr_closure" {
     GHC.ForeignPtr.mallocForeignPtr_closure:
         const GHC.ForeignPtr.mallocForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr_entry() //  [R2]
         { info_tbl: [(c7MBO,
                       label: GHC.ForeignPtr.mallocForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MBO: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.550083704 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer3_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer3_entry() //  [R2]
         { info_tbl: [(c7MC0,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MC0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MC4; else goto c7MC3;
       c7MC4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MC3: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.555550298 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer4_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry() //  [R2]
         { info_tbl: [(c7MCn,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MCn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MCo; else goto u7MCz;
       c7MCo: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7MCz: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c7MCd() args: 0, res: 0, upd: 0;
     }
 },
 _c7MCd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MCd: // global
           _s7M2s::P64 = P64[Sp];
           I64[Sp] = block_c7MCg_info;
           R1 = _s7M2s::P64;
           if (R1 & 7 != 0) goto u7MCB; else goto c7MCh;
       u7MCB: // global
           call _c7MCg(R1) args: 0, res: 0, upd: 0;
       c7MCh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MCg() //  [R1]
         { info_tbl: [(c7MCg,
                       label: block_c7MCg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MCg: // global
           if (R1 & 7 == 1) goto c7MCk; else goto c7MCl;
       c7MCk: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MCl: // global
           I64[Sp - 8] = block_c7MCv_info;
           _s7M2w::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7M2w::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MCv() //  []
         { info_tbl: [(c7MCv,
                       label: block_c7MCv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MCv: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7MCd() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.56733423 UTC

[section ""data" . GHC.ForeignPtr.$wforeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$wforeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$wforeignPtrFinalizer_info;
 },
 GHC.ForeignPtr.$wforeignPtrFinalizer_entry() //  [R2]
         { info_tbl: [(c7MDd,
                       label: GHC.ForeignPtr.$wforeignPtrFinalizer_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MDd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7MDe; else goto c7MDf;
       c7MDe: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$wforeignPtrFinalizer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MDf: // global
           I64[Sp - 8] = block_c7MD3_info;
           _s7M2A::P64 = R2;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           R1 = _s7M2A::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MD3() //  [R1]
         { info_tbl: [(c7MD3,
                       label: block_c7MD3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MD3: // global
           I64[Sp] = block_c7MD5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MDC; else goto c7MD6;
       u7MDC: // global
           call _c7MD5(R1) args: 0, res: 0, upd: 0;
       c7MD6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MD5() //  [R1]
         { info_tbl: [(c7MD5,
                       label: block_c7MD5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MD5: // global
           _c7MDc::P64 = R1 & 7;
           if (_c7MDc::P64 < 3) goto u7MDz; else goto c7MDb;
       u7MDz: // global
           if (_c7MDc::P64 < 2) goto u7MDA; else goto c7MDa;
       u7MDA: // global
           Sp = Sp + 8;
           call _c7MDu() args: 0, res: 0, upd: 0;
       c7MDa: // global
           I64[Sp] = block_c7MDm_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7MDb: // global
           R2 = P64[R1 + 5];
           Sp = Sp + 8;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7MDm() //  [R1, R2]
         { info_tbl: [(c7MDm,
                       label: block_c7MDm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MDm: // global
           if (R1 == 1) goto c7MDv; else goto u7MDB;
       c7MDv: // global
           R1 = R2;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       u7MDB: // global
           Sp = Sp + 8;
           call _c7MDu() args: 0, res: 0, upd: 0;
     }
 },
 _c7MDu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MDu: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.579125278 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr2_closure" {
     GHC.ForeignPtr.finalizeForeignPtr2_closure:
         const GHC.ForeignPtr.finalizeForeignPtr2_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr2_entry() //  [R2]
         { info_tbl: [(c7ME9,
                       label: GHC.ForeignPtr.finalizeForeignPtr2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ME9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7MEa; else goto c7MEb;
       c7MEa: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MEb: // global
           I64[Sp - 8] = block_c7ME6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MEf; else goto c7ME7;
       u7MEf: // global
           call _c7ME6(R1) args: 0, res: 0, upd: 0;
       c7ME7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ME6() //  [R1]
         { info_tbl: [(c7ME6,
                       label: block_c7ME6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ME6: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.584745778 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr1_closure" {
     GHC.ForeignPtr.finalizeForeignPtr1_closure:
         const GHC.ForeignPtr.finalizeForeignPtr1_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr1_entry() //  [R2]
         { info_tbl: [(c7MEx,
                       label: GHC.ForeignPtr.finalizeForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MEx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7MEy; else goto c7MEz;
       c7MEy: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MEz: // global
           I64[Sp - 8] = block_c7MEu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MEW; else goto c7MEv;
       u7MEW: // global
           call _c7MEu(R1) args: 0, res: 0, upd: 0;
       c7MEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MEu() //  [R1]
         { info_tbl: [(c7MEu,
                       label: block_c7MEu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MEu: // global
           I64[Sp] = block_c7MEC_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u7MEV; else goto c7MEE;
       u7MEV: // global
           call _c7MEC(R1) args: 0, res: 0, upd: 0;
       c7MEE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MEC() //  [R1]
         { info_tbl: [(c7MEC,
                       label: block_c7MEC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MEC: // global
           _c7MET::P64 = R1 & 7;
           if (_c7MET::P64 < 3) goto u7MEU; else goto c7MES;
       u7MEU: // global
           if (_c7MET::P64 < 2) goto c7MEK; else goto c7MEO;
       c7MEK: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7MEO: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7MES: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.593539266 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr_closure" {
     GHC.ForeignPtr.finalizeForeignPtr_closure:
         const GHC.ForeignPtr.finalizeForeignPtr_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr_entry() //  [R2]
         { info_tbl: [(c7MFj,
                       label: GHC.ForeignPtr.finalizeForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MFj: // global
           R2 = R2;
           call GHC.ForeignPtr.finalizeForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.596749088 UTC

[section ""cstring" . lvl23_r7KbA_bytes" {
     lvl23_r7KbA_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.598553021 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer2_entry() //  [R1]
         { info_tbl: [(c7MFz,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MFz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MFA; else goto c7MFB;
       c7MFA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7MFB: // global
           (_c7MFu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7MFu::I64 == 0) goto c7MFw; else goto c7MFv;
       c7MFw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7MFv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7MFu::I64;
           I64[Sp - 24] = block_c7MFx_info;
           R2 = lvl23_r7KbA_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7MFx() //  [R1]
         { info_tbl: [(c7MFx,
                       label: block_c7MFx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MFx: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.607533437 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info;
         const 0;
 },
 sat_s7M3g_entry() //  [R1, R2]
         { info_tbl: [(c7MGg,
                       label: sat_s7M3g_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MGg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MGh; else goto c7MGi;
       c7MGh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MGi: // global
           I64[Sp - 24] = block_c7MG8_info;
           _s7M33::P64 = P64[R1 + 7];
           _s7M39::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7M33::P64;
           P64[Sp - 8] = _s7M39::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7MGy; else goto c7MG9;
       u7MGy: // global
           call _c7MG8(R1) args: 0, res: 0, upd: 0;
       c7MG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MG8() //  [R1]
         { info_tbl: [(c7MG8,
                       label: block_c7MG8_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MG8: // global
           _c7MGf::P64 = R1 & 7;
           if (_c7MGf::P64 < 3) goto u7MGx; else goto c7MGe;
       u7MGx: // global
           if (_c7MGf::P64 < 2) goto c7MGc; else goto c7MGd;
       c7MGc: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MGd: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7MGe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7MGw; else goto c7MGv;
       c7MGw: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MGv: // global
           _s7M3d::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7M3d::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7M3m_entry() //  [R1]
         { info_tbl: [(c7MGM,
                       label: sat_s7M3m_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MGM: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7M3B_entry() //  [R1, R2]
         { info_tbl: [(c7MH7,
                       label: sat_s7M3B_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MH7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MH8; else goto c7MH9;
       c7MH8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MH9: // global
           I64[Sp - 24] = block_c7MGZ_info;
           _s7M33::P64 = P64[R1 + 7];
           _s7M3u::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7M33::P64;
           P64[Sp - 8] = _s7M3u::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7MHp; else goto c7MH0;
       u7MHp: // global
           call _c7MGZ(R1) args: 0, res: 0, upd: 0;
       c7MH0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MGZ() //  [R1]
         { info_tbl: [(c7MGZ,
                       label: block_c7MGZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MGZ: // global
           _c7MH6::P64 = R1 & 7;
           if (_c7MH6::P64 < 3) goto u7MHo; else goto c7MH5;
       u7MHo: // global
           if (_c7MH6::P64 < 2) goto c7MH3; else goto c7MH4;
       c7MH3: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MH4: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7MH5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7MHn; else goto c7MHm;
       c7MHn: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MHm: // global
           _s7M3y::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7M3y::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7M4a_entry() //  [R1]
         { info_tbl: [(c7MHN,
                       label: sat_s7M4a_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MHN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MHO; else goto c7MHP;
       c7MHO: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7MHP: // global
           I64[Sp - 16] = block_c7MHD_info;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           _s7M35::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s7M35::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MHD() //  [R1]
         { info_tbl: [(c7MHD,
                       label: block_c7MHD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MHD: // global
           I64[Sp] = block_c7MHF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MIN; else goto c7MHG;
       u7MIN: // global
           call _c7MHF(R1) args: 0, res: 0, upd: 0;
       c7MHG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MHF() //  [R1]
         { info_tbl: [(c7MHF,
                       label: block_c7MHF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MHF: // global
           _c7MHM::P64 = R1 & 7;
           if (_c7MHM::P64 < 3) goto u7MIK; else goto c7MHL;
       u7MIK: // global
           if (_c7MHM::P64 < 2) goto c7MHJ; else goto c7MHK;
       c7MHJ: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MHK: // global
           I64[Sp] = block_c7MHW_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7MHL: // global
           P64[Sp] = P64[R1 + 5];
           call _c7MIn() args: 0, res: 0, upd: 0;
     }
 },
 _c7MHW() //  [R1, R2]
         { info_tbl: [(c7MHW,
                       label: block_c7MHW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MHW: // global
           if (R1 == 1) goto c7MI8; else goto c7MI4;
       c7MI8: // global
           I64[Sp] = block_c7MI7_info;
           R1 = R2;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c7MI4: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MI7() //  []
         { info_tbl: [(c7MI7,
                       label: block_c7MI7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MI7: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MIn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MIn: // global
           _s7M42::P64 = P64[Sp];
           I64[Sp] = block_c7MIp_info;
           R1 = _s7M42::P64;
           if (R1 & 7 != 0) goto u7MIP; else goto c7MIr;
       u7MIP: // global
           call _c7MIp(R1) args: 0, res: 0, upd: 0;
       c7MIr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MIp() //  [R1]
         { info_tbl: [(c7MIp,
                       label: block_c7MIp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MIp: // global
           if (R1 & 7 == 1) goto c7MIx; else goto c7MIC;
       c7MIx: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MIC: // global
           I64[Sp - 8] = block_c7MIA_info;
           _s7M46::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7M46::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MIA() //  []
         { info_tbl: [(c7MIA,
                       label: block_c7MIA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MIA: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7MIn() args: 0, res: 0, upd: 0;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7MIW,
                       label: GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MIW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7MIX; else goto c7MIY;
       c7MIX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MIY: // global
           I64[Sp - 16] = block_c7MFV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MJF; else goto c7MFW;
       u7MJF: // global
           call _c7MFV(R1) args: 0, res: 0, upd: 0;
       c7MFW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MFV() //  [R1]
         { info_tbl: [(c7MFV,
                       label: block_c7MFV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MFV: // global
           _c7MIV::P64 = R1 & 7;
           if (_c7MIV::P64 < 3) goto u7MJy; else goto c7MIU;
       u7MJy: // global
           _s7M33::P64 = P64[Sp + 8];
           if (_c7MIV::P64 < 2) goto c7MIS; else goto c7MIT;
       c7MIS: // global
           Hp = Hp + 88;
           _s7M35::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7MJg; else goto c7MJ0;
       c7MJ0: // global
           _s7M36::P64 = P64[_s7M35::P64 + 7];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7M33::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7M3g_info;
           P64[Hp - 8] = _s7M33::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7MGz_info;
           R2 = Hp - 15;
           R1 = _s7M36::P64;
           P64[Sp + 8] = _s7M36::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7MIT: // global
           Hp = Hp + 88;
           _s7M35::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7MJg; else goto c7MJf;
       c7MJg: // global
           HpAlloc = 88;
           R1 = _s7M35::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MJf: // global
           _s7M3q::P64 = P64[_s7M35::P64 + 6];
           _s7M3r::P64 = P64[_s7M35::P64 + 14];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7M33::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7M3B_info;
           P64[Hp - 8] = _s7M33::P64;
           P64[Hp] = Hp - 39;
           I64[Sp - 16] = block_c7MHq_info;
           R2 = Hp - 15;
           R1 = _s7M3r::P64;
           P64[Sp - 8] = _s7M3r::P64;
           P64[Sp] = _s7M3q::P64;
           P64[Sp + 8] = _s7M35::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7MIU: // global
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MGz() //  [R1]
         { info_tbl: [(c7MGz,
                       label: block_c7MGz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MGz: // global
           I64[Sp] = block_c7MGB_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MJB; else goto c7MGC;
       u7MJB: // global
           call _c7MGB(R1) args: 0, res: 0, upd: 0;
       c7MGC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MGB() //  [R1]
         { info_tbl: [(c7MGB,
                       label: block_c7MGB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MGB: // global
           if (R1 & 7 == 1) goto u7MJz; else goto c7MJ8;
       u7MJz: // global
           Sp = Sp + 16;
           call _c7MJl() args: 0, res: 0, upd: 0;
       c7MJ8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MJb; else goto c7MJa;
       c7MJb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MJa: // global
           I64[Hp - 8] = sat_s7M3m_info;
           _s7M36::P64 = P64[Sp + 8];
           P64[Hp] = _s7M36::P64;
           I64[Sp + 8] = block_c7MJ7_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7M36::P64;
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MJ7() //  []
         { info_tbl: [(c7MJ7,
                       label: block_c7MJ7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MJ7: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MHq() //  [R1]
         { info_tbl: [(c7MHq,
                       label: block_c7MHq_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MHq: // global
           I64[Sp] = block_c7MHs_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MJD; else goto c7MHt;
       u7MJD: // global
           call _c7MHs(R1) args: 0, res: 0, upd: 0;
       c7MHt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MHs() //  [R1]
         { info_tbl: [(c7MHs,
                       label: block_c7MHs_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MHs: // global
           if (R1 & 7 == 1) goto u7MJA; else goto c7MJn;
       u7MJA: // global
           Sp = Sp + 32;
           call _c7MJl() args: 0, res: 0, upd: 0;
       c7MJn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MJq; else goto c7MJp;
       c7MJq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MJp: // global
           I64[Hp - 16] = sat_s7M4a_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_c7MJm_info;
           R3 = Hp - 15;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MJl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MJl: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MJm() //  []
         { info_tbl: [(c7MJm,
                       label: block_c7MJm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MJm: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.661846805 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry() //  [R2, R3]
         { info_tbl: [(c7MMs,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MMs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MMt; else goto c7MMu;
       c7MMt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MMu: // global
           I64[Sp - 16] = block_c7MMp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MMy; else goto c7MMq;
       u7MMy: // global
           call _c7MMp(R1) args: 0, res: 0, upd: 0;
       c7MMq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MMp() //  [R1]
         { info_tbl: [(c7MMp,
                       label: block_c7MMp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MMp: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.669900271 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer_entry() //  [R2, R3]
         { info_tbl: [(c7MMN,
                       label: GHC.ForeignPtr.addForeignPtrConcFinalizer_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MMN: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.67685886 UTC

[section ""data" . GHC.ForeignPtr.$wnewConcForeignPtr_closure" {
     GHC.ForeignPtr.$wnewConcForeignPtr_closure:
         const GHC.ForeignPtr.$wnewConcForeignPtr_info;
         const 0;
 },
 sat_s7M4B_entry() //  [R1, R2]
         { info_tbl: [(c7MNg,
                       label: sat_s7M4B_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MNg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MNh; else goto c7MNi;
       c7MNh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MNi: // global
           I64[Sp - 24] = block_c7MN8_info;
           _s7M4n::P64 = P64[R1 + 7];
           _s7M4u::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7M4n::P64;
           P64[Sp - 8] = _s7M4u::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7MNy; else goto c7MN9;
       u7MNy: // global
           call _c7MN8(R1) args: 0, res: 0, upd: 0;
       c7MN9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MN8() //  [R1]
         { info_tbl: [(c7MN8,
                       label: block_c7MN8_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MN8: // global
           _c7MNf::P64 = R1 & 7;
           if (_c7MNf::P64 < 3) goto u7MNx; else goto c7MNe;
       u7MNx: // global
           if (_c7MNf::P64 < 2) goto c7MNc; else goto c7MNd;
       c7MNc: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MNd: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7MNe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7MNw; else goto c7MNv;
       c7MNw: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MNv: // global
           _s7M4y::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7M4y::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7M4J_entry() //  [R1]
         { info_tbl: [(c7MNM,
                       label: sat_s7M4J_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MNM: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$wnewConcForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7MNT,
                       label: GHC.ForeignPtr.$wnewConcForeignPtr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MNT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MNU; else goto c7MNV;
       c7MNU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$wnewConcForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MNV: // global
           I64[Sp - 24] = block_c7MMY_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MMY() //  [R1]
         { info_tbl: [(c7MMY,
                       label: block_c7MMY_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MMY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c7MNY; else goto c7MNX;
       c7MNY: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MNX: // global
           I64[Hp - 80] = :_con_info;
           _s7M4n::P64 = P64[Sp + 16];
           P64[Hp - 72] = _s7M4n::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7M4B_info;
           P64[Hp - 8] = _s7M4n::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7MNz_info;
           R2 = Hp - 15;
           _s7M4r::P64 = R1;
           R1 = R1;
           P64[Sp + 16] = _s7M4r::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MNz() //  [R1]
         { info_tbl: [(c7MNz,
                       label: block_c7MNz_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MNz: // global
           I64[Sp] = block_c7MNB_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MOg; else goto c7MNC;
       u7MOg: // global
           call _c7MNB(R1) args: 0, res: 0, upd: 0;
       c7MNC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MNB() //  [R1]
         { info_tbl: [(c7MNB,
                       label: block_c7MNB_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MNB: // global
           _s7M4r::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7MNQ; else goto c7MNR;
       c7MNQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7MO5; else goto c7MO4;
       c7MO5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MO4: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = _s7M4r::P64;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MNR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MOc; else goto c7MOb;
       c7MOc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MOb: // global
           I64[Hp - 8] = sat_s7M4J_info;
           P64[Hp] = _s7M4r::P64;
           I64[Sp] = block_c7MO6_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7M4r::P64;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MO6() //  [R1]
         { info_tbl: [(c7MO6,
                       label: block_c7MO6_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MO6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7MOf; else goto c7MOe;
       c7MOf: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MOe: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.696492438 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr1_closure" {
     GHC.ForeignPtr.newConcForeignPtr1_closure:
         const GHC.ForeignPtr.newConcForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr1_entry() //  [R2, R3]
         { info_tbl: [(c7MPx,
                       label: GHC.ForeignPtr.newConcForeignPtr1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MPx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MPy; else goto c7MPz;
       c7MPy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.newConcForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MPz: // global
           I64[Sp - 16] = block_c7MPu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MPD; else goto c7MPv;
       u7MPD: // global
           call _c7MPu(R1) args: 0, res: 0, upd: 0;
       c7MPv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MPu() //  [R1]
         { info_tbl: [(c7MPu,
                       label: block_c7MPu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MPu: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$wnewConcForeignPtr_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.702089876 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr_closure" {
     GHC.ForeignPtr.newConcForeignPtr_closure:
         const GHC.ForeignPtr.newConcForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7MPS,
                       label: GHC.ForeignPtr.newConcForeignPtr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MPS: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.newConcForeignPtr1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.705606896 UTC

[section ""data" . GHC.ForeignPtr.MyWeak_closure" {
     GHC.ForeignPtr.MyWeak_closure:
         const GHC.ForeignPtr.MyWeak_info;
 },
 GHC.ForeignPtr.MyWeak_entry() //  [R2]
         { info_tbl: [(c7MQ4,
                       label: GHC.ForeignPtr.MyWeak_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MQ4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MQ8; else goto c7MQ7;
       c7MQ8: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.MyWeak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MQ7: // global
           I64[Hp - 8] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.709281243 UTC

[section ""data" . GHC.ForeignPtr.PlainForeignPtr_closure" {
     GHC.ForeignPtr.PlainForeignPtr_closure:
         const GHC.ForeignPtr.PlainForeignPtr_info;
 },
 GHC.ForeignPtr.PlainForeignPtr_entry() //  [R2]
         { info_tbl: [(c7MQk,
                       label: GHC.ForeignPtr.PlainForeignPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MQk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MQo; else goto c7MQn;
       c7MQo: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MQn: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.713044005 UTC

[section ""data" . GHC.ForeignPtr.MallocPtr_closure" {
     GHC.ForeignPtr.MallocPtr_closure:
         const GHC.ForeignPtr.MallocPtr_info;
 },
 GHC.ForeignPtr.MallocPtr_entry() //  [R2, R3]
         { info_tbl: [(c7MQA,
                       label: GHC.ForeignPtr.MallocPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MQA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MQE; else goto c7MQD;
       c7MQE: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.MallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MQD: // global
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.716966572 UTC

[section ""data" . GHC.ForeignPtr.PlainPtr_closure" {
     GHC.ForeignPtr.PlainPtr_closure:
         const GHC.ForeignPtr.PlainPtr_info;
 },
 GHC.ForeignPtr.PlainPtr_entry() //  [R2]
         { info_tbl: [(c7MQQ,
                       label: GHC.ForeignPtr.PlainPtr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MQQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MQU; else goto c7MQT;
       c7MQU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MQT: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.721011936 UTC

[section ""data" . GHC.ForeignPtr.NoFinalizers_closure" {
     GHC.ForeignPtr.NoFinalizers_closure:
         const GHC.ForeignPtr.NoFinalizers_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.723243667 UTC

[section ""data" . GHC.ForeignPtr.CFinalizers_closure" {
     GHC.ForeignPtr.CFinalizers_closure:
         const GHC.ForeignPtr.CFinalizers_info;
 },
 GHC.ForeignPtr.CFinalizers_entry() //  [R2]
         { info_tbl: [(c7MR7,
                       label: GHC.ForeignPtr.CFinalizers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MR7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MRb; else goto c7MRa;
       c7MRb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.CFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MRa: // global
           I64[Hp - 8] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.727394114 UTC

[section ""data" . GHC.ForeignPtr.HaskellFinalizers_closure" {
     GHC.ForeignPtr.HaskellFinalizers_closure:
         const GHC.ForeignPtr.HaskellFinalizers_info;
 },
 GHC.ForeignPtr.HaskellFinalizers_entry() //  [R2]
         { info_tbl: [(c7MRn,
                       label: GHC.ForeignPtr.HaskellFinalizers_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MRn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MRr; else goto c7MRq;
       c7MRr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.HaskellFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MRq: // global
           I64[Hp - 8] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.732314959 UTC

[section ""data" . GHC.ForeignPtr.ForeignPtr_closure" {
     GHC.ForeignPtr.ForeignPtr_closure:
         const GHC.ForeignPtr.ForeignPtr_info;
 },
 GHC.ForeignPtr.ForeignPtr_entry() //  [R2, R3]
         { info_tbl: [(c7MRD,
                       label: GHC.ForeignPtr.ForeignPtr_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MRD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MRH; else goto c7MRG;
       c7MRH: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.ForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MRG: // global
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.737983415 UTC

[GHC.ForeignPtr.MyWeak_con_entry() //  [R1]
         { info_tbl: [(c7MRO,
                       label: GHC.ForeignPtr.MyWeak_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,121,87,101,97,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MRO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.742970359 UTC

[GHC.ForeignPtr.PlainForeignPtr_con_entry() //  [R1]
         { info_tbl: [(c7MRV,
                       label: GHC.ForeignPtr.PlainForeignPtr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MRV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.747611179 UTC

[GHC.ForeignPtr.MallocPtr_con_entry() //  [R1]
         { info_tbl: [(c7MS2,
                       label: GHC.ForeignPtr.MallocPtr_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,97,108,108,111,99,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MS2: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.751970522 UTC

[GHC.ForeignPtr.PlainPtr_con_entry() //  [R1]
         { info_tbl: [(c7MS9,
                       label: GHC.ForeignPtr.PlainPtr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MS9: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.756782204 UTC

[GHC.ForeignPtr.NoFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7MSg,
                       label: GHC.ForeignPtr.NoFinalizers_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,78,111,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MSg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.762142993 UTC

[GHC.ForeignPtr.CFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7MSn,
                       label: GHC.ForeignPtr.CFinalizers_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,67,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MSn: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.766676162 UTC

[GHC.ForeignPtr.HaskellFinalizers_con_entry() //  [R1]
         { info_tbl: [(c7MSu,
                       label: GHC.ForeignPtr.HaskellFinalizers_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MSu: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.770013787 UTC

[GHC.ForeignPtr.ForeignPtr_con_entry() //  [R1]
         { info_tbl: [(c7MSB,
                       label: GHC.ForeignPtr.ForeignPtr_con_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,70,111,114,101,105,103,110,80,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7MSB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:53.773770274 UTC

[section ""relreadonly" . S7M7f_srt" {
     S7M7f_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r7Kb5_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ForeignPtr.mallocForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
         const GHC.ForeignPtr.$fShowForeignPtr1_closure;
         const GHC.ForeignPtr.noMixingError_closure;
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const lvl22_r7Kbz_closure;
         const GHC.ForeignPtr.mallocForeignPtr1_closure;
         const GHC.ForeignPtr.mallocForeignPtr3_closure;
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
         const GHC.ForeignPtr.$wnewConcForeignPtr_closure;
         const GHC.ForeignPtr.newConcForeignPtr1_closure;
 }]

