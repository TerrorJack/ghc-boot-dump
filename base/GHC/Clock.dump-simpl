
==================== Tidy Core ====================
2018-03-16 15:59:46.775389462 UTC

Result size of Tidy Core
  = {terms: 41, types: 69, coercions: 6, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Clock.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Clock.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Clock.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Clock.$trModule3 = GHC.Types.TrNameS GHC.Clock.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Clock.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Clock.$trModule2 = "GHC.Clock"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Clock.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Clock.$trModule1 = GHC.Types.TrNameS GHC.Clock.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Clock.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Clock.$trModule
  = GHC.Types.Module GHC.Clock.$trModule3 GHC.Clock.$trModule1

-- RHS size: {terms: 9, types: 20, coercions: 0, joins: 0/0}
getMonotonicTimeNSec1_r4RZ9
  :: State# RealWorld -> (# State# RealWorld, Word64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []]
getMonotonicTimeNSec1_r4RZ9
  = \ (ds_d4RXT :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Word# #)}_d4RXU
             ds_d4RXT
      of
      { (# ds1_d4RXS, ds2_d4RXR #) ->
      (# ds1_d4RXS, GHC.Word.W64# ds2_d4RXR #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getMonotonicTimeNSec :: IO Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (ds_X4RY4 [Occ=Once] :: State# RealWorld) ->
                  case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Word# #)}_d4RXU
                         ds_X4RY4
                  of
                  { (# ds1_d4RXS [Occ=Once], ds2_d4RXR [Occ=Once] #) ->
                  (# ds1_d4RXS, GHC.Word.W64# ds2_d4RXR #)
                  })
               `cast` (Sym (GHC.Types.N:IO[0] <Word64>_R)
                       :: (State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                          ~R# (IO Word64 :: *))}]
getMonotonicTimeNSec
  = getMonotonicTimeNSec1_r4RZ9
    `cast` (Sym (GHC.Types.N:IO[0] <Word64>_R)
            :: (State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
               ~R# (IO Word64 :: *))

-- RHS size: {terms: 12, types: 20, coercions: 0, joins: 0/0}
GHC.Clock.getMonotonicTime1
  :: State# RealWorld -> (# State# RealWorld, Double #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i4DEM [Occ=Once] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Word# #)}_d4RXU
                        s_i4DEM
                 of
                 { (# ds_d4RXS [Occ=Once], ds1_d4RXR [Occ=Once] #) ->
                 (# ds_d4RXS, GHC.Types.D# (/## (word2Double# ds1_d4RXR) 1.0e9##) #)
                 }}]
GHC.Clock.getMonotonicTime1
  = \ (s_i4DEM :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Word# #)}_d4RXU
             s_i4DEM
      of
      { (# ds_d4RXS, ds1_d4RXR #) ->
      (# ds_d4RXS, GHC.Types.D# (/## (word2Double# ds1_d4RXR) 1.0e9##) #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getMonotonicTime :: IO Double
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Clock.getMonotonicTime1
               `cast` (Sym (GHC.Types.N:IO[0] <Double>_R)
                       :: (State# RealWorld -> (# State# RealWorld, Double #) :: *)
                          ~R# (IO Double :: *))}]
getMonotonicTime
  = GHC.Clock.getMonotonicTime1
    `cast` (Sym (GHC.Types.N:IO[0] <Double>_R)
            :: (State# RealWorld -> (# State# RealWorld, Double #) :: *)
               ~R# (IO Double :: *))


