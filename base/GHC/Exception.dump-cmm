
==================== Output Cmm ====================
2018-03-16 16:02:42.125194117 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:42.12638371 UTC

[section ""data" . GHC.Exception.$p1Exception_closure" {
     GHC.Exception.$p1Exception_closure:
         const GHC.Exception.$p1Exception_info;
 },
 GHC.Exception.$p1Exception_entry() //  [R2]
         { info_tbl: [(c7tfJ,
                       label: GHC.Exception.$p1Exception_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tfJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tfK; else goto c7tfL;
       c7tfK: // global
           R2 = R2;
           R1 = GHC.Exception.$p1Exception_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tfL: // global
           I64[Sp - 8] = block_c7tfG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tfP; else goto c7tfH;
       u7tfP: // global
           call _c7tfG(R1) args: 0, res: 0, upd: 0;
       c7tfH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tfG() //  [R1]
         { info_tbl: [(c7tfG,
                       label: block_c7tfG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tfG: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.127662158 UTC

[section ""data" . GHC.Exception.$p2Exception_closure" {
     GHC.Exception.$p2Exception_closure:
         const GHC.Exception.$p2Exception_info;
 },
 GHC.Exception.$p2Exception_entry() //  [R2]
         { info_tbl: [(c7tfX,
                       label: GHC.Exception.$p2Exception_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tfX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tfY; else goto c7tfZ;
       c7tfY: // global
           R2 = R2;
           R1 = GHC.Exception.$p2Exception_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tfZ: // global
           I64[Sp - 8] = block_c7tfU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tg3; else goto c7tfV;
       u7tg3: // global
           call _c7tfU(R1) args: 0, res: 0, upd: 0;
       c7tfV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tfU() //  [R1]
         { info_tbl: [(c7tfU,
                       label: block_c7tfU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tfU: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.128881509 UTC

[section ""data" . GHC.Exception.toException_closure" {
     GHC.Exception.toException_closure:
         const GHC.Exception.toException_info;
 },
 GHC.Exception.toException_entry() //  [R2]
         { info_tbl: [(c7tgb,
                       label: GHC.Exception.toException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tgb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tgc; else goto c7tgd;
       c7tgc: // global
           R2 = R2;
           R1 = GHC.Exception.toException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tgd: // global
           I64[Sp - 8] = block_c7tg8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tgh; else goto c7tg9;
       u7tgh: // global
           call _c7tg8(R1) args: 0, res: 0, upd: 0;
       c7tg9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tg8() //  [R1]
         { info_tbl: [(c7tg8,
                       label: block_c7tg8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tg8: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.130155328 UTC

[section ""data" . GHC.Exception.fromException_closure" {
     GHC.Exception.fromException_closure:
         const GHC.Exception.fromException_info;
 },
 GHC.Exception.fromException_entry() //  [R2]
         { info_tbl: [(c7tgp,
                       label: GHC.Exception.fromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tgp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tgq; else goto c7tgr;
       c7tgq: // global
           R2 = R2;
           R1 = GHC.Exception.fromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tgr: // global
           I64[Sp - 8] = block_c7tgm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tgv; else goto c7tgn;
       u7tgv: // global
           call _c7tgm(R1) args: 0, res: 0, upd: 0;
       c7tgn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tgm() //  [R1]
         { info_tbl: [(c7tgm,
                       label: block_c7tgm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tgm: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.131352116 UTC

[section ""data" . GHC.Exception.displayException_closure" {
     GHC.Exception.displayException_closure:
         const GHC.Exception.displayException_info;
 },
 GHC.Exception.displayException_entry() //  [R2]
         { info_tbl: [(c7tgD,
                       label: GHC.Exception.displayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tgD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tgE; else goto c7tgF;
       c7tgE: // global
           R2 = R2;
           R1 = GHC.Exception.displayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tgF: // global
           I64[Sp - 8] = block_c7tgA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tgJ; else goto c7tgB;
       u7tgJ: // global
           call _c7tgA(R1) args: 0, res: 0, upd: 0;
       c7tgB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tgA() //  [R1]
         { info_tbl: [(c7tgA,
                       label: block_c7tgA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tgA: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.132666241 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshowsPrec_closure" {
     GHC.Exception.$fShowSomeException_$cshowsPrec_closure:
         const GHC.Exception.$fShowSomeException_$cshowsPrec_info;
 },
 GHC.Exception.$fShowSomeException_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7tgR,
                       label: GHC.Exception.$fShowSomeException_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tgR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tgV; else goto c7tgW;
       c7tgV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tgW: // global
           I64[Sp - 16] = block_c7tgO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7th2; else goto c7tgP;
       u7th2: // global
           call _c7tgO(R1) args: 0, res: 0, upd: 0;
       c7tgP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tgO() //  [R1]
         { info_tbl: [(c7tgO,
                       label: block_c7tgO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tgO: // global
           I64[Sp - 8] = block_c7tgU_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tgU() //  [R1]
         { info_tbl: [(c7tgU,
                       label: block_c7tgU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tgU: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _s7t9x::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s7t9x::P64;
           call GHC.Show.showsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.133991202 UTC

[section ""data" . GHC.Exception.$fExceptionArithException1_closure" {
     GHC.Exception.$fExceptionArithException1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.134853418 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshow_closure" {
     GHC.Exception.$fShowSomeException_$cshow_closure:
         const GHC.Exception.$fShowSomeException_$cshow_info;
 },
 GHC.Exception.$fShowSomeException_$cshow_entry() //  [R2]
         { info_tbl: [(c7tha,
                       label: GHC.Exception.$fShowSomeException_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tha: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7the; else goto c7thf;
       c7the: // global
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7thf: // global
           I64[Sp - 8] = block_c7th7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7thl; else goto c7th8;
       u7thl: // global
           call _c7th7(R1) args: 0, res: 0, upd: 0;
       c7th8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7th7() //  [R1]
         { info_tbl: [(c7th7,
                       label: block_c7th7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7th7: // global
           I64[Sp - 8] = block_c7thd_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7thd() //  [R1]
         { info_tbl: [(c7thd,
                       label: block_c7thd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7thd: // global
           R2 = R1;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = GHC.Exception.$fExceptionArithException1_closure+1;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.136323438 UTC

[section ""data" . GHC.Exception.$fShowSomeException1_closure" {
     GHC.Exception.$fShowSomeException1_closure:
         const GHC.Exception.$fShowSomeException1_info;
 },
 GHC.Exception.$fShowSomeException1_entry() //  [R2]
         { info_tbl: [(c7tht,
                       label: GHC.Exception.$fShowSomeException1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tht: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7thx; else goto c7thy;
       c7thx: // global
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7thy: // global
           I64[Sp - 8] = block_c7thq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7thE; else goto c7thr;
       u7thE: // global
           call _c7thq(R1) args: 0, res: 0, upd: 0;
       c7thr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7thq() //  [R1]
         { info_tbl: [(c7thq,
                       label: block_c7thq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7thq: // global
           I64[Sp - 8] = block_c7thw_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7thw() //  [R1]
         { info_tbl: [(c7thw,
                       label: block_c7thw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7thw: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Exception.$fExceptionArithException1_closure+1;
           Sp = Sp - 8;
           call GHC.Show.showsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.137689865 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshowList_closure" {
     GHC.Exception.$fShowSomeException_$cshowList_closure:
         const GHC.Exception.$fShowSomeException_$cshowList_info;
 },
 GHC.Exception.$fShowSomeException_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7thJ,
                       label: GHC.Exception.$fShowSomeException_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7thJ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$fShowSomeException1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.138499526 UTC

[section ""data" . GHC.Exception.$fShowSomeException_closure" {
     GHC.Exception.$fShowSomeException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fShowSomeException_$cshowsPrec_closure+2;
         const GHC.Exception.$fShowSomeException_$cshow_closure+1;
         const GHC.Exception.$fShowSomeException_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.139371621 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_$cdisplayException_closure" {
     GHC.Exception.$fExceptionSomeException_$cdisplayException_closure:
         const GHC.Exception.$fExceptionSomeException_$cdisplayException_info;
 },
 GHC.Exception.$fExceptionSomeException_$cdisplayException_entry() //  [R2]
         { info_tbl: [(c7thT,
                       label: GHC.Exception.$fExceptionSomeException_$cdisplayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7thT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7thU; else goto c7thV;
       c7thU: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionSomeException_$cdisplayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7thV: // global
           I64[Sp - 8] = block_c7thQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7thZ; else goto c7thR;
       u7thZ: // global
           call _c7thQ(R1) args: 0, res: 0, upd: 0;
       c7thR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7thQ() //  [R1]
         { info_tbl: [(c7thQ,
                       label: block_c7thQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7thQ: // global
           R2 = P64[R1 + 7];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.displayException_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.140565864 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_$ctoException_closure" {
     GHC.Exception.$fExceptionSomeException_$ctoException_closure:
         const GHC.Exception.$fExceptionSomeException_$ctoException_info;
 },
 GHC.Exception.$fExceptionSomeException_$ctoException_entry() //  [R2]
         { info_tbl: [(c7ti4,
                       label: GHC.Exception.$fExceptionSomeException_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ti4: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.14132329 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall1_closure" {
     GHC.Exception.$fExceptionErrorCall1_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.142494546 UTC

[section ""data" . GHC.Exception.$w$cshowsPrec1_closure" {
     GHC.Exception.$w$cshowsPrec1_closure:
         const GHC.Exception.$w$cshowsPrec1_info;
 },
 sat_s7t9W_entry() //  [R1]
         { info_tbl: [(c7til,
                       label: sat_s7t9W_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7til: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tim; else goto c7tin;
       c7tim: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tin: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7tis,
                       label: GHC.Exception.$w$cshowsPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tis: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tit; else goto c7tiu;
       c7tit: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tiu: // global
           I64[Sp - 24] = block_c7tib_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7tiB; else goto c7tic;
       u7tiB: // global
           call _c7tib(R1) args: 0, res: 0, upd: 0;
       c7tic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tib() //  [R1]
         { info_tbl: [(c7tib,
                       label: block_c7tib_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tib: // global
           _s7t9Q::P64 = P64[Sp + 8];
           _s7t9S::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7tip; else goto c7tiq;
       c7tip: // global
           R3 = _s7t9S::P64;
           R2 = _s7t9Q::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7tiq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7tiA; else goto c7tiz;
       c7tiA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7tiz: // global
           I64[Hp - 48] = sat_s7t9W_info;
           P64[Hp - 32] = _s7t9S::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionErrorCall1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s7t9Q::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.144336618 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure" {
     GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure:
         const GHC.Exception.$fExceptionErrorCall_$cshowsPrec_info;
 },
 GHC.Exception.$fExceptionErrorCall_$cshowsPrec_entry() //  [R2, R3,
                                                             R4]
         { info_tbl: [(c7tiJ,
                       label: GHC.Exception.$fExceptionErrorCall_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tiJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tiK; else goto c7tiL;
       c7tiK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tiL: // global
           I64[Sp - 16] = block_c7tiG_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tiP; else goto c7tiH;
       u7tiP: // global
           call _c7tiG(R1) args: 0, res: 0, upd: 0;
       c7tiH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tiG() //  [R1]
         { info_tbl: [(c7tiG,
                       label: block_c7tiG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tiG: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.145681765 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cshow_closure" {
     GHC.Exception.$fExceptionErrorCall_$cshow_closure:
         const GHC.Exception.$fExceptionErrorCall_$cshow_info;
 },
 GHC.Exception.$fExceptionErrorCall_$cshow_entry() //  [R2]
         { info_tbl: [(c7tiX,
                       label: GHC.Exception.$fExceptionErrorCall_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tiX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tiY; else goto c7tiZ;
       c7tiY: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tiZ: // global
           I64[Sp - 8] = block_c7tiU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tj3; else goto c7tiV;
       u7tj3: // global
           call _c7tiU(R1) args: 0, res: 0, upd: 0;
       c7tiV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tiU() //  [R1]
         { info_tbl: [(c7tiU,
                       label: block_c7tiU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tiU: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.146988141 UTC

[section ""data" . GHC.Exception.$fShowErrorCall1_closure" {
     GHC.Exception.$fShowErrorCall1_closure:
         const GHC.Exception.$fShowErrorCall1_info;
 },
 GHC.Exception.$fShowErrorCall1_entry() //  [R2, R3]
         { info_tbl: [(c7tjb,
                       label: GHC.Exception.$fShowErrorCall1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tjb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tjc; else goto c7tjd;
       c7tjc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fShowErrorCall1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tjd: // global
           I64[Sp - 16] = block_c7tj8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tjh; else goto c7tj9;
       u7tjh: // global
           call _c7tj8(R1) args: 0, res: 0, upd: 0;
       c7tj9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tj8() //  [R1]
         { info_tbl: [(c7tj8,
                       label: block_c7tj8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tj8: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.148215442 UTC

[section ""data" . GHC.Exception.$fShowErrorCall_$cshowList_closure" {
     GHC.Exception.$fShowErrorCall_$cshowList_closure:
         const GHC.Exception.$fShowErrorCall_$cshowList_info;
 },
 GHC.Exception.$fShowErrorCall_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7tjm,
                       label: GHC.Exception.$fShowErrorCall_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tjm: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$fShowErrorCall1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.149023844 UTC

[section ""data" . GHC.Exception.$fShowErrorCall_closure" {
     GHC.Exception.$fShowErrorCall_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure+3;
         const GHC.Exception.$fExceptionErrorCall_$cshow_closure+1;
         const GHC.Exception.$fShowErrorCall_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.149673413 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException13_bytes" {
     GHC.Exception.$fExceptionArithException13_bytes:
         I8[] [97,114,105,116,104,109,101,116,105,99,32,111,118,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.150472731 UTC

[section ""data" . GHC.Exception.$fExceptionArithException12_closure" {
     GHC.Exception.$fExceptionArithException12_closure:
         const GHC.Exception.$fExceptionArithException12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException12_entry() //  [R1]
         { info_tbl: [(c7tjv,
                       label: GHC.Exception.$fExceptionArithException12_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tjv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tjw; else goto c7tjx;
       c7tjw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tjx: // global
           (_c7tjs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tjs::I64 == 0) goto c7tju; else goto c7tjt;
       c7tju: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tjt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tjs::I64;
           R2 = GHC.Exception.$fExceptionArithException13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.151473964 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException11_bytes" {
     GHC.Exception.$fExceptionArithException11_bytes:
         I8[] [97,114,105,116,104,109,101,116,105,99,32,117,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.152241692 UTC

[section ""data" . GHC.Exception.$fExceptionArithException10_closure" {
     GHC.Exception.$fExceptionArithException10_closure:
         const GHC.Exception.$fExceptionArithException10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException10_entry() //  [R1]
         { info_tbl: [(c7tjE,
                       label: GHC.Exception.$fExceptionArithException10_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tjE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tjF; else goto c7tjG;
       c7tjF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tjG: // global
           (_c7tjB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tjB::I64 == 0) goto c7tjD; else goto c7tjC;
       c7tjD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tjC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tjB::I64;
           R2 = GHC.Exception.$fExceptionArithException11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.153186518 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException9_bytes" {
     GHC.Exception.$fExceptionArithException9_bytes:
         I8[] [108,111,115,115,32,111,102,32,112,114,101,99,105,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.154013941 UTC

[section ""data" . GHC.Exception.$fExceptionArithException8_closure" {
     GHC.Exception.$fExceptionArithException8_closure:
         const GHC.Exception.$fExceptionArithException8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException8_entry() //  [R1]
         { info_tbl: [(c7tjN,
                       label: GHC.Exception.$fExceptionArithException8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tjN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tjO; else goto c7tjP;
       c7tjO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tjP: // global
           (_c7tjK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tjK::I64 == 0) goto c7tjM; else goto c7tjL;
       c7tjM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tjL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tjK::I64;
           R2 = GHC.Exception.$fExceptionArithException9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.154927972 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException7_bytes" {
     GHC.Exception.$fExceptionArithException7_bytes:
         I8[] [100,105,118,105,100,101,32,98,121,32,122,101,114,111]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.155708503 UTC

[section ""data" . GHC.Exception.$fExceptionArithException6_closure" {
     GHC.Exception.$fExceptionArithException6_closure:
         const GHC.Exception.$fExceptionArithException6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException6_entry() //  [R1]
         { info_tbl: [(c7tjW,
                       label: GHC.Exception.$fExceptionArithException6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tjW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tjX; else goto c7tjY;
       c7tjX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tjY: // global
           (_c7tjT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tjT::I64 == 0) goto c7tjV; else goto c7tjU;
       c7tjV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tjU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tjT::I64;
           R2 = GHC.Exception.$fExceptionArithException7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.15666321 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException5_bytes" {
     GHC.Exception.$fExceptionArithException5_bytes:
         I8[] [100,101,110,111,114,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.157460595 UTC

[section ""data" . GHC.Exception.$fExceptionArithException4_closure" {
     GHC.Exception.$fExceptionArithException4_closure:
         const GHC.Exception.$fExceptionArithException4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException4_entry() //  [R1]
         { info_tbl: [(c7tk5,
                       label: GHC.Exception.$fExceptionArithException4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tk5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tk6; else goto c7tk7;
       c7tk6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tk7: // global
           (_c7tk2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tk2::I64 == 0) goto c7tk4; else goto c7tk3;
       c7tk4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tk3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tk2::I64;
           R2 = GHC.Exception.$fExceptionArithException5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.158382625 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException3_bytes" {
     GHC.Exception.$fExceptionArithException3_bytes:
         I8[] [82,97,116,105,111,32,104,97,115,32,122,101,114,111,32,100,101,110,111,109,105,110,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.159132587 UTC

[section ""data" . GHC.Exception.$fExceptionArithException2_closure" {
     GHC.Exception.$fExceptionArithException2_closure:
         const GHC.Exception.$fExceptionArithException2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException2_entry() //  [R1]
         { info_tbl: [(c7tke,
                       label: GHC.Exception.$fExceptionArithException2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tke: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tkf; else goto c7tkg;
       c7tkf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tkg: // global
           (_c7tkb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tkb::I64 == 0) goto c7tkd; else goto c7tkc;
       c7tkd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tkc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tkb::I64;
           R2 = GHC.Exception.$fExceptionArithException3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.160576254 UTC

[section ""data" . GHC.Exception.$w$cshowsPrec_closure" {
     GHC.Exception.$w$cshowsPrec_closure:
         const GHC.Exception.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Exception.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7tkw,
                       label: GHC.Exception.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tkw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tkx; else goto c7tky;
       c7tkx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tky: // global
           I64[Sp - 16] = block_c7tkl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tkR; else goto c7tkm;
       u7tkR: // global
           call _c7tkl(R1) args: 0, res: 0, upd: 0;
       c7tkm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tkl() //  [R1]
         { info_tbl: [(c7tkl,
                       label: block_c7tkl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tkl: // global
           _s7tag::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tkp;
               case 2 : goto c7tkq;
               case 3 : goto c7tkr;
               case 4 : goto c7tks;
               case 5 : goto c7tkt;
               case 6 : goto c7tku;
           }
       c7tku: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7tkt: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7tks: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7tkr: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException8_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7tkq: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7tkp: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException12_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.162479441 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cshowsPrec_closure" {
     GHC.Exception.$fExceptionArithException_$cshowsPrec_closure:
         const GHC.Exception.$fExceptionArithException_$cshowsPrec_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cshowsPrec_entry() //  [R3,
                                                                  R4]
         { info_tbl: [(c7tkX,
                       label: GHC.Exception.$fExceptionArithException_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tkX: // global
           _s7taj::P64 = R3;
           R3 = R4;
           R2 = _s7taj::P64;
           call GHC.Exception.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.163422484 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cshow_closure" {
     GHC.Exception.$fExceptionArithException_$cshow_closure:
         const GHC.Exception.$fExceptionArithException_$cshow_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cshow_entry() //  [R2]
         { info_tbl: [(c7tl4,
                       label: GHC.Exception.$fExceptionArithException_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tl4: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Exception.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.1643296 UTC

[section ""data" . GHC.Exception.$fShowArithException_$cshowList_closure" {
     GHC.Exception.$fShowArithException_$cshowList_closure:
         const GHC.Exception.$fShowArithException_$cshowList_info;
         const 0;
 },
 GHC.Exception.$fShowArithException_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7tlb,
                       label: GHC.Exception.$fShowArithException_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tlb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.165097916 UTC

[section ""data" . GHC.Exception.$fShowArithException_closure" {
     GHC.Exception.$fShowArithException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fExceptionArithException_$cshowsPrec_closure+3;
         const GHC.Exception.$fExceptionArithException_$cshow_closure+1;
         const GHC.Exception.$fShowArithException_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.166846095 UTC

[section ""data" . GHC.Exception.$fEqArithException_$c==_closure" {
     GHC.Exception.$fEqArithException_$c==_closure:
         const GHC.Exception.$fEqArithException_$c==_info;
 },
 GHC.Exception.$fEqArithException_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7tlt,
                       label: GHC.Exception.$fEqArithException_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tlt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tlu; else goto c7tlv;
       c7tlu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqArithException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tlv: // global
           I64[Sp - 16] = block_c7tli_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tnm; else goto c7tlj;
       u7tnm: // global
           call _c7tli(R1) args: 0, res: 0, upd: 0;
       c7tlj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tli() //  [R1]
         { info_tbl: [(c7tli,
                       label: block_c7tli_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tli: // global
           _s7tap::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tlm;
               case 2 : goto c7tln;
               case 3 : goto c7tlo;
               case 4 : goto c7tlp;
               case 5 : goto c7tlq;
               case 6 : goto c7tlr;
           }
       c7tlr: // global
           I64[Sp + 8] = block_c7tmL_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tnl; else goto c7tmN;
       u7tnl: // global
           call _c7tmL(R1) args: 0, res: 0, upd: 0;
       c7tmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tlq: // global
           I64[Sp + 8] = block_c7tmw_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tnk; else goto c7tmy;
       u7tnk: // global
           call _c7tmw(R1) args: 0, res: 0, upd: 0;
       c7tmy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tlp: // global
           I64[Sp + 8] = block_c7tmh_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tnj; else goto c7tmj;
       u7tnj: // global
           call _c7tmh(R1) args: 0, res: 0, upd: 0;
       c7tmj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tlo: // global
           I64[Sp + 8] = block_c7tm2_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tni; else goto c7tm4;
       u7tni: // global
           call _c7tm2(R1) args: 0, res: 0, upd: 0;
       c7tm4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tln: // global
           I64[Sp + 8] = block_c7tlN_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tnh; else goto c7tlP;
       u7tnh: // global
           call _c7tlN(R1) args: 0, res: 0, upd: 0;
       c7tlP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tlm: // global
           I64[Sp + 8] = block_c7tly_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tng; else goto c7tlA;
       u7tng: // global
           call _c7tly(R1) args: 0, res: 0, upd: 0;
       c7tlA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tmL() //  [R1]
         { info_tbl: [(c7tmL,
                       label: block_c7tmL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tmL: // global
           if (R1 & 7 == 6) goto u7tn4; else goto u7tn5;
       u7tn4: // global
           Sp = Sp + 8;
           call _c7tmX() args: 0, res: 0, upd: 0;
       u7tn5: // global
           Sp = Sp + 8;
           call _c7tmT() args: 0, res: 0, upd: 0;
     }
 },
 _c7tmw() //  [R1]
         { info_tbl: [(c7tmw,
                       label: block_c7tmw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tmw: // global
           if (R1 & 7 == 5) goto u7tn6; else goto u7tn7;
       u7tn6: // global
           Sp = Sp + 8;
           call _c7tmX() args: 0, res: 0, upd: 0;
       u7tn7: // global
           Sp = Sp + 8;
           call _c7tmT() args: 0, res: 0, upd: 0;
     }
 },
 _c7tmh() //  [R1]
         { info_tbl: [(c7tmh,
                       label: block_c7tmh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tmh: // global
           if (R1 & 7 == 4) goto u7tn8; else goto u7tn9;
       u7tn8: // global
           Sp = Sp + 8;
           call _c7tmX() args: 0, res: 0, upd: 0;
       u7tn9: // global
           Sp = Sp + 8;
           call _c7tmT() args: 0, res: 0, upd: 0;
     }
 },
 _c7tm2() //  [R1]
         { info_tbl: [(c7tm2,
                       label: block_c7tm2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tm2: // global
           if (R1 & 7 == 3) goto u7tna; else goto u7tnb;
       u7tna: // global
           Sp = Sp + 8;
           call _c7tmX() args: 0, res: 0, upd: 0;
       u7tnb: // global
           Sp = Sp + 8;
           call _c7tmT() args: 0, res: 0, upd: 0;
     }
 },
 _c7tlN() //  [R1]
         { info_tbl: [(c7tlN,
                       label: block_c7tlN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tlN: // global
           if (R1 & 7 == 2) goto u7tnc; else goto u7tnd;
       u7tnc: // global
           Sp = Sp + 8;
           call _c7tmX() args: 0, res: 0, upd: 0;
       u7tnd: // global
           Sp = Sp + 8;
           call _c7tmT() args: 0, res: 0, upd: 0;
     }
 },
 _c7tly() //  [R1]
         { info_tbl: [(c7tly,
                       label: block_c7tly_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tly: // global
           if (R1 & 7 == 1) goto u7tne; else goto u7tnf;
       u7tne: // global
           Sp = Sp + 8;
           call _c7tmX() args: 0, res: 0, upd: 0;
       u7tnf: // global
           Sp = Sp + 8;
           call _c7tmT() args: 0, res: 0, upd: 0;
     }
 },
 _c7tmX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tmX: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tmT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tmT: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.171013382 UTC

[section ""data" . GHC.Exception.$fEqArithException_$c/=_closure" {
     GHC.Exception.$fEqArithException_$c/=_closure:
         const GHC.Exception.$fEqArithException_$c/=_info;
 },
 GHC.Exception.$fEqArithException_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7tnO,
                       label: GHC.Exception.$fEqArithException_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tnO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tnP; else goto c7tnQ;
       c7tnP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqArithException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tnQ: // global
           I64[Sp - 16] = block_c7tnD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tpH; else goto c7tnE;
       u7tpH: // global
           call _c7tnD(R1) args: 0, res: 0, upd: 0;
       c7tnE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tnD() //  [R1]
         { info_tbl: [(c7tnD,
                       label: block_c7tnD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tnD: // global
           _s7tay::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tnH;
               case 2 : goto c7tnI;
               case 3 : goto c7tnJ;
               case 4 : goto c7tnK;
               case 5 : goto c7tnL;
               case 6 : goto c7tnM;
           }
       c7tnM: // global
           I64[Sp + 8] = block_c7tp6_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tpG; else goto c7tp8;
       u7tpG: // global
           call _c7tp6(R1) args: 0, res: 0, upd: 0;
       c7tp8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tnL: // global
           I64[Sp + 8] = block_c7toR_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tpF; else goto c7toT;
       u7tpF: // global
           call _c7toR(R1) args: 0, res: 0, upd: 0;
       c7toT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tnK: // global
           I64[Sp + 8] = block_c7toC_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tpE; else goto c7toE;
       u7tpE: // global
           call _c7toC(R1) args: 0, res: 0, upd: 0;
       c7toE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tnJ: // global
           I64[Sp + 8] = block_c7ton_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tpD; else goto c7top;
       u7tpD: // global
           call _c7ton(R1) args: 0, res: 0, upd: 0;
       c7top: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tnI: // global
           I64[Sp + 8] = block_c7to8_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tpC; else goto c7toa;
       u7tpC: // global
           call _c7to8(R1) args: 0, res: 0, upd: 0;
       c7toa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tnH: // global
           I64[Sp + 8] = block_c7tnT_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tpB; else goto c7tnV;
       u7tpB: // global
           call _c7tnT(R1) args: 0, res: 0, upd: 0;
       c7tnV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tp6() //  [R1]
         { info_tbl: [(c7tp6,
                       label: block_c7tp6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tp6: // global
           if (R1 & 7 == 6) goto u7tpp; else goto u7tpq;
       u7tpp: // global
           Sp = Sp + 8;
           call _c7tpi() args: 0, res: 0, upd: 0;
       u7tpq: // global
           Sp = Sp + 8;
           call _c7tpe() args: 0, res: 0, upd: 0;
     }
 },
 _c7toR() //  [R1]
         { info_tbl: [(c7toR,
                       label: block_c7toR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7toR: // global
           if (R1 & 7 == 5) goto u7tpr; else goto u7tps;
       u7tpr: // global
           Sp = Sp + 8;
           call _c7tpi() args: 0, res: 0, upd: 0;
       u7tps: // global
           Sp = Sp + 8;
           call _c7tpe() args: 0, res: 0, upd: 0;
     }
 },
 _c7toC() //  [R1]
         { info_tbl: [(c7toC,
                       label: block_c7toC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7toC: // global
           if (R1 & 7 == 4) goto u7tpt; else goto u7tpu;
       u7tpt: // global
           Sp = Sp + 8;
           call _c7tpi() args: 0, res: 0, upd: 0;
       u7tpu: // global
           Sp = Sp + 8;
           call _c7tpe() args: 0, res: 0, upd: 0;
     }
 },
 _c7ton() //  [R1]
         { info_tbl: [(c7ton,
                       label: block_c7ton_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ton: // global
           if (R1 & 7 == 3) goto u7tpv; else goto u7tpw;
       u7tpv: // global
           Sp = Sp + 8;
           call _c7tpi() args: 0, res: 0, upd: 0;
       u7tpw: // global
           Sp = Sp + 8;
           call _c7tpe() args: 0, res: 0, upd: 0;
     }
 },
 _c7to8() //  [R1]
         { info_tbl: [(c7to8,
                       label: block_c7to8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7to8: // global
           if (R1 & 7 == 2) goto u7tpx; else goto u7tpy;
       u7tpx: // global
           Sp = Sp + 8;
           call _c7tpi() args: 0, res: 0, upd: 0;
       u7tpy: // global
           Sp = Sp + 8;
           call _c7tpe() args: 0, res: 0, upd: 0;
     }
 },
 _c7tnT() //  [R1]
         { info_tbl: [(c7tnT,
                       label: block_c7tnT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tnT: // global
           if (R1 & 7 == 1) goto u7tpz; else goto u7tpA;
       u7tpz: // global
           Sp = Sp + 8;
           call _c7tpi() args: 0, res: 0, upd: 0;
       u7tpA: // global
           Sp = Sp + 8;
           call _c7tpe() args: 0, res: 0, upd: 0;
     }
 },
 _c7tpi() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tpi: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tpe() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tpe: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.175737271 UTC

[section ""data" . GHC.Exception.$fEqArithException_closure" {
     GHC.Exception.$fEqArithException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exception.$fEqArithException_$c==_closure+2;
         const GHC.Exception.$fEqArithException_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.17670992 UTC

[section ""data" . GHC.Exception.$w$c<_closure" {
     GHC.Exception.$w$c<_closure:
         const GHC.Exception.$w$c<_info;
 },
 GHC.Exception.$w$c<_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7tq5,
                       label: GHC.Exception.$w$c<_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tq5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tq6; else goto c7tq7;
       c7tq6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tq7: // global
           I64[Sp - 24] = block_c7tpY_info;
           _s7taH::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7taH::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tpY() //  [R1]
         { info_tbl: [(c7tpY,
                       label: block_c7tpY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tpY: // global
           _c7tq4::P64 = R1 & 7;
           if (_c7tq4::P64 < 3) goto u7tqh; else goto c7tq3;
       u7tqh: // global
           if (_c7tq4::P64 < 2) goto c7tq1; else goto c7tq2;
       c7tq1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tq2: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$s$c<1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c7tq3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.178279465 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c<_closure" {
     GHC.Exception.$fOrdErrorCall_$c<_closure:
         const GHC.Exception.$fOrdErrorCall_$c<_info;
 },
 GHC.Exception.$fOrdErrorCall_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7tqp,
                       label: GHC.Exception.$fOrdErrorCall_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tqp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tqt; else goto c7tqu;
       c7tqt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tqu: // global
           I64[Sp - 16] = block_c7tqm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tqC; else goto c7tqn;
       u7tqC: // global
           call _c7tqm(R1) args: 0, res: 0, upd: 0;
       c7tqn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tqm() //  [R1]
         { info_tbl: [(c7tqm,
                       label: block_c7tqm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tqm: // global
           I64[Sp - 8] = block_c7tqs_info;
           _s7taO::P64 = P64[R1 + 7];
           _s7taP::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7taP::P64;
           P64[Sp + 8] = _s7taO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tqB; else goto c7tqw;
       u7tqB: // global
           call _c7tqs(R1) args: 0, res: 0, upd: 0;
       c7tqw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tqs() //  [R1]
         { info_tbl: [(c7tqs,
                       label: block_c7tqs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tqs: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c<_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.179968105 UTC

[section ""data" . GHC.Exception.$w$ccompare_closure" {
     GHC.Exception.$w$ccompare_closure:
         const GHC.Exception.$w$ccompare_info;
 },
 GHC.Exception.$w$ccompare_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7tqO,
                       label: GHC.Exception.$w$ccompare_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tqO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tqP; else goto c7tqQ;
       c7tqP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tqQ: // global
           I64[Sp - 24] = block_c7tqH_info;
           _s7taU::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7taU::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tqH() //  [R1]
         { info_tbl: [(c7tqH,
                       label: block_c7tqH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tqH: // global
           _c7tqN::P64 = R1 & 7;
           if (_c7tqN::P64 < 3) goto u7tr0; else goto c7tqM;
       u7tr0: // global
           if (_c7tqN::P64 < 2) goto c7tqK; else goto c7tqL;
       c7tqK: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tqL: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c7tqM: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.18153619 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$ccompare_closure" {
     GHC.Exception.$fOrdErrorCall_$ccompare_closure:
         const GHC.Exception.$fOrdErrorCall_$ccompare_info;
 },
 GHC.Exception.$fOrdErrorCall_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7tr8,
                       label: GHC.Exception.$fOrdErrorCall_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tr8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7trc; else goto c7trd;
       c7trc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7trd: // global
           I64[Sp - 16] = block_c7tr5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7trl; else goto c7tr6;
       u7trl: // global
           call _c7tr5(R1) args: 0, res: 0, upd: 0;
       c7tr6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tr5() //  [R1]
         { info_tbl: [(c7tr5,
                       label: block_c7tr5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tr5: // global
           I64[Sp - 8] = block_c7trb_info;
           _s7tb1::P64 = P64[R1 + 7];
           _s7tb2::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tb2::P64;
           P64[Sp + 8] = _s7tb1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7trk; else goto c7trf;
       u7trk: // global
           call _c7trb(R1) args: 0, res: 0, upd: 0;
       c7trf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7trb() //  [R1]
         { info_tbl: [(c7trb,
                       label: block_c7trb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7trb: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$ccompare_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.183223274 UTC

[section ""data" . GHC.Exception.$w$c==_closure" {
     GHC.Exception.$w$c==_closure:
         const GHC.Exception.$w$c==_info;
 },
 GHC.Exception.$w$c==_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7trw,
                       label: GHC.Exception.$w$c==_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7trw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7trx; else goto c7try;
       c7trx: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7try: // global
           I64[Sp - 24] = block_c7trq_info;
           _s7tb7::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7tb7::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7trq() //  [R1]
         { info_tbl: [(c7trq,
                       label: block_c7trq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7trq: // global
           if (R1 & 7 == 1) goto c7trt; else goto c7tru;
       c7trt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tru: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.184651618 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_$c==_closure" {
     GHC.Exception.$fEqErrorCall_$c==_closure:
         const GHC.Exception.$fEqErrorCall_$c==_info;
 },
 GHC.Exception.$fEqErrorCall_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7trM,
                       label: GHC.Exception.$fEqErrorCall_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7trM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7trQ; else goto c7trR;
       c7trQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqErrorCall_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7trR: // global
           I64[Sp - 16] = block_c7trJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7trZ; else goto c7trK;
       u7trZ: // global
           call _c7trJ(R1) args: 0, res: 0, upd: 0;
       c7trK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7trJ() //  [R1]
         { info_tbl: [(c7trJ,
                       label: block_c7trJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7trJ: // global
           I64[Sp - 8] = block_c7trP_info;
           _s7tbe::P64 = P64[R1 + 7];
           _s7tbf::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbf::P64;
           P64[Sp + 8] = _s7tbe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7trY; else goto c7trT;
       u7trY: // global
           call _c7trP(R1) args: 0, res: 0, upd: 0;
       c7trT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7trP() //  [R1]
         { info_tbl: [(c7trP,
                       label: block_c7trP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7trP: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c==_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.186582845 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_$c/=_closure" {
     GHC.Exception.$fEqErrorCall_$c/=_closure:
         const GHC.Exception.$fEqErrorCall_$c/=_info;
 },
 GHC.Exception.$fEqErrorCall_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7ts7,
                       label: GHC.Exception.$fEqErrorCall_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ts7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tsb; else goto c7tsc;
       c7tsb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqErrorCall_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tsc: // global
           I64[Sp - 16] = block_c7ts4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tsK; else goto c7ts5;
       u7tsK: // global
           call _c7ts4(R1) args: 0, res: 0, upd: 0;
       c7ts5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ts4() //  [R1]
         { info_tbl: [(c7ts4,
                       label: block_c7ts4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ts4: // global
           I64[Sp - 8] = block_c7tsa_info;
           _s7tbm::P64 = P64[R1 + 7];
           _s7tbn::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbn::P64;
           P64[Sp + 8] = _s7tbm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tsJ; else goto c7tse;
       u7tsJ: // global
           call _c7tsa(R1) args: 0, res: 0, upd: 0;
       c7tse: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tsa() //  [R1]
         { info_tbl: [(c7tsa,
                       label: block_c7tsa_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tsa: // global
           I64[Sp] = block_c7tsi_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tsi() //  [R1]
         { info_tbl: [(c7tsi,
                       label: block_c7tsi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tsi: // global
           if (R1 & 7 == 1) goto u7tsH; else goto c7tsu;
       u7tsH: // global
           Sp = Sp + 24;
           call _c7tsA() args: 0, res: 0, upd: 0;
       c7tsu: // global
           _s7tbq::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7tss_info;
           R3 = _s7tbq::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tss() //  [R1]
         { info_tbl: [(c7tss,
                       label: block_c7tss_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tss: // global
           if (R1 & 7 == 1) goto u7tsI; else goto c7tsE;
       u7tsI: // global
           Sp = Sp + 8;
           call _c7tsA() args: 0, res: 0, upd: 0;
       c7tsE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tsA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tsA: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.18838443 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_closure" {
     GHC.Exception.$fEqErrorCall_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exception.$fEqErrorCall_$c==_closure+2;
         const GHC.Exception.$fEqErrorCall_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.189510335 UTC

[section ""data" . GHC.Exception.$w$c<=_closure" {
     GHC.Exception.$w$c<=_closure:
         const GHC.Exception.$w$c<=_info;
 },
 GHC.Exception.$w$c<=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7tsY,
                       label: GHC.Exception.$w$c<=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tsY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tsZ; else goto c7tt0;
       c7tsZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tt0: // global
           I64[Sp - 24] = block_c7tsR_info;
           _s7tbu::P64 = R3;
           R3 = R2;
           R2 = R4;
           P64[Sp - 16] = _s7tbu::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tsR() //  [R1]
         { info_tbl: [(c7tsR,
                       label: block_c7tsR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tsR: // global
           _c7tsX::P64 = R1 & 7;
           if (_c7tsX::P64 < 3) goto u7ttm; else goto u7ttn;
       u7ttm: // global
           if (_c7tsX::P64 < 2) goto u7tto; else goto c7tsV;
       u7tto: // global
           Sp = Sp + 24;
           call _c7tth() args: 0, res: 0, upd: 0;
       c7tsV: // global
           _s7tbw::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7tt6_info;
           R3 = P64[Sp + 8];
           R2 = _s7tbw::P64;
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7ttn: // global
           Sp = Sp + 24;
           call _c7tsW() args: 0, res: 0, upd: 0;
     }
 },
 _c7tt6() //  [R1]
         { info_tbl: [(c7tt6,
                       label: block_c7tt6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tt6: // global
           if (R1 & 7 == 1) goto u7ttp; else goto u7ttq;
       u7ttp: // global
           Sp = Sp + 8;
           call _c7tth() args: 0, res: 0, upd: 0;
       u7ttq: // global
           Sp = Sp + 8;
           call _c7tsW() args: 0, res: 0, upd: 0;
     }
 },
 _c7tth() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tth: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tsW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tsW: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.191430788 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c<=_closure" {
     GHC.Exception.$fOrdErrorCall_$c<=_closure:
         const GHC.Exception.$fOrdErrorCall_$c<=_info;
 },
 GHC.Exception.$fOrdErrorCall_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7ttC,
                       label: GHC.Exception.$fOrdErrorCall_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ttC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ttG; else goto c7ttH;
       c7ttG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ttH: // global
           I64[Sp - 16] = block_c7ttz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ttP; else goto c7ttA;
       u7ttP: // global
           call _c7ttz(R1) args: 0, res: 0, upd: 0;
       c7ttA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ttz() //  [R1]
         { info_tbl: [(c7ttz,
                       label: block_c7ttz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ttz: // global
           I64[Sp - 8] = block_c7ttF_info;
           _s7tbC::P64 = P64[R1 + 7];
           _s7tbD::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbD::P64;
           P64[Sp + 8] = _s7tbC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ttO; else goto c7ttJ;
       u7ttO: // global
           call _c7ttF(R1) args: 0, res: 0, upd: 0;
       c7ttJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ttF() //  [R1]
         { info_tbl: [(c7ttF,
                       label: block_c7ttF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ttF: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c<=_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.193959697 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$cmax_closure" {
     GHC.Exception.$fOrdErrorCall_$cmax_closure:
         const GHC.Exception.$fOrdErrorCall_$cmax_info;
 },
 GHC.Exception.$fOrdErrorCall_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7ttX,
                       label: GHC.Exception.$fOrdErrorCall_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ttX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7tu1; else goto c7tu2;
       c7tu1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tu2: // global
           I64[Sp - 16] = block_c7ttU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tuH; else goto c7ttV;
       u7tuH: // global
           call _c7ttU(R1) args: 0, res: 0, upd: 0;
       c7ttV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ttU() //  [R1]
         { info_tbl: [(c7ttU,
                       label: block_c7ttU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ttU: // global
           I64[Sp - 16] = block_c7tu0_info;
           _s7tbJ::P64 = R1;
           _s7tbK::P64 = P64[R1 + 7];
           _s7tbL::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s7tbL::P64;
           P64[Sp] = _s7tbK::P64;
           P64[Sp + 8] = _s7tbJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tuG; else goto c7tu4;
       u7tuG: // global
           call _c7tu0(R1) args: 0, res: 0, upd: 0;
       c7tu4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tu0() //  [R1]
         { info_tbl: [(c7tu0,
                       label: block_c7tu0_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tu0: // global
           I64[Sp - 8] = block_c7tu8_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tu8() //  [R1]
         { info_tbl: [(c7tu8,
                       label: block_c7tu8_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tu8: // global
           _c7tuz::P64 = R1 & 7;
           if (_c7tuz::P64 < 3) goto u7tuB; else goto u7tuC;
       u7tuB: // global
           if (_c7tuz::P64 < 2) goto u7tuD; else goto c7tuk;
       u7tuD: // global
           Sp = Sp + 32;
           call _c7tuu() args: 0, res: 0, upd: 0;
       c7tuk: // global
           _s7tbL::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7tui_info;
           R3 = _s7tbL::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7tuC: // global
           Sp = Sp + 24;
           call _c7tuy() args: 0, res: 0, upd: 0;
     }
 },
 _c7tui() //  [R1]
         { info_tbl: [(c7tui,
                       label: block_c7tui_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tui: // global
           if (R1 & 7 == 1) goto u7tuE; else goto u7tuF;
       u7tuE: // global
           Sp = Sp + 16;
           call _c7tuu() args: 0, res: 0, upd: 0;
       u7tuF: // global
           Sp = Sp + 8;
           call _c7tuy() args: 0, res: 0, upd: 0;
     }
 },
 _c7tuu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tuu: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tuy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tuy: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.19645507 UTC

[section ""data" . GHC.Exception.$w$c>=_closure" {
     GHC.Exception.$w$c>=_closure:
         const GHC.Exception.$w$c>=_info;
 },
 GHC.Exception.$w$c>=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7tuX,
                       label: GHC.Exception.$w$c>=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tuX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tuY; else goto c7tuZ;
       c7tuY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tuZ: // global
           I64[Sp - 24] = block_c7tuQ_info;
           _s7tbS::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7tbS::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tuQ() //  [R1]
         { info_tbl: [(c7tuQ,
                       label: block_c7tuQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tuQ: // global
           _c7tuW::P64 = R1 & 7;
           if (_c7tuW::P64 < 3) goto u7tvl; else goto u7tvm;
       u7tvl: // global
           if (_c7tuW::P64 < 2) goto u7tvn; else goto c7tuU;
       u7tvn: // global
           Sp = Sp + 24;
           call _c7tvg() args: 0, res: 0, upd: 0;
       c7tuU: // global
           _s7tbU::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7tv5_info;
           R3 = _s7tbU::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7tvm: // global
           Sp = Sp + 24;
           call _c7tuV() args: 0, res: 0, upd: 0;
     }
 },
 _c7tv5() //  [R1]
         { info_tbl: [(c7tv5,
                       label: block_c7tv5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tv5: // global
           if (R1 & 7 == 1) goto u7tvo; else goto u7tvp;
       u7tvo: // global
           Sp = Sp + 8;
           call _c7tvg() args: 0, res: 0, upd: 0;
       u7tvp: // global
           Sp = Sp + 8;
           call _c7tuV() args: 0, res: 0, upd: 0;
     }
 },
 _c7tvg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tvg: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tuV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tuV: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.1983648 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c>=_closure" {
     GHC.Exception.$fOrdErrorCall_$c>=_closure:
         const GHC.Exception.$fOrdErrorCall_$c>=_info;
 },
 GHC.Exception.$fOrdErrorCall_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7tvB,
                       label: GHC.Exception.$fOrdErrorCall_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tvB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tvF; else goto c7tvG;
       c7tvF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tvG: // global
           I64[Sp - 16] = block_c7tvy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tvO; else goto c7tvz;
       u7tvO: // global
           call _c7tvy(R1) args: 0, res: 0, upd: 0;
       c7tvz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tvy() //  [R1]
         { info_tbl: [(c7tvy,
                       label: block_c7tvy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tvy: // global
           I64[Sp - 8] = block_c7tvE_info;
           _s7tc0::P64 = P64[R1 + 7];
           _s7tc1::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tc1::P64;
           P64[Sp + 8] = _s7tc0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tvN; else goto c7tvI;
       u7tvN: // global
           call _c7tvE(R1) args: 0, res: 0, upd: 0;
       c7tvI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tvE() //  [R1]
         { info_tbl: [(c7tvE,
                       label: block_c7tvE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tvE: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c>=_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.199765848 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c>_closure" {
     GHC.Exception.$fOrdErrorCall_$c>_closure:
         const GHC.Exception.$fOrdErrorCall_$c>_info;
 },
 GHC.Exception.$fOrdErrorCall_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7tvT,
                       label: GHC.Exception.$fOrdErrorCall_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tvT: // global
           _s7tc6::P64 = R3;
           R3 = R2;
           R2 = _s7tc6::P64;
           call GHC.Exception.$fOrdErrorCall_$c<_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.201175991 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$cmin_closure" {
     GHC.Exception.$fOrdErrorCall_$cmin_closure:
         const GHC.Exception.$fOrdErrorCall_$cmin_info;
 },
 GHC.Exception.$fOrdErrorCall_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7tw3,
                       label: GHC.Exception.$fOrdErrorCall_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tw3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7tw7; else goto c7tw8;
       c7tw7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tw8: // global
           I64[Sp - 16] = block_c7tw0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7twN; else goto c7tw1;
       u7twN: // global
           call _c7tw0(R1) args: 0, res: 0, upd: 0;
       c7tw1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tw0() //  [R1]
         { info_tbl: [(c7tw0,
                       label: block_c7tw0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tw0: // global
           I64[Sp - 16] = block_c7tw6_info;
           _s7tc9::P64 = R1;
           _s7tca::P64 = P64[R1 + 7];
           _s7tcb::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s7tcb::P64;
           P64[Sp] = _s7tca::P64;
           P64[Sp + 8] = _s7tc9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7twM; else goto c7twa;
       u7twM: // global
           call _c7tw6(R1) args: 0, res: 0, upd: 0;
       c7twa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tw6() //  [R1]
         { info_tbl: [(c7tw6,
                       label: block_c7tw6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tw6: // global
           I64[Sp - 8] = block_c7twe_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7twe() //  [R1]
         { info_tbl: [(c7twe,
                       label: block_c7twe_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7twe: // global
           _c7twF::P64 = R1 & 7;
           if (_c7twF::P64 < 3) goto u7twH; else goto u7twI;
       u7twH: // global
           if (_c7twF::P64 < 2) goto u7twJ; else goto c7twq;
       u7twJ: // global
           Sp = Sp + 24;
           call _c7twA() args: 0, res: 0, upd: 0;
       c7twq: // global
           _s7tcb::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7two_info;
           R3 = _s7tcb::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7twI: // global
           Sp = Sp + 32;
           call _c7twE() args: 0, res: 0, upd: 0;
     }
 },
 _c7two() //  [R1]
         { info_tbl: [(c7two,
                       label: block_c7two_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7two: // global
           if (R1 & 7 == 1) goto u7twK; else goto u7twL;
       u7twK: // global
           Sp = Sp + 8;
           call _c7twA() args: 0, res: 0, upd: 0;
       u7twL: // global
           Sp = Sp + 16;
           call _c7twE() args: 0, res: 0, upd: 0;
     }
 },
 _c7twA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7twA: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7twE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7twE: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.203238391 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_closure" {
     GHC.Exception.$fOrdErrorCall_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Exception.$fEqErrorCall_closure+1;
         const GHC.Exception.$fOrdErrorCall_$ccompare_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c<_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c<=_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c>_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c>=_closure+2;
         const GHC.Exception.$fOrdErrorCall_$cmax_closure+2;
         const GHC.Exception.$fOrdErrorCall_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.204103536 UTC

[section ""data" . GHC.Exception.$dmdisplayException_closure" {
     GHC.Exception.$dmdisplayException_closure:
         const GHC.Exception.$dmdisplayException_info;
 },
 GHC.Exception.$dmdisplayException_entry() //  [R2]
         { info_tbl: [(c7twY,
                       label: GHC.Exception.$dmdisplayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7twY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7twZ; else goto c7tx0;
       c7twZ: // global
           R2 = R2;
           R1 = GHC.Exception.$dmdisplayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tx0: // global
           I64[Sp - 8] = block_c7twW_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7twW() //  [R1]
         { info_tbl: [(c7twW,
                       label: block_c7twW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7twW: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Show.show_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.205622045 UTC

[section ""data" . GHC.Exception.$dmfromException_closure" {
     GHC.Exception.$dmfromException_closure:
         const GHC.Exception.$dmfromException_info;
         const 0;
 },
 GHC.Exception.$dmfromException_entry() //  [R2, R3]
         { info_tbl: [(c7txb,
                       label: GHC.Exception.$dmfromException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7txb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7txj; else goto c7txk;
       c7txj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$dmfromException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7txk: // global
           I64[Sp - 16] = block_c7tx8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7txG; else goto c7tx9;
       u7txG: // global
           call _c7tx8(R1) args: 0, res: 0, upd: 0;
       c7tx9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tx8() //  [R1]
         { info_tbl: [(c7tx8,
                       label: block_c7tx8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tx8: // global
           I64[Sp - 8] = block_c7txe_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7txe() //  [R1]
         { info_tbl: [(c7txe,
                       label: block_c7txe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7txe: // global
           I64[Sp] = block_c7txi_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7txi() //  [R1]
         { info_tbl: [(c7txi,
                       label: block_c7txi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7txi: // global
           I64[Sp] = block_c7txq_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7txq() //  [R1]
         { info_tbl: [(c7txq,
                       label: block_c7txq_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7txq: // global
           if (R1 & 7 == 1) goto c7txx; else goto c7txB;
       c7txx: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7txB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7txE; else goto c7txD;
       c7txE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7txD: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.207553093 UTC

[section ""data" . GHC.Exception.$dmtoException_closure" {
     GHC.Exception.$dmtoException_closure:
         const GHC.Exception.$dmtoException_info;
 },
 GHC.Exception.$dmtoException_entry() //  [R2, R3]
         { info_tbl: [(c7txM,
                       label: GHC.Exception.$dmtoException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7txM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7txQ; else goto c7txP;
       c7txQ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$dmtoException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7txP: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.208617003 UTC

[section ""data" . GHC.Exception.$bErrorCall_closure" {
     GHC.Exception.$bErrorCall_closure:
         const GHC.Exception.$bErrorCall_info;
 },
 GHC.Exception.$bErrorCall_entry() //  [R2]
         { info_tbl: [(c7txW,
                       label: GHC.Exception.$bErrorCall_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7txW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7ty0; else goto c7txZ;
       c7ty0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$bErrorCall_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7txZ: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.20991009 UTC

[section ""data" . GHC.Exception.throw_closure" {
     GHC.Exception.throw_closure:
         const GHC.Exception.throw_info;
 },
 sat_s7tcu_entry() //  [R1]
         { info_tbl: [(c7ty9,
                       label: sat_s7tcu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ty9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7tya; else goto c7tyb;
       c7tya: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tyb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exception.throw_entry() //  [R2, R3]
         { info_tbl: [(c7tyc,
                       label: GHC.Exception.throw_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tyc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7tyg; else goto c7tyf;
       c7tyg: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.throw_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tyf: // global
           I64[Hp - 24] = sat_s7tcu_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.211341691 UTC

[section ""data" . GHC.Exception.$mErrorCall_closure" {
     GHC.Exception.$mErrorCall_closure:
         const GHC.Exception.$mErrorCall_info;
 },
 GHC.Exception.$mErrorCall_entry() //  [R2, R3, R4]
         { info_tbl: [(c7tyo,
                       label: GHC.Exception.$mErrorCall_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tyo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7typ; else goto c7tyq;
       c7typ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$mErrorCall_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tyq: // global
           I64[Sp - 16] = block_c7tyl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tyu; else goto c7tym;
       u7tyu: // global
           call _c7tyl(R1) args: 0, res: 0, upd: 0;
       c7tym: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tyl() //  [R1]
         { info_tbl: [(c7tyl,
                       label: block_c7tyl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tyl: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.212467082 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException12_bytes" {
     GHC.Exception.errorCallWithCallStackException12_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,45,112,114,111,102,41,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.213321693 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException11_closure" {
     GHC.Exception.errorCallWithCallStackException11_closure:
         const GHC.Exception.errorCallWithCallStackException11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException11_entry() //  [R1]
         { info_tbl: [(c7tyB,
                       label: GHC.Exception.errorCallWithCallStackException11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tyB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tyC; else goto c7tyD;
       c7tyC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tyD: // global
           (_c7tyy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tyy::I64 == 0) goto c7tyA; else goto c7tyz;
       c7tyA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tyz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tyy::I64;
           R2 = GHC.Exception.errorCallWithCallStackException12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.214331129 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException5_bytes" {
     GHC.Exception.errorCallWithCallStackException5_bytes:
         I8[] [32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.215067723 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException10_closure" {
     GHC.Exception.errorCallWithCallStackException10_closure:
         const GHC.Exception.errorCallWithCallStackException10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException10_entry() //  [R1]
         { info_tbl: [(c7tyK,
                       label: GHC.Exception.errorCallWithCallStackException10_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tyK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tyL; else goto c7tyM;
       c7tyL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tyM: // global
           (_c7tyH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tyH::I64 == 0) goto c7tyJ; else goto c7tyI;
       c7tyJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tyI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tyH::I64;
           R2 = GHC.Exception.errorCallWithCallStackException5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.216174983 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException9_closure" {
     GHC.Exception.errorCallWithCallStackException9_closure:
         const GHC.Exception.errorCallWithCallStackException9_info;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException9_entry() //  [R2]
         { info_tbl: [(c7tyR,
                       label: GHC.Exception.errorCallWithCallStackException9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tyR: // global
           R3 = R2;
           R2 = GHC.Exception.errorCallWithCallStackException10_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.217540978 UTC

[section ""data" . GHC.Exception.showCCSStack_closure" {
     GHC.Exception.showCCSStack_closure:
         const GHC.Exception.showCCSStack_info;
         const 0;
 },
 sat_s7tcG_entry() //  [R1]
         { info_tbl: [(c7tza,
                       label: sat_s7tcG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tza: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tzb; else goto c7tzc;
       c7tzb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tzc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7tz8_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7tz8() //  [R1]
         { info_tbl: [(c7tz8,
                       label: block_c7tz8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tz8: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.showCCSStack_entry() //  [R2]
         { info_tbl: [(c7tzk,
                       label: GHC.Exception.showCCSStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tzk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tzl; else goto c7tzm;
       c7tzl: // global
           R2 = R2;
           R1 = GHC.Exception.showCCSStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tzm: // global
           I64[Sp - 8] = block_c7tyY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tzt; else goto c7tyZ;
       u7tzt: // global
           call _c7tyY(R1) args: 0, res: 0, upd: 0;
       c7tyZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tyY() //  [R1]
         { info_tbl: [(c7tyY,
                       label: block_c7tyY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tyY: // global
           if (R1 & 7 == 1) goto c7tzh; else goto c7tzi;
       c7tzh: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tzi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tzs; else goto c7tzr;
       c7tzs: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7tzr: // global
           I64[Hp - 40] = sat_s7tcG_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.220868329 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$ccompare_closure" {
     GHC.Exception.$fOrdArithException_$ccompare_closure:
         const GHC.Exception.$fOrdArithException_$ccompare_info;
 },
 GHC.Exception.$fOrdArithException_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7tzJ,
                       label: GHC.Exception.$fOrdArithException_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tzJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tzK; else goto c7tzL;
       c7tzK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tzL: // global
           I64[Sp - 16] = block_c7tzy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tCO; else goto c7tzz;
       u7tCO: // global
           call _c7tzy(R1) args: 0, res: 0, upd: 0;
       c7tzz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tzy() //  [R1]
         { info_tbl: [(c7tzy,
                       label: block_c7tzy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tzy: // global
           _s7tcI::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tzC;
               case 2 : goto c7tzD;
               case 3 : goto c7tzE;
               case 4 : goto c7tzF;
               case 5 : goto c7tzG;
               case 6 : goto c7tzH;
           }
       c7tzH: // global
           I64[Sp + 8] = block_c7tBV_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tCN; else goto c7tBX;
       u7tCN: // global
           call _c7tBV(R1) args: 0, res: 0, upd: 0;
       c7tBX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tzG: // global
           I64[Sp + 8] = block_c7tBC_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tCM; else goto c7tBE;
       u7tCM: // global
           call _c7tBC(R1) args: 0, res: 0, upd: 0;
       c7tBE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tzF: // global
           I64[Sp + 8] = block_c7tBf_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tCL; else goto c7tBh;
       u7tCL: // global
           call _c7tBf(R1) args: 0, res: 0, upd: 0;
       c7tBh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tzE: // global
           I64[Sp + 8] = block_c7tAO_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tCK; else goto c7tAQ;
       u7tCK: // global
           call _c7tAO(R1) args: 0, res: 0, upd: 0;
       c7tAQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tzD: // global
           I64[Sp + 8] = block_c7tAj_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tCJ; else goto c7tAl;
       u7tCJ: // global
           call _c7tAj(R1) args: 0, res: 0, upd: 0;
       c7tAl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tzC: // global
           I64[Sp + 8] = block_c7tzO_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tCI; else goto c7tzQ;
       u7tCI: // global
           call _c7tzO(R1) args: 0, res: 0, upd: 0;
       c7tzQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tBV() //  [R1]
         { info_tbl: [(c7tBV,
                       label: block_c7tBV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tBV: // global
           if (R1 & 7 == 6) goto u7tCj; else goto u7tCk;
       u7tCj: // global
           Sp = Sp + 8;
           call _c7tC7() args: 0, res: 0, upd: 0;
       u7tCk: // global
           Sp = Sp + 8;
           call _c7tC3() args: 0, res: 0, upd: 0;
     }
 },
 _c7tBC() //  [R1]
         { info_tbl: [(c7tBC,
                       label: block_c7tBC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tBC: // global
           _c7tC9::P64 = R1 & 7;
           if (_c7tC9::P64 != 5) goto u7tCi; else goto u7tCl;
       u7tCi: // global
           if (_c7tC9::P64 != 6) goto u7tCn; else goto u7tCm;
       u7tCn: // global
           Sp = Sp + 8;
           call _c7tC3() args: 0, res: 0, upd: 0;
       u7tCm: // global
           Sp = Sp + 8;
           call _c7tBS() args: 0, res: 0, upd: 0;
       u7tCl: // global
           Sp = Sp + 8;
           call _c7tC7() args: 0, res: 0, upd: 0;
     }
 },
 _c7tBf() //  [R1]
         { info_tbl: [(c7tBf,
                       label: block_c7tBf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tBf: // global
           _c7tCa::P64 = R1 & 7;
           if (_c7tCa::P64 < 5) goto u7tCg; else goto u7tCh;
       u7tCg: // global
           if (_c7tCa::P64 < 4) goto u7tCp; else goto u7tCo;
       u7tCp: // global
           Sp = Sp + 8;
           call _c7tC3() args: 0, res: 0, upd: 0;
       u7tCo: // global
           Sp = Sp + 8;
           call _c7tC7() args: 0, res: 0, upd: 0;
       u7tCh: // global
           if (_c7tCa::P64 < 6) goto u7tCr; else goto u7tCr;
       u7tCr: // global
           Sp = Sp + 8;
           call _c7tBS() args: 0, res: 0, upd: 0;
     }
 },
 _c7tAO() //  [R1]
         { info_tbl: [(c7tAO,
                       label: block_c7tAO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tAO: // global
           _c7tCb::P64 = R1 & 7;
           if (_c7tCb::P64 < 4) goto u7tCe; else goto u7tCf;
       u7tCe: // global
           if (_c7tCb::P64 < 3) goto u7tCt; else goto u7tCs;
       u7tCt: // global
           Sp = Sp + 8;
           call _c7tC3() args: 0, res: 0, upd: 0;
       u7tCs: // global
           Sp = Sp + 8;
           call _c7tC7() args: 0, res: 0, upd: 0;
       u7tCf: // global
           if (_c7tCb::P64 != 5) goto u7tCv; else goto u7tCv;
       u7tCv: // global
           Sp = Sp + 8;
           call _c7tBS() args: 0, res: 0, upd: 0;
     }
 },
 _c7tAj() //  [R1]
         { info_tbl: [(c7tAj,
                       label: block_c7tAj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tAj: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7tCw;
               case 2 : goto u7tCx;
               case 3, 4, 5, 6 : goto u7tCB;
           }
       u7tCB: // global
           Sp = Sp + 8;
           call _c7tBS() args: 0, res: 0, upd: 0;
       u7tCx: // global
           Sp = Sp + 8;
           call _c7tC7() args: 0, res: 0, upd: 0;
       u7tCw: // global
           Sp = Sp + 8;
           call _c7tC3() args: 0, res: 0, upd: 0;
     }
 },
 _c7tC3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tC3: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tzO() //  [R1]
         { info_tbl: [(c7tzO,
                       label: block_c7tzO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tzO: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7tCC;
               case 2, 3, 4, 5, 6 : goto u7tCH;
           }
       u7tCH: // global
           Sp = Sp + 8;
           call _c7tBS() args: 0, res: 0, upd: 0;
       u7tCC: // global
           Sp = Sp + 8;
           call _c7tC7() args: 0, res: 0, upd: 0;
     }
 },
 _c7tBS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tBS: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tC7() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tC7: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.227988558 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c<_closure" {
     GHC.Exception.$fOrdArithException_$c<_closure:
         const GHC.Exception.$fOrdArithException_$c<_info;
 },
 GHC.Exception.$fOrdArithException_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7tDk,
                       label: GHC.Exception.$fOrdArithException_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tDk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tDl; else goto c7tDm;
       c7tDl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tDm: // global
           I64[Sp - 16] = block_c7tD9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tFU; else goto c7tDa;
       u7tFU: // global
           call _c7tD9(R1) args: 0, res: 0, upd: 0;
       c7tDa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tD9() //  [R1]
         { info_tbl: [(c7tD9,
                       label: block_c7tD9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tD9: // global
           _s7tcR::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tDd;
               case 2 : goto c7tDe;
               case 3 : goto c7tDf;
               case 4 : goto c7tDg;
               case 5 : goto c7tDh;
               case 6 : goto c7tDi;
           }
       c7tDi: // global
           I64[Sp + 8] = block_c7tFg_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tFT; else goto c7tFi;
       u7tFT: // global
           call _c7tFg() args: 0, res: 0, upd: 0;
       c7tFi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tDh: // global
           I64[Sp + 8] = block_c7tF1_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tFS; else goto c7tF3;
       u7tFS: // global
           call _c7tF1(R1) args: 0, res: 0, upd: 0;
       c7tF3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tDg: // global
           I64[Sp + 8] = block_c7tEI_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tFR; else goto c7tEK;
       u7tFR: // global
           call _c7tEI(R1) args: 0, res: 0, upd: 0;
       c7tEK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tDf: // global
           I64[Sp + 8] = block_c7tEl_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tFQ; else goto c7tEn;
       u7tFQ: // global
           call _c7tEl(R1) args: 0, res: 0, upd: 0;
       c7tEn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tDe: // global
           I64[Sp + 8] = block_c7tDU_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tFP; else goto c7tDW;
       u7tFP: // global
           call _c7tDU(R1) args: 0, res: 0, upd: 0;
       c7tDW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tDd: // global
           I64[Sp + 8] = block_c7tDp_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tFO; else goto c7tDr;
       u7tFO: // global
           call _c7tDp(R1) args: 0, res: 0, upd: 0;
       c7tDr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tFg() //  []
         { info_tbl: [(c7tFg,
                       label: block_c7tFg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tFg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tF1() //  [R1]
         { info_tbl: [(c7tF1,
                       label: block_c7tF1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tF1: // global
           if (R1 & 7 == 6) goto u7tFw; else goto u7tFx;
       u7tFw: // global
           Sp = Sp + 8;
           call _c7tFd() args: 0, res: 0, upd: 0;
       u7tFx: // global
           Sp = Sp + 8;
           call _c7tF9() args: 0, res: 0, upd: 0;
     }
 },
 _c7tEI() //  [R1]
         { info_tbl: [(c7tEI,
                       label: block_c7tEI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tEI: // global
           _c7tFo::P64 = R1 & 7;
           if (_c7tFo::P64 != 5) goto u7tFv; else goto u7tFy;
       u7tFv: // global
           if (_c7tFo::P64 != 6) goto u7tFA; else goto u7tFz;
       u7tFA: // global
           Sp = Sp + 8;
           call _c7tF9() args: 0, res: 0, upd: 0;
       u7tFz: // global
           Sp = Sp + 8;
           goto u7tG3;
       u7tFy: // global
           Sp = Sp + 8;
           goto u7tG3;
       u7tG3: // global
           call _c7tFd() args: 0, res: 0, upd: 0;
     }
 },
 _c7tEl() //  [R1]
         { info_tbl: [(c7tEl,
                       label: block_c7tEl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tEl: // global
           _c7tFp::P64 = R1 & 7;
           if (_c7tFp::P64 < 4) goto u7tFB; else goto u7tFu;
       u7tFB: // global
           Sp = Sp + 8;
           call _c7tF9() args: 0, res: 0, upd: 0;
       u7tFu: // global
           if (_c7tFp::P64 != 5) goto u7tFD; else goto u7tFD;
       u7tFD: // global
           Sp = Sp + 8;
           call _c7tFd() args: 0, res: 0, upd: 0;
     }
 },
 _c7tDU() //  [R1]
         { info_tbl: [(c7tDU,
                       label: block_c7tDU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tDU: // global
           _c7tFq::P64 = R1 & 7;
           if (_c7tFq::P64 < 6) goto u7tFs; else goto u7tFE;
       u7tFs: // global
           if (_c7tFq::P64 < 3) goto u7tFF; else goto u7tFt;
       u7tFF: // global
           Sp = Sp + 8;
           call _c7tF9() args: 0, res: 0, upd: 0;
       u7tFt: // global
           if (_c7tFq::P64 != 4) goto u7tFH; else goto u7tFH;
       u7tFH: // global
           Sp = Sp + 8;
           goto u7tFZ;
       u7tFE: // global
           Sp = Sp + 8;
           goto u7tFZ;
       u7tFZ: // global
           call _c7tFd() args: 0, res: 0, upd: 0;
     }
 },
 _c7tDp() //  [R1]
         { info_tbl: [(c7tDp,
                       label: block_c7tDp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tDp: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7tFI;
               case 2, 3, 4, 5, 6 : goto u7tFN;
           }
       u7tFN: // global
           Sp = Sp + 8;
           call _c7tFd() args: 0, res: 0, upd: 0;
       u7tFI: // global
           Sp = Sp + 8;
           call _c7tF9() args: 0, res: 0, upd: 0;
     }
 },
 _c7tFd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tFd: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tF9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tF9: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.232307202 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c<=_closure" {
     GHC.Exception.$fOrdArithException_$c<=_closure:
         const GHC.Exception.$fOrdArithException_$c<=_info;
 },
 GHC.Exception.$fOrdArithException_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7tGm,
                       label: GHC.Exception.$fOrdArithException_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tGm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tGn; else goto c7tGo;
       c7tGn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tGo: // global
           I64[Sp - 16] = block_c7tGb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tIW; else goto c7tGc;
       u7tIW: // global
           call _c7tGb(R1) args: 0, res: 0, upd: 0;
       c7tGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tGb() //  [R1]
         { info_tbl: [(c7tGb,
                       label: block_c7tGb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tGb: // global
           _s7tcZ::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tGf;
               case 2 : goto c7tGg;
               case 3 : goto c7tGh;
               case 4 : goto c7tGi;
               case 5 : goto c7tGj;
               case 6 : goto c7tGk;
           }
       c7tGk: // global
           I64[Sp + 8] = block_c7tIi_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tIV; else goto c7tIk;
       u7tIV: // global
           call _c7tIi() args: 0, res: 0, upd: 0;
       c7tIk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tGj: // global
           I64[Sp + 8] = block_c7tI3_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tIU; else goto c7tI5;
       u7tIU: // global
           call _c7tI3(R1) args: 0, res: 0, upd: 0;
       c7tI5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tGi: // global
           I64[Sp + 8] = block_c7tHK_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tIT; else goto c7tHM;
       u7tIT: // global
           call _c7tHK(R1) args: 0, res: 0, upd: 0;
       c7tHM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tGh: // global
           I64[Sp + 8] = block_c7tHn_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tIS; else goto c7tHp;
       u7tIS: // global
           call _c7tHn(R1) args: 0, res: 0, upd: 0;
       c7tHp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tGg: // global
           I64[Sp + 8] = block_c7tGW_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tIR; else goto c7tGY;
       u7tIR: // global
           call _c7tGW(R1) args: 0, res: 0, upd: 0;
       c7tGY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tGf: // global
           I64[Sp + 8] = block_c7tGr_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tIQ; else goto c7tGt;
       u7tIQ: // global
           call _c7tGr(R1) args: 0, res: 0, upd: 0;
       c7tGt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tIi() //  []
         { info_tbl: [(c7tIi,
                       label: block_c7tIi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tIi: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tI3() //  [R1]
         { info_tbl: [(c7tI3,
                       label: block_c7tI3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tI3: // global
           if (R1 & 7 == 6) goto u7tIy; else goto u7tIz;
       u7tIy: // global
           Sp = Sp + 8;
           call _c7tIf() args: 0, res: 0, upd: 0;
       u7tIz: // global
           Sp = Sp + 8;
           call _c7tIb() args: 0, res: 0, upd: 0;
     }
 },
 _c7tHK() //  [R1]
         { info_tbl: [(c7tHK,
                       label: block_c7tHK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tHK: // global
           _c7tIq::P64 = R1 & 7;
           if (_c7tIq::P64 != 5) goto u7tIx; else goto u7tIA;
       u7tIx: // global
           if (_c7tIq::P64 != 6) goto u7tIC; else goto u7tIB;
       u7tIC: // global
           Sp = Sp + 8;
           call _c7tIb() args: 0, res: 0, upd: 0;
       u7tIB: // global
           Sp = Sp + 8;
           goto u7tJ5;
       u7tIA: // global
           Sp = Sp + 8;
           goto u7tJ5;
       u7tJ5: // global
           call _c7tIf() args: 0, res: 0, upd: 0;
     }
 },
 _c7tHn() //  [R1]
         { info_tbl: [(c7tHn,
                       label: block_c7tHn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tHn: // global
           _c7tIr::P64 = R1 & 7;
           if (_c7tIr::P64 < 4) goto u7tID; else goto u7tIw;
       u7tID: // global
           Sp = Sp + 8;
           call _c7tIb() args: 0, res: 0, upd: 0;
       u7tIw: // global
           if (_c7tIr::P64 != 5) goto u7tIF; else goto u7tIF;
       u7tIF: // global
           Sp = Sp + 8;
           call _c7tIf() args: 0, res: 0, upd: 0;
     }
 },
 _c7tGW() //  [R1]
         { info_tbl: [(c7tGW,
                       label: block_c7tGW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tGW: // global
           _c7tIs::P64 = R1 & 7;
           if (_c7tIs::P64 < 6) goto u7tIu; else goto u7tIG;
       u7tIu: // global
           if (_c7tIs::P64 < 3) goto u7tIH; else goto u7tIv;
       u7tIH: // global
           Sp = Sp + 8;
           call _c7tIb() args: 0, res: 0, upd: 0;
       u7tIv: // global
           if (_c7tIs::P64 != 4) goto u7tIJ; else goto u7tIJ;
       u7tIJ: // global
           Sp = Sp + 8;
           goto u7tJ1;
       u7tIG: // global
           Sp = Sp + 8;
           goto u7tJ1;
       u7tJ1: // global
           call _c7tIf() args: 0, res: 0, upd: 0;
     }
 },
 _c7tGr() //  [R1]
         { info_tbl: [(c7tGr,
                       label: block_c7tGr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tGr: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7tIK;
               case 2, 3, 4, 5, 6 : goto u7tIP;
           }
       u7tIP: // global
           Sp = Sp + 8;
           call _c7tIf() args: 0, res: 0, upd: 0;
       u7tIK: // global
           Sp = Sp + 8;
           call _c7tIb() args: 0, res: 0, upd: 0;
     }
 },
 _c7tIf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tIf: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tIb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tIb: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.23655425 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$cmax_closure" {
     GHC.Exception.$fOrdArithException_$cmax_closure:
         const GHC.Exception.$fOrdArithException_$cmax_info;
 },
 GHC.Exception.$fOrdArithException_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7tJo,
                       label: GHC.Exception.$fOrdArithException_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tJo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tJp; else goto c7tJq;
       c7tJp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tJq: // global
           I64[Sp - 16] = block_c7tJd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tLr; else goto c7tJe;
       u7tLr: // global
           call _c7tJd(R1) args: 0, res: 0, upd: 0;
       c7tJe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tJd() //  [R1]
         { info_tbl: [(c7tJd,
                       label: block_c7tJd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tJd: // global
           _s7td8::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tJh;
               case 2 : goto c7tJi;
               case 3 : goto c7tJj;
               case 4 : goto c7tJk;
               case 5 : goto c7tJl;
               case 6 : goto c7tJm;
           }
       c7tJm: // global
           I64[Sp + 8] = block_c7tKS_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tLq; else goto c7tKU;
       u7tLq: // global
           call _c7tKS() args: 0, res: 0, upd: 0;
       c7tKU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tJl: // global
           I64[Sp + 8] = block_c7tKD_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tLp; else goto c7tKF;
       u7tLp: // global
           call _c7tKD(R1) args: 0, res: 0, upd: 0;
       c7tKF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tJk: // global
           I64[Sp + 8] = block_c7tKk_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tLo; else goto c7tKm;
       u7tLo: // global
           call _c7tKk(R1) args: 0, res: 0, upd: 0;
       c7tKm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tJj: // global
           I64[Sp + 8] = block_c7tJX_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tLn; else goto c7tJZ;
       u7tLn: // global
           call _c7tJX(R1) args: 0, res: 0, upd: 0;
       c7tJZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tJi: // global
           I64[Sp + 8] = block_c7tJw_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tLm; else goto c7tJy;
       u7tLm: // global
           call _c7tJw(R1) args: 0, res: 0, upd: 0;
       c7tJy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tJh: // global
           R1 = _s7td8::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tKS() //  []
         { info_tbl: [(c7tKS,
                       label: block_c7tKS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tKS: // global
           R1 = GHC.Exception.RatioZeroDenominator_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tKD() //  [R1]
         { info_tbl: [(c7tKD,
                       label: block_c7tKD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tKD: // global
           if (R1 & 7 == 6) goto u7tL9; else goto u7tLa;
       u7tL9: // global
           Sp = Sp + 8;
           call _c7tKP() args: 0, res: 0, upd: 0;
       u7tLa: // global
           Sp = Sp + 8;
           call _c7tKL() args: 0, res: 0, upd: 0;
     }
 },
 _c7tKk() //  [R1]
         { info_tbl: [(c7tKk,
                       label: block_c7tKk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tKk: // global
           _c7tL0::P64 = R1 & 7;
           if (_c7tL0::P64 != 5) goto u7tL8; else goto u7tLb;
       u7tL8: // global
           if (_c7tL0::P64 != 6) goto u7tLd; else goto u7tLc;
       u7tLd: // global
           Sp = Sp + 8;
           call _c7tKs() args: 0, res: 0, upd: 0;
       u7tLc: // global
           Sp = Sp + 8;
           call _c7tKP() args: 0, res: 0, upd: 0;
       u7tLb: // global
           Sp = Sp + 8;
           call _c7tKL() args: 0, res: 0, upd: 0;
     }
 },
 _c7tJX() //  [R1]
         { info_tbl: [(c7tJX,
                       label: block_c7tJX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tJX: // global
           _c7tL1::P64 = R1 & 7;
           if (_c7tL1::P64 < 5) goto u7tL6; else goto u7tL7;
       u7tL6: // global
           if (_c7tL1::P64 < 4) goto u7tLf; else goto u7tLe;
       u7tLf: // global
           Sp = Sp + 8;
           call _c7tK5() args: 0, res: 0, upd: 0;
       u7tLe: // global
           Sp = Sp + 8;
           call _c7tKs() args: 0, res: 0, upd: 0;
       u7tL7: // global
           if (_c7tL1::P64 < 6) goto u7tLh; else goto u7tLg;
       u7tLh: // global
           Sp = Sp + 8;
           call _c7tKL() args: 0, res: 0, upd: 0;
       u7tLg: // global
           Sp = Sp + 8;
           call _c7tKP() args: 0, res: 0, upd: 0;
     }
 },
 _c7tJw() //  [R1]
         { info_tbl: [(c7tJw,
                       label: block_c7tJw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tJw: // global
           _c7tL2::P64 = R1 & 7;
           if (_c7tL2::P64 < 5) goto u7tL3; else goto u7tL5;
       u7tL3: // global
           if (_c7tL2::P64 < 4) goto u7tL4; else goto u7tLi;
       u7tL4: // global
           if (_c7tL2::P64 < 3) goto c7tJE; else goto u7tLj;
       c7tJE: // global
           R1 = GHC.Exception.Underflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7tLj: // global
           Sp = Sp + 8;
           call _c7tK5() args: 0, res: 0, upd: 0;
       u7tLi: // global
           Sp = Sp + 8;
           call _c7tKs() args: 0, res: 0, upd: 0;
       u7tL5: // global
           if (_c7tL2::P64 < 6) goto u7tLl; else goto u7tLk;
       u7tLl: // global
           Sp = Sp + 8;
           call _c7tKL() args: 0, res: 0, upd: 0;
       u7tLk: // global
           Sp = Sp + 8;
           call _c7tKP() args: 0, res: 0, upd: 0;
     }
 },
 _c7tK5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tK5: // global
           R1 = GHC.Exception.LossOfPrecision_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tKs() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tKs: // global
           R1 = GHC.Exception.DivideByZero_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tKL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tKL: // global
           R1 = GHC.Exception.Denormal_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tKP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tKP: // global
           R1 = GHC.Exception.RatioZeroDenominator_closure+6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.241213263 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c>=_closure" {
     GHC.Exception.$fOrdArithException_$c>=_closure:
         const GHC.Exception.$fOrdArithException_$c>=_info;
 },
 GHC.Exception.$fOrdArithException_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7tLU,
                       label: GHC.Exception.$fOrdArithException_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tLU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tLV; else goto c7tLW;
       c7tLV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tLW: // global
           I64[Sp - 16] = block_c7tLJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tOu; else goto c7tLK;
       u7tOu: // global
           call _c7tLJ(R1) args: 0, res: 0, upd: 0;
       c7tLK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tLJ() //  [R1]
         { info_tbl: [(c7tLJ,
                       label: block_c7tLJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tLJ: // global
           _s7tdh::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tLN;
               case 2 : goto c7tLO;
               case 3 : goto c7tLP;
               case 4 : goto c7tLQ;
               case 5 : goto c7tLR;
               case 6 : goto c7tLS;
           }
       c7tLS: // global
           I64[Sp + 8] = block_c7tNQ_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tOt; else goto c7tNS;
       u7tOt: // global
           call _c7tNQ() args: 0, res: 0, upd: 0;
       c7tNS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tLR: // global
           I64[Sp + 8] = block_c7tNB_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tOs; else goto c7tND;
       u7tOs: // global
           call _c7tNB(R1) args: 0, res: 0, upd: 0;
       c7tND: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tLQ: // global
           I64[Sp + 8] = block_c7tNi_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tOr; else goto c7tNk;
       u7tOr: // global
           call _c7tNi(R1) args: 0, res: 0, upd: 0;
       c7tNk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tLP: // global
           I64[Sp + 8] = block_c7tMV_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tOq; else goto c7tMX;
       u7tOq: // global
           call _c7tMV(R1) args: 0, res: 0, upd: 0;
       c7tMX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tLO: // global
           I64[Sp + 8] = block_c7tMu_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tOp; else goto c7tMw;
       u7tOp: // global
           call _c7tMu(R1) args: 0, res: 0, upd: 0;
       c7tMw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tLN: // global
           I64[Sp + 8] = block_c7tLZ_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tOo; else goto c7tM1;
       u7tOo: // global
           call _c7tLZ(R1) args: 0, res: 0, upd: 0;
       c7tM1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tNQ() //  []
         { info_tbl: [(c7tNQ,
                       label: block_c7tNQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tNQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tNB() //  [R1]
         { info_tbl: [(c7tNB,
                       label: block_c7tNB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tNB: // global
           if (R1 & 7 == 6) goto u7tO6; else goto u7tO7;
       u7tO6: // global
           Sp = Sp + 8;
           call _c7tNN() args: 0, res: 0, upd: 0;
       u7tO7: // global
           Sp = Sp + 8;
           call _c7tNJ() args: 0, res: 0, upd: 0;
     }
 },
 _c7tNi() //  [R1]
         { info_tbl: [(c7tNi,
                       label: block_c7tNi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tNi: // global
           _c7tNY::P64 = R1 & 7;
           if (_c7tNY::P64 != 5) goto u7tO5; else goto u7tO8;
       u7tO5: // global
           if (_c7tNY::P64 != 6) goto u7tOa; else goto u7tO9;
       u7tOa: // global
           Sp = Sp + 8;
           call _c7tNJ() args: 0, res: 0, upd: 0;
       u7tO9: // global
           Sp = Sp + 8;
           goto u7tOD;
       u7tO8: // global
           Sp = Sp + 8;
           goto u7tOD;
       u7tOD: // global
           call _c7tNN() args: 0, res: 0, upd: 0;
     }
 },
 _c7tMV() //  [R1]
         { info_tbl: [(c7tMV,
                       label: block_c7tMV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tMV: // global
           _c7tNZ::P64 = R1 & 7;
           if (_c7tNZ::P64 < 4) goto u7tOb; else goto u7tO4;
       u7tOb: // global
           Sp = Sp + 8;
           call _c7tNJ() args: 0, res: 0, upd: 0;
       u7tO4: // global
           if (_c7tNZ::P64 != 5) goto u7tOd; else goto u7tOd;
       u7tOd: // global
           Sp = Sp + 8;
           call _c7tNN() args: 0, res: 0, upd: 0;
     }
 },
 _c7tMu() //  [R1]
         { info_tbl: [(c7tMu,
                       label: block_c7tMu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tMu: // global
           _c7tO0::P64 = R1 & 7;
           if (_c7tO0::P64 < 6) goto u7tO2; else goto u7tOe;
       u7tO2: // global
           if (_c7tO0::P64 < 3) goto u7tOf; else goto u7tO3;
       u7tOf: // global
           Sp = Sp + 8;
           call _c7tNJ() args: 0, res: 0, upd: 0;
       u7tO3: // global
           if (_c7tO0::P64 != 4) goto u7tOh; else goto u7tOh;
       u7tOh: // global
           Sp = Sp + 8;
           goto u7tOz;
       u7tOe: // global
           Sp = Sp + 8;
           goto u7tOz;
       u7tOz: // global
           call _c7tNN() args: 0, res: 0, upd: 0;
     }
 },
 _c7tLZ() //  [R1]
         { info_tbl: [(c7tLZ,
                       label: block_c7tLZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tLZ: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7tOi;
               case 2, 3, 4, 5, 6 : goto u7tOn;
           }
       u7tOn: // global
           Sp = Sp + 8;
           call _c7tNN() args: 0, res: 0, upd: 0;
       u7tOi: // global
           Sp = Sp + 8;
           call _c7tNJ() args: 0, res: 0, upd: 0;
     }
 },
 _c7tNN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tNN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tNJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tNJ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.244412268 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c>_closure" {
     GHC.Exception.$fOrdArithException_$c>_closure:
         const GHC.Exception.$fOrdArithException_$c>_info;
 },
 GHC.Exception.$fOrdArithException_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7tOL,
                       label: GHC.Exception.$fOrdArithException_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tOL: // global
           _s7tdq::P64 = R3;
           R3 = R2;
           R2 = _s7tdq::P64;
           call GHC.Exception.$fOrdArithException_$c<_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.246220618 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$cmin_closure" {
     GHC.Exception.$fOrdArithException_$cmin_closure:
         const GHC.Exception.$fOrdArithException_$cmin_info;
 },
 GHC.Exception.$fOrdArithException_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7tP3,
                       label: GHC.Exception.$fOrdArithException_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tP3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tP4; else goto c7tP5;
       c7tP4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tP5: // global
           I64[Sp - 16] = block_c7tOS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7tQR; else goto c7tOT;
       u7tQR: // global
           call _c7tOS(R1) args: 0, res: 0, upd: 0;
       c7tOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tOS() //  [R1]
         { info_tbl: [(c7tOS,
                       label: block_c7tOS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tOS: // global
           _s7tdr::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7tOW;
               case 2 : goto c7tOX;
               case 3 : goto c7tOY;
               case 4 : goto c7tOZ;
               case 5 : goto c7tP0;
               case 6 : goto c7tP1;
           }
       c7tP1: // global
           R1 = _s7tdr::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7tP0: // global
           I64[Sp + 8] = block_c7tQo_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tQQ; else goto c7tQq;
       u7tQQ: // global
           call _c7tQo(R1) args: 0, res: 0, upd: 0;
       c7tQq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tOZ: // global
           I64[Sp + 8] = block_c7tQ5_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tQP; else goto c7tQ7;
       u7tQP: // global
           call _c7tQ5(R1) args: 0, res: 0, upd: 0;
       c7tQ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tOY: // global
           I64[Sp + 8] = block_c7tPI_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tQO; else goto c7tPK;
       u7tQO: // global
           call _c7tPI(R1) args: 0, res: 0, upd: 0;
       c7tPK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tOX: // global
           I64[Sp + 8] = block_c7tPh_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tQN; else goto c7tPj;
       u7tQN: // global
           call _c7tPh(R1) args: 0, res: 0, upd: 0;
       c7tPj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7tOW: // global
           I64[Sp + 8] = block_c7tP8_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tQM; else goto c7tPa;
       u7tQM: // global
           call _c7tP8() args: 0, res: 0, upd: 0;
       c7tPa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tQo() //  [R1]
         { info_tbl: [(c7tQo,
                       label: block_c7tQo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tQo: // global
           if (R1 & 7 == 6) goto c7tQA; else goto c7tQw;
       c7tQA: // global
           R1 = GHC.Exception.Denormal_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tQw: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tQ5() //  [R1]
         { info_tbl: [(c7tQ5,
                       label: block_c7tQ5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tQ5: // global
           _c7tQF::P64 = R1 & 7;
           if (_c7tQF::P64 == 5) goto c7tQl; else goto u7tQL;
       u7tQL: // global
           if (_c7tQF::P64 == 6) goto c7tQl; else goto c7tQd;
       c7tQl: // global
           R1 = GHC.Exception.DivideByZero_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tQd: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tPI() //  [R1]
         { info_tbl: [(c7tPI,
                       label: block_c7tPI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tPI: // global
           _c7tQG::P64 = R1 & 7;
           if (_c7tQG::P64 < 4) goto c7tPQ; else goto u7tQK;
       c7tPQ: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u7tQK: // global
           if (_c7tQG::P64 != 5) goto c7tQ2; else goto c7tQ2;
       c7tQ2: // global
           R1 = GHC.Exception.LossOfPrecision_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tPh() //  [R1]
         { info_tbl: [(c7tPh,
                       label: block_c7tPh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tPh: // global
           _c7tQH::P64 = R1 & 7;
           if (_c7tQH::P64 >= 6) goto c7tPF; else goto u7tQI;
       u7tQI: // global
           if (_c7tQH::P64 < 3) goto c7tPp; else goto u7tQJ;
       c7tPp: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u7tQJ: // global
           if (_c7tQH::P64 != 4) goto c7tPF; else goto c7tPF;
       c7tPF: // global
           R1 = GHC.Exception.Underflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7tP8() //  []
         { info_tbl: [(c7tP8,
                       label: block_c7tP8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tP8: // global
           R1 = GHC.Exception.Overflow_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.248905164 UTC

[section ""data" . GHC.Exception.$fOrdArithException_closure" {
     GHC.Exception.$fOrdArithException_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Exception.$fEqArithException_closure+1;
         const GHC.Exception.$fOrdArithException_$ccompare_closure+2;
         const GHC.Exception.$fOrdArithException_$c<_closure+2;
         const GHC.Exception.$fOrdArithException_$c<=_closure+2;
         const GHC.Exception.$fOrdArithException_$c>_closure+2;
         const GHC.Exception.$fOrdArithException_$c>=_closure+2;
         const GHC.Exception.$fOrdArithException_$cmax_closure+2;
         const GHC.Exception.$fOrdArithException_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.249584074 UTC

[section ""cstring" . GHC.Exception.$trModule4_bytes" {
     GHC.Exception.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.250114081 UTC

[section ""data" . GHC.Exception.$trModule3_closure" {
     GHC.Exception.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.250712752 UTC

[section ""cstring" . GHC.Exception.$trModule2_bytes" {
     GHC.Exception.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.251286672 UTC

[section ""data" . GHC.Exception.$trModule1_closure" {
     GHC.Exception.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.251865251 UTC

[section ""data" . GHC.Exception.$trModule_closure" {
     GHC.Exception.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exception.$trModule3_closure+1;
         const GHC.Exception.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.252494648 UTC

[section ""data" . $krep_r7t8y_closure" {
     $krep_r7t8y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.253146195 UTC

[section ""data" . $krep1_r7t8z_closure" {
     $krep1_r7t8z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.253861758 UTC

[section ""data" . $krep2_r7t8A_closure" {
     $krep2_r7t8A_closure:
         const :_con_info;
         const $krep1_r7t8z_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.254497042 UTC

[section ""data" . $krep3_r7t8B_closure" {
     $krep3_r7t8B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r7t8A_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.255149011 UTC

[section ""data" . GHC.Exception.$tcException1_closure" {
     GHC.Exception.$tcException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_r7t8y_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.255829128 UTC

[section ""data" . $krep4_r7t8C_closure" {
     $krep4_r7t8C_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.256426321 UTC

[section ""data" . $krep5_r7t8D_closure" {
     $krep5_r7t8D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7t8C_closure+2;
         const $krep3_r7t8B_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.257067269 UTC

[section ""data" . $krep6_r7t8E_closure" {
     $krep6_r7t8E_closure:
         const :_con_info;
         const $krep4_r7t8C_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.257790379 UTC

[section ""data" . $krep7_r7t8F_closure" {
     $krep7_r7t8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.258412065 UTC

[section ""data" . $krep8_r7t8G_closure" {
     $krep8_r7t8G_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.259060681 UTC

[section ""data" . $krep9_r7t8H_closure" {
     $krep9_r7t8H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeable_closure;
         const $krep8_r7t8G_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.259724413 UTC

[section ""data" . $krep10_r7t8I_closure" {
     $krep10_r7t8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Show.$tcShow_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.260386164 UTC

[section ""cstring" . GHC.Exception.$fExceptionSomeException3_bytes" {
     GHC.Exception.$fExceptionSomeException3_bytes:
         I8[] [83,111,109,101,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.260980477 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException2_closure" {
     GHC.Exception.$fExceptionSomeException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionSomeException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.261668225 UTC

[section ""data" . GHC.Exception.$tcSomeException_closure" {
     GHC.Exception.$tcSomeException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionSomeException2_closure+1;
         const GHC.Types.krep$*_closure;
         const 13267649630904555636;
         const 2959581124447004473;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.262326255 UTC

[section ""data" . $krep11_r7t8J_closure" {
     $krep11_r7t8J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcSomeException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.263001111 UTC

[section ""data" . $krep12_r7t8K_closure" {
     $krep12_r7t8K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7t8C_closure+2;
         const $krep11_r7t8J_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.263640739 UTC

[section ""data" . $krep13_r7t8L_closure" {
     $krep13_r7t8L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r7t8J_closure+1;
         const $krep7_r7t8F_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.265019736 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException1_closure" {
     GHC.Exception.$fExceptionSomeException1_closure:
         const GHC.Exception.$fExceptionSomeException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionSomeException1_entry() //  [R1]
         { info_tbl: [(c7tR3,
                       label: GHC.Exception.$fExceptionSomeException1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tR3: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7tR4; else goto c7tR5;
       c7tR4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tR5: // global
           (_c7tQV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tQV::I64 == 0) goto c7tQX; else goto c7tQW;
       c7tQX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tQW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tQV::I64;
           I64[Sp - 24] = block_c7tQY_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionSomeException2_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 2959581124447004473;
           R2 = 13267649630904555636;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7tQY() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7tQY,
                       label: block_c7tQY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tQY: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7tQZ() args: 0, res: 0, upd: 0;
     }
 },
 _c7tQZ() //  []
         { info_tbl: [(c7tQZ,
                       label: block_c7tQZ_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tQZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tR8; else goto c7tR7;
       c7tR8: // global
           HpAlloc = 48;
           I64[Sp] = block_c7tQZ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7tR7: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.266765806 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_closure" {
     GHC.Exception.$fExceptionSomeException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionSomeException1_closure;
         const GHC.Exception.$fShowSomeException_closure+1;
         const GHC.Exception.$fExceptionSomeException_$ctoException_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Exception.$fExceptionSomeException_$cdisplayException_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.267485347 UTC

[section ""cstring" . GHC.Exception.$tcException3_bytes" {
     GHC.Exception.$tcException3_bytes:
         I8[] [69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.268159122 UTC

[section ""data" . GHC.Exception.$tcException2_closure" {
     GHC.Exception.$tcException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tcException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.268808461 UTC

[section ""data" . GHC.Exception.$tcException_closure" {
     GHC.Exception.$tcException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tcException2_closure+1;
         const GHC.Exception.$tcException1_closure+4;
         const 5005890060182917952;
         const 3990091377913498827;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.269603694 UTC

[section ""data" . $krep14_r7t8M_closure" {
     $krep14_r7t8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcException_closure+1;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.270279205 UTC

[section ""data" . $krep15_r7t8N_closure" {
     $krep15_r7t8N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7t8D_closure+4;
         const $krep14_r7t8M_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.270922151 UTC

[section ""data" . $krep16_r7t8O_closure" {
     $krep16_r7t8O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7t8L_closure+4;
         const $krep15_r7t8N_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.273476382 UTC

[section ""data" . $krep17_r7t8P_closure" {
     $krep17_r7t8P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7t8K_closure+4;
         const $krep16_r7t8O_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.274128488 UTC

[section ""data" . $krep18_r7t8Q_closure" {
     $krep18_r7t8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7t8I_closure+1;
         const $krep17_r7t8P_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.274776731 UTC

[section ""data" . GHC.Exception.$tc'C:Exception1_closure" {
     GHC.Exception.$tc'C:Exception1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7t8H_closure+1;
         const $krep18_r7t8Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.275435816 UTC

[section ""cstring" . GHC.Exception.$tc'C:Exception3_bytes" {
     GHC.Exception.$tc'C:Exception3_bytes:
         I8[] [39,67,58,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.275988056 UTC

[section ""data" . GHC.Exception.$tc'C:Exception2_closure" {
     GHC.Exception.$tc'C:Exception2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'C:Exception3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.276593514 UTC

[section ""data" . GHC.Exception.$tc'C:Exception_closure" {
     GHC.Exception.$tc'C:Exception_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'C:Exception2_closure+1;
         const GHC.Exception.$tc'C:Exception1_closure+4;
         const 10820889188949131006;
         const 4069342579395079435;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.27720943 UTC

[section ""data" . GHC.Exception.$tc'SomeException1_closure" {
     GHC.Exception.$tc'SomeException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r7t8M_closure+1;
         const $krep12_r7t8K_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.27784158 UTC

[section ""cstring" . GHC.Exception.$tc'SomeException3_bytes" {
     GHC.Exception.$tc'SomeException3_bytes:
         I8[] [39,83,111,109,101,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.278379808 UTC

[section ""data" . GHC.Exception.$tc'SomeException2_closure" {
     GHC.Exception.$tc'SomeException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'SomeException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.278968214 UTC

[section ""data" . GHC.Exception.$tc'SomeException_closure" {
     GHC.Exception.$tc'SomeException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'SomeException2_closure+1;
         const GHC.Exception.$tc'SomeException1_closure+4;
         const 16790271558916100413;
         const 1524061796422226345;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.279635781 UTC

[section ""cstring" . GHC.Exception.$fExceptionErrorCall4_bytes" {
     GHC.Exception.$fExceptionErrorCall4_bytes:
         I8[] [69,114,114,111,114,67,97,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.280236315 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall3_closure" {
     GHC.Exception.$fExceptionErrorCall3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionErrorCall4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.28081865 UTC

[section ""data" . GHC.Exception.$tcErrorCall_closure" {
     GHC.Exception.$tcErrorCall_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionErrorCall3_closure+1;
         const GHC.Types.krep$*_closure;
         const 4106747399780464988;
         const 1398564497631027702;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.281482403 UTC

[section ""data" . $krep19_r7t8R_closure" {
     $krep19_r7t8R_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcErrorCall_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.282139323 UTC

[section ""data" . $krep20_r7t8S_closure" {
     $krep20_r7t8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7t8B_closure+1;
         const $krep19_r7t8R_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.282789061 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation1_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7t8B_closure+1;
         const $krep20_r7t8S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.283412672 UTC

[section ""cstring" . GHC.Exception.$tc'ErrorCallWithLocation3_bytes" {
     GHC.Exception.$tc'ErrorCallWithLocation3_bytes:
         I8[] [39,69,114,114,111,114,67,97,108,108,87,105,116,104,76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.283969678 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation2_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'ErrorCallWithLocation3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.284592334 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'ErrorCallWithLocation2_closure+1;
         const GHC.Exception.$tc'ErrorCallWithLocation1_closure+4;
         const 14789594717732302892;
         const 17317233711857548947;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.286009639 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall2_closure" {
     GHC.Exception.$fExceptionErrorCall2_closure:
         const GHC.Exception.$fExceptionErrorCall2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall2_entry() //  [R1]
         { info_tbl: [(c7tRm,
                       label: GHC.Exception.$fExceptionErrorCall2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRm: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7tRn; else goto c7tRo;
       c7tRn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tRo: // global
           (_c7tRe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tRe::I64 == 0) goto c7tRg; else goto c7tRf;
       c7tRg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tRf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tRe::I64;
           I64[Sp - 24] = block_c7tRh_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionErrorCall3_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 1398564497631027702;
           R2 = 4106747399780464988;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7tRh() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7tRh,
                       label: block_c7tRh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRh: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7tRi() args: 0, res: 0, upd: 0;
     }
 },
 _c7tRi() //  []
         { info_tbl: [(c7tRi,
                       label: block_c7tRi_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRi: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tRr; else goto c7tRq;
       c7tRr: // global
           HpAlloc = 48;
           I64[Sp] = block_c7tRi_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7tRq: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.287637518 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException16_bytes" {
     GHC.Exception.$fExceptionArithException16_bytes:
         I8[] [65,114,105,116,104,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.288222583 UTC

[section ""data" . GHC.Exception.$fExceptionArithException15_closure" {
     GHC.Exception.$fExceptionArithException15_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionArithException16_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.288873068 UTC

[section ""data" . GHC.Exception.$tcArithException_closure" {
     GHC.Exception.$tcArithException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionArithException15_closure+1;
         const GHC.Types.krep$*_closure;
         const 11275459110071720610;
         const 9614411694476093403;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.289977092 UTC

[section ""data" . GHC.Exception.$tc'Denormal1_closure" {
     GHC.Exception.$tc'Denormal1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcArithException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.290643123 UTC

[section ""cstring" . GHC.Exception.$tc'Overflow2_bytes" {
     GHC.Exception.$tc'Overflow2_bytes:
         I8[] [39,79,118,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.291253956 UTC

[section ""data" . GHC.Exception.$tc'Overflow1_closure" {
     GHC.Exception.$tc'Overflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Overflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.29186468 UTC

[section ""data" . GHC.Exception.$tc'Overflow_closure" {
     GHC.Exception.$tc'Overflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Overflow1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 868785644779029835;
         const 15802889491790460831;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.292464838 UTC

[section ""cstring" . GHC.Exception.$tc'Underflow2_bytes" {
     GHC.Exception.$tc'Underflow2_bytes:
         I8[] [39,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.293054455 UTC

[section ""data" . GHC.Exception.$tc'Underflow1_closure" {
     GHC.Exception.$tc'Underflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Underflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.29369019 UTC

[section ""data" . GHC.Exception.$tc'Underflow_closure" {
     GHC.Exception.$tc'Underflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Underflow1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 12747416996077452468;
         const 11539058234473019035;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.294345943 UTC

[section ""cstring" . GHC.Exception.$tc'LossOfPrecision2_bytes" {
     GHC.Exception.$tc'LossOfPrecision2_bytes:
         I8[] [39,76,111,115,115,79,102,80,114,101,99,105,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.294969932 UTC

[section ""data" . GHC.Exception.$tc'LossOfPrecision1_closure" {
     GHC.Exception.$tc'LossOfPrecision1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'LossOfPrecision2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.295575356 UTC

[section ""data" . GHC.Exception.$tc'LossOfPrecision_closure" {
     GHC.Exception.$tc'LossOfPrecision_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'LossOfPrecision1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 6720322370825216637;
         const 1452601476582167815;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.296267992 UTC

[section ""cstring" . GHC.Exception.$tc'DivideByZero2_bytes" {
     GHC.Exception.$tc'DivideByZero2_bytes:
         I8[] [39,68,105,118,105,100,101,66,121,90,101,114,111]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.296865656 UTC

[section ""data" . GHC.Exception.$tc'DivideByZero1_closure" {
     GHC.Exception.$tc'DivideByZero1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'DivideByZero2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.297490564 UTC

[section ""data" . GHC.Exception.$tc'DivideByZero_closure" {
     GHC.Exception.$tc'DivideByZero_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'DivideByZero1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 17029085746322105003;
         const 1338659094893400307;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.298134225 UTC

[section ""cstring" . GHC.Exception.$tc'Denormal3_bytes" {
     GHC.Exception.$tc'Denormal3_bytes:
         I8[] [39,68,101,110,111,114,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.298664776 UTC

[section ""data" . GHC.Exception.$tc'Denormal2_closure" {
     GHC.Exception.$tc'Denormal2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Denormal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.299253437 UTC

[section ""data" . GHC.Exception.$tc'Denormal_closure" {
     GHC.Exception.$tc'Denormal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Denormal2_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 3563997708427691429;
         const 10171683790716248215;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.29991568 UTC

[section ""cstring" . GHC.Exception.$tc'RatioZeroDenominator2_bytes" {
     GHC.Exception.$tc'RatioZeroDenominator2_bytes:
         I8[] [39,82,97,116,105,111,90,101,114,111,68,101,110,111,109,105,110,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.300452205 UTC

[section ""data" . GHC.Exception.$tc'RatioZeroDenominator1_closure" {
     GHC.Exception.$tc'RatioZeroDenominator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'RatioZeroDenominator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.301099514 UTC

[section ""data" . GHC.Exception.$tc'RatioZeroDenominator_closure" {
     GHC.Exception.$tc'RatioZeroDenominator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'RatioZeroDenominator1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 12115498985276514171;
         const 17178069790958498690;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.303626004 UTC

[section ""data" . GHC.Exception.$fExceptionArithException14_closure" {
     GHC.Exception.$fExceptionArithException14_closure:
         const GHC.Exception.$fExceptionArithException14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException14_entry() //  [R1]
         { info_tbl: [(c7tRF,
                       label: GHC.Exception.$fExceptionArithException14_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRF: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7tRG; else goto c7tRH;
       c7tRG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tRH: // global
           (_c7tRx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tRx::I64 == 0) goto c7tRz; else goto c7tRy;
       c7tRz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tRy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tRx::I64;
           I64[Sp - 24] = block_c7tRA_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionArithException15_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 9614411694476093403;
           R2 = 11275459110071720610;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7tRA() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7tRA,
                       label: block_c7tRA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRA: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7tRB() args: 0, res: 0, upd: 0;
     }
 },
 _c7tRB() //  []
         { info_tbl: [(c7tRB,
                       label: block_c7tRB_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tRK; else goto c7tRJ;
       c7tRK: // global
           HpAlloc = 48;
           I64[Sp] = block_c7tRB_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7tRJ: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.30582046 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cfromException_closure" {
     GHC.Exception.$fExceptionErrorCall_$cfromException_closure:
         const GHC.Exception.$fExceptionErrorCall_$cfromException_info;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall_$cfromException_entry() //  [R2]
         { info_tbl: [(c7tRU,
                       label: GHC.Exception.$fExceptionErrorCall_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tRY; else goto c7tRZ;
       c7tRY: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tRZ: // global
           I64[Sp - 8] = block_c7tRR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tSk; else goto c7tRS;
       u7tSk: // global
           call _c7tRR(R1) args: 0, res: 0, upd: 0;
       c7tRS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tRR() //  [R1]
         { info_tbl: [(c7tRR,
                       label: block_c7tRR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRR: // global
           I64[Sp - 8] = block_c7tRX_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tRX() //  [R1]
         { info_tbl: [(c7tRX,
                       label: block_c7tRX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tRX: // global
           I64[Sp] = block_c7tS4_info;
           R3 = GHC.Exception.$fExceptionErrorCall2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tS4() //  [R1]
         { info_tbl: [(c7tS4,
                       label: block_c7tS4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tS4: // global
           if (R1 & 7 == 1) goto c7tSb; else goto c7tSf;
       c7tSb: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tSf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7tSi; else goto c7tSh;
       c7tSi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7tSh: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.307481823 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_closure" {
     GHC.Exception.$fExceptionErrorCall_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionErrorCall2_closure;
         const GHC.Exception.$fShowErrorCall_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$cfromException_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.Exception.$fExceptionErrorCall_$ctoException_closure" {
     GHC.Exception.$fExceptionErrorCall_$ctoException_closure:
         const GHC.Exception.$fExceptionErrorCall_$ctoException_info;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall_$ctoException_entry() //  [R2]
         { info_tbl: [(c7tSq,
                       label: GHC.Exception.$fExceptionErrorCall_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tSq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7tSu; else goto c7tSt;
       c7tSu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tSt: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionErrorCall_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.308600259 UTC

[section ""data" . GHC.Exception.errorCallException_closure" {
     GHC.Exception.errorCallException_closure:
         const GHC.Exception.errorCallException_info;
         const 0;
 },
 GHC.Exception.errorCallException_entry() //  [R2]
         { info_tbl: [(c7tSA,
                       label: GHC.Exception.errorCallException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tSA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7tSE; else goto c7tSD;
       c7tSE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.errorCallException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tSD: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 15;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.309508175 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException3_bytes" {
     GHC.Exception.errorCallWithCallStackException3_bytes:
         I8[] [58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.310064335 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException2_bytes" {
     GHC.Exception.errorCallWithCallStackException2_bytes:
         I8[] [32,105,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.312348692 UTC

[section ""data" . GHC.Exception.$wprettySrcLoc_closure" {
     GHC.Exception.$wprettySrcLoc_closure:
         const GHC.Exception.$wprettySrcLoc_info;
 },
 sat_s7teg_entry() //  [R1]
         { info_tbl: [(c7tTp,
                       label: sat_s7teg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tTp: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7teh_entry() //  [R1]
         { info_tbl: [(c7tTs,
                       label: sat_s7teh_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tTs: // global
           _s7teh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7tTt; else goto c7tTu;
       c7tTu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7tTw; else goto c7tTv;
       c7tTw: // global
           HpAlloc = 24;
           goto c7tTt;
       c7tTt: // global
           R1 = _s7teh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tTv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7teh::P64;
           _s7tdZ::P64 = P64[_s7teh::P64 + 16];
           _s7te0::P64 = P64[_s7teh::P64 + 24];
           I64[Hp - 16] = sat_s7teg_info;
           P64[Hp] = _s7te0::P64;
           R3 = Hp - 16;
           R2 = _s7tdZ::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tei_entry() //  [R1]
         { info_tbl: [(c7tTx,
                       label: sat_s7tei_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tTx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7tTB; else goto c7tTA;
       c7tTB: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tTA: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s7teh_info;
           P64[Hp - 8] = _s7tdZ::P64;
           P64[Hp] = _s7te0::P64;
           R3 = Hp - 24;
           R2 = GHC.Exception.errorCallWithCallStackException2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tej_entry() //  [R1]
         { info_tbl: [(c7tTC,
                       label: sat_s7tej_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tTC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7tTE; else goto c7tTF;
       c7tTE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tTF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c7tT6_info;
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s7tdZ::P64;
           P64[Sp - 24] = _s7te0::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7tTK; else goto c7tT7;
       u7tTK: // global
           call _c7tT6(R1) args: 0, res: 0, upd: 0;
       c7tT7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7tT6() //  [R1]
         { info_tbl: [(c7tT6,
                       label: block_c7tT6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tT6: // global
           I64[Sp] = block_c7tTb_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7tTb() //  [R1, R2]
         { info_tbl: [(c7tTb,
                       label: block_c7tTb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tTb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7tTJ; else goto c7tTI;
       c7tTJ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7tTI: // global
           I64[Hp - 48] = sat_s7tei_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tek_entry() //  [R1]
         { info_tbl: [(c7tTL,
                       label: sat_s7tek_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tTL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7tTP; else goto c7tTO;
       c7tTP: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tTO: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te3::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s7tej_info;
           P64[Hp - 16] = _s7tdZ::P64;
           P64[Hp - 8] = _s7te0::P64;
           P64[Hp] = _s7te3::P64;
           R3 = Hp - 32;
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tel_entry() //  [R1]
         { info_tbl: [(c7tTQ,
                       label: sat_s7tel_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tTQ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7tTS; else goto c7tTT;
       c7tTS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tTT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c7tSR_info;
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te3::P64 = P64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s7tdZ::P64;
           P64[Sp - 32] = _s7te0::P64;
           P64[Sp - 24] = _s7te3::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u7tTY; else goto c7tSS;
       u7tTY: // global
           call _c7tSR(R1) args: 0, res: 0, upd: 0;
       c7tSS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7tSR() //  [R1]
         { info_tbl: [(c7tSR,
                       label: block_c7tSR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tSR: // global
           I64[Sp] = block_c7tSW_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7tSW() //  [R1, R2]
         { info_tbl: [(c7tSW,
                       label: block_c7tSW_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tSW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7tTX; else goto c7tTW;
       c7tTX: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7tTW: // global
           I64[Hp - 56] = sat_s7tek_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 14;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tem_entry() //  [R1]
         { info_tbl: [(c7tTZ,
                       label: sat_s7tem_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tTZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tU3; else goto c7tU2;
       c7tU3: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tU2: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te2::P64 = P64[R1 + 32];
           _s7te3::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_s7tel_info;
           P64[Hp - 24] = _s7tdZ::P64;
           P64[Hp - 16] = _s7te0::P64;
           P64[Hp - 8] = _s7te2::P64;
           P64[Hp] = _s7te3::P64;
           R3 = Hp - 40;
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exception.$wprettySrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7tU4,
                       label: GHC.Exception.$wprettySrcLoc_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tU4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tU8; else goto c7tU7;
       c7tU8: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$wprettySrcLoc_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tU7: // global
           I64[Hp - 40] = sat_s7tem_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R3 = Hp - 40;
           R2 = R4;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.316746322 UTC

[section ""data" . GHC.Exception.prettySrcLoc_closure" {
     GHC.Exception.prettySrcLoc_closure:
         const GHC.Exception.prettySrcLoc_info;
 },
 GHC.Exception.prettySrcLoc_entry() //  [R2]
         { info_tbl: [(c7tUg,
                       label: GHC.Exception.prettySrcLoc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tUg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tUh; else goto c7tUi;
       c7tUh: // global
           R2 = R2;
           R1 = GHC.Exception.prettySrcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tUi: // global
           I64[Sp - 8] = block_c7tUd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tUm; else goto c7tUe;
       u7tUm: // global
           call _c7tUd(R1) args: 0, res: 0, upd: 0;
       c7tUe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tUd() //  [R1]
         { info_tbl: [(c7tUd,
                       label: block_c7tUd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tUd: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$wprettySrcLoc_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.317841179 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException7_bytes" {
     GHC.Exception.errorCallWithCallStackException7_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,72,97,115,67,97,108,108,83,116,97,99,107,41,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.318632485 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException6_closure" {
     GHC.Exception.errorCallWithCallStackException6_closure:
         const GHC.Exception.errorCallWithCallStackException6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException6_entry() //  [R1]
         { info_tbl: [(c7tUt,
                       label: GHC.Exception.errorCallWithCallStackException6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tUt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tUu; else goto c7tUv;
       c7tUu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tUv: // global
           (_c7tUq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tUq::I64 == 0) goto c7tUs; else goto c7tUr;
       c7tUs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tUr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tUq::I64;
           R2 = GHC.Exception.errorCallWithCallStackException7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.319570359 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException4_bytes" {
     GHC.Exception.errorCallWithCallStackException4_bytes:
         I8[] [44,32,99,97,108,108,101,100,32,97,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.320987102 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException1_closure" {
     GHC.Exception.errorCallWithCallStackException1_closure:
         const GHC.Exception.errorCallWithCallStackException1_info;
 },
 sat_s7teI_entry() //  [R1]
         { info_tbl: [(c7tUU,
                       label: sat_s7teI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tUU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tUV; else goto c7tUW;
       c7tUV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tUW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7tUR_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7tV0; else goto c7tUS;
       u7tV0: // global
           call _c7tUR(R1) args: 0, res: 0, upd: 0;
       c7tUS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7tUR() //  [R1]
         { info_tbl: [(c7tUR,
                       label: block_c7tUR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tUR: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$wprettySrcLoc_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7teJ_entry() //  [R1]
         { info_tbl: [(c7tV1,
                       label: sat_s7teJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tV1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7tV5; else goto c7tV4;
       c7tV5: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tV4: // global
           _s7tez::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s7teI_info;
           P64[Hp] = _s7tez::P64;
           R3 = Hp - 16;
           R2 = GHC.Exception.errorCallWithCallStackException4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7teK_entry() //  [R1]
         { info_tbl: [(c7tV6,
                       label: sat_s7teK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tV6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tV7; else goto c7tV8;
       c7tV7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tV8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7tUE_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7tVc; else goto c7tUF;
       u7tVc: // global
           call _c7tUE(R1) args: 0, res: 0, upd: 0;
       c7tUF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7tUE() //  [R1]
         { info_tbl: [(c7tUE,
                       label: block_c7tUE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tUE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7tVb; else goto c7tVa;
       c7tVb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7tVa: // global
           _s7tey::P64 = P64[R1 + 7];
           _s7tez::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s7teJ_info;
           P64[Hp] = _s7tez::P64;
           R3 = Hp - 16;
           R2 = _s7tey::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.errorCallWithCallStackException1_entry() //  [R2]
         { info_tbl: [(c7tVd,
                       label: GHC.Exception.errorCallWithCallStackException1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tVd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7tVh; else goto c7tVg;
       c7tVh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.errorCallWithCallStackException1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tVg: // global
           I64[Hp - 16] = sat_s7teK_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Exception.errorCallWithCallStackException5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.323631433 UTC

[section ""data" . GHC.Exception.prettyCallStackLines_closure" {
     GHC.Exception.prettyCallStackLines_closure:
         const GHC.Exception.prettyCallStackLines_info;
         const 0;
 },
 sat_s7teP_entry() //  [R1]
         { info_tbl: [(c7tVv,
                       label: sat_s7teP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tVv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tVw; else goto c7tVx;
       c7tVw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tVx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException1_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.prettyCallStackLines_entry() //  [R2]
         { info_tbl: [(c7tVC,
                       label: GHC.Exception.prettyCallStackLines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tVC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tVD; else goto c7tVE;
       c7tVD: // global
           R2 = R2;
           R1 = GHC.Exception.prettyCallStackLines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tVE: // global
           I64[Sp - 8] = block_c7tVm_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tVm() //  [R1]
         { info_tbl: [(c7tVm,
                       label: block_c7tVm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tVm: // global
           if (R1 & 7 == 1) goto c7tVz; else goto c7tVA;
       c7tVz: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tVA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tVK; else goto c7tVJ;
       c7tVK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7tVJ: // global
           I64[Hp - 40] = sat_s7teP_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.325054903 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException8_bytes" {
     GHC.Exception.errorCallWithCallStackException8_bytes:
         I8[] [10]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.32584858 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException_xs_closure" {
     GHC.Exception.errorCallWithCallStackException_xs_closure:
         const GHC.Exception.errorCallWithCallStackException_xs_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException_xs_entry() //  [R1]
         { info_tbl: [(c7tVR,
                       label: GHC.Exception.errorCallWithCallStackException_xs_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tVR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tVS; else goto c7tVT;
       c7tVS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tVT: // global
           (_c7tVO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tVO::I64 == 0) goto c7tVQ; else goto c7tVP;
       c7tVQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tVP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tVO::I64;
           R2 = GHC.Exception.errorCallWithCallStackException8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.327224776 UTC

[section ""data" . GHC.Exception.prettyCallStack_closure" {
     GHC.Exception.prettyCallStack_closure:
         const GHC.Exception.prettyCallStack_info;
         const 0;
 },
 sat_s7teV_entry() //  [R1]
         { info_tbl: [(c7tW9,
                       label: sat_s7teV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tW9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tWa; else goto c7tWb;
       c7tWa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tWb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7tW7_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException1_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7tW7() //  [R1]
         { info_tbl: [(c7tW7,
                       label: block_c7tW7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tW7: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.prettyCallStack_entry() //  [R2]
         { info_tbl: [(c7tWj,
                       label: GHC.Exception.prettyCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tWj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7tWk; else goto c7tWl;
       c7tWk: // global
           R2 = R2;
           R1 = GHC.Exception.prettyCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tWl: // global
           I64[Sp - 8] = block_c7tVY_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tVY() //  [R1]
         { info_tbl: [(c7tVY,
                       label: block_c7tVY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tVY: // global
           if (R1 & 7 == 1) goto c7tWg; else goto c7tWh;
       c7tWg: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tWh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tWr; else goto c7tWq;
       c7tWr: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7tWq: // global
           I64[Hp - 40] = sat_s7teV_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.33362694 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException_closure" {
     GHC.Exception.errorCallWithCallStackException_closure:
         const GHC.Exception.errorCallWithCallStackException_info;
         const 0;
 },
 sat_s7tf7_entry() //  [R1]
         { info_tbl: [(c7tWW,
                       label: sat_s7tf7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tWW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tWX; else goto c7tWY;
       c7tWX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tWY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7tWU_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7tWU() //  [R1]
         { info_tbl: [(c7tWU,
                       label: block_c7tWU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tWU: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 n_s7tf2_entry() //  [R1]
         { info_tbl: [(c7tX6,
                       label: n_s7tf2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tX6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tX7; else goto c7tX8;
       c7tX7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tX8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7tWK_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7tXf; else goto c7tWL;
       u7tXf: // global
           call _c7tWK(R1) args: 0, res: 0, upd: 0;
       c7tWL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7tWK() //  [R1]
         { info_tbl: [(c7tWK,
                       label: block_c7tWK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tWK: // global
           if (R1 & 7 == 1) goto c7tX3; else goto c7tX4;
       c7tX3: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7tX4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tXe; else goto c7tXd;
       c7tXe: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7tXd: // global
           I64[Hp - 40] = sat_s7tf7_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfc_entry() //  [R1]
         { info_tbl: [(c7tXu,
                       label: sat_s7tfc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tXu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tXv; else goto c7tXw;
       c7tXv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tXw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfl_entry() //  [R1]
         { info_tbl: [(c7tXT,
                       label: sat_s7tfl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tXT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tXU; else goto c7tXV;
       c7tXU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tXV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Exception.errorCallWithCallStackException1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 go_s7tfg_entry() //  [R1, R2]
         { info_tbl: [(c7tY0,
                       label: go_s7tfg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tY0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tY1; else goto c7tY2;
       c7tY1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tY2: // global
           I64[Sp - 24] = block_c7tXI_info;
           _s7tfg::P64 = R1;
           _s7tf2::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s7tf2::P64;
           P64[Sp - 8] = _s7tfg::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7tY9; else goto c7tXJ;
       u7tY9: // global
           call _c7tXI(R1) args: 0, res: 0, upd: 0;
       c7tXJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tXI() //  [R1]
         { info_tbl: [(c7tXI,
                       label: block_c7tXI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tXI: // global
           if (R1 & 7 == 1) goto c7tXX; else goto c7tXY;
       c7tXX: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7tXY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c7tY8; else goto c7tY7;
       c7tY8: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7tY7: // global
           _s7tfj::P64 = P64[R1 + 6];
           _s7tfk::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _s7tfk::P64;
           I64[Hp - 40] = sat_s7tfl_info;
           P64[Hp - 24] = _s7tfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tfo_entry() //  [R1]
         { info_tbl: [(c7tYc,
                       label: sat_s7tfo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tYc: // global
           _s7tfo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c7tYd; else goto c7tYe;
       c7tYe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7tYg; else goto c7tYf;
       c7tYg: // global
           HpAlloc = 16;
           goto c7tYd;
       c7tYd: // global
           R1 = _s7tfo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tYf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfo::P64;
           _s7tf2::P64 = P64[_s7tfo::P64 + 16];
           _s7tf8::P64 = P64[_s7tfo::P64 + 24];
           I64[Hp - 8] = go_s7tfg_info;
           P64[Hp] = _s7tf2::P64;
           I64[Sp - 24] = block_c7tYa_info;
           R2 = _s7tf8::P64;
           R1 = Hp - 7;
           Sp = Sp - 24;
           call go_s7tfg_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7tYa() //  [R1]
         { info_tbl: [(c7tYa,
                       label: block_c7tYa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tYa: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfq_entry() //  [R1]
         { info_tbl: [(c7tYo,
                       label: sat_s7tfq_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tYo: // global
           _s7tfq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c7tYp; else goto c7tYq;
       c7tYq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7tYs; else goto c7tYr;
       c7tYs: // global
           HpAlloc = 24;
           goto c7tYp;
       c7tYp: // global
           R1 = _s7tfq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tYr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfq::P64;
           _s7teY::P64 = P64[_s7tfq::P64 + 16];
           _s7tf1::P64 = P64[_s7tfq::P64 + 24];
           I64[Hp - 16] = n_s7tf2_info;
           P64[Hp] = _s7tf1::P64;
           I64[Sp - 32] = block_c7tXg_info;
           R2 = _s7teY::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7tXg() //  [R1]
         { info_tbl: [(c7tXg,
                       label: block_c7tXg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tXg: // global
           _c7tWG::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7tYl; else goto c7tYm;
       c7tYl: // global
           I64[Sp + 8] = block_c7tXk_info;
           R1 = _c7tWG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7tYI; else goto c7tXl;
       u7tYI: // global
           call _c7tXk(R1) args: 0, res: 0, upd: 0;
       c7tXl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c7tYm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7tYG; else goto c7tYF;
       c7tYG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7tYF: // global
           I64[Hp - 48] = sat_s7tfo_info;
           P64[Hp - 32] = _c7tWG::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 _c7tXk() //  [R1]
         { info_tbl: [(c7tXk,
                       label: block_c7tXk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tXk: // global
           if (R1 & 7 == 1) goto c7tYx; else goto c7tYz;
       c7tYx: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7tYz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7tYC; else goto c7tYB;
       c7tYC: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7tYB: // global
           _s7tfa::P64 = P64[R1 + 6];
           _s7tfb::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s7tfc_info;
           P64[Hp - 24] = _s7tfb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s7tfa::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfs_entry() //  [R1]
         { info_tbl: [(c7tYK,
                       label: sat_s7tfs_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tYK: // global
           _s7tfs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7tYL; else goto c7tYM;
       c7tYM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7tYO; else goto c7tYN;
       c7tYO: // global
           HpAlloc = 56;
           goto c7tYL;
       c7tYL: // global
           R1 = _s7tfs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tYN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfs::P64;
           _s7teX::P64 = P64[_s7tfs::P64 + 16];
           _s7teY::P64 = P64[_s7tfs::P64 + 24];
           _s7tf1::P64 = P64[_s7tfs::P64 + 32];
           I64[Hp - 48] = sat_s7tfq_info;
           P64[Hp - 32] = _s7teY::P64;
           P64[Hp - 24] = _s7tf1::P64;
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = _s7teX::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.errorCallWithCallStackException_entry() //  [R2, R3]
         { info_tbl: [(c7tYS,
                       label: GHC.Exception.errorCallWithCallStackException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tYS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7tYT; else goto c7tYU;
       c7tYT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7tYU: // global
           I64[Sp - 24] = block_c7tWw_info;
           R1 = GHC.Stack.CCS.currentCallStack_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tWw() //  [R1]
         { info_tbl: [(c7tWw,
                       label: block_c7tWw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tWw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7tYX; else goto c7tYW;
       c7tYX: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7tYW: // global
           I64[Hp - 32] = sat_s7tfs_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = (Hp + -32) & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.339440888 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cfromException_closure" {
     GHC.Exception.$fExceptionArithException_$cfromException_closure:
         const GHC.Exception.$fExceptionArithException_$cfromException_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cfromException_entry() //  [R2]
         { info_tbl: [(c7tZ6,
                       label: GHC.Exception.$fExceptionArithException_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tZ6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tZa; else goto c7tZb;
       c7tZa: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionArithException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tZb: // global
           I64[Sp - 8] = block_c7tZ3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7tZw; else goto c7tZ4;
       u7tZw: // global
           call _c7tZ3(R1) args: 0, res: 0, upd: 0;
       c7tZ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7tZ3() //  [R1]
         { info_tbl: [(c7tZ3,
                       label: block_c7tZ3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tZ3: // global
           I64[Sp - 8] = block_c7tZ9_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tZ9() //  [R1]
         { info_tbl: [(c7tZ9,
                       label: block_c7tZ9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tZ9: // global
           I64[Sp] = block_c7tZg_info;
           R3 = GHC.Exception.$fExceptionArithException14_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7tZg() //  [R1]
         { info_tbl: [(c7tZg,
                       label: block_c7tZg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tZg: // global
           if (R1 & 7 == 1) goto c7tZn; else goto c7tZr;
       c7tZn: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7tZr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7tZu; else goto c7tZt;
       c7tZu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7tZt: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.341065421 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_closure" {
     GHC.Exception.$fExceptionArithException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionArithException14_closure;
         const GHC.Exception.$fShowArithException_closure+1;
         const GHC.Exception.$fExceptionArithException_$ctoException_closure+1;
         const GHC.Exception.$fExceptionArithException_$cfromException_closure+1;
         const GHC.Exception.$fExceptionArithException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.Exception.$fExceptionArithException_$ctoException_closure" {
     GHC.Exception.$fExceptionArithException_$ctoException_closure:
         const GHC.Exception.$fExceptionArithException_$ctoException_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$ctoException_entry() //  [R2]
         { info_tbl: [(c7tZC,
                       label: GHC.Exception.$fExceptionArithException_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tZC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7tZG; else goto c7tZF;
       c7tZG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionArithException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7tZF: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionArithException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.342180771 UTC

[section ""data" . GHC.Exception.underflowException_closure" {
     GHC.Exception.underflowException_closure:
         const GHC.Exception.underflowException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.underflowException_entry() //  [R1]
         { info_tbl: [(c7tZN,
                       label: GHC.Exception.underflowException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tZN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tZO; else goto c7tZP;
       c7tZO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tZP: // global
           (_c7tZK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tZK::I64 == 0) goto c7tZM; else goto c7tZL;
       c7tZM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tZL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tZK::I64;
           R2 = GHC.Exception.Underflow_closure+2;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.343260315 UTC

[section ""data" . GHC.Exception.ratioZeroDenomException_closure" {
     GHC.Exception.ratioZeroDenomException_closure:
         const GHC.Exception.ratioZeroDenomException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.ratioZeroDenomException_entry() //  [R1]
         { info_tbl: [(c7tZW,
                       label: GHC.Exception.ratioZeroDenomException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7tZW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7tZX; else goto c7tZY;
       c7tZX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7tZY: // global
           (_c7tZT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7tZT::I64 == 0) goto c7tZV; else goto c7tZU;
       c7tZV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7tZU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7tZT::I64;
           R2 = GHC.Exception.RatioZeroDenominator_closure+6;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.344350657 UTC

[section ""data" . GHC.Exception.overflowException_closure" {
     GHC.Exception.overflowException_closure:
         const GHC.Exception.overflowException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.overflowException_entry() //  [R1]
         { info_tbl: [(c7u05,
                       label: GHC.Exception.overflowException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u05: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u06; else goto c7u07;
       c7u06: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u07: // global
           (_c7u02::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7u02::I64 == 0) goto c7u04; else goto c7u03;
       c7u04: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7u03: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7u02::I64;
           R2 = GHC.Exception.Overflow_closure+1;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.345480096 UTC

[section ""data" . GHC.Exception.divZeroException_closure" {
     GHC.Exception.divZeroException_closure:
         const GHC.Exception.divZeroException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.divZeroException_entry() //  [R1]
         { info_tbl: [(c7u0e,
                       label: GHC.Exception.divZeroException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u0f; else goto c7u0g;
       c7u0f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u0g: // global
           (_c7u0b::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7u0b::I64 == 0) goto c7u0d; else goto c7u0c;
       c7u0d: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7u0c: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7u0b::I64;
           R2 = GHC.Exception.DivideByZero_closure+4;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.346554921 UTC

[section ""data" . GHC.Exception.SomeException_closure" {
     GHC.Exception.SomeException_closure:
         const GHC.Exception.SomeException_info;
 },
 GHC.Exception.SomeException_entry() //  [R2, R3]
         { info_tbl: [(c7u0m,
                       label: GHC.Exception.SomeException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7u0q; else goto c7u0p;
       c7u0q: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.SomeException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u0p: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.347411295 UTC

[section ""data" . GHC.Exception.Overflow_closure" {
     GHC.Exception.Overflow_closure:
         const GHC.Exception.Overflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.347986953 UTC

[section ""data" . GHC.Exception.Underflow_closure" {
     GHC.Exception.Underflow_closure:
         const GHC.Exception.Underflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.348547792 UTC

[section ""data" . GHC.Exception.LossOfPrecision_closure" {
     GHC.Exception.LossOfPrecision_closure:
         const GHC.Exception.LossOfPrecision_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.349081346 UTC

[section ""data" . GHC.Exception.DivideByZero_closure" {
     GHC.Exception.DivideByZero_closure:
         const GHC.Exception.DivideByZero_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.349640034 UTC

[section ""data" . GHC.Exception.Denormal_closure" {
     GHC.Exception.Denormal_closure:
         const GHC.Exception.Denormal_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.350189548 UTC

[section ""data" . GHC.Exception.RatioZeroDenominator_closure" {
     GHC.Exception.RatioZeroDenominator_closure:
         const GHC.Exception.RatioZeroDenominator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.350932697 UTC

[section ""data" . GHC.Exception.ErrorCallWithLocation_closure" {
     GHC.Exception.ErrorCallWithLocation_closure:
         const GHC.Exception.ErrorCallWithLocation_info;
 },
 GHC.Exception.ErrorCallWithLocation_entry() //  [R2, R3]
         { info_tbl: [(c7u0w,
                       label: GHC.Exception.ErrorCallWithLocation_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7u0A; else goto c7u0z;
       c7u0A: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.ErrorCallWithLocation_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u0z: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.352111212 UTC

[section ""data" . GHC.Exception.C:Exception_closure" {
     GHC.Exception.C:Exception_closure:
         const GHC.Exception.C:Exception_info;
 },
 GHC.Exception.C:Exception_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7u0G,
                       label: GHC.Exception.C:Exception_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0G: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7u0K; else goto c7u0J;
       c7u0K: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.C:Exception_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u0J: // global
           I64[Hp - 40] = GHC.Exception.C:Exception_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.353107577 UTC

[GHC.Exception.SomeException_con_entry() //  [R1]
         { info_tbl: [(c7u0L,
                       label: GHC.Exception.SomeException_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,83,111,109,101,69,120,99,101,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0L: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.353905785 UTC

[section ""relreadonly" . GHC.Exception.ArithException_closure_tbl" {
     GHC.Exception.ArithException_closure_tbl:
         const GHC.Exception.Overflow_closure+1;
         const GHC.Exception.Underflow_closure+2;
         const GHC.Exception.LossOfPrecision_closure+3;
         const GHC.Exception.DivideByZero_closure+4;
         const GHC.Exception.Denormal_closure+5;
         const GHC.Exception.RatioZeroDenominator_closure+6;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.35457331 UTC

[GHC.Exception.Overflow_con_entry() //  [R1]
         { info_tbl: [(c7u0M,
                       label: GHC.Exception.Overflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,79,118,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0M: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.357087797 UTC

[GHC.Exception.Underflow_con_entry() //  [R1]
         { info_tbl: [(c7u0N,
                       label: GHC.Exception.Underflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0N: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.357866324 UTC

[GHC.Exception.LossOfPrecision_con_entry() //  [R1]
         { info_tbl: [(c7u0O,
                       label: GHC.Exception.LossOfPrecision_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,76,111,115,115,79,102,80,114,101,99,105,115,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0O: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.358698171 UTC

[GHC.Exception.DivideByZero_con_entry() //  [R1]
         { info_tbl: [(c7u0P,
                       label: GHC.Exception.DivideByZero_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,68,105,118,105,100,101,66,121,90,101,114,111]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0P: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.359421734 UTC

[GHC.Exception.Denormal_con_entry() //  [R1]
         { info_tbl: [(c7u0Q,
                       label: GHC.Exception.Denormal_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,68,101,110,111,114,109,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0Q: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.360126759 UTC

[GHC.Exception.RatioZeroDenominator_con_entry() //  [R1]
         { info_tbl: [(c7u0R,
                       label: GHC.Exception.RatioZeroDenominator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,82,97,116,105,111,90,101,114,111,68,101,110,111,109,105,110,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0R: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.360864363 UTC

[GHC.Exception.ErrorCallWithLocation_con_entry() //  [R1]
         { info_tbl: [(c7u0S,
                       label: GHC.Exception.ErrorCallWithLocation_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,69,114,114,111,114,67,97,108,108,87,105,116,104,76,111,99,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0S: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.361678939 UTC

[GHC.Exception.C:Exception_con_entry() //  [R1]
         { info_tbl: [(c7u0T,
                       label: GHC.Exception.C:Exception_con_info
                       rep:HeapRep 5 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,67,58,69,120,99,101,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0T: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.36239412 UTC

[section ""relreadonly" . S7tkS_srt" {
     S7tkS_srt:
         const GHC.Exception.$w$cshowsPrec_closure;
         const GHC.Exception.$fExceptionArithException2_closure;
         const GHC.Exception.$fExceptionArithException4_closure;
         const GHC.Exception.$fExceptionArithException6_closure;
         const GHC.Exception.$fExceptionArithException8_closure;
         const GHC.Exception.$fExceptionArithException10_closure;
         const GHC.Exception.$fExceptionArithException12_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.Exception.$dmfromException_closure;
         const GHC.Exception.errorCallWithCallStackException10_closure;
         const GHC.Exception.errorCallWithCallStackException9_closure;
         const GHC.Exception.showCCSStack_closure;
         const GHC.Exception.errorCallWithCallStackException11_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.Exception.$fExceptionErrorCall_$cfromException_closure;
         const GHC.Exception.$fExceptionErrorCall2_closure;
         const GHC.Exception.$fExceptionErrorCall_closure;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
         const GHC.Exception.errorCallException_closure;
         const GHC.Exception.prettyCallStackLines_closure;
         const GHC.Exception.errorCallWithCallStackException6_closure;
         const GHC.Exception.errorCallWithCallStackException_xs_closure;
         const GHC.Exception.prettyCallStack_closure;
         const GHC.Exception.errorCallWithCallStackException_closure;
         const GHC.Stack.CCS.currentCallStack_closure;
         const GHC.Exception.$fExceptionArithException_$cfromException_closure;
         const GHC.Exception.$fExceptionArithException14_closure;
         const GHC.Exception.$fExceptionArithException_closure;
         const GHC.Exception.$fExceptionArithException_$ctoException_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.363112093 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:42.363855946 UTC

[section ""data" . GHC.Exception.$p1Exception_closure" {
     GHC.Exception.$p1Exception_closure:
         const GHC.Exception.$p1Exception_info;
 },
 GHC.Exception.$p1Exception_entry() //  [R2]
         { info_tbl: [(c7u11,
                       label: GHC.Exception.$p1Exception_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u11: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7u12; else goto c7u13;
       c7u12: // global
           R2 = R2;
           R1 = GHC.Exception.$p1Exception_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u13: // global
           I64[Sp - 8] = block_c7u0Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u17; else goto c7u0Z;
       u7u17: // global
           call _c7u0Y(R1) args: 0, res: 0, upd: 0;
       c7u0Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u0Y() //  [R1]
         { info_tbl: [(c7u0Y,
                       label: block_c7u0Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u0Y: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.365149046 UTC

[section ""data" . GHC.Exception.$p2Exception_closure" {
     GHC.Exception.$p2Exception_closure:
         const GHC.Exception.$p2Exception_info;
 },
 GHC.Exception.$p2Exception_entry() //  [R2]
         { info_tbl: [(c7u1f,
                       label: GHC.Exception.$p2Exception_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u1f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7u1g; else goto c7u1h;
       c7u1g: // global
           R2 = R2;
           R1 = GHC.Exception.$p2Exception_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u1h: // global
           I64[Sp - 8] = block_c7u1c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u1l; else goto c7u1d;
       u7u1l: // global
           call _c7u1c(R1) args: 0, res: 0, upd: 0;
       c7u1d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u1c() //  [R1]
         { info_tbl: [(c7u1c,
                       label: block_c7u1c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u1c: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.36636464 UTC

[section ""data" . GHC.Exception.toException_closure" {
     GHC.Exception.toException_closure:
         const GHC.Exception.toException_info;
 },
 GHC.Exception.toException_entry() //  [R2]
         { info_tbl: [(c7u1t,
                       label: GHC.Exception.toException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u1t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7u1u; else goto c7u1v;
       c7u1u: // global
           R2 = R2;
           R1 = GHC.Exception.toException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u1v: // global
           I64[Sp - 8] = block_c7u1q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u1z; else goto c7u1r;
       u7u1z: // global
           call _c7u1q(R1) args: 0, res: 0, upd: 0;
       c7u1r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u1q() //  [R1]
         { info_tbl: [(c7u1q,
                       label: block_c7u1q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u1q: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.367465466 UTC

[section ""data" . GHC.Exception.fromException_closure" {
     GHC.Exception.fromException_closure:
         const GHC.Exception.fromException_info;
 },
 GHC.Exception.fromException_entry() //  [R2]
         { info_tbl: [(c7u1H,
                       label: GHC.Exception.fromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u1H: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7u1I; else goto c7u1J;
       c7u1I: // global
           R2 = R2;
           R1 = GHC.Exception.fromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u1J: // global
           I64[Sp - 8] = block_c7u1E_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u1N; else goto c7u1F;
       u7u1N: // global
           call _c7u1E(R1) args: 0, res: 0, upd: 0;
       c7u1F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u1E() //  [R1]
         { info_tbl: [(c7u1E,
                       label: block_c7u1E_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u1E: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.368596891 UTC

[section ""data" . GHC.Exception.displayException_closure" {
     GHC.Exception.displayException_closure:
         const GHC.Exception.displayException_info;
 },
 GHC.Exception.displayException_entry() //  [R2]
         { info_tbl: [(c7u1V,
                       label: GHC.Exception.displayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u1V: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7u1W; else goto c7u1X;
       c7u1W: // global
           R2 = R2;
           R1 = GHC.Exception.displayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u1X: // global
           I64[Sp - 8] = block_c7u1S_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u21; else goto c7u1T;
       u7u21: // global
           call _c7u1S(R1) args: 0, res: 0, upd: 0;
       c7u1T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u1S() //  [R1]
         { info_tbl: [(c7u1S,
                       label: block_c7u1S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u1S: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.369864174 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshowsPrec_closure" {
     GHC.Exception.$fShowSomeException_$cshowsPrec_closure:
         const GHC.Exception.$fShowSomeException_$cshowsPrec_info;
 },
 GHC.Exception.$fShowSomeException_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7u29,
                       label: GHC.Exception.$fShowSomeException_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u29: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7u2d; else goto c7u2e;
       c7u2d: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u2e: // global
           I64[Sp - 16] = block_c7u26_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7u2k; else goto c7u27;
       u7u2k: // global
           call _c7u26(R1) args: 0, res: 0, upd: 0;
       c7u27: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u26() //  [R1]
         { info_tbl: [(c7u26,
                       label: block_c7u26_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u26: // global
           I64[Sp - 8] = block_c7u2c_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7u2c() //  [R1]
         { info_tbl: [(c7u2c,
                       label: block_c7u2c_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u2c: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _s7t9x::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s7t9x::P64;
           call GHC.Show.showsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.371007553 UTC

[section ""data" . GHC.Exception.$fExceptionArithException1_closure" {
     GHC.Exception.$fExceptionArithException1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.371811884 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshow_closure" {
     GHC.Exception.$fShowSomeException_$cshow_closure:
         const GHC.Exception.$fShowSomeException_$cshow_info;
 },
 GHC.Exception.$fShowSomeException_$cshow_entry() //  [R2]
         { info_tbl: [(c7u2s,
                       label: GHC.Exception.$fShowSomeException_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u2s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7u2w; else goto c7u2x;
       c7u2w: // global
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u2x: // global
           I64[Sp - 8] = block_c7u2p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u2D; else goto c7u2q;
       u7u2D: // global
           call _c7u2p(R1) args: 0, res: 0, upd: 0;
       c7u2q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u2p() //  [R1]
         { info_tbl: [(c7u2p,
                       label: block_c7u2p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u2p: // global
           I64[Sp - 8] = block_c7u2v_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7u2v() //  [R1]
         { info_tbl: [(c7u2v,
                       label: block_c7u2v_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u2v: // global
           R2 = R1;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = GHC.Exception.$fExceptionArithException1_closure+1;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.373189823 UTC

[section ""data" . GHC.Exception.$fShowSomeException1_closure" {
     GHC.Exception.$fShowSomeException1_closure:
         const GHC.Exception.$fShowSomeException1_info;
 },
 GHC.Exception.$fShowSomeException1_entry() //  [R2]
         { info_tbl: [(c7u2L,
                       label: GHC.Exception.$fShowSomeException1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u2L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7u2P; else goto c7u2Q;
       c7u2P: // global
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u2Q: // global
           I64[Sp - 8] = block_c7u2I_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u2W; else goto c7u2J;
       u7u2W: // global
           call _c7u2I(R1) args: 0, res: 0, upd: 0;
       c7u2J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u2I() //  [R1]
         { info_tbl: [(c7u2I,
                       label: block_c7u2I_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u2I: // global
           I64[Sp - 8] = block_c7u2O_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7u2O() //  [R1]
         { info_tbl: [(c7u2O,
                       label: block_c7u2O_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u2O: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Exception.$fExceptionArithException1_closure+1;
           Sp = Sp - 8;
           call GHC.Show.showsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.374445494 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshowList_closure" {
     GHC.Exception.$fShowSomeException_$cshowList_closure:
         const GHC.Exception.$fShowSomeException_$cshowList_info;
 },
 GHC.Exception.$fShowSomeException_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7u31,
                       label: GHC.Exception.$fShowSomeException_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u31: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$fShowSomeException1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.375162696 UTC

[section ""data" . GHC.Exception.$fShowSomeException_closure" {
     GHC.Exception.$fShowSomeException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fShowSomeException_$cshowsPrec_closure+2;
         const GHC.Exception.$fShowSomeException_$cshow_closure+1;
         const GHC.Exception.$fShowSomeException_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.375943311 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_$cdisplayException_closure" {
     GHC.Exception.$fExceptionSomeException_$cdisplayException_closure:
         const GHC.Exception.$fExceptionSomeException_$cdisplayException_info;
 },
 GHC.Exception.$fExceptionSomeException_$cdisplayException_entry() //  [R2]
         { info_tbl: [(c7u3b,
                       label: GHC.Exception.$fExceptionSomeException_$cdisplayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u3b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u3c; else goto c7u3d;
       c7u3c: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionSomeException_$cdisplayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u3d: // global
           I64[Sp - 8] = block_c7u38_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u3h; else goto c7u39;
       u7u3h: // global
           call _c7u38(R1) args: 0, res: 0, upd: 0;
       c7u39: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u38() //  [R1]
         { info_tbl: [(c7u38,
                       label: block_c7u38_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u38: // global
           R2 = P64[R1 + 7];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.displayException_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.377011267 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_$ctoException_closure" {
     GHC.Exception.$fExceptionSomeException_$ctoException_closure:
         const GHC.Exception.$fExceptionSomeException_$ctoException_info;
 },
 GHC.Exception.$fExceptionSomeException_$ctoException_entry() //  [R2]
         { info_tbl: [(c7u3m,
                       label: GHC.Exception.$fExceptionSomeException_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u3m: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.377802291 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall1_closure" {
     GHC.Exception.$fExceptionErrorCall1_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.378889751 UTC

[section ""data" . GHC.Exception.$w$cshowsPrec1_closure" {
     GHC.Exception.$w$cshowsPrec1_closure:
         const GHC.Exception.$w$cshowsPrec1_info;
 },
 sat_s7t9W_entry() //  [R1]
         { info_tbl: [(c7u3D,
                       label: sat_s7t9W_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u3D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u3E; else goto c7u3F;
       c7u3E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u3F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7u3K,
                       label: GHC.Exception.$w$cshowsPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u3K: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7u3L; else goto c7u3M;
       c7u3L: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u3M: // global
           I64[Sp - 24] = block_c7u3t_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7u3T; else goto c7u3u;
       u7u3T: // global
           call _c7u3t(R1) args: 0, res: 0, upd: 0;
       c7u3u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u3t() //  [R1]
         { info_tbl: [(c7u3t,
                       label: block_c7u3t_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u3t: // global
           _s7t9Q::P64 = P64[Sp + 8];
           _s7t9S::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7u3H; else goto c7u3I;
       c7u3H: // global
           R3 = _s7t9S::P64;
           R2 = _s7t9Q::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7u3I: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7u3S; else goto c7u3R;
       c7u3S: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7u3R: // global
           I64[Hp - 48] = sat_s7t9W_info;
           P64[Hp - 32] = _s7t9S::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionErrorCall1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s7t9Q::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.380648498 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure" {
     GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure:
         const GHC.Exception.$fExceptionErrorCall_$cshowsPrec_info;
 },
 GHC.Exception.$fExceptionErrorCall_$cshowsPrec_entry() //  [R2, R3,
                                                             R4]
         { info_tbl: [(c7u41,
                       label: GHC.Exception.$fExceptionErrorCall_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u41: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u42; else goto c7u43;
       c7u42: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u43: // global
           I64[Sp - 16] = block_c7u3Y_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7u47; else goto c7u3Z;
       u7u47: // global
           call _c7u3Y(R1) args: 0, res: 0, upd: 0;
       c7u3Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u3Y() //  [R1]
         { info_tbl: [(c7u3Y,
                       label: block_c7u3Y_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u3Y: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.381905445 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cshow_closure" {
     GHC.Exception.$fExceptionErrorCall_$cshow_closure:
         const GHC.Exception.$fExceptionErrorCall_$cshow_info;
 },
 GHC.Exception.$fExceptionErrorCall_$cshow_entry() //  [R2]
         { info_tbl: [(c7u4f,
                       label: GHC.Exception.$fExceptionErrorCall_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u4f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7u4g; else goto c7u4h;
       c7u4g: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7u4h: // global
           I64[Sp - 8] = block_c7u4c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7u4l; else goto c7u4d;
       u7u4l: // global
           call _c7u4c(R1) args: 0, res: 0, upd: 0;
       c7u4d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u4c() //  [R1]
         { info_tbl: [(c7u4c,
                       label: block_c7u4c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u4c: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.383137094 UTC

[section ""data" . GHC.Exception.$fShowErrorCall1_closure" {
     GHC.Exception.$fShowErrorCall1_closure:
         const GHC.Exception.$fShowErrorCall1_info;
 },
 GHC.Exception.$fShowErrorCall1_entry() //  [R2, R3]
         { info_tbl: [(c7u4t,
                       label: GHC.Exception.$fShowErrorCall1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u4t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u4u; else goto c7u4v;
       c7u4u: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fShowErrorCall1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u4v: // global
           I64[Sp - 16] = block_c7u4q_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7u4z; else goto c7u4r;
       u7u4z: // global
           call _c7u4q(R1) args: 0, res: 0, upd: 0;
       c7u4r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u4q() //  [R1]
         { info_tbl: [(c7u4q,
                       label: block_c7u4q_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u4q: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.384287333 UTC

[section ""data" . GHC.Exception.$fShowErrorCall_$cshowList_closure" {
     GHC.Exception.$fShowErrorCall_$cshowList_closure:
         const GHC.Exception.$fShowErrorCall_$cshowList_info;
 },
 GHC.Exception.$fShowErrorCall_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7u4E,
                       label: GHC.Exception.$fShowErrorCall_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u4E: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$fShowErrorCall1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.385043773 UTC

[section ""data" . GHC.Exception.$fShowErrorCall_closure" {
     GHC.Exception.$fShowErrorCall_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure+3;
         const GHC.Exception.$fExceptionErrorCall_$cshow_closure+1;
         const GHC.Exception.$fShowErrorCall_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.385671286 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException13_bytes" {
     GHC.Exception.$fExceptionArithException13_bytes:
         I8[] [97,114,105,116,104,109,101,116,105,99,32,111,118,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.386437 UTC

[section ""data" . GHC.Exception.$fExceptionArithException12_closure" {
     GHC.Exception.$fExceptionArithException12_closure:
         const GHC.Exception.$fExceptionArithException12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException12_entry() //  [R1]
         { info_tbl: [(c7u4N,
                       label: GHC.Exception.$fExceptionArithException12_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u4N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u4O; else goto c7u4P;
       c7u4O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u4P: // global
           (_c7u4K::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7u4K::I64 == 0) goto c7u4M; else goto c7u4L;
       c7u4M: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7u4L: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7u4K::I64;
           R2 = GHC.Exception.$fExceptionArithException13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.387303861 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException11_bytes" {
     GHC.Exception.$fExceptionArithException11_bytes:
         I8[] [97,114,105,116,104,109,101,116,105,99,32,117,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.388057512 UTC

[section ""data" . GHC.Exception.$fExceptionArithException10_closure" {
     GHC.Exception.$fExceptionArithException10_closure:
         const GHC.Exception.$fExceptionArithException10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException10_entry() //  [R1]
         { info_tbl: [(c7u4W,
                       label: GHC.Exception.$fExceptionArithException10_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u4W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u4X; else goto c7u4Y;
       c7u4X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u4Y: // global
           (_c7u4T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7u4T::I64 == 0) goto c7u4V; else goto c7u4U;
       c7u4V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7u4U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7u4T::I64;
           R2 = GHC.Exception.$fExceptionArithException11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.388912244 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException9_bytes" {
     GHC.Exception.$fExceptionArithException9_bytes:
         I8[] [108,111,115,115,32,111,102,32,112,114,101,99,105,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.389666736 UTC

[section ""data" . GHC.Exception.$fExceptionArithException8_closure" {
     GHC.Exception.$fExceptionArithException8_closure:
         const GHC.Exception.$fExceptionArithException8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException8_entry() //  [R1]
         { info_tbl: [(c7u55,
                       label: GHC.Exception.$fExceptionArithException8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u55: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u56; else goto c7u57;
       c7u56: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u57: // global
           (_c7u52::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7u52::I64 == 0) goto c7u54; else goto c7u53;
       c7u54: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7u53: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7u52::I64;
           R2 = GHC.Exception.$fExceptionArithException9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.390550528 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException7_bytes" {
     GHC.Exception.$fExceptionArithException7_bytes:
         I8[] [100,105,118,105,100,101,32,98,121,32,122,101,114,111]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.391248586 UTC

[section ""data" . GHC.Exception.$fExceptionArithException6_closure" {
     GHC.Exception.$fExceptionArithException6_closure:
         const GHC.Exception.$fExceptionArithException6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException6_entry() //  [R1]
         { info_tbl: [(c7u5e,
                       label: GHC.Exception.$fExceptionArithException6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u5e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u5f; else goto c7u5g;
       c7u5f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u5g: // global
           (_c7u5b::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7u5b::I64 == 0) goto c7u5d; else goto c7u5c;
       c7u5d: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7u5c: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7u5b::I64;
           R2 = GHC.Exception.$fExceptionArithException7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.392130575 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException5_bytes" {
     GHC.Exception.$fExceptionArithException5_bytes:
         I8[] [100,101,110,111,114,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.392866471 UTC

[section ""data" . GHC.Exception.$fExceptionArithException4_closure" {
     GHC.Exception.$fExceptionArithException4_closure:
         const GHC.Exception.$fExceptionArithException4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException4_entry() //  [R1]
         { info_tbl: [(c7u5n,
                       label: GHC.Exception.$fExceptionArithException4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u5n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u5o; else goto c7u5p;
       c7u5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u5p: // global
           (_c7u5k::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7u5k::I64 == 0) goto c7u5m; else goto c7u5l;
       c7u5m: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7u5l: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7u5k::I64;
           R2 = GHC.Exception.$fExceptionArithException5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.393828736 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException3_bytes" {
     GHC.Exception.$fExceptionArithException3_bytes:
         I8[] [82,97,116,105,111,32,104,97,115,32,122,101,114,111,32,100,101,110,111,109,105,110,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.394532496 UTC

[section ""data" . GHC.Exception.$fExceptionArithException2_closure" {
     GHC.Exception.$fExceptionArithException2_closure:
         const GHC.Exception.$fExceptionArithException2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException2_entry() //  [R1]
         { info_tbl: [(c7u5w,
                       label: GHC.Exception.$fExceptionArithException2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u5w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u5x; else goto c7u5y;
       c7u5x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7u5y: // global
           (_c7u5t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7u5t::I64 == 0) goto c7u5v; else goto c7u5u;
       c7u5v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7u5u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7u5t::I64;
           R2 = GHC.Exception.$fExceptionArithException3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.395834291 UTC

[section ""data" . GHC.Exception.$w$cshowsPrec_closure" {
     GHC.Exception.$w$cshowsPrec_closure:
         const GHC.Exception.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Exception.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7u5O,
                       label: GHC.Exception.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u5O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u5P; else goto c7u5Q;
       c7u5P: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u5Q: // global
           I64[Sp - 16] = block_c7u5D_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7u69; else goto c7u5E;
       u7u69: // global
           call _c7u5D(R1) args: 0, res: 0, upd: 0;
       c7u5E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u5D() //  [R1]
         { info_tbl: [(c7u5D,
                       label: block_c7u5D_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u5D: // global
           _s7tag::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7u5H;
               case 2 : goto c7u5I;
               case 3 : goto c7u5J;
               case 4 : goto c7u5K;
               case 5 : goto c7u5L;
               case 6 : goto c7u5M;
           }
       c7u5M: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7u5L: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7u5K: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7u5J: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException8_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7u5I: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7u5H: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException12_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.398726031 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cshowsPrec_closure" {
     GHC.Exception.$fExceptionArithException_$cshowsPrec_closure:
         const GHC.Exception.$fExceptionArithException_$cshowsPrec_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cshowsPrec_entry() //  [R3,
                                                                  R4]
         { info_tbl: [(c7u6e,
                       label: GHC.Exception.$fExceptionArithException_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u6e: // global
           _s7taj::P64 = R3;
           R3 = R4;
           R2 = _s7taj::P64;
           call GHC.Exception.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.39961039 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cshow_closure" {
     GHC.Exception.$fExceptionArithException_$cshow_closure:
         const GHC.Exception.$fExceptionArithException_$cshow_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cshow_entry() //  [R2]
         { info_tbl: [(c7u6l,
                       label: GHC.Exception.$fExceptionArithException_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u6l: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Exception.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.400401784 UTC

[section ""data" . GHC.Exception.$fShowArithException_$cshowList_closure" {
     GHC.Exception.$fShowArithException_$cshowList_closure:
         const GHC.Exception.$fShowArithException_$cshowList_info;
         const 0;
 },
 GHC.Exception.$fShowArithException_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7u6s,
                       label: GHC.Exception.$fShowArithException_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u6s: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.401118088 UTC

[section ""data" . GHC.Exception.$fShowArithException_closure" {
     GHC.Exception.$fShowArithException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fExceptionArithException_$cshowsPrec_closure+3;
         const GHC.Exception.$fExceptionArithException_$cshow_closure+1;
         const GHC.Exception.$fShowArithException_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.402671859 UTC

[section ""data" . GHC.Exception.$fEqArithException_$c==_closure" {
     GHC.Exception.$fEqArithException_$c==_closure:
         const GHC.Exception.$fEqArithException_$c==_info;
 },
 GHC.Exception.$fEqArithException_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7u6K,
                       label: GHC.Exception.$fEqArithException_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u6K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u6L; else goto c7u6M;
       c7u6L: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqArithException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u6M: // global
           I64[Sp - 16] = block_c7u6z_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7u8D; else goto c7u6A;
       u7u8D: // global
           call _c7u6z(R1) args: 0, res: 0, upd: 0;
       c7u6A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u6z() //  [R1]
         { info_tbl: [(c7u6z,
                       label: block_c7u6z_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u6z: // global
           _s7tap::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7u6D;
               case 2 : goto c7u6E;
               case 3 : goto c7u6F;
               case 4 : goto c7u6G;
               case 5 : goto c7u6H;
               case 6 : goto c7u6I;
           }
       c7u6I: // global
           I64[Sp + 8] = block_c7u82_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7u8C; else goto c7u84;
       u7u8C: // global
           call _c7u82(R1) args: 0, res: 0, upd: 0;
       c7u84: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u6H: // global
           I64[Sp + 8] = block_c7u7N_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7u8B; else goto c7u7P;
       u7u8B: // global
           call _c7u7N(R1) args: 0, res: 0, upd: 0;
       c7u7P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u6G: // global
           I64[Sp + 8] = block_c7u7y_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7u8A; else goto c7u7A;
       u7u8A: // global
           call _c7u7y(R1) args: 0, res: 0, upd: 0;
       c7u7A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u6F: // global
           I64[Sp + 8] = block_c7u7j_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7u8z; else goto c7u7l;
       u7u8z: // global
           call _c7u7j(R1) args: 0, res: 0, upd: 0;
       c7u7l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u6E: // global
           I64[Sp + 8] = block_c7u74_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7u8y; else goto c7u76;
       u7u8y: // global
           call _c7u74(R1) args: 0, res: 0, upd: 0;
       c7u76: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u6D: // global
           I64[Sp + 8] = block_c7u6P_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7u8x; else goto c7u6R;
       u7u8x: // global
           call _c7u6P(R1) args: 0, res: 0, upd: 0;
       c7u6R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u82() //  [R1]
         { info_tbl: [(c7u82,
                       label: block_c7u82_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u82: // global
           if (R1 & 7 == 6) goto u7u8l; else goto u7u8m;
       u7u8l: // global
           Sp = Sp + 8;
           call _c7u8e() args: 0, res: 0, upd: 0;
       u7u8m: // global
           Sp = Sp + 8;
           call _c7u8a() args: 0, res: 0, upd: 0;
     }
 },
 _c7u7N() //  [R1]
         { info_tbl: [(c7u7N,
                       label: block_c7u7N_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u7N: // global
           if (R1 & 7 == 5) goto u7u8n; else goto u7u8o;
       u7u8n: // global
           Sp = Sp + 8;
           call _c7u8e() args: 0, res: 0, upd: 0;
       u7u8o: // global
           Sp = Sp + 8;
           call _c7u8a() args: 0, res: 0, upd: 0;
     }
 },
 _c7u7y() //  [R1]
         { info_tbl: [(c7u7y,
                       label: block_c7u7y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u7y: // global
           if (R1 & 7 == 4) goto u7u8p; else goto u7u8q;
       u7u8p: // global
           Sp = Sp + 8;
           call _c7u8e() args: 0, res: 0, upd: 0;
       u7u8q: // global
           Sp = Sp + 8;
           call _c7u8a() args: 0, res: 0, upd: 0;
     }
 },
 _c7u7j() //  [R1]
         { info_tbl: [(c7u7j,
                       label: block_c7u7j_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u7j: // global
           if (R1 & 7 == 3) goto u7u8r; else goto u7u8s;
       u7u8r: // global
           Sp = Sp + 8;
           call _c7u8e() args: 0, res: 0, upd: 0;
       u7u8s: // global
           Sp = Sp + 8;
           call _c7u8a() args: 0, res: 0, upd: 0;
     }
 },
 _c7u74() //  [R1]
         { info_tbl: [(c7u74,
                       label: block_c7u74_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u74: // global
           if (R1 & 7 == 2) goto u7u8t; else goto u7u8u;
       u7u8t: // global
           Sp = Sp + 8;
           call _c7u8e() args: 0, res: 0, upd: 0;
       u7u8u: // global
           Sp = Sp + 8;
           call _c7u8a() args: 0, res: 0, upd: 0;
     }
 },
 _c7u6P() //  [R1]
         { info_tbl: [(c7u6P,
                       label: block_c7u6P_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u6P: // global
           if (R1 & 7 == 1) goto u7u8v; else goto u7u8w;
       u7u8v: // global
           Sp = Sp + 8;
           call _c7u8e() args: 0, res: 0, upd: 0;
       u7u8w: // global
           Sp = Sp + 8;
           call _c7u8a() args: 0, res: 0, upd: 0;
     }
 },
 _c7u8e() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u8e: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7u8a() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u8a: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.406204304 UTC

[section ""data" . GHC.Exception.$fEqArithException_$c/=_closure" {
     GHC.Exception.$fEqArithException_$c/=_closure:
         const GHC.Exception.$fEqArithException_$c/=_info;
 },
 GHC.Exception.$fEqArithException_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7u95,
                       label: GHC.Exception.$fEqArithException_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u95: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7u96; else goto c7u97;
       c7u96: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqArithException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7u97: // global
           I64[Sp - 16] = block_c7u8U_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uaY; else goto c7u8V;
       u7uaY: // global
           call _c7u8U(R1) args: 0, res: 0, upd: 0;
       c7u8V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7u8U() //  [R1]
         { info_tbl: [(c7u8U,
                       label: block_c7u8U_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u8U: // global
           _s7tay::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7u8Y;
               case 2 : goto c7u8Z;
               case 3 : goto c7u90;
               case 4 : goto c7u91;
               case 5 : goto c7u92;
               case 6 : goto c7u93;
           }
       c7u93: // global
           I64[Sp + 8] = block_c7uan_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uaX; else goto c7uap;
       u7uaX: // global
           call _c7uan(R1) args: 0, res: 0, upd: 0;
       c7uap: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u92: // global
           I64[Sp + 8] = block_c7ua8_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uaW; else goto c7uaa;
       u7uaW: // global
           call _c7ua8(R1) args: 0, res: 0, upd: 0;
       c7uaa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u91: // global
           I64[Sp + 8] = block_c7u9T_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uaV; else goto c7u9V;
       u7uaV: // global
           call _c7u9T(R1) args: 0, res: 0, upd: 0;
       c7u9V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u90: // global
           I64[Sp + 8] = block_c7u9E_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uaU; else goto c7u9G;
       u7uaU: // global
           call _c7u9E(R1) args: 0, res: 0, upd: 0;
       c7u9G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u8Z: // global
           I64[Sp + 8] = block_c7u9p_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uaT; else goto c7u9r;
       u7uaT: // global
           call _c7u9p(R1) args: 0, res: 0, upd: 0;
       c7u9r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7u8Y: // global
           I64[Sp + 8] = block_c7u9a_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uaS; else goto c7u9c;
       u7uaS: // global
           call _c7u9a(R1) args: 0, res: 0, upd: 0;
       c7u9c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uan() //  [R1]
         { info_tbl: [(c7uan,
                       label: block_c7uan_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uan: // global
           if (R1 & 7 == 6) goto u7uaG; else goto u7uaH;
       u7uaG: // global
           Sp = Sp + 8;
           call _c7uaz() args: 0, res: 0, upd: 0;
       u7uaH: // global
           Sp = Sp + 8;
           call _c7uav() args: 0, res: 0, upd: 0;
     }
 },
 _c7ua8() //  [R1]
         { info_tbl: [(c7ua8,
                       label: block_c7ua8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ua8: // global
           if (R1 & 7 == 5) goto u7uaI; else goto u7uaJ;
       u7uaI: // global
           Sp = Sp + 8;
           call _c7uaz() args: 0, res: 0, upd: 0;
       u7uaJ: // global
           Sp = Sp + 8;
           call _c7uav() args: 0, res: 0, upd: 0;
     }
 },
 _c7u9T() //  [R1]
         { info_tbl: [(c7u9T,
                       label: block_c7u9T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u9T: // global
           if (R1 & 7 == 4) goto u7uaK; else goto u7uaL;
       u7uaK: // global
           Sp = Sp + 8;
           call _c7uaz() args: 0, res: 0, upd: 0;
       u7uaL: // global
           Sp = Sp + 8;
           call _c7uav() args: 0, res: 0, upd: 0;
     }
 },
 _c7u9E() //  [R1]
         { info_tbl: [(c7u9E,
                       label: block_c7u9E_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u9E: // global
           if (R1 & 7 == 3) goto u7uaM; else goto u7uaN;
       u7uaM: // global
           Sp = Sp + 8;
           call _c7uaz() args: 0, res: 0, upd: 0;
       u7uaN: // global
           Sp = Sp + 8;
           call _c7uav() args: 0, res: 0, upd: 0;
     }
 },
 _c7u9p() //  [R1]
         { info_tbl: [(c7u9p,
                       label: block_c7u9p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u9p: // global
           if (R1 & 7 == 2) goto u7uaO; else goto u7uaP;
       u7uaO: // global
           Sp = Sp + 8;
           call _c7uaz() args: 0, res: 0, upd: 0;
       u7uaP: // global
           Sp = Sp + 8;
           call _c7uav() args: 0, res: 0, upd: 0;
     }
 },
 _c7u9a() //  [R1]
         { info_tbl: [(c7u9a,
                       label: block_c7u9a_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7u9a: // global
           if (R1 & 7 == 1) goto u7uaQ; else goto u7uaR;
       u7uaQ: // global
           Sp = Sp + 8;
           call _c7uaz() args: 0, res: 0, upd: 0;
       u7uaR: // global
           Sp = Sp + 8;
           call _c7uav() args: 0, res: 0, upd: 0;
     }
 },
 _c7uaz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uaz: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uav() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uav: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.408750379 UTC

[section ""data" . GHC.Exception.$fEqArithException_closure" {
     GHC.Exception.$fEqArithException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exception.$fEqArithException_$c==_closure+2;
         const GHC.Exception.$fEqArithException_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.409678659 UTC

[section ""data" . GHC.Exception.$w$c<_closure" {
     GHC.Exception.$w$c<_closure:
         const GHC.Exception.$w$c<_info;
 },
 GHC.Exception.$w$c<_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7ubm,
                       label: GHC.Exception.$w$c<_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ubm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ubn; else goto c7ubo;
       c7ubn: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ubo: // global
           I64[Sp - 24] = block_c7ubf_info;
           _s7taH::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7taH::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ubf() //  [R1]
         { info_tbl: [(c7ubf,
                       label: block_c7ubf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ubf: // global
           _c7ubl::P64 = R1 & 7;
           if (_c7ubl::P64 < 3) goto u7uby; else goto c7ubk;
       u7uby: // global
           if (_c7ubl::P64 < 2) goto c7ubi; else goto c7ubj;
       c7ubi: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ubj: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$s$c<1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c7ubk: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.411154369 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c<_closure" {
     GHC.Exception.$fOrdErrorCall_$c<_closure:
         const GHC.Exception.$fOrdErrorCall_$c<_info;
 },
 GHC.Exception.$fOrdErrorCall_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7ubG,
                       label: GHC.Exception.$fOrdErrorCall_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ubG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ubK; else goto c7ubL;
       c7ubK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ubL: // global
           I64[Sp - 16] = block_c7ubD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ubT; else goto c7ubE;
       u7ubT: // global
           call _c7ubD(R1) args: 0, res: 0, upd: 0;
       c7ubE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ubD() //  [R1]
         { info_tbl: [(c7ubD,
                       label: block_c7ubD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ubD: // global
           I64[Sp - 8] = block_c7ubJ_info;
           _s7taO::P64 = P64[R1 + 7];
           _s7taP::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7taP::P64;
           P64[Sp + 8] = _s7taO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ubS; else goto c7ubN;
       u7ubS: // global
           call _c7ubJ(R1) args: 0, res: 0, upd: 0;
       c7ubN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ubJ() //  [R1]
         { info_tbl: [(c7ubJ,
                       label: block_c7ubJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ubJ: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c<_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.412680723 UTC

[section ""data" . GHC.Exception.$w$ccompare_closure" {
     GHC.Exception.$w$ccompare_closure:
         const GHC.Exception.$w$ccompare_info;
 },
 GHC.Exception.$w$ccompare_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7uc5,
                       label: GHC.Exception.$w$ccompare_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uc5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uc6; else goto c7uc7;
       c7uc6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uc7: // global
           I64[Sp - 24] = block_c7ubY_info;
           _s7taU::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7taU::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ubY() //  [R1]
         { info_tbl: [(c7ubY,
                       label: block_c7ubY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ubY: // global
           _c7uc4::P64 = R1 & 7;
           if (_c7uc4::P64 < 3) goto u7uch; else goto c7uc3;
       u7uch: // global
           if (_c7uc4::P64 < 2) goto c7uc1; else goto c7uc2;
       c7uc1: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7uc2: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c7uc3: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.414153379 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$ccompare_closure" {
     GHC.Exception.$fOrdErrorCall_$ccompare_closure:
         const GHC.Exception.$fOrdErrorCall_$ccompare_info;
 },
 GHC.Exception.$fOrdErrorCall_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7ucp,
                       label: GHC.Exception.$fOrdErrorCall_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ucp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uct; else goto c7ucu;
       c7uct: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ucu: // global
           I64[Sp - 16] = block_c7ucm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ucC; else goto c7ucn;
       u7ucC: // global
           call _c7ucm(R1) args: 0, res: 0, upd: 0;
       c7ucn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ucm() //  [R1]
         { info_tbl: [(c7ucm,
                       label: block_c7ucm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ucm: // global
           I64[Sp - 8] = block_c7ucs_info;
           _s7tb1::P64 = P64[R1 + 7];
           _s7tb2::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tb2::P64;
           P64[Sp + 8] = _s7tb1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ucB; else goto c7ucw;
       u7ucB: // global
           call _c7ucs(R1) args: 0, res: 0, upd: 0;
       c7ucw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ucs() //  [R1]
         { info_tbl: [(c7ucs,
                       label: block_c7ucs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ucs: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$ccompare_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.415669041 UTC

[section ""data" . GHC.Exception.$w$c==_closure" {
     GHC.Exception.$w$c==_closure:
         const GHC.Exception.$w$c==_info;
 },
 GHC.Exception.$w$c==_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7ucN,
                       label: GHC.Exception.$w$c==_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ucN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ucO; else goto c7ucP;
       c7ucO: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ucP: // global
           I64[Sp - 24] = block_c7ucH_info;
           _s7tb7::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7tb7::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ucH() //  [R1]
         { info_tbl: [(c7ucH,
                       label: block_c7ucH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ucH: // global
           if (R1 & 7 == 1) goto c7ucK; else goto c7ucL;
       c7ucK: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ucL: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.417012026 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_$c==_closure" {
     GHC.Exception.$fEqErrorCall_$c==_closure:
         const GHC.Exception.$fEqErrorCall_$c==_info;
 },
 GHC.Exception.$fEqErrorCall_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7ud3,
                       label: GHC.Exception.$fEqErrorCall_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ud3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ud7; else goto c7ud8;
       c7ud7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqErrorCall_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ud8: // global
           I64[Sp - 16] = block_c7ud0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7udg; else goto c7ud1;
       u7udg: // global
           call _c7ud0(R1) args: 0, res: 0, upd: 0;
       c7ud1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ud0() //  [R1]
         { info_tbl: [(c7ud0,
                       label: block_c7ud0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ud0: // global
           I64[Sp - 8] = block_c7ud6_info;
           _s7tbe::P64 = P64[R1 + 7];
           _s7tbf::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbf::P64;
           P64[Sp + 8] = _s7tbe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7udf; else goto c7uda;
       u7udf: // global
           call _c7ud6(R1) args: 0, res: 0, upd: 0;
       c7uda: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ud6() //  [R1]
         { info_tbl: [(c7ud6,
                       label: block_c7ud6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ud6: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c==_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.41881764 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_$c/=_closure" {
     GHC.Exception.$fEqErrorCall_$c/=_closure:
         const GHC.Exception.$fEqErrorCall_$c/=_info;
 },
 GHC.Exception.$fEqErrorCall_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7udo,
                       label: GHC.Exception.$fEqErrorCall_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7udo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uds; else goto c7udt;
       c7uds: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqErrorCall_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7udt: // global
           I64[Sp - 16] = block_c7udl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ue1; else goto c7udm;
       u7ue1: // global
           call _c7udl(R1) args: 0, res: 0, upd: 0;
       c7udm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7udl() //  [R1]
         { info_tbl: [(c7udl,
                       label: block_c7udl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7udl: // global
           I64[Sp - 8] = block_c7udr_info;
           _s7tbm::P64 = P64[R1 + 7];
           _s7tbn::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbn::P64;
           P64[Sp + 8] = _s7tbm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ue0; else goto c7udv;
       u7ue0: // global
           call _c7udr(R1) args: 0, res: 0, upd: 0;
       c7udv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7udr() //  [R1]
         { info_tbl: [(c7udr,
                       label: block_c7udr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7udr: // global
           I64[Sp] = block_c7udz_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7udz() //  [R1]
         { info_tbl: [(c7udz,
                       label: block_c7udz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7udz: // global
           if (R1 & 7 == 1) goto u7udY; else goto c7udL;
       u7udY: // global
           Sp = Sp + 24;
           call _c7udR() args: 0, res: 0, upd: 0;
       c7udL: // global
           _s7tbq::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7udJ_info;
           R3 = _s7tbq::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7udJ() //  [R1]
         { info_tbl: [(c7udJ,
                       label: block_c7udJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7udJ: // global
           if (R1 & 7 == 1) goto u7udZ; else goto c7udV;
       u7udZ: // global
           Sp = Sp + 8;
           call _c7udR() args: 0, res: 0, upd: 0;
       c7udV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7udR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7udR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.420501276 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_closure" {
     GHC.Exception.$fEqErrorCall_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exception.$fEqErrorCall_$c==_closure+2;
         const GHC.Exception.$fEqErrorCall_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.422435433 UTC

[section ""data" . GHC.Exception.$w$c<=_closure" {
     GHC.Exception.$w$c<=_closure:
         const GHC.Exception.$w$c<=_info;
 },
 GHC.Exception.$w$c<=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7uef,
                       label: GHC.Exception.$w$c<=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uef: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ueg; else goto c7ueh;
       c7ueg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ueh: // global
           I64[Sp - 24] = block_c7ue8_info;
           _s7tbu::P64 = R3;
           R3 = R2;
           R2 = R4;
           P64[Sp - 16] = _s7tbu::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ue8() //  [R1]
         { info_tbl: [(c7ue8,
                       label: block_c7ue8_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ue8: // global
           _c7uee::P64 = R1 & 7;
           if (_c7uee::P64 < 3) goto u7ueD; else goto u7ueE;
       u7ueD: // global
           if (_c7uee::P64 < 2) goto u7ueF; else goto c7uec;
       u7ueF: // global
           Sp = Sp + 24;
           call _c7uey() args: 0, res: 0, upd: 0;
       c7uec: // global
           _s7tbw::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7uen_info;
           R3 = P64[Sp + 8];
           R2 = _s7tbw::P64;
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7ueE: // global
           Sp = Sp + 24;
           call _c7ued() args: 0, res: 0, upd: 0;
     }
 },
 _c7uen() //  [R1]
         { info_tbl: [(c7uen,
                       label: block_c7uen_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uen: // global
           if (R1 & 7 == 1) goto u7ueG; else goto u7ueH;
       u7ueG: // global
           Sp = Sp + 8;
           call _c7uey() args: 0, res: 0, upd: 0;
       u7ueH: // global
           Sp = Sp + 8;
           call _c7ued() args: 0, res: 0, upd: 0;
     }
 },
 _c7uey() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uey: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7ued() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ued: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.424240064 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c<=_closure" {
     GHC.Exception.$fOrdErrorCall_$c<=_closure:
         const GHC.Exception.$fOrdErrorCall_$c<=_info;
 },
 GHC.Exception.$fOrdErrorCall_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7ueT,
                       label: GHC.Exception.$fOrdErrorCall_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ueT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ueX; else goto c7ueY;
       c7ueX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ueY: // global
           I64[Sp - 16] = block_c7ueQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uf6; else goto c7ueR;
       u7uf6: // global
           call _c7ueQ(R1) args: 0, res: 0, upd: 0;
       c7ueR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ueQ() //  [R1]
         { info_tbl: [(c7ueQ,
                       label: block_c7ueQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ueQ: // global
           I64[Sp - 8] = block_c7ueW_info;
           _s7tbC::P64 = P64[R1 + 7];
           _s7tbD::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbD::P64;
           P64[Sp + 8] = _s7tbC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uf5; else goto c7uf0;
       u7uf5: // global
           call _c7ueW(R1) args: 0, res: 0, upd: 0;
       c7uf0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ueW() //  [R1]
         { info_tbl: [(c7ueW,
                       label: block_c7ueW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ueW: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c<=_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.426064327 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$cmax_closure" {
     GHC.Exception.$fOrdErrorCall_$cmax_closure:
         const GHC.Exception.$fOrdErrorCall_$cmax_info;
 },
 GHC.Exception.$fOrdErrorCall_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7ufe,
                       label: GHC.Exception.$fOrdErrorCall_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ufe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7ufi; else goto c7ufj;
       c7ufi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ufj: // global
           I64[Sp - 16] = block_c7ufb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ufY; else goto c7ufc;
       u7ufY: // global
           call _c7ufb(R1) args: 0, res: 0, upd: 0;
       c7ufc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ufb() //  [R1]
         { info_tbl: [(c7ufb,
                       label: block_c7ufb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ufb: // global
           I64[Sp - 16] = block_c7ufh_info;
           _s7tbJ::P64 = R1;
           _s7tbK::P64 = P64[R1 + 7];
           _s7tbL::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s7tbL::P64;
           P64[Sp] = _s7tbK::P64;
           P64[Sp + 8] = _s7tbJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ufX; else goto c7ufl;
       u7ufX: // global
           call _c7ufh(R1) args: 0, res: 0, upd: 0;
       c7ufl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ufh() //  [R1]
         { info_tbl: [(c7ufh,
                       label: block_c7ufh_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ufh: // global
           I64[Sp - 8] = block_c7ufp_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ufp() //  [R1]
         { info_tbl: [(c7ufp,
                       label: block_c7ufp_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ufp: // global
           _c7ufQ::P64 = R1 & 7;
           if (_c7ufQ::P64 < 3) goto u7ufS; else goto u7ufT;
       u7ufS: // global
           if (_c7ufQ::P64 < 2) goto u7ufU; else goto c7ufB;
       u7ufU: // global
           Sp = Sp + 32;
           call _c7ufL() args: 0, res: 0, upd: 0;
       c7ufB: // global
           _s7tbL::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7ufz_info;
           R3 = _s7tbL::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7ufT: // global
           Sp = Sp + 24;
           call _c7ufP() args: 0, res: 0, upd: 0;
     }
 },
 _c7ufz() //  [R1]
         { info_tbl: [(c7ufz,
                       label: block_c7ufz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ufz: // global
           if (R1 & 7 == 1) goto u7ufV; else goto u7ufW;
       u7ufV: // global
           Sp = Sp + 16;
           call _c7ufL() args: 0, res: 0, upd: 0;
       u7ufW: // global
           Sp = Sp + 8;
           call _c7ufP() args: 0, res: 0, upd: 0;
     }
 },
 _c7ufL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ufL: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7ufP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ufP: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.428395974 UTC

[section ""data" . GHC.Exception.$w$c>=_closure" {
     GHC.Exception.$w$c>=_closure:
         const GHC.Exception.$w$c>=_info;
 },
 GHC.Exception.$w$c>=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7uge,
                       label: GHC.Exception.$w$c>=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uge: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ugf; else goto c7ugg;
       c7ugf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ugg: // global
           I64[Sp - 24] = block_c7ug7_info;
           _s7tbS::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7tbS::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7ug7() //  [R1]
         { info_tbl: [(c7ug7,
                       label: block_c7ug7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ug7: // global
           _c7ugd::P64 = R1 & 7;
           if (_c7ugd::P64 < 3) goto u7ugC; else goto u7ugD;
       u7ugC: // global
           if (_c7ugd::P64 < 2) goto u7ugE; else goto c7ugb;
       u7ugE: // global
           Sp = Sp + 24;
           call _c7ugx() args: 0, res: 0, upd: 0;
       c7ugb: // global
           _s7tbU::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7ugm_info;
           R3 = _s7tbU::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7ugD: // global
           Sp = Sp + 24;
           call _c7ugc() args: 0, res: 0, upd: 0;
     }
 },
 _c7ugm() //  [R1]
         { info_tbl: [(c7ugm,
                       label: block_c7ugm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ugm: // global
           if (R1 & 7 == 1) goto u7ugF; else goto u7ugG;
       u7ugF: // global
           Sp = Sp + 8;
           call _c7ugx() args: 0, res: 0, upd: 0;
       u7ugG: // global
           Sp = Sp + 8;
           call _c7ugc() args: 0, res: 0, upd: 0;
     }
 },
 _c7ugx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ugx: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7ugc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ugc: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.430193916 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c>=_closure" {
     GHC.Exception.$fOrdErrorCall_$c>=_closure:
         const GHC.Exception.$fOrdErrorCall_$c>=_info;
 },
 GHC.Exception.$fOrdErrorCall_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7ugS,
                       label: GHC.Exception.$fOrdErrorCall_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ugS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ugW; else goto c7ugX;
       c7ugW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ugX: // global
           I64[Sp - 16] = block_c7ugP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uh5; else goto c7ugQ;
       u7uh5: // global
           call _c7ugP(R1) args: 0, res: 0, upd: 0;
       c7ugQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ugP() //  [R1]
         { info_tbl: [(c7ugP,
                       label: block_c7ugP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ugP: // global
           I64[Sp - 8] = block_c7ugV_info;
           _s7tc0::P64 = P64[R1 + 7];
           _s7tc1::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tc1::P64;
           P64[Sp + 8] = _s7tc0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uh4; else goto c7ugZ;
       u7uh4: // global
           call _c7ugV(R1) args: 0, res: 0, upd: 0;
       c7ugZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ugV() //  [R1]
         { info_tbl: [(c7ugV,
                       label: block_c7ugV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ugV: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c>=_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.431535919 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c>_closure" {
     GHC.Exception.$fOrdErrorCall_$c>_closure:
         const GHC.Exception.$fOrdErrorCall_$c>_info;
 },
 GHC.Exception.$fOrdErrorCall_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7uha,
                       label: GHC.Exception.$fOrdErrorCall_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uha: // global
           _s7tc6::P64 = R3;
           R3 = R2;
           R2 = _s7tc6::P64;
           call GHC.Exception.$fOrdErrorCall_$c<_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.432908861 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$cmin_closure" {
     GHC.Exception.$fOrdErrorCall_$cmin_closure:
         const GHC.Exception.$fOrdErrorCall_$cmin_info;
 },
 GHC.Exception.$fOrdErrorCall_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7uhk,
                       label: GHC.Exception.$fOrdErrorCall_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uhk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7uho; else goto c7uhp;
       c7uho: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uhp: // global
           I64[Sp - 16] = block_c7uhh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ui4; else goto c7uhi;
       u7ui4: // global
           call _c7uhh(R1) args: 0, res: 0, upd: 0;
       c7uhi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uhh() //  [R1]
         { info_tbl: [(c7uhh,
                       label: block_c7uhh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uhh: // global
           I64[Sp - 16] = block_c7uhn_info;
           _s7tc9::P64 = R1;
           _s7tca::P64 = P64[R1 + 7];
           _s7tcb::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s7tcb::P64;
           P64[Sp] = _s7tca::P64;
           P64[Sp + 8] = _s7tc9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ui3; else goto c7uhr;
       u7ui3: // global
           call _c7uhn(R1) args: 0, res: 0, upd: 0;
       c7uhr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uhn() //  [R1]
         { info_tbl: [(c7uhn,
                       label: block_c7uhn_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uhn: // global
           I64[Sp - 8] = block_c7uhv_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uhv() //  [R1]
         { info_tbl: [(c7uhv,
                       label: block_c7uhv_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uhv: // global
           _c7uhW::P64 = R1 & 7;
           if (_c7uhW::P64 < 3) goto u7uhY; else goto u7uhZ;
       u7uhY: // global
           if (_c7uhW::P64 < 2) goto u7ui0; else goto c7uhH;
       u7ui0: // global
           Sp = Sp + 24;
           call _c7uhR() args: 0, res: 0, upd: 0;
       c7uhH: // global
           _s7tcb::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7uhF_info;
           R3 = _s7tcb::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7uhZ: // global
           Sp = Sp + 32;
           call _c7uhV() args: 0, res: 0, upd: 0;
     }
 },
 _c7uhF() //  [R1]
         { info_tbl: [(c7uhF,
                       label: block_c7uhF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uhF: // global
           if (R1 & 7 == 1) goto u7ui1; else goto u7ui2;
       u7ui1: // global
           Sp = Sp + 8;
           call _c7uhR() args: 0, res: 0, upd: 0;
       u7ui2: // global
           Sp = Sp + 16;
           call _c7uhV() args: 0, res: 0, upd: 0;
     }
 },
 _c7uhR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uhR: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uhV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uhV: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.434908532 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_closure" {
     GHC.Exception.$fOrdErrorCall_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Exception.$fEqErrorCall_closure+1;
         const GHC.Exception.$fOrdErrorCall_$ccompare_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c<_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c<=_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c>_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c>=_closure+2;
         const GHC.Exception.$fOrdErrorCall_$cmax_closure+2;
         const GHC.Exception.$fOrdErrorCall_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.435695848 UTC

[section ""data" . GHC.Exception.$dmdisplayException_closure" {
     GHC.Exception.$dmdisplayException_closure:
         const GHC.Exception.$dmdisplayException_info;
 },
 GHC.Exception.$dmdisplayException_entry() //  [R2]
         { info_tbl: [(c7uif,
                       label: GHC.Exception.$dmdisplayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uif: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uig; else goto c7uih;
       c7uig: // global
           R2 = R2;
           R1 = GHC.Exception.$dmdisplayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uih: // global
           I64[Sp - 8] = block_c7uid_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uid() //  [R1]
         { info_tbl: [(c7uid,
                       label: block_c7uid_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uid: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Show.show_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.437072995 UTC

[section ""data" . GHC.Exception.$dmfromException_closure" {
     GHC.Exception.$dmfromException_closure:
         const GHC.Exception.$dmfromException_info;
         const 0;
 },
 GHC.Exception.$dmfromException_entry() //  [R2, R3]
         { info_tbl: [(c7uis,
                       label: GHC.Exception.$dmfromException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uis: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uiA; else goto c7uiB;
       c7uiA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$dmfromException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uiB: // global
           I64[Sp - 16] = block_c7uip_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uiX; else goto c7uiq;
       u7uiX: // global
           call _c7uip(R1) args: 0, res: 0, upd: 0;
       c7uiq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uip() //  [R1]
         { info_tbl: [(c7uip,
                       label: block_c7uip_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uip: // global
           I64[Sp - 8] = block_c7uiv_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uiv() //  [R1]
         { info_tbl: [(c7uiv,
                       label: block_c7uiv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uiv: // global
           I64[Sp] = block_c7uiz_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uiz() //  [R1]
         { info_tbl: [(c7uiz,
                       label: block_c7uiz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uiz: // global
           I64[Sp] = block_c7uiH_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uiH() //  [R1]
         { info_tbl: [(c7uiH,
                       label: block_c7uiH_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uiH: // global
           if (R1 & 7 == 1) goto c7uiO; else goto c7uiS;
       c7uiO: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7uiS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7uiV; else goto c7uiU;
       c7uiV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7uiU: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.439371548 UTC

[section ""data" . GHC.Exception.$dmtoException_closure" {
     GHC.Exception.$dmtoException_closure:
         const GHC.Exception.$dmtoException_info;
 },
 GHC.Exception.$dmtoException_entry() //  [R2, R3]
         { info_tbl: [(c7uj3,
                       label: GHC.Exception.$dmtoException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uj3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uj7; else goto c7uj6;
       c7uj7: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$dmtoException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uj6: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.44040638 UTC

[section ""data" . GHC.Exception.$bErrorCall_closure" {
     GHC.Exception.$bErrorCall_closure:
         const GHC.Exception.$bErrorCall_info;
 },
 GHC.Exception.$bErrorCall_entry() //  [R2]
         { info_tbl: [(c7ujd,
                       label: GHC.Exception.$bErrorCall_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ujd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7ujh; else goto c7ujg;
       c7ujh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$bErrorCall_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ujg: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.441633519 UTC

[section ""data" . GHC.Exception.throw_closure" {
     GHC.Exception.throw_closure:
         const GHC.Exception.throw_info;
 },
 sat_s7tcu_entry() //  [R1]
         { info_tbl: [(c7ujq,
                       label: sat_s7tcu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ujq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ujr; else goto c7ujs;
       c7ujr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ujs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exception.throw_entry() //  [R2, R3]
         { info_tbl: [(c7ujt,
                       label: GHC.Exception.throw_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ujt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ujx; else goto c7ujw;
       c7ujx: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.throw_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ujw: // global
           I64[Hp - 24] = sat_s7tcu_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.443045519 UTC

[section ""data" . GHC.Exception.$mErrorCall_closure" {
     GHC.Exception.$mErrorCall_closure:
         const GHC.Exception.$mErrorCall_info;
 },
 GHC.Exception.$mErrorCall_entry() //  [R2, R3, R4]
         { info_tbl: [(c7ujF,
                       label: GHC.Exception.$mErrorCall_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ujF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ujG; else goto c7ujH;
       c7ujG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$mErrorCall_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ujH: // global
           I64[Sp - 16] = block_c7ujC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ujL; else goto c7ujD;
       u7ujL: // global
           call _c7ujC(R1) args: 0, res: 0, upd: 0;
       c7ujD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ujC() //  [R1]
         { info_tbl: [(c7ujC,
                       label: block_c7ujC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ujC: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.44414906 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException12_bytes" {
     GHC.Exception.errorCallWithCallStackException12_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,45,112,114,111,102,41,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.444901321 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException11_closure" {
     GHC.Exception.errorCallWithCallStackException11_closure:
         const GHC.Exception.errorCallWithCallStackException11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException11_entry() //  [R1]
         { info_tbl: [(c7ujS,
                       label: GHC.Exception.errorCallWithCallStackException11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ujS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ujT; else goto c7ujU;
       c7ujT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ujU: // global
           (_c7ujP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ujP::I64 == 0) goto c7ujR; else goto c7ujQ;
       c7ujR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ujQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ujP::I64;
           R2 = GHC.Exception.errorCallWithCallStackException12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.447338737 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException5_bytes" {
     GHC.Exception.errorCallWithCallStackException5_bytes:
         I8[] [32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.448057911 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException10_closure" {
     GHC.Exception.errorCallWithCallStackException10_closure:
         const GHC.Exception.errorCallWithCallStackException10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException10_entry() //  [R1]
         { info_tbl: [(c7uk1,
                       label: GHC.Exception.errorCallWithCallStackException10_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uk1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uk2; else goto c7uk3;
       c7uk2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uk3: // global
           (_c7ujY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ujY::I64 == 0) goto c7uk0; else goto c7ujZ;
       c7uk0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ujZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ujY::I64;
           R2 = GHC.Exception.errorCallWithCallStackException5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.449059724 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException9_closure" {
     GHC.Exception.errorCallWithCallStackException9_closure:
         const GHC.Exception.errorCallWithCallStackException9_info;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException9_entry() //  [R2]
         { info_tbl: [(c7uk8,
                       label: GHC.Exception.errorCallWithCallStackException9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uk8: // global
           R3 = R2;
           R2 = GHC.Exception.errorCallWithCallStackException10_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.450323486 UTC

[section ""data" . GHC.Exception.showCCSStack_closure" {
     GHC.Exception.showCCSStack_closure:
         const GHC.Exception.showCCSStack_info;
         const 0;
 },
 sat_s7tcG_entry() //  [R1]
         { info_tbl: [(c7ukr,
                       label: sat_s7tcG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ukr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uks; else goto c7ukt;
       c7uks: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ukt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7ukp_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7ukp() //  [R1]
         { info_tbl: [(c7ukp,
                       label: block_c7ukp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ukp: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.showCCSStack_entry() //  [R2]
         { info_tbl: [(c7ukB,
                       label: GHC.Exception.showCCSStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ukB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7ukC; else goto c7ukD;
       c7ukC: // global
           R2 = R2;
           R1 = GHC.Exception.showCCSStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ukD: // global
           I64[Sp - 8] = block_c7ukf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ukK; else goto c7ukg;
       u7ukK: // global
           call _c7ukf(R1) args: 0, res: 0, upd: 0;
       c7ukg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ukf() //  [R1]
         { info_tbl: [(c7ukf,
                       label: block_c7ukf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ukf: // global
           if (R1 & 7 == 1) goto c7uky; else goto c7ukz;
       c7uky: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ukz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7ukJ; else goto c7ukI;
       c7ukJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ukI: // global
           I64[Hp - 40] = sat_s7tcG_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.45320205 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$ccompare_closure" {
     GHC.Exception.$fOrdArithException_$ccompare_closure:
         const GHC.Exception.$fOrdArithException_$ccompare_info;
 },
 GHC.Exception.$fOrdArithException_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7ul0,
                       label: GHC.Exception.$fOrdArithException_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ul0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ul1; else goto c7ul2;
       c7ul1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ul2: // global
           I64[Sp - 16] = block_c7ukP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uo5; else goto c7ukQ;
       u7uo5: // global
           call _c7ukP(R1) args: 0, res: 0, upd: 0;
       c7ukQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ukP() //  [R1]
         { info_tbl: [(c7ukP,
                       label: block_c7ukP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ukP: // global
           _s7tcI::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7ukT;
               case 2 : goto c7ukU;
               case 3 : goto c7ukV;
               case 4 : goto c7ukW;
               case 5 : goto c7ukX;
               case 6 : goto c7ukY;
           }
       c7ukY: // global
           I64[Sp + 8] = block_c7unc_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uo4; else goto c7une;
       u7uo4: // global
           call _c7unc(R1) args: 0, res: 0, upd: 0;
       c7une: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ukX: // global
           I64[Sp + 8] = block_c7umT_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uo3; else goto c7umV;
       u7uo3: // global
           call _c7umT(R1) args: 0, res: 0, upd: 0;
       c7umV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ukW: // global
           I64[Sp + 8] = block_c7umw_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uo2; else goto c7umy;
       u7uo2: // global
           call _c7umw(R1) args: 0, res: 0, upd: 0;
       c7umy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ukV: // global
           I64[Sp + 8] = block_c7um5_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uo1; else goto c7um7;
       u7uo1: // global
           call _c7um5(R1) args: 0, res: 0, upd: 0;
       c7um7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ukU: // global
           I64[Sp + 8] = block_c7ulA_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uo0; else goto c7ulC;
       u7uo0: // global
           call _c7ulA(R1) args: 0, res: 0, upd: 0;
       c7ulC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ukT: // global
           I64[Sp + 8] = block_c7ul5_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7unZ; else goto c7ul7;
       u7unZ: // global
           call _c7ul5(R1) args: 0, res: 0, upd: 0;
       c7ul7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7unc() //  [R1]
         { info_tbl: [(c7unc,
                       label: block_c7unc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7unc: // global
           if (R1 & 7 == 6) goto u7unA; else goto u7unB;
       u7unA: // global
           Sp = Sp + 8;
           call _c7uno() args: 0, res: 0, upd: 0;
       u7unB: // global
           Sp = Sp + 8;
           call _c7unk() args: 0, res: 0, upd: 0;
     }
 },
 _c7umT() //  [R1]
         { info_tbl: [(c7umT,
                       label: block_c7umT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7umT: // global
           _c7unq::P64 = R1 & 7;
           if (_c7unq::P64 != 5) goto u7unz; else goto u7unC;
       u7unz: // global
           if (_c7unq::P64 != 6) goto u7unE; else goto u7unD;
       u7unE: // global
           Sp = Sp + 8;
           call _c7unk() args: 0, res: 0, upd: 0;
       u7unD: // global
           Sp = Sp + 8;
           call _c7un9() args: 0, res: 0, upd: 0;
       u7unC: // global
           Sp = Sp + 8;
           call _c7uno() args: 0, res: 0, upd: 0;
     }
 },
 _c7umw() //  [R1]
         { info_tbl: [(c7umw,
                       label: block_c7umw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7umw: // global
           _c7unr::P64 = R1 & 7;
           if (_c7unr::P64 < 5) goto u7unx; else goto u7uny;
       u7unx: // global
           if (_c7unr::P64 < 4) goto u7unG; else goto u7unF;
       u7unG: // global
           Sp = Sp + 8;
           call _c7unk() args: 0, res: 0, upd: 0;
       u7unF: // global
           Sp = Sp + 8;
           call _c7uno() args: 0, res: 0, upd: 0;
       u7uny: // global
           if (_c7unr::P64 < 6) goto u7unI; else goto u7unI;
       u7unI: // global
           Sp = Sp + 8;
           call _c7un9() args: 0, res: 0, upd: 0;
     }
 },
 _c7um5() //  [R1]
         { info_tbl: [(c7um5,
                       label: block_c7um5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7um5: // global
           _c7uns::P64 = R1 & 7;
           if (_c7uns::P64 < 4) goto u7unv; else goto u7unw;
       u7unv: // global
           if (_c7uns::P64 < 3) goto u7unK; else goto u7unJ;
       u7unK: // global
           Sp = Sp + 8;
           call _c7unk() args: 0, res: 0, upd: 0;
       u7unJ: // global
           Sp = Sp + 8;
           call _c7uno() args: 0, res: 0, upd: 0;
       u7unw: // global
           if (_c7uns::P64 != 5) goto u7unM; else goto u7unM;
       u7unM: // global
           Sp = Sp + 8;
           call _c7un9() args: 0, res: 0, upd: 0;
     }
 },
 _c7ulA() //  [R1]
         { info_tbl: [(c7ulA,
                       label: block_c7ulA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ulA: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7unN;
               case 2 : goto u7unO;
               case 3, 4, 5, 6 : goto u7unS;
           }
       u7unS: // global
           Sp = Sp + 8;
           call _c7un9() args: 0, res: 0, upd: 0;
       u7unO: // global
           Sp = Sp + 8;
           call _c7uno() args: 0, res: 0, upd: 0;
       u7unN: // global
           Sp = Sp + 8;
           call _c7unk() args: 0, res: 0, upd: 0;
     }
 },
 _c7unk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7unk: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7ul5() //  [R1]
         { info_tbl: [(c7ul5,
                       label: block_c7ul5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ul5: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7unT;
               case 2, 3, 4, 5, 6 : goto u7unY;
           }
       u7unY: // global
           Sp = Sp + 8;
           call _c7un9() args: 0, res: 0, upd: 0;
       u7unT: // global
           Sp = Sp + 8;
           call _c7uno() args: 0, res: 0, upd: 0;
     }
 },
 _c7un9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7un9: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uno() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uno: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.457418327 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c<_closure" {
     GHC.Exception.$fOrdArithException_$c<_closure:
         const GHC.Exception.$fOrdArithException_$c<_info;
 },
 GHC.Exception.$fOrdArithException_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7uoB,
                       label: GHC.Exception.$fOrdArithException_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uoB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uoC; else goto c7uoD;
       c7uoC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uoD: // global
           I64[Sp - 16] = block_c7uoq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7urb; else goto c7uor;
       u7urb: // global
           call _c7uoq(R1) args: 0, res: 0, upd: 0;
       c7uor: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uoq() //  [R1]
         { info_tbl: [(c7uoq,
                       label: block_c7uoq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uoq: // global
           _s7tcR::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7uou;
               case 2 : goto c7uov;
               case 3 : goto c7uow;
               case 4 : goto c7uox;
               case 5 : goto c7uoy;
               case 6 : goto c7uoz;
           }
       c7uoz: // global
           I64[Sp + 8] = block_c7uqx_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7ura; else goto c7uqz;
       u7ura: // global
           call _c7uqx() args: 0, res: 0, upd: 0;
       c7uqz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uoy: // global
           I64[Sp + 8] = block_c7uqi_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7ur9; else goto c7uqk;
       u7ur9: // global
           call _c7uqi(R1) args: 0, res: 0, upd: 0;
       c7uqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uox: // global
           I64[Sp + 8] = block_c7upZ_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7ur8; else goto c7uq1;
       u7ur8: // global
           call _c7upZ(R1) args: 0, res: 0, upd: 0;
       c7uq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uow: // global
           I64[Sp + 8] = block_c7upC_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7ur7; else goto c7upE;
       u7ur7: // global
           call _c7upC(R1) args: 0, res: 0, upd: 0;
       c7upE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uov: // global
           I64[Sp + 8] = block_c7upb_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7ur6; else goto c7upd;
       u7ur6: // global
           call _c7upb(R1) args: 0, res: 0, upd: 0;
       c7upd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uou: // global
           I64[Sp + 8] = block_c7uoG_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7ur5; else goto c7uoI;
       u7ur5: // global
           call _c7uoG(R1) args: 0, res: 0, upd: 0;
       c7uoI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uqx() //  []
         { info_tbl: [(c7uqx,
                       label: block_c7uqx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uqx: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uqi() //  [R1]
         { info_tbl: [(c7uqi,
                       label: block_c7uqi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uqi: // global
           if (R1 & 7 == 6) goto u7uqN; else goto u7uqO;
       u7uqN: // global
           Sp = Sp + 8;
           call _c7uqu() args: 0, res: 0, upd: 0;
       u7uqO: // global
           Sp = Sp + 8;
           call _c7uqq() args: 0, res: 0, upd: 0;
     }
 },
 _c7upZ() //  [R1]
         { info_tbl: [(c7upZ,
                       label: block_c7upZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7upZ: // global
           _c7uqF::P64 = R1 & 7;
           if (_c7uqF::P64 != 5) goto u7uqM; else goto u7uqP;
       u7uqM: // global
           if (_c7uqF::P64 != 6) goto u7uqR; else goto u7uqQ;
       u7uqR: // global
           Sp = Sp + 8;
           call _c7uqq() args: 0, res: 0, upd: 0;
       u7uqQ: // global
           Sp = Sp + 8;
           goto u7urk;
       u7uqP: // global
           Sp = Sp + 8;
           goto u7urk;
       u7urk: // global
           call _c7uqu() args: 0, res: 0, upd: 0;
     }
 },
 _c7upC() //  [R1]
         { info_tbl: [(c7upC,
                       label: block_c7upC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7upC: // global
           _c7uqG::P64 = R1 & 7;
           if (_c7uqG::P64 < 4) goto u7uqS; else goto u7uqL;
       u7uqS: // global
           Sp = Sp + 8;
           call _c7uqq() args: 0, res: 0, upd: 0;
       u7uqL: // global
           if (_c7uqG::P64 != 5) goto u7uqU; else goto u7uqU;
       u7uqU: // global
           Sp = Sp + 8;
           call _c7uqu() args: 0, res: 0, upd: 0;
     }
 },
 _c7upb() //  [R1]
         { info_tbl: [(c7upb,
                       label: block_c7upb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7upb: // global
           _c7uqH::P64 = R1 & 7;
           if (_c7uqH::P64 < 6) goto u7uqJ; else goto u7uqV;
       u7uqJ: // global
           if (_c7uqH::P64 < 3) goto u7uqW; else goto u7uqK;
       u7uqW: // global
           Sp = Sp + 8;
           call _c7uqq() args: 0, res: 0, upd: 0;
       u7uqK: // global
           if (_c7uqH::P64 != 4) goto u7uqY; else goto u7uqY;
       u7uqY: // global
           Sp = Sp + 8;
           goto u7urg;
       u7uqV: // global
           Sp = Sp + 8;
           goto u7urg;
       u7urg: // global
           call _c7uqu() args: 0, res: 0, upd: 0;
     }
 },
 _c7uoG() //  [R1]
         { info_tbl: [(c7uoG,
                       label: block_c7uoG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uoG: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7uqZ;
               case 2, 3, 4, 5, 6 : goto u7ur4;
           }
       u7ur4: // global
           Sp = Sp + 8;
           call _c7uqu() args: 0, res: 0, upd: 0;
       u7uqZ: // global
           Sp = Sp + 8;
           call _c7uqq() args: 0, res: 0, upd: 0;
     }
 },
 _c7uqu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uqu: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uqq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uqq: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.461344925 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c<=_closure" {
     GHC.Exception.$fOrdArithException_$c<=_closure:
         const GHC.Exception.$fOrdArithException_$c<=_info;
 },
 GHC.Exception.$fOrdArithException_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7urD,
                       label: GHC.Exception.$fOrdArithException_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7urD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7urE; else goto c7urF;
       c7urE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7urF: // global
           I64[Sp - 16] = block_c7urs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uud; else goto c7urt;
       u7uud: // global
           call _c7urs(R1) args: 0, res: 0, upd: 0;
       c7urt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7urs() //  [R1]
         { info_tbl: [(c7urs,
                       label: block_c7urs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7urs: // global
           _s7tcZ::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7urw;
               case 2 : goto c7urx;
               case 3 : goto c7ury;
               case 4 : goto c7urz;
               case 5 : goto c7urA;
               case 6 : goto c7urB;
           }
       c7urB: // global
           I64[Sp + 8] = block_c7utz_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uuc; else goto c7utB;
       u7uuc: // global
           call _c7utz() args: 0, res: 0, upd: 0;
       c7utB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7urA: // global
           I64[Sp + 8] = block_c7utk_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uub; else goto c7utm;
       u7uub: // global
           call _c7utk(R1) args: 0, res: 0, upd: 0;
       c7utm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7urz: // global
           I64[Sp + 8] = block_c7ut1_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uua; else goto c7ut3;
       u7uua: // global
           call _c7ut1(R1) args: 0, res: 0, upd: 0;
       c7ut3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ury: // global
           I64[Sp + 8] = block_c7usE_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uu9; else goto c7usG;
       u7uu9: // global
           call _c7usE(R1) args: 0, res: 0, upd: 0;
       c7usG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7urx: // global
           I64[Sp + 8] = block_c7usd_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uu8; else goto c7usf;
       u7uu8: // global
           call _c7usd(R1) args: 0, res: 0, upd: 0;
       c7usf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7urw: // global
           I64[Sp + 8] = block_c7urI_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uu7; else goto c7urK;
       u7uu7: // global
           call _c7urI(R1) args: 0, res: 0, upd: 0;
       c7urK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7utz() //  []
         { info_tbl: [(c7utz,
                       label: block_c7utz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7utz: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7utk() //  [R1]
         { info_tbl: [(c7utk,
                       label: block_c7utk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7utk: // global
           if (R1 & 7 == 6) goto u7utP; else goto u7utQ;
       u7utP: // global
           Sp = Sp + 8;
           call _c7utw() args: 0, res: 0, upd: 0;
       u7utQ: // global
           Sp = Sp + 8;
           call _c7uts() args: 0, res: 0, upd: 0;
     }
 },
 _c7ut1() //  [R1]
         { info_tbl: [(c7ut1,
                       label: block_c7ut1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ut1: // global
           _c7utH::P64 = R1 & 7;
           if (_c7utH::P64 != 5) goto u7utO; else goto u7utR;
       u7utO: // global
           if (_c7utH::P64 != 6) goto u7utT; else goto u7utS;
       u7utT: // global
           Sp = Sp + 8;
           call _c7uts() args: 0, res: 0, upd: 0;
       u7utS: // global
           Sp = Sp + 8;
           goto u7uum;
       u7utR: // global
           Sp = Sp + 8;
           goto u7uum;
       u7uum: // global
           call _c7utw() args: 0, res: 0, upd: 0;
     }
 },
 _c7usE() //  [R1]
         { info_tbl: [(c7usE,
                       label: block_c7usE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7usE: // global
           _c7utI::P64 = R1 & 7;
           if (_c7utI::P64 < 4) goto u7utU; else goto u7utN;
       u7utU: // global
           Sp = Sp + 8;
           call _c7uts() args: 0, res: 0, upd: 0;
       u7utN: // global
           if (_c7utI::P64 != 5) goto u7utW; else goto u7utW;
       u7utW: // global
           Sp = Sp + 8;
           call _c7utw() args: 0, res: 0, upd: 0;
     }
 },
 _c7usd() //  [R1]
         { info_tbl: [(c7usd,
                       label: block_c7usd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7usd: // global
           _c7utJ::P64 = R1 & 7;
           if (_c7utJ::P64 < 6) goto u7utL; else goto u7utX;
       u7utL: // global
           if (_c7utJ::P64 < 3) goto u7utY; else goto u7utM;
       u7utY: // global
           Sp = Sp + 8;
           call _c7uts() args: 0, res: 0, upd: 0;
       u7utM: // global
           if (_c7utJ::P64 != 4) goto u7uu0; else goto u7uu0;
       u7uu0: // global
           Sp = Sp + 8;
           goto u7uui;
       u7utX: // global
           Sp = Sp + 8;
           goto u7uui;
       u7uui: // global
           call _c7utw() args: 0, res: 0, upd: 0;
     }
 },
 _c7urI() //  [R1]
         { info_tbl: [(c7urI,
                       label: block_c7urI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7urI: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7uu1;
               case 2, 3, 4, 5, 6 : goto u7uu6;
           }
       u7uu6: // global
           Sp = Sp + 8;
           call _c7utw() args: 0, res: 0, upd: 0;
       u7uu1: // global
           Sp = Sp + 8;
           call _c7uts() args: 0, res: 0, upd: 0;
     }
 },
 _c7utw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7utw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uts() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uts: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.465281757 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$cmax_closure" {
     GHC.Exception.$fOrdArithException_$cmax_closure:
         const GHC.Exception.$fOrdArithException_$cmax_info;
 },
 GHC.Exception.$fOrdArithException_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7uuF,
                       label: GHC.Exception.$fOrdArithException_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uuF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uuG; else goto c7uuH;
       c7uuG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uuH: // global
           I64[Sp - 16] = block_c7uuu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uwI; else goto c7uuv;
       u7uwI: // global
           call _c7uuu(R1) args: 0, res: 0, upd: 0;
       c7uuv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uuu() //  [R1]
         { info_tbl: [(c7uuu,
                       label: block_c7uuu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uuu: // global
           _s7td8::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7uuy;
               case 2 : goto c7uuz;
               case 3 : goto c7uuA;
               case 4 : goto c7uuB;
               case 5 : goto c7uuC;
               case 6 : goto c7uuD;
           }
       c7uuD: // global
           I64[Sp + 8] = block_c7uw9_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uwH; else goto c7uwb;
       u7uwH: // global
           call _c7uw9() args: 0, res: 0, upd: 0;
       c7uwb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uuC: // global
           I64[Sp + 8] = block_c7uvU_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uwG; else goto c7uvW;
       u7uwG: // global
           call _c7uvU(R1) args: 0, res: 0, upd: 0;
       c7uvW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uuB: // global
           I64[Sp + 8] = block_c7uvB_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uwF; else goto c7uvD;
       u7uwF: // global
           call _c7uvB(R1) args: 0, res: 0, upd: 0;
       c7uvD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uuA: // global
           I64[Sp + 8] = block_c7uve_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uwE; else goto c7uvg;
       u7uwE: // global
           call _c7uve(R1) args: 0, res: 0, upd: 0;
       c7uvg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uuz: // global
           I64[Sp + 8] = block_c7uuN_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uwD; else goto c7uuP;
       u7uwD: // global
           call _c7uuN(R1) args: 0, res: 0, upd: 0;
       c7uuP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uuy: // global
           R1 = _s7td8::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uw9() //  []
         { info_tbl: [(c7uw9,
                       label: block_c7uw9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uw9: // global
           R1 = GHC.Exception.RatioZeroDenominator_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uvU() //  [R1]
         { info_tbl: [(c7uvU,
                       label: block_c7uvU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uvU: // global
           if (R1 & 7 == 6) goto u7uwq; else goto u7uwr;
       u7uwq: // global
           Sp = Sp + 8;
           call _c7uw6() args: 0, res: 0, upd: 0;
       u7uwr: // global
           Sp = Sp + 8;
           call _c7uw2() args: 0, res: 0, upd: 0;
     }
 },
 _c7uvB() //  [R1]
         { info_tbl: [(c7uvB,
                       label: block_c7uvB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uvB: // global
           _c7uwh::P64 = R1 & 7;
           if (_c7uwh::P64 != 5) goto u7uwp; else goto u7uws;
       u7uwp: // global
           if (_c7uwh::P64 != 6) goto u7uwu; else goto u7uwt;
       u7uwu: // global
           Sp = Sp + 8;
           call _c7uvJ() args: 0, res: 0, upd: 0;
       u7uwt: // global
           Sp = Sp + 8;
           call _c7uw6() args: 0, res: 0, upd: 0;
       u7uws: // global
           Sp = Sp + 8;
           call _c7uw2() args: 0, res: 0, upd: 0;
     }
 },
 _c7uve() //  [R1]
         { info_tbl: [(c7uve,
                       label: block_c7uve_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uve: // global
           _c7uwi::P64 = R1 & 7;
           if (_c7uwi::P64 < 5) goto u7uwn; else goto u7uwo;
       u7uwn: // global
           if (_c7uwi::P64 < 4) goto u7uww; else goto u7uwv;
       u7uww: // global
           Sp = Sp + 8;
           call _c7uvm() args: 0, res: 0, upd: 0;
       u7uwv: // global
           Sp = Sp + 8;
           call _c7uvJ() args: 0, res: 0, upd: 0;
       u7uwo: // global
           if (_c7uwi::P64 < 6) goto u7uwy; else goto u7uwx;
       u7uwy: // global
           Sp = Sp + 8;
           call _c7uw2() args: 0, res: 0, upd: 0;
       u7uwx: // global
           Sp = Sp + 8;
           call _c7uw6() args: 0, res: 0, upd: 0;
     }
 },
 _c7uuN() //  [R1]
         { info_tbl: [(c7uuN,
                       label: block_c7uuN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uuN: // global
           _c7uwj::P64 = R1 & 7;
           if (_c7uwj::P64 < 5) goto u7uwk; else goto u7uwm;
       u7uwk: // global
           if (_c7uwj::P64 < 4) goto u7uwl; else goto u7uwz;
       u7uwl: // global
           if (_c7uwj::P64 < 3) goto c7uuV; else goto u7uwA;
       c7uuV: // global
           R1 = GHC.Exception.Underflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7uwA: // global
           Sp = Sp + 8;
           call _c7uvm() args: 0, res: 0, upd: 0;
       u7uwz: // global
           Sp = Sp + 8;
           call _c7uvJ() args: 0, res: 0, upd: 0;
       u7uwm: // global
           if (_c7uwj::P64 < 6) goto u7uwC; else goto u7uwB;
       u7uwC: // global
           Sp = Sp + 8;
           call _c7uw2() args: 0, res: 0, upd: 0;
       u7uwB: // global
           Sp = Sp + 8;
           call _c7uw6() args: 0, res: 0, upd: 0;
     }
 },
 _c7uvm() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uvm: // global
           R1 = GHC.Exception.LossOfPrecision_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uvJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uvJ: // global
           R1 = GHC.Exception.DivideByZero_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uw2() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uw2: // global
           R1 = GHC.Exception.Denormal_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uw6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uw6: // global
           R1 = GHC.Exception.RatioZeroDenominator_closure+6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.469355367 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c>=_closure" {
     GHC.Exception.$fOrdArithException_$c>=_closure:
         const GHC.Exception.$fOrdArithException_$c>=_info;
 },
 GHC.Exception.$fOrdArithException_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7uxb,
                       label: GHC.Exception.$fOrdArithException_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uxb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uxc; else goto c7uxd;
       c7uxc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uxd: // global
           I64[Sp - 16] = block_c7ux0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uzL; else goto c7ux1;
       u7uzL: // global
           call _c7ux0(R1) args: 0, res: 0, upd: 0;
       c7ux1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ux0() //  [R1]
         { info_tbl: [(c7ux0,
                       label: block_c7ux0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ux0: // global
           _s7tdh::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7ux4;
               case 2 : goto c7ux5;
               case 3 : goto c7ux6;
               case 4 : goto c7ux7;
               case 5 : goto c7ux8;
               case 6 : goto c7ux9;
           }
       c7ux9: // global
           I64[Sp + 8] = block_c7uz7_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uzK; else goto c7uz9;
       u7uzK: // global
           call _c7uz7() args: 0, res: 0, upd: 0;
       c7uz9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ux8: // global
           I64[Sp + 8] = block_c7uyS_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uzJ; else goto c7uyU;
       u7uzJ: // global
           call _c7uyS(R1) args: 0, res: 0, upd: 0;
       c7uyU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ux7: // global
           I64[Sp + 8] = block_c7uyz_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uzI; else goto c7uyB;
       u7uzI: // global
           call _c7uyz(R1) args: 0, res: 0, upd: 0;
       c7uyB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ux6: // global
           I64[Sp + 8] = block_c7uyc_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uzH; else goto c7uye;
       u7uzH: // global
           call _c7uyc(R1) args: 0, res: 0, upd: 0;
       c7uye: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ux5: // global
           I64[Sp + 8] = block_c7uxL_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uzG; else goto c7uxN;
       u7uzG: // global
           call _c7uxL(R1) args: 0, res: 0, upd: 0;
       c7uxN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ux4: // global
           I64[Sp + 8] = block_c7uxg_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uzF; else goto c7uxi;
       u7uzF: // global
           call _c7uxg(R1) args: 0, res: 0, upd: 0;
       c7uxi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uz7() //  []
         { info_tbl: [(c7uz7,
                       label: block_c7uz7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uz7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uyS() //  [R1]
         { info_tbl: [(c7uyS,
                       label: block_c7uyS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uyS: // global
           if (R1 & 7 == 6) goto u7uzn; else goto u7uzo;
       u7uzn: // global
           Sp = Sp + 8;
           call _c7uz4() args: 0, res: 0, upd: 0;
       u7uzo: // global
           Sp = Sp + 8;
           call _c7uz0() args: 0, res: 0, upd: 0;
     }
 },
 _c7uyz() //  [R1]
         { info_tbl: [(c7uyz,
                       label: block_c7uyz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uyz: // global
           _c7uzf::P64 = R1 & 7;
           if (_c7uzf::P64 != 5) goto u7uzm; else goto u7uzp;
       u7uzm: // global
           if (_c7uzf::P64 != 6) goto u7uzr; else goto u7uzq;
       u7uzr: // global
           Sp = Sp + 8;
           call _c7uz0() args: 0, res: 0, upd: 0;
       u7uzq: // global
           Sp = Sp + 8;
           goto u7uzU;
       u7uzp: // global
           Sp = Sp + 8;
           goto u7uzU;
       u7uzU: // global
           call _c7uz4() args: 0, res: 0, upd: 0;
     }
 },
 _c7uyc() //  [R1]
         { info_tbl: [(c7uyc,
                       label: block_c7uyc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uyc: // global
           _c7uzg::P64 = R1 & 7;
           if (_c7uzg::P64 < 4) goto u7uzs; else goto u7uzl;
       u7uzs: // global
           Sp = Sp + 8;
           call _c7uz0() args: 0, res: 0, upd: 0;
       u7uzl: // global
           if (_c7uzg::P64 != 5) goto u7uzu; else goto u7uzu;
       u7uzu: // global
           Sp = Sp + 8;
           call _c7uz4() args: 0, res: 0, upd: 0;
     }
 },
 _c7uxL() //  [R1]
         { info_tbl: [(c7uxL,
                       label: block_c7uxL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uxL: // global
           _c7uzh::P64 = R1 & 7;
           if (_c7uzh::P64 < 6) goto u7uzj; else goto u7uzv;
       u7uzj: // global
           if (_c7uzh::P64 < 3) goto u7uzw; else goto u7uzk;
       u7uzw: // global
           Sp = Sp + 8;
           call _c7uz0() args: 0, res: 0, upd: 0;
       u7uzk: // global
           if (_c7uzh::P64 != 4) goto u7uzy; else goto u7uzy;
       u7uzy: // global
           Sp = Sp + 8;
           goto u7uzQ;
       u7uzv: // global
           Sp = Sp + 8;
           goto u7uzQ;
       u7uzQ: // global
           call _c7uz4() args: 0, res: 0, upd: 0;
     }
 },
 _c7uxg() //  [R1]
         { info_tbl: [(c7uxg,
                       label: block_c7uxg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uxg: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7uzz;
               case 2, 3, 4, 5, 6 : goto u7uzE;
           }
       u7uzE: // global
           Sp = Sp + 8;
           call _c7uz4() args: 0, res: 0, upd: 0;
       u7uzz: // global
           Sp = Sp + 8;
           call _c7uz0() args: 0, res: 0, upd: 0;
     }
 },
 _c7uz4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uz4: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uz0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uz0: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.472320417 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c>_closure" {
     GHC.Exception.$fOrdArithException_$c>_closure:
         const GHC.Exception.$fOrdArithException_$c>_info;
 },
 GHC.Exception.$fOrdArithException_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7uA2,
                       label: GHC.Exception.$fOrdArithException_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uA2: // global
           _s7tdq::P64 = R3;
           R3 = R2;
           R2 = _s7tdq::P64;
           call GHC.Exception.$fOrdArithException_$c<_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.47417605 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$cmin_closure" {
     GHC.Exception.$fOrdArithException_$cmin_closure:
         const GHC.Exception.$fOrdArithException_$cmin_info;
 },
 GHC.Exception.$fOrdArithException_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7uAk,
                       label: GHC.Exception.$fOrdArithException_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uAk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uAl; else goto c7uAm;
       c7uAl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uAm: // global
           I64[Sp - 16] = block_c7uA9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uC8; else goto c7uAa;
       u7uC8: // global
           call _c7uA9(R1) args: 0, res: 0, upd: 0;
       c7uAa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uA9() //  [R1]
         { info_tbl: [(c7uA9,
                       label: block_c7uA9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uA9: // global
           _s7tdr::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7uAd;
               case 2 : goto c7uAe;
               case 3 : goto c7uAf;
               case 4 : goto c7uAg;
               case 5 : goto c7uAh;
               case 6 : goto c7uAi;
           }
       c7uAi: // global
           R1 = _s7tdr::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7uAh: // global
           I64[Sp + 8] = block_c7uBF_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uC7; else goto c7uBH;
       u7uC7: // global
           call _c7uBF(R1) args: 0, res: 0, upd: 0;
       c7uBH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uAg: // global
           I64[Sp + 8] = block_c7uBm_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uC6; else goto c7uBo;
       u7uC6: // global
           call _c7uBm(R1) args: 0, res: 0, upd: 0;
       c7uBo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uAf: // global
           I64[Sp + 8] = block_c7uAZ_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uC5; else goto c7uB1;
       u7uC5: // global
           call _c7uAZ(R1) args: 0, res: 0, upd: 0;
       c7uB1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uAe: // global
           I64[Sp + 8] = block_c7uAy_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uC4; else goto c7uAA;
       u7uC4: // global
           call _c7uAy(R1) args: 0, res: 0, upd: 0;
       c7uAA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uAd: // global
           I64[Sp + 8] = block_c7uAp_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uC3; else goto c7uAr;
       u7uC3: // global
           call _c7uAp() args: 0, res: 0, upd: 0;
       c7uAr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uBF() //  [R1]
         { info_tbl: [(c7uBF,
                       label: block_c7uBF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uBF: // global
           if (R1 & 7 == 6) goto c7uBR; else goto c7uBN;
       c7uBR: // global
           R1 = GHC.Exception.Denormal_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7uBN: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uBm() //  [R1]
         { info_tbl: [(c7uBm,
                       label: block_c7uBm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uBm: // global
           _c7uBW::P64 = R1 & 7;
           if (_c7uBW::P64 == 5) goto c7uBC; else goto u7uC2;
       u7uC2: // global
           if (_c7uBW::P64 == 6) goto c7uBC; else goto c7uBu;
       c7uBC: // global
           R1 = GHC.Exception.DivideByZero_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7uBu: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uAZ() //  [R1]
         { info_tbl: [(c7uAZ,
                       label: block_c7uAZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uAZ: // global
           _c7uBX::P64 = R1 & 7;
           if (_c7uBX::P64 < 4) goto c7uB7; else goto u7uC1;
       c7uB7: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u7uC1: // global
           if (_c7uBX::P64 != 5) goto c7uBj; else goto c7uBj;
       c7uBj: // global
           R1 = GHC.Exception.LossOfPrecision_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uAy() //  [R1]
         { info_tbl: [(c7uAy,
                       label: block_c7uAy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uAy: // global
           _c7uBY::P64 = R1 & 7;
           if (_c7uBY::P64 >= 6) goto c7uAW; else goto u7uBZ;
       u7uBZ: // global
           if (_c7uBY::P64 < 3) goto c7uAG; else goto u7uC0;
       c7uAG: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u7uC0: // global
           if (_c7uBY::P64 != 4) goto c7uAW; else goto c7uAW;
       c7uAW: // global
           R1 = GHC.Exception.Underflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uAp() //  []
         { info_tbl: [(c7uAp,
                       label: block_c7uAp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uAp: // global
           R1 = GHC.Exception.Overflow_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.476720444 UTC

[section ""data" . GHC.Exception.$fOrdArithException_closure" {
     GHC.Exception.$fOrdArithException_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Exception.$fEqArithException_closure+1;
         const GHC.Exception.$fOrdArithException_$ccompare_closure+2;
         const GHC.Exception.$fOrdArithException_$c<_closure+2;
         const GHC.Exception.$fOrdArithException_$c<=_closure+2;
         const GHC.Exception.$fOrdArithException_$c>_closure+2;
         const GHC.Exception.$fOrdArithException_$c>=_closure+2;
         const GHC.Exception.$fOrdArithException_$cmax_closure+2;
         const GHC.Exception.$fOrdArithException_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.477366158 UTC

[section ""cstring" . GHC.Exception.$trModule4_bytes" {
     GHC.Exception.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.477910208 UTC

[section ""data" . GHC.Exception.$trModule3_closure" {
     GHC.Exception.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.478449061 UTC

[section ""cstring" . GHC.Exception.$trModule2_bytes" {
     GHC.Exception.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.478996343 UTC

[section ""data" . GHC.Exception.$trModule1_closure" {
     GHC.Exception.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.479590689 UTC

[section ""data" . GHC.Exception.$trModule_closure" {
     GHC.Exception.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exception.$trModule3_closure+1;
         const GHC.Exception.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.480199456 UTC

[section ""data" . $krep_r7t8y_closure" {
     $krep_r7t8y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.48076486 UTC

[section ""data" . $krep1_r7t8z_closure" {
     $krep1_r7t8z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.481409335 UTC

[section ""data" . $krep2_r7t8A_closure" {
     $krep2_r7t8A_closure:
         const :_con_info;
         const $krep1_r7t8z_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.481967286 UTC

[section ""data" . $krep3_r7t8B_closure" {
     $krep3_r7t8B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r7t8A_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.48253418 UTC

[section ""data" . GHC.Exception.$tcException1_closure" {
     GHC.Exception.$tcException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_r7t8y_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.48312459 UTC

[section ""data" . $krep4_r7t8C_closure" {
     $krep4_r7t8C_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.483726653 UTC

[section ""data" . $krep5_r7t8D_closure" {
     $krep5_r7t8D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7t8C_closure+2;
         const $krep3_r7t8B_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.48435712 UTC

[section ""data" . $krep6_r7t8E_closure" {
     $krep6_r7t8E_closure:
         const :_con_info;
         const $krep4_r7t8C_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.484871989 UTC

[section ""data" . $krep7_r7t8F_closure" {
     $krep7_r7t8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.485480249 UTC

[section ""data" . $krep8_r7t8G_closure" {
     $krep8_r7t8G_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.486089537 UTC

[section ""data" . $krep9_r7t8H_closure" {
     $krep9_r7t8H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeable_closure;
         const $krep8_r7t8G_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.486719459 UTC

[section ""data" . $krep10_r7t8I_closure" {
     $krep10_r7t8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Show.$tcShow_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.487297727 UTC

[section ""cstring" . GHC.Exception.$fExceptionSomeException3_bytes" {
     GHC.Exception.$fExceptionSomeException3_bytes:
         I8[] [83,111,109,101,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.487883933 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException2_closure" {
     GHC.Exception.$fExceptionSomeException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionSomeException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.488482133 UTC

[section ""data" . GHC.Exception.$tcSomeException_closure" {
     GHC.Exception.$tcSomeException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionSomeException2_closure+1;
         const GHC.Types.krep$*_closure;
         const 13267649630904555636;
         const 2959581124447004473;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.489156278 UTC

[section ""data" . $krep11_r7t8J_closure" {
     $krep11_r7t8J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcSomeException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.491405872 UTC

[section ""data" . $krep12_r7t8K_closure" {
     $krep12_r7t8K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7t8C_closure+2;
         const $krep11_r7t8J_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.491961692 UTC

[section ""data" . $krep13_r7t8L_closure" {
     $krep13_r7t8L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r7t8J_closure+1;
         const $krep7_r7t8F_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.493079872 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException1_closure" {
     GHC.Exception.$fExceptionSomeException1_closure:
         const GHC.Exception.$fExceptionSomeException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionSomeException1_entry() //  [R1]
         { info_tbl: [(c7uCk,
                       label: GHC.Exception.$fExceptionSomeException1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCk: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7uCl; else goto c7uCm;
       c7uCl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uCm: // global
           (_c7uCc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uCc::I64 == 0) goto c7uCe; else goto c7uCd;
       c7uCe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uCd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uCc::I64;
           I64[Sp - 24] = block_c7uCf_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionSomeException2_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 2959581124447004473;
           R2 = 13267649630904555636;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7uCf() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7uCf,
                       label: block_c7uCf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCf: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7uCg() args: 0, res: 0, upd: 0;
     }
 },
 _c7uCg() //  []
         { info_tbl: [(c7uCg,
                       label: block_c7uCg_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uCp; else goto c7uCo;
       c7uCp: // global
           HpAlloc = 48;
           I64[Sp] = block_c7uCg_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7uCo: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.494587429 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_closure" {
     GHC.Exception.$fExceptionSomeException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionSomeException1_closure;
         const GHC.Exception.$fShowSomeException_closure+1;
         const GHC.Exception.$fExceptionSomeException_$ctoException_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Exception.$fExceptionSomeException_$cdisplayException_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.495172816 UTC

[section ""cstring" . GHC.Exception.$tcException3_bytes" {
     GHC.Exception.$tcException3_bytes:
         I8[] [69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.49569704 UTC

[section ""data" . GHC.Exception.$tcException2_closure" {
     GHC.Exception.$tcException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tcException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.496207082 UTC

[section ""data" . GHC.Exception.$tcException_closure" {
     GHC.Exception.$tcException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tcException2_closure+1;
         const GHC.Exception.$tcException1_closure+4;
         const 5005890060182917952;
         const 3990091377913498827;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.496783637 UTC

[section ""data" . $krep14_r7t8M_closure" {
     $krep14_r7t8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcException_closure+1;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.497354316 UTC

[section ""data" . $krep15_r7t8N_closure" {
     $krep15_r7t8N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7t8D_closure+4;
         const $krep14_r7t8M_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.49788099 UTC

[section ""data" . $krep16_r7t8O_closure" {
     $krep16_r7t8O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7t8L_closure+4;
         const $krep15_r7t8N_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.498403235 UTC

[section ""data" . $krep17_r7t8P_closure" {
     $krep17_r7t8P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7t8K_closure+4;
         const $krep16_r7t8O_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.498929084 UTC

[section ""data" . $krep18_r7t8Q_closure" {
     $krep18_r7t8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7t8I_closure+1;
         const $krep17_r7t8P_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.499483127 UTC

[section ""data" . GHC.Exception.$tc'C:Exception1_closure" {
     GHC.Exception.$tc'C:Exception1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7t8H_closure+1;
         const $krep18_r7t8Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.500029266 UTC

[section ""cstring" . GHC.Exception.$tc'C:Exception3_bytes" {
     GHC.Exception.$tc'C:Exception3_bytes:
         I8[] [39,67,58,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.50047875 UTC

[section ""data" . GHC.Exception.$tc'C:Exception2_closure" {
     GHC.Exception.$tc'C:Exception2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'C:Exception3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.500972764 UTC

[section ""data" . GHC.Exception.$tc'C:Exception_closure" {
     GHC.Exception.$tc'C:Exception_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'C:Exception2_closure+1;
         const GHC.Exception.$tc'C:Exception1_closure+4;
         const 10820889188949131006;
         const 4069342579395079435;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.501558992 UTC

[section ""data" . GHC.Exception.$tc'SomeException1_closure" {
     GHC.Exception.$tc'SomeException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r7t8M_closure+1;
         const $krep12_r7t8K_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.502069267 UTC

[section ""cstring" . GHC.Exception.$tc'SomeException3_bytes" {
     GHC.Exception.$tc'SomeException3_bytes:
         I8[] [39,83,111,109,101,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.5025878 UTC

[section ""data" . GHC.Exception.$tc'SomeException2_closure" {
     GHC.Exception.$tc'SomeException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'SomeException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.503073037 UTC

[section ""data" . GHC.Exception.$tc'SomeException_closure" {
     GHC.Exception.$tc'SomeException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'SomeException2_closure+1;
         const GHC.Exception.$tc'SomeException1_closure+4;
         const 16790271558916100413;
         const 1524061796422226345;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.503682104 UTC

[section ""cstring" . GHC.Exception.$fExceptionErrorCall4_bytes" {
     GHC.Exception.$fExceptionErrorCall4_bytes:
         I8[] [69,114,114,111,114,67,97,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.504183781 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall3_closure" {
     GHC.Exception.$fExceptionErrorCall3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionErrorCall4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.504759191 UTC

[section ""data" . GHC.Exception.$tcErrorCall_closure" {
     GHC.Exception.$tcErrorCall_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionErrorCall3_closure+1;
         const GHC.Types.krep$*_closure;
         const 4106747399780464988;
         const 1398564497631027702;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.505375585 UTC

[section ""data" . $krep19_r7t8R_closure" {
     $krep19_r7t8R_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcErrorCall_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.505915684 UTC

[section ""data" . $krep20_r7t8S_closure" {
     $krep20_r7t8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7t8B_closure+1;
         const $krep19_r7t8R_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.506477263 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation1_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7t8B_closure+1;
         const $krep20_r7t8S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.507040187 UTC

[section ""cstring" . GHC.Exception.$tc'ErrorCallWithLocation3_bytes" {
     GHC.Exception.$tc'ErrorCallWithLocation3_bytes:
         I8[] [39,69,114,114,111,114,67,97,108,108,87,105,116,104,76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.507578135 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation2_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'ErrorCallWithLocation3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.508129283 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'ErrorCallWithLocation2_closure+1;
         const GHC.Exception.$tc'ErrorCallWithLocation1_closure+4;
         const 14789594717732302892;
         const 17317233711857548947;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.509357047 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall2_closure" {
     GHC.Exception.$fExceptionErrorCall2_closure:
         const GHC.Exception.$fExceptionErrorCall2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall2_entry() //  [R1]
         { info_tbl: [(c7uCD,
                       label: GHC.Exception.$fExceptionErrorCall2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7uCE; else goto c7uCF;
       c7uCE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uCF: // global
           (_c7uCv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uCv::I64 == 0) goto c7uCx; else goto c7uCw;
       c7uCx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uCw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uCv::I64;
           I64[Sp - 24] = block_c7uCy_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionErrorCall3_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 1398564497631027702;
           R2 = 4106747399780464988;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7uCy() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7uCy,
                       label: block_c7uCy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCy: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7uCz() args: 0, res: 0, upd: 0;
     }
 },
 _c7uCz() //  []
         { info_tbl: [(c7uCz,
                       label: block_c7uCz_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uCI; else goto c7uCH;
       c7uCI: // global
           HpAlloc = 48;
           I64[Sp] = block_c7uCz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7uCH: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.510855251 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException16_bytes" {
     GHC.Exception.$fExceptionArithException16_bytes:
         I8[] [65,114,105,116,104,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.511444295 UTC

[section ""data" . GHC.Exception.$fExceptionArithException15_closure" {
     GHC.Exception.$fExceptionArithException15_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionArithException16_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.512012118 UTC

[section ""data" . GHC.Exception.$tcArithException_closure" {
     GHC.Exception.$tcArithException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionArithException15_closure+1;
         const GHC.Types.krep$*_closure;
         const 11275459110071720610;
         const 9614411694476093403;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.512635412 UTC

[section ""data" . GHC.Exception.$tc'Denormal1_closure" {
     GHC.Exception.$tc'Denormal1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcArithException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.513180357 UTC

[section ""cstring" . GHC.Exception.$tc'Overflow2_bytes" {
     GHC.Exception.$tc'Overflow2_bytes:
         I8[] [39,79,118,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.513817252 UTC

[section ""data" . GHC.Exception.$tc'Overflow1_closure" {
     GHC.Exception.$tc'Overflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Overflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.514373002 UTC

[section ""data" . GHC.Exception.$tc'Overflow_closure" {
     GHC.Exception.$tc'Overflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Overflow1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 868785644779029835;
         const 15802889491790460831;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.514943838 UTC

[section ""cstring" . GHC.Exception.$tc'Underflow2_bytes" {
     GHC.Exception.$tc'Underflow2_bytes:
         I8[] [39,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.515475052 UTC

[section ""data" . GHC.Exception.$tc'Underflow1_closure" {
     GHC.Exception.$tc'Underflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Underflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.516054614 UTC

[section ""data" . GHC.Exception.$tc'Underflow_closure" {
     GHC.Exception.$tc'Underflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Underflow1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 12747416996077452468;
         const 11539058234473019035;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.516664972 UTC

[section ""cstring" . GHC.Exception.$tc'LossOfPrecision2_bytes" {
     GHC.Exception.$tc'LossOfPrecision2_bytes:
         I8[] [39,76,111,115,115,79,102,80,114,101,99,105,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.517214356 UTC

[section ""data" . GHC.Exception.$tc'LossOfPrecision1_closure" {
     GHC.Exception.$tc'LossOfPrecision1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'LossOfPrecision2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.518774369 UTC

[section ""data" . GHC.Exception.$tc'LossOfPrecision_closure" {
     GHC.Exception.$tc'LossOfPrecision_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'LossOfPrecision1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 6720322370825216637;
         const 1452601476582167815;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.519417064 UTC

[section ""cstring" . GHC.Exception.$tc'DivideByZero2_bytes" {
     GHC.Exception.$tc'DivideByZero2_bytes:
         I8[] [39,68,105,118,105,100,101,66,121,90,101,114,111]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.519966958 UTC

[section ""data" . GHC.Exception.$tc'DivideByZero1_closure" {
     GHC.Exception.$tc'DivideByZero1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'DivideByZero2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.520500215 UTC

[section ""data" . GHC.Exception.$tc'DivideByZero_closure" {
     GHC.Exception.$tc'DivideByZero_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'DivideByZero1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 17029085746322105003;
         const 1338659094893400307;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.521089604 UTC

[section ""cstring" . GHC.Exception.$tc'Denormal3_bytes" {
     GHC.Exception.$tc'Denormal3_bytes:
         I8[] [39,68,101,110,111,114,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.52188625 UTC

[section ""data" . GHC.Exception.$tc'Denormal2_closure" {
     GHC.Exception.$tc'Denormal2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Denormal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.52241378 UTC

[section ""data" . GHC.Exception.$tc'Denormal_closure" {
     GHC.Exception.$tc'Denormal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Denormal2_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 3563997708427691429;
         const 10171683790716248215;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.522965637 UTC

[section ""cstring" . GHC.Exception.$tc'RatioZeroDenominator2_bytes" {
     GHC.Exception.$tc'RatioZeroDenominator2_bytes:
         I8[] [39,82,97,116,105,111,90,101,114,111,68,101,110,111,109,105,110,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.523521189 UTC

[section ""data" . GHC.Exception.$tc'RatioZeroDenominator1_closure" {
     GHC.Exception.$tc'RatioZeroDenominator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'RatioZeroDenominator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.524046487 UTC

[section ""data" . GHC.Exception.$tc'RatioZeroDenominator_closure" {
     GHC.Exception.$tc'RatioZeroDenominator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'RatioZeroDenominator1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 12115498985276514171;
         const 17178069790958498690;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.525227238 UTC

[section ""data" . GHC.Exception.$fExceptionArithException14_closure" {
     GHC.Exception.$fExceptionArithException14_closure:
         const GHC.Exception.$fExceptionArithException14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException14_entry() //  [R1]
         { info_tbl: [(c7uCW,
                       label: GHC.Exception.$fExceptionArithException14_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCW: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7uCX; else goto c7uCY;
       c7uCX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uCY: // global
           (_c7uCO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uCO::I64 == 0) goto c7uCQ; else goto c7uCP;
       c7uCQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uCP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uCO::I64;
           I64[Sp - 24] = block_c7uCR_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionArithException15_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 9614411694476093403;
           R2 = 11275459110071720610;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7uCR() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7uCR,
                       label: block_c7uCR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCR: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7uCS() args: 0, res: 0, upd: 0;
     }
 },
 _c7uCS() //  []
         { info_tbl: [(c7uCS,
                       label: block_c7uCS_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uCS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uD1; else goto c7uD0;
       c7uD1: // global
           HpAlloc = 48;
           I64[Sp] = block_c7uCS_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7uD0: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.527210978 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cfromException_closure" {
     GHC.Exception.$fExceptionErrorCall_$cfromException_closure:
         const GHC.Exception.$fExceptionErrorCall_$cfromException_info;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall_$cfromException_entry() //  [R2]
         { info_tbl: [(c7uDb,
                       label: GHC.Exception.$fExceptionErrorCall_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uDb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uDf; else goto c7uDg;
       c7uDf: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uDg: // global
           I64[Sp - 8] = block_c7uD8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uDB; else goto c7uD9;
       u7uDB: // global
           call _c7uD8(R1) args: 0, res: 0, upd: 0;
       c7uD9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uD8() //  [R1]
         { info_tbl: [(c7uD8,
                       label: block_c7uD8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uD8: // global
           I64[Sp - 8] = block_c7uDe_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uDe() //  [R1]
         { info_tbl: [(c7uDe,
                       label: block_c7uDe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uDe: // global
           I64[Sp] = block_c7uDl_info;
           R3 = GHC.Exception.$fExceptionErrorCall2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uDl() //  [R1]
         { info_tbl: [(c7uDl,
                       label: block_c7uDl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uDl: // global
           if (R1 & 7 == 1) goto c7uDs; else goto c7uDw;
       c7uDs: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7uDw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7uDz; else goto c7uDy;
       c7uDz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7uDy: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.528818516 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_closure" {
     GHC.Exception.$fExceptionErrorCall_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionErrorCall2_closure;
         const GHC.Exception.$fShowErrorCall_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$cfromException_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.Exception.$fExceptionErrorCall_$ctoException_closure" {
     GHC.Exception.$fExceptionErrorCall_$ctoException_closure:
         const GHC.Exception.$fExceptionErrorCall_$ctoException_info;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall_$ctoException_entry() //  [R2]
         { info_tbl: [(c7uDH,
                       label: GHC.Exception.$fExceptionErrorCall_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uDH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uDL; else goto c7uDK;
       c7uDL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uDK: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionErrorCall_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.529940831 UTC

[section ""data" . GHC.Exception.errorCallException_closure" {
     GHC.Exception.errorCallException_closure:
         const GHC.Exception.errorCallException_info;
         const 0;
 },
 GHC.Exception.errorCallException_entry() //  [R2]
         { info_tbl: [(c7uDR,
                       label: GHC.Exception.errorCallException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uDR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uDV; else goto c7uDU;
       c7uDV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.errorCallException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uDU: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 15;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.530793213 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException3_bytes" {
     GHC.Exception.errorCallWithCallStackException3_bytes:
         I8[] [58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.531367819 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException2_bytes" {
     GHC.Exception.errorCallWithCallStackException2_bytes:
         I8[] [32,105,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.534759278 UTC

[section ""data" . GHC.Exception.$wprettySrcLoc_closure" {
     GHC.Exception.$wprettySrcLoc_closure:
         const GHC.Exception.$wprettySrcLoc_info;
 },
 sat_s7teg_entry() //  [R1]
         { info_tbl: [(c7uEG,
                       label: sat_s7teg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uEG: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7teh_entry() //  [R1]
         { info_tbl: [(c7uEJ,
                       label: sat_s7teh_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uEJ: // global
           _s7teh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7uEK; else goto c7uEL;
       c7uEL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uEN; else goto c7uEM;
       c7uEN: // global
           HpAlloc = 24;
           goto c7uEK;
       c7uEK: // global
           R1 = _s7teh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uEM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7teh::P64;
           _s7tdZ::P64 = P64[_s7teh::P64 + 16];
           _s7te0::P64 = P64[_s7teh::P64 + 24];
           I64[Hp - 16] = sat_s7teg_info;
           P64[Hp] = _s7te0::P64;
           R3 = Hp - 16;
           R2 = _s7tdZ::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tei_entry() //  [R1]
         { info_tbl: [(c7uEO,
                       label: sat_s7tei_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uEO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7uES; else goto c7uER;
       c7uES: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uER: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s7teh_info;
           P64[Hp - 8] = _s7tdZ::P64;
           P64[Hp] = _s7te0::P64;
           R3 = Hp - 24;
           R2 = GHC.Exception.errorCallWithCallStackException2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tej_entry() //  [R1]
         { info_tbl: [(c7uET,
                       label: sat_s7tej_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uET: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7uEV; else goto c7uEW;
       c7uEV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uEW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c7uEn_info;
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s7tdZ::P64;
           P64[Sp - 24] = _s7te0::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7uF1; else goto c7uEo;
       u7uF1: // global
           call _c7uEn(R1) args: 0, res: 0, upd: 0;
       c7uEo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7uEn() //  [R1]
         { info_tbl: [(c7uEn,
                       label: block_c7uEn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uEn: // global
           I64[Sp] = block_c7uEs_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7uEs() //  [R1, R2]
         { info_tbl: [(c7uEs,
                       label: block_c7uEs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uEs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7uF0; else goto c7uEZ;
       c7uF0: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7uEZ: // global
           I64[Hp - 48] = sat_s7tei_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tek_entry() //  [R1]
         { info_tbl: [(c7uF2,
                       label: sat_s7tek_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uF2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7uF6; else goto c7uF5;
       c7uF6: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uF5: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te3::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s7tej_info;
           P64[Hp - 16] = _s7tdZ::P64;
           P64[Hp - 8] = _s7te0::P64;
           P64[Hp] = _s7te3::P64;
           R3 = Hp - 32;
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tel_entry() //  [R1]
         { info_tbl: [(c7uF7,
                       label: sat_s7tel_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uF7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7uF9; else goto c7uFa;
       c7uF9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uFa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c7uE8_info;
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te3::P64 = P64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s7tdZ::P64;
           P64[Sp - 32] = _s7te0::P64;
           P64[Sp - 24] = _s7te3::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u7uFf; else goto c7uE9;
       u7uFf: // global
           call _c7uE8(R1) args: 0, res: 0, upd: 0;
       c7uE9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7uE8() //  [R1]
         { info_tbl: [(c7uE8,
                       label: block_c7uE8_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uE8: // global
           I64[Sp] = block_c7uEd_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7uEd() //  [R1, R2]
         { info_tbl: [(c7uEd,
                       label: block_c7uEd_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uEd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7uFe; else goto c7uFd;
       c7uFe: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7uFd: // global
           I64[Hp - 56] = sat_s7tek_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 14;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tem_entry() //  [R1]
         { info_tbl: [(c7uFg,
                       label: sat_s7tem_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uFg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uFk; else goto c7uFj;
       c7uFk: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uFj: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te2::P64 = P64[R1 + 32];
           _s7te3::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_s7tel_info;
           P64[Hp - 24] = _s7tdZ::P64;
           P64[Hp - 16] = _s7te0::P64;
           P64[Hp - 8] = _s7te2::P64;
           P64[Hp] = _s7te3::P64;
           R3 = Hp - 40;
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exception.$wprettySrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7uFl,
                       label: GHC.Exception.$wprettySrcLoc_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uFl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uFp; else goto c7uFo;
       c7uFp: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$wprettySrcLoc_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uFo: // global
           I64[Hp - 40] = sat_s7tem_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R3 = Hp - 40;
           R2 = R4;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.538795138 UTC

[section ""data" . GHC.Exception.prettySrcLoc_closure" {
     GHC.Exception.prettySrcLoc_closure:
         const GHC.Exception.prettySrcLoc_info;
 },
 GHC.Exception.prettySrcLoc_entry() //  [R2]
         { info_tbl: [(c7uFx,
                       label: GHC.Exception.prettySrcLoc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uFx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uFy; else goto c7uFz;
       c7uFy: // global
           R2 = R2;
           R1 = GHC.Exception.prettySrcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uFz: // global
           I64[Sp - 8] = block_c7uFu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uFD; else goto c7uFv;
       u7uFD: // global
           call _c7uFu(R1) args: 0, res: 0, upd: 0;
       c7uFv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uFu() //  [R1]
         { info_tbl: [(c7uFu,
                       label: block_c7uFu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uFu: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$wprettySrcLoc_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.539818966 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException7_bytes" {
     GHC.Exception.errorCallWithCallStackException7_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,72,97,115,67,97,108,108,83,116,97,99,107,41,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.540581163 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException6_closure" {
     GHC.Exception.errorCallWithCallStackException6_closure:
         const GHC.Exception.errorCallWithCallStackException6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException6_entry() //  [R1]
         { info_tbl: [(c7uFK,
                       label: GHC.Exception.errorCallWithCallStackException6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uFK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uFL; else goto c7uFM;
       c7uFL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uFM: // global
           (_c7uFH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uFH::I64 == 0) goto c7uFJ; else goto c7uFI;
       c7uFJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uFI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uFH::I64;
           R2 = GHC.Exception.errorCallWithCallStackException7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.54149298 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException4_bytes" {
     GHC.Exception.errorCallWithCallStackException4_bytes:
         I8[] [44,32,99,97,108,108,101,100,32,97,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.542804118 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException1_closure" {
     GHC.Exception.errorCallWithCallStackException1_closure:
         const GHC.Exception.errorCallWithCallStackException1_info;
 },
 sat_s7teI_entry() //  [R1]
         { info_tbl: [(c7uGb,
                       label: sat_s7teI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uGb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uGc; else goto c7uGd;
       c7uGc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uGd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7uG8_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7uGh; else goto c7uG9;
       u7uGh: // global
           call _c7uG8(R1) args: 0, res: 0, upd: 0;
       c7uG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7uG8() //  [R1]
         { info_tbl: [(c7uG8,
                       label: block_c7uG8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uG8: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$wprettySrcLoc_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7teJ_entry() //  [R1]
         { info_tbl: [(c7uGi,
                       label: sat_s7teJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uGi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uGm; else goto c7uGl;
       c7uGm: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uGl: // global
           _s7tez::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s7teI_info;
           P64[Hp] = _s7tez::P64;
           R3 = Hp - 16;
           R2 = GHC.Exception.errorCallWithCallStackException4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7teK_entry() //  [R1]
         { info_tbl: [(c7uGn,
                       label: sat_s7teK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uGn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uGo; else goto c7uGp;
       c7uGo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uGp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7uFV_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7uGt; else goto c7uFW;
       u7uGt: // global
           call _c7uFV(R1) args: 0, res: 0, upd: 0;
       c7uFW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7uFV() //  [R1]
         { info_tbl: [(c7uFV,
                       label: block_c7uFV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uFV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uGs; else goto c7uGr;
       c7uGs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7uGr: // global
           _s7tey::P64 = P64[R1 + 7];
           _s7tez::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s7teJ_info;
           P64[Hp] = _s7tez::P64;
           R3 = Hp - 16;
           R2 = _s7tey::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.errorCallWithCallStackException1_entry() //  [R2]
         { info_tbl: [(c7uGu,
                       label: GHC.Exception.errorCallWithCallStackException1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uGu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uGy; else goto c7uGx;
       c7uGy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.errorCallWithCallStackException1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uGx: // global
           I64[Hp - 16] = sat_s7teK_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Exception.errorCallWithCallStackException5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.545373097 UTC

[section ""data" . GHC.Exception.prettyCallStackLines_closure" {
     GHC.Exception.prettyCallStackLines_closure:
         const GHC.Exception.prettyCallStackLines_info;
         const 0;
 },
 sat_s7teP_entry() //  [R1]
         { info_tbl: [(c7uGM,
                       label: sat_s7teP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uGM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uGN; else goto c7uGO;
       c7uGN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uGO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException1_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.prettyCallStackLines_entry() //  [R2]
         { info_tbl: [(c7uGT,
                       label: GHC.Exception.prettyCallStackLines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uGT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uGU; else goto c7uGV;
       c7uGU: // global
           R2 = R2;
           R1 = GHC.Exception.prettyCallStackLines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uGV: // global
           I64[Sp - 8] = block_c7uGD_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uGD() //  [R1]
         { info_tbl: [(c7uGD,
                       label: block_c7uGD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uGD: // global
           if (R1 & 7 == 1) goto c7uGQ; else goto c7uGR;
       c7uGQ: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7uGR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uH1; else goto c7uH0;
       c7uH1: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7uH0: // global
           I64[Hp - 40] = sat_s7teP_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.546732994 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException8_bytes" {
     GHC.Exception.errorCallWithCallStackException8_bytes:
         I8[] [10]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.547485642 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException_xs_closure" {
     GHC.Exception.errorCallWithCallStackException_xs_closure:
         const GHC.Exception.errorCallWithCallStackException_xs_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException_xs_entry() //  [R1]
         { info_tbl: [(c7uH8,
                       label: GHC.Exception.errorCallWithCallStackException_xs_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uH8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uH9; else goto c7uHa;
       c7uH9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uHa: // global
           (_c7uH5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uH5::I64 == 0) goto c7uH7; else goto c7uH6;
       c7uH7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uH6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uH5::I64;
           R2 = GHC.Exception.errorCallWithCallStackException8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.548821153 UTC

[section ""data" . GHC.Exception.prettyCallStack_closure" {
     GHC.Exception.prettyCallStack_closure:
         const GHC.Exception.prettyCallStack_info;
         const 0;
 },
 sat_s7teV_entry() //  [R1]
         { info_tbl: [(c7uHq,
                       label: sat_s7teV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uHq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uHr; else goto c7uHs;
       c7uHr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uHs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7uHo_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException1_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7uHo() //  [R1]
         { info_tbl: [(c7uHo,
                       label: block_c7uHo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uHo: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.prettyCallStack_entry() //  [R2]
         { info_tbl: [(c7uHA,
                       label: GHC.Exception.prettyCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uHA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uHB; else goto c7uHC;
       c7uHB: // global
           R2 = R2;
           R1 = GHC.Exception.prettyCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uHC: // global
           I64[Sp - 8] = block_c7uHf_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uHf() //  [R1]
         { info_tbl: [(c7uHf,
                       label: block_c7uHf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uHf: // global
           if (R1 & 7 == 1) goto c7uHx; else goto c7uHy;
       c7uHx: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7uHy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uHI; else goto c7uHH;
       c7uHI: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7uHH: // global
           I64[Hp - 40] = sat_s7teV_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.552555822 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException_closure" {
     GHC.Exception.errorCallWithCallStackException_closure:
         const GHC.Exception.errorCallWithCallStackException_info;
         const 0;
 },
 sat_s7tf7_entry() //  [R1]
         { info_tbl: [(c7uId,
                       label: sat_s7tf7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uId: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uIe; else goto c7uIf;
       c7uIe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uIf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7uIb_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7uIb() //  [R1]
         { info_tbl: [(c7uIb,
                       label: block_c7uIb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uIb: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 n_s7tf2_entry() //  [R1]
         { info_tbl: [(c7uIn,
                       label: n_s7tf2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uIn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uIo; else goto c7uIp;
       c7uIo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uIp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7uI1_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7uIw; else goto c7uI2;
       u7uIw: // global
           call _c7uI1(R1) args: 0, res: 0, upd: 0;
       c7uI2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7uI1() //  [R1]
         { info_tbl: [(c7uI1,
                       label: block_c7uI1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uI1: // global
           if (R1 & 7 == 1) goto c7uIk; else goto c7uIl;
       c7uIk: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7uIl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uIv; else goto c7uIu;
       c7uIv: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7uIu: // global
           I64[Hp - 40] = sat_s7tf7_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfc_entry() //  [R1]
         { info_tbl: [(c7uIL,
                       label: sat_s7tfc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uIL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uIM; else goto c7uIN;
       c7uIM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uIN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfl_entry() //  [R1]
         { info_tbl: [(c7uJa,
                       label: sat_s7tfl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uJa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uJb; else goto c7uJc;
       c7uJb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uJc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Exception.errorCallWithCallStackException1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 go_s7tfg_entry() //  [R1, R2]
         { info_tbl: [(c7uJh,
                       label: go_s7tfg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uJh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uJi; else goto c7uJj;
       c7uJi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uJj: // global
           I64[Sp - 24] = block_c7uIZ_info;
           _s7tfg::P64 = R1;
           _s7tf2::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s7tf2::P64;
           P64[Sp - 8] = _s7tfg::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7uJq; else goto c7uJ0;
       u7uJq: // global
           call _c7uIZ(R1) args: 0, res: 0, upd: 0;
       c7uJ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uIZ() //  [R1]
         { info_tbl: [(c7uIZ,
                       label: block_c7uIZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uIZ: // global
           if (R1 & 7 == 1) goto c7uJe; else goto c7uJf;
       c7uJe: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7uJf: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c7uJp; else goto c7uJo;
       c7uJp: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7uJo: // global
           _s7tfj::P64 = P64[R1 + 6];
           _s7tfk::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _s7tfk::P64;
           I64[Hp - 40] = sat_s7tfl_info;
           P64[Hp - 24] = _s7tfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tfo_entry() //  [R1]
         { info_tbl: [(c7uJt,
                       label: sat_s7tfo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uJt: // global
           _s7tfo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c7uJu; else goto c7uJv;
       c7uJv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7uJx; else goto c7uJw;
       c7uJx: // global
           HpAlloc = 16;
           goto c7uJu;
       c7uJu: // global
           R1 = _s7tfo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uJw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfo::P64;
           _s7tf2::P64 = P64[_s7tfo::P64 + 16];
           _s7tf8::P64 = P64[_s7tfo::P64 + 24];
           I64[Hp - 8] = go_s7tfg_info;
           P64[Hp] = _s7tf2::P64;
           I64[Sp - 24] = block_c7uJr_info;
           R2 = _s7tf8::P64;
           R1 = Hp - 7;
           Sp = Sp - 24;
           call go_s7tfg_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7uJr() //  [R1]
         { info_tbl: [(c7uJr,
                       label: block_c7uJr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uJr: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfq_entry() //  [R1]
         { info_tbl: [(c7uJF,
                       label: sat_s7tfq_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uJF: // global
           _s7tfq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c7uJG; else goto c7uJH;
       c7uJH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uJJ; else goto c7uJI;
       c7uJJ: // global
           HpAlloc = 24;
           goto c7uJG;
       c7uJG: // global
           R1 = _s7tfq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uJI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfq::P64;
           _s7teY::P64 = P64[_s7tfq::P64 + 16];
           _s7tf1::P64 = P64[_s7tfq::P64 + 24];
           I64[Hp - 16] = n_s7tf2_info;
           P64[Hp] = _s7tf1::P64;
           I64[Sp - 32] = block_c7uIx_info;
           R2 = _s7teY::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7uIx() //  [R1]
         { info_tbl: [(c7uIx,
                       label: block_c7uIx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uIx: // global
           _c7uHX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7uJC; else goto c7uJD;
       c7uJC: // global
           I64[Sp + 8] = block_c7uIB_info;
           R1 = _c7uHX::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uJZ; else goto c7uIC;
       u7uJZ: // global
           call _c7uIB(R1) args: 0, res: 0, upd: 0;
       c7uIC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c7uJD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7uJX; else goto c7uJW;
       c7uJX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7uJW: // global
           I64[Hp - 48] = sat_s7tfo_info;
           P64[Hp - 32] = _c7uHX::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 _c7uIB() //  [R1]
         { info_tbl: [(c7uIB,
                       label: block_c7uIB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uIB: // global
           if (R1 & 7 == 1) goto c7uJO; else goto c7uJQ;
       c7uJO: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7uJQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uJT; else goto c7uJS;
       c7uJT: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7uJS: // global
           _s7tfa::P64 = P64[R1 + 6];
           _s7tfb::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s7tfc_info;
           P64[Hp - 24] = _s7tfb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s7tfa::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfs_entry() //  [R1]
         { info_tbl: [(c7uK1,
                       label: sat_s7tfs_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uK1: // global
           _s7tfs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7uK2; else goto c7uK3;
       c7uK3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7uK5; else goto c7uK4;
       c7uK5: // global
           HpAlloc = 56;
           goto c7uK2;
       c7uK2: // global
           R1 = _s7tfs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uK4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfs::P64;
           _s7teX::P64 = P64[_s7tfs::P64 + 16];
           _s7teY::P64 = P64[_s7tfs::P64 + 24];
           _s7tf1::P64 = P64[_s7tfs::P64 + 32];
           I64[Hp - 48] = sat_s7tfq_info;
           P64[Hp - 32] = _s7teY::P64;
           P64[Hp - 24] = _s7tf1::P64;
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = _s7teX::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.errorCallWithCallStackException_entry() //  [R2, R3]
         { info_tbl: [(c7uK9,
                       label: GHC.Exception.errorCallWithCallStackException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uK9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uKa; else goto c7uKb;
       c7uKa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uKb: // global
           I64[Sp - 24] = block_c7uHN_info;
           R1 = GHC.Stack.CCS.currentCallStack_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uHN() //  [R1]
         { info_tbl: [(c7uHN,
                       label: block_c7uHN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uHN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7uKe; else goto c7uKd;
       c7uKe: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7uKd: // global
           I64[Hp - 32] = sat_s7tfs_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = (Hp + -32) & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.558321065 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cfromException_closure" {
     GHC.Exception.$fExceptionArithException_$cfromException_closure:
         const GHC.Exception.$fExceptionArithException_$cfromException_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cfromException_entry() //  [R2]
         { info_tbl: [(c7uKn,
                       label: GHC.Exception.$fExceptionArithException_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uKn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uKr; else goto c7uKs;
       c7uKr: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionArithException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uKs: // global
           I64[Sp - 8] = block_c7uKk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uKN; else goto c7uKl;
       u7uKN: // global
           call _c7uKk(R1) args: 0, res: 0, upd: 0;
       c7uKl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uKk() //  [R1]
         { info_tbl: [(c7uKk,
                       label: block_c7uKk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uKk: // global
           I64[Sp - 8] = block_c7uKq_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uKq() //  [R1]
         { info_tbl: [(c7uKq,
                       label: block_c7uKq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uKq: // global
           I64[Sp] = block_c7uKx_info;
           R3 = GHC.Exception.$fExceptionArithException14_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uKx() //  [R1]
         { info_tbl: [(c7uKx,
                       label: block_c7uKx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uKx: // global
           if (R1 & 7 == 1) goto c7uKE; else goto c7uKI;
       c7uKE: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7uKI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7uKL; else goto c7uKK;
       c7uKL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7uKK: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.559966948 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_closure" {
     GHC.Exception.$fExceptionArithException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionArithException14_closure;
         const GHC.Exception.$fShowArithException_closure+1;
         const GHC.Exception.$fExceptionArithException_$ctoException_closure+1;
         const GHC.Exception.$fExceptionArithException_$cfromException_closure+1;
         const GHC.Exception.$fExceptionArithException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.Exception.$fExceptionArithException_$ctoException_closure" {
     GHC.Exception.$fExceptionArithException_$ctoException_closure:
         const GHC.Exception.$fExceptionArithException_$ctoException_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$ctoException_entry() //  [R2]
         { info_tbl: [(c7uKT,
                       label: GHC.Exception.$fExceptionArithException_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uKT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uKX; else goto c7uKW;
       c7uKX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionArithException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uKW: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionArithException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.561075399 UTC

[section ""data" . GHC.Exception.underflowException_closure" {
     GHC.Exception.underflowException_closure:
         const GHC.Exception.underflowException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.underflowException_entry() //  [R1]
         { info_tbl: [(c7uL4,
                       label: GHC.Exception.underflowException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uL4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uL5; else goto c7uL6;
       c7uL5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uL6: // global
           (_c7uL1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uL1::I64 == 0) goto c7uL3; else goto c7uL2;
       c7uL3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uL2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uL1::I64;
           R2 = GHC.Exception.Underflow_closure+2;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.562231144 UTC

[section ""data" . GHC.Exception.ratioZeroDenomException_closure" {
     GHC.Exception.ratioZeroDenomException_closure:
         const GHC.Exception.ratioZeroDenomException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.ratioZeroDenomException_entry() //  [R1]
         { info_tbl: [(c7uLd,
                       label: GHC.Exception.ratioZeroDenomException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uLd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uLe; else goto c7uLf;
       c7uLe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uLf: // global
           (_c7uLa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uLa::I64 == 0) goto c7uLc; else goto c7uLb;
       c7uLc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uLb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uLa::I64;
           R2 = GHC.Exception.RatioZeroDenominator_closure+6;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.563352414 UTC

[section ""data" . GHC.Exception.overflowException_closure" {
     GHC.Exception.overflowException_closure:
         const GHC.Exception.overflowException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.overflowException_entry() //  [R1]
         { info_tbl: [(c7uLm,
                       label: GHC.Exception.overflowException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uLm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uLn; else goto c7uLo;
       c7uLn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uLo: // global
           (_c7uLj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uLj::I64 == 0) goto c7uLl; else goto c7uLk;
       c7uLl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uLk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uLj::I64;
           R2 = GHC.Exception.Overflow_closure+1;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.564487374 UTC

[section ""data" . GHC.Exception.divZeroException_closure" {
     GHC.Exception.divZeroException_closure:
         const GHC.Exception.divZeroException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.divZeroException_entry() //  [R1]
         { info_tbl: [(c7uLv,
                       label: GHC.Exception.divZeroException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uLv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uLw; else goto c7uLx;
       c7uLw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uLx: // global
           (_c7uLs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uLs::I64 == 0) goto c7uLu; else goto c7uLt;
       c7uLu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uLt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uLs::I64;
           R2 = GHC.Exception.DivideByZero_closure+4;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.565649615 UTC

[section ""data" . GHC.Exception.SomeException_closure" {
     GHC.Exception.SomeException_closure:
         const GHC.Exception.SomeException_info;
 },
 GHC.Exception.SomeException_entry() //  [R2, R3]
         { info_tbl: [(c7uLD,
                       label: GHC.Exception.SomeException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uLD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uLH; else goto c7uLG;
       c7uLH: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.SomeException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uLG: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.567866999 UTC

[section ""data" . GHC.Exception.Overflow_closure" {
     GHC.Exception.Overflow_closure:
         const GHC.Exception.Overflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.568437056 UTC

[section ""data" . GHC.Exception.Underflow_closure" {
     GHC.Exception.Underflow_closure:
         const GHC.Exception.Underflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.568943337 UTC

[section ""data" . GHC.Exception.LossOfPrecision_closure" {
     GHC.Exception.LossOfPrecision_closure:
         const GHC.Exception.LossOfPrecision_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.569546404 UTC

[section ""data" . GHC.Exception.DivideByZero_closure" {
     GHC.Exception.DivideByZero_closure:
         const GHC.Exception.DivideByZero_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.570108227 UTC

[section ""data" . GHC.Exception.Denormal_closure" {
     GHC.Exception.Denormal_closure:
         const GHC.Exception.Denormal_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.570691965 UTC

[section ""data" . GHC.Exception.RatioZeroDenominator_closure" {
     GHC.Exception.RatioZeroDenominator_closure:
         const GHC.Exception.RatioZeroDenominator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.571425995 UTC

[section ""data" . GHC.Exception.ErrorCallWithLocation_closure" {
     GHC.Exception.ErrorCallWithLocation_closure:
         const GHC.Exception.ErrorCallWithLocation_info;
 },
 GHC.Exception.ErrorCallWithLocation_entry() //  [R2, R3]
         { info_tbl: [(c7uLN,
                       label: GHC.Exception.ErrorCallWithLocation_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uLN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7uLR; else goto c7uLQ;
       c7uLR: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.ErrorCallWithLocation_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uLQ: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.572444805 UTC

[section ""data" . GHC.Exception.C:Exception_closure" {
     GHC.Exception.C:Exception_closure:
         const GHC.Exception.C:Exception_info;
 },
 GHC.Exception.C:Exception_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7uLX,
                       label: GHC.Exception.C:Exception_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uLX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7uM1; else goto c7uM0;
       c7uM1: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.C:Exception_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uM0: // global
           I64[Hp - 40] = GHC.Exception.C:Exception_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.573412956 UTC

[GHC.Exception.SomeException_con_entry() //  [R1]
         { info_tbl: [(c7uM2,
                       label: GHC.Exception.SomeException_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,83,111,109,101,69,120,99,101,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uM2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.574052452 UTC

[section ""relreadonly" . GHC.Exception.ArithException_closure_tbl" {
     GHC.Exception.ArithException_closure_tbl:
         const GHC.Exception.Overflow_closure+1;
         const GHC.Exception.Underflow_closure+2;
         const GHC.Exception.LossOfPrecision_closure+3;
         const GHC.Exception.DivideByZero_closure+4;
         const GHC.Exception.Denormal_closure+5;
         const GHC.Exception.RatioZeroDenominator_closure+6;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.574676831 UTC

[GHC.Exception.Overflow_con_entry() //  [R1]
         { info_tbl: [(c7uM4,
                       label: GHC.Exception.Overflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,79,118,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uM4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.575448441 UTC

[GHC.Exception.Underflow_con_entry() //  [R1]
         { info_tbl: [(c7uM6,
                       label: GHC.Exception.Underflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uM6: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.576158925 UTC

[GHC.Exception.LossOfPrecision_con_entry() //  [R1]
         { info_tbl: [(c7uM8,
                       label: GHC.Exception.LossOfPrecision_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,76,111,115,115,79,102,80,114,101,99,105,115,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uM8: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.576800771 UTC

[GHC.Exception.DivideByZero_con_entry() //  [R1]
         { info_tbl: [(c7uMa,
                       label: GHC.Exception.DivideByZero_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,68,105,118,105,100,101,66,121,90,101,114,111]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMa: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.57757507 UTC

[GHC.Exception.Denormal_con_entry() //  [R1]
         { info_tbl: [(c7uMc,
                       label: GHC.Exception.Denormal_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,68,101,110,111,114,109,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMc: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.578304929 UTC

[GHC.Exception.RatioZeroDenominator_con_entry() //  [R1]
         { info_tbl: [(c7uMe,
                       label: GHC.Exception.RatioZeroDenominator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,82,97,116,105,111,90,101,114,111,68,101,110,111,109,105,110,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMe: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.578991821 UTC

[GHC.Exception.ErrorCallWithLocation_con_entry() //  [R1]
         { info_tbl: [(c7uMg,
                       label: GHC.Exception.ErrorCallWithLocation_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,69,114,114,111,114,67,97,108,108,87,105,116,104,76,111,99,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.579706141 UTC

[GHC.Exception.C:Exception_con_entry() //  [R1]
         { info_tbl: [(c7uMi,
                       label: GHC.Exception.C:Exception_con_info
                       rep:HeapRep 5 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,67,58,69,120,99,101,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMi: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.580366827 UTC

[section ""relreadonly" . S7tkS_srt" {
     S7tkS_srt:
         const GHC.Exception.$w$cshowsPrec_closure;
         const GHC.Exception.$fExceptionArithException2_closure;
         const GHC.Exception.$fExceptionArithException4_closure;
         const GHC.Exception.$fExceptionArithException6_closure;
         const GHC.Exception.$fExceptionArithException8_closure;
         const GHC.Exception.$fExceptionArithException10_closure;
         const GHC.Exception.$fExceptionArithException12_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.Exception.$dmfromException_closure;
         const GHC.Exception.errorCallWithCallStackException10_closure;
         const GHC.Exception.errorCallWithCallStackException9_closure;
         const GHC.Exception.showCCSStack_closure;
         const GHC.Exception.errorCallWithCallStackException11_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.Exception.$fExceptionErrorCall_$cfromException_closure;
         const GHC.Exception.$fExceptionErrorCall2_closure;
         const GHC.Exception.$fExceptionErrorCall_closure;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
         const GHC.Exception.errorCallException_closure;
         const GHC.Exception.prettyCallStackLines_closure;
         const GHC.Exception.errorCallWithCallStackException6_closure;
         const GHC.Exception.errorCallWithCallStackException_xs_closure;
         const GHC.Exception.prettyCallStack_closure;
         const GHC.Exception.errorCallWithCallStackException_closure;
         const GHC.Stack.CCS.currentCallStack_closure;
         const GHC.Exception.$fExceptionArithException_$cfromException_closure;
         const GHC.Exception.$fExceptionArithException14_closure;
         const GHC.Exception.$fExceptionArithException_closure;
         const GHC.Exception.$fExceptionArithException_$ctoException_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.581364666 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:42.582810574 UTC

[section ""data" . GHC.Exception.$p1Exception_closure" {
     GHC.Exception.$p1Exception_closure:
         const GHC.Exception.$p1Exception_info;
 },
 GHC.Exception.$p1Exception_entry() //  [R2]
         { info_tbl: [(c7uMr,
                       label: GHC.Exception.$p1Exception_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uMs; else goto c7uMt;
       c7uMs: // global
           R2 = R2;
           R1 = GHC.Exception.$p1Exception_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uMt: // global
           I64[Sp - 8] = block_c7uMo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uMx; else goto c7uMp;
       u7uMx: // global
           call _c7uMo(R1) args: 0, res: 0, upd: 0;
       c7uMp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uMo() //  [R1]
         { info_tbl: [(c7uMo,
                       label: block_c7uMo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMo: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.588411688 UTC

[section ""data" . GHC.Exception.$p2Exception_closure" {
     GHC.Exception.$p2Exception_closure:
         const GHC.Exception.$p2Exception_info;
 },
 GHC.Exception.$p2Exception_entry() //  [R2]
         { info_tbl: [(c7uMQ,
                       label: GHC.Exception.$p2Exception_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uMR; else goto c7uMS;
       c7uMR: // global
           R2 = R2;
           R1 = GHC.Exception.$p2Exception_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uMS: // global
           I64[Sp - 8] = block_c7uMN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uMW; else goto c7uMO;
       u7uMW: // global
           call _c7uMN(R1) args: 0, res: 0, upd: 0;
       c7uMO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uMN() //  [R1]
         { info_tbl: [(c7uMN,
                       label: block_c7uMN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uMN: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.593968168 UTC

[section ""data" . GHC.Exception.toException_closure" {
     GHC.Exception.toException_closure:
         const GHC.Exception.toException_info;
 },
 GHC.Exception.toException_entry() //  [R2]
         { info_tbl: [(c7uNf,
                       label: GHC.Exception.toException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uNf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uNg; else goto c7uNh;
       c7uNg: // global
           R2 = R2;
           R1 = GHC.Exception.toException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uNh: // global
           I64[Sp - 8] = block_c7uNc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uNl; else goto c7uNd;
       u7uNl: // global
           call _c7uNc(R1) args: 0, res: 0, upd: 0;
       c7uNd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uNc() //  [R1]
         { info_tbl: [(c7uNc,
                       label: block_c7uNc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uNc: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.600347854 UTC

[section ""data" . GHC.Exception.fromException_closure" {
     GHC.Exception.fromException_closure:
         const GHC.Exception.fromException_info;
 },
 GHC.Exception.fromException_entry() //  [R2]
         { info_tbl: [(c7uNC,
                       label: GHC.Exception.fromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uNC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uND; else goto c7uNE;
       c7uND: // global
           R2 = R2;
           R1 = GHC.Exception.fromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uNE: // global
           I64[Sp - 8] = block_c7uNz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uNI; else goto c7uNA;
       u7uNI: // global
           call _c7uNz(R1) args: 0, res: 0, upd: 0;
       c7uNA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uNz() //  [R1]
         { info_tbl: [(c7uNz,
                       label: block_c7uNz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uNz: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.605685928 UTC

[section ""data" . GHC.Exception.displayException_closure" {
     GHC.Exception.displayException_closure:
         const GHC.Exception.displayException_info;
 },
 GHC.Exception.displayException_entry() //  [R2]
         { info_tbl: [(c7uNZ,
                       label: GHC.Exception.displayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uNZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uO0; else goto c7uO1;
       c7uO0: // global
           R2 = R2;
           R1 = GHC.Exception.displayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uO1: // global
           I64[Sp - 8] = block_c7uNW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uO5; else goto c7uNX;
       u7uO5: // global
           call _c7uNW(R1) args: 0, res: 0, upd: 0;
       c7uNX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uNW() //  [R1]
         { info_tbl: [(c7uNW,
                       label: block_c7uNW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uNW: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.611037079 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshowsPrec_closure" {
     GHC.Exception.$fShowSomeException_$cshowsPrec_closure:
         const GHC.Exception.$fShowSomeException_$cshowsPrec_info;
 },
 GHC.Exception.$fShowSomeException_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7uOm,
                       label: GHC.Exception.$fShowSomeException_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uOm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uOq; else goto c7uOr;
       c7uOq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uOr: // global
           I64[Sp - 16] = block_c7uOj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uOx; else goto c7uOk;
       u7uOx: // global
           call _c7uOj(R1) args: 0, res: 0, upd: 0;
       c7uOk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uOj() //  [R1]
         { info_tbl: [(c7uOj,
                       label: block_c7uOj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uOj: // global
           I64[Sp - 8] = block_c7uOp_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uOp() //  [R1]
         { info_tbl: [(c7uOp,
                       label: block_c7uOp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uOp: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _s7t9x::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s7t9x::P64;
           call GHC.Show.showsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.617843236 UTC

[section ""data" . GHC.Exception.$fExceptionArithException1_closure" {
     GHC.Exception.$fExceptionArithException1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.619918886 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshow_closure" {
     GHC.Exception.$fShowSomeException_$cshow_closure:
         const GHC.Exception.$fShowSomeException_$cshow_info;
 },
 GHC.Exception.$fShowSomeException_$cshow_entry() //  [R2]
         { info_tbl: [(c7uOU,
                       label: GHC.Exception.$fShowSomeException_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uOU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7uOY; else goto c7uOZ;
       c7uOY: // global
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uOZ: // global
           I64[Sp - 8] = block_c7uOR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uP5; else goto c7uOS;
       u7uP5: // global
           call _c7uOR(R1) args: 0, res: 0, upd: 0;
       c7uOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uOR() //  [R1]
         { info_tbl: [(c7uOR,
                       label: block_c7uOR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uOR: // global
           I64[Sp - 8] = block_c7uOX_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uOX() //  [R1]
         { info_tbl: [(c7uOX,
                       label: block_c7uOX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uOX: // global
           R2 = R1;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = GHC.Exception.$fExceptionArithException1_closure+1;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.627125083 UTC

[section ""data" . GHC.Exception.$fShowSomeException1_closure" {
     GHC.Exception.$fShowSomeException1_closure:
         const GHC.Exception.$fShowSomeException1_info;
 },
 GHC.Exception.$fShowSomeException1_entry() //  [R2]
         { info_tbl: [(c7uPr,
                       label: GHC.Exception.$fShowSomeException1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uPr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uPv; else goto c7uPw;
       c7uPv: // global
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uPw: // global
           I64[Sp - 8] = block_c7uPo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uPC; else goto c7uPp;
       u7uPC: // global
           call _c7uPo(R1) args: 0, res: 0, upd: 0;
       c7uPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uPo() //  [R1]
         { info_tbl: [(c7uPo,
                       label: block_c7uPo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uPo: // global
           I64[Sp - 8] = block_c7uPu_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7uPu() //  [R1]
         { info_tbl: [(c7uPu,
                       label: block_c7uPu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uPu: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Exception.$fExceptionArithException1_closure+1;
           Sp = Sp - 8;
           call GHC.Show.showsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.634780036 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshowList_closure" {
     GHC.Exception.$fShowSomeException_$cshowList_closure:
         const GHC.Exception.$fShowSomeException_$cshowList_info;
 },
 GHC.Exception.$fShowSomeException_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7uPU,
                       label: GHC.Exception.$fShowSomeException_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uPU: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$fShowSomeException1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.640847888 UTC

[section ""data" . GHC.Exception.$fShowSomeException_closure" {
     GHC.Exception.$fShowSomeException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fShowSomeException_$cshowsPrec_closure+2;
         const GHC.Exception.$fShowSomeException_$cshow_closure+1;
         const GHC.Exception.$fShowSomeException_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.645131006 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_$cdisplayException_closure" {
     GHC.Exception.$fExceptionSomeException_$cdisplayException_closure:
         const GHC.Exception.$fExceptionSomeException_$cdisplayException_info;
 },
 GHC.Exception.$fExceptionSomeException_$cdisplayException_entry() //  [R2]
         { info_tbl: [(c7uQ9,
                       label: GHC.Exception.$fExceptionSomeException_$cdisplayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uQ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uQa; else goto c7uQb;
       c7uQa: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionSomeException_$cdisplayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uQb: // global
           I64[Sp - 8] = block_c7uQ6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uQf; else goto c7uQ7;
       u7uQf: // global
           call _c7uQ6(R1) args: 0, res: 0, upd: 0;
       c7uQ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uQ6() //  [R1]
         { info_tbl: [(c7uQ6,
                       label: block_c7uQ6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uQ6: // global
           R2 = P64[R1 + 7];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.displayException_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.651879373 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_$ctoException_closure" {
     GHC.Exception.$fExceptionSomeException_$ctoException_closure:
         const GHC.Exception.$fExceptionSomeException_$ctoException_info;
 },
 GHC.Exception.$fExceptionSomeException_$ctoException_entry() //  [R2]
         { info_tbl: [(c7uQu,
                       label: GHC.Exception.$fExceptionSomeException_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uQu: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.656097793 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall1_closure" {
     GHC.Exception.$fExceptionErrorCall1_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.659180136 UTC

[section ""data" . GHC.Exception.$w$cshowsPrec1_closure" {
     GHC.Exception.$w$cshowsPrec1_closure:
         const GHC.Exception.$w$cshowsPrec1_info;
 },
 sat_s7t9W_entry() //  [R1]
         { info_tbl: [(c7uQS,
                       label: sat_s7t9W_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uQS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uQT; else goto c7uQU;
       c7uQT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uQU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7uQZ,
                       label: GHC.Exception.$w$cshowsPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uQZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7uR0; else goto c7uR1;
       c7uR0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uR1: // global
           I64[Sp - 24] = block_c7uQI_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7uR8; else goto c7uQJ;
       u7uR8: // global
           call _c7uQI(R1) args: 0, res: 0, upd: 0;
       c7uQJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uQI() //  [R1]
         { info_tbl: [(c7uQI,
                       label: block_c7uQI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uQI: // global
           _s7t9Q::P64 = P64[Sp + 8];
           _s7t9S::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7uQW; else goto c7uQX;
       c7uQW: // global
           R3 = _s7t9S::P64;
           R2 = _s7t9Q::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7uQX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7uR7; else goto c7uR6;
       c7uR7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7uR6: // global
           I64[Hp - 48] = sat_s7t9W_info;
           P64[Hp - 32] = _s7t9S::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionErrorCall1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s7t9Q::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.670094348 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure" {
     GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure:
         const GHC.Exception.$fExceptionErrorCall_$cshowsPrec_info;
 },
 GHC.Exception.$fExceptionErrorCall_$cshowsPrec_entry() //  [R2, R3,
                                                             R4]
         { info_tbl: [(c7uRw,
                       label: GHC.Exception.$fExceptionErrorCall_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uRw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uRx; else goto c7uRy;
       c7uRx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uRy: // global
           I64[Sp - 16] = block_c7uRt_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uRC; else goto c7uRu;
       u7uRC: // global
           call _c7uRt(R1) args: 0, res: 0, upd: 0;
       c7uRu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uRt() //  [R1]
         { info_tbl: [(c7uRt,
                       label: block_c7uRt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uRt: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.678081789 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cshow_closure" {
     GHC.Exception.$fExceptionErrorCall_$cshow_closure:
         const GHC.Exception.$fExceptionErrorCall_$cshow_info;
 },
 GHC.Exception.$fExceptionErrorCall_$cshow_entry() //  [R2]
         { info_tbl: [(c7uRT,
                       label: GHC.Exception.$fExceptionErrorCall_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uRT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7uRU; else goto c7uRV;
       c7uRU: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7uRV: // global
           I64[Sp - 8] = block_c7uRQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7uRZ; else goto c7uRR;
       u7uRZ: // global
           call _c7uRQ(R1) args: 0, res: 0, upd: 0;
       c7uRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uRQ() //  [R1]
         { info_tbl: [(c7uRQ,
                       label: block_c7uRQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uRQ: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.685385267 UTC

[section ""data" . GHC.Exception.$fShowErrorCall1_closure" {
     GHC.Exception.$fShowErrorCall1_closure:
         const GHC.Exception.$fShowErrorCall1_info;
 },
 GHC.Exception.$fShowErrorCall1_entry() //  [R2, R3]
         { info_tbl: [(c7uSg,
                       label: GHC.Exception.$fShowErrorCall1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uSg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uSh; else goto c7uSi;
       c7uSh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fShowErrorCall1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uSi: // global
           I64[Sp - 16] = block_c7uSd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uSm; else goto c7uSe;
       u7uSm: // global
           call _c7uSd(R1) args: 0, res: 0, upd: 0;
       c7uSe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uSd() //  [R1]
         { info_tbl: [(c7uSd,
                       label: block_c7uSd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uSd: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.691522841 UTC

[section ""data" . GHC.Exception.$fShowErrorCall_$cshowList_closure" {
     GHC.Exception.$fShowErrorCall_$cshowList_closure:
         const GHC.Exception.$fShowErrorCall_$cshowList_info;
 },
 GHC.Exception.$fShowErrorCall_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7uSA,
                       label: GHC.Exception.$fShowErrorCall_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uSA: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$fShowErrorCall1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.694770557 UTC

[section ""data" . GHC.Exception.$fShowErrorCall_closure" {
     GHC.Exception.$fShowErrorCall_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure+3;
         const GHC.Exception.$fExceptionErrorCall_$cshow_closure+1;
         const GHC.Exception.$fShowErrorCall_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.696521195 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException13_bytes" {
     GHC.Exception.$fExceptionArithException13_bytes:
         I8[] [97,114,105,116,104,109,101,116,105,99,32,111,118,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.698424348 UTC

[section ""data" . GHC.Exception.$fExceptionArithException12_closure" {
     GHC.Exception.$fExceptionArithException12_closure:
         const GHC.Exception.$fExceptionArithException12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException12_entry() //  [R1]
         { info_tbl: [(c7uSP,
                       label: GHC.Exception.$fExceptionArithException12_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uSP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uSQ; else goto c7uSR;
       c7uSQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uSR: // global
           (_c7uSM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uSM::I64 == 0) goto c7uSO; else goto c7uSN;
       c7uSO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uSN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uSM::I64;
           R2 = GHC.Exception.$fExceptionArithException13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.702599884 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException11_bytes" {
     GHC.Exception.$fExceptionArithException11_bytes:
         I8[] [97,114,105,116,104,109,101,116,105,99,32,117,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.704449236 UTC

[section ""data" . GHC.Exception.$fExceptionArithException10_closure" {
     GHC.Exception.$fExceptionArithException10_closure:
         const GHC.Exception.$fExceptionArithException10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException10_entry() //  [R1]
         { info_tbl: [(c7uT6,
                       label: GHC.Exception.$fExceptionArithException10_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uT6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uT7; else goto c7uT8;
       c7uT7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uT8: // global
           (_c7uT3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uT3::I64 == 0) goto c7uT5; else goto c7uT4;
       c7uT5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uT4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uT3::I64;
           R2 = GHC.Exception.$fExceptionArithException11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.708342584 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException9_bytes" {
     GHC.Exception.$fExceptionArithException9_bytes:
         I8[] [108,111,115,115,32,111,102,32,112,114,101,99,105,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.710209103 UTC

[section ""data" . GHC.Exception.$fExceptionArithException8_closure" {
     GHC.Exception.$fExceptionArithException8_closure:
         const GHC.Exception.$fExceptionArithException8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException8_entry() //  [R1]
         { info_tbl: [(c7uTn,
                       label: GHC.Exception.$fExceptionArithException8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uTn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uTo; else goto c7uTp;
       c7uTo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uTp: // global
           (_c7uTk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uTk::I64 == 0) goto c7uTm; else goto c7uTl;
       c7uTm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uTl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uTk::I64;
           R2 = GHC.Exception.$fExceptionArithException9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.714963908 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException7_bytes" {
     GHC.Exception.$fExceptionArithException7_bytes:
         I8[] [100,105,118,105,100,101,32,98,121,32,122,101,114,111]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.716818747 UTC

[section ""data" . GHC.Exception.$fExceptionArithException6_closure" {
     GHC.Exception.$fExceptionArithException6_closure:
         const GHC.Exception.$fExceptionArithException6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException6_entry() //  [R1]
         { info_tbl: [(c7uTE,
                       label: GHC.Exception.$fExceptionArithException6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uTE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uTF; else goto c7uTG;
       c7uTF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uTG: // global
           (_c7uTB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uTB::I64 == 0) goto c7uTD; else goto c7uTC;
       c7uTD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uTC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uTB::I64;
           R2 = GHC.Exception.$fExceptionArithException7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.720683414 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException5_bytes" {
     GHC.Exception.$fExceptionArithException5_bytes:
         I8[] [100,101,110,111,114,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.722584362 UTC

[section ""data" . GHC.Exception.$fExceptionArithException4_closure" {
     GHC.Exception.$fExceptionArithException4_closure:
         const GHC.Exception.$fExceptionArithException4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException4_entry() //  [R1]
         { info_tbl: [(c7uTV,
                       label: GHC.Exception.$fExceptionArithException4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uTV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uTW; else goto c7uTX;
       c7uTW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uTX: // global
           (_c7uTS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uTS::I64 == 0) goto c7uTU; else goto c7uTT;
       c7uTU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uTT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uTS::I64;
           R2 = GHC.Exception.$fExceptionArithException5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.726821059 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException3_bytes" {
     GHC.Exception.$fExceptionArithException3_bytes:
         I8[] [82,97,116,105,111,32,104,97,115,32,122,101,114,111,32,100,101,110,111,109,105,110,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.72867355 UTC

[section ""data" . GHC.Exception.$fExceptionArithException2_closure" {
     GHC.Exception.$fExceptionArithException2_closure:
         const GHC.Exception.$fExceptionArithException2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException2_entry() //  [R1]
         { info_tbl: [(c7uUc,
                       label: GHC.Exception.$fExceptionArithException2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uUc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uUd; else goto c7uUe;
       c7uUd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7uUe: // global
           (_c7uU9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7uU9::I64 == 0) goto c7uUb; else goto c7uUa;
       c7uUb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7uUa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7uU9::I64;
           R2 = GHC.Exception.$fExceptionArithException3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.732982611 UTC

[section ""data" . GHC.Exception.$w$cshowsPrec_closure" {
     GHC.Exception.$w$cshowsPrec_closure:
         const GHC.Exception.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Exception.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7uUB,
                       label: GHC.Exception.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uUB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uUC; else goto c7uUD;
       c7uUC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uUD: // global
           I64[Sp - 16] = block_c7uUq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uUW; else goto c7uUr;
       u7uUW: // global
           call _c7uUq(R1) args: 0, res: 0, upd: 0;
       c7uUr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uUq() //  [R1]
         { info_tbl: [(c7uUq,
                       label: block_c7uUq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uUq: // global
           _s7tag::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7uUu;
               case 2 : goto c7uUv;
               case 3 : goto c7uUw;
               case 4 : goto c7uUx;
               case 5 : goto c7uUy;
               case 6 : goto c7uUz;
           }
       c7uUz: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7uUy: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7uUx: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7uUw: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException8_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7uUv: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7uUu: // global
           R3 = _s7tag::P64;
           R2 = GHC.Exception.$fExceptionArithException12_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.73957118 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cshowsPrec_closure" {
     GHC.Exception.$fExceptionArithException_$cshowsPrec_closure:
         const GHC.Exception.$fExceptionArithException_$cshowsPrec_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cshowsPrec_entry() //  [R3,
                                                                  R4]
         { info_tbl: [(c7uVd,
                       label: GHC.Exception.$fExceptionArithException_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uVd: // global
           _s7taj::P64 = R3;
           R3 = R4;
           R2 = _s7taj::P64;
           call GHC.Exception.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.743040743 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cshow_closure" {
     GHC.Exception.$fExceptionArithException_$cshow_closure:
         const GHC.Exception.$fExceptionArithException_$cshow_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cshow_entry() //  [R2]
         { info_tbl: [(c7uVo,
                       label: GHC.Exception.$fExceptionArithException_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uVo: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Exception.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.747339368 UTC

[section ""data" . GHC.Exception.$fShowArithException_$cshowList_closure" {
     GHC.Exception.$fShowArithException_$cshowList_closure:
         const GHC.Exception.$fShowArithException_$cshowList_info;
         const 0;
 },
 GHC.Exception.$fShowArithException_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7uVz,
                       label: GHC.Exception.$fShowArithException_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uVz: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.750617554 UTC

[section ""data" . GHC.Exception.$fShowArithException_closure" {
     GHC.Exception.$fShowArithException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fExceptionArithException_$cshowsPrec_closure+3;
         const GHC.Exception.$fExceptionArithException_$cshow_closure+1;
         const GHC.Exception.$fShowArithException_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.753446143 UTC

[section ""data" . GHC.Exception.$fEqArithException_$c==_closure" {
     GHC.Exception.$fEqArithException_$c==_closure:
         const GHC.Exception.$fEqArithException_$c==_info;
 },
 GHC.Exception.$fEqArithException_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7uVW,
                       label: GHC.Exception.$fEqArithException_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uVW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uVX; else goto c7uVY;
       c7uVX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqArithException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uVY: // global
           I64[Sp - 16] = block_c7uVL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7uXP; else goto c7uVM;
       u7uXP: // global
           call _c7uVL(R1) args: 0, res: 0, upd: 0;
       c7uVM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uVL() //  [R1]
         { info_tbl: [(c7uVL,
                       label: block_c7uVL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uVL: // global
           _s7tap::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7uVP;
               case 2 : goto c7uVQ;
               case 3 : goto c7uVR;
               case 4 : goto c7uVS;
               case 5 : goto c7uVT;
               case 6 : goto c7uVU;
           }
       c7uVU: // global
           I64[Sp + 8] = block_c7uXe_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uXO; else goto c7uXg;
       u7uXO: // global
           call _c7uXe(R1) args: 0, res: 0, upd: 0;
       c7uXg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uVT: // global
           I64[Sp + 8] = block_c7uWZ_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uXN; else goto c7uX1;
       u7uXN: // global
           call _c7uWZ(R1) args: 0, res: 0, upd: 0;
       c7uX1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uVS: // global
           I64[Sp + 8] = block_c7uWK_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uXM; else goto c7uWM;
       u7uXM: // global
           call _c7uWK(R1) args: 0, res: 0, upd: 0;
       c7uWM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uVR: // global
           I64[Sp + 8] = block_c7uWv_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uXL; else goto c7uWx;
       u7uXL: // global
           call _c7uWv(R1) args: 0, res: 0, upd: 0;
       c7uWx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uVQ: // global
           I64[Sp + 8] = block_c7uWg_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uXK; else goto c7uWi;
       u7uXK: // global
           call _c7uWg(R1) args: 0, res: 0, upd: 0;
       c7uWi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uVP: // global
           I64[Sp + 8] = block_c7uW1_info;
           R1 = _s7tap::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7uXJ; else goto c7uW3;
       u7uXJ: // global
           call _c7uW1(R1) args: 0, res: 0, upd: 0;
       c7uW3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uXe() //  [R1]
         { info_tbl: [(c7uXe,
                       label: block_c7uXe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uXe: // global
           if (R1 & 7 == 6) goto u7uXx; else goto u7uXy;
       u7uXx: // global
           Sp = Sp + 8;
           call _c7uXq() args: 0, res: 0, upd: 0;
       u7uXy: // global
           Sp = Sp + 8;
           call _c7uXm() args: 0, res: 0, upd: 0;
     }
 },
 _c7uWZ() //  [R1]
         { info_tbl: [(c7uWZ,
                       label: block_c7uWZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uWZ: // global
           if (R1 & 7 == 5) goto u7uXz; else goto u7uXA;
       u7uXz: // global
           Sp = Sp + 8;
           call _c7uXq() args: 0, res: 0, upd: 0;
       u7uXA: // global
           Sp = Sp + 8;
           call _c7uXm() args: 0, res: 0, upd: 0;
     }
 },
 _c7uWK() //  [R1]
         { info_tbl: [(c7uWK,
                       label: block_c7uWK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uWK: // global
           if (R1 & 7 == 4) goto u7uXB; else goto u7uXC;
       u7uXB: // global
           Sp = Sp + 8;
           call _c7uXq() args: 0, res: 0, upd: 0;
       u7uXC: // global
           Sp = Sp + 8;
           call _c7uXm() args: 0, res: 0, upd: 0;
     }
 },
 _c7uWv() //  [R1]
         { info_tbl: [(c7uWv,
                       label: block_c7uWv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uWv: // global
           if (R1 & 7 == 3) goto u7uXD; else goto u7uXE;
       u7uXD: // global
           Sp = Sp + 8;
           call _c7uXq() args: 0, res: 0, upd: 0;
       u7uXE: // global
           Sp = Sp + 8;
           call _c7uXm() args: 0, res: 0, upd: 0;
     }
 },
 _c7uWg() //  [R1]
         { info_tbl: [(c7uWg,
                       label: block_c7uWg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uWg: // global
           if (R1 & 7 == 2) goto u7uXF; else goto u7uXG;
       u7uXF: // global
           Sp = Sp + 8;
           call _c7uXq() args: 0, res: 0, upd: 0;
       u7uXG: // global
           Sp = Sp + 8;
           call _c7uXm() args: 0, res: 0, upd: 0;
     }
 },
 _c7uW1() //  [R1]
         { info_tbl: [(c7uW1,
                       label: block_c7uW1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uW1: // global
           if (R1 & 7 == 1) goto u7uXH; else goto u7uXI;
       u7uXH: // global
           Sp = Sp + 8;
           call _c7uXq() args: 0, res: 0, upd: 0;
       u7uXI: // global
           Sp = Sp + 8;
           call _c7uXm() args: 0, res: 0, upd: 0;
     }
 },
 _c7uXq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uXq: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7uXm() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uXm: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.772950327 UTC

[section ""data" . GHC.Exception.$fEqArithException_$c/=_closure" {
     GHC.Exception.$fEqArithException_$c/=_closure:
         const GHC.Exception.$fEqArithException_$c/=_info;
 },
 GHC.Exception.$fEqArithException_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7uZ9,
                       label: GHC.Exception.$fEqArithException_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uZ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7uZa; else goto c7uZb;
       c7uZa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqArithException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7uZb: // global
           I64[Sp - 16] = block_c7uYY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7v12; else goto c7uYZ;
       u7v12: // global
           call _c7uYY(R1) args: 0, res: 0, upd: 0;
       c7uYZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7uYY() //  [R1]
         { info_tbl: [(c7uYY,
                       label: block_c7uYY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uYY: // global
           _s7tay::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7uZ2;
               case 2 : goto c7uZ3;
               case 3 : goto c7uZ4;
               case 4 : goto c7uZ5;
               case 5 : goto c7uZ6;
               case 6 : goto c7uZ7;
           }
       c7uZ7: // global
           I64[Sp + 8] = block_c7v0r_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7v11; else goto c7v0t;
       u7v11: // global
           call _c7v0r(R1) args: 0, res: 0, upd: 0;
       c7v0t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uZ6: // global
           I64[Sp + 8] = block_c7v0c_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7v10; else goto c7v0e;
       u7v10: // global
           call _c7v0c(R1) args: 0, res: 0, upd: 0;
       c7v0e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uZ5: // global
           I64[Sp + 8] = block_c7uZX_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7v0Z; else goto c7uZZ;
       u7v0Z: // global
           call _c7uZX(R1) args: 0, res: 0, upd: 0;
       c7uZZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uZ4: // global
           I64[Sp + 8] = block_c7uZI_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7v0Y; else goto c7uZK;
       u7v0Y: // global
           call _c7uZI(R1) args: 0, res: 0, upd: 0;
       c7uZK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uZ3: // global
           I64[Sp + 8] = block_c7uZt_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7v0X; else goto c7uZv;
       u7v0X: // global
           call _c7uZt(R1) args: 0, res: 0, upd: 0;
       c7uZv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7uZ2: // global
           I64[Sp + 8] = block_c7uZe_info;
           R1 = _s7tay::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7v0W; else goto c7uZg;
       u7v0W: // global
           call _c7uZe(R1) args: 0, res: 0, upd: 0;
       c7uZg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v0r() //  [R1]
         { info_tbl: [(c7v0r,
                       label: block_c7v0r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v0r: // global
           if (R1 & 7 == 6) goto u7v0K; else goto u7v0L;
       u7v0K: // global
           Sp = Sp + 8;
           call _c7v0D() args: 0, res: 0, upd: 0;
       u7v0L: // global
           Sp = Sp + 8;
           call _c7v0z() args: 0, res: 0, upd: 0;
     }
 },
 _c7v0c() //  [R1]
         { info_tbl: [(c7v0c,
                       label: block_c7v0c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v0c: // global
           if (R1 & 7 == 5) goto u7v0M; else goto u7v0N;
       u7v0M: // global
           Sp = Sp + 8;
           call _c7v0D() args: 0, res: 0, upd: 0;
       u7v0N: // global
           Sp = Sp + 8;
           call _c7v0z() args: 0, res: 0, upd: 0;
     }
 },
 _c7uZX() //  [R1]
         { info_tbl: [(c7uZX,
                       label: block_c7uZX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uZX: // global
           if (R1 & 7 == 4) goto u7v0O; else goto u7v0P;
       u7v0O: // global
           Sp = Sp + 8;
           call _c7v0D() args: 0, res: 0, upd: 0;
       u7v0P: // global
           Sp = Sp + 8;
           call _c7v0z() args: 0, res: 0, upd: 0;
     }
 },
 _c7uZI() //  [R1]
         { info_tbl: [(c7uZI,
                       label: block_c7uZI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uZI: // global
           if (R1 & 7 == 3) goto u7v0Q; else goto u7v0R;
       u7v0Q: // global
           Sp = Sp + 8;
           call _c7v0D() args: 0, res: 0, upd: 0;
       u7v0R: // global
           Sp = Sp + 8;
           call _c7v0z() args: 0, res: 0, upd: 0;
     }
 },
 _c7uZt() //  [R1]
         { info_tbl: [(c7uZt,
                       label: block_c7uZt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uZt: // global
           if (R1 & 7 == 2) goto u7v0S; else goto u7v0T;
       u7v0S: // global
           Sp = Sp + 8;
           call _c7v0D() args: 0, res: 0, upd: 0;
       u7v0T: // global
           Sp = Sp + 8;
           call _c7v0z() args: 0, res: 0, upd: 0;
     }
 },
 _c7uZe() //  [R1]
         { info_tbl: [(c7uZe,
                       label: block_c7uZe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7uZe: // global
           if (R1 & 7 == 1) goto u7v0U; else goto u7v0V;
       u7v0U: // global
           Sp = Sp + 8;
           call _c7v0D() args: 0, res: 0, upd: 0;
       u7v0V: // global
           Sp = Sp + 8;
           call _c7v0z() args: 0, res: 0, upd: 0;
     }
 },
 _c7v0D() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v0D: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7v0z() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v0z: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.794184027 UTC

[section ""data" . GHC.Exception.$fEqArithException_closure" {
     GHC.Exception.$fEqArithException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exception.$fEqArithException_$c==_closure+2;
         const GHC.Exception.$fEqArithException_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.796407886 UTC

[section ""data" . GHC.Exception.$w$c<_closure" {
     GHC.Exception.$w$c<_closure:
         const GHC.Exception.$w$c<_info;
 },
 GHC.Exception.$w$c<_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7v2j,
                       label: GHC.Exception.$w$c<_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v2j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v2k; else goto c7v2l;
       c7v2k: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v2l: // global
           I64[Sp - 24] = block_c7v2c_info;
           _s7taH::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7taH::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7v2c() //  [R1]
         { info_tbl: [(c7v2c,
                       label: block_c7v2c_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v2c: // global
           _c7v2i::P64 = R1 & 7;
           if (_c7v2i::P64 < 3) goto u7v2v; else goto c7v2h;
       u7v2v: // global
           if (_c7v2i::P64 < 2) goto c7v2f; else goto c7v2g;
       c7v2f: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7v2g: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$s$c<1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c7v2h: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.802591342 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c<_closure" {
     GHC.Exception.$fOrdErrorCall_$c<_closure:
         const GHC.Exception.$fOrdErrorCall_$c<_info;
 },
 GHC.Exception.$fOrdErrorCall_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7v2O,
                       label: GHC.Exception.$fOrdErrorCall_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v2O: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v2S; else goto c7v2T;
       c7v2S: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v2T: // global
           I64[Sp - 16] = block_c7v2L_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7v31; else goto c7v2M;
       u7v31: // global
           call _c7v2L(R1) args: 0, res: 0, upd: 0;
       c7v2M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v2L() //  [R1]
         { info_tbl: [(c7v2L,
                       label: block_c7v2L_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v2L: // global
           I64[Sp - 8] = block_c7v2R_info;
           _s7taO::P64 = P64[R1 + 7];
           _s7taP::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7taP::P64;
           P64[Sp + 8] = _s7taO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7v30; else goto c7v2V;
       u7v30: // global
           call _c7v2R(R1) args: 0, res: 0, upd: 0;
       c7v2V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v2R() //  [R1]
         { info_tbl: [(c7v2R,
                       label: block_c7v2R_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v2R: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c<_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.810275581 UTC

[section ""data" . GHC.Exception.$w$ccompare_closure" {
     GHC.Exception.$w$ccompare_closure:
         const GHC.Exception.$w$ccompare_info;
 },
 GHC.Exception.$w$ccompare_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7v3q,
                       label: GHC.Exception.$w$ccompare_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v3q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v3r; else goto c7v3s;
       c7v3r: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v3s: // global
           I64[Sp - 24] = block_c7v3j_info;
           _s7taU::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7taU::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7v3j() //  [R1]
         { info_tbl: [(c7v3j,
                       label: block_c7v3j_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v3j: // global
           _c7v3p::P64 = R1 & 7;
           if (_c7v3p::P64 < 3) goto u7v3C; else goto c7v3o;
       u7v3C: // global
           if (_c7v3p::P64 < 2) goto c7v3m; else goto c7v3n;
       c7v3m: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7v3n: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c7v3o: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.816709285 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$ccompare_closure" {
     GHC.Exception.$fOrdErrorCall_$ccompare_closure:
         const GHC.Exception.$fOrdErrorCall_$ccompare_info;
 },
 GHC.Exception.$fOrdErrorCall_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7v3V,
                       label: GHC.Exception.$fOrdErrorCall_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v3V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v3Z; else goto c7v40;
       c7v3Z: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v40: // global
           I64[Sp - 16] = block_c7v3S_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7v48; else goto c7v3T;
       u7v48: // global
           call _c7v3S(R1) args: 0, res: 0, upd: 0;
       c7v3T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v3S() //  [R1]
         { info_tbl: [(c7v3S,
                       label: block_c7v3S_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v3S: // global
           I64[Sp - 8] = block_c7v3Y_info;
           _s7tb1::P64 = P64[R1 + 7];
           _s7tb2::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tb2::P64;
           P64[Sp + 8] = _s7tb1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7v47; else goto c7v42;
       u7v47: // global
           call _c7v3Y(R1) args: 0, res: 0, upd: 0;
       c7v42: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v3Y() //  [R1]
         { info_tbl: [(c7v3Y,
                       label: block_c7v3Y_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v3Y: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$ccompare_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.824934318 UTC

[section ""data" . GHC.Exception.$w$c==_closure" {
     GHC.Exception.$w$c==_closure:
         const GHC.Exception.$w$c==_info;
 },
 GHC.Exception.$w$c==_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7v4w,
                       label: GHC.Exception.$w$c==_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v4w: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v4x; else goto c7v4y;
       c7v4x: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v4y: // global
           I64[Sp - 24] = block_c7v4q_info;
           _s7tb7::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7tb7::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7v4q() //  [R1]
         { info_tbl: [(c7v4q,
                       label: block_c7v4q_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v4q: // global
           if (R1 & 7 == 1) goto c7v4t; else goto c7v4u;
       c7v4t: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7v4u: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.831511058 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_$c==_closure" {
     GHC.Exception.$fEqErrorCall_$c==_closure:
         const GHC.Exception.$fEqErrorCall_$c==_info;
 },
 GHC.Exception.$fEqErrorCall_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7v4X,
                       label: GHC.Exception.$fEqErrorCall_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v4X: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v51; else goto c7v52;
       c7v51: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqErrorCall_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v52: // global
           I64[Sp - 16] = block_c7v4U_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7v5a; else goto c7v4V;
       u7v5a: // global
           call _c7v4U(R1) args: 0, res: 0, upd: 0;
       c7v4V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v4U() //  [R1]
         { info_tbl: [(c7v4U,
                       label: block_c7v4U_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v4U: // global
           I64[Sp - 8] = block_c7v50_info;
           _s7tbe::P64 = P64[R1 + 7];
           _s7tbf::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbf::P64;
           P64[Sp + 8] = _s7tbe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7v59; else goto c7v54;
       u7v59: // global
           call _c7v50(R1) args: 0, res: 0, upd: 0;
       c7v54: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v50() //  [R1]
         { info_tbl: [(c7v50,
                       label: block_c7v50_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v50: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c==_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.839089859 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_$c/=_closure" {
     GHC.Exception.$fEqErrorCall_$c/=_closure:
         const GHC.Exception.$fEqErrorCall_$c/=_info;
 },
 GHC.Exception.$fEqErrorCall_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7v5v,
                       label: GHC.Exception.$fEqErrorCall_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v5v: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v5z; else goto c7v5A;
       c7v5z: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqErrorCall_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v5A: // global
           I64[Sp - 16] = block_c7v5s_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7v68; else goto c7v5t;
       u7v68: // global
           call _c7v5s(R1) args: 0, res: 0, upd: 0;
       c7v5t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v5s() //  [R1]
         { info_tbl: [(c7v5s,
                       label: block_c7v5s_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v5s: // global
           I64[Sp - 8] = block_c7v5y_info;
           _s7tbm::P64 = P64[R1 + 7];
           _s7tbn::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbn::P64;
           P64[Sp + 8] = _s7tbm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7v67; else goto c7v5C;
       u7v67: // global
           call _c7v5y(R1) args: 0, res: 0, upd: 0;
       c7v5C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v5y() //  [R1]
         { info_tbl: [(c7v5y,
                       label: block_c7v5y_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v5y: // global
           I64[Sp] = block_c7v5G_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7v5G() //  [R1]
         { info_tbl: [(c7v5G,
                       label: block_c7v5G_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v5G: // global
           if (R1 & 7 == 1) goto u7v65; else goto c7v5S;
       u7v65: // global
           Sp = Sp + 24;
           call _c7v5Y() args: 0, res: 0, upd: 0;
       c7v5S: // global
           _s7tbq::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7v5Q_info;
           R3 = _s7tbq::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7v5Q() //  [R1]
         { info_tbl: [(c7v5Q,
                       label: block_c7v5Q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v5Q: // global
           if (R1 & 7 == 1) goto u7v66; else goto c7v62;
       u7v66: // global
           Sp = Sp + 8;
           call _c7v5Y() args: 0, res: 0, upd: 0;
       c7v62: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7v5Y() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v5Y: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.850217677 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_closure" {
     GHC.Exception.$fEqErrorCall_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exception.$fEqErrorCall_$c==_closure+2;
         const GHC.Exception.$fEqErrorCall_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.852562624 UTC

[section ""data" . GHC.Exception.$w$c<=_closure" {
     GHC.Exception.$w$c<=_closure:
         const GHC.Exception.$w$c<=_info;
 },
 GHC.Exception.$w$c<=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7v6P,
                       label: GHC.Exception.$w$c<=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v6P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v6Q; else goto c7v6R;
       c7v6Q: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v6R: // global
           I64[Sp - 24] = block_c7v6I_info;
           _s7tbu::P64 = R3;
           R3 = R2;
           R2 = R4;
           P64[Sp - 16] = _s7tbu::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7v6I() //  [R1]
         { info_tbl: [(c7v6I,
                       label: block_c7v6I_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v6I: // global
           _c7v6O::P64 = R1 & 7;
           if (_c7v6O::P64 < 3) goto u7v7d; else goto u7v7e;
       u7v7d: // global
           if (_c7v6O::P64 < 2) goto u7v7f; else goto c7v6M;
       u7v7f: // global
           Sp = Sp + 24;
           call _c7v78() args: 0, res: 0, upd: 0;
       c7v6M: // global
           _s7tbw::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7v6X_info;
           R3 = P64[Sp + 8];
           R2 = _s7tbw::P64;
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7v7e: // global
           Sp = Sp + 24;
           call _c7v6N() args: 0, res: 0, upd: 0;
     }
 },
 _c7v6X() //  [R1]
         { info_tbl: [(c7v6X,
                       label: block_c7v6X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v6X: // global
           if (R1 & 7 == 1) goto u7v7g; else goto u7v7h;
       u7v7g: // global
           Sp = Sp + 8;
           call _c7v78() args: 0, res: 0, upd: 0;
       u7v7h: // global
           Sp = Sp + 8;
           call _c7v6N() args: 0, res: 0, upd: 0;
     }
 },
 _c7v78() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v78: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7v6N() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v6N: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.86264116 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c<=_closure" {
     GHC.Exception.$fOrdErrorCall_$c<=_closure:
         const GHC.Exception.$fOrdErrorCall_$c<=_info;
 },
 GHC.Exception.$fOrdErrorCall_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7v7N,
                       label: GHC.Exception.$fOrdErrorCall_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v7N: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v7R; else goto c7v7S;
       c7v7R: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v7S: // global
           I64[Sp - 16] = block_c7v7K_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7v80; else goto c7v7L;
       u7v80: // global
           call _c7v7K(R1) args: 0, res: 0, upd: 0;
       c7v7L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v7K() //  [R1]
         { info_tbl: [(c7v7K,
                       label: block_c7v7K_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v7K: // global
           I64[Sp - 8] = block_c7v7Q_info;
           _s7tbC::P64 = P64[R1 + 7];
           _s7tbD::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tbD::P64;
           P64[Sp + 8] = _s7tbC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7v7Z; else goto c7v7U;
       u7v7Z: // global
           call _c7v7Q(R1) args: 0, res: 0, upd: 0;
       c7v7U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v7Q() //  [R1]
         { info_tbl: [(c7v7Q,
                       label: block_c7v7Q_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v7Q: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c<=_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.870519509 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$cmax_closure" {
     GHC.Exception.$fOrdErrorCall_$cmax_closure:
         const GHC.Exception.$fOrdErrorCall_$cmax_info;
 },
 GHC.Exception.$fOrdErrorCall_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7v8l,
                       label: GHC.Exception.$fOrdErrorCall_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v8l: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7v8p; else goto c7v8q;
       c7v8p: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v8q: // global
           I64[Sp - 16] = block_c7v8i_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7v95; else goto c7v8j;
       u7v95: // global
           call _c7v8i(R1) args: 0, res: 0, upd: 0;
       c7v8j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v8i() //  [R1]
         { info_tbl: [(c7v8i,
                       label: block_c7v8i_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v8i: // global
           I64[Sp - 16] = block_c7v8o_info;
           _s7tbJ::P64 = R1;
           _s7tbK::P64 = P64[R1 + 7];
           _s7tbL::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s7tbL::P64;
           P64[Sp] = _s7tbK::P64;
           P64[Sp + 8] = _s7tbJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7v94; else goto c7v8s;
       u7v94: // global
           call _c7v8o(R1) args: 0, res: 0, upd: 0;
       c7v8s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7v8o() //  [R1]
         { info_tbl: [(c7v8o,
                       label: block_c7v8o_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v8o: // global
           I64[Sp - 8] = block_c7v8w_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7v8w() //  [R1]
         { info_tbl: [(c7v8w,
                       label: block_c7v8w_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v8w: // global
           _c7v8X::P64 = R1 & 7;
           if (_c7v8X::P64 < 3) goto u7v8Z; else goto u7v90;
       u7v8Z: // global
           if (_c7v8X::P64 < 2) goto u7v91; else goto c7v8I;
       u7v91: // global
           Sp = Sp + 32;
           call _c7v8S() args: 0, res: 0, upd: 0;
       c7v8I: // global
           _s7tbL::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7v8G_info;
           R3 = _s7tbL::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7v90: // global
           Sp = Sp + 24;
           call _c7v8W() args: 0, res: 0, upd: 0;
     }
 },
 _c7v8G() //  [R1]
         { info_tbl: [(c7v8G,
                       label: block_c7v8G_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v8G: // global
           if (R1 & 7 == 1) goto u7v92; else goto u7v93;
       u7v92: // global
           Sp = Sp + 16;
           call _c7v8S() args: 0, res: 0, upd: 0;
       u7v93: // global
           Sp = Sp + 8;
           call _c7v8W() args: 0, res: 0, upd: 0;
     }
 },
 _c7v8S() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v8S: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7v8W() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v8W: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.884691005 UTC

[section ""data" . GHC.Exception.$w$c>=_closure" {
     GHC.Exception.$w$c>=_closure:
         const GHC.Exception.$w$c>=_info;
 },
 GHC.Exception.$w$c>=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7v9Q,
                       label: GHC.Exception.$w$c>=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v9Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7v9R; else goto c7v9S;
       c7v9R: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7v9S: // global
           I64[Sp - 24] = block_c7v9J_info;
           _s7tbS::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7tbS::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7v9J() //  [R1]
         { info_tbl: [(c7v9J,
                       label: block_c7v9J_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v9J: // global
           _c7v9P::P64 = R1 & 7;
           if (_c7v9P::P64 < 3) goto u7vae; else goto u7vaf;
       u7vae: // global
           if (_c7v9P::P64 < 2) goto u7vag; else goto c7v9N;
       u7vag: // global
           Sp = Sp + 24;
           call _c7va9() args: 0, res: 0, upd: 0;
       c7v9N: // global
           _s7tbU::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7v9Y_info;
           R3 = _s7tbU::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7vaf: // global
           Sp = Sp + 24;
           call _c7v9O() args: 0, res: 0, upd: 0;
     }
 },
 _c7v9Y() //  [R1]
         { info_tbl: [(c7v9Y,
                       label: block_c7v9Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v9Y: // global
           if (R1 & 7 == 1) goto u7vah; else goto u7vai;
       u7vah: // global
           Sp = Sp + 8;
           call _c7va9() args: 0, res: 0, upd: 0;
       u7vai: // global
           Sp = Sp + 8;
           call _c7v9O() args: 0, res: 0, upd: 0;
     }
 },
 _c7va9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7va9: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7v9O() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7v9O: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.896629182 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c>=_closure" {
     GHC.Exception.$fOrdErrorCall_$c>=_closure:
         const GHC.Exception.$fOrdErrorCall_$c>=_info;
 },
 GHC.Exception.$fOrdErrorCall_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7vaO,
                       label: GHC.Exception.$fOrdErrorCall_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vaO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vaS; else goto c7vaT;
       c7vaS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vaT: // global
           I64[Sp - 16] = block_c7vaL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vb1; else goto c7vaM;
       u7vb1: // global
           call _c7vaL(R1) args: 0, res: 0, upd: 0;
       c7vaM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vaL() //  [R1]
         { info_tbl: [(c7vaL,
                       label: block_c7vaL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vaL: // global
           I64[Sp - 8] = block_c7vaR_info;
           _s7tc0::P64 = P64[R1 + 7];
           _s7tc1::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7tc1::P64;
           P64[Sp + 8] = _s7tc0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7vb0; else goto c7vaV;
       u7vb0: // global
           call _c7vaR(R1) args: 0, res: 0, upd: 0;
       c7vaV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vaR() //  [R1]
         { info_tbl: [(c7vaR,
                       label: block_c7vaR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vaR: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c>=_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.906979227 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c>_closure" {
     GHC.Exception.$fOrdErrorCall_$c>_closure:
         const GHC.Exception.$fOrdErrorCall_$c>_info;
 },
 GHC.Exception.$fOrdErrorCall_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7vbj,
                       label: GHC.Exception.$fOrdErrorCall_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vbj: // global
           _s7tc6::P64 = R3;
           R3 = R2;
           R2 = _s7tc6::P64;
           call GHC.Exception.$fOrdErrorCall_$c<_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.911151267 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$cmin_closure" {
     GHC.Exception.$fOrdErrorCall_$cmin_closure:
         const GHC.Exception.$fOrdErrorCall_$cmin_info;
 },
 GHC.Exception.$fOrdErrorCall_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7vbx,
                       label: GHC.Exception.$fOrdErrorCall_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vbx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7vbB; else goto c7vbC;
       c7vbB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vbC: // global
           I64[Sp - 16] = block_c7vbu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vch; else goto c7vbv;
       u7vch: // global
           call _c7vbu(R1) args: 0, res: 0, upd: 0;
       c7vbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vbu() //  [R1]
         { info_tbl: [(c7vbu,
                       label: block_c7vbu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vbu: // global
           I64[Sp - 16] = block_c7vbA_info;
           _s7tc9::P64 = R1;
           _s7tca::P64 = P64[R1 + 7];
           _s7tcb::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s7tcb::P64;
           P64[Sp] = _s7tca::P64;
           P64[Sp + 8] = _s7tc9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vcg; else goto c7vbE;
       u7vcg: // global
           call _c7vbA(R1) args: 0, res: 0, upd: 0;
       c7vbE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vbA() //  [R1]
         { info_tbl: [(c7vbA,
                       label: block_c7vbA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vbA: // global
           I64[Sp - 8] = block_c7vbI_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vbI() //  [R1]
         { info_tbl: [(c7vbI,
                       label: block_c7vbI_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vbI: // global
           _c7vc9::P64 = R1 & 7;
           if (_c7vc9::P64 < 3) goto u7vcb; else goto u7vcc;
       u7vcb: // global
           if (_c7vc9::P64 < 2) goto u7vcd; else goto c7vbU;
       u7vcd: // global
           Sp = Sp + 24;
           call _c7vc4() args: 0, res: 0, upd: 0;
       c7vbU: // global
           _s7tcb::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7vbS_info;
           R3 = _s7tcb::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7vcc: // global
           Sp = Sp + 32;
           call _c7vc8() args: 0, res: 0, upd: 0;
     }
 },
 _c7vbS() //  [R1]
         { info_tbl: [(c7vbS,
                       label: block_c7vbS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vbS: // global
           if (R1 & 7 == 1) goto u7vce; else goto u7vcf;
       u7vce: // global
           Sp = Sp + 8;
           call _c7vc4() args: 0, res: 0, upd: 0;
       u7vcf: // global
           Sp = Sp + 16;
           call _c7vc8() args: 0, res: 0, upd: 0;
     }
 },
 _c7vc4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vc4: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vc8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vc8: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.924781404 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_closure" {
     GHC.Exception.$fOrdErrorCall_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Exception.$fEqErrorCall_closure+1;
         const GHC.Exception.$fOrdErrorCall_$ccompare_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c<_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c<=_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c>_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c>=_closure+2;
         const GHC.Exception.$fOrdErrorCall_$cmax_closure+2;
         const GHC.Exception.$fOrdErrorCall_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.92816538 UTC

[section ""data" . GHC.Exception.$dmdisplayException_closure" {
     GHC.Exception.$dmdisplayException_closure:
         const GHC.Exception.$dmdisplayException_info;
 },
 GHC.Exception.$dmdisplayException_entry() //  [R2]
         { info_tbl: [(c7vcY,
                       label: GHC.Exception.$dmdisplayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vcY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7vcZ; else goto c7vd0;
       c7vcZ: // global
           R2 = R2;
           R1 = GHC.Exception.$dmdisplayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vd0: // global
           I64[Sp - 8] = block_c7vcW_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vcW() //  [R1]
         { info_tbl: [(c7vcW,
                       label: block_c7vcW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vcW: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Show.show_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.937195073 UTC

[section ""data" . GHC.Exception.$dmfromException_closure" {
     GHC.Exception.$dmfromException_closure:
         const GHC.Exception.$dmfromException_info;
         const 0;
 },
 GHC.Exception.$dmfromException_entry() //  [R2, R3]
         { info_tbl: [(c7vdj,
                       label: GHC.Exception.$dmfromException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vdj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vdr; else goto c7vds;
       c7vdr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$dmfromException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vds: // global
           I64[Sp - 16] = block_c7vdg_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vdO; else goto c7vdh;
       u7vdO: // global
           call _c7vdg(R1) args: 0, res: 0, upd: 0;
       c7vdh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vdg() //  [R1]
         { info_tbl: [(c7vdg,
                       label: block_c7vdg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vdg: // global
           I64[Sp - 8] = block_c7vdm_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vdm() //  [R1]
         { info_tbl: [(c7vdm,
                       label: block_c7vdm_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vdm: // global
           I64[Sp] = block_c7vdq_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vdq() //  [R1]
         { info_tbl: [(c7vdq,
                       label: block_c7vdq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vdq: // global
           I64[Sp] = block_c7vdy_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vdy() //  [R1]
         { info_tbl: [(c7vdy,
                       label: block_c7vdy_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vdy: // global
           if (R1 & 7 == 1) goto c7vdF; else goto c7vdJ;
       c7vdF: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7vdJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7vdM; else goto c7vdL;
       c7vdM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7vdL: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.955958964 UTC

[section ""data" . GHC.Exception.$dmtoException_closure" {
     GHC.Exception.$dmtoException_closure:
         const GHC.Exception.$dmtoException_info;
 },
 GHC.Exception.$dmtoException_entry() //  [R2, R3]
         { info_tbl: [(c7vej,
                       label: GHC.Exception.$dmtoException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vej: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7ven; else goto c7vem;
       c7ven: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$dmtoException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vem: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.960966726 UTC

[section ""data" . GHC.Exception.$bErrorCall_closure" {
     GHC.Exception.$bErrorCall_closure:
         const GHC.Exception.$bErrorCall_info;
 },
 GHC.Exception.$bErrorCall_entry() //  [R2]
         { info_tbl: [(c7vey,
                       label: GHC.Exception.$bErrorCall_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vey: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7veC; else goto c7veB;
       c7veC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$bErrorCall_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7veB: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.96577852 UTC

[section ""data" . GHC.Exception.throw_closure" {
     GHC.Exception.throw_closure:
         const GHC.Exception.throw_info;
 },
 sat_s7tcu_entry() //  [R1]
         { info_tbl: [(c7veQ,
                       label: sat_s7tcu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7veQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7veR; else goto c7veS;
       c7veR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7veS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exception.throw_entry() //  [R2, R3]
         { info_tbl: [(c7veT,
                       label: GHC.Exception.throw_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7veT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7veX; else goto c7veW;
       c7veX: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.throw_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7veW: // global
           I64[Hp - 24] = sat_s7tcu_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.97265983 UTC

[section ""data" . GHC.Exception.$mErrorCall_closure" {
     GHC.Exception.$mErrorCall_closure:
         const GHC.Exception.$mErrorCall_info;
 },
 GHC.Exception.$mErrorCall_entry() //  [R2, R3, R4]
         { info_tbl: [(c7vfe,
                       label: GHC.Exception.$mErrorCall_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vfe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vff; else goto c7vfg;
       c7vff: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$mErrorCall_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vfg: // global
           I64[Sp - 16] = block_c7vfb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vfk; else goto c7vfc;
       u7vfk: // global
           call _c7vfb(R1) args: 0, res: 0, upd: 0;
       c7vfc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vfb() //  [R1]
         { info_tbl: [(c7vfb,
                       label: block_c7vfb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vfb: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.97917652 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException12_bytes" {
     GHC.Exception.errorCallWithCallStackException12_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,45,112,114,111,102,41,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.981436313 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException11_closure" {
     GHC.Exception.errorCallWithCallStackException11_closure:
         const GHC.Exception.errorCallWithCallStackException11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException11_entry() //  [R1]
         { info_tbl: [(c7vfB,
                       label: GHC.Exception.errorCallWithCallStackException11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vfB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vfC; else goto c7vfD;
       c7vfC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vfD: // global
           (_c7vfy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vfy::I64 == 0) goto c7vfA; else goto c7vfz;
       c7vfA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vfz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vfy::I64;
           R2 = GHC.Exception.errorCallWithCallStackException12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.985805158 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException5_bytes" {
     GHC.Exception.errorCallWithCallStackException5_bytes:
         I8[] [32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.987920168 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException10_closure" {
     GHC.Exception.errorCallWithCallStackException10_closure:
         const GHC.Exception.errorCallWithCallStackException10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException10_entry() //  [R1]
         { info_tbl: [(c7vfS,
                       label: GHC.Exception.errorCallWithCallStackException10_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vfS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vfT; else goto c7vfU;
       c7vfT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vfU: // global
           (_c7vfP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vfP::I64 == 0) goto c7vfR; else goto c7vfQ;
       c7vfR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vfQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vfP::I64;
           R2 = GHC.Exception.errorCallWithCallStackException5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.99309619 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException9_closure" {
     GHC.Exception.errorCallWithCallStackException9_closure:
         const GHC.Exception.errorCallWithCallStackException9_info;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException9_entry() //  [R2]
         { info_tbl: [(c7vg6,
                       label: GHC.Exception.errorCallWithCallStackException9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vg6: // global
           R3 = R2;
           R2 = GHC.Exception.errorCallWithCallStackException10_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:42.997585387 UTC

[section ""data" . GHC.Exception.showCCSStack_closure" {
     GHC.Exception.showCCSStack_closure:
         const GHC.Exception.showCCSStack_info;
         const 0;
 },
 sat_s7tcG_entry() //  [R1]
         { info_tbl: [(c7vgt,
                       label: sat_s7tcG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vgt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vgu; else goto c7vgv;
       c7vgu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vgv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7vgr_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7vgr() //  [R1]
         { info_tbl: [(c7vgr,
                       label: block_c7vgr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vgr: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.showCCSStack_entry() //  [R2]
         { info_tbl: [(c7vgD,
                       label: GHC.Exception.showCCSStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vgD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7vgE; else goto c7vgF;
       c7vgE: // global
           R2 = R2;
           R1 = GHC.Exception.showCCSStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vgF: // global
           I64[Sp - 8] = block_c7vgh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7vgM; else goto c7vgi;
       u7vgM: // global
           call _c7vgh(R1) args: 0, res: 0, upd: 0;
       c7vgi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vgh() //  [R1]
         { info_tbl: [(c7vgh,
                       label: block_c7vgh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vgh: // global
           if (R1 & 7 == 1) goto c7vgA; else goto c7vgB;
       c7vgA: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7vgB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vgL; else goto c7vgK;
       c7vgL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7vgK: // global
           I64[Hp - 40] = sat_s7tcG_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.008274639 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$ccompare_closure" {
     GHC.Exception.$fOrdArithException_$ccompare_closure:
         const GHC.Exception.$fOrdArithException_$ccompare_info;
 },
 GHC.Exception.$fOrdArithException_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7vhn,
                       label: GHC.Exception.$fOrdArithException_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vhn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vho; else goto c7vhp;
       c7vho: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vhp: // global
           I64[Sp - 16] = block_c7vhc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vks; else goto c7vhd;
       u7vks: // global
           call _c7vhc(R1) args: 0, res: 0, upd: 0;
       c7vhd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vhc() //  [R1]
         { info_tbl: [(c7vhc,
                       label: block_c7vhc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vhc: // global
           _s7tcI::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7vhg;
               case 2 : goto c7vhh;
               case 3 : goto c7vhi;
               case 4 : goto c7vhj;
               case 5 : goto c7vhk;
               case 6 : goto c7vhl;
           }
       c7vhl: // global
           I64[Sp + 8] = block_c7vjz_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vkr; else goto c7vjB;
       u7vkr: // global
           call _c7vjz(R1) args: 0, res: 0, upd: 0;
       c7vjB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vhk: // global
           I64[Sp + 8] = block_c7vjg_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vkq; else goto c7vji;
       u7vkq: // global
           call _c7vjg(R1) args: 0, res: 0, upd: 0;
       c7vji: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vhj: // global
           I64[Sp + 8] = block_c7viT_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vkp; else goto c7viV;
       u7vkp: // global
           call _c7viT(R1) args: 0, res: 0, upd: 0;
       c7viV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vhi: // global
           I64[Sp + 8] = block_c7vis_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vko; else goto c7viu;
       u7vko: // global
           call _c7vis(R1) args: 0, res: 0, upd: 0;
       c7viu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vhh: // global
           I64[Sp + 8] = block_c7vhX_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vkn; else goto c7vhZ;
       u7vkn: // global
           call _c7vhX(R1) args: 0, res: 0, upd: 0;
       c7vhZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vhg: // global
           I64[Sp + 8] = block_c7vhs_info;
           R1 = _s7tcI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vkm; else goto c7vhu;
       u7vkm: // global
           call _c7vhs(R1) args: 0, res: 0, upd: 0;
       c7vhu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vjz() //  [R1]
         { info_tbl: [(c7vjz,
                       label: block_c7vjz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vjz: // global
           if (R1 & 7 == 6) goto u7vjX; else goto u7vjY;
       u7vjX: // global
           Sp = Sp + 8;
           call _c7vjL() args: 0, res: 0, upd: 0;
       u7vjY: // global
           Sp = Sp + 8;
           call _c7vjH() args: 0, res: 0, upd: 0;
     }
 },
 _c7vjg() //  [R1]
         { info_tbl: [(c7vjg,
                       label: block_c7vjg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vjg: // global
           _c7vjN::P64 = R1 & 7;
           if (_c7vjN::P64 != 5) goto u7vjW; else goto u7vjZ;
       u7vjW: // global
           if (_c7vjN::P64 != 6) goto u7vk1; else goto u7vk0;
       u7vk1: // global
           Sp = Sp + 8;
           call _c7vjH() args: 0, res: 0, upd: 0;
       u7vk0: // global
           Sp = Sp + 8;
           call _c7vjw() args: 0, res: 0, upd: 0;
       u7vjZ: // global
           Sp = Sp + 8;
           call _c7vjL() args: 0, res: 0, upd: 0;
     }
 },
 _c7viT() //  [R1]
         { info_tbl: [(c7viT,
                       label: block_c7viT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7viT: // global
           _c7vjO::P64 = R1 & 7;
           if (_c7vjO::P64 < 5) goto u7vjU; else goto u7vjV;
       u7vjU: // global
           if (_c7vjO::P64 < 4) goto u7vk3; else goto u7vk2;
       u7vk3: // global
           Sp = Sp + 8;
           call _c7vjH() args: 0, res: 0, upd: 0;
       u7vk2: // global
           Sp = Sp + 8;
           call _c7vjL() args: 0, res: 0, upd: 0;
       u7vjV: // global
           if (_c7vjO::P64 < 6) goto u7vk5; else goto u7vk5;
       u7vk5: // global
           Sp = Sp + 8;
           call _c7vjw() args: 0, res: 0, upd: 0;
     }
 },
 _c7vis() //  [R1]
         { info_tbl: [(c7vis,
                       label: block_c7vis_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vis: // global
           _c7vjP::P64 = R1 & 7;
           if (_c7vjP::P64 < 4) goto u7vjS; else goto u7vjT;
       u7vjS: // global
           if (_c7vjP::P64 < 3) goto u7vk7; else goto u7vk6;
       u7vk7: // global
           Sp = Sp + 8;
           call _c7vjH() args: 0, res: 0, upd: 0;
       u7vk6: // global
           Sp = Sp + 8;
           call _c7vjL() args: 0, res: 0, upd: 0;
       u7vjT: // global
           if (_c7vjP::P64 != 5) goto u7vk9; else goto u7vk9;
       u7vk9: // global
           Sp = Sp + 8;
           call _c7vjw() args: 0, res: 0, upd: 0;
     }
 },
 _c7vhX() //  [R1]
         { info_tbl: [(c7vhX,
                       label: block_c7vhX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vhX: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7vka;
               case 2 : goto u7vkb;
               case 3, 4, 5, 6 : goto u7vkf;
           }
       u7vkf: // global
           Sp = Sp + 8;
           call _c7vjw() args: 0, res: 0, upd: 0;
       u7vkb: // global
           Sp = Sp + 8;
           call _c7vjL() args: 0, res: 0, upd: 0;
       u7vka: // global
           Sp = Sp + 8;
           call _c7vjH() args: 0, res: 0, upd: 0;
     }
 },
 _c7vjH() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vjH: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vhs() //  [R1]
         { info_tbl: [(c7vhs,
                       label: block_c7vhs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vhs: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7vkg;
               case 2, 3, 4, 5, 6 : goto u7vkl;
           }
       u7vkl: // global
           Sp = Sp + 8;
           call _c7vjw() args: 0, res: 0, upd: 0;
       u7vkg: // global
           Sp = Sp + 8;
           call _c7vjL() args: 0, res: 0, upd: 0;
     }
 },
 _c7vjw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vjw: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vjL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vjL: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.03067774 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c<_closure" {
     GHC.Exception.$fOrdArithException_$c<_closure:
         const GHC.Exception.$fOrdArithException_$c<_info;
 },
 GHC.Exception.$fOrdArithException_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7vlS,
                       label: GHC.Exception.$fOrdArithException_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vlS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vlT; else goto c7vlU;
       c7vlT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vlU: // global
           I64[Sp - 16] = block_c7vlH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vos; else goto c7vlI;
       u7vos: // global
           call _c7vlH(R1) args: 0, res: 0, upd: 0;
       c7vlI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vlH() //  [R1]
         { info_tbl: [(c7vlH,
                       label: block_c7vlH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vlH: // global
           _s7tcR::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7vlL;
               case 2 : goto c7vlM;
               case 3 : goto c7vlN;
               case 4 : goto c7vlO;
               case 5 : goto c7vlP;
               case 6 : goto c7vlQ;
           }
       c7vlQ: // global
           I64[Sp + 8] = block_c7vnO_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vor; else goto c7vnQ;
       u7vor: // global
           call _c7vnO() args: 0, res: 0, upd: 0;
       c7vnQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vlP: // global
           I64[Sp + 8] = block_c7vnz_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7voq; else goto c7vnB;
       u7voq: // global
           call _c7vnz(R1) args: 0, res: 0, upd: 0;
       c7vnB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vlO: // global
           I64[Sp + 8] = block_c7vng_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vop; else goto c7vni;
       u7vop: // global
           call _c7vng(R1) args: 0, res: 0, upd: 0;
       c7vni: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vlN: // global
           I64[Sp + 8] = block_c7vmT_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7voo; else goto c7vmV;
       u7voo: // global
           call _c7vmT(R1) args: 0, res: 0, upd: 0;
       c7vmV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vlM: // global
           I64[Sp + 8] = block_c7vms_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7von; else goto c7vmu;
       u7von: // global
           call _c7vms(R1) args: 0, res: 0, upd: 0;
       c7vmu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vlL: // global
           I64[Sp + 8] = block_c7vlX_info;
           R1 = _s7tcR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vom; else goto c7vlZ;
       u7vom: // global
           call _c7vlX(R1) args: 0, res: 0, upd: 0;
       c7vlZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vnO() //  []
         { info_tbl: [(c7vnO,
                       label: block_c7vnO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vnO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vnz() //  [R1]
         { info_tbl: [(c7vnz,
                       label: block_c7vnz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vnz: // global
           if (R1 & 7 == 6) goto u7vo4; else goto u7vo5;
       u7vo4: // global
           Sp = Sp + 8;
           call _c7vnL() args: 0, res: 0, upd: 0;
       u7vo5: // global
           Sp = Sp + 8;
           call _c7vnH() args: 0, res: 0, upd: 0;
     }
 },
 _c7vng() //  [R1]
         { info_tbl: [(c7vng,
                       label: block_c7vng_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vng: // global
           _c7vnW::P64 = R1 & 7;
           if (_c7vnW::P64 != 5) goto u7vo3; else goto u7vo6;
       u7vo3: // global
           if (_c7vnW::P64 != 6) goto u7vo8; else goto u7vo7;
       u7vo8: // global
           Sp = Sp + 8;
           call _c7vnH() args: 0, res: 0, upd: 0;
       u7vo7: // global
           Sp = Sp + 8;
           goto u7voB;
       u7vo6: // global
           Sp = Sp + 8;
           goto u7voB;
       u7voB: // global
           call _c7vnL() args: 0, res: 0, upd: 0;
     }
 },
 _c7vmT() //  [R1]
         { info_tbl: [(c7vmT,
                       label: block_c7vmT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vmT: // global
           _c7vnX::P64 = R1 & 7;
           if (_c7vnX::P64 < 4) goto u7vo9; else goto u7vo2;
       u7vo9: // global
           Sp = Sp + 8;
           call _c7vnH() args: 0, res: 0, upd: 0;
       u7vo2: // global
           if (_c7vnX::P64 != 5) goto u7vob; else goto u7vob;
       u7vob: // global
           Sp = Sp + 8;
           call _c7vnL() args: 0, res: 0, upd: 0;
     }
 },
 _c7vms() //  [R1]
         { info_tbl: [(c7vms,
                       label: block_c7vms_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vms: // global
           _c7vnY::P64 = R1 & 7;
           if (_c7vnY::P64 < 6) goto u7vo0; else goto u7voc;
       u7vo0: // global
           if (_c7vnY::P64 < 3) goto u7vod; else goto u7vo1;
       u7vod: // global
           Sp = Sp + 8;
           call _c7vnH() args: 0, res: 0, upd: 0;
       u7vo1: // global
           if (_c7vnY::P64 != 4) goto u7vof; else goto u7vof;
       u7vof: // global
           Sp = Sp + 8;
           goto u7vox;
       u7voc: // global
           Sp = Sp + 8;
           goto u7vox;
       u7vox: // global
           call _c7vnL() args: 0, res: 0, upd: 0;
     }
 },
 _c7vlX() //  [R1]
         { info_tbl: [(c7vlX,
                       label: block_c7vlX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vlX: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7vog;
               case 2, 3, 4, 5, 6 : goto u7vol;
           }
       u7vol: // global
           Sp = Sp + 8;
           call _c7vnL() args: 0, res: 0, upd: 0;
       u7vog: // global
           Sp = Sp + 8;
           call _c7vnH() args: 0, res: 0, upd: 0;
     }
 },
 _c7vnL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vnL: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vnH() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vnH: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.054337405 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c<=_closure" {
     GHC.Exception.$fOrdArithException_$c<=_closure:
         const GHC.Exception.$fOrdArithException_$c<=_info;
 },
 GHC.Exception.$fOrdArithException_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7vpJ,
                       label: GHC.Exception.$fOrdArithException_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vpJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vpK; else goto c7vpL;
       c7vpK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vpL: // global
           I64[Sp - 16] = block_c7vpy_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vsj; else goto c7vpz;
       u7vsj: // global
           call _c7vpy(R1) args: 0, res: 0, upd: 0;
       c7vpz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vpy() //  [R1]
         { info_tbl: [(c7vpy,
                       label: block_c7vpy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vpy: // global
           _s7tcZ::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7vpC;
               case 2 : goto c7vpD;
               case 3 : goto c7vpE;
               case 4 : goto c7vpF;
               case 5 : goto c7vpG;
               case 6 : goto c7vpH;
           }
       c7vpH: // global
           I64[Sp + 8] = block_c7vrF_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vsi; else goto c7vrH;
       u7vsi: // global
           call _c7vrF() args: 0, res: 0, upd: 0;
       c7vrH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vpG: // global
           I64[Sp + 8] = block_c7vrq_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vsh; else goto c7vrs;
       u7vsh: // global
           call _c7vrq(R1) args: 0, res: 0, upd: 0;
       c7vrs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vpF: // global
           I64[Sp + 8] = block_c7vr7_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vsg; else goto c7vr9;
       u7vsg: // global
           call _c7vr7(R1) args: 0, res: 0, upd: 0;
       c7vr9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vpE: // global
           I64[Sp + 8] = block_c7vqK_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vsf; else goto c7vqM;
       u7vsf: // global
           call _c7vqK(R1) args: 0, res: 0, upd: 0;
       c7vqM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vpD: // global
           I64[Sp + 8] = block_c7vqj_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vse; else goto c7vql;
       u7vse: // global
           call _c7vqj(R1) args: 0, res: 0, upd: 0;
       c7vql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vpC: // global
           I64[Sp + 8] = block_c7vpO_info;
           R1 = _s7tcZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vsd; else goto c7vpQ;
       u7vsd: // global
           call _c7vpO(R1) args: 0, res: 0, upd: 0;
       c7vpQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vrF() //  []
         { info_tbl: [(c7vrF,
                       label: block_c7vrF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vrF: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vrq() //  [R1]
         { info_tbl: [(c7vrq,
                       label: block_c7vrq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vrq: // global
           if (R1 & 7 == 6) goto u7vrV; else goto u7vrW;
       u7vrV: // global
           Sp = Sp + 8;
           call _c7vrC() args: 0, res: 0, upd: 0;
       u7vrW: // global
           Sp = Sp + 8;
           call _c7vry() args: 0, res: 0, upd: 0;
     }
 },
 _c7vr7() //  [R1]
         { info_tbl: [(c7vr7,
                       label: block_c7vr7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vr7: // global
           _c7vrN::P64 = R1 & 7;
           if (_c7vrN::P64 != 5) goto u7vrU; else goto u7vrX;
       u7vrU: // global
           if (_c7vrN::P64 != 6) goto u7vrZ; else goto u7vrY;
       u7vrZ: // global
           Sp = Sp + 8;
           call _c7vry() args: 0, res: 0, upd: 0;
       u7vrY: // global
           Sp = Sp + 8;
           goto u7vss;
       u7vrX: // global
           Sp = Sp + 8;
           goto u7vss;
       u7vss: // global
           call _c7vrC() args: 0, res: 0, upd: 0;
     }
 },
 _c7vqK() //  [R1]
         { info_tbl: [(c7vqK,
                       label: block_c7vqK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vqK: // global
           _c7vrO::P64 = R1 & 7;
           if (_c7vrO::P64 < 4) goto u7vs0; else goto u7vrT;
       u7vs0: // global
           Sp = Sp + 8;
           call _c7vry() args: 0, res: 0, upd: 0;
       u7vrT: // global
           if (_c7vrO::P64 != 5) goto u7vs2; else goto u7vs2;
       u7vs2: // global
           Sp = Sp + 8;
           call _c7vrC() args: 0, res: 0, upd: 0;
     }
 },
 _c7vqj() //  [R1]
         { info_tbl: [(c7vqj,
                       label: block_c7vqj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vqj: // global
           _c7vrP::P64 = R1 & 7;
           if (_c7vrP::P64 < 6) goto u7vrR; else goto u7vs3;
       u7vrR: // global
           if (_c7vrP::P64 < 3) goto u7vs4; else goto u7vrS;
       u7vs4: // global
           Sp = Sp + 8;
           call _c7vry() args: 0, res: 0, upd: 0;
       u7vrS: // global
           if (_c7vrP::P64 != 4) goto u7vs6; else goto u7vs6;
       u7vs6: // global
           Sp = Sp + 8;
           goto u7vso;
       u7vs3: // global
           Sp = Sp + 8;
           goto u7vso;
       u7vso: // global
           call _c7vrC() args: 0, res: 0, upd: 0;
     }
 },
 _c7vpO() //  [R1]
         { info_tbl: [(c7vpO,
                       label: block_c7vpO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vpO: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7vs7;
               case 2, 3, 4, 5, 6 : goto u7vsc;
           }
       u7vsc: // global
           Sp = Sp + 8;
           call _c7vrC() args: 0, res: 0, upd: 0;
       u7vs7: // global
           Sp = Sp + 8;
           call _c7vry() args: 0, res: 0, upd: 0;
     }
 },
 _c7vrC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vrC: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vry() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vry: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.075142477 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$cmax_closure" {
     GHC.Exception.$fOrdArithException_$cmax_closure:
         const GHC.Exception.$fOrdArithException_$cmax_info;
 },
 GHC.Exception.$fOrdArithException_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7vtA,
                       label: GHC.Exception.$fOrdArithException_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vtA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vtB; else goto c7vtC;
       c7vtB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vtC: // global
           I64[Sp - 16] = block_c7vtp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vvD; else goto c7vtq;
       u7vvD: // global
           call _c7vtp(R1) args: 0, res: 0, upd: 0;
       c7vtq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vtp() //  [R1]
         { info_tbl: [(c7vtp,
                       label: block_c7vtp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vtp: // global
           _s7td8::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7vtt;
               case 2 : goto c7vtu;
               case 3 : goto c7vtv;
               case 4 : goto c7vtw;
               case 5 : goto c7vtx;
               case 6 : goto c7vty;
           }
       c7vty: // global
           I64[Sp + 8] = block_c7vv4_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vvC; else goto c7vv6;
       u7vvC: // global
           call _c7vv4() args: 0, res: 0, upd: 0;
       c7vv6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vtx: // global
           I64[Sp + 8] = block_c7vuP_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vvB; else goto c7vuR;
       u7vvB: // global
           call _c7vuP(R1) args: 0, res: 0, upd: 0;
       c7vuR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vtw: // global
           I64[Sp + 8] = block_c7vuw_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vvA; else goto c7vuy;
       u7vvA: // global
           call _c7vuw(R1) args: 0, res: 0, upd: 0;
       c7vuy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vtv: // global
           I64[Sp + 8] = block_c7vu9_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vvz; else goto c7vub;
       u7vvz: // global
           call _c7vu9(R1) args: 0, res: 0, upd: 0;
       c7vub: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vtu: // global
           I64[Sp + 8] = block_c7vtI_info;
           R1 = _s7td8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vvy; else goto c7vtK;
       u7vvy: // global
           call _c7vtI(R1) args: 0, res: 0, upd: 0;
       c7vtK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vtt: // global
           R1 = _s7td8::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vv4() //  []
         { info_tbl: [(c7vv4,
                       label: block_c7vv4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vv4: // global
           R1 = GHC.Exception.RatioZeroDenominator_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vuP() //  [R1]
         { info_tbl: [(c7vuP,
                       label: block_c7vuP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vuP: // global
           if (R1 & 7 == 6) goto u7vvl; else goto u7vvm;
       u7vvl: // global
           Sp = Sp + 8;
           call _c7vv1() args: 0, res: 0, upd: 0;
       u7vvm: // global
           Sp = Sp + 8;
           call _c7vuX() args: 0, res: 0, upd: 0;
     }
 },
 _c7vuw() //  [R1]
         { info_tbl: [(c7vuw,
                       label: block_c7vuw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vuw: // global
           _c7vvc::P64 = R1 & 7;
           if (_c7vvc::P64 != 5) goto u7vvk; else goto u7vvn;
       u7vvk: // global
           if (_c7vvc::P64 != 6) goto u7vvp; else goto u7vvo;
       u7vvp: // global
           Sp = Sp + 8;
           call _c7vuE() args: 0, res: 0, upd: 0;
       u7vvo: // global
           Sp = Sp + 8;
           call _c7vv1() args: 0, res: 0, upd: 0;
       u7vvn: // global
           Sp = Sp + 8;
           call _c7vuX() args: 0, res: 0, upd: 0;
     }
 },
 _c7vu9() //  [R1]
         { info_tbl: [(c7vu9,
                       label: block_c7vu9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vu9: // global
           _c7vvd::P64 = R1 & 7;
           if (_c7vvd::P64 < 5) goto u7vvi; else goto u7vvj;
       u7vvi: // global
           if (_c7vvd::P64 < 4) goto u7vvr; else goto u7vvq;
       u7vvr: // global
           Sp = Sp + 8;
           call _c7vuh() args: 0, res: 0, upd: 0;
       u7vvq: // global
           Sp = Sp + 8;
           call _c7vuE() args: 0, res: 0, upd: 0;
       u7vvj: // global
           if (_c7vvd::P64 < 6) goto u7vvt; else goto u7vvs;
       u7vvt: // global
           Sp = Sp + 8;
           call _c7vuX() args: 0, res: 0, upd: 0;
       u7vvs: // global
           Sp = Sp + 8;
           call _c7vv1() args: 0, res: 0, upd: 0;
     }
 },
 _c7vtI() //  [R1]
         { info_tbl: [(c7vtI,
                       label: block_c7vtI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vtI: // global
           _c7vve::P64 = R1 & 7;
           if (_c7vve::P64 < 5) goto u7vvf; else goto u7vvh;
       u7vvf: // global
           if (_c7vve::P64 < 4) goto u7vvg; else goto u7vvu;
       u7vvg: // global
           if (_c7vve::P64 < 3) goto c7vtQ; else goto u7vvv;
       c7vtQ: // global
           R1 = GHC.Exception.Underflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7vvv: // global
           Sp = Sp + 8;
           call _c7vuh() args: 0, res: 0, upd: 0;
       u7vvu: // global
           Sp = Sp + 8;
           call _c7vuE() args: 0, res: 0, upd: 0;
       u7vvh: // global
           if (_c7vve::P64 < 6) goto u7vvx; else goto u7vvw;
       u7vvx: // global
           Sp = Sp + 8;
           call _c7vuX() args: 0, res: 0, upd: 0;
       u7vvw: // global
           Sp = Sp + 8;
           call _c7vv1() args: 0, res: 0, upd: 0;
     }
 },
 _c7vuh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vuh: // global
           R1 = GHC.Exception.LossOfPrecision_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vuE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vuE: // global
           R1 = GHC.Exception.DivideByZero_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vuX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vuX: // global
           R1 = GHC.Exception.Denormal_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vv1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vv1: // global
           R1 = GHC.Exception.RatioZeroDenominator_closure+6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.097895525 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c>=_closure" {
     GHC.Exception.$fOrdArithException_$c>=_closure:
         const GHC.Exception.$fOrdArithException_$c>=_info;
 },
 GHC.Exception.$fOrdArithException_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7vwX,
                       label: GHC.Exception.$fOrdArithException_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vwX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vwY; else goto c7vwZ;
       c7vwY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vwZ: // global
           I64[Sp - 16] = block_c7vwM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vzx; else goto c7vwN;
       u7vzx: // global
           call _c7vwM(R1) args: 0, res: 0, upd: 0;
       c7vwN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vwM() //  [R1]
         { info_tbl: [(c7vwM,
                       label: block_c7vwM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vwM: // global
           _s7tdh::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7vwQ;
               case 2 : goto c7vwR;
               case 3 : goto c7vwS;
               case 4 : goto c7vwT;
               case 5 : goto c7vwU;
               case 6 : goto c7vwV;
           }
       c7vwV: // global
           I64[Sp + 8] = block_c7vyT_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vzw; else goto c7vyV;
       u7vzw: // global
           call _c7vyT() args: 0, res: 0, upd: 0;
       c7vyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vwU: // global
           I64[Sp + 8] = block_c7vyE_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vzv; else goto c7vyG;
       u7vzv: // global
           call _c7vyE(R1) args: 0, res: 0, upd: 0;
       c7vyG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vwT: // global
           I64[Sp + 8] = block_c7vyl_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vzu; else goto c7vyn;
       u7vzu: // global
           call _c7vyl(R1) args: 0, res: 0, upd: 0;
       c7vyn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vwS: // global
           I64[Sp + 8] = block_c7vxY_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vzt; else goto c7vy0;
       u7vzt: // global
           call _c7vxY(R1) args: 0, res: 0, upd: 0;
       c7vy0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vwR: // global
           I64[Sp + 8] = block_c7vxx_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vzs; else goto c7vxz;
       u7vzs: // global
           call _c7vxx(R1) args: 0, res: 0, upd: 0;
       c7vxz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vwQ: // global
           I64[Sp + 8] = block_c7vx2_info;
           R1 = _s7tdh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vzr; else goto c7vx4;
       u7vzr: // global
           call _c7vx2(R1) args: 0, res: 0, upd: 0;
       c7vx4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vyT() //  []
         { info_tbl: [(c7vyT,
                       label: block_c7vyT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vyT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vyE() //  [R1]
         { info_tbl: [(c7vyE,
                       label: block_c7vyE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vyE: // global
           if (R1 & 7 == 6) goto u7vz9; else goto u7vza;
       u7vz9: // global
           Sp = Sp + 8;
           call _c7vyQ() args: 0, res: 0, upd: 0;
       u7vza: // global
           Sp = Sp + 8;
           call _c7vyM() args: 0, res: 0, upd: 0;
     }
 },
 _c7vyl() //  [R1]
         { info_tbl: [(c7vyl,
                       label: block_c7vyl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vyl: // global
           _c7vz1::P64 = R1 & 7;
           if (_c7vz1::P64 != 5) goto u7vz8; else goto u7vzb;
       u7vz8: // global
           if (_c7vz1::P64 != 6) goto u7vzd; else goto u7vzc;
       u7vzd: // global
           Sp = Sp + 8;
           call _c7vyM() args: 0, res: 0, upd: 0;
       u7vzc: // global
           Sp = Sp + 8;
           goto u7vzG;
       u7vzb: // global
           Sp = Sp + 8;
           goto u7vzG;
       u7vzG: // global
           call _c7vyQ() args: 0, res: 0, upd: 0;
     }
 },
 _c7vxY() //  [R1]
         { info_tbl: [(c7vxY,
                       label: block_c7vxY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vxY: // global
           _c7vz2::P64 = R1 & 7;
           if (_c7vz2::P64 < 4) goto u7vze; else goto u7vz7;
       u7vze: // global
           Sp = Sp + 8;
           call _c7vyM() args: 0, res: 0, upd: 0;
       u7vz7: // global
           if (_c7vz2::P64 != 5) goto u7vzg; else goto u7vzg;
       u7vzg: // global
           Sp = Sp + 8;
           call _c7vyQ() args: 0, res: 0, upd: 0;
     }
 },
 _c7vxx() //  [R1]
         { info_tbl: [(c7vxx,
                       label: block_c7vxx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vxx: // global
           _c7vz3::P64 = R1 & 7;
           if (_c7vz3::P64 < 6) goto u7vz5; else goto u7vzh;
       u7vz5: // global
           if (_c7vz3::P64 < 3) goto u7vzi; else goto u7vz6;
       u7vzi: // global
           Sp = Sp + 8;
           call _c7vyM() args: 0, res: 0, upd: 0;
       u7vz6: // global
           if (_c7vz3::P64 != 4) goto u7vzk; else goto u7vzk;
       u7vzk: // global
           Sp = Sp + 8;
           goto u7vzC;
       u7vzh: // global
           Sp = Sp + 8;
           goto u7vzC;
       u7vzC: // global
           call _c7vyQ() args: 0, res: 0, upd: 0;
     }
 },
 _c7vx2() //  [R1]
         { info_tbl: [(c7vx2,
                       label: block_c7vx2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vx2: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7vzl;
               case 2, 3, 4, 5, 6 : goto u7vzq;
           }
       u7vzq: // global
           Sp = Sp + 8;
           call _c7vyQ() args: 0, res: 0, upd: 0;
       u7vzl: // global
           Sp = Sp + 8;
           call _c7vyM() args: 0, res: 0, upd: 0;
     }
 },
 _c7vyQ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vyQ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vyM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vyM: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.118187943 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c>_closure" {
     GHC.Exception.$fOrdArithException_$c>_closure:
         const GHC.Exception.$fOrdArithException_$c>_info;
 },
 GHC.Exception.$fOrdArithException_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7vAD,
                       label: GHC.Exception.$fOrdArithException_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vAD: // global
           _s7tdq::P64 = R3;
           R3 = R2;
           R2 = _s7tdq::P64;
           call GHC.Exception.$fOrdArithException_$c<_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.122956173 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$cmin_closure" {
     GHC.Exception.$fOrdArithException_$cmin_closure:
         const GHC.Exception.$fOrdArithException_$cmin_info;
 },
 GHC.Exception.$fOrdArithException_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7vAZ,
                       label: GHC.Exception.$fOrdArithException_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vAZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vB0; else goto c7vB1;
       c7vB0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vB1: // global
           I64[Sp - 16] = block_c7vAO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7vCN; else goto c7vAP;
       u7vCN: // global
           call _c7vAO(R1) args: 0, res: 0, upd: 0;
       c7vAP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vAO() //  [R1]
         { info_tbl: [(c7vAO,
                       label: block_c7vAO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vAO: // global
           _s7tdr::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7vAS;
               case 2 : goto c7vAT;
               case 3 : goto c7vAU;
               case 4 : goto c7vAV;
               case 5 : goto c7vAW;
               case 6 : goto c7vAX;
           }
       c7vAX: // global
           R1 = _s7tdr::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7vAW: // global
           I64[Sp + 8] = block_c7vCk_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vCM; else goto c7vCm;
       u7vCM: // global
           call _c7vCk(R1) args: 0, res: 0, upd: 0;
       c7vCm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vAV: // global
           I64[Sp + 8] = block_c7vC1_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vCL; else goto c7vC3;
       u7vCL: // global
           call _c7vC1(R1) args: 0, res: 0, upd: 0;
       c7vC3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vAU: // global
           I64[Sp + 8] = block_c7vBE_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vCK; else goto c7vBG;
       u7vCK: // global
           call _c7vBE(R1) args: 0, res: 0, upd: 0;
       c7vBG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vAT: // global
           I64[Sp + 8] = block_c7vBd_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vCJ; else goto c7vBf;
       u7vCJ: // global
           call _c7vBd(R1) args: 0, res: 0, upd: 0;
       c7vBf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7vAS: // global
           I64[Sp + 8] = block_c7vB4_info;
           R1 = _s7tdr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vCI; else goto c7vB6;
       u7vCI: // global
           call _c7vB4() args: 0, res: 0, upd: 0;
       c7vB6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vCk() //  [R1]
         { info_tbl: [(c7vCk,
                       label: block_c7vCk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vCk: // global
           if (R1 & 7 == 6) goto c7vCw; else goto c7vCs;
       c7vCw: // global
           R1 = GHC.Exception.Denormal_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7vCs: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vC1() //  [R1]
         { info_tbl: [(c7vC1,
                       label: block_c7vC1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vC1: // global
           _c7vCB::P64 = R1 & 7;
           if (_c7vCB::P64 == 5) goto c7vCh; else goto u7vCH;
       u7vCH: // global
           if (_c7vCB::P64 == 6) goto c7vCh; else goto c7vC9;
       c7vCh: // global
           R1 = GHC.Exception.DivideByZero_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7vC9: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vBE() //  [R1]
         { info_tbl: [(c7vBE,
                       label: block_c7vBE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vBE: // global
           _c7vCC::P64 = R1 & 7;
           if (_c7vCC::P64 < 4) goto c7vBM; else goto u7vCG;
       c7vBM: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u7vCG: // global
           if (_c7vCC::P64 != 5) goto c7vBY; else goto c7vBY;
       c7vBY: // global
           R1 = GHC.Exception.LossOfPrecision_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vBd() //  [R1]
         { info_tbl: [(c7vBd,
                       label: block_c7vBd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vBd: // global
           _c7vCD::P64 = R1 & 7;
           if (_c7vCD::P64 >= 6) goto c7vBB; else goto u7vCE;
       u7vCE: // global
           if (_c7vCD::P64 < 3) goto c7vBl; else goto u7vCF;
       c7vBl: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u7vCF: // global
           if (_c7vCD::P64 != 4) goto c7vBB; else goto c7vBB;
       c7vBB: // global
           R1 = GHC.Exception.Underflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7vB4() //  []
         { info_tbl: [(c7vB4,
                       label: block_c7vB4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vB4: // global
           R1 = GHC.Exception.Overflow_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.14041811 UTC

[section ""data" . GHC.Exception.$fOrdArithException_closure" {
     GHC.Exception.$fOrdArithException_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Exception.$fEqArithException_closure+1;
         const GHC.Exception.$fOrdArithException_$ccompare_closure+2;
         const GHC.Exception.$fOrdArithException_$c<_closure+2;
         const GHC.Exception.$fOrdArithException_$c<=_closure+2;
         const GHC.Exception.$fOrdArithException_$c>_closure+2;
         const GHC.Exception.$fOrdArithException_$c>=_closure+2;
         const GHC.Exception.$fOrdArithException_$cmax_closure+2;
         const GHC.Exception.$fOrdArithException_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.142780625 UTC

[section ""cstring" . GHC.Exception.$trModule4_bytes" {
     GHC.Exception.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.144410688 UTC

[section ""data" . GHC.Exception.$trModule3_closure" {
     GHC.Exception.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.146207532 UTC

[section ""cstring" . GHC.Exception.$trModule2_bytes" {
     GHC.Exception.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.148013711 UTC

[section ""data" . GHC.Exception.$trModule1_closure" {
     GHC.Exception.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.149851915 UTC

[section ""data" . GHC.Exception.$trModule_closure" {
     GHC.Exception.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exception.$trModule3_closure+1;
         const GHC.Exception.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.151752509 UTC

[section ""data" . $krep_r7t8y_closure" {
     $krep_r7t8y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.153577491 UTC

[section ""data" . $krep1_r7t8z_closure" {
     $krep1_r7t8z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.155479037 UTC

[section ""data" . $krep2_r7t8A_closure" {
     $krep2_r7t8A_closure:
         const :_con_info;
         const $krep1_r7t8z_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.158203588 UTC

[section ""data" . $krep3_r7t8B_closure" {
     $krep3_r7t8B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r7t8A_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.160096211 UTC

[section ""data" . GHC.Exception.$tcException1_closure" {
     GHC.Exception.$tcException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_r7t8y_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.161961873 UTC

[section ""data" . $krep4_r7t8C_closure" {
     $krep4_r7t8C_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.163677112 UTC

[section ""data" . $krep5_r7t8D_closure" {
     $krep5_r7t8D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7t8C_closure+2;
         const $krep3_r7t8B_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.165312246 UTC

[section ""data" . $krep6_r7t8E_closure" {
     $krep6_r7t8E_closure:
         const :_con_info;
         const $krep4_r7t8C_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.167124804 UTC

[section ""data" . $krep7_r7t8F_closure" {
     $krep7_r7t8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.168836101 UTC

[section ""data" . $krep8_r7t8G_closure" {
     $krep8_r7t8G_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.17059951 UTC

[section ""data" . $krep9_r7t8H_closure" {
     $krep9_r7t8H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeable_closure;
         const $krep8_r7t8G_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.172394409 UTC

[section ""data" . $krep10_r7t8I_closure" {
     $krep10_r7t8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Show.$tcShow_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.174130137 UTC

[section ""cstring" . GHC.Exception.$fExceptionSomeException3_bytes" {
     GHC.Exception.$fExceptionSomeException3_bytes:
         I8[] [83,111,109,101,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.175896217 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException2_closure" {
     GHC.Exception.$fExceptionSomeException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionSomeException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.17815619 UTC

[section ""data" . GHC.Exception.$tcSomeException_closure" {
     GHC.Exception.$tcSomeException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionSomeException2_closure+1;
         const GHC.Types.krep$*_closure;
         const 13267649630904555636;
         const 2959581124447004473;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.180085311 UTC

[section ""data" . $krep11_r7t8J_closure" {
     $krep11_r7t8J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcSomeException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.181887942 UTC

[section ""data" . $krep12_r7t8K_closure" {
     $krep12_r7t8K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7t8C_closure+2;
         const $krep11_r7t8J_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.18411029 UTC

[section ""data" . $krep13_r7t8L_closure" {
     $krep13_r7t8L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r7t8J_closure+1;
         const $krep7_r7t8F_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.186620009 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException1_closure" {
     GHC.Exception.$fExceptionSomeException1_closure:
         const GHC.Exception.$fExceptionSomeException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionSomeException1_entry() //  [R1]
         { info_tbl: [(c7vEd,
                       label: GHC.Exception.$fExceptionSomeException1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vEd: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7vEe; else goto c7vEf;
       c7vEe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vEf: // global
           (_c7vE5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vE5::I64 == 0) goto c7vE7; else goto c7vE6;
       c7vE7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vE6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vE5::I64;
           I64[Sp - 24] = block_c7vE8_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionSomeException2_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 2959581124447004473;
           R2 = 13267649630904555636;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7vE8() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7vE8,
                       label: block_c7vE8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vE8: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7vE9() args: 0, res: 0, upd: 0;
     }
 },
 _c7vE9() //  []
         { info_tbl: [(c7vE9,
                       label: block_c7vE9_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vE9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vEi; else goto c7vEh;
       c7vEi: // global
           HpAlloc = 48;
           I64[Sp] = block_c7vE9_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7vEh: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.194927495 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_closure" {
     GHC.Exception.$fExceptionSomeException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionSomeException1_closure;
         const GHC.Exception.$fShowSomeException_closure+1;
         const GHC.Exception.$fExceptionSomeException_$ctoException_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Exception.$fExceptionSomeException_$cdisplayException_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.196818951 UTC

[section ""cstring" . GHC.Exception.$tcException3_bytes" {
     GHC.Exception.$tcException3_bytes:
         I8[] [69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.198495252 UTC

[section ""data" . GHC.Exception.$tcException2_closure" {
     GHC.Exception.$tcException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tcException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.200179422 UTC

[section ""data" . GHC.Exception.$tcException_closure" {
     GHC.Exception.$tcException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tcException2_closure+1;
         const GHC.Exception.$tcException1_closure+4;
         const 5005890060182917952;
         const 3990091377913498827;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.202575998 UTC

[section ""data" . $krep14_r7t8M_closure" {
     $krep14_r7t8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcException_closure+1;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.204386036 UTC

[section ""data" . $krep15_r7t8N_closure" {
     $krep15_r7t8N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7t8D_closure+4;
         const $krep14_r7t8M_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.206205962 UTC

[section ""data" . $krep16_r7t8O_closure" {
     $krep16_r7t8O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7t8L_closure+4;
         const $krep15_r7t8N_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.208008873 UTC

[section ""data" . $krep17_r7t8P_closure" {
     $krep17_r7t8P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7t8K_closure+4;
         const $krep16_r7t8O_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.209757153 UTC

[section ""data" . $krep18_r7t8Q_closure" {
     $krep18_r7t8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7t8I_closure+1;
         const $krep17_r7t8P_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.211556579 UTC

[section ""data" . GHC.Exception.$tc'C:Exception1_closure" {
     GHC.Exception.$tc'C:Exception1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7t8H_closure+1;
         const $krep18_r7t8Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.213383446 UTC

[section ""cstring" . GHC.Exception.$tc'C:Exception3_bytes" {
     GHC.Exception.$tc'C:Exception3_bytes:
         I8[] [39,67,58,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.215878602 UTC

[section ""data" . GHC.Exception.$tc'C:Exception2_closure" {
     GHC.Exception.$tc'C:Exception2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'C:Exception3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.218309426 UTC

[section ""data" . GHC.Exception.$tc'C:Exception_closure" {
     GHC.Exception.$tc'C:Exception_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'C:Exception2_closure+1;
         const GHC.Exception.$tc'C:Exception1_closure+4;
         const 10820889188949131006;
         const 4069342579395079435;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.220221824 UTC

[section ""data" . GHC.Exception.$tc'SomeException1_closure" {
     GHC.Exception.$tc'SomeException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r7t8M_closure+1;
         const $krep12_r7t8K_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.22204468 UTC

[section ""cstring" . GHC.Exception.$tc'SomeException3_bytes" {
     GHC.Exception.$tc'SomeException3_bytes:
         I8[] [39,83,111,109,101,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.223755144 UTC

[section ""data" . GHC.Exception.$tc'SomeException2_closure" {
     GHC.Exception.$tc'SomeException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'SomeException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.22563044 UTC

[section ""data" . GHC.Exception.$tc'SomeException_closure" {
     GHC.Exception.$tc'SomeException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'SomeException2_closure+1;
         const GHC.Exception.$tc'SomeException1_closure+4;
         const 16790271558916100413;
         const 1524061796422226345;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.22753013 UTC

[section ""cstring" . GHC.Exception.$fExceptionErrorCall4_bytes" {
     GHC.Exception.$fExceptionErrorCall4_bytes:
         I8[] [69,114,114,111,114,67,97,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.22927777 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall3_closure" {
     GHC.Exception.$fExceptionErrorCall3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionErrorCall4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.231053417 UTC

[section ""data" . GHC.Exception.$tcErrorCall_closure" {
     GHC.Exception.$tcErrorCall_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionErrorCall3_closure+1;
         const GHC.Types.krep$*_closure;
         const 4106747399780464988;
         const 1398564497631027702;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.23289261 UTC

[section ""data" . $krep19_r7t8R_closure" {
     $krep19_r7t8R_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcErrorCall_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.234721818 UTC

[section ""data" . $krep20_r7t8S_closure" {
     $krep20_r7t8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7t8B_closure+1;
         const $krep19_r7t8R_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.23645505 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation1_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7t8B_closure+1;
         const $krep20_r7t8S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.23871705 UTC

[section ""cstring" . GHC.Exception.$tc'ErrorCallWithLocation3_bytes" {
     GHC.Exception.$tc'ErrorCallWithLocation3_bytes:
         I8[] [39,69,114,114,111,114,67,97,108,108,87,105,116,104,76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.240515056 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation2_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'ErrorCallWithLocation3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.242983156 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'ErrorCallWithLocation2_closure+1;
         const GHC.Exception.$tc'ErrorCallWithLocation1_closure+4;
         const 14789594717732302892;
         const 17317233711857548947;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.245560346 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall2_closure" {
     GHC.Exception.$fExceptionErrorCall2_closure:
         const GHC.Exception.$fExceptionErrorCall2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall2_entry() //  [R1]
         { info_tbl: [(c7vFf,
                       label: GHC.Exception.$fExceptionErrorCall2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vFf: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7vFg; else goto c7vFh;
       c7vFg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vFh: // global
           (_c7vF7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vF7::I64 == 0) goto c7vF9; else goto c7vF8;
       c7vF9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vF8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vF7::I64;
           I64[Sp - 24] = block_c7vFa_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionErrorCall3_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 1398564497631027702;
           R2 = 4106747399780464988;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7vFa() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7vFa,
                       label: block_c7vFa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vFa: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7vFb() args: 0, res: 0, upd: 0;
     }
 },
 _c7vFb() //  []
         { info_tbl: [(c7vFb,
                       label: block_c7vFb_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vFb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vFk; else goto c7vFj;
       c7vFk: // global
           HpAlloc = 48;
           I64[Sp] = block_c7vFb_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7vFj: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.253941384 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException16_bytes" {
     GHC.Exception.$fExceptionArithException16_bytes:
         I8[] [65,114,105,116,104,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.255691988 UTC

[section ""data" . GHC.Exception.$fExceptionArithException15_closure" {
     GHC.Exception.$fExceptionArithException15_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionArithException16_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.258482142 UTC

[section ""data" . GHC.Exception.$tcArithException_closure" {
     GHC.Exception.$tcArithException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionArithException15_closure+1;
         const GHC.Types.krep$*_closure;
         const 11275459110071720610;
         const 9614411694476093403;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.260724348 UTC

[section ""data" . GHC.Exception.$tc'Denormal1_closure" {
     GHC.Exception.$tc'Denormal1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcArithException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.262866558 UTC

[section ""cstring" . GHC.Exception.$tc'Overflow2_bytes" {
     GHC.Exception.$tc'Overflow2_bytes:
         I8[] [39,79,118,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.265003649 UTC

[section ""data" . GHC.Exception.$tc'Overflow1_closure" {
     GHC.Exception.$tc'Overflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Overflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.267191118 UTC

[section ""data" . GHC.Exception.$tc'Overflow_closure" {
     GHC.Exception.$tc'Overflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Overflow1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 868785644779029835;
         const 15802889491790460831;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.270124844 UTC

[section ""cstring" . GHC.Exception.$tc'Underflow2_bytes" {
     GHC.Exception.$tc'Underflow2_bytes:
         I8[] [39,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.272149788 UTC

[section ""data" . GHC.Exception.$tc'Underflow1_closure" {
     GHC.Exception.$tc'Underflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Underflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.274165183 UTC

[section ""data" . GHC.Exception.$tc'Underflow_closure" {
     GHC.Exception.$tc'Underflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Underflow1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 12747416996077452468;
         const 11539058234473019035;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.277131041 UTC

[section ""cstring" . GHC.Exception.$tc'LossOfPrecision2_bytes" {
     GHC.Exception.$tc'LossOfPrecision2_bytes:
         I8[] [39,76,111,115,115,79,102,80,114,101,99,105,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.279153219 UTC

[section ""data" . GHC.Exception.$tc'LossOfPrecision1_closure" {
     GHC.Exception.$tc'LossOfPrecision1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'LossOfPrecision2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.281215658 UTC

[section ""data" . GHC.Exception.$tc'LossOfPrecision_closure" {
     GHC.Exception.$tc'LossOfPrecision_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'LossOfPrecision1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 6720322370825216637;
         const 1452601476582167815;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.283446134 UTC

[section ""cstring" . GHC.Exception.$tc'DivideByZero2_bytes" {
     GHC.Exception.$tc'DivideByZero2_bytes:
         I8[] [39,68,105,118,105,100,101,66,121,90,101,114,111]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.28556943 UTC

[section ""data" . GHC.Exception.$tc'DivideByZero1_closure" {
     GHC.Exception.$tc'DivideByZero1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'DivideByZero2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.287562053 UTC

[section ""data" . GHC.Exception.$tc'DivideByZero_closure" {
     GHC.Exception.$tc'DivideByZero_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'DivideByZero1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 17029085746322105003;
         const 1338659094893400307;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.289708369 UTC

[section ""cstring" . GHC.Exception.$tc'Denormal3_bytes" {
     GHC.Exception.$tc'Denormal3_bytes:
         I8[] [39,68,101,110,111,114,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.291633053 UTC

[section ""data" . GHC.Exception.$tc'Denormal2_closure" {
     GHC.Exception.$tc'Denormal2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Denormal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.293455158 UTC

[section ""data" . GHC.Exception.$tc'Denormal_closure" {
     GHC.Exception.$tc'Denormal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Denormal2_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 3563997708427691429;
         const 10171683790716248215;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.295325819 UTC

[section ""cstring" . GHC.Exception.$tc'RatioZeroDenominator2_bytes" {
     GHC.Exception.$tc'RatioZeroDenominator2_bytes:
         I8[] [39,82,97,116,105,111,90,101,114,111,68,101,110,111,109,105,110,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.297038834 UTC

[section ""data" . GHC.Exception.$tc'RatioZeroDenominator1_closure" {
     GHC.Exception.$tc'RatioZeroDenominator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'RatioZeroDenominator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.298899128 UTC

[section ""data" . GHC.Exception.$tc'RatioZeroDenominator_closure" {
     GHC.Exception.$tc'RatioZeroDenominator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'RatioZeroDenominator1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 12115498985276514171;
         const 17178069790958498690;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.301787236 UTC

[section ""data" . GHC.Exception.$fExceptionArithException14_closure" {
     GHC.Exception.$fExceptionArithException14_closure:
         const GHC.Exception.$fExceptionArithException14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException14_entry() //  [R1]
         { info_tbl: [(c7vGd,
                       label: GHC.Exception.$fExceptionArithException14_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vGd: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7vGe; else goto c7vGf;
       c7vGe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vGf: // global
           (_c7vG5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vG5::I64 == 0) goto c7vG7; else goto c7vG6;
       c7vG7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vG6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vG5::I64;
           I64[Sp - 24] = block_c7vG8_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionArithException15_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 9614411694476093403;
           R2 = 11275459110071720610;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7vG8() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7vG8,
                       label: block_c7vG8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vG8: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7vG9() args: 0, res: 0, upd: 0;
     }
 },
 _c7vG9() //  []
         { info_tbl: [(c7vG9,
                       label: block_c7vG9_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vG9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vGi; else goto c7vGh;
       c7vGi: // global
           HpAlloc = 48;
           I64[Sp] = block_c7vG9_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7vGh: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.311489908 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cfromException_closure" {
     GHC.Exception.$fExceptionErrorCall_$cfromException_closure:
         const GHC.Exception.$fExceptionErrorCall_$cfromException_info;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall_$cfromException_entry() //  [R2]
         { info_tbl: [(c7vGL,
                       label: GHC.Exception.$fExceptionErrorCall_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vGL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vGP; else goto c7vGQ;
       c7vGP: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vGQ: // global
           I64[Sp - 8] = block_c7vGI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7vHb; else goto c7vGJ;
       u7vHb: // global
           call _c7vGI(R1) args: 0, res: 0, upd: 0;
       c7vGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vGI() //  [R1]
         { info_tbl: [(c7vGI,
                       label: block_c7vGI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vGI: // global
           I64[Sp - 8] = block_c7vGO_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vGO() //  [R1]
         { info_tbl: [(c7vGO,
                       label: block_c7vGO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vGO: // global
           I64[Sp] = block_c7vGV_info;
           R3 = GHC.Exception.$fExceptionErrorCall2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vGV() //  [R1]
         { info_tbl: [(c7vGV,
                       label: block_c7vGV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vGV: // global
           if (R1 & 7 == 1) goto c7vH2; else goto c7vH6;
       c7vH2: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7vH6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7vH9; else goto c7vH8;
       c7vH9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7vH8: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.321849615 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_closure" {
     GHC.Exception.$fExceptionErrorCall_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionErrorCall2_closure;
         const GHC.Exception.$fShowErrorCall_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$cfromException_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.Exception.$fExceptionErrorCall_$ctoException_closure" {
     GHC.Exception.$fExceptionErrorCall_$ctoException_closure:
         const GHC.Exception.$fExceptionErrorCall_$ctoException_info;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall_$ctoException_entry() //  [R2]
         { info_tbl: [(c7vHC,
                       label: GHC.Exception.$fExceptionErrorCall_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vHC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vHG; else goto c7vHF;
       c7vHG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vHF: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionErrorCall_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.326929296 UTC

[section ""data" . GHC.Exception.errorCallException_closure" {
     GHC.Exception.errorCallException_closure:
         const GHC.Exception.errorCallException_info;
         const 0;
 },
 GHC.Exception.errorCallException_entry() //  [R2]
         { info_tbl: [(c7vHS,
                       label: GHC.Exception.errorCallException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vHS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vHW; else goto c7vHV;
       c7vHW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.errorCallException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vHV: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 15;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.330708957 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException3_bytes" {
     GHC.Exception.errorCallWithCallStackException3_bytes:
         I8[] [58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.332375137 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException2_bytes" {
     GHC.Exception.errorCallWithCallStackException2_bytes:
         I8[] [32,105,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.336038809 UTC

[section ""data" . GHC.Exception.$wprettySrcLoc_closure" {
     GHC.Exception.$wprettySrcLoc_closure:
         const GHC.Exception.$wprettySrcLoc_info;
 },
 sat_s7teg_entry() //  [R1]
         { info_tbl: [(c7vIN,
                       label: sat_s7teg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vIN: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7teh_entry() //  [R1]
         { info_tbl: [(c7vIQ,
                       label: sat_s7teh_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vIQ: // global
           _s7teh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7vIR; else goto c7vIS;
       c7vIS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vIU; else goto c7vIT;
       c7vIU: // global
           HpAlloc = 24;
           goto c7vIR;
       c7vIR: // global
           R1 = _s7teh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vIT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7teh::P64;
           _s7tdZ::P64 = P64[_s7teh::P64 + 16];
           _s7te0::P64 = P64[_s7teh::P64 + 24];
           I64[Hp - 16] = sat_s7teg_info;
           P64[Hp] = _s7te0::P64;
           R3 = Hp - 16;
           R2 = _s7tdZ::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tei_entry() //  [R1]
         { info_tbl: [(c7vIV,
                       label: sat_s7tei_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vIV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7vIZ; else goto c7vIY;
       c7vIZ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vIY: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s7teh_info;
           P64[Hp - 8] = _s7tdZ::P64;
           P64[Hp] = _s7te0::P64;
           R3 = Hp - 24;
           R2 = GHC.Exception.errorCallWithCallStackException2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tej_entry() //  [R1]
         { info_tbl: [(c7vJ0,
                       label: sat_s7tej_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vJ0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7vJ2; else goto c7vJ3;
       c7vJ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vJ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c7vIu_info;
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s7tdZ::P64;
           P64[Sp - 24] = _s7te0::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7vJ8; else goto c7vIv;
       u7vJ8: // global
           call _c7vIu(R1) args: 0, res: 0, upd: 0;
       c7vIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7vIu() //  [R1]
         { info_tbl: [(c7vIu,
                       label: block_c7vIu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vIu: // global
           I64[Sp] = block_c7vIz_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7vIz() //  [R1, R2]
         { info_tbl: [(c7vIz,
                       label: block_c7vIz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vIz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7vJ7; else goto c7vJ6;
       c7vJ7: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7vJ6: // global
           I64[Hp - 48] = sat_s7tei_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tek_entry() //  [R1]
         { info_tbl: [(c7vJ9,
                       label: sat_s7tek_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vJ9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7vJd; else goto c7vJc;
       c7vJd: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vJc: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te3::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s7tej_info;
           P64[Hp - 16] = _s7tdZ::P64;
           P64[Hp - 8] = _s7te0::P64;
           P64[Hp] = _s7te3::P64;
           R3 = Hp - 32;
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tel_entry() //  [R1]
         { info_tbl: [(c7vJe,
                       label: sat_s7tel_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vJe: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7vJg; else goto c7vJh;
       c7vJg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vJh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c7vIf_info;
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te3::P64 = P64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s7tdZ::P64;
           P64[Sp - 32] = _s7te0::P64;
           P64[Sp - 24] = _s7te3::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u7vJm; else goto c7vIg;
       u7vJm: // global
           call _c7vIf(R1) args: 0, res: 0, upd: 0;
       c7vIg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7vIf() //  [R1]
         { info_tbl: [(c7vIf,
                       label: block_c7vIf_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vIf: // global
           I64[Sp] = block_c7vIk_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7vIk() //  [R1, R2]
         { info_tbl: [(c7vIk,
                       label: block_c7vIk_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vIk: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7vJl; else goto c7vJk;
       c7vJl: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7vJk: // global
           I64[Hp - 56] = sat_s7tek_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 14;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tem_entry() //  [R1]
         { info_tbl: [(c7vJn,
                       label: sat_s7tem_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vJn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vJr; else goto c7vJq;
       c7vJr: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vJq: // global
           _s7tdZ::P64 = P64[R1 + 16];
           _s7te0::P64 = P64[R1 + 24];
           _s7te2::P64 = P64[R1 + 32];
           _s7te3::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_s7tel_info;
           P64[Hp - 24] = _s7tdZ::P64;
           P64[Hp - 16] = _s7te0::P64;
           P64[Hp - 8] = _s7te2::P64;
           P64[Hp] = _s7te3::P64;
           R3 = Hp - 40;
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exception.$wprettySrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7vJs,
                       label: GHC.Exception.$wprettySrcLoc_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vJs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vJw; else goto c7vJv;
       c7vJw: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$wprettySrcLoc_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vJv: // global
           I64[Hp - 40] = sat_s7tem_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R3 = Hp - 40;
           R2 = R4;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.364322672 UTC

[section ""data" . GHC.Exception.prettySrcLoc_closure" {
     GHC.Exception.prettySrcLoc_closure:
         const GHC.Exception.prettySrcLoc_info;
 },
 GHC.Exception.prettySrcLoc_entry() //  [R2]
         { info_tbl: [(c7vKp,
                       label: GHC.Exception.prettySrcLoc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vKp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7vKq; else goto c7vKr;
       c7vKq: // global
           R2 = R2;
           R1 = GHC.Exception.prettySrcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vKr: // global
           I64[Sp - 8] = block_c7vKm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7vKv; else goto c7vKn;
       u7vKv: // global
           call _c7vKm(R1) args: 0, res: 0, upd: 0;
       c7vKn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vKm() //  [R1]
         { info_tbl: [(c7vKm,
                       label: block_c7vKm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vKm: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$wprettySrcLoc_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.36998821 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException7_bytes" {
     GHC.Exception.errorCallWithCallStackException7_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,72,97,115,67,97,108,108,83,116,97,99,107,41,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.372075924 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException6_closure" {
     GHC.Exception.errorCallWithCallStackException6_closure:
         const GHC.Exception.errorCallWithCallStackException6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException6_entry() //  [R1]
         { info_tbl: [(c7vKM,
                       label: GHC.Exception.errorCallWithCallStackException6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vKM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vKN; else goto c7vKO;
       c7vKN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vKO: // global
           (_c7vKJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vKJ::I64 == 0) goto c7vKL; else goto c7vKK;
       c7vKL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vKK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vKJ::I64;
           R2 = GHC.Exception.errorCallWithCallStackException7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.376502877 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException4_bytes" {
     GHC.Exception.errorCallWithCallStackException4_bytes:
         I8[] [44,32,99,97,108,108,101,100,32,97,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.37980477 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException1_closure" {
     GHC.Exception.errorCallWithCallStackException1_closure:
         const GHC.Exception.errorCallWithCallStackException1_info;
 },
 sat_s7teI_entry() //  [R1]
         { info_tbl: [(c7vLl,
                       label: sat_s7teI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vLl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vLm; else goto c7vLn;
       c7vLm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vLn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7vLi_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7vLr; else goto c7vLj;
       u7vLr: // global
           call _c7vLi(R1) args: 0, res: 0, upd: 0;
       c7vLj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7vLi() //  [R1]
         { info_tbl: [(c7vLi,
                       label: block_c7vLi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vLi: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$wprettySrcLoc_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7teJ_entry() //  [R1]
         { info_tbl: [(c7vLs,
                       label: sat_s7teJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vLs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vLw; else goto c7vLv;
       c7vLw: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vLv: // global
           _s7tez::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s7teI_info;
           P64[Hp] = _s7tez::P64;
           R3 = Hp - 16;
           R2 = GHC.Exception.errorCallWithCallStackException4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7teK_entry() //  [R1]
         { info_tbl: [(c7vLx,
                       label: sat_s7teK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vLx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vLy; else goto c7vLz;
       c7vLy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vLz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7vL5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7vLD; else goto c7vL6;
       u7vLD: // global
           call _c7vL5(R1) args: 0, res: 0, upd: 0;
       c7vL6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7vL5() //  [R1]
         { info_tbl: [(c7vL5,
                       label: block_c7vL5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vL5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vLC; else goto c7vLB;
       c7vLC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7vLB: // global
           _s7tey::P64 = P64[R1 + 7];
           _s7tez::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s7teJ_info;
           P64[Hp] = _s7tez::P64;
           R3 = Hp - 16;
           R2 = _s7tey::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.errorCallWithCallStackException1_entry() //  [R2]
         { info_tbl: [(c7vLE,
                       label: GHC.Exception.errorCallWithCallStackException1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vLE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vLI; else goto c7vLH;
       c7vLI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.errorCallWithCallStackException1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vLH: // global
           I64[Hp - 16] = sat_s7teK_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Exception.errorCallWithCallStackException5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.394973839 UTC

[section ""data" . GHC.Exception.prettyCallStackLines_closure" {
     GHC.Exception.prettyCallStackLines_closure:
         const GHC.Exception.prettyCallStackLines_info;
         const 0;
 },
 sat_s7teP_entry() //  [R1]
         { info_tbl: [(c7vMj,
                       label: sat_s7teP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vMj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vMk; else goto c7vMl;
       c7vMk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vMl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException1_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.prettyCallStackLines_entry() //  [R2]
         { info_tbl: [(c7vMq,
                       label: GHC.Exception.prettyCallStackLines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vMq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7vMr; else goto c7vMs;
       c7vMr: // global
           R2 = R2;
           R1 = GHC.Exception.prettyCallStackLines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vMs: // global
           I64[Sp - 8] = block_c7vMa_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vMa() //  [R1]
         { info_tbl: [(c7vMa,
                       label: block_c7vMa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vMa: // global
           if (R1 & 7 == 1) goto c7vMn; else goto c7vMo;
       c7vMn: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7vMo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vMy; else goto c7vMx;
       c7vMy: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7vMx: // global
           I64[Hp - 40] = sat_s7teP_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.403510742 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException8_bytes" {
     GHC.Exception.errorCallWithCallStackException8_bytes:
         I8[] [10]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.405556043 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException_xs_closure" {
     GHC.Exception.errorCallWithCallStackException_xs_closure:
         const GHC.Exception.errorCallWithCallStackException_xs_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException_xs_entry() //  [R1]
         { info_tbl: [(c7vMX,
                       label: GHC.Exception.errorCallWithCallStackException_xs_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vMX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vMY; else goto c7vMZ;
       c7vMY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vMZ: // global
           (_c7vMU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vMU::I64 == 0) goto c7vMW; else goto c7vMV;
       c7vMW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vMV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vMU::I64;
           R2 = GHC.Exception.errorCallWithCallStackException8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.410512322 UTC

[section ""data" . GHC.Exception.prettyCallStack_closure" {
     GHC.Exception.prettyCallStack_closure:
         const GHC.Exception.prettyCallStack_info;
         const 0;
 },
 sat_s7teV_entry() //  [R1]
         { info_tbl: [(c7vNm,
                       label: sat_s7teV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vNm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vNn; else goto c7vNo;
       c7vNn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vNo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7vNk_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException1_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7vNk() //  [R1]
         { info_tbl: [(c7vNk,
                       label: block_c7vNk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vNk: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.prettyCallStack_entry() //  [R2]
         { info_tbl: [(c7vNw,
                       label: GHC.Exception.prettyCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vNw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7vNx; else goto c7vNy;
       c7vNx: // global
           R2 = R2;
           R1 = GHC.Exception.prettyCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vNy: // global
           I64[Sp - 8] = block_c7vNb_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vNb() //  [R1]
         { info_tbl: [(c7vNb,
                       label: block_c7vNb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vNb: // global
           if (R1 & 7 == 1) goto c7vNt; else goto c7vNu;
       c7vNt: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7vNu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vNE; else goto c7vND;
       c7vNE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7vND: // global
           I64[Hp - 40] = sat_s7teV_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.422803275 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException_closure" {
     GHC.Exception.errorCallWithCallStackException_closure:
         const GHC.Exception.errorCallWithCallStackException_info;
         const 0;
 },
 sat_s7tf7_entry() //  [R1]
         { info_tbl: [(c7vOs,
                       label: sat_s7tf7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vOs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vOt; else goto c7vOu;
       c7vOt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vOu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7vOq_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7vOq() //  [R1]
         { info_tbl: [(c7vOq,
                       label: block_c7vOq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vOq: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 n_s7tf2_entry() //  [R1]
         { info_tbl: [(c7vOC,
                       label: n_s7tf2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vOC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vOD; else goto c7vOE;
       c7vOD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vOE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7vOg_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7vOL; else goto c7vOh;
       u7vOL: // global
           call _c7vOg(R1) args: 0, res: 0, upd: 0;
       c7vOh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7vOg() //  [R1]
         { info_tbl: [(c7vOg,
                       label: block_c7vOg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vOg: // global
           if (R1 & 7 == 1) goto c7vOz; else goto c7vOA;
       c7vOz: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7vOA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vOK; else goto c7vOJ;
       c7vOK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7vOJ: // global
           I64[Hp - 40] = sat_s7tf7_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfc_entry() //  [R1]
         { info_tbl: [(c7vP0,
                       label: sat_s7tfc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vP0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vP1; else goto c7vP2;
       c7vP1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vP2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfl_entry() //  [R1]
         { info_tbl: [(c7vPp,
                       label: sat_s7tfl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vPp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vPq; else goto c7vPr;
       c7vPq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vPr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Exception.errorCallWithCallStackException1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 go_s7tfg_entry() //  [R1, R2]
         { info_tbl: [(c7vPw,
                       label: go_s7tfg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vPw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vPx; else goto c7vPy;
       c7vPx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vPy: // global
           I64[Sp - 24] = block_c7vPe_info;
           _s7tfg::P64 = R1;
           _s7tf2::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s7tf2::P64;
           P64[Sp - 8] = _s7tfg::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7vPF; else goto c7vPf;
       u7vPF: // global
           call _c7vPe(R1) args: 0, res: 0, upd: 0;
       c7vPf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vPe() //  [R1]
         { info_tbl: [(c7vPe,
                       label: block_c7vPe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vPe: // global
           if (R1 & 7 == 1) goto c7vPt; else goto c7vPu;
       c7vPt: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7vPu: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c7vPE; else goto c7vPD;
       c7vPE: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7vPD: // global
           _s7tfj::P64 = P64[R1 + 6];
           _s7tfk::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _s7tfk::P64;
           I64[Hp - 40] = sat_s7tfl_info;
           P64[Hp - 24] = _s7tfj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7tfo_entry() //  [R1]
         { info_tbl: [(c7vPI,
                       label: sat_s7tfo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vPI: // global
           _s7tfo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c7vPJ; else goto c7vPK;
       c7vPK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7vPM; else goto c7vPL;
       c7vPM: // global
           HpAlloc = 16;
           goto c7vPJ;
       c7vPJ: // global
           R1 = _s7tfo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vPL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfo::P64;
           _s7tf2::P64 = P64[_s7tfo::P64 + 16];
           _s7tf8::P64 = P64[_s7tfo::P64 + 24];
           I64[Hp - 8] = go_s7tfg_info;
           P64[Hp] = _s7tf2::P64;
           I64[Sp - 24] = block_c7vPG_info;
           R2 = _s7tf8::P64;
           R1 = Hp - 7;
           Sp = Sp - 24;
           call go_s7tfg_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7vPG() //  [R1]
         { info_tbl: [(c7vPG,
                       label: block_c7vPG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vPG: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfq_entry() //  [R1]
         { info_tbl: [(c7vPU,
                       label: sat_s7tfq_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vPU: // global
           _s7tfq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c7vPV; else goto c7vPW;
       c7vPW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vPY; else goto c7vPX;
       c7vPY: // global
           HpAlloc = 24;
           goto c7vPV;
       c7vPV: // global
           R1 = _s7tfq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vPX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfq::P64;
           _s7teY::P64 = P64[_s7tfq::P64 + 16];
           _s7tf1::P64 = P64[_s7tfq::P64 + 24];
           I64[Hp - 16] = n_s7tf2_info;
           P64[Hp] = _s7tf1::P64;
           I64[Sp - 32] = block_c7vOM_info;
           R2 = _s7teY::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7vOM() //  [R1]
         { info_tbl: [(c7vOM,
                       label: block_c7vOM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vOM: // global
           _c7vOc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7vPR; else goto c7vPS;
       c7vPR: // global
           I64[Sp + 8] = block_c7vOQ_info;
           R1 = _c7vOc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7vQe; else goto c7vOR;
       u7vQe: // global
           call _c7vOQ(R1) args: 0, res: 0, upd: 0;
       c7vOR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c7vPS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7vQc; else goto c7vQb;
       c7vQc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7vQb: // global
           I64[Hp - 48] = sat_s7tfo_info;
           P64[Hp - 32] = _c7vOc::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 _c7vOQ() //  [R1]
         { info_tbl: [(c7vOQ,
                       label: block_c7vOQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vOQ: // global
           if (R1 & 7 == 1) goto c7vQ3; else goto c7vQ5;
       c7vQ3: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7vQ5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vQ8; else goto c7vQ7;
       c7vQ8: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7vQ7: // global
           _s7tfa::P64 = P64[R1 + 6];
           _s7tfb::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s7tfc_info;
           P64[Hp - 24] = _s7tfb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s7tfa::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7tfs_entry() //  [R1]
         { info_tbl: [(c7vQg,
                       label: sat_s7tfs_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vQg: // global
           _s7tfs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7vQh; else goto c7vQi;
       c7vQi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7vQk; else goto c7vQj;
       c7vQk: // global
           HpAlloc = 56;
           goto c7vQh;
       c7vQh: // global
           R1 = _s7tfs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vQj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7tfs::P64;
           _s7teX::P64 = P64[_s7tfs::P64 + 16];
           _s7teY::P64 = P64[_s7tfs::P64 + 24];
           _s7tf1::P64 = P64[_s7tfs::P64 + 32];
           I64[Hp - 48] = sat_s7tfq_info;
           P64[Hp - 32] = _s7teY::P64;
           P64[Hp - 24] = _s7tf1::P64;
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = _s7teX::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.errorCallWithCallStackException_entry() //  [R2, R3]
         { info_tbl: [(c7vQo,
                       label: GHC.Exception.errorCallWithCallStackException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vQo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7vQp; else goto c7vQq;
       c7vQp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vQq: // global
           I64[Sp - 24] = block_c7vO2_info;
           R1 = GHC.Stack.CCS.currentCallStack_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vO2() //  [R1]
         { info_tbl: [(c7vO2,
                       label: block_c7vO2_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vO2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7vQt; else goto c7vQs;
       c7vQt: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7vQs: // global
           I64[Hp - 32] = sat_s7tfs_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = (Hp + -32) & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.460599554 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cfromException_closure" {
     GHC.Exception.$fExceptionArithException_$cfromException_closure:
         const GHC.Exception.$fExceptionArithException_$cfromException_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cfromException_entry() //  [R2]
         { info_tbl: [(c7vS1,
                       label: GHC.Exception.$fExceptionArithException_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vS1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vS5; else goto c7vS6;
       c7vS5: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionArithException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vS6: // global
           I64[Sp - 8] = block_c7vRY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7vSr; else goto c7vRZ;
       u7vSr: // global
           call _c7vRY(R1) args: 0, res: 0, upd: 0;
       c7vRZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7vRY() //  [R1]
         { info_tbl: [(c7vRY,
                       label: block_c7vRY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vRY: // global
           I64[Sp - 8] = block_c7vS4_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vS4() //  [R1]
         { info_tbl: [(c7vS4,
                       label: block_c7vS4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vS4: // global
           I64[Sp] = block_c7vSb_info;
           R3 = GHC.Exception.$fExceptionArithException14_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7vSb() //  [R1]
         { info_tbl: [(c7vSb,
                       label: block_c7vSb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vSb: // global
           if (R1 & 7 == 1) goto c7vSi; else goto c7vSm;
       c7vSi: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7vSm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7vSp; else goto c7vSo;
       c7vSp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7vSo: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.470238924 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_closure" {
     GHC.Exception.$fExceptionArithException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionArithException14_closure;
         const GHC.Exception.$fShowArithException_closure+1;
         const GHC.Exception.$fExceptionArithException_$ctoException_closure+1;
         const GHC.Exception.$fExceptionArithException_$cfromException_closure+1;
         const GHC.Exception.$fExceptionArithException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.Exception.$fExceptionArithException_$ctoException_closure" {
     GHC.Exception.$fExceptionArithException_$ctoException_closure:
         const GHC.Exception.$fExceptionArithException_$ctoException_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$ctoException_entry() //  [R2]
         { info_tbl: [(c7vSS,
                       label: GHC.Exception.$fExceptionArithException_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vSS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vSW; else goto c7vSV;
       c7vSW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionArithException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7vSV: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionArithException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.475886856 UTC

[section ""data" . GHC.Exception.underflowException_closure" {
     GHC.Exception.underflowException_closure:
         const GHC.Exception.underflowException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.underflowException_entry() //  [R1]
         { info_tbl: [(c7vT9,
                       label: GHC.Exception.underflowException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vTa; else goto c7vTb;
       c7vTa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vTb: // global
           (_c7vT6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vT6::I64 == 0) goto c7vT8; else goto c7vT7;
       c7vT8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vT7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vT6::I64;
           R2 = GHC.Exception.Underflow_closure+2;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.480815865 UTC

[section ""data" . GHC.Exception.ratioZeroDenomException_closure" {
     GHC.Exception.ratioZeroDenomException_closure:
         const GHC.Exception.ratioZeroDenomException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.ratioZeroDenomException_entry() //  [R1]
         { info_tbl: [(c7vTp,
                       label: GHC.Exception.ratioZeroDenomException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vTp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vTq; else goto c7vTr;
       c7vTq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vTr: // global
           (_c7vTm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vTm::I64 == 0) goto c7vTo; else goto c7vTn;
       c7vTo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vTn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vTm::I64;
           R2 = GHC.Exception.RatioZeroDenominator_closure+6;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.485340415 UTC

[section ""data" . GHC.Exception.overflowException_closure" {
     GHC.Exception.overflowException_closure:
         const GHC.Exception.overflowException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.overflowException_entry() //  [R1]
         { info_tbl: [(c7vTF,
                       label: GHC.Exception.overflowException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vTF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vTG; else goto c7vTH;
       c7vTG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vTH: // global
           (_c7vTC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vTC::I64 == 0) goto c7vTE; else goto c7vTD;
       c7vTE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vTD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vTC::I64;
           R2 = GHC.Exception.Overflow_closure+1;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.489777871 UTC

[section ""data" . GHC.Exception.divZeroException_closure" {
     GHC.Exception.divZeroException_closure:
         const GHC.Exception.divZeroException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.divZeroException_entry() //  [R1]
         { info_tbl: [(c7vTV,
                       label: GHC.Exception.divZeroException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vTV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7vTW; else goto c7vTX;
       c7vTW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7vTX: // global
           (_c7vTS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7vTS::I64 == 0) goto c7vTU; else goto c7vTT;
       c7vTU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7vTT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7vTS::I64;
           R2 = GHC.Exception.DivideByZero_closure+4;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.494241071 UTC

[section ""data" . GHC.Exception.SomeException_closure" {
     GHC.Exception.SomeException_closure:
         const GHC.Exception.SomeException_info;
 },
 GHC.Exception.SomeException_entry() //  [R2, R3]
         { info_tbl: [(c7vUa,
                       label: GHC.Exception.SomeException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vUa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vUe; else goto c7vUd;
       c7vUe: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.SomeException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vUd: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.49855341 UTC

[section ""data" . GHC.Exception.Overflow_closure" {
     GHC.Exception.Overflow_closure:
         const GHC.Exception.Overflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.500191576 UTC

[section ""data" . GHC.Exception.Underflow_closure" {
     GHC.Exception.Underflow_closure:
         const GHC.Exception.Underflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.501833399 UTC

[section ""data" . GHC.Exception.LossOfPrecision_closure" {
     GHC.Exception.LossOfPrecision_closure:
         const GHC.Exception.LossOfPrecision_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.503485188 UTC

[section ""data" . GHC.Exception.DivideByZero_closure" {
     GHC.Exception.DivideByZero_closure:
         const GHC.Exception.DivideByZero_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.505147525 UTC

[section ""data" . GHC.Exception.Denormal_closure" {
     GHC.Exception.Denormal_closure:
         const GHC.Exception.Denormal_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.507511398 UTC

[section ""data" . GHC.Exception.RatioZeroDenominator_closure" {
     GHC.Exception.RatioZeroDenominator_closure:
         const GHC.Exception.RatioZeroDenominator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.509735359 UTC

[section ""data" . GHC.Exception.ErrorCallWithLocation_closure" {
     GHC.Exception.ErrorCallWithLocation_closure:
         const GHC.Exception.ErrorCallWithLocation_info;
 },
 GHC.Exception.ErrorCallWithLocation_entry() //  [R2, R3]
         { info_tbl: [(c7vUv,
                       label: GHC.Exception.ErrorCallWithLocation_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vUv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7vUz; else goto c7vUy;
       c7vUz: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.ErrorCallWithLocation_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vUy: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.513924314 UTC

[section ""data" . GHC.Exception.C:Exception_closure" {
     GHC.Exception.C:Exception_closure:
         const GHC.Exception.C:Exception_info;
 },
 GHC.Exception.C:Exception_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7vUK,
                       label: GHC.Exception.C:Exception_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vUK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7vUO; else goto c7vUN;
       c7vUO: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.C:Exception_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7vUN: // global
           I64[Hp - 40] = GHC.Exception.C:Exception_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.517850134 UTC

[GHC.Exception.SomeException_con_entry() //  [R1]
         { info_tbl: [(c7vUU,
                       label: GHC.Exception.SomeException_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,83,111,109,101,69,120,99,101,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vUU: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.521164389 UTC

[section ""relreadonly" . GHC.Exception.ArithException_closure_tbl" {
     GHC.Exception.ArithException_closure_tbl:
         const GHC.Exception.Overflow_closure+1;
         const GHC.Exception.Underflow_closure+2;
         const GHC.Exception.LossOfPrecision_closure+3;
         const GHC.Exception.DivideByZero_closure+4;
         const GHC.Exception.Denormal_closure+5;
         const GHC.Exception.RatioZeroDenominator_closure+6;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.523194091 UTC

[GHC.Exception.Overflow_con_entry() //  [R1]
         { info_tbl: [(c7vV1,
                       label: GHC.Exception.Overflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,79,118,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vV1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.526625091 UTC

[GHC.Exception.Underflow_con_entry() //  [R1]
         { info_tbl: [(c7vV7,
                       label: GHC.Exception.Underflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vV7: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.530614626 UTC

[GHC.Exception.LossOfPrecision_con_entry() //  [R1]
         { info_tbl: [(c7vVd,
                       label: GHC.Exception.LossOfPrecision_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,76,111,115,115,79,102,80,114,101,99,105,115,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vVd: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.534052244 UTC

[GHC.Exception.DivideByZero_con_entry() //  [R1]
         { info_tbl: [(c7vVj,
                       label: GHC.Exception.DivideByZero_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,68,105,118,105,100,101,66,121,90,101,114,111]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vVj: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.538269556 UTC

[GHC.Exception.Denormal_con_entry() //  [R1]
         { info_tbl: [(c7vVp,
                       label: GHC.Exception.Denormal_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,68,101,110,111,114,109,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vVp: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.542005158 UTC

[GHC.Exception.RatioZeroDenominator_con_entry() //  [R1]
         { info_tbl: [(c7vVv,
                       label: GHC.Exception.RatioZeroDenominator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,82,97,116,105,111,90,101,114,111,68,101,110,111,109,105,110,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vVv: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.545816349 UTC

[GHC.Exception.ErrorCallWithLocation_con_entry() //  [R1]
         { info_tbl: [(c7vVB,
                       label: GHC.Exception.ErrorCallWithLocation_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,69,114,114,111,114,67,97,108,108,87,105,116,104,76,111,99,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vVB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.549303548 UTC

[GHC.Exception.C:Exception_con_entry() //  [R1]
         { info_tbl: [(c7vVH,
                       label: GHC.Exception.C:Exception_con_info
                       rep:HeapRep 5 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,67,58,69,120,99,101,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7vVH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:43.552609231 UTC

[section ""relreadonly" . S7tkS_srt" {
     S7tkS_srt:
         const GHC.Exception.$w$cshowsPrec_closure;
         const GHC.Exception.$fExceptionArithException2_closure;
         const GHC.Exception.$fExceptionArithException4_closure;
         const GHC.Exception.$fExceptionArithException6_closure;
         const GHC.Exception.$fExceptionArithException8_closure;
         const GHC.Exception.$fExceptionArithException10_closure;
         const GHC.Exception.$fExceptionArithException12_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.Exception.$dmfromException_closure;
         const GHC.Exception.errorCallWithCallStackException10_closure;
         const GHC.Exception.errorCallWithCallStackException9_closure;
         const GHC.Exception.showCCSStack_closure;
         const GHC.Exception.errorCallWithCallStackException11_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.Exception.$fExceptionErrorCall_$cfromException_closure;
         const GHC.Exception.$fExceptionErrorCall2_closure;
         const GHC.Exception.$fExceptionErrorCall_closure;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
         const GHC.Exception.errorCallException_closure;
         const GHC.Exception.prettyCallStackLines_closure;
         const GHC.Exception.errorCallWithCallStackException6_closure;
         const GHC.Exception.errorCallWithCallStackException_xs_closure;
         const GHC.Exception.prettyCallStack_closure;
         const GHC.Exception.errorCallWithCallStackException_closure;
         const GHC.Stack.CCS.currentCallStack_closure;
         const GHC.Exception.$fExceptionArithException_$cfromException_closure;
         const GHC.Exception.$fExceptionArithException14_closure;
         const GHC.Exception.$fExceptionArithException_closure;
         const GHC.Exception.$fExceptionArithException_$ctoException_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.067010851 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:46.068427428 UTC

[section ""data" . GHC.Exception.$p1Exception_closure" {
     GHC.Exception.$p1Exception_closure:
         const GHC.Exception.$p1Exception_info;
 },
 GHC.Exception.$p1Exception_entry() //  [R2]
         { info_tbl: [(c7w2D,
                       label: GHC.Exception.$p1Exception_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w2D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7w2E; else goto c7w2F;
       c7w2E: // global
           R2 = R2;
           R1 = GHC.Exception.$p1Exception_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w2F: // global
           I64[Sp - 8] = block_c7w2A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w2J; else goto c7w2B;
       u7w2J: // global
           call _c7w2A(R1) args: 0, res: 0, upd: 0;
       c7w2B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w2A() //  [R1]
         { info_tbl: [(c7w2A,
                       label: block_c7w2A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w2A: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.073859739 UTC

[section ""data" . GHC.Exception.$p2Exception_closure" {
     GHC.Exception.$p2Exception_closure:
         const GHC.Exception.$p2Exception_info;
 },
 GHC.Exception.$p2Exception_entry() //  [R2]
         { info_tbl: [(c7w33,
                       label: GHC.Exception.$p2Exception_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w33: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7w34; else goto c7w35;
       c7w34: // global
           R2 = R2;
           R1 = GHC.Exception.$p2Exception_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w35: // global
           I64[Sp - 8] = block_c7w30_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w39; else goto c7w31;
       u7w39: // global
           call _c7w30(R1) args: 0, res: 0, upd: 0;
       c7w31: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w30() //  [R1]
         { info_tbl: [(c7w30,
                       label: block_c7w30_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w30: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.079188818 UTC

[section ""data" . GHC.Exception.toException_closure" {
     GHC.Exception.toException_closure:
         const GHC.Exception.toException_info;
 },
 GHC.Exception.toException_entry() //  [R2]
         { info_tbl: [(c7w3t,
                       label: GHC.Exception.toException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w3t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7w3u; else goto c7w3v;
       c7w3u: // global
           R2 = R2;
           R1 = GHC.Exception.toException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w3v: // global
           I64[Sp - 8] = block_c7w3q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w3z; else goto c7w3r;
       u7w3z: // global
           call _c7w3q(R1) args: 0, res: 0, upd: 0;
       c7w3r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w3q() //  [R1]
         { info_tbl: [(c7w3q,
                       label: block_c7w3q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w3q: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.084455484 UTC

[section ""data" . GHC.Exception.fromException_closure" {
     GHC.Exception.fromException_closure:
         const GHC.Exception.fromException_info;
 },
 GHC.Exception.fromException_entry() //  [R2]
         { info_tbl: [(c7w3R,
                       label: GHC.Exception.fromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w3R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7w3S; else goto c7w3T;
       c7w3S: // global
           R2 = R2;
           R1 = GHC.Exception.fromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w3T: // global
           I64[Sp - 8] = block_c7w3O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w3X; else goto c7w3P;
       u7w3X: // global
           call _c7w3O(R1) args: 0, res: 0, upd: 0;
       c7w3P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w3O() //  [R1]
         { info_tbl: [(c7w3O,
                       label: block_c7w3O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w3O: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.089985518 UTC

[section ""data" . GHC.Exception.displayException_closure" {
     GHC.Exception.displayException_closure:
         const GHC.Exception.displayException_info;
 },
 GHC.Exception.displayException_entry() //  [R2]
         { info_tbl: [(c7w4f,
                       label: GHC.Exception.displayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w4f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7w4g; else goto c7w4h;
       c7w4g: // global
           R2 = R2;
           R1 = GHC.Exception.displayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w4h: // global
           I64[Sp - 8] = block_c7w4c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w4l; else goto c7w4d;
       u7w4l: // global
           call _c7w4c(R1) args: 0, res: 0, upd: 0;
       c7w4d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w4c() //  [R1]
         { info_tbl: [(c7w4c,
                       label: block_c7w4c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w4c: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.09547796 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshowsPrec_closure" {
     GHC.Exception.$fShowSomeException_$cshowsPrec_closure:
         const GHC.Exception.$fShowSomeException_$cshowsPrec_info;
 },
 GHC.Exception.$fShowSomeException_$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7w4D,
                       label: GHC.Exception.$fShowSomeException_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w4D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7w4H; else goto c7w4I;
       c7w4H: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7w4I: // global
           I64[Sp - 16] = block_c7w4A_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7w4O; else goto c7w4B;
       u7w4O: // global
           call _c7w4A(R1) args: 0, res: 0, upd: 0;
       c7w4B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w4A() //  [R1]
         { info_tbl: [(c7w4A,
                       label: block_c7w4A_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w4A: // global
           I64[Sp - 8] = block_c7w4G_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7w4G() //  [R1]
         { info_tbl: [(c7w4G,
                       label: block_c7w4G_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w4G: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _s7vWr::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s7vWr::P64;
           call GHC.Show.showsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.104800461 UTC

[section ""data" . GHC.Exception.$fExceptionArithException1_closure" {
     GHC.Exception.$fExceptionArithException1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.106924791 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshow_closure" {
     GHC.Exception.$fShowSomeException_$cshow_closure:
         const GHC.Exception.$fShowSomeException_$cshow_info;
 },
 GHC.Exception.$fShowSomeException_$cshow_entry() //  [R2]
         { info_tbl: [(c7w5e,
                       label: GHC.Exception.$fShowSomeException_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w5e: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7w5i; else goto c7w5j;
       c7w5i: // global
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w5j: // global
           I64[Sp - 8] = block_c7w5b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w5p; else goto c7w5c;
       u7w5p: // global
           call _c7w5b(R1) args: 0, res: 0, upd: 0;
       c7w5c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w5b() //  [R1]
         { info_tbl: [(c7w5b,
                       label: block_c7w5b_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w5b: // global
           I64[Sp - 8] = block_c7w5h_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7w5h() //  [R1]
         { info_tbl: [(c7w5h,
                       label: block_c7w5h_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w5h: // global
           R2 = R1;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = GHC.Exception.$fExceptionArithException1_closure+1;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.114264004 UTC

[section ""data" . GHC.Exception.$fShowSomeException1_closure" {
     GHC.Exception.$fShowSomeException1_closure:
         const GHC.Exception.$fShowSomeException1_info;
 },
 GHC.Exception.$fShowSomeException1_entry() //  [R2]
         { info_tbl: [(c7w5R,
                       label: GHC.Exception.$fShowSomeException1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w5R: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7w5V; else goto c7w5W;
       c7w5V: // global
           R2 = R2;
           R1 = GHC.Exception.$fShowSomeException1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w5W: // global
           I64[Sp - 8] = block_c7w5O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w62; else goto c7w5P;
       u7w62: // global
           call _c7w5O(R1) args: 0, res: 0, upd: 0;
       c7w5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w5O() //  [R1]
         { info_tbl: [(c7w5O,
                       label: block_c7w5O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w5O: // global
           I64[Sp - 8] = block_c7w5U_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7w5U() //  [R1]
         { info_tbl: [(c7w5U,
                       label: block_c7w5U_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w5U: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Exception.$fExceptionArithException1_closure+1;
           Sp = Sp - 8;
           call GHC.Show.showsPrec_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.12093399 UTC

[section ""data" . GHC.Exception.$fShowSomeException_$cshowList_closure" {
     GHC.Exception.$fShowSomeException_$cshowList_closure:
         const GHC.Exception.$fShowSomeException_$cshowList_info;
 },
 GHC.Exception.$fShowSomeException_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7w6o,
                       label: GHC.Exception.$fShowSomeException_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w6o: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$fShowSomeException1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.124537282 UTC

[section ""data" . GHC.Exception.$fShowSomeException_closure" {
     GHC.Exception.$fShowSomeException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fShowSomeException_$cshowsPrec_closure+2;
         const GHC.Exception.$fShowSomeException_$cshow_closure+1;
         const GHC.Exception.$fShowSomeException_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.126552807 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_$cdisplayException_closure" {
     GHC.Exception.$fExceptionSomeException_$cdisplayException_closure:
         const GHC.Exception.$fExceptionSomeException_$cdisplayException_info;
 },
 GHC.Exception.$fExceptionSomeException_$cdisplayException_entry() //  [R2]
         { info_tbl: [(c7w6D,
                       label: GHC.Exception.$fExceptionSomeException_$cdisplayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w6D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7w6E; else goto c7w6F;
       c7w6E: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionSomeException_$cdisplayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w6F: // global
           I64[Sp - 8] = block_c7w6A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w6J; else goto c7w6B;
       u7w6J: // global
           call _c7w6A(R1) args: 0, res: 0, upd: 0;
       c7w6B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w6A() //  [R1]
         { info_tbl: [(c7w6A,
                       label: block_c7w6A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w6A: // global
           R2 = P64[R1 + 7];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.displayException_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.131768082 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_$ctoException_closure" {
     GHC.Exception.$fExceptionSomeException_$ctoException_closure:
         const GHC.Exception.$fExceptionSomeException_$ctoException_info;
 },
 GHC.Exception.$fExceptionSomeException_$ctoException_entry() //  [R2]
         { info_tbl: [(c7w70,
                       label: GHC.Exception.$fExceptionSomeException_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w70: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.135759616 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall1_closure" {
     GHC.Exception.$fExceptionErrorCall1_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.13795003 UTC

[section ""data" . GHC.Exception.$w$cshowsPrec1_closure" {
     GHC.Exception.$w$cshowsPrec1_closure:
         const GHC.Exception.$w$cshowsPrec1_info;
 },
 sat_s7vWQ_entry() //  [R1]
         { info_tbl: [(c7w7o,
                       label: sat_s7vWQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w7o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7w7p; else goto c7w7q;
       c7w7p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7w7q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.$w$cshowsPrec1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7w7v,
                       label: GHC.Exception.$w$cshowsPrec1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w7v: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7w7w; else goto c7w7x;
       c7w7w: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7w7x: // global
           I64[Sp - 24] = block_c7w7e_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7w7E; else goto c7w7f;
       u7w7E: // global
           call _c7w7e(R1) args: 0, res: 0, upd: 0;
       c7w7f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w7e() //  [R1]
         { info_tbl: [(c7w7e,
                       label: block_c7w7e_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w7e: // global
           _s7vWK::P64 = P64[Sp + 8];
           _s7vWM::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7w7s; else goto c7w7t;
       c7w7s: // global
           R3 = _s7vWM::P64;
           R2 = _s7vWK::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7w7t: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7w7D; else goto c7w7C;
       c7w7D: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7w7C: // global
           I64[Hp - 48] = sat_s7vWQ_info;
           P64[Hp - 32] = _s7vWM::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionErrorCall1_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _s7vWK::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.145842986 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure" {
     GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure:
         const GHC.Exception.$fExceptionErrorCall_$cshowsPrec_info;
 },
 GHC.Exception.$fExceptionErrorCall_$cshowsPrec_entry() //  [R2, R3,
                                                             R4]
         { info_tbl: [(c7w87,
                       label: GHC.Exception.$fExceptionErrorCall_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w87: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7w88; else goto c7w89;
       c7w88: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7w89: // global
           I64[Sp - 16] = block_c7w84_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7w8d; else goto c7w85;
       u7w8d: // global
           call _c7w84(R1) args: 0, res: 0, upd: 0;
       c7w85: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w84() //  [R1]
         { info_tbl: [(c7w84,
                       label: block_c7w84_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w84: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.15150204 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cshow_closure" {
     GHC.Exception.$fExceptionErrorCall_$cshow_closure:
         const GHC.Exception.$fExceptionErrorCall_$cshow_info;
 },
 GHC.Exception.$fExceptionErrorCall_$cshow_entry() //  [R2]
         { info_tbl: [(c7w8v,
                       label: GHC.Exception.$fExceptionErrorCall_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w8v: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7w8w; else goto c7w8x;
       c7w8w: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7w8x: // global
           I64[Sp - 8] = block_c7w8s_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7w8B; else goto c7w8t;
       u7w8B: // global
           call _c7w8s(R1) args: 0, res: 0, upd: 0;
       c7w8t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w8s() //  [R1]
         { info_tbl: [(c7w8s,
                       label: block_c7w8s_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w8s: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.156775233 UTC

[section ""data" . GHC.Exception.$fShowErrorCall1_closure" {
     GHC.Exception.$fShowErrorCall1_closure:
         const GHC.Exception.$fShowErrorCall1_info;
 },
 GHC.Exception.$fShowErrorCall1_entry() //  [R2, R3]
         { info_tbl: [(c7w8U,
                       label: GHC.Exception.$fShowErrorCall1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w8U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7w8V; else goto c7w8W;
       c7w8V: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fShowErrorCall1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7w8W: // global
           I64[Sp - 16] = block_c7w8R_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7w90; else goto c7w8S;
       u7w90: // global
           call _c7w8R(R1) args: 0, res: 0, upd: 0;
       c7w8S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7w8R() //  [R1]
         { info_tbl: [(c7w8R,
                       label: block_c7w8R_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w8R: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Exception.$w$cshowsPrec1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.162451424 UTC

[section ""data" . GHC.Exception.$fShowErrorCall_$cshowList_closure" {
     GHC.Exception.$fShowErrorCall_$cshowList_closure:
         const GHC.Exception.$fShowErrorCall_$cshowList_info;
 },
 GHC.Exception.$fShowErrorCall_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7w9f,
                       label: GHC.Exception.$fShowErrorCall_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w9f: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$fShowErrorCall1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.165692258 UTC

[section ""data" . GHC.Exception.$fShowErrorCall_closure" {
     GHC.Exception.$fShowErrorCall_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fExceptionErrorCall_$cshowsPrec_closure+3;
         const GHC.Exception.$fExceptionErrorCall_$cshow_closure+1;
         const GHC.Exception.$fShowErrorCall_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.167832733 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException13_bytes" {
     GHC.Exception.$fExceptionArithException13_bytes:
         I8[] [97,114,105,116,104,109,101,116,105,99,32,111,118,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.169710132 UTC

[section ""data" . GHC.Exception.$fExceptionArithException12_closure" {
     GHC.Exception.$fExceptionArithException12_closure:
         const GHC.Exception.$fExceptionArithException12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException12_entry() //  [R1]
         { info_tbl: [(c7w9u,
                       label: GHC.Exception.$fExceptionArithException12_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w9u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7w9v; else goto c7w9w;
       c7w9v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7w9w: // global
           (_c7w9r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7w9r::I64 == 0) goto c7w9t; else goto c7w9s;
       c7w9t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7w9s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7w9r::I64;
           R2 = GHC.Exception.$fExceptionArithException13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.173873244 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException11_bytes" {
     GHC.Exception.$fExceptionArithException11_bytes:
         I8[] [97,114,105,116,104,109,101,116,105,99,32,117,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.175682838 UTC

[section ""data" . GHC.Exception.$fExceptionArithException10_closure" {
     GHC.Exception.$fExceptionArithException10_closure:
         const GHC.Exception.$fExceptionArithException10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException10_entry() //  [R1]
         { info_tbl: [(c7w9M,
                       label: GHC.Exception.$fExceptionArithException10_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7w9M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7w9N; else goto c7w9O;
       c7w9N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7w9O: // global
           (_c7w9J::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7w9J::I64 == 0) goto c7w9L; else goto c7w9K;
       c7w9L: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7w9K: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7w9J::I64;
           R2 = GHC.Exception.$fExceptionArithException11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.179531491 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException9_bytes" {
     GHC.Exception.$fExceptionArithException9_bytes:
         I8[] [108,111,115,115,32,111,102,32,112,114,101,99,105,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.181284669 UTC

[section ""data" . GHC.Exception.$fExceptionArithException8_closure" {
     GHC.Exception.$fExceptionArithException8_closure:
         const GHC.Exception.$fExceptionArithException8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException8_entry() //  [R1]
         { info_tbl: [(c7wa4,
                       label: GHC.Exception.$fExceptionArithException8_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wa4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wa5; else goto c7wa6;
       c7wa5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wa6: // global
           (_c7wa1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7wa1::I64 == 0) goto c7wa3; else goto c7wa2;
       c7wa3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7wa2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7wa1::I64;
           R2 = GHC.Exception.$fExceptionArithException9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.185071903 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException7_bytes" {
     GHC.Exception.$fExceptionArithException7_bytes:
         I8[] [100,105,118,105,100,101,32,98,121,32,122,101,114,111]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.1868979 UTC

[section ""data" . GHC.Exception.$fExceptionArithException6_closure" {
     GHC.Exception.$fExceptionArithException6_closure:
         const GHC.Exception.$fExceptionArithException6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException6_entry() //  [R1]
         { info_tbl: [(c7wam,
                       label: GHC.Exception.$fExceptionArithException6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wam: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wan; else goto c7wao;
       c7wan: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wao: // global
           (_c7waj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7waj::I64 == 0) goto c7wal; else goto c7wak;
       c7wal: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7wak: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7waj::I64;
           R2 = GHC.Exception.$fExceptionArithException7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.190950638 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException5_bytes" {
     GHC.Exception.$fExceptionArithException5_bytes:
         I8[] [100,101,110,111,114,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.192730553 UTC

[section ""data" . GHC.Exception.$fExceptionArithException4_closure" {
     GHC.Exception.$fExceptionArithException4_closure:
         const GHC.Exception.$fExceptionArithException4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException4_entry() //  [R1]
         { info_tbl: [(c7waE,
                       label: GHC.Exception.$fExceptionArithException4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7waE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7waF; else goto c7waG;
       c7waF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7waG: // global
           (_c7waB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7waB::I64 == 0) goto c7waD; else goto c7waC;
       c7waD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7waC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7waB::I64;
           R2 = GHC.Exception.$fExceptionArithException5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.196567469 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException3_bytes" {
     GHC.Exception.$fExceptionArithException3_bytes:
         I8[] [82,97,116,105,111,32,104,97,115,32,122,101,114,111,32,100,101,110,111,109,105,110,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.198952126 UTC

[section ""data" . GHC.Exception.$fExceptionArithException2_closure" {
     GHC.Exception.$fExceptionArithException2_closure:
         const GHC.Exception.$fExceptionArithException2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException2_entry() //  [R1]
         { info_tbl: [(c7waW,
                       label: GHC.Exception.$fExceptionArithException2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7waW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7waX; else goto c7waY;
       c7waX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7waY: // global
           (_c7waT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7waT::I64 == 0) goto c7waV; else goto c7waU;
       c7waV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7waU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7waT::I64;
           R2 = GHC.Exception.$fExceptionArithException3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.203115064 UTC

[section ""data" . GHC.Exception.$w$cshowsPrec_closure" {
     GHC.Exception.$w$cshowsPrec_closure:
         const GHC.Exception.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Exception.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c7wbm,
                       label: GHC.Exception.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wbm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wbn; else goto c7wbo;
       c7wbn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wbo: // global
           I64[Sp - 16] = block_c7wbb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wbH; else goto c7wbc;
       u7wbH: // global
           call _c7wbb(R1) args: 0, res: 0, upd: 0;
       c7wbc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wbb() //  [R1]
         { info_tbl: [(c7wbb,
                       label: block_c7wbb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wbb: // global
           _s7vXa::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wbf;
               case 2 : goto c7wbg;
               case 3 : goto c7wbh;
               case 4 : goto c7wbi;
               case 5 : goto c7wbj;
               case 6 : goto c7wbk;
           }
       c7wbk: // global
           R3 = _s7vXa::P64;
           R2 = GHC.Exception.$fExceptionArithException2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7wbj: // global
           R3 = _s7vXa::P64;
           R2 = GHC.Exception.$fExceptionArithException4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7wbi: // global
           R3 = _s7vXa::P64;
           R2 = GHC.Exception.$fExceptionArithException6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7wbh: // global
           R3 = _s7vXa::P64;
           R2 = GHC.Exception.$fExceptionArithException8_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7wbg: // global
           R3 = _s7vXa::P64;
           R2 = GHC.Exception.$fExceptionArithException10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7wbf: // global
           R3 = _s7vXa::P64;
           R2 = GHC.Exception.$fExceptionArithException12_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.209617098 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cshowsPrec_closure" {
     GHC.Exception.$fExceptionArithException_$cshowsPrec_closure:
         const GHC.Exception.$fExceptionArithException_$cshowsPrec_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cshowsPrec_entry() //  [R3,
                                                                  R4]
         { info_tbl: [(c7wc2,
                       label: GHC.Exception.$fExceptionArithException_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wc2: // global
           _s7vXd::P64 = R3;
           R3 = R4;
           R2 = _s7vXd::P64;
           call GHC.Exception.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.212987129 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cshow_closure" {
     GHC.Exception.$fExceptionArithException_$cshow_closure:
         const GHC.Exception.$fExceptionArithException_$cshow_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cshow_entry() //  [R2]
         { info_tbl: [(c7wcd,
                       label: GHC.Exception.$fExceptionArithException_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wcd: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Exception.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.216282903 UTC

[section ""data" . GHC.Exception.$fShowArithException_$cshowList_closure" {
     GHC.Exception.$fShowArithException_$cshowList_closure:
         const GHC.Exception.$fShowArithException_$cshowList_info;
         const 0;
 },
 GHC.Exception.$fShowArithException_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c7wcp,
                       label: GHC.Exception.$fShowArithException_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wcp: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Exception.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.219610855 UTC

[section ""data" . GHC.Exception.$fShowArithException_closure" {
     GHC.Exception.$fShowArithException_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Exception.$fExceptionArithException_$cshowsPrec_closure+3;
         const GHC.Exception.$fExceptionArithException_$cshow_closure+1;
         const GHC.Exception.$fShowArithException_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.223880338 UTC

[section ""data" . GHC.Exception.$fEqArithException_$c==_closure" {
     GHC.Exception.$fEqArithException_$c==_closure:
         const GHC.Exception.$fEqArithException_$c==_info;
 },
 GHC.Exception.$fEqArithException_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7wcM,
                       label: GHC.Exception.$fEqArithException_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wcM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wcN; else goto c7wcO;
       c7wcN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqArithException_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wcO: // global
           I64[Sp - 16] = block_c7wcB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7weF; else goto c7wcC;
       u7weF: // global
           call _c7wcB(R1) args: 0, res: 0, upd: 0;
       c7wcC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wcB() //  [R1]
         { info_tbl: [(c7wcB,
                       label: block_c7wcB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wcB: // global
           _s7vXj::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wcF;
               case 2 : goto c7wcG;
               case 3 : goto c7wcH;
               case 4 : goto c7wcI;
               case 5 : goto c7wcJ;
               case 6 : goto c7wcK;
           }
       c7wcK: // global
           I64[Sp + 8] = block_c7we4_info;
           R1 = _s7vXj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7weE; else goto c7we6;
       u7weE: // global
           call _c7we4(R1) args: 0, res: 0, upd: 0;
       c7we6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wcJ: // global
           I64[Sp + 8] = block_c7wdP_info;
           R1 = _s7vXj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7weD; else goto c7wdR;
       u7weD: // global
           call _c7wdP(R1) args: 0, res: 0, upd: 0;
       c7wdR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wcI: // global
           I64[Sp + 8] = block_c7wdA_info;
           R1 = _s7vXj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7weC; else goto c7wdC;
       u7weC: // global
           call _c7wdA(R1) args: 0, res: 0, upd: 0;
       c7wdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wcH: // global
           I64[Sp + 8] = block_c7wdl_info;
           R1 = _s7vXj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7weB; else goto c7wdn;
       u7weB: // global
           call _c7wdl(R1) args: 0, res: 0, upd: 0;
       c7wdn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wcG: // global
           I64[Sp + 8] = block_c7wd6_info;
           R1 = _s7vXj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7weA; else goto c7wd8;
       u7weA: // global
           call _c7wd6(R1) args: 0, res: 0, upd: 0;
       c7wd8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wcF: // global
           I64[Sp + 8] = block_c7wcR_info;
           R1 = _s7vXj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wez; else goto c7wcT;
       u7wez: // global
           call _c7wcR(R1) args: 0, res: 0, upd: 0;
       c7wcT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7we4() //  [R1]
         { info_tbl: [(c7we4,
                       label: block_c7we4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7we4: // global
           if (R1 & 7 == 6) goto u7wen; else goto u7weo;
       u7wen: // global
           Sp = Sp + 8;
           call _c7weg() args: 0, res: 0, upd: 0;
       u7weo: // global
           Sp = Sp + 8;
           call _c7wec() args: 0, res: 0, upd: 0;
     }
 },
 _c7wdP() //  [R1]
         { info_tbl: [(c7wdP,
                       label: block_c7wdP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wdP: // global
           if (R1 & 7 == 5) goto u7wep; else goto u7weq;
       u7wep: // global
           Sp = Sp + 8;
           call _c7weg() args: 0, res: 0, upd: 0;
       u7weq: // global
           Sp = Sp + 8;
           call _c7wec() args: 0, res: 0, upd: 0;
     }
 },
 _c7wdA() //  [R1]
         { info_tbl: [(c7wdA,
                       label: block_c7wdA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wdA: // global
           if (R1 & 7 == 4) goto u7wer; else goto u7wes;
       u7wer: // global
           Sp = Sp + 8;
           call _c7weg() args: 0, res: 0, upd: 0;
       u7wes: // global
           Sp = Sp + 8;
           call _c7wec() args: 0, res: 0, upd: 0;
     }
 },
 _c7wdl() //  [R1]
         { info_tbl: [(c7wdl,
                       label: block_c7wdl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wdl: // global
           if (R1 & 7 == 3) goto u7wet; else goto u7weu;
       u7wet: // global
           Sp = Sp + 8;
           call _c7weg() args: 0, res: 0, upd: 0;
       u7weu: // global
           Sp = Sp + 8;
           call _c7wec() args: 0, res: 0, upd: 0;
     }
 },
 _c7wd6() //  [R1]
         { info_tbl: [(c7wd6,
                       label: block_c7wd6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wd6: // global
           if (R1 & 7 == 2) goto u7wev; else goto u7wew;
       u7wev: // global
           Sp = Sp + 8;
           call _c7weg() args: 0, res: 0, upd: 0;
       u7wew: // global
           Sp = Sp + 8;
           call _c7wec() args: 0, res: 0, upd: 0;
     }
 },
 _c7wcR() //  [R1]
         { info_tbl: [(c7wcR,
                       label: block_c7wcR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wcR: // global
           if (R1 & 7 == 1) goto u7wex; else goto u7wey;
       u7wex: // global
           Sp = Sp + 8;
           call _c7weg() args: 0, res: 0, upd: 0;
       u7wey: // global
           Sp = Sp + 8;
           call _c7wec() args: 0, res: 0, upd: 0;
     }
 },
 _c7weg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7weg: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wec() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wec: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.245977951 UTC

[section ""data" . GHC.Exception.$fEqArithException_$c/=_closure" {
     GHC.Exception.$fEqArithException_$c/=_closure:
         const GHC.Exception.$fEqArithException_$c/=_info;
 },
 GHC.Exception.$fEqArithException_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7wga,
                       label: GHC.Exception.$fEqArithException_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wga: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wgb; else goto c7wgc;
       c7wgb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqArithException_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wgc: // global
           I64[Sp - 16] = block_c7wfZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wi3; else goto c7wg0;
       u7wi3: // global
           call _c7wfZ(R1) args: 0, res: 0, upd: 0;
       c7wg0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wfZ() //  [R1]
         { info_tbl: [(c7wfZ,
                       label: block_c7wfZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wfZ: // global
           _s7vXs::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wg3;
               case 2 : goto c7wg4;
               case 3 : goto c7wg5;
               case 4 : goto c7wg6;
               case 5 : goto c7wg7;
               case 6 : goto c7wg8;
           }
       c7wg8: // global
           I64[Sp + 8] = block_c7whs_info;
           R1 = _s7vXs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wi2; else goto c7whu;
       u7wi2: // global
           call _c7whs(R1) args: 0, res: 0, upd: 0;
       c7whu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wg7: // global
           I64[Sp + 8] = block_c7whd_info;
           R1 = _s7vXs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wi1; else goto c7whf;
       u7wi1: // global
           call _c7whd(R1) args: 0, res: 0, upd: 0;
       c7whf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wg6: // global
           I64[Sp + 8] = block_c7wgY_info;
           R1 = _s7vXs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wi0; else goto c7wh0;
       u7wi0: // global
           call _c7wgY(R1) args: 0, res: 0, upd: 0;
       c7wh0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wg5: // global
           I64[Sp + 8] = block_c7wgJ_info;
           R1 = _s7vXs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7whZ; else goto c7wgL;
       u7whZ: // global
           call _c7wgJ(R1) args: 0, res: 0, upd: 0;
       c7wgL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wg4: // global
           I64[Sp + 8] = block_c7wgu_info;
           R1 = _s7vXs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7whY; else goto c7wgw;
       u7whY: // global
           call _c7wgu(R1) args: 0, res: 0, upd: 0;
       c7wgw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wg3: // global
           I64[Sp + 8] = block_c7wgf_info;
           R1 = _s7vXs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7whX; else goto c7wgh;
       u7whX: // global
           call _c7wgf(R1) args: 0, res: 0, upd: 0;
       c7wgh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7whs() //  [R1]
         { info_tbl: [(c7whs,
                       label: block_c7whs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7whs: // global
           if (R1 & 7 == 6) goto u7whL; else goto u7whM;
       u7whL: // global
           Sp = Sp + 8;
           call _c7whE() args: 0, res: 0, upd: 0;
       u7whM: // global
           Sp = Sp + 8;
           call _c7whA() args: 0, res: 0, upd: 0;
     }
 },
 _c7whd() //  [R1]
         { info_tbl: [(c7whd,
                       label: block_c7whd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7whd: // global
           if (R1 & 7 == 5) goto u7whN; else goto u7whO;
       u7whN: // global
           Sp = Sp + 8;
           call _c7whE() args: 0, res: 0, upd: 0;
       u7whO: // global
           Sp = Sp + 8;
           call _c7whA() args: 0, res: 0, upd: 0;
     }
 },
 _c7wgY() //  [R1]
         { info_tbl: [(c7wgY,
                       label: block_c7wgY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wgY: // global
           if (R1 & 7 == 4) goto u7whP; else goto u7whQ;
       u7whP: // global
           Sp = Sp + 8;
           call _c7whE() args: 0, res: 0, upd: 0;
       u7whQ: // global
           Sp = Sp + 8;
           call _c7whA() args: 0, res: 0, upd: 0;
     }
 },
 _c7wgJ() //  [R1]
         { info_tbl: [(c7wgJ,
                       label: block_c7wgJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wgJ: // global
           if (R1 & 7 == 3) goto u7whR; else goto u7whS;
       u7whR: // global
           Sp = Sp + 8;
           call _c7whE() args: 0, res: 0, upd: 0;
       u7whS: // global
           Sp = Sp + 8;
           call _c7whA() args: 0, res: 0, upd: 0;
     }
 },
 _c7wgu() //  [R1]
         { info_tbl: [(c7wgu,
                       label: block_c7wgu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wgu: // global
           if (R1 & 7 == 2) goto u7whT; else goto u7whU;
       u7whT: // global
           Sp = Sp + 8;
           call _c7whE() args: 0, res: 0, upd: 0;
       u7whU: // global
           Sp = Sp + 8;
           call _c7whA() args: 0, res: 0, upd: 0;
     }
 },
 _c7wgf() //  [R1]
         { info_tbl: [(c7wgf,
                       label: block_c7wgf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wgf: // global
           if (R1 & 7 == 1) goto u7whV; else goto u7whW;
       u7whV: // global
           Sp = Sp + 8;
           call _c7whE() args: 0, res: 0, upd: 0;
       u7whW: // global
           Sp = Sp + 8;
           call _c7whA() args: 0, res: 0, upd: 0;
     }
 },
 _c7whE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7whE: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7whA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7whA: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.264450476 UTC

[section ""data" . GHC.Exception.$fEqArithException_closure" {
     GHC.Exception.$fEqArithException_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exception.$fEqArithException_$c==_closure+2;
         const GHC.Exception.$fEqArithException_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.26663323 UTC

[section ""data" . GHC.Exception.$w$c<_closure" {
     GHC.Exception.$w$c<_closure:
         const GHC.Exception.$w$c<_info;
 },
 GHC.Exception.$w$c<_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7wjv,
                       label: GHC.Exception.$w$c<_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wjv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wjw; else goto c7wjx;
       c7wjw: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wjx: // global
           I64[Sp - 24] = block_c7wjo_info;
           _s7vXB::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7vXB::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wjo() //  [R1]
         { info_tbl: [(c7wjo,
                       label: block_c7wjo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wjo: // global
           _c7wju::P64 = R1 & 7;
           if (_c7wju::P64 < 3) goto u7wjH; else goto c7wjt;
       u7wjH: // global
           if (_c7wju::P64 < 2) goto c7wjr; else goto c7wjs;
       c7wjr: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7wjs: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$s$c<1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c7wjt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.272610728 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c<_closure" {
     GHC.Exception.$fOrdErrorCall_$c<_closure:
         const GHC.Exception.$fOrdErrorCall_$c<_info;
 },
 GHC.Exception.$fOrdErrorCall_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7wk3,
                       label: GHC.Exception.$fOrdErrorCall_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wk3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wk7; else goto c7wk8;
       c7wk7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wk8: // global
           I64[Sp - 16] = block_c7wk0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wkg; else goto c7wk1;
       u7wkg: // global
           call _c7wk0(R1) args: 0, res: 0, upd: 0;
       c7wk1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wk0() //  [R1]
         { info_tbl: [(c7wk0,
                       label: block_c7wk0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wk0: // global
           I64[Sp - 8] = block_c7wk6_info;
           _s7vXI::P64 = P64[R1 + 7];
           _s7vXJ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7vXJ::P64;
           P64[Sp + 8] = _s7vXI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7wkf; else goto c7wka;
       u7wkf: // global
           call _c7wk6(R1) args: 0, res: 0, upd: 0;
       c7wka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wk6() //  [R1]
         { info_tbl: [(c7wk6,
                       label: block_c7wk6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wk6: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c<_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.280668793 UTC

[section ""data" . GHC.Exception.$w$ccompare_closure" {
     GHC.Exception.$w$ccompare_closure:
         const GHC.Exception.$w$ccompare_info;
 },
 GHC.Exception.$w$ccompare_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7wkH,
                       label: GHC.Exception.$w$ccompare_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wkH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wkI; else goto c7wkJ;
       c7wkI: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wkJ: // global
           I64[Sp - 24] = block_c7wkA_info;
           _s7vXO::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7vXO::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wkA() //  [R1]
         { info_tbl: [(c7wkA,
                       label: block_c7wkA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wkA: // global
           _c7wkG::P64 = R1 & 7;
           if (_c7wkG::P64 < 3) goto u7wkT; else goto c7wkF;
       u7wkT: // global
           if (_c7wkG::P64 < 2) goto c7wkD; else goto c7wkE;
       c7wkD: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7wkE: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c7wkF: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.286967566 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$ccompare_closure" {
     GHC.Exception.$fOrdErrorCall_$ccompare_closure:
         const GHC.Exception.$fOrdErrorCall_$ccompare_info;
 },
 GHC.Exception.$fOrdErrorCall_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7wlf,
                       label: GHC.Exception.$fOrdErrorCall_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wlf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wlj; else goto c7wlk;
       c7wlj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wlk: // global
           I64[Sp - 16] = block_c7wlc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wls; else goto c7wld;
       u7wls: // global
           call _c7wlc(R1) args: 0, res: 0, upd: 0;
       c7wld: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wlc() //  [R1]
         { info_tbl: [(c7wlc,
                       label: block_c7wlc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wlc: // global
           I64[Sp - 8] = block_c7wli_info;
           _s7vXV::P64 = P64[R1 + 7];
           _s7vXW::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7vXW::P64;
           P64[Sp + 8] = _s7vXV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7wlr; else goto c7wlm;
       u7wlr: // global
           call _c7wli(R1) args: 0, res: 0, upd: 0;
       c7wlm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wli() //  [R1]
         { info_tbl: [(c7wli,
                       label: block_c7wli_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wli: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$ccompare_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.294345769 UTC

[section ""data" . GHC.Exception.$w$c==_closure" {
     GHC.Exception.$w$c==_closure:
         const GHC.Exception.$w$c==_info;
 },
 GHC.Exception.$w$c==_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7wlS,
                       label: GHC.Exception.$w$c==_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wlS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wlT; else goto c7wlU;
       c7wlT: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wlU: // global
           I64[Sp - 24] = block_c7wlM_info;
           _s7vY1::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7vY1::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wlM() //  [R1]
         { info_tbl: [(c7wlM,
                       label: block_c7wlM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wlM: // global
           if (R1 & 7 == 1) goto c7wlP; else goto c7wlQ;
       c7wlP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7wlQ: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.300114017 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_$c==_closure" {
     GHC.Exception.$fEqErrorCall_$c==_closure:
         const GHC.Exception.$fEqErrorCall_$c==_info;
 },
 GHC.Exception.$fEqErrorCall_$c==_entry() //  [R2, R3]
         { info_tbl: [(c7wml,
                       label: GHC.Exception.$fEqErrorCall_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wml: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wmp; else goto c7wmq;
       c7wmp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqErrorCall_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wmq: // global
           I64[Sp - 16] = block_c7wmi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wmy; else goto c7wmj;
       u7wmy: // global
           call _c7wmi(R1) args: 0, res: 0, upd: 0;
       c7wmj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wmi() //  [R1]
         { info_tbl: [(c7wmi,
                       label: block_c7wmi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wmi: // global
           I64[Sp - 8] = block_c7wmo_info;
           _s7vY8::P64 = P64[R1 + 7];
           _s7vY9::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7vY9::P64;
           P64[Sp + 8] = _s7vY8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7wmx; else goto c7wms;
       u7wmx: // global
           call _c7wmo(R1) args: 0, res: 0, upd: 0;
       c7wms: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wmo() //  [R1]
         { info_tbl: [(c7wmo,
                       label: block_c7wmo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wmo: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c==_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.307886081 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_$c/=_closure" {
     GHC.Exception.$fEqErrorCall_$c/=_closure:
         const GHC.Exception.$fEqErrorCall_$c/=_info;
 },
 GHC.Exception.$fEqErrorCall_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c7wmV,
                       label: GHC.Exception.$fEqErrorCall_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wmV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wmZ; else goto c7wn0;
       c7wmZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fEqErrorCall_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wn0: // global
           I64[Sp - 16] = block_c7wmS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wny; else goto c7wmT;
       u7wny: // global
           call _c7wmS(R1) args: 0, res: 0, upd: 0;
       c7wmT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wmS() //  [R1]
         { info_tbl: [(c7wmS,
                       label: block_c7wmS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wmS: // global
           I64[Sp - 8] = block_c7wmY_info;
           _s7vYg::P64 = P64[R1 + 7];
           _s7vYh::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7vYh::P64;
           P64[Sp + 8] = _s7vYg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7wnx; else goto c7wn2;
       u7wnx: // global
           call _c7wmY(R1) args: 0, res: 0, upd: 0;
       c7wn2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wmY() //  [R1]
         { info_tbl: [(c7wmY,
                       label: block_c7wmY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wmY: // global
           I64[Sp] = block_c7wn6_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wn6() //  [R1]
         { info_tbl: [(c7wn6,
                       label: block_c7wn6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wn6: // global
           if (R1 & 7 == 1) goto u7wnv; else goto c7wni;
       u7wnv: // global
           Sp = Sp + 24;
           call _c7wno() args: 0, res: 0, upd: 0;
       c7wni: // global
           _s7vYk::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7wng_info;
           R3 = _s7vYk::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wng() //  [R1]
         { info_tbl: [(c7wng,
                       label: block_c7wng_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wng: // global
           if (R1 & 7 == 1) goto u7wnw; else goto c7wns;
       u7wnw: // global
           Sp = Sp + 8;
           call _c7wno() args: 0, res: 0, upd: 0;
       c7wns: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wno() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wno: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.319736057 UTC

[section ""data" . GHC.Exception.$fEqErrorCall_closure" {
     GHC.Exception.$fEqErrorCall_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exception.$fEqErrorCall_$c==_closure+2;
         const GHC.Exception.$fEqErrorCall_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.322268956 UTC

[section ""data" . GHC.Exception.$w$c<=_closure" {
     GHC.Exception.$w$c<=_closure:
         const GHC.Exception.$w$c<=_info;
 },
 GHC.Exception.$w$c<=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7wol,
                       label: GHC.Exception.$w$c<=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wol: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wom; else goto c7won;
       c7wom: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7won: // global
           I64[Sp - 24] = block_c7woe_info;
           _s7vYo::P64 = R3;
           R3 = R2;
           R2 = R4;
           P64[Sp - 16] = _s7vYo::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7woe() //  [R1]
         { info_tbl: [(c7woe,
                       label: block_c7woe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7woe: // global
           _c7wok::P64 = R1 & 7;
           if (_c7wok::P64 < 3) goto u7woJ; else goto u7woK;
       u7woJ: // global
           if (_c7wok::P64 < 2) goto u7woL; else goto c7woi;
       u7woL: // global
           Sp = Sp + 24;
           call _c7woE() args: 0, res: 0, upd: 0;
       c7woi: // global
           _s7vYq::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7wot_info;
           R3 = P64[Sp + 8];
           R2 = _s7vYq::P64;
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7woK: // global
           Sp = Sp + 24;
           call _c7woj() args: 0, res: 0, upd: 0;
     }
 },
 _c7wot() //  [R1]
         { info_tbl: [(c7wot,
                       label: block_c7wot_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wot: // global
           if (R1 & 7 == 1) goto u7woM; else goto u7woN;
       u7woM: // global
           Sp = Sp + 8;
           call _c7woE() args: 0, res: 0, upd: 0;
       u7woN: // global
           Sp = Sp + 8;
           call _c7woj() args: 0, res: 0, upd: 0;
     }
 },
 _c7woE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7woE: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7woj() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7woj: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.331338972 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c<=_closure" {
     GHC.Exception.$fOrdErrorCall_$c<=_closure:
         const GHC.Exception.$fOrdErrorCall_$c<=_info;
 },
 GHC.Exception.$fOrdErrorCall_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7wpn,
                       label: GHC.Exception.$fOrdErrorCall_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wpn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wpr; else goto c7wps;
       c7wpr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wps: // global
           I64[Sp - 16] = block_c7wpk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wpA; else goto c7wpl;
       u7wpA: // global
           call _c7wpk(R1) args: 0, res: 0, upd: 0;
       c7wpl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wpk() //  [R1]
         { info_tbl: [(c7wpk,
                       label: block_c7wpk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wpk: // global
           I64[Sp - 8] = block_c7wpq_info;
           _s7vYw::P64 = P64[R1 + 7];
           _s7vYx::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7vYx::P64;
           P64[Sp + 8] = _s7vYw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7wpz; else goto c7wpu;
       u7wpz: // global
           call _c7wpq(R1) args: 0, res: 0, upd: 0;
       c7wpu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wpq() //  [R1]
         { info_tbl: [(c7wpq,
                       label: block_c7wpq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wpq: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c<=_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.339213004 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$cmax_closure" {
     GHC.Exception.$fOrdErrorCall_$cmax_closure:
         const GHC.Exception.$fOrdErrorCall_$cmax_info;
 },
 GHC.Exception.$fOrdErrorCall_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7wpX,
                       label: GHC.Exception.$fOrdErrorCall_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wpX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7wq1; else goto c7wq2;
       c7wq1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wq2: // global
           I64[Sp - 16] = block_c7wpU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wqH; else goto c7wpV;
       u7wqH: // global
           call _c7wpU(R1) args: 0, res: 0, upd: 0;
       c7wpV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wpU() //  [R1]
         { info_tbl: [(c7wpU,
                       label: block_c7wpU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wpU: // global
           I64[Sp - 16] = block_c7wq0_info;
           _s7vYD::P64 = R1;
           _s7vYE::P64 = P64[R1 + 7];
           _s7vYF::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s7vYF::P64;
           P64[Sp] = _s7vYE::P64;
           P64[Sp + 8] = _s7vYD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wqG; else goto c7wq4;
       u7wqG: // global
           call _c7wq0(R1) args: 0, res: 0, upd: 0;
       c7wq4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wq0() //  [R1]
         { info_tbl: [(c7wq0,
                       label: block_c7wq0_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wq0: // global
           I64[Sp - 8] = block_c7wq8_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wq8() //  [R1]
         { info_tbl: [(c7wq8,
                       label: block_c7wq8_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wq8: // global
           _c7wqz::P64 = R1 & 7;
           if (_c7wqz::P64 < 3) goto u7wqB; else goto u7wqC;
       u7wqB: // global
           if (_c7wqz::P64 < 2) goto u7wqD; else goto c7wqk;
       u7wqD: // global
           Sp = Sp + 32;
           call _c7wqu() args: 0, res: 0, upd: 0;
       c7wqk: // global
           _s7vYF::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7wqi_info;
           R3 = _s7vYF::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7wqC: // global
           Sp = Sp + 24;
           call _c7wqy() args: 0, res: 0, upd: 0;
     }
 },
 _c7wqi() //  [R1]
         { info_tbl: [(c7wqi,
                       label: block_c7wqi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wqi: // global
           if (R1 & 7 == 1) goto u7wqE; else goto u7wqF;
       u7wqE: // global
           Sp = Sp + 16;
           call _c7wqu() args: 0, res: 0, upd: 0;
       u7wqF: // global
           Sp = Sp + 8;
           call _c7wqy() args: 0, res: 0, upd: 0;
     }
 },
 _c7wqu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wqu: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wqy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wqy: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.352671609 UTC

[section ""data" . GHC.Exception.$w$c>=_closure" {
     GHC.Exception.$w$c>=_closure:
         const GHC.Exception.$w$c>=_info;
 },
 GHC.Exception.$w$c>=_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7wrw,
                       label: GHC.Exception.$w$c>=_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wrw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wrx; else goto c7wry;
       c7wrx: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$w$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wry: // global
           I64[Sp - 24] = block_c7wrp_info;
           _s7vYM::P64 = R3;
           R3 = R4;
           R2 = R2;
           P64[Sp - 16] = _s7vYM::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wrp() //  [R1]
         { info_tbl: [(c7wrp,
                       label: block_c7wrp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wrp: // global
           _c7wrv::P64 = R1 & 7;
           if (_c7wrv::P64 < 3) goto u7wrU; else goto u7wrV;
       u7wrU: // global
           if (_c7wrv::P64 < 2) goto u7wrW; else goto c7wrt;
       u7wrW: // global
           Sp = Sp + 24;
           call _c7wrP() args: 0, res: 0, upd: 0;
       c7wrt: // global
           _s7vYO::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7wrE_info;
           R3 = _s7vYO::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7wrV: // global
           Sp = Sp + 24;
           call _c7wru() args: 0, res: 0, upd: 0;
     }
 },
 _c7wrE() //  [R1]
         { info_tbl: [(c7wrE,
                       label: block_c7wrE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wrE: // global
           if (R1 & 7 == 1) goto u7wrX; else goto u7wrY;
       u7wrX: // global
           Sp = Sp + 8;
           call _c7wrP() args: 0, res: 0, upd: 0;
       u7wrY: // global
           Sp = Sp + 8;
           call _c7wru() args: 0, res: 0, upd: 0;
     }
 },
 _c7wrP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wrP: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wru() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wru: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.362250331 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c>=_closure" {
     GHC.Exception.$fOrdErrorCall_$c>=_closure:
         const GHC.Exception.$fOrdErrorCall_$c>=_info;
 },
 GHC.Exception.$fOrdErrorCall_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7wsy,
                       label: GHC.Exception.$fOrdErrorCall_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wsy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wsC; else goto c7wsD;
       c7wsC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wsD: // global
           I64[Sp - 16] = block_c7wsv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wsL; else goto c7wsw;
       u7wsL: // global
           call _c7wsv(R1) args: 0, res: 0, upd: 0;
       c7wsw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wsv() //  [R1]
         { info_tbl: [(c7wsv,
                       label: block_c7wsv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wsv: // global
           I64[Sp - 8] = block_c7wsB_info;
           _s7vYU::P64 = P64[R1 + 7];
           _s7vYV::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7vYV::P64;
           P64[Sp + 8] = _s7vYU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7wsK; else goto c7wsF;
       u7wsK: // global
           call _c7wsB(R1) args: 0, res: 0, upd: 0;
       c7wsF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wsB() //  [R1]
         { info_tbl: [(c7wsB,
                       label: block_c7wsB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wsB: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Exception.$w$c>=_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.369411877 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$c>_closure" {
     GHC.Exception.$fOrdErrorCall_$c>_closure:
         const GHC.Exception.$fOrdErrorCall_$c>_info;
 },
 GHC.Exception.$fOrdErrorCall_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7wt5,
                       label: GHC.Exception.$fOrdErrorCall_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wt5: // global
           _s7vZ0::P64 = R3;
           R3 = R2;
           R2 = _s7vZ0::P64;
           call GHC.Exception.$fOrdErrorCall_$c<_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.373148316 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_$cmin_closure" {
     GHC.Exception.$fOrdErrorCall_$cmin_closure:
         const GHC.Exception.$fOrdErrorCall_$cmin_info;
 },
 GHC.Exception.$fOrdErrorCall_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7wtj,
                       label: GHC.Exception.$fOrdErrorCall_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wtj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7wtn; else goto c7wto;
       c7wtn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdErrorCall_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wto: // global
           I64[Sp - 16] = block_c7wtg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wu3; else goto c7wth;
       u7wu3: // global
           call _c7wtg(R1) args: 0, res: 0, upd: 0;
       c7wth: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wtg() //  [R1]
         { info_tbl: [(c7wtg,
                       label: block_c7wtg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wtg: // global
           I64[Sp - 16] = block_c7wtm_info;
           _s7vZ3::P64 = R1;
           _s7vZ4::P64 = P64[R1 + 7];
           _s7vZ5::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s7vZ5::P64;
           P64[Sp] = _s7vZ4::P64;
           P64[Sp + 8] = _s7vZ3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wu2; else goto c7wtq;
       u7wu2: // global
           call _c7wtm(R1) args: 0, res: 0, upd: 0;
       c7wtq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wtm() //  [R1]
         { info_tbl: [(c7wtm,
                       label: block_c7wtm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wtm: // global
           I64[Sp - 8] = block_c7wtu_info;
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wtu() //  [R1]
         { info_tbl: [(c7wtu,
                       label: block_c7wtu_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wtu: // global
           _c7wtV::P64 = R1 & 7;
           if (_c7wtV::P64 < 3) goto u7wtX; else goto u7wtY;
       u7wtX: // global
           if (_c7wtV::P64 < 2) goto u7wtZ; else goto c7wtG;
       u7wtZ: // global
           Sp = Sp + 24;
           call _c7wtQ() args: 0, res: 0, upd: 0;
       c7wtG: // global
           _s7vZ5::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7wtE_info;
           R3 = _s7vZ5::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.$fOrd[]_$s$ccompare1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       u7wtY: // global
           Sp = Sp + 32;
           call _c7wtU() args: 0, res: 0, upd: 0;
     }
 },
 _c7wtE() //  [R1]
         { info_tbl: [(c7wtE,
                       label: block_c7wtE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wtE: // global
           if (R1 & 7 == 1) goto u7wu0; else goto u7wu1;
       u7wu0: // global
           Sp = Sp + 8;
           call _c7wtQ() args: 0, res: 0, upd: 0;
       u7wu1: // global
           Sp = Sp + 16;
           call _c7wtU() args: 0, res: 0, upd: 0;
     }
 },
 _c7wtQ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wtQ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wtU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wtU: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.386609805 UTC

[section ""data" . GHC.Exception.$fOrdErrorCall_closure" {
     GHC.Exception.$fOrdErrorCall_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Exception.$fEqErrorCall_closure+1;
         const GHC.Exception.$fOrdErrorCall_$ccompare_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c<_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c<=_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c>_closure+2;
         const GHC.Exception.$fOrdErrorCall_$c>=_closure+2;
         const GHC.Exception.$fOrdErrorCall_$cmax_closure+2;
         const GHC.Exception.$fOrdErrorCall_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.388786395 UTC

[section ""data" . GHC.Exception.$dmdisplayException_closure" {
     GHC.Exception.$dmdisplayException_closure:
         const GHC.Exception.$dmdisplayException_info;
 },
 GHC.Exception.$dmdisplayException_entry() //  [R2]
         { info_tbl: [(c7wuO,
                       label: GHC.Exception.$dmdisplayException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wuO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7wuP; else goto c7wuQ;
       c7wuP: // global
           R2 = R2;
           R1 = GHC.Exception.$dmdisplayException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7wuQ: // global
           I64[Sp - 8] = block_c7wuM_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wuM() //  [R1]
         { info_tbl: [(c7wuM,
                       label: block_c7wuM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wuM: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Show.show_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.394156817 UTC

[section ""data" . GHC.Exception.$dmfromException_closure" {
     GHC.Exception.$dmfromException_closure:
         const GHC.Exception.$dmfromException_info;
         const 0;
 },
 GHC.Exception.$dmfromException_entry() //  [R2, R3]
         { info_tbl: [(c7wva,
                       label: GHC.Exception.$dmfromException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wva: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wvi; else goto c7wvj;
       c7wvi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$dmfromException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wvj: // global
           I64[Sp - 16] = block_c7wv7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wvF; else goto c7wv8;
       u7wvF: // global
           call _c7wv7(R1) args: 0, res: 0, upd: 0;
       c7wv8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wv7() //  [R1]
         { info_tbl: [(c7wv7,
                       label: block_c7wv7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wv7: // global
           I64[Sp - 8] = block_c7wvd_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wvd() //  [R1]
         { info_tbl: [(c7wvd,
                       label: block_c7wvd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wvd: // global
           I64[Sp] = block_c7wvh_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wvh() //  [R1]
         { info_tbl: [(c7wvh,
                       label: block_c7wvh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wvh: // global
           I64[Sp] = block_c7wvp_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7wvp() //  [R1]
         { info_tbl: [(c7wvp,
                       label: block_c7wvp_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wvp: // global
           if (R1 & 7 == 1) goto c7wvw; else goto c7wvA;
       c7wvw: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7wvA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7wvD; else goto c7wvC;
       c7wvD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7wvC: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.404844475 UTC

[section ""data" . GHC.Exception.$dmtoException_closure" {
     GHC.Exception.$dmtoException_closure:
         const GHC.Exception.$dmtoException_info;
 },
 GHC.Exception.$dmtoException_entry() //  [R2, R3]
         { info_tbl: [(c7wwg,
                       label: GHC.Exception.$dmtoException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wwg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7wwk; else goto c7wwj;
       c7wwk: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$dmtoException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wwj: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.408590612 UTC

[section ""data" . GHC.Exception.$bErrorCall_closure" {
     GHC.Exception.$bErrorCall_closure:
         const GHC.Exception.$bErrorCall_info;
 },
 GHC.Exception.$bErrorCall_entry() //  [R2]
         { info_tbl: [(c7www,
                       label: GHC.Exception.$bErrorCall_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7www: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7wwA; else goto c7wwz;
       c7wwA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$bErrorCall_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7wwz: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.412470122 UTC

[section ""data" . GHC.Exception.throw_closure" {
     GHC.Exception.throw_closure:
         const GHC.Exception.throw_info;
 },
 sat_s7vZo_entry() //  [R1]
         { info_tbl: [(c7wwR,
                       label: sat_s7vZo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wwR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7wwS; else goto c7wwT;
       c7wwS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wwT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exception.throw_entry() //  [R2, R3]
         { info_tbl: [(c7wwU,
                       label: GHC.Exception.throw_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wwU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7wwY; else goto c7wwX;
       c7wwY: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.throw_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wwX: // global
           I64[Hp - 24] = sat_s7vZo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.418877035 UTC

[section ""data" . GHC.Exception.$mErrorCall_closure" {
     GHC.Exception.$mErrorCall_closure:
         const GHC.Exception.$mErrorCall_info;
 },
 GHC.Exception.$mErrorCall_entry() //  [R2, R3, R4]
         { info_tbl: [(c7wxi,
                       label: GHC.Exception.$mErrorCall_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wxi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wxj; else goto c7wxk;
       c7wxj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$mErrorCall_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wxk: // global
           I64[Sp - 16] = block_c7wxf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wxo; else goto c7wxg;
       u7wxo: // global
           call _c7wxf(R1) args: 0, res: 0, upd: 0;
       c7wxg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wxf() //  [R1]
         { info_tbl: [(c7wxf,
                       label: block_c7wxf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wxf: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.4240589 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException12_bytes" {
     GHC.Exception.errorCallWithCallStackException12_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,45,112,114,111,102,41,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.425965561 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException11_closure" {
     GHC.Exception.errorCallWithCallStackException11_closure:
         const GHC.Exception.errorCallWithCallStackException11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException11_entry() //  [R1]
         { info_tbl: [(c7wxG,
                       label: GHC.Exception.errorCallWithCallStackException11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wxG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wxH; else goto c7wxI;
       c7wxH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wxI: // global
           (_c7wxD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7wxD::I64 == 0) goto c7wxF; else goto c7wxE;
       c7wxF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7wxE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7wxD::I64;
           R2 = GHC.Exception.errorCallWithCallStackException12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.430174524 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException5_bytes" {
     GHC.Exception.errorCallWithCallStackException5_bytes:
         I8[] [32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.431999762 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException10_closure" {
     GHC.Exception.errorCallWithCallStackException10_closure:
         const GHC.Exception.errorCallWithCallStackException10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException10_entry() //  [R1]
         { info_tbl: [(c7wxY,
                       label: GHC.Exception.errorCallWithCallStackException10_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wxY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wxZ; else goto c7wy0;
       c7wxZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wy0: // global
           (_c7wxV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7wxV::I64 == 0) goto c7wxX; else goto c7wxW;
       c7wxX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7wxW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7wxV::I64;
           R2 = GHC.Exception.errorCallWithCallStackException5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.435920737 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException9_closure" {
     GHC.Exception.errorCallWithCallStackException9_closure:
         const GHC.Exception.errorCallWithCallStackException9_info;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException9_entry() //  [R2]
         { info_tbl: [(c7wyd,
                       label: GHC.Exception.errorCallWithCallStackException9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wyd: // global
           R3 = R2;
           R2 = GHC.Exception.errorCallWithCallStackException10_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.439674576 UTC

[section ""data" . GHC.Exception.showCCSStack_closure" {
     GHC.Exception.showCCSStack_closure:
         const GHC.Exception.showCCSStack_info;
         const 0;
 },
 sat_s7vZA_entry() //  [R1]
         { info_tbl: [(c7wyA,
                       label: sat_s7vZA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wyA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7wyB; else goto c7wyC;
       c7wyB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wyC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7wyy_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7wyy() //  [R1]
         { info_tbl: [(c7wyy,
                       label: block_c7wyy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wyy: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.showCCSStack_entry() //  [R2]
         { info_tbl: [(c7wyK,
                       label: GHC.Exception.showCCSStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wyK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7wyL; else goto c7wyM;
       c7wyL: // global
           R2 = R2;
           R1 = GHC.Exception.showCCSStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7wyM: // global
           I64[Sp - 8] = block_c7wyo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7wyT; else goto c7wyp;
       u7wyT: // global
           call _c7wyo(R1) args: 0, res: 0, upd: 0;
       c7wyp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wyo() //  [R1]
         { info_tbl: [(c7wyo,
                       label: block_c7wyo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wyo: // global
           if (R1 & 7 == 1) goto c7wyH; else goto c7wyI;
       c7wyH: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7wyI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7wyS; else goto c7wyR;
       c7wyS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7wyR: // global
           I64[Hp - 40] = sat_s7vZA_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.450756761 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$ccompare_closure" {
     GHC.Exception.$fOrdArithException_$ccompare_closure:
         const GHC.Exception.$fOrdArithException_$ccompare_info;
 },
 GHC.Exception.$fOrdArithException_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c7wzC,
                       label: GHC.Exception.$fOrdArithException_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wzC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wzD; else goto c7wzE;
       c7wzD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wzE: // global
           I64[Sp - 16] = block_c7wzr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wCH; else goto c7wzs;
       u7wCH: // global
           call _c7wzr(R1) args: 0, res: 0, upd: 0;
       c7wzs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wzr() //  [R1]
         { info_tbl: [(c7wzr,
                       label: block_c7wzr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wzr: // global
           _s7vZC::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wzv;
               case 2 : goto c7wzw;
               case 3 : goto c7wzx;
               case 4 : goto c7wzy;
               case 5 : goto c7wzz;
               case 6 : goto c7wzA;
           }
       c7wzA: // global
           I64[Sp + 8] = block_c7wBO_info;
           R1 = _s7vZC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wCG; else goto c7wBQ;
       u7wCG: // global
           call _c7wBO(R1) args: 0, res: 0, upd: 0;
       c7wBQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wzz: // global
           I64[Sp + 8] = block_c7wBv_info;
           R1 = _s7vZC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wCF; else goto c7wBx;
       u7wCF: // global
           call _c7wBv(R1) args: 0, res: 0, upd: 0;
       c7wBx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wzy: // global
           I64[Sp + 8] = block_c7wB8_info;
           R1 = _s7vZC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wCE; else goto c7wBa;
       u7wCE: // global
           call _c7wB8(R1) args: 0, res: 0, upd: 0;
       c7wBa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wzx: // global
           I64[Sp + 8] = block_c7wAH_info;
           R1 = _s7vZC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wCD; else goto c7wAJ;
       u7wCD: // global
           call _c7wAH(R1) args: 0, res: 0, upd: 0;
       c7wAJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wzw: // global
           I64[Sp + 8] = block_c7wAc_info;
           R1 = _s7vZC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wCC; else goto c7wAe;
       u7wCC: // global
           call _c7wAc(R1) args: 0, res: 0, upd: 0;
       c7wAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wzv: // global
           I64[Sp + 8] = block_c7wzH_info;
           R1 = _s7vZC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wCB; else goto c7wzJ;
       u7wCB: // global
           call _c7wzH(R1) args: 0, res: 0, upd: 0;
       c7wzJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wBO() //  [R1]
         { info_tbl: [(c7wBO,
                       label: block_c7wBO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wBO: // global
           if (R1 & 7 == 6) goto u7wCc; else goto u7wCd;
       u7wCc: // global
           Sp = Sp + 8;
           call _c7wC0() args: 0, res: 0, upd: 0;
       u7wCd: // global
           Sp = Sp + 8;
           call _c7wBW() args: 0, res: 0, upd: 0;
     }
 },
 _c7wBv() //  [R1]
         { info_tbl: [(c7wBv,
                       label: block_c7wBv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wBv: // global
           _c7wC2::P64 = R1 & 7;
           if (_c7wC2::P64 != 5) goto u7wCb; else goto u7wCe;
       u7wCb: // global
           if (_c7wC2::P64 != 6) goto u7wCg; else goto u7wCf;
       u7wCg: // global
           Sp = Sp + 8;
           call _c7wBW() args: 0, res: 0, upd: 0;
       u7wCf: // global
           Sp = Sp + 8;
           call _c7wBL() args: 0, res: 0, upd: 0;
       u7wCe: // global
           Sp = Sp + 8;
           call _c7wC0() args: 0, res: 0, upd: 0;
     }
 },
 _c7wB8() //  [R1]
         { info_tbl: [(c7wB8,
                       label: block_c7wB8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wB8: // global
           _c7wC3::P64 = R1 & 7;
           if (_c7wC3::P64 < 5) goto u7wC9; else goto u7wCa;
       u7wC9: // global
           if (_c7wC3::P64 < 4) goto u7wCi; else goto u7wCh;
       u7wCi: // global
           Sp = Sp + 8;
           call _c7wBW() args: 0, res: 0, upd: 0;
       u7wCh: // global
           Sp = Sp + 8;
           call _c7wC0() args: 0, res: 0, upd: 0;
       u7wCa: // global
           if (_c7wC3::P64 < 6) goto u7wCk; else goto u7wCk;
       u7wCk: // global
           Sp = Sp + 8;
           call _c7wBL() args: 0, res: 0, upd: 0;
     }
 },
 _c7wAH() //  [R1]
         { info_tbl: [(c7wAH,
                       label: block_c7wAH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wAH: // global
           _c7wC4::P64 = R1 & 7;
           if (_c7wC4::P64 < 4) goto u7wC7; else goto u7wC8;
       u7wC7: // global
           if (_c7wC4::P64 < 3) goto u7wCm; else goto u7wCl;
       u7wCm: // global
           Sp = Sp + 8;
           call _c7wBW() args: 0, res: 0, upd: 0;
       u7wCl: // global
           Sp = Sp + 8;
           call _c7wC0() args: 0, res: 0, upd: 0;
       u7wC8: // global
           if (_c7wC4::P64 != 5) goto u7wCo; else goto u7wCo;
       u7wCo: // global
           Sp = Sp + 8;
           call _c7wBL() args: 0, res: 0, upd: 0;
     }
 },
 _c7wAc() //  [R1]
         { info_tbl: [(c7wAc,
                       label: block_c7wAc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wAc: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7wCp;
               case 2 : goto u7wCq;
               case 3, 4, 5, 6 : goto u7wCu;
           }
       u7wCu: // global
           Sp = Sp + 8;
           call _c7wBL() args: 0, res: 0, upd: 0;
       u7wCq: // global
           Sp = Sp + 8;
           call _c7wC0() args: 0, res: 0, upd: 0;
       u7wCp: // global
           Sp = Sp + 8;
           call _c7wBW() args: 0, res: 0, upd: 0;
     }
 },
 _c7wBW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wBW: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wzH() //  [R1]
         { info_tbl: [(c7wzH,
                       label: block_c7wzH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wzH: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7wCv;
               case 2, 3, 4, 5, 6 : goto u7wCA;
           }
       u7wCA: // global
           Sp = Sp + 8;
           call _c7wBL() args: 0, res: 0, upd: 0;
       u7wCv: // global
           Sp = Sp + 8;
           call _c7wC0() args: 0, res: 0, upd: 0;
     }
 },
 _c7wBL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wBL: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wC0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wC0: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.472482749 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c<_closure" {
     GHC.Exception.$fOrdArithException_$c<_closure:
         const GHC.Exception.$fOrdArithException_$c<_info;
 },
 GHC.Exception.$fOrdArithException_$c<_entry() //  [R2, R3]
         { info_tbl: [(c7wEn,
                       label: GHC.Exception.$fOrdArithException_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wEn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wEo; else goto c7wEp;
       c7wEo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wEp: // global
           I64[Sp - 16] = block_c7wEc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wGX; else goto c7wEd;
       u7wGX: // global
           call _c7wEc(R1) args: 0, res: 0, upd: 0;
       c7wEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wEc() //  [R1]
         { info_tbl: [(c7wEc,
                       label: block_c7wEc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wEc: // global
           _s7vZL::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wEg;
               case 2 : goto c7wEh;
               case 3 : goto c7wEi;
               case 4 : goto c7wEj;
               case 5 : goto c7wEk;
               case 6 : goto c7wEl;
           }
       c7wEl: // global
           I64[Sp + 8] = block_c7wGj_info;
           R1 = _s7vZL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wGW; else goto c7wGl;
       u7wGW: // global
           call _c7wGj() args: 0, res: 0, upd: 0;
       c7wGl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wEk: // global
           I64[Sp + 8] = block_c7wG4_info;
           R1 = _s7vZL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wGV; else goto c7wG6;
       u7wGV: // global
           call _c7wG4(R1) args: 0, res: 0, upd: 0;
       c7wG6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wEj: // global
           I64[Sp + 8] = block_c7wFL_info;
           R1 = _s7vZL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wGU; else goto c7wFN;
       u7wGU: // global
           call _c7wFL(R1) args: 0, res: 0, upd: 0;
       c7wFN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wEi: // global
           I64[Sp + 8] = block_c7wFo_info;
           R1 = _s7vZL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wGT; else goto c7wFq;
       u7wGT: // global
           call _c7wFo(R1) args: 0, res: 0, upd: 0;
       c7wFq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wEh: // global
           I64[Sp + 8] = block_c7wEX_info;
           R1 = _s7vZL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wGS; else goto c7wEZ;
       u7wGS: // global
           call _c7wEX(R1) args: 0, res: 0, upd: 0;
       c7wEZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wEg: // global
           I64[Sp + 8] = block_c7wEs_info;
           R1 = _s7vZL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wGR; else goto c7wEu;
       u7wGR: // global
           call _c7wEs(R1) args: 0, res: 0, upd: 0;
       c7wEu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wGj() //  []
         { info_tbl: [(c7wGj,
                       label: block_c7wGj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wGj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wG4() //  [R1]
         { info_tbl: [(c7wG4,
                       label: block_c7wG4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wG4: // global
           if (R1 & 7 == 6) goto u7wGz; else goto u7wGA;
       u7wGz: // global
           Sp = Sp + 8;
           call _c7wGg() args: 0, res: 0, upd: 0;
       u7wGA: // global
           Sp = Sp + 8;
           call _c7wGc() args: 0, res: 0, upd: 0;
     }
 },
 _c7wFL() //  [R1]
         { info_tbl: [(c7wFL,
                       label: block_c7wFL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wFL: // global
           _c7wGr::P64 = R1 & 7;
           if (_c7wGr::P64 != 5) goto u7wGy; else goto u7wGB;
       u7wGy: // global
           if (_c7wGr::P64 != 6) goto u7wGD; else goto u7wGC;
       u7wGD: // global
           Sp = Sp + 8;
           call _c7wGc() args: 0, res: 0, upd: 0;
       u7wGC: // global
           Sp = Sp + 8;
           goto u7wH6;
       u7wGB: // global
           Sp = Sp + 8;
           goto u7wH6;
       u7wH6: // global
           call _c7wGg() args: 0, res: 0, upd: 0;
     }
 },
 _c7wFo() //  [R1]
         { info_tbl: [(c7wFo,
                       label: block_c7wFo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wFo: // global
           _c7wGs::P64 = R1 & 7;
           if (_c7wGs::P64 < 4) goto u7wGE; else goto u7wGx;
       u7wGE: // global
           Sp = Sp + 8;
           call _c7wGc() args: 0, res: 0, upd: 0;
       u7wGx: // global
           if (_c7wGs::P64 != 5) goto u7wGG; else goto u7wGG;
       u7wGG: // global
           Sp = Sp + 8;
           call _c7wGg() args: 0, res: 0, upd: 0;
     }
 },
 _c7wEX() //  [R1]
         { info_tbl: [(c7wEX,
                       label: block_c7wEX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wEX: // global
           _c7wGt::P64 = R1 & 7;
           if (_c7wGt::P64 < 6) goto u7wGv; else goto u7wGH;
       u7wGv: // global
           if (_c7wGt::P64 < 3) goto u7wGI; else goto u7wGw;
       u7wGI: // global
           Sp = Sp + 8;
           call _c7wGc() args: 0, res: 0, upd: 0;
       u7wGw: // global
           if (_c7wGt::P64 != 4) goto u7wGK; else goto u7wGK;
       u7wGK: // global
           Sp = Sp + 8;
           goto u7wH2;
       u7wGH: // global
           Sp = Sp + 8;
           goto u7wH2;
       u7wH2: // global
           call _c7wGg() args: 0, res: 0, upd: 0;
     }
 },
 _c7wEs() //  [R1]
         { info_tbl: [(c7wEs,
                       label: block_c7wEs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wEs: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7wGL;
               case 2, 3, 4, 5, 6 : goto u7wGQ;
           }
       u7wGQ: // global
           Sp = Sp + 8;
           call _c7wGg() args: 0, res: 0, upd: 0;
       u7wGL: // global
           Sp = Sp + 8;
           call _c7wGc() args: 0, res: 0, upd: 0;
     }
 },
 _c7wGg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wGg: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wGc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wGc: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.492852459 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c<=_closure" {
     GHC.Exception.$fOrdArithException_$c<=_closure:
         const GHC.Exception.$fOrdArithException_$c<=_info;
 },
 GHC.Exception.$fOrdArithException_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c7wIs,
                       label: GHC.Exception.$fOrdArithException_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wIs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wIt; else goto c7wIu;
       c7wIt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wIu: // global
           I64[Sp - 16] = block_c7wIh_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wL2; else goto c7wIi;
       u7wL2: // global
           call _c7wIh(R1) args: 0, res: 0, upd: 0;
       c7wIi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wIh() //  [R1]
         { info_tbl: [(c7wIh,
                       label: block_c7wIh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wIh: // global
           _s7vZT::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wIl;
               case 2 : goto c7wIm;
               case 3 : goto c7wIn;
               case 4 : goto c7wIo;
               case 5 : goto c7wIp;
               case 6 : goto c7wIq;
           }
       c7wIq: // global
           I64[Sp + 8] = block_c7wKo_info;
           R1 = _s7vZT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wL1; else goto c7wKq;
       u7wL1: // global
           call _c7wKo() args: 0, res: 0, upd: 0;
       c7wKq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wIp: // global
           I64[Sp + 8] = block_c7wK9_info;
           R1 = _s7vZT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wL0; else goto c7wKb;
       u7wL0: // global
           call _c7wK9(R1) args: 0, res: 0, upd: 0;
       c7wKb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wIo: // global
           I64[Sp + 8] = block_c7wJQ_info;
           R1 = _s7vZT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wKZ; else goto c7wJS;
       u7wKZ: // global
           call _c7wJQ(R1) args: 0, res: 0, upd: 0;
       c7wJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wIn: // global
           I64[Sp + 8] = block_c7wJt_info;
           R1 = _s7vZT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wKY; else goto c7wJv;
       u7wKY: // global
           call _c7wJt(R1) args: 0, res: 0, upd: 0;
       c7wJv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wIm: // global
           I64[Sp + 8] = block_c7wJ2_info;
           R1 = _s7vZT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wKX; else goto c7wJ4;
       u7wKX: // global
           call _c7wJ2(R1) args: 0, res: 0, upd: 0;
       c7wJ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wIl: // global
           I64[Sp + 8] = block_c7wIx_info;
           R1 = _s7vZT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wKW; else goto c7wIz;
       u7wKW: // global
           call _c7wIx(R1) args: 0, res: 0, upd: 0;
       c7wIz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wKo() //  []
         { info_tbl: [(c7wKo,
                       label: block_c7wKo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wKo: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wK9() //  [R1]
         { info_tbl: [(c7wK9,
                       label: block_c7wK9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wK9: // global
           if (R1 & 7 == 6) goto u7wKE; else goto u7wKF;
       u7wKE: // global
           Sp = Sp + 8;
           call _c7wKl() args: 0, res: 0, upd: 0;
       u7wKF: // global
           Sp = Sp + 8;
           call _c7wKh() args: 0, res: 0, upd: 0;
     }
 },
 _c7wJQ() //  [R1]
         { info_tbl: [(c7wJQ,
                       label: block_c7wJQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wJQ: // global
           _c7wKw::P64 = R1 & 7;
           if (_c7wKw::P64 != 5) goto u7wKD; else goto u7wKG;
       u7wKD: // global
           if (_c7wKw::P64 != 6) goto u7wKI; else goto u7wKH;
       u7wKI: // global
           Sp = Sp + 8;
           call _c7wKh() args: 0, res: 0, upd: 0;
       u7wKH: // global
           Sp = Sp + 8;
           goto u7wLb;
       u7wKG: // global
           Sp = Sp + 8;
           goto u7wLb;
       u7wLb: // global
           call _c7wKl() args: 0, res: 0, upd: 0;
     }
 },
 _c7wJt() //  [R1]
         { info_tbl: [(c7wJt,
                       label: block_c7wJt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wJt: // global
           _c7wKx::P64 = R1 & 7;
           if (_c7wKx::P64 < 4) goto u7wKJ; else goto u7wKC;
       u7wKJ: // global
           Sp = Sp + 8;
           call _c7wKh() args: 0, res: 0, upd: 0;
       u7wKC: // global
           if (_c7wKx::P64 != 5) goto u7wKL; else goto u7wKL;
       u7wKL: // global
           Sp = Sp + 8;
           call _c7wKl() args: 0, res: 0, upd: 0;
     }
 },
 _c7wJ2() //  [R1]
         { info_tbl: [(c7wJ2,
                       label: block_c7wJ2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wJ2: // global
           _c7wKy::P64 = R1 & 7;
           if (_c7wKy::P64 < 6) goto u7wKA; else goto u7wKM;
       u7wKA: // global
           if (_c7wKy::P64 < 3) goto u7wKN; else goto u7wKB;
       u7wKN: // global
           Sp = Sp + 8;
           call _c7wKh() args: 0, res: 0, upd: 0;
       u7wKB: // global
           if (_c7wKy::P64 != 4) goto u7wKP; else goto u7wKP;
       u7wKP: // global
           Sp = Sp + 8;
           goto u7wL7;
       u7wKM: // global
           Sp = Sp + 8;
           goto u7wL7;
       u7wL7: // global
           call _c7wKl() args: 0, res: 0, upd: 0;
     }
 },
 _c7wIx() //  [R1]
         { info_tbl: [(c7wIx,
                       label: block_c7wIx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wIx: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7wKQ;
               case 2, 3, 4, 5, 6 : goto u7wKV;
           }
       u7wKV: // global
           Sp = Sp + 8;
           call _c7wKl() args: 0, res: 0, upd: 0;
       u7wKQ: // global
           Sp = Sp + 8;
           call _c7wKh() args: 0, res: 0, upd: 0;
     }
 },
 _c7wKl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wKl: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wKh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wKh: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.513211687 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$cmax_closure" {
     GHC.Exception.$fOrdArithException_$cmax_closure:
         const GHC.Exception.$fOrdArithException_$cmax_info;
 },
 GHC.Exception.$fOrdArithException_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c7wMx,
                       label: GHC.Exception.$fOrdArithException_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wMx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wMy; else goto c7wMz;
       c7wMy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wMz: // global
           I64[Sp - 16] = block_c7wMm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wOA; else goto c7wMn;
       u7wOA: // global
           call _c7wMm(R1) args: 0, res: 0, upd: 0;
       c7wMn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wMm() //  [R1]
         { info_tbl: [(c7wMm,
                       label: block_c7wMm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wMm: // global
           _s7w02::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wMq;
               case 2 : goto c7wMr;
               case 3 : goto c7wMs;
               case 4 : goto c7wMt;
               case 5 : goto c7wMu;
               case 6 : goto c7wMv;
           }
       c7wMv: // global
           I64[Sp + 8] = block_c7wO1_info;
           R1 = _s7w02::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wOz; else goto c7wO3;
       u7wOz: // global
           call _c7wO1() args: 0, res: 0, upd: 0;
       c7wO3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wMu: // global
           I64[Sp + 8] = block_c7wNM_info;
           R1 = _s7w02::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wOy; else goto c7wNO;
       u7wOy: // global
           call _c7wNM(R1) args: 0, res: 0, upd: 0;
       c7wNO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wMt: // global
           I64[Sp + 8] = block_c7wNt_info;
           R1 = _s7w02::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wOx; else goto c7wNv;
       u7wOx: // global
           call _c7wNt(R1) args: 0, res: 0, upd: 0;
       c7wNv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wMs: // global
           I64[Sp + 8] = block_c7wN6_info;
           R1 = _s7w02::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wOw; else goto c7wN8;
       u7wOw: // global
           call _c7wN6(R1) args: 0, res: 0, upd: 0;
       c7wN8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wMr: // global
           I64[Sp + 8] = block_c7wMF_info;
           R1 = _s7w02::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wOv; else goto c7wMH;
       u7wOv: // global
           call _c7wMF(R1) args: 0, res: 0, upd: 0;
       c7wMH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wMq: // global
           R1 = _s7w02::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wO1() //  []
         { info_tbl: [(c7wO1,
                       label: block_c7wO1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wO1: // global
           R1 = GHC.Exception.RatioZeroDenominator_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wNM() //  [R1]
         { info_tbl: [(c7wNM,
                       label: block_c7wNM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wNM: // global
           if (R1 & 7 == 6) goto u7wOi; else goto u7wOj;
       u7wOi: // global
           Sp = Sp + 8;
           call _c7wNY() args: 0, res: 0, upd: 0;
       u7wOj: // global
           Sp = Sp + 8;
           call _c7wNU() args: 0, res: 0, upd: 0;
     }
 },
 _c7wNt() //  [R1]
         { info_tbl: [(c7wNt,
                       label: block_c7wNt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wNt: // global
           _c7wO9::P64 = R1 & 7;
           if (_c7wO9::P64 != 5) goto u7wOh; else goto u7wOk;
       u7wOh: // global
           if (_c7wO9::P64 != 6) goto u7wOm; else goto u7wOl;
       u7wOm: // global
           Sp = Sp + 8;
           call _c7wNB() args: 0, res: 0, upd: 0;
       u7wOl: // global
           Sp = Sp + 8;
           call _c7wNY() args: 0, res: 0, upd: 0;
       u7wOk: // global
           Sp = Sp + 8;
           call _c7wNU() args: 0, res: 0, upd: 0;
     }
 },
 _c7wN6() //  [R1]
         { info_tbl: [(c7wN6,
                       label: block_c7wN6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wN6: // global
           _c7wOa::P64 = R1 & 7;
           if (_c7wOa::P64 < 5) goto u7wOf; else goto u7wOg;
       u7wOf: // global
           if (_c7wOa::P64 < 4) goto u7wOo; else goto u7wOn;
       u7wOo: // global
           Sp = Sp + 8;
           call _c7wNe() args: 0, res: 0, upd: 0;
       u7wOn: // global
           Sp = Sp + 8;
           call _c7wNB() args: 0, res: 0, upd: 0;
       u7wOg: // global
           if (_c7wOa::P64 < 6) goto u7wOq; else goto u7wOp;
       u7wOq: // global
           Sp = Sp + 8;
           call _c7wNU() args: 0, res: 0, upd: 0;
       u7wOp: // global
           Sp = Sp + 8;
           call _c7wNY() args: 0, res: 0, upd: 0;
     }
 },
 _c7wMF() //  [R1]
         { info_tbl: [(c7wMF,
                       label: block_c7wMF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wMF: // global
           _c7wOb::P64 = R1 & 7;
           if (_c7wOb::P64 < 5) goto u7wOc; else goto u7wOe;
       u7wOc: // global
           if (_c7wOb::P64 < 4) goto u7wOd; else goto u7wOr;
       u7wOd: // global
           if (_c7wOb::P64 < 3) goto c7wMN; else goto u7wOs;
       c7wMN: // global
           R1 = GHC.Exception.Underflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u7wOs: // global
           Sp = Sp + 8;
           call _c7wNe() args: 0, res: 0, upd: 0;
       u7wOr: // global
           Sp = Sp + 8;
           call _c7wNB() args: 0, res: 0, upd: 0;
       u7wOe: // global
           if (_c7wOb::P64 < 6) goto u7wOu; else goto u7wOt;
       u7wOu: // global
           Sp = Sp + 8;
           call _c7wNU() args: 0, res: 0, upd: 0;
       u7wOt: // global
           Sp = Sp + 8;
           call _c7wNY() args: 0, res: 0, upd: 0;
     }
 },
 _c7wNe() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wNe: // global
           R1 = GHC.Exception.LossOfPrecision_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wNB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wNB: // global
           R1 = GHC.Exception.DivideByZero_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wNU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wNU: // global
           R1 = GHC.Exception.Denormal_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wNY() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wNY: // global
           R1 = GHC.Exception.RatioZeroDenominator_closure+6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.533526837 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c>=_closure" {
     GHC.Exception.$fOrdArithException_$c>=_closure:
         const GHC.Exception.$fOrdArithException_$c>=_info;
 },
 GHC.Exception.$fOrdArithException_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c7wQ2,
                       label: GHC.Exception.$fOrdArithException_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wQ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wQ3; else goto c7wQ4;
       c7wQ3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wQ4: // global
           I64[Sp - 16] = block_c7wPR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wSC; else goto c7wPS;
       u7wSC: // global
           call _c7wPR(R1) args: 0, res: 0, upd: 0;
       c7wPS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wPR() //  [R1]
         { info_tbl: [(c7wPR,
                       label: block_c7wPR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wPR: // global
           _s7w0b::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wPV;
               case 2 : goto c7wPW;
               case 3 : goto c7wPX;
               case 4 : goto c7wPY;
               case 5 : goto c7wPZ;
               case 6 : goto c7wQ0;
           }
       c7wQ0: // global
           I64[Sp + 8] = block_c7wRY_info;
           R1 = _s7w0b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wSB; else goto c7wS0;
       u7wSB: // global
           call _c7wRY() args: 0, res: 0, upd: 0;
       c7wS0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wPZ: // global
           I64[Sp + 8] = block_c7wRJ_info;
           R1 = _s7w0b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wSA; else goto c7wRL;
       u7wSA: // global
           call _c7wRJ(R1) args: 0, res: 0, upd: 0;
       c7wRL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wPY: // global
           I64[Sp + 8] = block_c7wRq_info;
           R1 = _s7w0b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wSz; else goto c7wRs;
       u7wSz: // global
           call _c7wRq(R1) args: 0, res: 0, upd: 0;
       c7wRs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wPX: // global
           I64[Sp + 8] = block_c7wR3_info;
           R1 = _s7w0b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wSy; else goto c7wR5;
       u7wSy: // global
           call _c7wR3(R1) args: 0, res: 0, upd: 0;
       c7wR5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wPW: // global
           I64[Sp + 8] = block_c7wQC_info;
           R1 = _s7w0b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wSx; else goto c7wQE;
       u7wSx: // global
           call _c7wQC(R1) args: 0, res: 0, upd: 0;
       c7wQE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wPV: // global
           I64[Sp + 8] = block_c7wQ7_info;
           R1 = _s7w0b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wSw; else goto c7wQ9;
       u7wSw: // global
           call _c7wQ7(R1) args: 0, res: 0, upd: 0;
       c7wQ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wRY() //  []
         { info_tbl: [(c7wRY,
                       label: block_c7wRY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wRY: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wRJ() //  [R1]
         { info_tbl: [(c7wRJ,
                       label: block_c7wRJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wRJ: // global
           if (R1 & 7 == 6) goto u7wSe; else goto u7wSf;
       u7wSe: // global
           Sp = Sp + 8;
           call _c7wRV() args: 0, res: 0, upd: 0;
       u7wSf: // global
           Sp = Sp + 8;
           call _c7wRR() args: 0, res: 0, upd: 0;
     }
 },
 _c7wRq() //  [R1]
         { info_tbl: [(c7wRq,
                       label: block_c7wRq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wRq: // global
           _c7wS6::P64 = R1 & 7;
           if (_c7wS6::P64 != 5) goto u7wSd; else goto u7wSg;
       u7wSd: // global
           if (_c7wS6::P64 != 6) goto u7wSi; else goto u7wSh;
       u7wSi: // global
           Sp = Sp + 8;
           call _c7wRR() args: 0, res: 0, upd: 0;
       u7wSh: // global
           Sp = Sp + 8;
           goto u7wSL;
       u7wSg: // global
           Sp = Sp + 8;
           goto u7wSL;
       u7wSL: // global
           call _c7wRV() args: 0, res: 0, upd: 0;
     }
 },
 _c7wR3() //  [R1]
         { info_tbl: [(c7wR3,
                       label: block_c7wR3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wR3: // global
           _c7wS7::P64 = R1 & 7;
           if (_c7wS7::P64 < 4) goto u7wSj; else goto u7wSc;
       u7wSj: // global
           Sp = Sp + 8;
           call _c7wRR() args: 0, res: 0, upd: 0;
       u7wSc: // global
           if (_c7wS7::P64 != 5) goto u7wSl; else goto u7wSl;
       u7wSl: // global
           Sp = Sp + 8;
           call _c7wRV() args: 0, res: 0, upd: 0;
     }
 },
 _c7wQC() //  [R1]
         { info_tbl: [(c7wQC,
                       label: block_c7wQC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wQC: // global
           _c7wS8::P64 = R1 & 7;
           if (_c7wS8::P64 < 6) goto u7wSa; else goto u7wSm;
       u7wSa: // global
           if (_c7wS8::P64 < 3) goto u7wSn; else goto u7wSb;
       u7wSn: // global
           Sp = Sp + 8;
           call _c7wRR() args: 0, res: 0, upd: 0;
       u7wSb: // global
           if (_c7wS8::P64 != 4) goto u7wSp; else goto u7wSp;
       u7wSp: // global
           Sp = Sp + 8;
           goto u7wSH;
       u7wSm: // global
           Sp = Sp + 8;
           goto u7wSH;
       u7wSH: // global
           call _c7wRV() args: 0, res: 0, upd: 0;
     }
 },
 _c7wQ7() //  [R1]
         { info_tbl: [(c7wQ7,
                       label: block_c7wQ7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wQ7: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u7wSq;
               case 2, 3, 4, 5, 6 : goto u7wSv;
           }
       u7wSv: // global
           Sp = Sp + 8;
           call _c7wRV() args: 0, res: 0, upd: 0;
       u7wSq: // global
           Sp = Sp + 8;
           call _c7wRR() args: 0, res: 0, upd: 0;
     }
 },
 _c7wRV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wRV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wRR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wRR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.553049469 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$c>_closure" {
     GHC.Exception.$fOrdArithException_$c>_closure:
         const GHC.Exception.$fOrdArithException_$c>_info;
 },
 GHC.Exception.$fOrdArithException_$c>_entry() //  [R2, R3]
         { info_tbl: [(c7wTW,
                       label: GHC.Exception.$fOrdArithException_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wTW: // global
           _s7w0k::P64 = R3;
           R3 = R2;
           R2 = _s7w0k::P64;
           call GHC.Exception.$fOrdArithException_$c<_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.557709618 UTC

[section ""data" . GHC.Exception.$fOrdArithException_$cmin_closure" {
     GHC.Exception.$fOrdArithException_$cmin_closure:
         const GHC.Exception.$fOrdArithException_$cmin_info;
 },
 GHC.Exception.$fOrdArithException_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c7wUi,
                       label: GHC.Exception.$fOrdArithException_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wUi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7wUj; else goto c7wUk;
       c7wUj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$fOrdArithException_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7wUk: // global
           I64[Sp - 16] = block_c7wU7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7wW6; else goto c7wU8;
       u7wW6: // global
           call _c7wU7(R1) args: 0, res: 0, upd: 0;
       c7wU8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wU7() //  [R1]
         { info_tbl: [(c7wU7,
                       label: block_c7wU7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wU7: // global
           _s7w0l::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c7wUb;
               case 2 : goto c7wUc;
               case 3 : goto c7wUd;
               case 4 : goto c7wUe;
               case 5 : goto c7wUf;
               case 6 : goto c7wUg;
           }
       c7wUg: // global
           R1 = _s7w0l::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7wUf: // global
           I64[Sp + 8] = block_c7wVD_info;
           R1 = _s7w0l::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wW5; else goto c7wVF;
       u7wW5: // global
           call _c7wVD(R1) args: 0, res: 0, upd: 0;
       c7wVF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wUe: // global
           I64[Sp + 8] = block_c7wVk_info;
           R1 = _s7w0l::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wW4; else goto c7wVm;
       u7wW4: // global
           call _c7wVk(R1) args: 0, res: 0, upd: 0;
       c7wVm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wUd: // global
           I64[Sp + 8] = block_c7wUX_info;
           R1 = _s7w0l::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wW3; else goto c7wUZ;
       u7wW3: // global
           call _c7wUX(R1) args: 0, res: 0, upd: 0;
       c7wUZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wUc: // global
           I64[Sp + 8] = block_c7wUw_info;
           R1 = _s7w0l::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wW2; else goto c7wUy;
       u7wW2: // global
           call _c7wUw(R1) args: 0, res: 0, upd: 0;
       c7wUy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7wUb: // global
           I64[Sp + 8] = block_c7wUn_info;
           R1 = _s7w0l::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7wW1; else goto c7wUp;
       u7wW1: // global
           call _c7wUn() args: 0, res: 0, upd: 0;
       c7wUp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7wVD() //  [R1]
         { info_tbl: [(c7wVD,
                       label: block_c7wVD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wVD: // global
           if (R1 & 7 == 6) goto c7wVP; else goto c7wVL;
       c7wVP: // global
           R1 = GHC.Exception.Denormal_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7wVL: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wVk() //  [R1]
         { info_tbl: [(c7wVk,
                       label: block_c7wVk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wVk: // global
           _c7wVU::P64 = R1 & 7;
           if (_c7wVU::P64 == 5) goto c7wVA; else goto u7wW0;
       u7wW0: // global
           if (_c7wVU::P64 == 6) goto c7wVA; else goto c7wVs;
       c7wVA: // global
           R1 = GHC.Exception.DivideByZero_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7wVs: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wUX() //  [R1]
         { info_tbl: [(c7wUX,
                       label: block_c7wUX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wUX: // global
           _c7wVV::P64 = R1 & 7;
           if (_c7wVV::P64 < 4) goto c7wV5; else goto u7wVZ;
       c7wV5: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u7wVZ: // global
           if (_c7wVV::P64 != 5) goto c7wVh; else goto c7wVh;
       c7wVh: // global
           R1 = GHC.Exception.LossOfPrecision_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wUw() //  [R1]
         { info_tbl: [(c7wUw,
                       label: block_c7wUw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wUw: // global
           _c7wVW::P64 = R1 & 7;
           if (_c7wVW::P64 >= 6) goto c7wUU; else goto u7wVX;
       u7wVX: // global
           if (_c7wVW::P64 < 3) goto c7wUE; else goto u7wVY;
       c7wUE: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u7wVY: // global
           if (_c7wVW::P64 != 4) goto c7wUU; else goto c7wUU;
       c7wUU: // global
           R1 = GHC.Exception.Underflow_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7wUn() //  []
         { info_tbl: [(c7wUn,
                       label: block_c7wUn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wUn: // global
           R1 = GHC.Exception.Overflow_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.573575454 UTC

[section ""data" . GHC.Exception.$fOrdArithException_closure" {
     GHC.Exception.$fOrdArithException_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Exception.$fEqArithException_closure+1;
         const GHC.Exception.$fOrdArithException_$ccompare_closure+2;
         const GHC.Exception.$fOrdArithException_$c<_closure+2;
         const GHC.Exception.$fOrdArithException_$c<=_closure+2;
         const GHC.Exception.$fOrdArithException_$c>_closure+2;
         const GHC.Exception.$fOrdArithException_$c>=_closure+2;
         const GHC.Exception.$fOrdArithException_$cmax_closure+2;
         const GHC.Exception.$fOrdArithException_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.575960374 UTC

[section ""cstring" . GHC.Exception.$trModule4_bytes" {
     GHC.Exception.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.577670136 UTC

[section ""data" . GHC.Exception.$trModule3_closure" {
     GHC.Exception.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.579320233 UTC

[section ""cstring" . GHC.Exception.$trModule2_bytes" {
     GHC.Exception.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.580932311 UTC

[section ""data" . GHC.Exception.$trModule1_closure" {
     GHC.Exception.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.58278501 UTC

[section ""data" . GHC.Exception.$trModule_closure" {
     GHC.Exception.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exception.$trModule3_closure+1;
         const GHC.Exception.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.58447123 UTC

[section ""data" . $krep_r7t8y_closure" {
     $krep_r7t8y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.586222566 UTC

[section ""data" . $krep1_r7t8z_closure" {
     $krep1_r7t8z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.58790088 UTC

[section ""data" . $krep2_r7t8A_closure" {
     $krep2_r7t8A_closure:
         const :_con_info;
         const $krep1_r7t8z_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.589594354 UTC

[section ""data" . $krep3_r7t8B_closure" {
     $krep3_r7t8B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep2_r7t8A_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.59121814 UTC

[section ""data" . GHC.Exception.$tcException1_closure" {
     GHC.Exception.$tcException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_r7t8y_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.592894463 UTC

[section ""data" . $krep4_r7t8C_closure" {
     $krep4_r7t8C_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.594954642 UTC

[section ""data" . $krep5_r7t8D_closure" {
     $krep5_r7t8D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7t8C_closure+2;
         const $krep3_r7t8B_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.596619751 UTC

[section ""data" . $krep6_r7t8E_closure" {
     $krep6_r7t8E_closure:
         const :_con_info;
         const $krep4_r7t8C_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.598354394 UTC

[section ""data" . $krep7_r7t8F_closure" {
     $krep7_r7t8F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.600419859 UTC

[section ""data" . $krep8_r7t8G_closure" {
     $krep8_r7t8G_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.602215359 UTC

[section ""data" . $krep9_r7t8H_closure" {
     $krep9_r7t8H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeable_closure;
         const $krep8_r7t8G_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.603938691 UTC

[section ""data" . $krep10_r7t8I_closure" {
     $krep10_r7t8I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Show.$tcShow_closure;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.605963742 UTC

[section ""cstring" . GHC.Exception.$fExceptionSomeException3_bytes" {
     GHC.Exception.$fExceptionSomeException3_bytes:
         I8[] [83,111,109,101,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.607487583 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException2_closure" {
     GHC.Exception.$fExceptionSomeException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionSomeException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.609175634 UTC

[section ""data" . GHC.Exception.$tcSomeException_closure" {
     GHC.Exception.$tcSomeException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionSomeException2_closure+1;
         const GHC.Types.krep$*_closure;
         const 13267649630904555636;
         const 2959581124447004473;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.611015753 UTC

[section ""data" . $krep11_r7t8J_closure" {
     $krep11_r7t8J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcSomeException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.612719727 UTC

[section ""data" . $krep12_r7t8K_closure" {
     $krep12_r7t8K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r7t8C_closure+2;
         const $krep11_r7t8J_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.614465287 UTC

[section ""data" . $krep13_r7t8L_closure" {
     $krep13_r7t8L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r7t8J_closure+1;
         const $krep7_r7t8F_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.616744062 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException1_closure" {
     GHC.Exception.$fExceptionSomeException1_closure:
         const GHC.Exception.$fExceptionSomeException1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionSomeException1_entry() //  [R1]
         { info_tbl: [(c7wXE,
                       label: GHC.Exception.$fExceptionSomeException1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wXE: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7wXF; else goto c7wXG;
       c7wXF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wXG: // global
           (_c7wXw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7wXw::I64 == 0) goto c7wXy; else goto c7wXx;
       c7wXy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7wXx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7wXw::I64;
           I64[Sp - 24] = block_c7wXz_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionSomeException2_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 2959581124447004473;
           R2 = 13267649630904555636;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7wXz() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7wXz,
                       label: block_c7wXz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wXz: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7wXA() args: 0, res: 0, upd: 0;
     }
 },
 _c7wXA() //  []
         { info_tbl: [(c7wXA,
                       label: block_c7wXA_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wXA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7wXJ; else goto c7wXI;
       c7wXJ: // global
           HpAlloc = 48;
           I64[Sp] = block_c7wXA_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7wXI: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.624921743 UTC

[section ""data" . GHC.Exception.$fExceptionSomeException_closure" {
     GHC.Exception.$fExceptionSomeException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionSomeException1_closure;
         const GHC.Exception.$fShowSomeException_closure+1;
         const GHC.Exception.$fExceptionSomeException_$ctoException_closure+1;
         const GHC.Base.Just_closure+1;
         const GHC.Exception.$fExceptionSomeException_$cdisplayException_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.626911194 UTC

[section ""cstring" . GHC.Exception.$tcException3_bytes" {
     GHC.Exception.$tcException3_bytes:
         I8[] [69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.628525421 UTC

[section ""data" . GHC.Exception.$tcException2_closure" {
     GHC.Exception.$tcException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tcException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.630761152 UTC

[section ""data" . GHC.Exception.$tcException_closure" {
     GHC.Exception.$tcException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tcException2_closure+1;
         const GHC.Exception.$tcException1_closure+4;
         const 5005890060182917952;
         const 3990091377913498827;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.632531788 UTC

[section ""data" . $krep14_r7t8M_closure" {
     $krep14_r7t8M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcException_closure+1;
         const $krep6_r7t8E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.634214037 UTC

[section ""data" . $krep15_r7t8N_closure" {
     $krep15_r7t8N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7t8D_closure+4;
         const $krep14_r7t8M_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.63587109 UTC

[section ""data" . $krep16_r7t8O_closure" {
     $krep16_r7t8O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7t8L_closure+4;
         const $krep15_r7t8N_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.637794832 UTC

[section ""data" . $krep17_r7t8P_closure" {
     $krep17_r7t8P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7t8K_closure+4;
         const $krep16_r7t8O_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.639498661 UTC

[section ""data" . $krep18_r7t8Q_closure" {
     $krep18_r7t8Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7t8I_closure+1;
         const $krep17_r7t8P_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.641213426 UTC

[section ""data" . GHC.Exception.$tc'C:Exception1_closure" {
     GHC.Exception.$tc'C:Exception1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7t8H_closure+1;
         const $krep18_r7t8Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.642873397 UTC

[section ""cstring" . GHC.Exception.$tc'C:Exception3_bytes" {
     GHC.Exception.$tc'C:Exception3_bytes:
         I8[] [39,67,58,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.6444789 UTC

[section ""data" . GHC.Exception.$tc'C:Exception2_closure" {
     GHC.Exception.$tc'C:Exception2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'C:Exception3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.646107861 UTC

[section ""data" . GHC.Exception.$tc'C:Exception_closure" {
     GHC.Exception.$tc'C:Exception_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'C:Exception2_closure+1;
         const GHC.Exception.$tc'C:Exception1_closure+4;
         const 10820889188949131006;
         const 4069342579395079435;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.64796196 UTC

[section ""data" . GHC.Exception.$tc'SomeException1_closure" {
     GHC.Exception.$tc'SomeException1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r7t8M_closure+1;
         const $krep12_r7t8K_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.649652232 UTC

[section ""cstring" . GHC.Exception.$tc'SomeException3_bytes" {
     GHC.Exception.$tc'SomeException3_bytes:
         I8[] [39,83,111,109,101,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.651207814 UTC

[section ""data" . GHC.Exception.$tc'SomeException2_closure" {
     GHC.Exception.$tc'SomeException2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'SomeException3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.652870003 UTC

[section ""data" . GHC.Exception.$tc'SomeException_closure" {
     GHC.Exception.$tc'SomeException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'SomeException2_closure+1;
         const GHC.Exception.$tc'SomeException1_closure+4;
         const 16790271558916100413;
         const 1524061796422226345;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.655688953 UTC

[section ""cstring" . GHC.Exception.$fExceptionErrorCall4_bytes" {
     GHC.Exception.$fExceptionErrorCall4_bytes:
         I8[] [69,114,114,111,114,67,97,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.657341543 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall3_closure" {
     GHC.Exception.$fExceptionErrorCall3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionErrorCall4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.658912693 UTC

[section ""data" . GHC.Exception.$tcErrorCall_closure" {
     GHC.Exception.$tcErrorCall_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionErrorCall3_closure+1;
         const GHC.Types.krep$*_closure;
         const 4106747399780464988;
         const 1398564497631027702;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.660706897 UTC

[section ""data" . $krep19_r7t8R_closure" {
     $krep19_r7t8R_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcErrorCall_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.662336946 UTC

[section ""data" . $krep20_r7t8S_closure" {
     $krep20_r7t8S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7t8B_closure+1;
         const $krep19_r7t8R_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.664030669 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation1_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7t8B_closure+1;
         const $krep20_r7t8S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.666170928 UTC

[section ""cstring" . GHC.Exception.$tc'ErrorCallWithLocation3_bytes" {
     GHC.Exception.$tc'ErrorCallWithLocation3_bytes:
         I8[] [39,69,114,114,111,114,67,97,108,108,87,105,116,104,76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.667666551 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation2_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'ErrorCallWithLocation3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.669322034 UTC

[section ""data" . GHC.Exception.$tc'ErrorCallWithLocation_closure" {
     GHC.Exception.$tc'ErrorCallWithLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'ErrorCallWithLocation2_closure+1;
         const GHC.Exception.$tc'ErrorCallWithLocation1_closure+4;
         const 14789594717732302892;
         const 17317233711857548947;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.67152622 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall2_closure" {
     GHC.Exception.$fExceptionErrorCall2_closure:
         const GHC.Exception.$fExceptionErrorCall2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall2_entry() //  [R1]
         { info_tbl: [(c7wYN,
                       label: GHC.Exception.$fExceptionErrorCall2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wYN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7wYO; else goto c7wYP;
       c7wYO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wYP: // global
           (_c7wYF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7wYF::I64 == 0) goto c7wYH; else goto c7wYG;
       c7wYH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7wYG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7wYF::I64;
           I64[Sp - 24] = block_c7wYI_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionErrorCall3_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 1398564497631027702;
           R2 = 4106747399780464988;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7wYI() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7wYI,
                       label: block_c7wYI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wYI: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7wYJ() args: 0, res: 0, upd: 0;
     }
 },
 _c7wYJ() //  []
         { info_tbl: [(c7wYJ,
                       label: block_c7wYJ_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wYJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7wYS; else goto c7wYR;
       c7wYS: // global
           HpAlloc = 48;
           I64[Sp] = block_c7wYJ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7wYR: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.679492573 UTC

[section ""cstring" . GHC.Exception.$fExceptionArithException16_bytes" {
     GHC.Exception.$fExceptionArithException16_bytes:
         I8[] [65,114,105,116,104,69,120,99,101,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.681091664 UTC

[section ""data" . GHC.Exception.$fExceptionArithException15_closure" {
     GHC.Exception.$fExceptionArithException15_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$fExceptionArithException16_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.683340966 UTC

[section ""data" . GHC.Exception.$tcArithException_closure" {
     GHC.Exception.$tcArithException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$fExceptionArithException15_closure+1;
         const GHC.Types.krep$*_closure;
         const 11275459110071720610;
         const 9614411694476093403;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.685055936 UTC

[section ""data" . GHC.Exception.$tc'Denormal1_closure" {
     GHC.Exception.$tc'Denormal1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exception.$tcArithException_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.686741843 UTC

[section ""cstring" . GHC.Exception.$tc'Overflow2_bytes" {
     GHC.Exception.$tc'Overflow2_bytes:
         I8[] [39,79,118,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.688288567 UTC

[section ""data" . GHC.Exception.$tc'Overflow1_closure" {
     GHC.Exception.$tc'Overflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Overflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.689946214 UTC

[section ""data" . GHC.Exception.$tc'Overflow_closure" {
     GHC.Exception.$tc'Overflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Overflow1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 868785644779029835;
         const 15802889491790460831;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.691791533 UTC

[section ""cstring" . GHC.Exception.$tc'Underflow2_bytes" {
     GHC.Exception.$tc'Underflow2_bytes:
         I8[] [39,85,110,100,101,114,102,108,111,119]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.693467592 UTC

[section ""data" . GHC.Exception.$tc'Underflow1_closure" {
     GHC.Exception.$tc'Underflow1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Underflow2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.695124814 UTC

[section ""data" . GHC.Exception.$tc'Underflow_closure" {
     GHC.Exception.$tc'Underflow_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Underflow1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 12747416996077452468;
         const 11539058234473019035;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.696857425 UTC

[section ""cstring" . GHC.Exception.$tc'LossOfPrecision2_bytes" {
     GHC.Exception.$tc'LossOfPrecision2_bytes:
         I8[] [39,76,111,115,115,79,102,80,114,101,99,105,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.69849348 UTC

[section ""data" . GHC.Exception.$tc'LossOfPrecision1_closure" {
     GHC.Exception.$tc'LossOfPrecision1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'LossOfPrecision2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.700157149 UTC

[section ""data" . GHC.Exception.$tc'LossOfPrecision_closure" {
     GHC.Exception.$tc'LossOfPrecision_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'LossOfPrecision1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 6720322370825216637;
         const 1452601476582167815;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.702370796 UTC

[section ""cstring" . GHC.Exception.$tc'DivideByZero2_bytes" {
     GHC.Exception.$tc'DivideByZero2_bytes:
         I8[] [39,68,105,118,105,100,101,66,121,90,101,114,111]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.704043507 UTC

[section ""data" . GHC.Exception.$tc'DivideByZero1_closure" {
     GHC.Exception.$tc'DivideByZero1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'DivideByZero2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.705688594 UTC

[section ""data" . GHC.Exception.$tc'DivideByZero_closure" {
     GHC.Exception.$tc'DivideByZero_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'DivideByZero1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 17029085746322105003;
         const 1338659094893400307;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.707965571 UTC

[section ""cstring" . GHC.Exception.$tc'Denormal3_bytes" {
     GHC.Exception.$tc'Denormal3_bytes:
         I8[] [39,68,101,110,111,114,109,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.709639589 UTC

[section ""data" . GHC.Exception.$tc'Denormal2_closure" {
     GHC.Exception.$tc'Denormal2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'Denormal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.71125383 UTC

[section ""data" . GHC.Exception.$tc'Denormal_closure" {
     GHC.Exception.$tc'Denormal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'Denormal2_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 3563997708427691429;
         const 10171683790716248215;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.713023384 UTC

[section ""cstring" . GHC.Exception.$tc'RatioZeroDenominator2_bytes" {
     GHC.Exception.$tc'RatioZeroDenominator2_bytes:
         I8[] [39,82,97,116,105,111,90,101,114,111,68,101,110,111,109,105,110,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.714635035 UTC

[section ""data" . GHC.Exception.$tc'RatioZeroDenominator1_closure" {
     GHC.Exception.$tc'RatioZeroDenominator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exception.$tc'RatioZeroDenominator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.716253661 UTC

[section ""data" . GHC.Exception.$tc'RatioZeroDenominator_closure" {
     GHC.Exception.$tc'RatioZeroDenominator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exception.$trModule_closure+1;
         const GHC.Exception.$tc'RatioZeroDenominator1_closure+1;
         const GHC.Exception.$tc'Denormal1_closure+1;
         const 12115498985276514171;
         const 17178069790958498690;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.718793056 UTC

[section ""data" . GHC.Exception.$fExceptionArithException14_closure" {
     GHC.Exception.$fExceptionArithException14_closure:
         const GHC.Exception.$fExceptionArithException14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.$fExceptionArithException14_entry() //  [R1]
         { info_tbl: [(c7wZS,
                       label: GHC.Exception.$fExceptionArithException14_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wZS: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7wZT; else goto c7wZU;
       c7wZT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7wZU: // global
           (_c7wZK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7wZK::I64 == 0) goto c7wZM; else goto c7wZL;
       c7wZM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7wZL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7wZK::I64;
           I64[Sp - 24] = block_c7wZN_info;
           R6 = 0;
           R5 = GHC.Exception.$fExceptionArithException15_closure+1;
           R4 = GHC.Exception.$trModule_closure+1;
           R3 = 9614411694476093403;
           R2 = 11275459110071720610;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c7wZN() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c7wZN,
                       label: block_c7wZN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wZN: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c7wZO() args: 0, res: 0, upd: 0;
     }
 },
 _c7wZO() //  []
         { info_tbl: [(c7wZO,
                       label: block_c7wZO_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7wZO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7wZX; else goto c7wZW;
       c7wZX: // global
           HpAlloc = 48;
           I64[Sp] = block_c7wZO_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c7wZW: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.727940626 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_$cfromException_closure" {
     GHC.Exception.$fExceptionErrorCall_$cfromException_closure:
         const GHC.Exception.$fExceptionErrorCall_$cfromException_info;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall_$cfromException_entry() //  [R2]
         { info_tbl: [(c7x0x,
                       label: GHC.Exception.$fExceptionErrorCall_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x0x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7x0B; else goto c7x0C;
       c7x0B: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7x0C: // global
           I64[Sp - 8] = block_c7x0u_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7x0X; else goto c7x0v;
       u7x0X: // global
           call _c7x0u(R1) args: 0, res: 0, upd: 0;
       c7x0v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7x0u() //  [R1]
         { info_tbl: [(c7x0u,
                       label: block_c7x0u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x0u: // global
           I64[Sp - 8] = block_c7x0A_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7x0A() //  [R1]
         { info_tbl: [(c7x0A,
                       label: block_c7x0A_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x0A: // global
           I64[Sp] = block_c7x0H_info;
           R3 = GHC.Exception.$fExceptionErrorCall2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7x0H() //  [R1]
         { info_tbl: [(c7x0H,
                       label: block_c7x0H_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x0H: // global
           if (R1 & 7 == 1) goto c7x0O; else goto c7x0S;
       c7x0O: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7x0S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7x0V; else goto c7x0U;
       c7x0V: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7x0U: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.736886269 UTC

[section ""data" . GHC.Exception.$fExceptionErrorCall_closure" {
     GHC.Exception.$fExceptionErrorCall_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionErrorCall2_closure;
         const GHC.Exception.$fShowErrorCall_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$cfromException_closure+1;
         const GHC.Exception.$fExceptionErrorCall_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.Exception.$fExceptionErrorCall_$ctoException_closure" {
     GHC.Exception.$fExceptionErrorCall_$ctoException_closure:
         const GHC.Exception.$fExceptionErrorCall_$ctoException_info;
         const 0;
 },
 GHC.Exception.$fExceptionErrorCall_$ctoException_entry() //  [R2]
         { info_tbl: [(c7x1t,
                       label: GHC.Exception.$fExceptionErrorCall_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x1t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7x1x; else goto c7x1w;
       c7x1x: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7x1w: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionErrorCall_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.742084183 UTC

[section ""data" . GHC.Exception.errorCallException_closure" {
     GHC.Exception.errorCallException_closure:
         const GHC.Exception.errorCallException_info;
         const 0;
 },
 GHC.Exception.errorCallException_entry() //  [R2]
         { info_tbl: [(c7x1L,
                       label: GHC.Exception.errorCallException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x1L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7x1P; else goto c7x1O;
       c7x1P: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.errorCallException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7x1O: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = GHC.Types.[]_closure+1;
           R2 = Hp - 15;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.745668868 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException3_bytes" {
     GHC.Exception.errorCallWithCallStackException3_bytes:
         I8[] [58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.747292386 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException2_bytes" {
     GHC.Exception.errorCallWithCallStackException2_bytes:
         I8[] [32,105,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.751194377 UTC

[section ""data" . GHC.Exception.$wprettySrcLoc_closure" {
     GHC.Exception.$wprettySrcLoc_closure:
         const GHC.Exception.$wprettySrcLoc_info;
 },
 sat_s7w1a_entry() //  [R1]
         { info_tbl: [(c7x2J,
                       label: sat_s7w1a_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x2J: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7w1b_entry() //  [R1]
         { info_tbl: [(c7x2M,
                       label: sat_s7w1b_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x2M: // global
           _s7w1b::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7x2N; else goto c7x2O;
       c7x2O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7x2Q; else goto c7x2P;
       c7x2Q: // global
           HpAlloc = 24;
           goto c7x2N;
       c7x2N: // global
           R1 = _s7w1b::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x2P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7w1b::P64;
           _s7w0T::P64 = P64[_s7w1b::P64 + 16];
           _s7w0U::P64 = P64[_s7w1b::P64 + 24];
           I64[Hp - 16] = sat_s7w1a_info;
           P64[Hp] = _s7w0U::P64;
           R3 = Hp - 16;
           R2 = _s7w0T::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7w1c_entry() //  [R1]
         { info_tbl: [(c7x2R,
                       label: sat_s7w1c_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x2R: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7x2V; else goto c7x2U;
       c7x2V: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x2U: // global
           _s7w0T::P64 = P64[R1 + 16];
           _s7w0U::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s7w1b_info;
           P64[Hp - 8] = _s7w0T::P64;
           P64[Hp] = _s7w0U::P64;
           R3 = Hp - 24;
           R2 = GHC.Exception.errorCallWithCallStackException2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7w1d_entry() //  [R1]
         { info_tbl: [(c7x2W,
                       label: sat_s7w1d_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x2W: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7x2Y; else goto c7x2Z;
       c7x2Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x2Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c7x2q_info;
           _s7w0T::P64 = P64[R1 + 16];
           _s7w0U::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _s7w0T::P64;
           P64[Sp - 24] = _s7w0U::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7x34; else goto c7x2r;
       u7x34: // global
           call _c7x2q(R1) args: 0, res: 0, upd: 0;
       c7x2r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7x2q() //  [R1]
         { info_tbl: [(c7x2q,
                       label: block_c7x2q_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x2q: // global
           I64[Sp] = block_c7x2v_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7x2v() //  [R1, R2]
         { info_tbl: [(c7x2v,
                       label: block_c7x2v_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x2v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7x33; else goto c7x32;
       c7x33: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7x32: // global
           I64[Hp - 48] = sat_s7w1c_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7w1e_entry() //  [R1]
         { info_tbl: [(c7x35,
                       label: sat_s7w1e_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x35: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7x39; else goto c7x38;
       c7x39: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x38: // global
           _s7w0T::P64 = P64[R1 + 16];
           _s7w0U::P64 = P64[R1 + 24];
           _s7w0X::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s7w1d_info;
           P64[Hp - 16] = _s7w0T::P64;
           P64[Hp - 8] = _s7w0U::P64;
           P64[Hp] = _s7w0X::P64;
           R3 = Hp - 32;
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7w1f_entry() //  [R1]
         { info_tbl: [(c7x3a,
                       label: sat_s7w1f_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x3a: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7x3c; else goto c7x3d;
       c7x3c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x3d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c7x2b_info;
           _s7w0T::P64 = P64[R1 + 16];
           _s7w0U::P64 = P64[R1 + 24];
           _s7w0X::P64 = P64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s7w0T::P64;
           P64[Sp - 32] = _s7w0U::P64;
           P64[Sp - 24] = _s7w0X::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u7x3i; else goto c7x2c;
       u7x3i: // global
           call _c7x2b(R1) args: 0, res: 0, upd: 0;
       c7x2c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7x2b() //  [R1]
         { info_tbl: [(c7x2b,
                       label: block_c7x2b_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x2b: // global
           I64[Sp] = block_c7x2g_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7x2g() //  [R1, R2]
         { info_tbl: [(c7x2g,
                       label: block_c7x2g_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x2g: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7x3h; else goto c7x3g;
       c7x3h: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7x3g: // global
           I64[Hp - 56] = sat_s7w1e_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 14;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7w1g_entry() //  [R1]
         { info_tbl: [(c7x3j,
                       label: sat_s7w1g_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x3j: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7x3n; else goto c7x3m;
       c7x3n: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x3m: // global
           _s7w0T::P64 = P64[R1 + 16];
           _s7w0U::P64 = P64[R1 + 24];
           _s7w0W::P64 = P64[R1 + 32];
           _s7w0X::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_s7w1f_info;
           P64[Hp - 24] = _s7w0T::P64;
           P64[Hp - 16] = _s7w0U::P64;
           P64[Hp - 8] = _s7w0W::P64;
           P64[Hp] = _s7w0X::P64;
           R3 = Hp - 40;
           R2 = GHC.Exception.errorCallWithCallStackException3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exception.$wprettySrcLoc_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7x3o,
                       label: GHC.Exception.$wprettySrcLoc_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x3o: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7x3s; else goto c7x3r;
       c7x3s: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.$wprettySrcLoc_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7x3r: // global
           I64[Hp - 40] = sat_s7w1g_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R3 = Hp - 40;
           R2 = R4;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.776446422 UTC

[section ""data" . GHC.Exception.prettySrcLoc_closure" {
     GHC.Exception.prettySrcLoc_closure:
         const GHC.Exception.prettySrcLoc_info;
 },
 GHC.Exception.prettySrcLoc_entry() //  [R2]
         { info_tbl: [(c7x4D,
                       label: GHC.Exception.prettySrcLoc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x4D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7x4E; else goto c7x4F;
       c7x4E: // global
           R2 = R2;
           R1 = GHC.Exception.prettySrcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7x4F: // global
           I64[Sp - 8] = block_c7x4A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7x4J; else goto c7x4B;
       u7x4J: // global
           call _c7x4A(R1) args: 0, res: 0, upd: 0;
       c7x4B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7x4A() //  [R1]
         { info_tbl: [(c7x4A,
                       label: block_c7x4A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x4A: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$wprettySrcLoc_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.78270814 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException7_bytes" {
     GHC.Exception.errorCallWithCallStackException7_bytes:
         I8[] [67,97,108,108,83,116,97,99,107,32,40,102,114,111,109,32,72,97,115,67,97,108,108,83,116,97,99,107,41,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.784619362 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException6_closure" {
     GHC.Exception.errorCallWithCallStackException6_closure:
         const GHC.Exception.errorCallWithCallStackException6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException6_entry() //  [R1]
         { info_tbl: [(c7x51,
                       label: GHC.Exception.errorCallWithCallStackException6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x51: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7x52; else goto c7x53;
       c7x52: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x53: // global
           (_c7x4Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7x4Y::I64 == 0) goto c7x50; else goto c7x4Z;
       c7x50: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7x4Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7x4Y::I64;
           R2 = GHC.Exception.errorCallWithCallStackException7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.788562529 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException4_bytes" {
     GHC.Exception.errorCallWithCallStackException4_bytes:
         I8[] [44,32,99,97,108,108,101,100,32,97,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.791080849 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException1_closure" {
     GHC.Exception.errorCallWithCallStackException1_closure:
         const GHC.Exception.errorCallWithCallStackException1_info;
 },
 sat_s7w1C_entry() //  [R1]
         { info_tbl: [(c7x5B,
                       label: sat_s7w1C_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x5B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7x5C; else goto c7x5D;
       c7x5C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x5D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7x5y_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7x5H; else goto c7x5z;
       u7x5H: // global
           call _c7x5y(R1) args: 0, res: 0, upd: 0;
       c7x5z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7x5y() //  [R1]
         { info_tbl: [(c7x5y,
                       label: block_c7x5y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x5y: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Exception.$wprettySrcLoc_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7w1D_entry() //  [R1]
         { info_tbl: [(c7x5I,
                       label: sat_s7w1D_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x5I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7x5M; else goto c7x5L;
       c7x5M: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x5L: // global
           _s7w1t::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_s7w1C_info;
           P64[Hp] = _s7w1t::P64;
           R3 = Hp - 16;
           R2 = GHC.Exception.errorCallWithCallStackException4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7w1E_entry() //  [R1]
         { info_tbl: [(c7x5N,
                       label: sat_s7w1E_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x5N: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7x5O; else goto c7x5P;
       c7x5O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x5P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7x5l_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7x5T; else goto c7x5m;
       u7x5T: // global
           call _c7x5l(R1) args: 0, res: 0, upd: 0;
       c7x5m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7x5l() //  [R1]
         { info_tbl: [(c7x5l,
                       label: block_c7x5l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x5l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7x5S; else goto c7x5R;
       c7x5S: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7x5R: // global
           _s7w1s::P64 = P64[R1 + 7];
           _s7w1t::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s7w1D_info;
           P64[Hp] = _s7w1t::P64;
           R3 = Hp - 16;
           R2 = _s7w1s::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.errorCallWithCallStackException1_entry() //  [R2]
         { info_tbl: [(c7x5U,
                       label: GHC.Exception.errorCallWithCallStackException1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x5U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7x5Y; else goto c7x5X;
       c7x5Y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.errorCallWithCallStackException1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7x5X: // global
           I64[Hp - 16] = sat_s7w1E_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Exception.errorCallWithCallStackException5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.805827538 UTC

[section ""data" . GHC.Exception.prettyCallStackLines_closure" {
     GHC.Exception.prettyCallStackLines_closure:
         const GHC.Exception.prettyCallStackLines_info;
         const 0;
 },
 sat_s7w1J_entry() //  [R1]
         { info_tbl: [(c7x6G,
                       label: sat_s7w1J_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x6G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7x6H; else goto c7x6I;
       c7x6H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x6I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException1_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.prettyCallStackLines_entry() //  [R2]
         { info_tbl: [(c7x6N,
                       label: GHC.Exception.prettyCallStackLines_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x6N: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7x6O; else goto c7x6P;
       c7x6O: // global
           R2 = R2;
           R1 = GHC.Exception.prettyCallStackLines_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7x6P: // global
           I64[Sp - 8] = block_c7x6x_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7x6x() //  [R1]
         { info_tbl: [(c7x6x,
                       label: block_c7x6x_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x6x: // global
           if (R1 & 7 == 1) goto c7x6K; else goto c7x6L;
       c7x6K: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7x6L: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7x6V; else goto c7x6U;
       c7x6V: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7x6U: // global
           I64[Hp - 40] = sat_s7w1J_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.814045507 UTC

[section ""cstring" . GHC.Exception.errorCallWithCallStackException8_bytes" {
     GHC.Exception.errorCallWithCallStackException8_bytes:
         I8[] [10]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.81611685 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException_xs_closure" {
     GHC.Exception.errorCallWithCallStackException_xs_closure:
         const GHC.Exception.errorCallWithCallStackException_xs_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.errorCallWithCallStackException_xs_entry() //  [R1]
         { info_tbl: [(c7x7q,
                       label: GHC.Exception.errorCallWithCallStackException_xs_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x7q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7x7r; else goto c7x7s;
       c7x7r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x7s: // global
           (_c7x7n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7x7n::I64 == 0) goto c7x7p; else goto c7x7o;
       c7x7p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7x7o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7x7n::I64;
           R2 = GHC.Exception.errorCallWithCallStackException8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.821572727 UTC

[section ""data" . GHC.Exception.prettyCallStack_closure" {
     GHC.Exception.prettyCallStack_closure:
         const GHC.Exception.prettyCallStack_info;
         const 0;
 },
 sat_s7w1P_entry() //  [R1]
         { info_tbl: [(c7x7Q,
                       label: sat_s7w1P_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x7Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7x7R; else goto c7x7S;
       c7x7R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x7S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7x7O_info;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException1_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7x7O() //  [R1]
         { info_tbl: [(c7x7O,
                       label: block_c7x7O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x7O: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.prettyCallStack_entry() //  [R2]
         { info_tbl: [(c7x80,
                       label: GHC.Exception.prettyCallStack_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x80: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7x81; else goto c7x82;
       c7x81: // global
           R2 = R2;
           R1 = GHC.Exception.prettyCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7x82: // global
           I64[Sp - 8] = block_c7x7F_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7x7F() //  [R1]
         { info_tbl: [(c7x7F,
                       label: block_c7x7F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x7F: // global
           if (R1 & 7 == 1) goto c7x7X; else goto c7x7Y;
       c7x7X: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7x7Y: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7x88; else goto c7x87;
       c7x88: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7x87: // global
           I64[Hp - 40] = sat_s7w1P_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.833029411 UTC

[section ""data" . GHC.Exception.errorCallWithCallStackException_closure" {
     GHC.Exception.errorCallWithCallStackException_closure:
         const GHC.Exception.errorCallWithCallStackException_info;
         const 0;
 },
 sat_s7w21_entry() //  [R1]
         { info_tbl: [(c7x93,
                       label: sat_s7w21_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x93: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7x94; else goto c7x95;
       c7x94: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x95: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7x91_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7x91() //  [R1]
         { info_tbl: [(c7x91,
                       label: block_c7x91_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x91: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException9_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 n_s7w1W_entry() //  [R1]
         { info_tbl: [(c7x9d,
                       label: n_s7w1W_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x9d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7x9e; else goto c7x9f;
       c7x9e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x9f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7x8R_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7x9m; else goto c7x8S;
       u7x9m: // global
           call _c7x8R(R1) args: 0, res: 0, upd: 0;
       c7x8S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7x8R() //  [R1]
         { info_tbl: [(c7x8R,
                       label: block_c7x8R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x8R: // global
           if (R1 & 7 == 1) goto c7x9a; else goto c7x9b;
       c7x9a: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7x9b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7x9l; else goto c7x9k;
       c7x9l: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7x9k: // global
           I64[Hp - 40] = sat_s7w21_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException11_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7w26_entry() //  [R1]
         { info_tbl: [(c7x9B,
                       label: sat_s7w26_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x9B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7x9C; else goto c7x9D;
       c7x9C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7x9D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7w2f_entry() //  [R1]
         { info_tbl: [(c7xa0,
                       label: sat_s7w2f_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xa0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7xa1; else goto c7xa2;
       c7xa1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7xa2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Exception.errorCallWithCallStackException1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 go_s7w2a_entry() //  [R1, R2]
         { info_tbl: [(c7xa7,
                       label: go_s7w2a_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xa7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7xa8; else goto c7xa9;
       c7xa8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7xa9: // global
           I64[Sp - 24] = block_c7x9P_info;
           _s7w2a::P64 = R1;
           _s7w1W::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s7w1W::P64;
           P64[Sp - 8] = _s7w2a::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7xag; else goto c7x9Q;
       u7xag: // global
           call _c7x9P(R1) args: 0, res: 0, upd: 0;
       c7x9Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7x9P() //  [R1]
         { info_tbl: [(c7x9P,
                       label: block_c7x9P_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x9P: // global
           if (R1 & 7 == 1) goto c7xa4; else goto c7xa5;
       c7xa4: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7xa5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c7xaf; else goto c7xae;
       c7xaf: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7xae: // global
           _s7w2d::P64 = P64[R1 + 6];
           _s7w2e::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = _s7w2e::P64;
           I64[Hp - 40] = sat_s7w2f_info;
           P64[Hp - 24] = _s7w2d::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s7w2i_entry() //  [R1]
         { info_tbl: [(c7xaj,
                       label: sat_s7w2i_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xaj: // global
           _s7w2i::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c7xak; else goto c7xal;
       c7xal: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7xan; else goto c7xam;
       c7xan: // global
           HpAlloc = 16;
           goto c7xak;
       c7xak: // global
           R1 = _s7w2i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7xam: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7w2i::P64;
           _s7w1W::P64 = P64[_s7w2i::P64 + 16];
           _s7w22::P64 = P64[_s7w2i::P64 + 24];
           I64[Hp - 8] = go_s7w2a_info;
           P64[Hp] = _s7w1W::P64;
           I64[Sp - 24] = block_c7xah_info;
           R2 = _s7w22::P64;
           R1 = Hp - 7;
           Sp = Sp - 24;
           call go_s7w2a_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c7xah() //  [R1]
         { info_tbl: [(c7xah,
                       label: block_c7xah_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xah: // global
           R3 = R1;
           R2 = GHC.Exception.errorCallWithCallStackException_xs_closure;
           Sp = Sp + 8;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7w2k_entry() //  [R1]
         { info_tbl: [(c7xav,
                       label: sat_s7w2k_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xav: // global
           _s7w2k::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c7xaw; else goto c7xax;
       c7xax: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7xaz; else goto c7xay;
       c7xaz: // global
           HpAlloc = 24;
           goto c7xaw;
       c7xaw: // global
           R1 = _s7w2k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7xay: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7w2k::P64;
           _s7w1S::P64 = P64[_s7w2k::P64 + 16];
           _s7w1V::P64 = P64[_s7w2k::P64 + 24];
           I64[Hp - 16] = n_s7w1W_info;
           P64[Hp] = _s7w1V::P64;
           I64[Sp - 32] = block_c7x9n_info;
           R2 = _s7w1S::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Stack.Types.getCallStack_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c7x9n() //  [R1]
         { info_tbl: [(c7x9n,
                       label: block_c7x9n_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x9n: // global
           _c7x8N::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7xas; else goto c7xat;
       c7xas: // global
           I64[Sp + 8] = block_c7x9r_info;
           R1 = _c7x8N::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7xaP; else goto c7x9s;
       u7xaP: // global
           call _c7x9r(R1) args: 0, res: 0, upd: 0;
       c7x9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       c7xat: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7xaN; else goto c7xaM;
       c7xaN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7xaM: // global
           I64[Hp - 48] = sat_s7w2i_info;
           P64[Hp - 32] = _c7x8N::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Exception.errorCallWithCallStackException6_closure;
           P64[Hp] = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 _c7x9r() //  [R1]
         { info_tbl: [(c7x9r,
                       label: block_c7x9r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x9r: // global
           if (R1 & 7 == 1) goto c7xaE; else goto c7xaG;
       c7xaE: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7xaG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7xaJ; else goto c7xaI;
       c7xaJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7xaI: // global
           _s7w24::P64 = P64[R1 + 6];
           _s7w25::P64 = P64[R1 + 14];
           I64[Hp - 40] = sat_s7w26_info;
           P64[Hp - 24] = _s7w25::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _s7w24::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.OldList.intercalate1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s7w2m_entry() //  [R1]
         { info_tbl: [(c7xaR,
                       label: sat_s7w2m_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xaR: // global
           _s7w2m::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7xaS; else goto c7xaT;
       c7xaT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7xaV; else goto c7xaU;
       c7xaV: // global
           HpAlloc = 56;
           goto c7xaS;
       c7xaS: // global
           R1 = _s7w2m::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7xaU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7w2m::P64;
           _s7w1R::P64 = P64[_s7w2m::P64 + 16];
           _s7w1S::P64 = P64[_s7w2m::P64 + 24];
           _s7w1V::P64 = P64[_s7w2m::P64 + 32];
           I64[Hp - 48] = sat_s7w2k_info;
           P64[Hp - 32] = _s7w1S::P64;
           P64[Hp - 24] = _s7w1V::P64;
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = _s7w1R::P64;
           P64[Hp] = Hp - 48;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Exception.errorCallWithCallStackException_entry() //  [R2, R3]
         { info_tbl: [(c7xaZ,
                       label: GHC.Exception.errorCallWithCallStackException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xaZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7xb0; else goto c7xb1;
       c7xb0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7xb1: // global
           I64[Sp - 24] = block_c7x8D_info;
           R1 = GHC.Stack.CCS.currentCallStack_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7x8D() //  [R1]
         { info_tbl: [(c7x8D,
                       label: block_c7x8D_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7x8D: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7xb4; else goto c7xb3;
       c7xb4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7xb3: // global
           I64[Hp - 32] = sat_s7w2m_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = (Hp + -32) & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.868721821 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_$cfromException_closure" {
     GHC.Exception.$fExceptionArithException_$cfromException_closure:
         const GHC.Exception.$fExceptionArithException_$cfromException_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$cfromException_entry() //  [R2]
         { info_tbl: [(c7xd9,
                       label: GHC.Exception.$fExceptionArithException_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xd9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7xdd; else goto c7xde;
       c7xdd: // global
           R2 = R2;
           R1 = GHC.Exception.$fExceptionArithException_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7xde: // global
           I64[Sp - 8] = block_c7xd6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7xdz; else goto c7xd7;
       u7xdz: // global
           call _c7xd6(R1) args: 0, res: 0, upd: 0;
       c7xd7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7xd6() //  [R1]
         { info_tbl: [(c7xd6,
                       label: block_c7xd6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xd6: // global
           I64[Sp - 8] = block_c7xdc_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7xdc() //  [R1]
         { info_tbl: [(c7xdc,
                       label: block_c7xdc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xdc: // global
           I64[Sp] = block_c7xdj_info;
           R3 = GHC.Exception.$fExceptionArithException14_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7xdj() //  [R1]
         { info_tbl: [(c7xdj,
                       label: block_c7xdj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xdj: // global
           if (R1 & 7 == 1) goto c7xdq; else goto c7xdu;
       c7xdq: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7xdu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7xdx; else goto c7xdw;
       c7xdx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7xdw: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.877573134 UTC

[section ""data" . GHC.Exception.$fExceptionArithException_closure" {
     GHC.Exception.$fExceptionArithException_closure:
         const GHC.Exception.C:Exception_con_info;
         const GHC.Exception.$fExceptionArithException14_closure;
         const GHC.Exception.$fShowArithException_closure+1;
         const GHC.Exception.$fExceptionArithException_$ctoException_closure+1;
         const GHC.Exception.$fExceptionArithException_$cfromException_closure+1;
         const GHC.Exception.$fExceptionArithException_$cshow_closure+1;
         const 0;
 },
 section ""data" . GHC.Exception.$fExceptionArithException_$ctoException_closure" {
     GHC.Exception.$fExceptionArithException_$ctoException_closure:
         const GHC.Exception.$fExceptionArithException_$ctoException_info;
         const 0;
 },
 GHC.Exception.$fExceptionArithException_$ctoException_entry() //  [R2]
         { info_tbl: [(c7xe5,
                       label: GHC.Exception.$fExceptionArithException_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xe5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7xe9; else goto c7xe8;
       c7xe9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Exception.$fExceptionArithException_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7xe8: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = GHC.Exception.$fExceptionArithException_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.882226481 UTC

[section ""data" . GHC.Exception.underflowException_closure" {
     GHC.Exception.underflowException_closure:
         const GHC.Exception.underflowException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.underflowException_entry() //  [R1]
         { info_tbl: [(c7xeo,
                       label: GHC.Exception.underflowException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xeo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7xep; else goto c7xeq;
       c7xep: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7xeq: // global
           (_c7xel::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7xel::I64 == 0) goto c7xen; else goto c7xem;
       c7xen: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7xem: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7xel::I64;
           R2 = GHC.Exception.Underflow_closure+2;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.886701484 UTC

[section ""data" . GHC.Exception.ratioZeroDenomException_closure" {
     GHC.Exception.ratioZeroDenomException_closure:
         const GHC.Exception.ratioZeroDenomException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.ratioZeroDenomException_entry() //  [R1]
         { info_tbl: [(c7xeF,
                       label: GHC.Exception.ratioZeroDenomException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xeF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7xeG; else goto c7xeH;
       c7xeG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7xeH: // global
           (_c7xeC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7xeC::I64 == 0) goto c7xeE; else goto c7xeD;
       c7xeE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7xeD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7xeC::I64;
           R2 = GHC.Exception.RatioZeroDenominator_closure+6;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.890710454 UTC

[section ""data" . GHC.Exception.overflowException_closure" {
     GHC.Exception.overflowException_closure:
         const GHC.Exception.overflowException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.overflowException_entry() //  [R1]
         { info_tbl: [(c7xeW,
                       label: GHC.Exception.overflowException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xeW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7xeX; else goto c7xeY;
       c7xeX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7xeY: // global
           (_c7xeT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7xeT::I64 == 0) goto c7xeV; else goto c7xeU;
       c7xeV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7xeU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7xeT::I64;
           R2 = GHC.Exception.Overflow_closure+1;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.89472999 UTC

[section ""data" . GHC.Exception.divZeroException_closure" {
     GHC.Exception.divZeroException_closure:
         const GHC.Exception.divZeroException_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exception.divZeroException_entry() //  [R1]
         { info_tbl: [(c7xfd,
                       label: GHC.Exception.divZeroException_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xfd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7xfe; else goto c7xff;
       c7xfe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7xff: // global
           (_c7xfa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7xfa::I64 == 0) goto c7xfc; else goto c7xfb;
       c7xfc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7xfb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7xfa::I64;
           R2 = GHC.Exception.DivideByZero_closure+4;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionArithException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.899369601 UTC

[section ""data" . GHC.Exception.SomeException_closure" {
     GHC.Exception.SomeException_closure:
         const GHC.Exception.SomeException_info;
 },
 GHC.Exception.SomeException_entry() //  [R2, R3]
         { info_tbl: [(c7xft,
                       label: GHC.Exception.SomeException_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xft: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7xfx; else goto c7xfw;
       c7xfx: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.SomeException_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7xfw: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.903009516 UTC

[section ""data" . GHC.Exception.Overflow_closure" {
     GHC.Exception.Overflow_closure:
         const GHC.Exception.Overflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.904637069 UTC

[section ""data" . GHC.Exception.Underflow_closure" {
     GHC.Exception.Underflow_closure:
         const GHC.Exception.Underflow_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.906350983 UTC

[section ""data" . GHC.Exception.LossOfPrecision_closure" {
     GHC.Exception.LossOfPrecision_closure:
         const GHC.Exception.LossOfPrecision_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.907996041 UTC

[section ""data" . GHC.Exception.DivideByZero_closure" {
     GHC.Exception.DivideByZero_closure:
         const GHC.Exception.DivideByZero_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.910115943 UTC

[section ""data" . GHC.Exception.Denormal_closure" {
     GHC.Exception.Denormal_closure:
         const GHC.Exception.Denormal_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.911714777 UTC

[section ""data" . GHC.Exception.RatioZeroDenominator_closure" {
     GHC.Exception.RatioZeroDenominator_closure:
         const GHC.Exception.RatioZeroDenominator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.9136846 UTC

[section ""data" . GHC.Exception.ErrorCallWithLocation_closure" {
     GHC.Exception.ErrorCallWithLocation_closure:
         const GHC.Exception.ErrorCallWithLocation_info;
 },
 GHC.Exception.ErrorCallWithLocation_entry() //  [R2, R3]
         { info_tbl: [(c7xfP,
                       label: GHC.Exception.ErrorCallWithLocation_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xfP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7xfT; else goto c7xfS;
       c7xfT: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.ErrorCallWithLocation_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7xfS: // global
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.91757767 UTC

[section ""data" . GHC.Exception.C:Exception_closure" {
     GHC.Exception.C:Exception_closure:
         const GHC.Exception.C:Exception_info;
 },
 GHC.Exception.C:Exception_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c7xg5,
                       label: GHC.Exception.C:Exception_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xg5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7xg9; else goto c7xg8;
       c7xg9: // global
           HpAlloc = 48;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exception.C:Exception_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7xg8: // global
           I64[Hp - 40] = GHC.Exception.C:Exception_con_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.921912038 UTC

[GHC.Exception.SomeException_con_entry() //  [R1]
         { info_tbl: [(c7xgg,
                       label: GHC.Exception.SomeException_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,83,111,109,101,69,120,99,101,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xgg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.925072848 UTC

[section ""relreadonly" . GHC.Exception.ArithException_closure_tbl" {
     GHC.Exception.ArithException_closure_tbl:
         const GHC.Exception.Overflow_closure+1;
         const GHC.Exception.Underflow_closure+2;
         const GHC.Exception.LossOfPrecision_closure+3;
         const GHC.Exception.DivideByZero_closure+4;
         const GHC.Exception.Denormal_closure+5;
         const GHC.Exception.RatioZeroDenominator_closure+6;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.927411599 UTC

[GHC.Exception.Overflow_con_entry() //  [R1]
         { info_tbl: [(c7xgo,
                       label: GHC.Exception.Overflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,79,118,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xgo: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.930713708 UTC

[GHC.Exception.Underflow_con_entry() //  [R1]
         { info_tbl: [(c7xgv,
                       label: GHC.Exception.Underflow_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,85,110,100,101,114,102,108,111,119]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xgv: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.933747838 UTC

[GHC.Exception.LossOfPrecision_con_entry() //  [R1]
         { info_tbl: [(c7xgC,
                       label: GHC.Exception.LossOfPrecision_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,76,111,115,115,79,102,80,114,101,99,105,115,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xgC: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.936808203 UTC

[GHC.Exception.DivideByZero_con_entry() //  [R1]
         { info_tbl: [(c7xgJ,
                       label: GHC.Exception.DivideByZero_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,68,105,118,105,100,101,66,121,90,101,114,111]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xgJ: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.939938104 UTC

[GHC.Exception.Denormal_con_entry() //  [R1]
         { info_tbl: [(c7xgQ,
                       label: GHC.Exception.Denormal_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,68,101,110,111,114,109,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xgQ: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.943051659 UTC

[GHC.Exception.RatioZeroDenominator_con_entry() //  [R1]
         { info_tbl: [(c7xgX,
                       label: GHC.Exception.RatioZeroDenominator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,82,97,116,105,111,90,101,114,111,68,101,110,111,109,105,110,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xgX: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.946682752 UTC

[GHC.Exception.ErrorCallWithLocation_con_entry() //  [R1]
         { info_tbl: [(c7xh4,
                       label: GHC.Exception.ErrorCallWithLocation_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,69,114,114,111,114,67,97,108,108,87,105,116,104,76,111,99,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xh4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.949745432 UTC

[GHC.Exception.C:Exception_con_entry() //  [R1]
         { info_tbl: [(c7xhb,
                       label: GHC.Exception.C:Exception_con_info
                       rep:HeapRep 5 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,99,101,112,116,105,111,110,46,67,58,69,120,99,101,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7xhb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:46.952831352 UTC

[section ""relreadonly" . S7wbI_srt" {
     S7wbI_srt:
         const GHC.Exception.$w$cshowsPrec_closure;
         const GHC.Exception.$fExceptionArithException2_closure;
         const GHC.Exception.$fExceptionArithException4_closure;
         const GHC.Exception.$fExceptionArithException6_closure;
         const GHC.Exception.$fExceptionArithException8_closure;
         const GHC.Exception.$fExceptionArithException10_closure;
         const GHC.Exception.$fExceptionArithException12_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.Exception.$dmfromException_closure;
         const GHC.Exception.errorCallWithCallStackException10_closure;
         const GHC.Exception.errorCallWithCallStackException9_closure;
         const GHC.Exception.showCCSStack_closure;
         const GHC.Exception.errorCallWithCallStackException11_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.Exception.$fExceptionErrorCall_$cfromException_closure;
         const GHC.Exception.$fExceptionErrorCall2_closure;
         const GHC.Exception.$fExceptionErrorCall_closure;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
         const GHC.Exception.errorCallException_closure;
         const GHC.Exception.prettyCallStackLines_closure;
         const GHC.Exception.errorCallWithCallStackException6_closure;
         const GHC.Exception.errorCallWithCallStackException_xs_closure;
         const GHC.Exception.prettyCallStack_closure;
         const GHC.Exception.errorCallWithCallStackException_closure;
         const GHC.Stack.CCS.currentCallStack_closure;
         const GHC.Exception.$fExceptionArithException_$cfromException_closure;
         const GHC.Exception.$fExceptionArithException14_closure;
         const GHC.Exception.$fExceptionArithException_closure;
         const GHC.Exception.$fExceptionArithException_$ctoException_closure;
 }]

