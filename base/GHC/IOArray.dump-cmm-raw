
==================== Raw Cmm ====================
2018-03-16 16:03:08.01606557 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:08.018395111 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_$c/=_closure" {
     GHC.IOArray.$fEqIOArray_$c/=_closure:
         const GHC.IOArray.$fEqIOArray_$c/=_info;
 },
 GHC.IOArray.$fEqIOArray_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c80CF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80CJ; else goto c80CK;
       c80CJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IOArray.$fEqIOArray_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c80CK: // global
           I64[Sp - 16] = block_c80CC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u80D7; else goto c80CD;
       u80D7: // global
           call _c80CC(R1) args: 0, res: 0, upd: 0;
       c80CD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.$fEqIOArray_$c/=_info" {
     GHC.IOArray.$fEqIOArray_$c/=_info:
         const GHC.IOArray.$fEqIOArray_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c80CC() //  [R1]
         { []
         }
     {offset
       c80CC: // global
           I64[Sp] = block_c80CI_info;
           _s80xa::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80xa::P64;
           if (R1 & 7 != 0) goto u80D6; else goto c80CM;
       u80D6: // global
           call _c80CI(R1) args: 0, res: 0, upd: 0;
       c80CM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80CC_info" {
     block_c80CC_info:
         const _c80CC;
         const 1;
         const 30;
 },
 _c80CI() //  [R1]
         { []
         }
     {offset
       c80CI: // global
           if (P64[Sp + 8] == P64[R1 + 23]) goto c80D2; else goto c80CW;
       c80D2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c80CW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80CI_info" {
     block_c80CI_info:
         const _c80CI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.025094304 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_closure" {
     GHC.IOArray.$fEqIOArray_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Arr.$fEqSTArray_$c==_closure+2;
         const GHC.IOArray.$fEqIOArray_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.030145827 UTC

[section ""data" . $wnewIOArray_r80wT_closure" {
     $wnewIOArray_r80wT_closure:
         const $wnewIOArray_r80wT_info;
         const 0;
 },
 sat_s80xv_entry() //  [R1]
         { []
         }
     {offset
       c80DM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c80DN; else goto c80DO;
       c80DN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80DO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c80DH_info;
           _s80xj::P64 = P64[R1 + 24];
           _s80xs::P64 = P64[R1 + 32];
           _s80xo::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s80xj::P64;
           I64[Sp - 32] = _s80xo::I64;
           P64[Sp - 24] = _s80xs::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s80xv_info" {
     sat_s80xv_info:
         const sat_s80xv_entry;
         const 4294967299;
         const 15;
 },
 _c80DH() //  [R1]
         { []
         }
     {offset
       c80DH: // global
           I64[Sp] = block_c80DJ_info;
           _s80xt::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80xt::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c80DH_info" {
     block_c80DH_info:
         const _c80DH;
         const 131;
         const 30;
 },
 _c80DJ() //  [R1]
         { []
         }
     {offset
       c80DJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c80DS; else goto c80DR;
       c80DS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c80DR: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c80DJ_info" {
     block_c80DJ_info:
         const _c80DJ;
         const 131;
         const 30;
 },
 $wnewIOArray_r80wT_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c80DT: // global
           _s80xk::P64 = R5;
           _s80xj::P64 = R4;
           _s80xi::P64 = R3;
           _s80xh::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c80DU; else goto c80DV;
       c80DV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c80DX; else goto c80DW;
       c80DX: // global
           HpAlloc = 24;
           goto c80DU;
       c80DU: // global
           R5 = _s80xk::P64;
           R4 = _s80xj::P64;
           R3 = _s80xi::P64;
           R2 = _s80xh::P64;
           R1 = $wnewIOArray_r80wT_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80DW: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s80xi::P64;
           P64[Hp] = _s80xj::P64;
           I64[Sp - 32] = block_c80Du_info;
           R2 = _s80xh::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 24] = _s80xi::P64;
           P64[Sp - 16] = _s80xj::P64;
           P64[Sp - 8] = _s80xk::P64;
           Sp = Sp - 48;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wnewIOArray_r80wT_info" {
     $wnewIOArray_r80wT_info:
         const $wnewIOArray_r80wT_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S80z1_srt;
 },
 _c80Du() //  [R1]
         { []
         }
     {offset
       c80Du: // global
           _s80xo::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s80xo::I64, 0)) goto c80E0; else goto c80E4;
       c80E0: // global
           I64[Sp] = block_c80DB_info;
           R2 = P64[Sp + 24];
           R1 = _s80xo::I64;
           I64[Sp + 24] = _s80xo::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c80E4: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80Du_info" {
     block_c80Du_info:
         const _c80Du;
         const 3;
         const 4294967326;
         const S80z1_srt;
 },
 _c80DB() //  [R1]
         { []
         }
     {offset
       c80DB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c80E3; else goto c80E2;
       c80E3: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80E2: // global
           I64[Hp - 40] = sat_s80xv_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80DB_info" {
     block_c80DB_info:
         const _c80DB;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.042664814 UTC

[section ""data" . newIOArray1_r80wU_closure" {
     newIOArray1_r80wU_closure:
         const newIOArray1_r80wU_info;
         const 0;
 },
 newIOArray1_r80wU_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80EH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c80EI; else goto c80EJ;
       c80EI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newIOArray1_r80wU_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80EJ: // global
           I64[Sp - 24] = block_c80EE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u80EN; else goto c80EF;
       u80EN: // global
           call _c80EE(R1) args: 0, res: 0, upd: 0;
       c80EF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . newIOArray1_r80wU_info" {
     newIOArray1_r80wU_info:
         const newIOArray1_r80wU_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S80z1_srt+8;
 },
 _c80EE() //  [R1]
         { []
         }
     {offset
       c80EE: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wnewIOArray_r80wT_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80EE_info" {
     block_c80EE_info:
         const _c80EE;
         const 2;
         const 4294967326;
         const S80z1_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.047745126 UTC

[section ""data" . GHC.IOArray.newIOArray_closure" {
     GHC.IOArray.newIOArray_closure:
         const GHC.IOArray.newIOArray_info;
         const 0;
 },
 GHC.IOArray.newIOArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80F1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newIOArray1_r80wU_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.newIOArray_info" {
     GHC.IOArray.newIOArray_info:
         const GHC.IOArray.newIOArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S80z1_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.051233961 UTC

[section ""data" . GHC.IOArray.unsafeReadIOArray_closure" {
     GHC.IOArray.unsafeReadIOArray_closure:
         const GHC.IOArray.unsafeReadIOArray_info;
 },
 GHC.IOArray.unsafeReadIOArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c80Fc: // global
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeReadSTArray_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.unsafeReadIOArray_info" {
     GHC.IOArray.unsafeReadIOArray_info:
         const GHC.IOArray.unsafeReadIOArray_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.054512369 UTC

[section ""data" . GHC.IOArray.unsafeWriteIOArray_closure" {
     GHC.IOArray.unsafeWriteIOArray_closure:
         const GHC.IOArray.unsafeWriteIOArray_info;
 },
 GHC.IOArray.unsafeWriteIOArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80Fn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeWriteSTArray_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.unsafeWriteIOArray_info" {
     GHC.IOArray.unsafeWriteIOArray_info:
         const GHC.IOArray.unsafeWriteIOArray_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.057789047 UTC

[section ""data" . GHC.IOArray.readIOArray1_closure" {
     GHC.IOArray.readIOArray1_closure:
         const GHC.IOArray.readIOArray1_info;
         const 0;
 },
 GHC.IOArray.readIOArray1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80Fy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.readSTArray_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.readIOArray1_info" {
     GHC.IOArray.readIOArray1_info:
         const GHC.IOArray.readIOArray1_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S80z1_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.061661623 UTC

[section ""data" . GHC.IOArray.readIOArray_closure" {
     GHC.IOArray.readIOArray_closure:
         const GHC.IOArray.readIOArray_info;
         const 0;
 },
 GHC.IOArray.readIOArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80FJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.readIOArray1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.readIOArray_info" {
     GHC.IOArray.readIOArray_info:
         const GHC.IOArray.readIOArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S80z1_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.064949472 UTC

[section ""data" . GHC.IOArray.writeIOArray1_closure" {
     GHC.IOArray.writeIOArray1_closure:
         const GHC.IOArray.writeIOArray1_info;
         const 0;
 },
 GHC.IOArray.writeIOArray1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c80FU: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.writeSTArray_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.writeIOArray1_info" {
     GHC.IOArray.writeIOArray1_info:
         const GHC.IOArray.writeIOArray1_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S80z1_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.068341397 UTC

[section ""data" . GHC.IOArray.writeIOArray_closure" {
     GHC.IOArray.writeIOArray_closure:
         const GHC.IOArray.writeIOArray_info;
         const 0;
 },
 GHC.IOArray.writeIOArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c80G5: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.writeIOArray1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.writeIOArray_info" {
     GHC.IOArray.writeIOArray_info:
         const GHC.IOArray.writeIOArray_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S80z1_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.071532282 UTC

[section ""data" . GHC.IOArray.boundsIOArray_closure" {
     GHC.IOArray.boundsIOArray_closure:
         const GHC.IOArray.boundsIOArray_info;
 },
 GHC.IOArray.boundsIOArray_entry() //  [R2]
         { []
         }
     {offset
       c80Gg: // global
           R2 = R2;
           call GHC.Arr.boundsSTArray_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.boundsIOArray_info" {
     GHC.IOArray.boundsIOArray_info:
         const GHC.IOArray.boundsIOArray_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.074753051 UTC

[section ""cstring" . GHC.IOArray.$trModule4_bytes" {
     GHC.IOArray.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.076511083 UTC

[section ""data" . GHC.IOArray.$trModule3_closure" {
     GHC.IOArray.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.078285876 UTC

[section ""cstring" . GHC.IOArray.$trModule2_bytes" {
     GHC.IOArray.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.080074654 UTC

[section ""data" . GHC.IOArray.$trModule1_closure" {
     GHC.IOArray.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.08180996 UTC

[section ""data" . GHC.IOArray.$trModule_closure" {
     GHC.IOArray.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IOArray.$trModule3_closure+1;
         const GHC.IOArray.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.083647342 UTC

[section ""data" . $krep_r80wV_closure" {
     $krep_r80wV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.085442824 UTC

[section ""data" . $krep1_r80wW_closure" {
     $krep1_r80wW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.087243548 UTC

[section ""data" . $krep2_r80wX_closure" {
     $krep2_r80wX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.089808024 UTC

[section ""data" . $krep3_r80wY_closure" {
     $krep3_r80wY_closure:
         const :_con_info;
         const $krep1_r80wW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.091529234 UTC

[section ""data" . $krep4_r80wZ_closure" {
     $krep4_r80wZ_closure:
         const :_con_info;
         const $krep2_r80wX_closure+2;
         const $krep3_r80wY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.093304562 UTC

[section ""data" . $krep5_r80x0_closure" {
     $krep5_r80x0_closure:
         const :_con_info;
         const $krep_r80wV_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.095129948 UTC

[section ""data" . $krep6_r80x1_closure" {
     $krep6_r80x1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcSTArray_closure;
         const $krep5_r80x0_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.096822509 UTC

[section ""cstring" . GHC.IOArray.$tcIOArray2_bytes" {
     GHC.IOArray.$tcIOArray2_bytes:
         I8[] [73,79,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.098559702 UTC

[section ""data" . GHC.IOArray.$tcIOArray1_closure" {
     GHC.IOArray.$tcIOArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tcIOArray2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.100277276 UTC

[section ""data" . GHC.IOArray.$tcIOArray_closure" {
     GHC.IOArray.$tcIOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tcIOArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 5233307069339228571;
         const 18318902734717728881;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.10253147 UTC

[section ""data" . $krep7_r80x2_closure" {
     $krep7_r80x2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IOArray.$tcIOArray_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.104337228 UTC

[section ""data" . GHC.IOArray.$tc'IOArray1_closure" {
     GHC.IOArray.$tc'IOArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r80x1_closure+1;
         const $krep7_r80x2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.106166909 UTC

[section ""cstring" . GHC.IOArray.$tc'IOArray3_bytes" {
     GHC.IOArray.$tc'IOArray3_bytes:
         I8[] [39,73,79,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.107899211 UTC

[section ""data" . GHC.IOArray.$tc'IOArray2_closure" {
     GHC.IOArray.$tc'IOArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tc'IOArray3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.109729714 UTC

[section ""data" . GHC.IOArray.$tc'IOArray_closure" {
     GHC.IOArray.$tc'IOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tc'IOArray2_closure+1;
         const GHC.IOArray.$tc'IOArray1_closure+4;
         const 3384482173433764395;
         const 11270226801258228404;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.111503961 UTC

[section ""relreadonly" . S80z1_srt" {
     S80z1_srt:
         const GHC.Arr.negRange_closure;
         const $wnewIOArray_r80wT_closure;
         const newIOArray1_r80wU_closure;
         const GHC.Arr.readSTArray_closure;
         const GHC.IOArray.readIOArray1_closure;
         const GHC.Arr.writeSTArray_closure;
         const GHC.IOArray.writeIOArray1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.232981225 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:08.23537038 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_$c/=_closure" {
     GHC.IOArray.$fEqIOArray_$c/=_closure:
         const GHC.IOArray.$fEqIOArray_$c/=_info;
 },
 GHC.IOArray.$fEqIOArray_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c80Hw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80HA; else goto c80HB;
       c80HA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IOArray.$fEqIOArray_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c80HB: // global
           I64[Sp - 16] = block_c80Ht_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u80HY; else goto c80Hu;
       u80HY: // global
           call _c80Ht(R1) args: 0, res: 0, upd: 0;
       c80Hu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.$fEqIOArray_$c/=_info" {
     GHC.IOArray.$fEqIOArray_$c/=_info:
         const GHC.IOArray.$fEqIOArray_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c80Ht() //  [R1]
         { []
         }
     {offset
       c80Ht: // global
           I64[Sp] = block_c80Hz_info;
           _s80GO::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80GO::P64;
           if (R1 & 7 != 0) goto u80HX; else goto c80HD;
       u80HX: // global
           call _c80Hz(R1) args: 0, res: 0, upd: 0;
       c80HD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80Ht_info" {
     block_c80Ht_info:
         const _c80Ht;
         const 1;
         const 30;
 },
 _c80Hz() //  [R1]
         { []
         }
     {offset
       c80Hz: // global
           if (P64[Sp + 8] == P64[R1 + 23]) goto c80HT; else goto c80HN;
       c80HT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c80HN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80Hz_info" {
     block_c80Hz_info:
         const _c80Hz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.242830723 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_closure" {
     GHC.IOArray.$fEqIOArray_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Arr.$fEqSTArray_$c==_closure+2;
         const GHC.IOArray.$fEqIOArray_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.247086554 UTC

[section ""data" . $wnewIOArray_r80wT_closure" {
     $wnewIOArray_r80wT_closure:
         const $wnewIOArray_r80wT_info;
         const 0;
 },
 sat_s80H9_entry() //  [R1]
         { []
         }
     {offset
       c80IH: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c80II; else goto c80IJ;
       c80II: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80IJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c80IC_info;
           _s80GX::P64 = P64[R1 + 24];
           _s80H6::P64 = P64[R1 + 32];
           _s80H2::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s80GX::P64;
           I64[Sp - 32] = _s80H2::I64;
           P64[Sp - 24] = _s80H6::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s80H9_info" {
     sat_s80H9_info:
         const sat_s80H9_entry;
         const 4294967299;
         const 15;
 },
 _c80IC() //  [R1]
         { []
         }
     {offset
       c80IC: // global
           I64[Sp] = block_c80IE_info;
           _s80H7::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80H7::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c80IC_info" {
     block_c80IC_info:
         const _c80IC;
         const 131;
         const 30;
 },
 _c80IE() //  [R1]
         { []
         }
     {offset
       c80IE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c80IN; else goto c80IM;
       c80IN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c80IM: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c80IE_info" {
     block_c80IE_info:
         const _c80IE;
         const 131;
         const 30;
 },
 $wnewIOArray_r80wT_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c80IO: // global
           _s80GY::P64 = R5;
           _s80GX::P64 = R4;
           _s80GW::P64 = R3;
           _s80GV::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c80IP; else goto c80IQ;
       c80IQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c80IS; else goto c80IR;
       c80IS: // global
           HpAlloc = 24;
           goto c80IP;
       c80IP: // global
           R5 = _s80GY::P64;
           R4 = _s80GX::P64;
           R3 = _s80GW::P64;
           R2 = _s80GV::P64;
           R1 = $wnewIOArray_r80wT_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80IR: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s80GW::P64;
           P64[Hp] = _s80GX::P64;
           I64[Sp - 32] = block_c80Ip_info;
           R2 = _s80GV::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 24] = _s80GW::P64;
           P64[Sp - 16] = _s80GX::P64;
           P64[Sp - 8] = _s80GY::P64;
           Sp = Sp - 48;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wnewIOArray_r80wT_info" {
     $wnewIOArray_r80wT_info:
         const $wnewIOArray_r80wT_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S80J0_srt;
 },
 _c80Ip() //  [R1]
         { []
         }
     {offset
       c80Ip: // global
           _s80H2::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s80H2::I64, 0)) goto c80IV; else goto c80IZ;
       c80IV: // global
           I64[Sp] = block_c80Iw_info;
           R2 = P64[Sp + 24];
           R1 = _s80H2::I64;
           I64[Sp + 24] = _s80H2::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c80IZ: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80Ip_info" {
     block_c80Ip_info:
         const _c80Ip;
         const 3;
         const 4294967326;
         const S80J0_srt;
 },
 _c80Iw() //  [R1]
         { []
         }
     {offset
       c80Iw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c80IY; else goto c80IX;
       c80IY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80IX: // global
           I64[Hp - 40] = sat_s80H9_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80Iw_info" {
     block_c80Iw_info:
         const _c80Iw;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.259417395 UTC

[section ""data" . newIOArray1_r80wU_closure" {
     newIOArray1_r80wU_closure:
         const newIOArray1_r80wU_info;
         const 0;
 },
 newIOArray1_r80wU_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80JM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c80JN; else goto c80JO;
       c80JN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newIOArray1_r80wU_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80JO: // global
           I64[Sp - 24] = block_c80JJ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u80JS; else goto c80JK;
       u80JS: // global
           call _c80JJ(R1) args: 0, res: 0, upd: 0;
       c80JK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . newIOArray1_r80wU_info" {
     newIOArray1_r80wU_info:
         const newIOArray1_r80wU_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S80J0_srt+8;
 },
 _c80JJ() //  [R1]
         { []
         }
     {offset
       c80JJ: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wnewIOArray_r80wT_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80JJ_info" {
     block_c80JJ_info:
         const _c80JJ;
         const 2;
         const 4294967326;
         const S80J0_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.264482271 UTC

[section ""data" . GHC.IOArray.newIOArray_closure" {
     GHC.IOArray.newIOArray_closure:
         const GHC.IOArray.newIOArray_info;
         const 0;
 },
 GHC.IOArray.newIOArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80K7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newIOArray1_r80wU_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.newIOArray_info" {
     GHC.IOArray.newIOArray_info:
         const GHC.IOArray.newIOArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S80J0_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.267781244 UTC

[section ""data" . GHC.IOArray.unsafeReadIOArray_closure" {
     GHC.IOArray.unsafeReadIOArray_closure:
         const GHC.IOArray.unsafeReadIOArray_info;
 },
 GHC.IOArray.unsafeReadIOArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c80Ki: // global
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeReadSTArray_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.unsafeReadIOArray_info" {
     GHC.IOArray.unsafeReadIOArray_info:
         const GHC.IOArray.unsafeReadIOArray_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.270969901 UTC

[section ""data" . GHC.IOArray.unsafeWriteIOArray_closure" {
     GHC.IOArray.unsafeWriteIOArray_closure:
         const GHC.IOArray.unsafeWriteIOArray_info;
 },
 GHC.IOArray.unsafeWriteIOArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80Kt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeWriteSTArray_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.unsafeWriteIOArray_info" {
     GHC.IOArray.unsafeWriteIOArray_info:
         const GHC.IOArray.unsafeWriteIOArray_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.274337871 UTC

[section ""data" . GHC.IOArray.readIOArray1_closure" {
     GHC.IOArray.readIOArray1_closure:
         const GHC.IOArray.readIOArray1_info;
         const 0;
 },
 GHC.IOArray.readIOArray1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80KE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.readSTArray_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.readIOArray1_info" {
     GHC.IOArray.readIOArray1_info:
         const GHC.IOArray.readIOArray1_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S80J0_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.278151606 UTC

[section ""data" . GHC.IOArray.readIOArray_closure" {
     GHC.IOArray.readIOArray_closure:
         const GHC.IOArray.readIOArray_info;
         const 0;
 },
 GHC.IOArray.readIOArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80KP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.readIOArray1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.readIOArray_info" {
     GHC.IOArray.readIOArray_info:
         const GHC.IOArray.readIOArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S80J0_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.28137528 UTC

[section ""data" . GHC.IOArray.writeIOArray1_closure" {
     GHC.IOArray.writeIOArray1_closure:
         const GHC.IOArray.writeIOArray1_info;
         const 0;
 },
 GHC.IOArray.writeIOArray1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c80L0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.writeSTArray_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.writeIOArray1_info" {
     GHC.IOArray.writeIOArray1_info:
         const GHC.IOArray.writeIOArray1_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S80J0_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.284627073 UTC

[section ""data" . GHC.IOArray.writeIOArray_closure" {
     GHC.IOArray.writeIOArray_closure:
         const GHC.IOArray.writeIOArray_info;
         const 0;
 },
 GHC.IOArray.writeIOArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c80Lb: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.writeIOArray1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.writeIOArray_info" {
     GHC.IOArray.writeIOArray_info:
         const GHC.IOArray.writeIOArray_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S80J0_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.287707532 UTC

[section ""data" . GHC.IOArray.boundsIOArray_closure" {
     GHC.IOArray.boundsIOArray_closure:
         const GHC.IOArray.boundsIOArray_info;
 },
 GHC.IOArray.boundsIOArray_entry() //  [R2]
         { []
         }
     {offset
       c80Lm: // global
           R2 = R2;
           call GHC.Arr.boundsSTArray_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IOArray.boundsIOArray_info" {
     GHC.IOArray.boundsIOArray_info:
         const GHC.IOArray.boundsIOArray_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.290645152 UTC

[section ""cstring" . GHC.IOArray.$trModule4_bytes" {
     GHC.IOArray.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.292267556 UTC

[section ""data" . GHC.IOArray.$trModule3_closure" {
     GHC.IOArray.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.293883406 UTC

[section ""cstring" . GHC.IOArray.$trModule2_bytes" {
     GHC.IOArray.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.295416819 UTC

[section ""data" . GHC.IOArray.$trModule1_closure" {
     GHC.IOArray.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.297038392 UTC

[section ""data" . GHC.IOArray.$trModule_closure" {
     GHC.IOArray.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IOArray.$trModule3_closure+1;
         const GHC.IOArray.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.299509052 UTC

[section ""data" . $krep_r80wV_closure" {
     $krep_r80wV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.301086885 UTC

[section ""data" . $krep1_r80wW_closure" {
     $krep1_r80wW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.303307529 UTC

[section ""data" . $krep2_r80wX_closure" {
     $krep2_r80wX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.304947748 UTC

[section ""data" . $krep3_r80wY_closure" {
     $krep3_r80wY_closure:
         const :_con_info;
         const $krep1_r80wW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.306667933 UTC

[section ""data" . $krep4_r80wZ_closure" {
     $krep4_r80wZ_closure:
         const :_con_info;
         const $krep2_r80wX_closure+2;
         const $krep3_r80wY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.308298547 UTC

[section ""data" . $krep5_r80x0_closure" {
     $krep5_r80x0_closure:
         const :_con_info;
         const $krep_r80wV_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.31002552 UTC

[section ""data" . $krep6_r80x1_closure" {
     $krep6_r80x1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcSTArray_closure;
         const $krep5_r80x0_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.311672699 UTC

[section ""cstring" . GHC.IOArray.$tcIOArray2_bytes" {
     GHC.IOArray.$tcIOArray2_bytes:
         I8[] [73,79,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.313778293 UTC

[section ""data" . GHC.IOArray.$tcIOArray1_closure" {
     GHC.IOArray.$tcIOArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tcIOArray2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.315568159 UTC

[section ""data" . GHC.IOArray.$tcIOArray_closure" {
     GHC.IOArray.$tcIOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tcIOArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 5233307069339228571;
         const 18318902734717728881;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.317322422 UTC

[section ""data" . $krep7_r80x2_closure" {
     $krep7_r80x2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IOArray.$tcIOArray_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.318961837 UTC

[section ""data" . GHC.IOArray.$tc'IOArray1_closure" {
     GHC.IOArray.$tc'IOArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r80x1_closure+1;
         const $krep7_r80x2_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.32062507 UTC

[section ""cstring" . GHC.IOArray.$tc'IOArray3_bytes" {
     GHC.IOArray.$tc'IOArray3_bytes:
         I8[] [39,73,79,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.322283405 UTC

[section ""data" . GHC.IOArray.$tc'IOArray2_closure" {
     GHC.IOArray.$tc'IOArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tc'IOArray3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.32393478 UTC

[section ""data" . GHC.IOArray.$tc'IOArray_closure" {
     GHC.IOArray.$tc'IOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tc'IOArray2_closure+1;
         const GHC.IOArray.$tc'IOArray1_closure+4;
         const 3384482173433764395;
         const 11270226801258228404;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:08.326168216 UTC

[section ""relreadonly" . S80J0_srt" {
     S80J0_srt:
         const GHC.Arr.negRange_closure;
         const $wnewIOArray_r80wT_closure;
         const newIOArray1_r80wU_closure;
         const GHC.Arr.readSTArray_closure;
         const GHC.IOArray.readIOArray1_closure;
         const GHC.Arr.writeSTArray_closure;
         const GHC.IOArray.writeIOArray1_closure;
 }]

